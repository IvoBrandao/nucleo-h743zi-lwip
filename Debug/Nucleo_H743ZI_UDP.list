
Nucleo_H743ZI_UDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000184d4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000231c  08018774  08018774  00028774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aa90  0801aa90  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  0801aa90  0801aa90  0002aa90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801aa98  0801aa98  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801aa98  0801aa98  0002aa98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801aa9c  0801aa9c  0002aa9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  24000000  0801aaa0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00024de0  24000090  0801ab30  00030090  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  24024e70  0801ab30  00034e70  2**0
                  ALLOC
 11 .lwip_sec     00041a00  30000000  0801ab30  00040000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00050d3a  00000000  00000000  000300be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000088cc  00000000  00000000  00080df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002440  00000000  00000000  000896c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000021c8  00000000  00000000  0008bb08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000470e2  00000000  00000000  0008dcd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000337f4  00000000  00000000  000d4db2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0018211b  00000000  00000000  001085a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0028a6c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009980  00000000  00000000  0028a73c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000090 	.word	0x24000090
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801875c 	.word	0x0801875c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000094 	.word	0x24000094
 80002dc:	0801875c 	.word	0x0801875c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
	...

08000690 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4a07      	ldr	r2, [pc, #28]	; (80006bc <vApplicationGetIdleTaskMemory+0x2c>)
 80006a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <vApplicationGetIdleTaskMemory+0x30>)
 80006a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ae:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	240000ac 	.word	0x240000ac
 80006c0:	24000100 	.word	0x24000100

080006c4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80006d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	4a06      	ldr	r2, [pc, #24]	; (80006f4 <vApplicationGetTimerTaskMemory+0x30>)
 80006da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006e2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	24001100 	.word	0x24001100
 80006f4:	24001154 	.word	0x24001154

080006f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006f8:	b5b0      	push	{r4, r5, r7, lr}
 80006fa:	b09c      	sub	sp, #112	; 0x70
 80006fc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of StartupTask */
  osThreadDef(StartupTask, Task_Startup, osPriorityNormal, 0, 2048);
 80006fe:	4b27      	ldr	r3, [pc, #156]	; (800079c <MX_FREERTOS_Init+0xa4>)
 8000700:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000704:	461d      	mov	r5, r3
 8000706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800070e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StartupTaskHandle = osThreadCreate(osThread(StartupTask), NULL);
 8000712:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f00a fc4e 	bl	800afba <osThreadCreate>
 800071e:	4602      	mov	r2, r0
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_FREERTOS_Init+0xa8>)
 8000722:	601a      	str	r2, [r3, #0]

  /* definition and creation of HeartBeat_Task */
  osThreadDef(HeartBeat_Task, Task_HeartBeat, osPriorityNormal, 0, 2048);
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_FREERTOS_Init+0xac>)
 8000726:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800072a:	461d      	mov	r5, r3
 800072c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000730:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000734:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HeartBeat_TaskHandle = osThreadCreate(osThread(HeartBeat_Task), NULL);
 8000738:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f00a fc3b 	bl	800afba <osThreadCreate>
 8000744:	4602      	mov	r2, r0
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_FREERTOS_Init+0xb0>)
 8000748:	601a      	str	r2, [r3, #0]

  /* definition and creation of UdpServer_Task */
  osThreadDef(UdpServer_Task, Task_UdpServer, osPriorityBelowNormal, 0, 2048);
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_FREERTOS_Init+0xb4>)
 800074c:	f107 041c 	add.w	r4, r7, #28
 8000750:	461d      	mov	r5, r3
 8000752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000756:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800075a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UdpServer_TaskHandle = osThreadCreate(osThread(UdpServer_Task), NULL);
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f00a fc28 	bl	800afba <osThreadCreate>
 800076a:	4602      	mov	r2, r0
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_FREERTOS_Init+0xb8>)
 800076e:	601a      	str	r2, [r3, #0]

  /* definition and creation of DHCP_Task */
  osThreadDef(DHCP_Task, TASK_DHCP, osPriorityNormal, 0, 1024);
 8000770:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_FREERTOS_Init+0xbc>)
 8000772:	463c      	mov	r4, r7
 8000774:	461d      	mov	r5, r3
 8000776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800077a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800077e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DHCP_TaskHandle = osThreadCreate(osThread(DHCP_Task), NULL);
 8000782:	463b      	mov	r3, r7
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f00a fc17 	bl	800afba <osThreadCreate>
 800078c:	4602      	mov	r2, r0
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_FREERTOS_Init+0xc0>)
 8000790:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000792:	bf00      	nop
 8000794:	3770      	adds	r7, #112	; 0x70
 8000796:	46bd      	mov	sp, r7
 8000798:	bdb0      	pop	{r4, r5, r7, pc}
 800079a:	bf00      	nop
 800079c:	08018780 	.word	0x08018780
 80007a0:	2402194c 	.word	0x2402194c
 80007a4:	080187ac 	.word	0x080187ac
 80007a8:	24021954 	.word	0x24021954
 80007ac:	080187d8 	.word	0x080187d8
 80007b0:	24021958 	.word	0x24021958
 80007b4:	08018800 	.word	0x08018800
 80007b8:	24021948 	.word	0x24021948

080007bc <Task_Startup>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_Task_Startup */
void Task_Startup(void const * argument)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80007c4:	f009 fe0a 	bl	800a3dc <MX_LWIP_Init>
  /* Infinite loop */
  for(;;)
  {

	  // Terminate the current thread
 	osThreadTerminate(NULL);
 80007c8:	2000      	movs	r0, #0
 80007ca:	f00a fc42 	bl	800b052 <osThreadTerminate>
 80007ce:	e7fb      	b.n	80007c8 <Task_Startup+0xc>

080007d0 <Task_HeartBeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_HeartBeat */
void Task_HeartBeat(void const * argument)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007dc:	4803      	ldr	r0, [pc, #12]	; (80007ec <Task_HeartBeat+0x1c>)
 80007de:	f003 f9b7 	bl	8003b50 <HAL_GPIO_TogglePin>
    osDelay(100);
 80007e2:	2064      	movs	r0, #100	; 0x64
 80007e4:	f00a fc41 	bl	800b06a <osDelay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007e8:	e7f6      	b.n	80007d8 <Task_HeartBeat+0x8>
 80007ea:	bf00      	nop
 80007ec:	58020400 	.word	0x58020400

080007f0 <Task_UdpServer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_UdpServer */
void Task_UdpServer(void const * argument)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_UdpServer */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80007f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007fc:	f00a fc35 	bl	800b06a <osDelay>
 8000800:	e7fa      	b.n	80007f8 <Task_UdpServer+0x8>

08000802 <TASK_DHCP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TASK_DHCP */
void TASK_DHCP(void const * argument)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
	    break;
	    default: break;
	    }
#endif
	    /* wait 500 ms */
	    osDelay(500);
 800080a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800080e:	f00a fc2c 	bl	800b06a <osDelay>
 8000812:	e7fa      	b.n	800080a <TASK_DHCP+0x8>

08000814 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	; 0x30
 8000818:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	4b4f      	ldr	r3, [pc, #316]	; (8000968 <MX_GPIO_Init+0x154>)
 800082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000830:	4a4d      	ldr	r2, [pc, #308]	; (8000968 <MX_GPIO_Init+0x154>)
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083a:	4b4b      	ldr	r3, [pc, #300]	; (8000968 <MX_GPIO_Init+0x154>)
 800083c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	61bb      	str	r3, [r7, #24]
 8000846:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000848:	4b47      	ldr	r3, [pc, #284]	; (8000968 <MX_GPIO_Init+0x154>)
 800084a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084e:	4a46      	ldr	r2, [pc, #280]	; (8000968 <MX_GPIO_Init+0x154>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000854:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000858:	4b43      	ldr	r3, [pc, #268]	; (8000968 <MX_GPIO_Init+0x154>)
 800085a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b40      	ldr	r3, [pc, #256]	; (8000968 <MX_GPIO_Init+0x154>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086c:	4a3e      	ldr	r2, [pc, #248]	; (8000968 <MX_GPIO_Init+0x154>)
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000876:	4b3c      	ldr	r3, [pc, #240]	; (8000968 <MX_GPIO_Init+0x154>)
 8000878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000884:	4b38      	ldr	r3, [pc, #224]	; (8000968 <MX_GPIO_Init+0x154>)
 8000886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088a:	4a37      	ldr	r2, [pc, #220]	; (8000968 <MX_GPIO_Init+0x154>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000894:	4b34      	ldr	r3, [pc, #208]	; (8000968 <MX_GPIO_Init+0x154>)
 8000896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a2:	4b31      	ldr	r3, [pc, #196]	; (8000968 <MX_GPIO_Init+0x154>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a8:	4a2f      	ldr	r2, [pc, #188]	; (8000968 <MX_GPIO_Init+0x154>)
 80008aa:	f043 0308 	orr.w	r3, r3, #8
 80008ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b2:	4b2d      	ldr	r3, [pc, #180]	; (8000968 <MX_GPIO_Init+0x154>)
 80008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b8:	f003 0308 	and.w	r3, r3, #8
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c0:	4b29      	ldr	r3, [pc, #164]	; (8000968 <MX_GPIO_Init+0x154>)
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c6:	4a28      	ldr	r2, [pc, #160]	; (8000968 <MX_GPIO_Init+0x154>)
 80008c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d0:	4b25      	ldr	r3, [pc, #148]	; (8000968 <MX_GPIO_Init+0x154>)
 80008d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80008e4:	4821      	ldr	r0, [pc, #132]	; (800096c <MX_GPIO_Init+0x158>)
 80008e6:	f003 f8ff 	bl	8003ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2140      	movs	r1, #64	; 0x40
 80008ee:	4820      	ldr	r0, [pc, #128]	; (8000970 <MX_GPIO_Init+0x15c>)
 80008f0:	f003 f8fa 	bl	8003ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <MX_GPIO_Init+0x160>)
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	481b      	ldr	r0, [pc, #108]	; (8000978 <MX_GPIO_Init+0x164>)
 800090a:	f002 fe3d 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800090e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4811      	ldr	r0, [pc, #68]	; (800096c <MX_GPIO_Init+0x158>)
 8000928:	f002 fe2e 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800092c:	2340      	movs	r3, #64	; 0x40
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	480b      	ldr	r0, [pc, #44]	; (8000970 <MX_GPIO_Init+0x15c>)
 8000944:	f002 fe20 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_GPIO_Init+0x15c>)
 800095c:	f002 fe14 	bl	8003588 <HAL_GPIO_Init>

}
 8000960:	bf00      	nop
 8000962:	3730      	adds	r7, #48	; 0x30
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	58024400 	.word	0x58024400
 800096c:	58020400 	.word	0x58020400
 8000970:	58021800 	.word	0x58021800
 8000974:	11110000 	.word	0x11110000
 8000978:	58020800 	.word	0x58020800

0800097c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000980:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000984:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <SCB_EnableICache+0x3c>)
 800098a:	2200      	movs	r2, #0
 800098c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000990:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000994:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <SCB_EnableICache+0x3c>)
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	4a06      	ldr	r2, [pc, #24]	; (80009b8 <SCB_EnableICache+0x3c>)
 800099e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009a8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <SCB_EnableDCache+0x7c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009ca:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <SCB_EnableDCache+0x7c>)
 80009d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009d4:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	0b5b      	lsrs	r3, r3, #13
 80009da:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009de:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	08db      	lsrs	r3, r3, #3
 80009e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80009e8:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	015a      	lsls	r2, r3, #5
 80009ee:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80009f2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80009f8:	490f      	ldr	r1, [pc, #60]	; (8000a38 <SCB_EnableDCache+0x7c>)
 80009fa:	4313      	orrs	r3, r2
 80009fc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	1e5a      	subs	r2, r3, #1
 8000a04:	60ba      	str	r2, [r7, #8]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1ef      	bne.n	80009ea <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	1e5a      	subs	r2, r3, #1
 8000a0e:	60fa      	str	r2, [r7, #12]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d1e5      	bne.n	80009e0 <SCB_EnableDCache+0x24>
 8000a14:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <SCB_EnableDCache+0x7c>)
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	4a06      	ldr	r2, [pc, #24]	; (8000a38 <SCB_EnableDCache+0x7c>)
 8000a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a22:	6153      	str	r3, [r2, #20]
 8000a24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a28:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a40:	f000 f8c2 	bl	8000bc8 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000a44:	f7ff ff9a 	bl	800097c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000a48:	f7ff ffb8 	bl	80009bc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4c:	f000 fd02 	bl	8001454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a50:	f000 f80a 	bl	8000a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a54:	f7ff fede 	bl	8000814 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a58:	f000 fadc 	bl	8001014 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000a5c:	f7ff fe4c 	bl	80006f8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000a60:	f00a fa94 	bl	800af8c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <main+0x28>
	...

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b0cc      	sub	sp, #304	; 0x130
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a72:	224c      	movs	r2, #76	; 0x4c
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f016 ff84 	bl	8017984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a80:	2220      	movs	r2, #32
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f016 ff7d 	bl	8017984 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	4618      	mov	r0, r3
 8000a90:	23bc      	movs	r3, #188	; 0xbc
 8000a92:	461a      	mov	r2, r3
 8000a94:	2100      	movs	r1, #0
 8000a96:	f016 ff75 	bl	8017984 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a9a:	2002      	movs	r0, #2
 8000a9c:	f003 f882 	bl	8003ba4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	4b46      	ldr	r3, [pc, #280]	; (8000bc0 <SystemClock_Config+0x158>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	4a45      	ldr	r2, [pc, #276]	; (8000bc0 <SystemClock_Config+0x158>)
 8000aac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ab0:	6193      	str	r3, [r2, #24]
 8000ab2:	4b43      	ldr	r3, [pc, #268]	; (8000bc0 <SystemClock_Config+0x158>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	4b41      	ldr	r3, [pc, #260]	; (8000bc4 <SystemClock_Config+0x15c>)
 8000ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac2:	4a40      	ldr	r2, [pc, #256]	; (8000bc4 <SystemClock_Config+0x15c>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000aca:	4b3e      	ldr	r3, [pc, #248]	; (8000bc4 <SystemClock_Config+0x15c>)
 8000acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ace:	f003 0201 	and.w	r2, r3, #1
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ada:	bf00      	nop
 8000adc:	4b38      	ldr	r3, [pc, #224]	; (8000bc0 <SystemClock_Config+0x158>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ae8:	d1f8      	bne.n	8000adc <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aea:	2301      	movs	r3, #1
 8000aec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af8:	2302      	movs	r3, #2
 8000afa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afe:	2302      	movs	r3, #2
 8000b00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000b0a:	2378      	movs	r3, #120	; 0x78
 8000b0c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b16:	2304      	movs	r3, #4
 8000b18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b22:	230c      	movs	r3, #12
 8000b24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 f879 	bl	8003c30 <HAL_RCC_OscConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000b44:	f000 f8b6 	bl	8000cb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b48:	233f      	movs	r3, #63	; 0x3f
 8000b4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b5a:	2308      	movs	r3, #8
 8000b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b60:	2340      	movs	r3, #64	; 0x40
 8000b62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b66:	2340      	movs	r3, #64	; 0x40
 8000b68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b74:	2340      	movs	r3, #64	; 0x40
 8000b76:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b7a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b7e:	2104      	movs	r1, #4
 8000b80:	4618      	mov	r0, r3
 8000b82:	f003 fd53 	bl	800462c <HAL_RCC_ClockConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000b8c:	f000 f892 	bl	8000cb4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	2202      	movs	r2, #2
 8000b96:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b98:	f107 0308 	add.w	r3, r7, #8
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f004 fac1 	bl	800512c <HAL_RCCEx_PeriphCLKConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 8000bb0:	f000 f880 	bl	8000cb4 <Error_Handler>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	58024800 	.word	0x58024800
 8000bc4:	58000400 	.word	0x58000400

08000bc8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bce:	463b      	mov	r3, r7
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bda:	f000 fdd3 	bl	8001784 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bde:	2301      	movs	r3, #1
 8000be0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000be6:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <MPU_Config+0xc0>)
 8000be8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000bea:	2307      	movs	r3, #7
 8000bec:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000c06:	2301      	movs	r3, #1
 8000c08:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 fded 	bl	80017ec <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c12:	2301      	movs	r3, #1
 8000c14:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c16:	2301      	movs	r3, #1
 8000c18:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MPU_Config+0xc4>)
 8000c1c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000c1e:	230d      	movs	r3, #13
 8000c20:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c32:	2301      	movs	r3, #1
 8000c34:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c3e:	463b      	mov	r3, r7
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 fdd3 	bl	80017ec <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c46:	2301      	movs	r3, #1
 8000c48:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MPU_Config+0xc0>)
 8000c50:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000c52:	230d      	movs	r3, #13
 8000c54:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c72:	463b      	mov	r3, r7
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 fdb9 	bl	80017ec <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c7a:	2004      	movs	r0, #4
 8000c7c:	f000 fd98 	bl	80017b0 <HAL_MPU_Enable>

}
 8000c80:	bf00      	nop
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	30040000 	.word	0x30040000
 8000c8c:	30044000 	.word	0x30044000

08000c90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d101      	bne.n	8000ca6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ca2:	f000 fc13 	bl	80014cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40010000 	.word	0x40010000

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
 8000cca:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_MspInit+0x38>)
 8000ce0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <HAL_MspInit+0x38>)
 8000ce6:	f043 0302 	orr.w	r3, r3, #2
 8000cea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_MspInit+0x38>)
 8000cf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	210f      	movs	r1, #15
 8000d00:	f06f 0001 	mvn.w	r0, #1
 8000d04:	f000 fcfc 	bl	8001700 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	58024400 	.word	0x58024400

08000d14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08e      	sub	sp, #56	; 0x38
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8000d24:	2200      	movs	r2, #0
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	2019      	movs	r0, #25
 8000d2a:	f000 fce9 	bl	8001700 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8000d2e:	2019      	movs	r0, #25
 8000d30:	f000 fd10 	bl	8001754 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d34:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <HAL_InitTick+0xa8>)
 8000d36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d3a:	4a20      	ldr	r2, [pc, #128]	; (8000dbc <HAL_InitTick+0xa8>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d44:	4b1d      	ldr	r3, [pc, #116]	; (8000dbc <HAL_InitTick+0xa8>)
 8000d46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d52:	f107 020c 	add.w	r2, r7, #12
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f004 f9a3 	bl	80050a8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d62:	f004 f98b 	bl	800507c <HAL_RCC_GetPCLK2Freq>
 8000d66:	4603      	mov	r3, r0
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	637b      	str	r3, [r7, #52]	; 0x34
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d6e:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <HAL_InitTick+0xac>)
 8000d70:	fba2 2303 	umull	r2, r3, r2, r3
 8000d74:	0c9b      	lsrs	r3, r3, #18
 8000d76:	3b01      	subs	r3, #1
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_InitTick+0xb0>)
 8000d7c:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <HAL_InitTick+0xb4>)
 8000d7e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_InitTick+0xb0>)
 8000d82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d86:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d88:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <HAL_InitTick+0xb0>)
 8000d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_InitTick+0xb0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <HAL_InitTick+0xb0>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d9a:	480a      	ldr	r0, [pc, #40]	; (8000dc4 <HAL_InitTick+0xb0>)
 8000d9c:	f006 f83c 	bl	8006e18 <HAL_TIM_Base_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d104      	bne.n	8000db0 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <HAL_InitTick+0xb0>)
 8000da8:	f006 f90c 	bl	8006fc4 <HAL_TIM_Base_Start_IT>
 8000dac:	4603      	mov	r3, r0
 8000dae:	e000      	b.n	8000db2 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3738      	adds	r7, #56	; 0x38
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	58024400 	.word	0x58024400
 8000dc0:	431bde83 	.word	0x431bde83
 8000dc4:	2402195c 	.word	0x2402195c
 8000dc8:	40010000 	.word	0x40010000

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__BKPT();
 8000dde:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <HardFault_Handler+0x6>

08000de2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <MemManage_Handler+0x4>

08000de8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <BusFault_Handler+0x4>

08000dee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <UsageFault_Handler+0x4>

08000df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
	...

08000e04 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <TIM1_UP_IRQHandler+0x10>)
 8000e0a:	f006 f96b 	bl	80070e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2402195c 	.word	0x2402195c

08000e18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	e00a      	b.n	8000e40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e2a:	f3af 8000 	nop.w
 8000e2e:	4601      	mov	r1, r0
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	1c5a      	adds	r2, r3, #1
 8000e34:	60ba      	str	r2, [r7, #8]
 8000e36:	b2ca      	uxtb	r2, r1
 8000e38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbf0      	blt.n	8000e2a <_read+0x12>
	}

return len;
 8000e48:	687b      	ldr	r3, [r7, #4]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	60f8      	str	r0, [r7, #12]
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	e009      	b.n	8000e78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	60ba      	str	r2, [r7, #8]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3301      	adds	r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	dbf1      	blt.n	8000e64 <_write+0x12>
	}
	return len;
 8000e80:	687b      	ldr	r3, [r7, #4]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <_close>:

int _close(int file)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
	return -1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eb2:	605a      	str	r2, [r3, #4]
	return 0;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <_isatty>:

int _isatty(int file)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
	return 1;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
	return 0;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <_sbrk+0x50>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d102      	bne.n	8000f0a <_sbrk+0x16>
		heap_end = &end;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <_sbrk+0x50>)
 8000f06:	4a10      	ldr	r2, [pc, #64]	; (8000f48 <_sbrk+0x54>)
 8000f08:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <_sbrk+0x50>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <_sbrk+0x50>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4413      	add	r3, r2
 8000f18:	466a      	mov	r2, sp
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d905      	bls.n	8000f2a <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <_sbrk+0x58>)
 8000f20:	220c      	movs	r2, #12
 8000f22:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
 8000f28:	e006      	b.n	8000f38 <_sbrk+0x44>
	}

	heap_end += incr;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <_sbrk+0x50>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <_sbrk+0x50>)
 8000f34:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f36:	68fb      	ldr	r3, [r7, #12]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	24002154 	.word	0x24002154
 8000f48:	24024e70 	.word	0x24024e70
 8000f4c:	24024e68 	.word	0x24024e68

08000f50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f54:	4b29      	ldr	r3, [pc, #164]	; (8000ffc <SystemInit+0xac>)
 8000f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5a:	4a28      	ldr	r2, [pc, #160]	; (8000ffc <SystemInit+0xac>)
 8000f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f64:	4b26      	ldr	r3, [pc, #152]	; (8001000 <SystemInit+0xb0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a25      	ldr	r2, [pc, #148]	; (8001000 <SystemInit+0xb0>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f70:	4b23      	ldr	r3, [pc, #140]	; (8001000 <SystemInit+0xb0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f76:	4b22      	ldr	r3, [pc, #136]	; (8001000 <SystemInit+0xb0>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	4921      	ldr	r1, [pc, #132]	; (8001000 <SystemInit+0xb0>)
 8000f7c:	4b21      	ldr	r3, [pc, #132]	; (8001004 <SystemInit+0xb4>)
 8000f7e:	4013      	ands	r3, r2
 8000f80:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f82:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <SystemInit+0xb0>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <SystemInit+0xb0>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f8e:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <SystemInit+0xb0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000f94:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <SystemInit+0xb0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <SystemInit+0xb0>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <SystemInit+0xb0>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fa6:	4b16      	ldr	r3, [pc, #88]	; (8001000 <SystemInit+0xb0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <SystemInit+0xb0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <SystemInit+0xb0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <SystemInit+0xb0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <SystemInit+0xb0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fc4:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <SystemInit+0xb0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <SystemInit+0xb0>)
 8000fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <SystemInit+0xb0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <SystemInit+0xb8>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <SystemInit+0xbc>)
 8000fdc:	4013      	ands	r3, r2
 8000fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fe2:	d202      	bcs.n	8000fea <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <SystemInit+0xc0>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <SystemInit+0xac>)
 8000fec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ff0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00
 8001000:	58024400 	.word	0x58024400
 8001004:	eaf6ed7f 	.word	0xeaf6ed7f
 8001008:	5c001000 	.word	0x5c001000
 800100c:	ffff0000 	.word	0xffff0000
 8001010:	51008108 	.word	0x51008108

08001014 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001018:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <MX_USART3_UART_Init+0x90>)
 800101a:	4a23      	ldr	r2, [pc, #140]	; (80010a8 <MX_USART3_UART_Init+0x94>)
 800101c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MX_USART3_UART_Init+0x90>)
 8001020:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001024:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <MX_USART3_UART_Init+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_USART3_UART_Init+0x90>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_USART3_UART_Init+0x90>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001038:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <MX_USART3_UART_Init+0x90>)
 800103a:	220c      	movs	r2, #12
 800103c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_USART3_UART_Init+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_USART3_UART_Init+0x90>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_USART3_UART_Init+0x90>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_USART3_UART_Init+0x90>)
 8001052:	2200      	movs	r2, #0
 8001054:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_USART3_UART_Init+0x90>)
 8001058:	2200      	movs	r2, #0
 800105a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800105c:	4811      	ldr	r0, [pc, #68]	; (80010a4 <MX_USART3_UART_Init+0x90>)
 800105e:	f006 fa41 	bl	80074e4 <HAL_UART_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001068:	f7ff fe24 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800106c:	2100      	movs	r1, #0
 800106e:	480d      	ldr	r0, [pc, #52]	; (80010a4 <MX_USART3_UART_Init+0x90>)
 8001070:	f009 f818 	bl	800a0a4 <HAL_UARTEx_SetTxFifoThreshold>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800107a:	f7ff fe1b 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800107e:	2100      	movs	r1, #0
 8001080:	4808      	ldr	r0, [pc, #32]	; (80010a4 <MX_USART3_UART_Init+0x90>)
 8001082:	f009 f8a9 	bl	800a1d8 <HAL_UARTEx_SetRxFifoThreshold>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800108c:	f7ff fe12 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <MX_USART3_UART_Init+0x90>)
 8001092:	f008 ff91 	bl	8009fb8 <HAL_UARTEx_DisableFifoMode>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800109c:	f7ff fe0a 	bl	8000cb4 <Error_Handler>
  }

}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2402199c 	.word	0x2402199c
 80010a8:	40004800 	.word	0x40004800

080010ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a1a      	ldr	r2, [pc, #104]	; (8001134 <HAL_UART_MspInit+0x88>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d12e      	bne.n	800112c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <HAL_UART_MspInit+0x8c>)
 80010d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010d4:	4a18      	ldr	r2, [pc, #96]	; (8001138 <HAL_UART_MspInit+0x8c>)
 80010d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <HAL_UART_MspInit+0x8c>)
 80010e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_UART_MspInit+0x8c>)
 80010ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f2:	4a11      	ldr	r2, [pc, #68]	; (8001138 <HAL_UART_MspInit+0x8c>)
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_UART_MspInit+0x8c>)
 80010fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001102:	f003 0308 	and.w	r3, r3, #8
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800110a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800110e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800111c:	2307      	movs	r3, #7
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <HAL_UART_MspInit+0x90>)
 8001128:	f002 fa2e 	bl	8003588 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800112c:	bf00      	nop
 800112e:	3728      	adds	r7, #40	; 0x28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40004800 	.word	0x40004800
 8001138:	58024400 	.word	0x58024400
 800113c:	58020c00 	.word	0x58020c00

08001140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001178 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001144:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001146:	e003      	b.n	8001150 <LoopCopyDataInit>

08001148 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800114a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800114c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800114e:	3104      	adds	r1, #4

08001150 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001150:	480b      	ldr	r0, [pc, #44]	; (8001180 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001154:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001156:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001158:	d3f6      	bcc.n	8001148 <CopyDataInit>
  ldr  r2, =_sbss
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800115c:	e002      	b.n	8001164 <LoopFillZerobss>

0800115e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800115e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001160:	f842 3b04 	str.w	r3, [r2], #4

08001164 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001166:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001168:	d3f9      	bcc.n	800115e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800116a:	f7ff fef1 	bl	8000f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116e:	f016 fbcb 	bl	8017908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001172:	f7ff fc63 	bl	8000a3c <main>
  bx  lr    
 8001176:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001178:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800117c:	0801aaa0 	.word	0x0801aaa0
  ldr  r0, =_sdata
 8001180:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001184:	24000090 	.word	0x24000090
  ldr  r2, =_sbss
 8001188:	24000090 	.word	0x24000090
  ldr  r3, = _ebss
 800118c:	24024e70 	.word	0x24024e70

08001190 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC3_IRQHandler>

08001192 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d00b      	beq.n	80011ba <LAN8742_RegisterBusIO+0x28>
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d007      	beq.n	80011ba <LAN8742_RegisterBusIO+0x28>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <LAN8742_RegisterBusIO+0x28>
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d102      	bne.n	80011c0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	e014      	b.n	80011ea <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	691a      	ldr	r2, [r3, #16]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d17c      	bne.n	8001310 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d002      	beq.n	8001224 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2220      	movs	r2, #32
 8001228:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	e01c      	b.n	800126a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	f107 0208 	add.w	r2, r7, #8
 8001238:	2112      	movs	r1, #18
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	4798      	blx	r3
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	da03      	bge.n	800124c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001244:	f06f 0304 	mvn.w	r3, #4
 8001248:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800124a:	e00b      	b.n	8001264 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	f003 031f 	and.w	r3, r3, #31
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	429a      	cmp	r2, r3
 8001256:	d105      	bne.n	8001264 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
         break;
 8001262:	e005      	b.n	8001270 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	3301      	adds	r3, #1
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	2b1f      	cmp	r3, #31
 800126e:	d9df      	bls.n	8001230 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b1f      	cmp	r3, #31
 8001276:	d902      	bls.n	800127e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001278:	f06f 0302 	mvn.w	r3, #2
 800127c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d145      	bne.n	8001310 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	6810      	ldr	r0, [r2, #0]
 800128c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001290:	2100      	movs	r1, #0
 8001292:	4798      	blx	r3
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	db37      	blt.n	800130a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6810      	ldr	r0, [r2, #0]
 80012a2:	f107 0208 	add.w	r2, r7, #8
 80012a6:	2100      	movs	r1, #0
 80012a8:	4798      	blx	r3
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db28      	blt.n	8001302 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4798      	blx	r3
 80012b6:	4603      	mov	r3, r0
 80012b8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80012ba:	e01c      	b.n	80012f6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4798      	blx	r3
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012ce:	d80e      	bhi.n	80012ee <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	6810      	ldr	r0, [r2, #0]
 80012d8:	f107 0208 	add.w	r2, r7, #8
 80012dc:	2100      	movs	r1, #0
 80012de:	4798      	blx	r3
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	da07      	bge.n	80012f6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80012e6:	f06f 0304 	mvn.w	r3, #4
 80012ea:	613b      	str	r3, [r7, #16]
                 break;
 80012ec:	e010      	b.n	8001310 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80012ee:	f06f 0301 	mvn.w	r3, #1
 80012f2:	613b      	str	r3, [r7, #16]
               break;
 80012f4:	e00c      	b.n	8001310 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1dd      	bne.n	80012bc <LAN8742_Init+0xc6>
 8001300:	e006      	b.n	8001310 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001302:	f06f 0304 	mvn.w	r3, #4
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	e002      	b.n	8001310 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800130a:	f06f 0303 	mvn.w	r3, #3
 800130e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d112      	bne.n	800133c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	4798      	blx	r3
 800131c:	4603      	mov	r3, r0
 800131e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001320:	bf00      	nop
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	4798      	blx	r3
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001334:	d9f5      	bls.n	8001322 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800133c:	693b      	ldr	r3, [r7, #16]
 }
 800133e:	4618      	mov	r0, r3
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b084      	sub	sp, #16
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	6810      	ldr	r0, [r2, #0]
 800135a:	f107 020c 	add.w	r2, r7, #12
 800135e:	2101      	movs	r1, #1
 8001360:	4798      	blx	r3
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	da02      	bge.n	800136e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001368:	f06f 0304 	mvn.w	r3, #4
 800136c:	e06e      	b.n	800144c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6810      	ldr	r0, [r2, #0]
 8001376:	f107 020c 	add.w	r2, r7, #12
 800137a:	2101      	movs	r1, #1
 800137c:	4798      	blx	r3
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	da02      	bge.n	800138a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001384:	f06f 0304 	mvn.w	r3, #4
 8001388:	e060      	b.n	800144c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001394:	2301      	movs	r3, #1
 8001396:	e059      	b.n	800144c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6810      	ldr	r0, [r2, #0]
 80013a0:	f107 020c 	add.w	r2, r7, #12
 80013a4:	2100      	movs	r1, #0
 80013a6:	4798      	blx	r3
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	da02      	bge.n	80013b4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80013ae:	f06f 0304 	mvn.w	r3, #4
 80013b2:	e04b      	b.n	800144c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d11b      	bne.n	80013f6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d006      	beq.n	80013d6 <LAN8742_GetLinkState+0x90>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80013d2:	2302      	movs	r3, #2
 80013d4:	e03a      	b.n	800144c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e033      	b.n	800144c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80013ee:	2304      	movs	r3, #4
 80013f0:	e02c      	b.n	800144c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80013f2:	2305      	movs	r3, #5
 80013f4:	e02a      	b.n	800144c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6810      	ldr	r0, [r2, #0]
 80013fe:	f107 020c 	add.w	r2, r7, #12
 8001402:	211f      	movs	r1, #31
 8001404:	4798      	blx	r3
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	da02      	bge.n	8001412 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800140c:	f06f 0304 	mvn.w	r3, #4
 8001410:	e01c      	b.n	800144c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800141c:	2306      	movs	r3, #6
 800141e:	e015      	b.n	800144c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f003 031c 	and.w	r3, r3, #28
 8001426:	2b18      	cmp	r3, #24
 8001428:	d101      	bne.n	800142e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800142a:	2302      	movs	r3, #2
 800142c:	e00e      	b.n	800144c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f003 031c 	and.w	r3, r3, #28
 8001434:	2b08      	cmp	r3, #8
 8001436:	d101      	bne.n	800143c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001438:	2303      	movs	r3, #3
 800143a:	e007      	b.n	800144c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 031c 	and.w	r3, r3, #28
 8001442:	2b14      	cmp	r3, #20
 8001444:	d101      	bne.n	800144a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001446:	2304      	movs	r3, #4
 8001448:	e000      	b.n	800144c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800144a:	2305      	movs	r3, #5
    }				
  }
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145a:	2003      	movs	r0, #3
 800145c:	f000 f930 	bl	80016c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001460:	f003 fc54 	bl	8004d0c <HAL_RCC_GetSysClockFreq>
 8001464:	4601      	mov	r1, r0
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_Init+0x68>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	0a1b      	lsrs	r3, r3, #8
 800146c:	f003 030f 	and.w	r3, r3, #15
 8001470:	4a13      	ldr	r2, [pc, #76]	; (80014c0 <HAL_Init+0x6c>)
 8001472:	5cd3      	ldrb	r3, [r2, r3]
 8001474:	f003 031f 	and.w	r3, r3, #31
 8001478:	fa21 f303 	lsr.w	r3, r1, r3
 800147c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_Init+0x68>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <HAL_Init+0x6c>)
 8001488:	5cd3      	ldrb	r3, [r2, r3]
 800148a:	f003 031f 	and.w	r3, r3, #31
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	fa22 f303 	lsr.w	r3, r2, r3
 8001494:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <HAL_Init+0x70>)
 8001496:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001498:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <HAL_Init+0x74>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800149e:	2000      	movs	r0, #0
 80014a0:	f7ff fc38 	bl	8000d14 <HAL_InitTick>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e002      	b.n	80014b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014ae:	f7ff fc13 	bl	8000cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	58024400 	.word	0x58024400
 80014c0:	0801a8a0 	.word	0x0801a8a0
 80014c4:	24000004 	.word	0x24000004
 80014c8:	24000000 	.word	0x24000000

080014cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_IncTick+0x20>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_IncTick+0x24>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <HAL_IncTick+0x24>)
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	2400000c 	.word	0x2400000c
 80014f0:	24021a28 	.word	0x24021a28

080014f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return uwTick;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <HAL_GetTick+0x14>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	24021a28 	.word	0x24021a28

0800150c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <HAL_GetREVID+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	0c1b      	lsrs	r3, r3, #16
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	5c001000 	.word	0x5c001000

08001524 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d008      	beq.n	8001544 <HAL_SYSCFG_ETHInterfaceSelect+0x20>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001538:	d004      	beq.n	8001544 <HAL_SYSCFG_ETHInterfaceSelect+0x20>
 800153a:	f240 215b 	movw	r1, #603	; 0x25b
 800153e:	4807      	ldr	r0, [pc, #28]	; (800155c <HAL_SYSCFG_ETHInterfaceSelect+0x38>)
 8001540:	f7ff fbbf 	bl	8000cc2 <assert_failed>

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_SYSCFG_ETHInterfaceSelect+0x3c>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800154c:	4904      	ldr	r1, [pc, #16]	; (8001560 <HAL_SYSCFG_ETHInterfaceSelect+0x3c>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	0801881c 	.word	0x0801881c
 8001560:	58000400 	.word	0x58000400

08001564 <__NVIC_SetPriorityGrouping>:
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001580:	4013      	ands	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	4313      	orrs	r3, r2
 8001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	60d3      	str	r3, [r2, #12]
}
 8001598:	bf00      	nop
 800159a:	3714      	adds	r7, #20
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed00 	.word	0xe000ed00
 80015a8:	05fa0000 	.word	0x05fa0000

080015ac <__NVIC_GetPriorityGrouping>:
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <__NVIC_GetPriorityGrouping+0x18>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	f003 0307 	and.w	r3, r3, #7
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_EnableIRQ>:
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	db0b      	blt.n	80015f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	f003 021f 	and.w	r2, r3, #31
 80015e0:	4907      	ldr	r1, [pc, #28]	; (8001600 <__NVIC_EnableIRQ+0x38>)
 80015e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	2001      	movs	r0, #1
 80015ea:	fa00 f202 	lsl.w	r2, r0, r2
 80015ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000e100 	.word	0xe000e100

08001604 <__NVIC_SetPriority>:
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001610:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001614:	2b00      	cmp	r3, #0
 8001616:	db0a      	blt.n	800162e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	b2da      	uxtb	r2, r3
 800161c:	490c      	ldr	r1, [pc, #48]	; (8001650 <__NVIC_SetPriority+0x4c>)
 800161e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001622:	0112      	lsls	r2, r2, #4
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	440b      	add	r3, r1
 8001628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800162c:	e00a      	b.n	8001644 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4908      	ldr	r1, [pc, #32]	; (8001654 <__NVIC_SetPriority+0x50>)
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	3b04      	subs	r3, #4
 800163c:	0112      	lsls	r2, r2, #4
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	440b      	add	r3, r1
 8001642:	761a      	strb	r2, [r3, #24]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000e100 	.word	0xe000e100
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <NVIC_EncodePriority>:
{
 8001658:	b480      	push	{r7}
 800165a:	b089      	sub	sp, #36	; 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f1c3 0307 	rsb	r3, r3, #7
 8001672:	2b04      	cmp	r3, #4
 8001674:	bf28      	it	cs
 8001676:	2304      	movcs	r3, #4
 8001678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3304      	adds	r3, #4
 800167e:	2b06      	cmp	r3, #6
 8001680:	d902      	bls.n	8001688 <NVIC_EncodePriority+0x30>
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3b03      	subs	r3, #3
 8001686:	e000      	b.n	800168a <NVIC_EncodePriority+0x32>
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	401a      	ands	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43d9      	mvns	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	4313      	orrs	r3, r2
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3724      	adds	r7, #36	; 0x24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b07      	cmp	r3, #7
 80016cc:	d00f      	beq.n	80016ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b06      	cmp	r3, #6
 80016d2:	d00c      	beq.n	80016ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b05      	cmp	r3, #5
 80016d8:	d009      	beq.n	80016ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d006      	beq.n	80016ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d003      	beq.n	80016ee <HAL_NVIC_SetPriorityGrouping+0x2e>
 80016e6:	2192      	movs	r1, #146	; 0x92
 80016e8:	4804      	ldr	r0, [pc, #16]	; (80016fc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80016ea:	f7ff faea 	bl	8000cc2 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ff38 	bl	8001564 <__NVIC_SetPriorityGrouping>
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	08018850 	.word	0x08018850

08001700 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d903      	bls.n	800171c <HAL_NVIC_SetPriority+0x1c>
 8001714:	21aa      	movs	r1, #170	; 0xaa
 8001716:	480e      	ldr	r0, [pc, #56]	; (8001750 <HAL_NVIC_SetPriority+0x50>)
 8001718:	f7ff fad3 	bl	8000cc2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b0f      	cmp	r3, #15
 8001720:	d903      	bls.n	800172a <HAL_NVIC_SetPriority+0x2a>
 8001722:	21ab      	movs	r1, #171	; 0xab
 8001724:	480a      	ldr	r0, [pc, #40]	; (8001750 <HAL_NVIC_SetPriority+0x50>)
 8001726:	f7ff facc 	bl	8000cc2 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 800172a:	f7ff ff3f 	bl	80015ac <__NVIC_GetPriorityGrouping>
 800172e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	68b9      	ldr	r1, [r7, #8]
 8001734:	6978      	ldr	r0, [r7, #20]
 8001736:	f7ff ff8f 	bl	8001658 <NVIC_EncodePriority>
 800173a:	4602      	mov	r2, r0
 800173c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff5e 	bl	8001604 <__NVIC_SetPriority>
}
 8001748:	bf00      	nop
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	08018850 	.word	0x08018850

08001754 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800175e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001762:	2b00      	cmp	r3, #0
 8001764:	da03      	bge.n	800176e <HAL_NVIC_EnableIRQ+0x1a>
 8001766:	21be      	movs	r1, #190	; 0xbe
 8001768:	4805      	ldr	r0, [pc, #20]	; (8001780 <HAL_NVIC_EnableIRQ+0x2c>)
 800176a:	f7ff faaa 	bl	8000cc2 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800176e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ff28 	bl	80015c8 <__NVIC_EnableIRQ>
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	08018850 	.word	0x08018850

08001784 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001788:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_MPU_Disable+0x24>)
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001790:	4a05      	ldr	r2, [pc, #20]	; (80017a8 <HAL_MPU_Disable+0x24>)
 8001792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001796:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <HAL_MPU_Disable+0x28>)
 800179a:	2200      	movs	r2, #0
 800179c:	605a      	str	r2, [r3, #4]
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00
 80017ac:	e000ed90 	.word	0xe000ed90

080017b0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80017b8:	4a0a      	ldr	r2, [pc, #40]	; (80017e4 <HAL_MPU_Enable+0x34>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <HAL_MPU_Enable+0x38>)
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	4a08      	ldr	r2, [pc, #32]	; (80017e8 <HAL_MPU_Enable+0x38>)
 80017c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017cc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80017ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80017d2:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed90 	.word	0xe000ed90
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	785b      	ldrb	r3, [r3, #1]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d040      	beq.n	800187e <HAL_MPU_ConfigRegion+0x92>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	785b      	ldrb	r3, [r3, #1]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d03c      	beq.n	800187e <HAL_MPU_ConfigRegion+0x92>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	785b      	ldrb	r3, [r3, #1]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d038      	beq.n	800187e <HAL_MPU_ConfigRegion+0x92>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	785b      	ldrb	r3, [r3, #1]
 8001810:	2b03      	cmp	r3, #3
 8001812:	d034      	beq.n	800187e <HAL_MPU_ConfigRegion+0x92>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	785b      	ldrb	r3, [r3, #1]
 8001818:	2b04      	cmp	r3, #4
 800181a:	d030      	beq.n	800187e <HAL_MPU_ConfigRegion+0x92>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	785b      	ldrb	r3, [r3, #1]
 8001820:	2b05      	cmp	r3, #5
 8001822:	d02c      	beq.n	800187e <HAL_MPU_ConfigRegion+0x92>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	785b      	ldrb	r3, [r3, #1]
 8001828:	2b06      	cmp	r3, #6
 800182a:	d028      	beq.n	800187e <HAL_MPU_ConfigRegion+0x92>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	785b      	ldrb	r3, [r3, #1]
 8001830:	2b07      	cmp	r3, #7
 8001832:	d024      	beq.n	800187e <HAL_MPU_ConfigRegion+0x92>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	785b      	ldrb	r3, [r3, #1]
 8001838:	2b08      	cmp	r3, #8
 800183a:	d020      	beq.n	800187e <HAL_MPU_ConfigRegion+0x92>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	785b      	ldrb	r3, [r3, #1]
 8001840:	2b09      	cmp	r3, #9
 8001842:	d01c      	beq.n	800187e <HAL_MPU_ConfigRegion+0x92>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	785b      	ldrb	r3, [r3, #1]
 8001848:	2b0a      	cmp	r3, #10
 800184a:	d018      	beq.n	800187e <HAL_MPU_ConfigRegion+0x92>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	785b      	ldrb	r3, [r3, #1]
 8001850:	2b0b      	cmp	r3, #11
 8001852:	d014      	beq.n	800187e <HAL_MPU_ConfigRegion+0x92>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	785b      	ldrb	r3, [r3, #1]
 8001858:	2b0c      	cmp	r3, #12
 800185a:	d010      	beq.n	800187e <HAL_MPU_ConfigRegion+0x92>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	785b      	ldrb	r3, [r3, #1]
 8001860:	2b0d      	cmp	r3, #13
 8001862:	d00c      	beq.n	800187e <HAL_MPU_ConfigRegion+0x92>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	785b      	ldrb	r3, [r3, #1]
 8001868:	2b0e      	cmp	r3, #14
 800186a:	d008      	beq.n	800187e <HAL_MPU_ConfigRegion+0x92>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	785b      	ldrb	r3, [r3, #1]
 8001870:	2b0f      	cmp	r3, #15
 8001872:	d004      	beq.n	800187e <HAL_MPU_ConfigRegion+0x92>
 8001874:	f240 112d 	movw	r1, #301	; 0x12d
 8001878:	4896      	ldr	r0, [pc, #600]	; (8001ad4 <HAL_MPU_ConfigRegion+0x2e8>)
 800187a:	f7ff fa22 	bl	8000cc2 <assert_failed>
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d008      	beq.n	8001898 <HAL_MPU_ConfigRegion+0xac>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d004      	beq.n	8001898 <HAL_MPU_ConfigRegion+0xac>
 800188e:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8001892:	4890      	ldr	r0, [pc, #576]	; (8001ad4 <HAL_MPU_ConfigRegion+0x2e8>)
 8001894:	f7ff fa15 	bl	8000cc2 <assert_failed>

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	785a      	ldrb	r2, [r3, #1]
 800189c:	4b8e      	ldr	r3, [pc, #568]	; (8001ad8 <HAL_MPU_ConfigRegion+0x2ec>)
 800189e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 810a 	beq.w	8001abe <HAL_MPU_ConfigRegion+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	7b1b      	ldrb	r3, [r3, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d008      	beq.n	80018c4 <HAL_MPU_ConfigRegion+0xd8>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7b1b      	ldrb	r3, [r3, #12]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d004      	beq.n	80018c4 <HAL_MPU_ConfigRegion+0xd8>
 80018ba:	f44f 719b 	mov.w	r1, #310	; 0x136
 80018be:	4885      	ldr	r0, [pc, #532]	; (8001ad4 <HAL_MPU_ConfigRegion+0x2e8>)
 80018c0:	f7ff f9ff 	bl	8000cc2 <assert_failed>
    assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	7adb      	ldrb	r3, [r3, #11]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d018      	beq.n	80018fe <HAL_MPU_ConfigRegion+0x112>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	7adb      	ldrb	r3, [r3, #11]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d014      	beq.n	80018fe <HAL_MPU_ConfigRegion+0x112>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	7adb      	ldrb	r3, [r3, #11]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d010      	beq.n	80018fe <HAL_MPU_ConfigRegion+0x112>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	7adb      	ldrb	r3, [r3, #11]
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d00c      	beq.n	80018fe <HAL_MPU_ConfigRegion+0x112>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7adb      	ldrb	r3, [r3, #11]
 80018e8:	2b05      	cmp	r3, #5
 80018ea:	d008      	beq.n	80018fe <HAL_MPU_ConfigRegion+0x112>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7adb      	ldrb	r3, [r3, #11]
 80018f0:	2b06      	cmp	r3, #6
 80018f2:	d004      	beq.n	80018fe <HAL_MPU_ConfigRegion+0x112>
 80018f4:	f240 1137 	movw	r1, #311	; 0x137
 80018f8:	4876      	ldr	r0, [pc, #472]	; (8001ad4 <HAL_MPU_ConfigRegion+0x2e8>)
 80018fa:	f7ff f9e2 	bl	8000cc2 <assert_failed>
    assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7a9b      	ldrb	r3, [r3, #10]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00c      	beq.n	8001920 <HAL_MPU_ConfigRegion+0x134>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7a9b      	ldrb	r3, [r3, #10]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d008      	beq.n	8001920 <HAL_MPU_ConfigRegion+0x134>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	7a9b      	ldrb	r3, [r3, #10]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d004      	beq.n	8001920 <HAL_MPU_ConfigRegion+0x134>
 8001916:	f44f 719c 	mov.w	r1, #312	; 0x138
 800191a:	486e      	ldr	r0, [pc, #440]	; (8001ad4 <HAL_MPU_ConfigRegion+0x2e8>)
 800191c:	f7ff f9d1 	bl	8000cc2 <assert_failed>
    assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	7b5b      	ldrb	r3, [r3, #13]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d008      	beq.n	800193a <HAL_MPU_ConfigRegion+0x14e>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7b5b      	ldrb	r3, [r3, #13]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d004      	beq.n	800193a <HAL_MPU_ConfigRegion+0x14e>
 8001930:	f240 1139 	movw	r1, #313	; 0x139
 8001934:	4867      	ldr	r0, [pc, #412]	; (8001ad4 <HAL_MPU_ConfigRegion+0x2e8>)
 8001936:	f7ff f9c4 	bl	8000cc2 <assert_failed>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	7b9b      	ldrb	r3, [r3, #14]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d008      	beq.n	8001954 <HAL_MPU_ConfigRegion+0x168>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	7b9b      	ldrb	r3, [r3, #14]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d004      	beq.n	8001954 <HAL_MPU_ConfigRegion+0x168>
 800194a:	f44f 719d 	mov.w	r1, #314	; 0x13a
 800194e:	4861      	ldr	r0, [pc, #388]	; (8001ad4 <HAL_MPU_ConfigRegion+0x2e8>)
 8001950:	f7ff f9b7 	bl	8000cc2 <assert_failed>
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	7bdb      	ldrb	r3, [r3, #15]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d008      	beq.n	800196e <HAL_MPU_ConfigRegion+0x182>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7bdb      	ldrb	r3, [r3, #15]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d004      	beq.n	800196e <HAL_MPU_ConfigRegion+0x182>
 8001964:	f240 113b 	movw	r1, #315	; 0x13b
 8001968:	485a      	ldr	r0, [pc, #360]	; (8001ad4 <HAL_MPU_ConfigRegion+0x2e8>)
 800196a:	f7ff f9aa 	bl	8000cc2 <assert_failed>
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	7a5b      	ldrb	r3, [r3, #9]
 8001972:	2bff      	cmp	r3, #255	; 0xff
 8001974:	d104      	bne.n	8001980 <HAL_MPU_ConfigRegion+0x194>
 8001976:	f44f 719e 	mov.w	r1, #316	; 0x13c
 800197a:	4856      	ldr	r0, [pc, #344]	; (8001ad4 <HAL_MPU_ConfigRegion+0x2e8>)
 800197c:	f7ff f9a1 	bl	8000cc2 <assert_failed>
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	7a1b      	ldrb	r3, [r3, #8]
 8001984:	2b04      	cmp	r3, #4
 8001986:	d070      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	7a1b      	ldrb	r3, [r3, #8]
 800198c:	2b05      	cmp	r3, #5
 800198e:	d06c      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7a1b      	ldrb	r3, [r3, #8]
 8001994:	2b06      	cmp	r3, #6
 8001996:	d068      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	7a1b      	ldrb	r3, [r3, #8]
 800199c:	2b07      	cmp	r3, #7
 800199e:	d064      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7a1b      	ldrb	r3, [r3, #8]
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d060      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	7a1b      	ldrb	r3, [r3, #8]
 80019ac:	2b09      	cmp	r3, #9
 80019ae:	d05c      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	7a1b      	ldrb	r3, [r3, #8]
 80019b4:	2b0a      	cmp	r3, #10
 80019b6:	d058      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	7a1b      	ldrb	r3, [r3, #8]
 80019bc:	2b0b      	cmp	r3, #11
 80019be:	d054      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	7a1b      	ldrb	r3, [r3, #8]
 80019c4:	2b0c      	cmp	r3, #12
 80019c6:	d050      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7a1b      	ldrb	r3, [r3, #8]
 80019cc:	2b0d      	cmp	r3, #13
 80019ce:	d04c      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7a1b      	ldrb	r3, [r3, #8]
 80019d4:	2b0e      	cmp	r3, #14
 80019d6:	d048      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7a1b      	ldrb	r3, [r3, #8]
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d044      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	7a1b      	ldrb	r3, [r3, #8]
 80019e4:	2b10      	cmp	r3, #16
 80019e6:	d040      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7a1b      	ldrb	r3, [r3, #8]
 80019ec:	2b11      	cmp	r3, #17
 80019ee:	d03c      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7a1b      	ldrb	r3, [r3, #8]
 80019f4:	2b12      	cmp	r3, #18
 80019f6:	d038      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7a1b      	ldrb	r3, [r3, #8]
 80019fc:	2b13      	cmp	r3, #19
 80019fe:	d034      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	7a1b      	ldrb	r3, [r3, #8]
 8001a04:	2b14      	cmp	r3, #20
 8001a06:	d030      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7a1b      	ldrb	r3, [r3, #8]
 8001a0c:	2b15      	cmp	r3, #21
 8001a0e:	d02c      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	7a1b      	ldrb	r3, [r3, #8]
 8001a14:	2b16      	cmp	r3, #22
 8001a16:	d028      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	7a1b      	ldrb	r3, [r3, #8]
 8001a1c:	2b17      	cmp	r3, #23
 8001a1e:	d024      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	7a1b      	ldrb	r3, [r3, #8]
 8001a24:	2b18      	cmp	r3, #24
 8001a26:	d020      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	7a1b      	ldrb	r3, [r3, #8]
 8001a2c:	2b19      	cmp	r3, #25
 8001a2e:	d01c      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	7a1b      	ldrb	r3, [r3, #8]
 8001a34:	2b1a      	cmp	r3, #26
 8001a36:	d018      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	7a1b      	ldrb	r3, [r3, #8]
 8001a3c:	2b1b      	cmp	r3, #27
 8001a3e:	d014      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7a1b      	ldrb	r3, [r3, #8]
 8001a44:	2b1c      	cmp	r3, #28
 8001a46:	d010      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	7a1b      	ldrb	r3, [r3, #8]
 8001a4c:	2b1d      	cmp	r3, #29
 8001a4e:	d00c      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	7a1b      	ldrb	r3, [r3, #8]
 8001a54:	2b1e      	cmp	r3, #30
 8001a56:	d008      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	7a1b      	ldrb	r3, [r3, #8]
 8001a5c:	2b1f      	cmp	r3, #31
 8001a5e:	d004      	beq.n	8001a6a <HAL_MPU_ConfigRegion+0x27e>
 8001a60:	f240 113d 	movw	r1, #317	; 0x13d
 8001a64:	481b      	ldr	r0, [pc, #108]	; (8001ad4 <HAL_MPU_ConfigRegion+0x2e8>)
 8001a66:	f7ff f92c 	bl	8000cc2 <assert_failed>

    MPU->RBAR = MPU_Init->BaseAddress;
 8001a6a:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <HAL_MPU_ConfigRegion+0x2ec>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7b1b      	ldrb	r3, [r3, #12]
 8001a76:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	7adb      	ldrb	r3, [r3, #11]
 8001a7c:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a7e:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7a9b      	ldrb	r3, [r3, #10]
 8001a84:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a86:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	7b5b      	ldrb	r3, [r3, #13]
 8001a8c:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a8e:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7b9b      	ldrb	r3, [r3, #14]
 8001a94:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a96:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7bdb      	ldrb	r3, [r3, #15]
 8001a9c:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a9e:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7a5b      	ldrb	r3, [r3, #9]
 8001aa4:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001aa6:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7a1b      	ldrb	r3, [r3, #8]
 8001aac:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001aae:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	7812      	ldrb	r2, [r2, #0]
 8001ab4:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ab6:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <HAL_MPU_ConfigRegion+0x2ec>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ab8:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001aba:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001abc:	e005      	b.n	8001aca <HAL_MPU_ConfigRegion+0x2de>
    MPU->RBAR = 0x00;
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_MPU_ConfigRegion+0x2ec>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <HAL_MPU_ConfigRegion+0x2ec>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	08018850 	.word	0x08018850
 8001ad8:	e000ed90 	.word	0xe000ed90

08001adc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e0c6      	b.n	8001c7c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d102      	bne.n	8001afc <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f008 fdfa 	bl	800a6f0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2223      	movs	r2, #35	; 0x23
 8001b00:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b02:	4b60      	ldr	r3, [pc, #384]	; (8001c84 <HAL_ETH_Init+0x1a8>)
 8001b04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b08:	4a5e      	ldr	r2, [pc, #376]	; (8001c84 <HAL_ETH_Init+0x1a8>)
 8001b0a:	f043 0302 	orr.w	r3, r3, #2
 8001b0e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b12:	4b5c      	ldr	r3, [pc, #368]	; (8001c84 <HAL_ETH_Init+0x1a8>)
 8001b14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	7a1b      	ldrb	r3, [r3, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d103      	bne.n	8001b30 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f7ff fcfb 	bl	8001524 <HAL_SYSCFG_ETHInterfaceSelect>
 8001b2e:	e003      	b.n	8001b38 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001b30:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001b34:	f7ff fcf6 	bl	8001524 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b50:	f7ff fcd0 	bl	80014f4 <HAL_GetTick>
 8001b54:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001b56:	e00f      	b.n	8001b78 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001b58:	f7ff fccc 	bl	80014f4 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b66:	d907      	bls.n	8001b78 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	22e0      	movs	r2, #224	; 0xe0
 8001b72:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e081      	b.n	8001c7c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1e6      	bne.n	8001b58 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f001 f9ac 	bl	8002ee8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001b90:	f003 fa2e 	bl	8004ff0 <HAL_RCC_GetHCLKFreq>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4b3c      	ldr	r3, [pc, #240]	; (8001c88 <HAL_ETH_Init+0x1ac>)
 8001b98:	fba3 2302 	umull	r2, r3, r3, r2
 8001b9c:	0c9a      	lsrs	r2, r3, #18
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	3a01      	subs	r2, #1
 8001ba4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f001 f8ff 	bl	8002dac <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001bc4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001bc8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d007      	beq.n	8001be6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	22e0      	movs	r2, #224	; 0xe0
 8001be0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e04a      	b.n	8001c7c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	f241 1308 	movw	r3, #4360	; 0x1108
 8001bee:	4413      	add	r3, r2
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <HAL_ETH_Init+0x1b0>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6952      	ldr	r2, [r2, #20]
 8001bfa:	0052      	lsls	r2, r2, #1
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	6809      	ldr	r1, [r1, #0]
 8001c00:	431a      	orrs	r2, r3
 8001c02:	f241 1308 	movw	r3, #4360	; 0x1108
 8001c06:	440b      	add	r3, r1
 8001c08:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f001 f9c4 	bl	8002f98 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f001 fa08 	bl	8003026 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	3305      	adds	r3, #5
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	021a      	lsls	r2, r3, #8
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	3304      	adds	r3, #4
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	3303      	adds	r3, #3
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	061a      	lsls	r2, r3, #24
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	3302      	adds	r3, #2
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	041b      	lsls	r3, r3, #16
 8001c48:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c54:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c62:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c64:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2210      	movs	r2, #16
 8001c72:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2210      	movs	r2, #16
 8001c78:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	58024400 	.word	0x58024400
 8001c88:	431bde83 	.word	0x431bde83
 8001c8c:	ffff8001 	.word	0xffff8001

08001c90 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
 8001c9c:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	330a      	adds	r3, #10
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <HAL_ETH_DescAssignMemory+0x28>
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d904      	bls.n	8001cc2 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e021      	b.n	8001d06 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00b      	beq.n	8001cf8 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	371c      	adds	r7, #28
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b087      	sub	sp, #28
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  uint32_t descindex = 0, counter;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	330a      	adds	r3, #10
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	60fb      	str	r3, [r7, #12]

  if(heth->gState == HAL_ETH_STATE_READY)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d30:	2b10      	cmp	r3, #16
 8001d32:	d17d      	bne.n	8001e30 <HAL_ETH_Start_IT+0x11e>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2223      	movs	r2, #35	; 0x23
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	e018      	b.n	8001d72 <HAL_ETH_Start_IT+0x60>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	60da      	str	r2, [r3, #12]
      INCR_RX_DESC_INDEX(descindex, 1U);
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d902      	bls.n	8001d5e <HAL_ETH_Start_IT+0x4c>
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3b04      	subs	r3, #4
 8001d5c:	617b      	str	r3, [r7, #20]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	330a      	adds	r3, #10
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	60fb      	str	r3, [r7, #12]
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d9e3      	bls.n	8001d40 <HAL_ETH_Start_IT+0x2e>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f042 0202 	orr.w	r2, r2, #2
 8001d8c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 0201 	orr.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	f241 1304 	movw	r3, #4356	; 0x1104
 8001dba:	4413      	add	r3, r2
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6811      	ldr	r1, [r2, #0]
 8001dc2:	f043 0201 	orr.w	r2, r3, #1
 8001dc6:	f241 1304 	movw	r3, #4356	; 0x1104
 8001dca:	440b      	add	r3, r1
 8001dcc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	f241 1308 	movw	r3, #4360	; 0x1108
 8001dd6:	4413      	add	r3, r2
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	6811      	ldr	r1, [r2, #0]
 8001dde:	f043 0201 	orr.w	r2, r3, #1
 8001de2:	f241 1308 	movw	r3, #4360	; 0x1108
 8001de6:	440b      	add	r3, r1
 8001de8:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001dfc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001e00:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2210      	movs	r2, #16
 8001e06:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2222      	movs	r2, #34	; 0x22
 8001e0c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	f241 1334 	movw	r3, #4404	; 0x1134
 8001e16:	4413      	add	r3, r2
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6811      	ldr	r1, [r2, #0]
 8001e1e:	f24d 0241 	movw	r2, #53313	; 0xd041
 8001e22:	431a      	orrs	r2, r3
 8001e24:	f241 1334 	movw	r3, #4404	; 0x1134
 8001e28:	440b      	add	r3, r1
 8001e2a:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	e000      	b.n	8001e32 <HAL_ETH_Start_IT+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
  }
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	371c      	adds	r7, #28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[0];
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	60bb      	str	r3, [r7, #8]
  uint32_t index;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d060      	beq.n	8001f18 <HAL_ETH_Stop_IT+0xd8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2223      	movs	r2, #35	; 0x23
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable intrrupts:
    - Tx complete interrupt
    - Rx complete interrupt     */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMA_NORMAL_IT | ETH_DMA_RX_IT | ETH_DMA_TX_IT));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	f241 1334 	movw	r3, #4404	; 0x1134
 8001e64:	4413      	add	r3, r2
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6811      	ldr	r1, [r2, #0]
 8001e6c:	4a2e      	ldr	r2, [pc, #184]	; (8001f28 <HAL_ETH_Stop_IT+0xe8>)
 8001e6e:	401a      	ands	r2, r3
 8001e70:	f241 1334 	movw	r3, #4404	; 0x1134
 8001e74:	440b      	add	r3, r1
 8001e76:	601a      	str	r2, [r3, #0]

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e80:	4413      	add	r3, r2
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6811      	ldr	r1, [r2, #0]
 8001e88:	f023 0201 	bic.w	r2, r3, #1
 8001e8c:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e90:	440b      	add	r3, r1
 8001e92:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e9c:	4413      	add	r3, r2
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6811      	ldr	r1, [r2, #0]
 8001ea4:	f023 0201 	bic.w	r2, r3, #1
 8001ea8:	f241 1308 	movw	r3, #4360	; 0x1108
 8001eac:	440b      	add	r3, r1
 8001eae:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0201 	bic.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0201 	orr.w	r2, r2, #1
 8001ed0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0202 	bic.w	r2, r2, #2
 8001ee2:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(index = 0; index < (uint32_t)ETH_RX_DESC_CNT; index++)
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	e008      	b.n	8001efc <HAL_ETH_Stop_IT+0xbc>
    {
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
    for(index = 0; index < (uint32_t)ETH_RX_DESC_CNT; index++)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d9f3      	bls.n	8001eea <HAL_ETH_Stop_IT+0xaa>
    }

    heth->RxDescList.ItMode = 0U;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	64da      	str	r2, [r3, #76]	; 0x4c

    heth->gState = HAL_ETH_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2210      	movs	r2, #16
 8001f0c:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2210      	movs	r2, #16
 8001f12:	659a      	str	r2, [r3, #88]	; 0x58

    /* Return function status */
    return HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	e000      	b.n	8001f1a <HAL_ETH_Stop_IT+0xda>
  }
  else
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
  }
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	ffff7fbe 	.word	0xffff7fbe

08001f2c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d107      	bne.n	8001f4e <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	f043 0201 	orr.w	r2, r3, #1
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e076      	b.n	800203c <HAL_ETH_Transmit+0x110>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f52:	2b10      	cmp	r3, #16
 8001f54:	d171      	bne.n	800203a <HAL_ETH_Transmit+0x10e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001f56:	2200      	movs	r2, #0
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f001 f8c0 	bl	80030e0 <ETH_Prepare_Tx_Descriptors>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d007      	beq.n	8001f76 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6a:	f043 0202 	orr.w	r2, r3, #2
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e062      	b.n	800203c <HAL_ETH_Transmit+0x110>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	3206      	adds	r2, #6
 8001f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f82:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	629a      	str	r2, [r3, #40]	; 0x28
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d904      	bls.n	8001fa0 <HAL_ETH_Transmit+0x74>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	1f1a      	subs	r2, r3, #4
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	3106      	adds	r1, #6
 8001fac:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001fb0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001fb4:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8001fb6:	f7ff fa9d 	bl	80014f4 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001fbc:	e034      	b.n	8002028 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d011      	beq.n	8001ff4 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd4:	f043 0208 	orr.w	r2, r3, #8
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	22e0      	movs	r2, #224	; 0xe0
 8001fee:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e023      	b.n	800203c <HAL_ETH_Transmit+0x110>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffa:	d015      	beq.n	8002028 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8001ffc:	f7ff fa7a 	bl	80014f4 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	429a      	cmp	r2, r3
 800200a:	d302      	bcc.n	8002012 <HAL_ETH_Transmit+0xe6>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10a      	bne.n	8002028 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002016:	f043 0204 	orr.w	r2, r3, #4
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_READY;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2210      	movs	r2, #16
 8002022:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e009      	b.n	800203c <HAL_ETH_Transmit+0x110>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	dbc6      	blt.n	8001fbe <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Set ETH HAL State to Ready */
    heth->gState = HAL_ETH_STATE_READY;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2210      	movs	r2, #16
 8002034:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	e000      	b.n	800203c <HAL_ETH_Transmit+0x110>
  }
  else
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
  }
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8002044:	b480      	push	{r7}
 8002046:	b089      	sub	sp, #36	; 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	332c      	adds	r3, #44	; 0x2c
 8002050:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002060:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d06b      	beq.n	800214e <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8002076:	2300      	movs	r3, #0
 8002078:	e0bc      	b.n	80021f4 <HAL_ETH_IsRxDataAvailable+0x1b0>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	3301      	adds	r3, #1
 800207e:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d036      	beq.n	80020fa <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	3301      	adds	r3, #1
 8002090:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	3301      	adds	r3, #1
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d902      	bls.n	80020ae <HAL_ETH_IsRxDataAvailable+0x6a>
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	3b04      	subs	r3, #4
 80020ac:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b6:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	db11      	blt.n	80020e4 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00b      	beq.n	80020e4 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2201      	movs	r2, #1
 80020d0:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3301      	adds	r3, #1
 80020d6:	61fb      	str	r3, [r7, #28]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d902      	bls.n	80020e4 <HAL_ETH_IsRxDataAvailable+0xa0>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3b04      	subs	r3, #4
 80020e2:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e07c      	b.n	80021f4 <HAL_ETH_IsRxDataAvailable+0x1b0>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d012      	beq.n	800212c <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 800210a:	2301      	movs	r3, #1
 800210c:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3301      	adds	r3, #1
 8002112:	61fb      	str	r3, [r7, #28]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	2b03      	cmp	r3, #3
 8002118:	d902      	bls.n	8002120 <HAL_ETH_IsRxDataAvailable+0xdc>
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3b04      	subs	r3, #4
 800211e:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	e010      	b.n	800214e <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	3301      	adds	r3, #1
 8002130:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3301      	adds	r3, #1
 8002136:	61fb      	str	r3, [r7, #28]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	2b03      	cmp	r3, #3
 800213c:	d902      	bls.n	8002144 <HAL_ETH_IsRxDataAvailable+0x100>
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3b04      	subs	r3, #4
 8002142:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214c:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	db02      	blt.n	800215c <HAL_ETH_IsRxDataAvailable+0x118>
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2b03      	cmp	r3, #3
 800215a:	d98e      	bls.n	800207a <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d044      	beq.n	80021ec <HAL_ETH_IsRxDataAvailable+0x1a8>
  {
    descidx = firstappdescidx;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800216e:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	e036      	b.n	80021e4 <HAL_ETH_IsRxDataAvailable+0x1a0>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002184:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d009      	beq.n	80021a2 <HAL_ETH_IsRxDataAvailable+0x15e>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	695a      	ldr	r2, [r3, #20]
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <HAL_ETH_IsRxDataAvailable+0x17e>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	60da      	str	r2, [r3, #12]
      }

      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3301      	adds	r3, #1
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d902      	bls.n	80021d4 <HAL_ETH_IsRxDataAvailable+0x190>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3b04      	subs	r3, #4
 80021d2:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	69fa      	ldr	r2, [r7, #28]
 80021d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021dc:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	3301      	adds	r3, #1
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d3c4      	bcc.n	8002176 <HAL_ETH_IsRxDataAvailable+0x132>
    }
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2200      	movs	r2, #0
 80021f0:	619a      	str	r2, [r3, #24]

  return 0;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3724      	adds	r7, #36	; 0x24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	; 0x28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	332c      	adds	r3, #44	; 0x2c
 800220e:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002222:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d104      	bne.n	8002238 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e07d      	b.n	8002334 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10f      	bne.n	8002260 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff feff 	bl	8002044 <HAL_ETH_IsRxDataAvailable>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e071      	b.n	8002334 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800225e:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
 8002264:	e031      	b.n	80022ca <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	461a      	mov	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00b      	beq.n	8002298 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	461a      	mov	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695a      	ldr	r2, [r3, #20]
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80022a0:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	3301      	adds	r3, #1
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d902      	bls.n	80022b4 <HAL_ETH_GetRxDataBuffer+0xb4>
 80022ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b0:	3b04      	subs	r3, #4
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022bc:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	3301      	adds	r3, #1
 80022c8:	623b      	str	r3, [r7, #32]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	6a3a      	ldr	r2, [r7, #32]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d3c7      	bcc.n	8002266 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	461a      	mov	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d803      	bhi.n	8002300 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	e018      	b.n	8002332 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	695b      	ldr	r3, [r3, #20]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d012      	beq.n	800232e <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	461a      	mov	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	1ad2      	subs	r2, r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	e001      	b.n	8002332 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3728      	adds	r7, #40	; 0x28
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	332c      	adds	r3, #44	; 0x2c
 800234a:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d107      	bne.n	800236a <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff fe72 	bl	8002044 <HAL_ETH_IsRxDataAvailable>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e017      	b.n	800239a <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	699a      	ldr	r2, [r3, #24]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	4413      	add	r3, r2
 8002372:	3b01      	subs	r3, #1
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d902      	bls.n	8002382 <HAL_ETH_GetRxDataLength+0x46>
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	3b04      	subs	r3, #4
 8002380:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238a:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b089      	sub	sp, #36	; 0x24
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	332c      	adds	r3, #44	; 0x2c
 80023ae:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023be:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e055      	b.n	800247e <HAL_ETH_BuildRxDescriptors+0xdc>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3301      	adds	r3, #1
 80023de:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80023e0:	2300      	movs	r3, #0
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	e03c      	b.n	8002460 <HAL_ETH_BuildRxDescriptors+0xbe>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023f4:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d009      	beq.n	8002412 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (dmarxdesclist->AppDescNbr - 1U))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	3b01      	subs	r3, #1
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	429a      	cmp	r2, r3
 800243c:	d20d      	bcs.n	800245a <HAL_ETH_BuildRxDescriptors+0xb8>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3301      	adds	r3, #1
 8002442:	61fb      	str	r3, [r7, #28]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	2b03      	cmp	r3, #3
 8002448:	d902      	bls.n	8002450 <HAL_ETH_BuildRxDescriptors+0xae>
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3b04      	subs	r3, #4
 800244e:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002458:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	3301      	adds	r3, #1
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	429a      	cmp	r2, r3
 8002466:	d3be      	bcc.n	80023e6 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6819      	ldr	r1, [r3, #0]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	f241 1328 	movw	r3, #4392	; 0x1128
 8002472:	440b      	add	r3, r1
 8002474:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3724      	adds	r7, #36	; 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b086      	sub	sp, #24
 800248e:	af00      	add	r7, sp, #0
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e03e      	b.n	800252a <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024b4:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	055b      	lsls	r3, r3, #21
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	041b      	lsls	r3, r3, #16
 80024ce:	4313      	orrs	r3, r2
 80024d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f043 030c 	orr.w	r3, r3, #12
 80024d8:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80024ec:	f7ff f802 	bl	80014f4 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80024f2:	e009      	b.n	8002508 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80024f4:	f7fe fffe 	bl	80014f4 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002502:	d901      	bls.n	8002508 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e010      	b.n	800252a <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1ed      	bne.n	80024f4 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002520:	b29b      	uxth	r3, r3
 8002522:	461a      	mov	r2, r3
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e03c      	b.n	80025d0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800255e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	055b      	lsls	r3, r3, #21
 800256a:	4313      	orrs	r3, r2
 800256c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	041b      	lsls	r3, r3, #16
 8002578:	4313      	orrs	r3, r2
 800257a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f023 030c 	bic.w	r3, r3, #12
 8002582:	f043 0304 	orr.w	r3, r3, #4
 8002586:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	b29a      	uxth	r2, r3
 8002594:	4b10      	ldr	r3, [pc, #64]	; (80025d8 <HAL_ETH_WritePHYRegister+0xa4>)
 8002596:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800259a:	4a0f      	ldr	r2, [pc, #60]	; (80025d8 <HAL_ETH_WritePHYRegister+0xa4>)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80025a2:	f7fe ffa7 	bl	80014f4 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80025a8:	e009      	b.n	80025be <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80025aa:	f7fe ffa3 	bl	80014f4 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025b8:	d901      	bls.n	80025be <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e008      	b.n	80025d0 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1ed      	bne.n	80025aa <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40028000 	.word	0x40028000

080025dc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e1c3      	b.n	8002978 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 020c 	and.w	r2, r3, #12
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b00      	cmp	r3, #0
 800260a:	bf14      	ite	ne
 800260c:	2301      	movne	r3, #1
 800260e:	2300      	moveq	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	461a      	mov	r2, r3
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	bf0c      	ite	eq
 8002636:	2301      	moveq	r3, #1
 8002638:	2300      	movne	r3, #0
 800263a:	b2db      	uxtb	r3, r3
 800263c:	461a      	mov	r2, r3
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800264e:	2b00      	cmp	r3, #0
 8002650:	bf14      	ite	ne
 8002652:	2301      	movne	r3, #1
 8002654:	2300      	moveq	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf0c      	ite	eq
 800266c:	2301      	moveq	r3, #1
 800266e:	2300      	movne	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	461a      	mov	r2, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002682:	2b00      	cmp	r3, #0
 8002684:	bf14      	ite	ne
 8002686:	2301      	movne	r3, #1
 8002688:	2300      	moveq	r3, #0
 800268a:	b2db      	uxtb	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf14      	ite	ne
 80026a0:	2301      	movne	r3, #1
 80026a2:	2300      	moveq	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	461a      	mov	r2, r3
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	bf14      	ite	ne
 80026d6:	2301      	movne	r3, #1
 80026d8:	2300      	moveq	r3, #0
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bf0c      	ite	eq
 80026f0:	2301      	moveq	r3, #1
 80026f2:	2300      	movne	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002706:	2b00      	cmp	r3, #0
 8002708:	bf0c      	ite	eq
 800270a:	2301      	moveq	r3, #1
 800270c:	2300      	movne	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	461a      	mov	r2, r3
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002720:	2b00      	cmp	r3, #0
 8002722:	bf14      	ite	ne
 8002724:	2301      	movne	r3, #1
 8002726:	2300      	moveq	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800273a:	2b00      	cmp	r3, #0
 800273c:	bf14      	ite	ne
 800273e:	2301      	movne	r3, #1
 8002740:	2300      	moveq	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf14      	ite	ne
 8002758:	2301      	movne	r3, #1
 800275a:	2300      	moveq	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800276e:	2b00      	cmp	r3, #0
 8002770:	bf14      	ite	ne
 8002772:	2301      	movne	r3, #1
 8002774:	2300      	moveq	r3, #0
 8002776:	b2db      	uxtb	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	bf14      	ite	ne
 800279a:	2301      	movne	r3, #1
 800279c:	2300      	moveq	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	bf0c      	ite	eq
 80027d0:	2301      	moveq	r3, #1
 80027d2:	2300      	movne	r3, #0
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	461a      	mov	r2, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	bf14      	ite	ne
 80027ec:	2301      	movne	r3, #1
 80027ee:	2300      	moveq	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	461a      	mov	r2, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002804:	2b00      	cmp	r3, #0
 8002806:	bf14      	ite	ne
 8002808:	2301      	movne	r3, #1
 800280a:	2300      	moveq	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	bf14      	ite	ne
 8002824:	2301      	movne	r3, #1
 8002826:	2300      	moveq	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	0e5b      	lsrs	r3, r3, #25
 800283a:	f003 021f 	and.w	r2, r3, #31
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284c:	2b00      	cmp	r3, #0
 800284e:	bf14      	ite	ne
 8002850:	2301      	movne	r3, #1
 8002852:	2300      	moveq	r3, #0
 8002854:	b2db      	uxtb	r3, r3
 8002856:	461a      	mov	r2, r3
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f003 020f 	and.w	r2, r3, #15
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	bf14      	ite	ne
 800287a:	2301      	movne	r3, #1
 800287c:	2300      	moveq	r3, #0
 800287e:	b2db      	uxtb	r3, r3
 8002880:	461a      	mov	r2, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002892:	2b00      	cmp	r3, #0
 8002894:	bf0c      	ite	eq
 8002896:	2301      	moveq	r3, #1
 8002898:	2300      	movne	r3, #0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b8:	0c1b      	lsrs	r3, r3, #16
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf14      	ite	ne
 80028d0:	2301      	movne	r3, #1
 80028d2:	2300      	moveq	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	bf14      	ite	ne
 80028ee:	2301      	movne	r3, #1
 80028f0:	2300      	moveq	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	461a      	mov	r2, r3
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002904:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002914:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	bf14      	ite	ne
 800292c:	2301      	movne	r3, #1
 800292e:	2300      	moveq	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002942:	f003 0310 	and.w	r3, r3, #16
 8002946:	2b00      	cmp	r3, #0
 8002948:	bf14      	ite	ne
 800294a:	2301      	movne	r3, #1
 800294c:	2300      	moveq	r3, #0
 800294e:	b2db      	uxtb	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002964:	2b00      	cmp	r3, #0
 8002966:	bf0c      	ite	eq
 8002968:	2301      	moveq	r3, #1
 800296a:	2300      	movne	r3, #0
 800296c:	b2db      	uxtb	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e00a      	b.n	80029ae <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299c:	2b10      	cmp	r3, #16
 800299e:	d105      	bne.n	80029ac <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 80029a0:	6839      	ldr	r1, [r7, #0]
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f860 	bl	8002a68 <ETH_SetMACConfig>

    return HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	e000      	b.n	80029ae <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
  }
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029c8:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029d0:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80029d2:	f002 fb0d 	bl	8004ff0 <HAL_RCC_GetHCLKFreq>
 80029d6:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4a1e      	ldr	r2, [pc, #120]	; (8002a54 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d908      	bls.n	80029f2 <HAL_ETH_SetMDIOClockRange+0x3a>
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4a1d      	ldr	r2, [pc, #116]	; (8002a58 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d804      	bhi.n	80029f2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	e027      	b.n	8002a42 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	4a18      	ldr	r2, [pc, #96]	; (8002a58 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d908      	bls.n	8002a0c <HAL_ETH_SetMDIOClockRange+0x54>
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	4a17      	ldr	r2, [pc, #92]	; (8002a5c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d804      	bhi.n	8002a0c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	e01a      	b.n	8002a42 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4a13      	ldr	r2, [pc, #76]	; (8002a5c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d903      	bls.n	8002a1c <HAL_ETH_SetMDIOClockRange+0x64>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d911      	bls.n	8002a40 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	4a10      	ldr	r2, [pc, #64]	; (8002a60 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d908      	bls.n	8002a36 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	4a0f      	ldr	r2, [pc, #60]	; (8002a64 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d804      	bhi.n	8002a36 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	e005      	b.n	8002a42 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	e000      	b.n	8002a42 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002a40:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	01312cff 	.word	0x01312cff
 8002a58:	02160ebf 	.word	0x02160ebf
 8002a5c:	039386ff 	.word	0x039386ff
 8002a60:	05f5e0ff 	.word	0x05f5e0ff
 8002a64:	08f0d17f 	.word	0x08f0d17f

08002a68 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002a7a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	791b      	ldrb	r3, [r3, #4]
 8002a80:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002a82:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	7b1b      	ldrb	r3, [r3, #12]
 8002a88:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002a8a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	7b5b      	ldrb	r3, [r3, #13]
 8002a90:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002a92:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	7b9b      	ldrb	r3, [r3, #14]
 8002a98:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002a9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	7bdb      	ldrb	r3, [r3, #15]
 8002aa0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002aa2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	7c12      	ldrb	r2, [r2, #16]
 8002aa8:	2a00      	cmp	r2, #0
 8002aaa:	d102      	bne.n	8002ab2 <ETH_SetMACConfig+0x4a>
 8002aac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002ab0:	e000      	b.n	8002ab4 <ETH_SetMACConfig+0x4c>
 8002ab2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002ab4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	7c52      	ldrb	r2, [r2, #17]
 8002aba:	2a00      	cmp	r2, #0
 8002abc:	d102      	bne.n	8002ac4 <ETH_SetMACConfig+0x5c>
 8002abe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ac2:	e000      	b.n	8002ac6 <ETH_SetMACConfig+0x5e>
 8002ac4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002ac6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	7c9b      	ldrb	r3, [r3, #18]
 8002acc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002ace:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002ad4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002ada:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	7f1b      	ldrb	r3, [r3, #28]
 8002ae0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002ae2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	7f5b      	ldrb	r3, [r3, #29]
 8002ae8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002aea:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	7f92      	ldrb	r2, [r2, #30]
 8002af0:	2a00      	cmp	r2, #0
 8002af2:	d102      	bne.n	8002afa <ETH_SetMACConfig+0x92>
 8002af4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002af8:	e000      	b.n	8002afc <ETH_SetMACConfig+0x94>
 8002afa:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002afc:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	7fdb      	ldrb	r3, [r3, #31]
 8002b02:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002b04:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002b0c:	2a00      	cmp	r2, #0
 8002b0e:	d102      	bne.n	8002b16 <ETH_SetMACConfig+0xae>
 8002b10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b14:	e000      	b.n	8002b18 <ETH_SetMACConfig+0xb0>
 8002b16:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002b18:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002b1e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b26:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002b28:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4b56      	ldr	r3, [pc, #344]	; (8002c94 <ETH_SetMACConfig+0x22c>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	68f9      	ldr	r1, [r7, #12]
 8002b42:	430b      	orrs	r3, r1
 8002b44:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b52:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002b54:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b5c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002b5e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002b66:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002b68:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002b70:	2a00      	cmp	r2, #0
 8002b72:	d102      	bne.n	8002b7a <ETH_SetMACConfig+0x112>
 8002b74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b78:	e000      	b.n	8002b7c <ETH_SetMACConfig+0x114>
 8002b7a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002b7c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	4b42      	ldr	r3, [pc, #264]	; (8002c98 <ETH_SetMACConfig+0x230>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	68f9      	ldr	r1, [r7, #12]
 8002b96:	430b      	orrs	r3, r1
 8002b98:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ba0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	4b3a      	ldr	r3, [pc, #232]	; (8002c9c <ETH_SetMACConfig+0x234>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	68f9      	ldr	r1, [r7, #12]
 8002bba:	430b      	orrs	r3, r1
 8002bbc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002bc4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002bca:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002bd2:	2a00      	cmp	r2, #0
 8002bd4:	d101      	bne.n	8002bda <ETH_SetMACConfig+0x172>
 8002bd6:	2280      	movs	r2, #128	; 0x80
 8002bd8:	e000      	b.n	8002bdc <ETH_SetMACConfig+0x174>
 8002bda:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002bdc:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bee:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6812      	ldr	r2, [r2, #0]
 8002bf8:	68f9      	ldr	r1, [r7, #12]
 8002bfa:	430b      	orrs	r3, r1
 8002bfc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002c04:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002c0c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1a:	f023 0103 	bic.w	r1, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002c32:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002c4e:	2a00      	cmp	r2, #0
 8002c50:	d101      	bne.n	8002c56 <ETH_SetMACConfig+0x1ee>
 8002c52:	2240      	movs	r2, #64	; 0x40
 8002c54:	e000      	b.n	8002c58 <ETH_SetMACConfig+0x1f0>
 8002c56:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002c58:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002c60:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002c62:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002c6a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002c78:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002c88:	bf00      	nop
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	00048083 	.word	0x00048083
 8002c98:	c0f88000 	.word	0xc0f88000
 8002c9c:	fffffef0 	.word	0xfffffef0

08002ca0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b38      	ldr	r3, [pc, #224]	; (8002d98 <ETH_SetDMAConfig+0xf8>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	6809      	ldr	r1, [r1, #0]
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002cc6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	791b      	ldrb	r3, [r3, #4]
 8002ccc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002cd2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	7b1b      	ldrb	r3, [r3, #12]
 8002cd8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	f241 0304 	movw	r3, #4100	; 0x1004
 8002ce6:	4413      	add	r3, r2
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4b2c      	ldr	r3, [pc, #176]	; (8002d9c <ETH_SetDMAConfig+0xfc>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6811      	ldr	r1, [r2, #0]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	f241 0304 	movw	r3, #4100	; 0x1004
 8002cfa:	440b      	add	r3, r1
 8002cfc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	7b5b      	ldrb	r3, [r3, #13]
 8002d02:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <ETH_SetDMAConfig+0x100>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6811      	ldr	r1, [r2, #0]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	431a      	orrs	r2, r3
 8002d22:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002d26:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	7d1b      	ldrb	r3, [r3, #20]
 8002d30:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d32:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	7f5b      	ldrb	r3, [r3, #29]
 8002d38:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	f241 1304 	movw	r3, #4356	; 0x1104
 8002d46:	4413      	add	r3, r2
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <ETH_SetDMAConfig+0x104>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6811      	ldr	r1, [r2, #0]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	431a      	orrs	r2, r3
 8002d56:	f241 1304 	movw	r3, #4356	; 0x1104
 8002d5a:	440b      	add	r3, r1
 8002d5c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	7f1b      	ldrb	r3, [r3, #28]
 8002d62:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	f241 1308 	movw	r3, #4360	; 0x1108
 8002d74:	4413      	add	r3, r2
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <ETH_SetDMAConfig+0x108>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6811      	ldr	r1, [r2, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	f241 1308 	movw	r3, #4360	; 0x1108
 8002d88:	440b      	add	r3, r1
 8002d8a:	601a      	str	r2, [r3, #0]
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	ffff87fd 	.word	0xffff87fd
 8002d9c:	ffff2ffe 	.word	0xffff2ffe
 8002da0:	fffec000 	.word	0xfffec000
 8002da4:	ffc0efef 	.word	0xffc0efef
 8002da8:	7fc0ffff 	.word	0x7fc0ffff

08002dac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b0a4      	sub	sp, #144	; 0x90
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002db4:	2301      	movs	r3, #1
 8002db6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002de2:	2301      	movs	r3, #1
 8002de4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002de8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dec:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002e04:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002e08:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002e10:	2300      	movs	r3, #0
 8002e12:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002e14:	2301      	movs	r3, #1
 8002e16:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002e26:	2300      	movs	r3, #0
 8002e28:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002e32:	2300      	movs	r3, #0
 8002e34:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002e44:	2320      	movs	r3, #32
 8002e46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002e56:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002e5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e60:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002e80:	2301      	movs	r3, #1
 8002e82:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002e86:	2300      	movs	r3, #0
 8002e88:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e94:	4619      	mov	r1, r3
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff fde6 	bl	8002a68 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002eb6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002eba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ec0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ec4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002ecc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002ed0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002ed2:	f107 0308 	add.w	r3, r7, #8
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff fee1 	bl	8002ca0 <ETH_SetDMAConfig>
}
 8002ede:	bf00      	nop
 8002ee0:	3790      	adds	r7, #144	; 0x90
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002f02:	f002 f875 	bl	8004ff0 <HAL_RCC_GetHCLKFreq>
 8002f06:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4a1e      	ldr	r2, [pc, #120]	; (8002f84 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d908      	bls.n	8002f22 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4a1d      	ldr	r2, [pc, #116]	; (8002f88 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d804      	bhi.n	8002f22 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	e027      	b.n	8002f72 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	4a18      	ldr	r2, [pc, #96]	; (8002f88 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d908      	bls.n	8002f3c <ETH_MAC_MDIO_ClkConfig+0x54>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	4a17      	ldr	r2, [pc, #92]	; (8002f8c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d804      	bhi.n	8002f3c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	e01a      	b.n	8002f72 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	4a13      	ldr	r2, [pc, #76]	; (8002f8c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d903      	bls.n	8002f4c <ETH_MAC_MDIO_ClkConfig+0x64>
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4a12      	ldr	r2, [pc, #72]	; (8002f90 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d911      	bls.n	8002f70 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4a10      	ldr	r2, [pc, #64]	; (8002f90 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d908      	bls.n	8002f66 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4a0f      	ldr	r2, [pc, #60]	; (8002f94 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d804      	bhi.n	8002f66 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	e005      	b.n	8002f72 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	e000      	b.n	8002f72 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002f70:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002f7c:	bf00      	nop
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	01312cff 	.word	0x01312cff
 8002f88:	02160ebf 	.word	0x02160ebf
 8002f8c:	039386ff 	.word	0x039386ff
 8002f90:	05f5e0ff 	.word	0x05f5e0ff
 8002f94:	08f0d17f 	.word	0x08f0d17f

08002f98 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	e01d      	b.n	8002fe2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68d9      	ldr	r1, [r3, #12]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4613      	mov	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4413      	add	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	440b      	add	r3, r1
 8002fb6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	3206      	adds	r2, #6
 8002fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d9de      	bls.n	8002fa6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	f241 132c 	movw	r3, #4396	; 0x112c
 8002ff6:	4413      	add	r3, r2
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68d9      	ldr	r1, [r3, #12]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	f241 1314 	movw	r3, #4372	; 0x1114
 8003008:	4413      	add	r3, r2
 800300a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003018:	601a      	str	r2, [r3, #0]
}
 800301a:	bf00      	nop
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003026:	b480      	push	{r7}
 8003028:	b085      	sub	sp, #20
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	e024      	b.n	800307e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6919      	ldr	r1, [r3, #16]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4613      	mov	r3, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	4413      	add	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	440b      	add	r3, r1
 8003044:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2200      	movs	r2, #0
 8003050:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2200      	movs	r2, #0
 8003056:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2200      	movs	r2, #0
 800305c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2200      	movs	r2, #0
 8003062:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2200      	movs	r2, #0
 8003068:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	330a      	adds	r3, #10
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3301      	adds	r3, #1
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d9d7      	bls.n	8003034 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	f241 1330 	movw	r3, #4400	; 0x1130
 80030aa:	4413      	add	r3, r2
 80030ac:	2203      	movs	r2, #3
 80030ae:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6919      	ldr	r1, [r3, #16]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	f241 131c 	movw	r3, #4380	; 0x111c
 80030bc:	4413      	add	r3, r2
 80030be:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	f241 1328 	movw	r3, #4392	; 0x1128
 80030d0:	4413      	add	r3, r2
 80030d2:	6019      	str	r1, [r3, #0]
}
 80030d4:	bf00      	nop
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b08d      	sub	sp, #52	; 0x34
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	3318      	adds	r3, #24
 80030f0:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 80030fe:	2300      	movs	r3, #0
 8003100:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800310a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800311a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800311e:	d101      	bne.n	8003124 <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 8003120:	2302      	movs	r3, #2
 8003122:	e223      	b.n	800356c <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d044      	beq.n	80031ba <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	4b72      	ldr	r3, [pc, #456]	; (8003300 <ETH_Prepare_Tx_Descriptors+0x220>)
 8003136:	4013      	ands	r3, r2
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800313c:	431a      	orrs	r2, r3
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800315c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d027      	beq.n	80031ba <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	b29a      	uxth	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	041b      	lsls	r3, r3, #16
 8003176:	431a      	orrs	r2, r3
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	431a      	orrs	r2, r3
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80031a8:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80031b8:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00e      	beq.n	80031e4 <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	4b4e      	ldr	r3, [pc, #312]	; (8003304 <ETH_Prepare_Tx_Descriptors+0x224>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	6992      	ldr	r2, [r2, #24]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <ETH_Prepare_Tx_Descriptors+0x11c>
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0310 	and.w	r3, r3, #16
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d030      	beq.n	800325e <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003216:	3301      	adds	r3, #1
 8003218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800321a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321c:	2b03      	cmp	r3, #3
 800321e:	d902      	bls.n	8003226 <ETH_Prepare_Tx_Descriptors+0x146>
 8003220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003222:	3b04      	subs	r3, #4
 8003224:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800322a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800322e:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8003230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003232:	3301      	adds	r3, #1
 8003234:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800323e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003242:	d10c      	bne.n	800325e <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800324c:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800325a:	2302      	movs	r3, #2
 800325c:	e186      	b.n	800356c <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	3301      	adds	r3, #1
 8003262:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	461a      	mov	r2, r3
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	4b24      	ldr	r3, [pc, #144]	; (8003304 <ETH_Prepare_Tx_Descriptors+0x224>)
 8003274:	4013      	ands	r3, r2
 8003276:	69fa      	ldr	r2, [r7, #28]
 8003278:	6852      	ldr	r2, [r2, #4]
 800327a:	431a      	orrs	r2, r3
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d012      	beq.n	80032ae <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <ETH_Prepare_Tx_Descriptors+0x228>)
 800329e:	4013      	ands	r3, r2
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	6852      	ldr	r2, [r2, #4]
 80032a4:	0412      	lsls	r2, r2, #16
 80032a6:	431a      	orrs	r2, r3
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	e008      	b.n	80032c0 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	2200      	movs	r2, #0
 80032b2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	4b13      	ldr	r3, [pc, #76]	; (8003308 <ETH_Prepare_Tx_Descriptors+0x228>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	6a3a      	ldr	r2, [r7, #32]
 80032be:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d021      	beq.n	8003310 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	04db      	lsls	r3, r3, #19
 80032da:	431a      	orrs	r2, r3
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	4b09      	ldr	r3, [pc, #36]	; (800330c <ETH_Prepare_Tx_Descriptors+0x22c>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	69d2      	ldr	r2, [r2, #28]
 80032ec:	431a      	orrs	r2, r3
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	60da      	str	r2, [r3, #12]
 80032fe:	e02e      	b.n	800335e <ETH_Prepare_Tx_Descriptors+0x27e>
 8003300:	ffff0000 	.word	0xffff0000
 8003304:	ffffc000 	.word	0xffffc000
 8003308:	c000ffff 	.word	0xc000ffff
 800330c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	4b98      	ldr	r3, [pc, #608]	; (8003578 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003316:	4013      	ands	r3, r2
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	6852      	ldr	r2, [r2, #4]
 800331c:	431a      	orrs	r2, r3
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d008      	beq.n	8003340 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	431a      	orrs	r2, r3
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	431a      	orrs	r2, r3
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	d008      	beq.n	800337c <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	431a      	orrs	r2, r3
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 80c0 	beq.w	800352e <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80033c0:	e0b5      	b.n	800352e <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80033ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d0:	3301      	adds	r3, #1
 80033d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d902      	bls.n	80033e0 <ETH_Prepare_Tx_Descriptors+0x300>
 80033da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033dc:	3b04      	subs	r3, #4
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003402:	d126      	bne.n	8003452 <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800340c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003410:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8003412:	2300      	movs	r3, #0
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
 8003416:	e016      	b.n	8003446 <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003426:	3301      	adds	r3, #1
 8003428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342c:	2b03      	cmp	r3, #3
 800342e:	d902      	bls.n	8003436 <ETH_Prepare_Tx_Descriptors+0x356>
 8003430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003432:	3b04      	subs	r3, #4
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800343a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800343e:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	3301      	adds	r3, #1
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
 8003446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344a:	429a      	cmp	r2, r3
 800344c:	d3e4      	bcc.n	8003418 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 800344e:	2302      	movs	r3, #2
 8003450:	e08c      	b.n	800356c <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 8003452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003454:	3301      	adds	r3, #1
 8003456:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	4b43      	ldr	r3, [pc, #268]	; (800357c <ETH_Prepare_Tx_Descriptors+0x49c>)
 800346e:	4013      	ands	r3, r2
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	6852      	ldr	r2, [r2, #4]
 8003474:	431a      	orrs	r2, r3
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d012      	beq.n	80034a8 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	461a      	mov	r2, r3
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	4b3a      	ldr	r3, [pc, #232]	; (8003580 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003498:	4013      	ands	r3, r2
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	6852      	ldr	r2, [r2, #4]
 800349e:	0412      	lsls	r2, r2, #16
 80034a0:	431a      	orrs	r2, r3
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	609a      	str	r2, [r3, #8]
 80034a6:	e008      	b.n	80034ba <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	2200      	movs	r2, #0
 80034ac:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	4b33      	ldr	r3, [pc, #204]	; (8003580 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	6a3a      	ldr	r2, [r7, #32]
 80034b8:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00f      	beq.n	80034e6 <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	4b2e      	ldr	r3, [pc, #184]	; (8003584 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	69d2      	ldr	r2, [r2, #28]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	60da      	str	r2, [r3, #12]
 80034e4:	e017      	b.n	8003516 <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	4b23      	ldr	r3, [pc, #140]	; (8003578 <ETH_Prepare_Tx_Descriptors+0x498>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	6852      	ldr	r2, [r2, #4]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	431a      	orrs	r2, r3
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	f47f af45 	bne.w	80033c2 <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d006      	beq.n	800354c <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	609a      	str	r2, [r3, #8]
 800354a:	e005      	b.n	8003558 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003568:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3734      	adds	r7, #52	; 0x34
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr
 8003578:	ffff8000 	.word	0xffff8000
 800357c:	ffffc000 	.word	0xffffc000
 8003580:	c000ffff 	.word	0xc000ffff
 8003584:	fffc0000 	.word	0xfffc0000

08003588 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003592:	2300      	movs	r3, #0
 8003594:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003596:	4b47      	ldr	r3, [pc, #284]	; (80036b4 <HAL_GPIO_Init+0x12c>)
 8003598:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a46      	ldr	r2, [pc, #280]	; (80036b8 <HAL_GPIO_Init+0x130>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d02b      	beq.n	80035fa <HAL_GPIO_Init+0x72>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a45      	ldr	r2, [pc, #276]	; (80036bc <HAL_GPIO_Init+0x134>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d027      	beq.n	80035fa <HAL_GPIO_Init+0x72>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a44      	ldr	r2, [pc, #272]	; (80036c0 <HAL_GPIO_Init+0x138>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d023      	beq.n	80035fa <HAL_GPIO_Init+0x72>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a43      	ldr	r2, [pc, #268]	; (80036c4 <HAL_GPIO_Init+0x13c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d01f      	beq.n	80035fa <HAL_GPIO_Init+0x72>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a42      	ldr	r2, [pc, #264]	; (80036c8 <HAL_GPIO_Init+0x140>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d01b      	beq.n	80035fa <HAL_GPIO_Init+0x72>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a41      	ldr	r2, [pc, #260]	; (80036cc <HAL_GPIO_Init+0x144>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d017      	beq.n	80035fa <HAL_GPIO_Init+0x72>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a40      	ldr	r2, [pc, #256]	; (80036d0 <HAL_GPIO_Init+0x148>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d013      	beq.n	80035fa <HAL_GPIO_Init+0x72>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a3f      	ldr	r2, [pc, #252]	; (80036d4 <HAL_GPIO_Init+0x14c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00f      	beq.n	80035fa <HAL_GPIO_Init+0x72>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a3e      	ldr	r2, [pc, #248]	; (80036d8 <HAL_GPIO_Init+0x150>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00b      	beq.n	80035fa <HAL_GPIO_Init+0x72>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a3d      	ldr	r2, [pc, #244]	; (80036dc <HAL_GPIO_Init+0x154>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d007      	beq.n	80035fa <HAL_GPIO_Init+0x72>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a3c      	ldr	r2, [pc, #240]	; (80036e0 <HAL_GPIO_Init+0x158>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d003      	beq.n	80035fa <HAL_GPIO_Init+0x72>
 80035f2:	21bb      	movs	r1, #187	; 0xbb
 80035f4:	483b      	ldr	r0, [pc, #236]	; (80036e4 <HAL_GPIO_Init+0x15c>)
 80035f6:	f7fd fb64 	bl	8000cc2 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d005      	beq.n	8003610 <HAL_GPIO_Init+0x88>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	4b37      	ldr	r3, [pc, #220]	; (80036e8 <HAL_GPIO_Init+0x160>)
 800360a:	4013      	ands	r3, r2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_Init+0x90>
 8003610:	21bc      	movs	r1, #188	; 0xbc
 8003612:	4834      	ldr	r0, [pc, #208]	; (80036e4 <HAL_GPIO_Init+0x15c>)
 8003614:	f7fd fb55 	bl	8000cc2 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d035      	beq.n	800368c <HAL_GPIO_Init+0x104>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d031      	beq.n	800368c <HAL_GPIO_Init+0x104>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b11      	cmp	r3, #17
 800362e:	d02d      	beq.n	800368c <HAL_GPIO_Init+0x104>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b02      	cmp	r3, #2
 8003636:	d029      	beq.n	800368c <HAL_GPIO_Init+0x104>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b12      	cmp	r3, #18
 800363e:	d025      	beq.n	800368c <HAL_GPIO_Init+0x104>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	4a29      	ldr	r2, [pc, #164]	; (80036ec <HAL_GPIO_Init+0x164>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d020      	beq.n	800368c <HAL_GPIO_Init+0x104>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	4a28      	ldr	r2, [pc, #160]	; (80036f0 <HAL_GPIO_Init+0x168>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d01b      	beq.n	800368c <HAL_GPIO_Init+0x104>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4a26      	ldr	r2, [pc, #152]	; (80036f4 <HAL_GPIO_Init+0x16c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d016      	beq.n	800368c <HAL_GPIO_Init+0x104>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4a25      	ldr	r2, [pc, #148]	; (80036f8 <HAL_GPIO_Init+0x170>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d011      	beq.n	800368c <HAL_GPIO_Init+0x104>
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	4a23      	ldr	r2, [pc, #140]	; (80036fc <HAL_GPIO_Init+0x174>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00c      	beq.n	800368c <HAL_GPIO_Init+0x104>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4a22      	ldr	r2, [pc, #136]	; (8003700 <HAL_GPIO_Init+0x178>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d007      	beq.n	800368c <HAL_GPIO_Init+0x104>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b03      	cmp	r3, #3
 8003682:	d003      	beq.n	800368c <HAL_GPIO_Init+0x104>
 8003684:	21bd      	movs	r1, #189	; 0xbd
 8003686:	4817      	ldr	r0, [pc, #92]	; (80036e4 <HAL_GPIO_Init+0x15c>)
 8003688:	f7fd fb1b 	bl	8000cc2 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 821a 	beq.w	8003aca <HAL_GPIO_Init+0x542>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b01      	cmp	r3, #1
 800369c:	f000 8215 	beq.w	8003aca <HAL_GPIO_Init+0x542>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	f000 8210 	beq.w	8003aca <HAL_GPIO_Init+0x542>
 80036aa:	21be      	movs	r1, #190	; 0xbe
 80036ac:	480d      	ldr	r0, [pc, #52]	; (80036e4 <HAL_GPIO_Init+0x15c>)
 80036ae:	f7fd fb08 	bl	8000cc2 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036b2:	e20a      	b.n	8003aca <HAL_GPIO_Init+0x542>
 80036b4:	58000080 	.word	0x58000080
 80036b8:	58020000 	.word	0x58020000
 80036bc:	58020400 	.word	0x58020400
 80036c0:	58020800 	.word	0x58020800
 80036c4:	58020c00 	.word	0x58020c00
 80036c8:	58021000 	.word	0x58021000
 80036cc:	58021400 	.word	0x58021400
 80036d0:	58021800 	.word	0x58021800
 80036d4:	58021c00 	.word	0x58021c00
 80036d8:	58022000 	.word	0x58022000
 80036dc:	58022400 	.word	0x58022400
 80036e0:	58022800 	.word	0x58022800
 80036e4:	0801888c 	.word	0x0801888c
 80036e8:	ffff0000 	.word	0xffff0000
 80036ec:	11110000 	.word	0x11110000
 80036f0:	11210000 	.word	0x11210000
 80036f4:	11310000 	.word	0x11310000
 80036f8:	11120000 	.word	0x11120000
 80036fc:	11220000 	.word	0x11220000
 8003700:	11320000 	.word	0x11320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	2101      	movs	r1, #1
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	fa01 f303 	lsl.w	r3, r1, r3
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 81d4 	beq.w	8003ac4 <HAL_GPIO_Init+0x53c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d00b      	beq.n	800373c <HAL_GPIO_Init+0x1b4>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d007      	beq.n	800373c <HAL_GPIO_Init+0x1b4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003730:	2b11      	cmp	r3, #17
 8003732:	d003      	beq.n	800373c <HAL_GPIO_Init+0x1b4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b12      	cmp	r3, #18
 800373a:	d144      	bne.n	80037c6 <HAL_GPIO_Init+0x23e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00f      	beq.n	8003764 <HAL_GPIO_Init+0x1dc>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d00b      	beq.n	8003764 <HAL_GPIO_Init+0x1dc>
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d007      	beq.n	8003764 <HAL_GPIO_Init+0x1dc>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	2b03      	cmp	r3, #3
 800375a:	d003      	beq.n	8003764 <HAL_GPIO_Init+0x1dc>
 800375c:	21ce      	movs	r1, #206	; 0xce
 800375e:	4897      	ldr	r0, [pc, #604]	; (80039bc <HAL_GPIO_Init+0x434>)
 8003760:	f7fd faaf 	bl	8000cc2 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	2203      	movs	r2, #3
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800379a:	2201      	movs	r2, #1
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4013      	ands	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	091b      	lsrs	r3, r3, #4
 80037b0:	f003 0201 	and.w	r2, r3, #1
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	2203      	movs	r2, #3
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d003      	beq.n	8003806 <HAL_GPIO_Init+0x27e>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b12      	cmp	r3, #18
 8003804:	d15b      	bne.n	80038be <HAL_GPIO_Init+0x336>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a6d      	ldr	r2, [pc, #436]	; (80039c0 <HAL_GPIO_Init+0x438>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d02b      	beq.n	8003866 <HAL_GPIO_Init+0x2de>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a6c      	ldr	r2, [pc, #432]	; (80039c4 <HAL_GPIO_Init+0x43c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d027      	beq.n	8003866 <HAL_GPIO_Init+0x2de>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a6b      	ldr	r2, [pc, #428]	; (80039c8 <HAL_GPIO_Init+0x440>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d023      	beq.n	8003866 <HAL_GPIO_Init+0x2de>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a6a      	ldr	r2, [pc, #424]	; (80039cc <HAL_GPIO_Init+0x444>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d01f      	beq.n	8003866 <HAL_GPIO_Init+0x2de>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a69      	ldr	r2, [pc, #420]	; (80039d0 <HAL_GPIO_Init+0x448>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d01b      	beq.n	8003866 <HAL_GPIO_Init+0x2de>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a68      	ldr	r2, [pc, #416]	; (80039d4 <HAL_GPIO_Init+0x44c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d017      	beq.n	8003866 <HAL_GPIO_Init+0x2de>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a67      	ldr	r2, [pc, #412]	; (80039d8 <HAL_GPIO_Init+0x450>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <HAL_GPIO_Init+0x2de>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a66      	ldr	r2, [pc, #408]	; (80039dc <HAL_GPIO_Init+0x454>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d00f      	beq.n	8003866 <HAL_GPIO_Init+0x2de>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a65      	ldr	r2, [pc, #404]	; (80039e0 <HAL_GPIO_Init+0x458>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00b      	beq.n	8003866 <HAL_GPIO_Init+0x2de>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a64      	ldr	r2, [pc, #400]	; (80039e4 <HAL_GPIO_Init+0x45c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d007      	beq.n	8003866 <HAL_GPIO_Init+0x2de>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a63      	ldr	r2, [pc, #396]	; (80039e8 <HAL_GPIO_Init+0x460>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d003      	beq.n	8003866 <HAL_GPIO_Init+0x2de>
 800385e:	21e6      	movs	r1, #230	; 0xe6
 8003860:	4856      	ldr	r0, [pc, #344]	; (80039bc <HAL_GPIO_Init+0x434>)
 8003862:	f7fd fa2e 	bl	8000cc2 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b0f      	cmp	r3, #15
 800386c:	d903      	bls.n	8003876 <HAL_GPIO_Init+0x2ee>
 800386e:	21e7      	movs	r1, #231	; 0xe7
 8003870:	4852      	ldr	r0, [pc, #328]	; (80039bc <HAL_GPIO_Init+0x434>)
 8003872:	f7fd fa26 	bl	8000cc2 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	08da      	lsrs	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3208      	adds	r2, #8
 800387e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	220f      	movs	r2, #15
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	691a      	ldr	r2, [r3, #16]
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	08da      	lsrs	r2, r3, #3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3208      	adds	r2, #8
 80038b8:	69b9      	ldr	r1, [r7, #24]
 80038ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	2203      	movs	r2, #3
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43db      	mvns	r3, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4013      	ands	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f003 0203 	and.w	r2, r3, #3
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 80e2 	beq.w	8003ac4 <HAL_GPIO_Init+0x53c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003900:	4b3a      	ldr	r3, [pc, #232]	; (80039ec <HAL_GPIO_Init+0x464>)
 8003902:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003906:	4a39      	ldr	r2, [pc, #228]	; (80039ec <HAL_GPIO_Init+0x464>)
 8003908:	f043 0302 	orr.w	r3, r3, #2
 800390c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003910:	4b36      	ldr	r3, [pc, #216]	; (80039ec <HAL_GPIO_Init+0x464>)
 8003912:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800391e:	4a34      	ldr	r2, [pc, #208]	; (80039f0 <HAL_GPIO_Init+0x468>)
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	089b      	lsrs	r3, r3, #2
 8003924:	3302      	adds	r3, #2
 8003926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800392a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0303 	and.w	r3, r3, #3
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	220f      	movs	r2, #15
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4013      	ands	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a1e      	ldr	r2, [pc, #120]	; (80039c0 <HAL_GPIO_Init+0x438>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d054      	beq.n	80039f4 <HAL_GPIO_Init+0x46c>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a1d      	ldr	r2, [pc, #116]	; (80039c4 <HAL_GPIO_Init+0x43c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d031      	beq.n	80039b6 <HAL_GPIO_Init+0x42e>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a1c      	ldr	r2, [pc, #112]	; (80039c8 <HAL_GPIO_Init+0x440>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d02b      	beq.n	80039b2 <HAL_GPIO_Init+0x42a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a1b      	ldr	r2, [pc, #108]	; (80039cc <HAL_GPIO_Init+0x444>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d025      	beq.n	80039ae <HAL_GPIO_Init+0x426>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a1a      	ldr	r2, [pc, #104]	; (80039d0 <HAL_GPIO_Init+0x448>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d01f      	beq.n	80039aa <HAL_GPIO_Init+0x422>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a19      	ldr	r2, [pc, #100]	; (80039d4 <HAL_GPIO_Init+0x44c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d019      	beq.n	80039a6 <HAL_GPIO_Init+0x41e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a18      	ldr	r2, [pc, #96]	; (80039d8 <HAL_GPIO_Init+0x450>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d013      	beq.n	80039a2 <HAL_GPIO_Init+0x41a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a17      	ldr	r2, [pc, #92]	; (80039dc <HAL_GPIO_Init+0x454>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00d      	beq.n	800399e <HAL_GPIO_Init+0x416>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a16      	ldr	r2, [pc, #88]	; (80039e0 <HAL_GPIO_Init+0x458>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d007      	beq.n	800399a <HAL_GPIO_Init+0x412>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a15      	ldr	r2, [pc, #84]	; (80039e4 <HAL_GPIO_Init+0x45c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d101      	bne.n	8003996 <HAL_GPIO_Init+0x40e>
 8003992:	2309      	movs	r3, #9
 8003994:	e02f      	b.n	80039f6 <HAL_GPIO_Init+0x46e>
 8003996:	230a      	movs	r3, #10
 8003998:	e02d      	b.n	80039f6 <HAL_GPIO_Init+0x46e>
 800399a:	2308      	movs	r3, #8
 800399c:	e02b      	b.n	80039f6 <HAL_GPIO_Init+0x46e>
 800399e:	2307      	movs	r3, #7
 80039a0:	e029      	b.n	80039f6 <HAL_GPIO_Init+0x46e>
 80039a2:	2306      	movs	r3, #6
 80039a4:	e027      	b.n	80039f6 <HAL_GPIO_Init+0x46e>
 80039a6:	2305      	movs	r3, #5
 80039a8:	e025      	b.n	80039f6 <HAL_GPIO_Init+0x46e>
 80039aa:	2304      	movs	r3, #4
 80039ac:	e023      	b.n	80039f6 <HAL_GPIO_Init+0x46e>
 80039ae:	2303      	movs	r3, #3
 80039b0:	e021      	b.n	80039f6 <HAL_GPIO_Init+0x46e>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e01f      	b.n	80039f6 <HAL_GPIO_Init+0x46e>
 80039b6:	2301      	movs	r3, #1
 80039b8:	e01d      	b.n	80039f6 <HAL_GPIO_Init+0x46e>
 80039ba:	bf00      	nop
 80039bc:	0801888c 	.word	0x0801888c
 80039c0:	58020000 	.word	0x58020000
 80039c4:	58020400 	.word	0x58020400
 80039c8:	58020800 	.word	0x58020800
 80039cc:	58020c00 	.word	0x58020c00
 80039d0:	58021000 	.word	0x58021000
 80039d4:	58021400 	.word	0x58021400
 80039d8:	58021800 	.word	0x58021800
 80039dc:	58021c00 	.word	0x58021c00
 80039e0:	58022000 	.word	0x58022000
 80039e4:	58022400 	.word	0x58022400
 80039e8:	58022800 	.word	0x58022800
 80039ec:	58024400 	.word	0x58024400
 80039f0:	58000400 	.word	0x58000400
 80039f4:	2300      	movs	r3, #0
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	f002 0203 	and.w	r2, r2, #3
 80039fc:	0092      	lsls	r2, r2, #2
 80039fe:	4093      	lsls	r3, r2
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a06:	4937      	ldr	r1, [pc, #220]	; (8003ae4 <HAL_GPIO_Init+0x55c>)
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	089b      	lsrs	r3, r3, #2
 8003a0c:	3302      	adds	r3, #2
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4013      	ands	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_GPIO_Init+0x4b0>
        {
          temp |= iocurrent;
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	43db      	mvns	r3, r3
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_GPIO_Init+0x4da>
        {
          temp |= iocurrent;
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	43db      	mvns	r3, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4013      	ands	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_GPIO_Init+0x506>
        {
          temp |= iocurrent;
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003a8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_GPIO_Init+0x534>
        {
          temp |= iocurrent;
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003abc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f47f ae15 	bne.w	8003704 <HAL_GPIO_Init+0x17c>
  }
}
 8003ada:	bf00      	nop
 8003adc:	3720      	adds	r7, #32
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	58000400 	.word	0x58000400

08003ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	807b      	strh	r3, [r7, #2]
 8003af4:	4613      	mov	r3, r2
 8003af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003af8:	887b      	ldrh	r3, [r7, #2]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d004      	beq.n	8003b08 <HAL_GPIO_WritePin+0x20>
 8003afe:	887a      	ldrh	r2, [r7, #2]
 8003b00:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <HAL_GPIO_WritePin+0x60>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d004      	beq.n	8003b12 <HAL_GPIO_WritePin+0x2a>
 8003b08:	f240 11ad 	movw	r1, #429	; 0x1ad
 8003b0c:	480f      	ldr	r0, [pc, #60]	; (8003b4c <HAL_GPIO_WritePin+0x64>)
 8003b0e:	f7fd f8d8 	bl	8000cc2 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003b12:	787b      	ldrb	r3, [r7, #1]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d007      	beq.n	8003b28 <HAL_GPIO_WritePin+0x40>
 8003b18:	787b      	ldrb	r3, [r7, #1]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d004      	beq.n	8003b28 <HAL_GPIO_WritePin+0x40>
 8003b1e:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003b22:	480a      	ldr	r0, [pc, #40]	; (8003b4c <HAL_GPIO_WritePin+0x64>)
 8003b24:	f7fd f8cd 	bl	8000cc2 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003b28:	787b      	ldrb	r3, [r7, #1]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b2e:	887a      	ldrh	r2, [r7, #2]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003b34:	e003      	b.n	8003b3e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b36:	887b      	ldrh	r3, [r7, #2]
 8003b38:	041a      	lsls	r2, r3, #16
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	619a      	str	r2, [r3, #24]
}
 8003b3e:	bf00      	nop
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	ffff0000 	.word	0xffff0000
 8003b4c:	0801888c 	.word	0x0801888c

08003b50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003b5c:	887b      	ldrh	r3, [r7, #2]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d004      	beq.n	8003b6c <HAL_GPIO_TogglePin+0x1c>
 8003b62:	887a      	ldrh	r2, [r7, #2]
 8003b64:	4b0d      	ldr	r3, [pc, #52]	; (8003b9c <HAL_GPIO_TogglePin+0x4c>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d004      	beq.n	8003b76 <HAL_GPIO_TogglePin+0x26>
 8003b6c:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003b70:	480b      	ldr	r0, [pc, #44]	; (8003ba0 <HAL_GPIO_TogglePin+0x50>)
 8003b72:	f7fd f8a6 	bl	8000cc2 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	887b      	ldrh	r3, [r7, #2]
 8003b7c:	401a      	ands	r2, r3
 8003b7e:	887b      	ldrh	r3, [r7, #2]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d104      	bne.n	8003b8e <HAL_GPIO_TogglePin+0x3e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003b84:	887b      	ldrh	r3, [r7, #2]
 8003b86:	041a      	lsls	r2, r3, #16
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003b8c:	e002      	b.n	8003b94 <HAL_GPIO_TogglePin+0x44>
    GPIOx->BSRR = GPIO_Pin;
 8003b8e:	887a      	ldrh	r2, [r7, #2]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	619a      	str	r2, [r3, #24]
}
 8003b94:	bf00      	nop
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	ffff0000 	.word	0xffff0000
 8003ba0:	0801888c 	.word	0x0801888c

08003ba4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d007      	beq.n	8003bc2 <HAL_PWREx_ConfigSupply+0x1e>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d004      	beq.n	8003bc2 <HAL_PWREx_ConfigSupply+0x1e>
 8003bb8:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8003bbc:	481a      	ldr	r0, [pc, #104]	; (8003c28 <HAL_PWREx_ConfigSupply+0x84>)
 8003bbe:	f7fd f880 	bl	8000cc2 <assert_failed>

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003bc2:	4b1a      	ldr	r3, [pc, #104]	; (8003c2c <HAL_PWREx_ConfigSupply+0x88>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d00a      	beq.n	8003be4 <HAL_PWREx_ConfigSupply+0x40>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003bce:	4b17      	ldr	r3, [pc, #92]	; (8003c2c <HAL_PWREx_ConfigSupply+0x88>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d001      	beq.n	8003be0 <HAL_PWREx_ConfigSupply+0x3c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e01f      	b.n	8003c20 <HAL_PWREx_ConfigSupply+0x7c>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e01d      	b.n	8003c20 <HAL_PWREx_ConfigSupply+0x7c>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003be4:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <HAL_PWREx_ConfigSupply+0x88>)
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f023 0207 	bic.w	r2, r3, #7
 8003bec:	490f      	ldr	r1, [pc, #60]	; (8003c2c <HAL_PWREx_ConfigSupply+0x88>)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003bf4:	f7fd fc7e 	bl	80014f4 <HAL_GetTick>
 8003bf8:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bfa:	e009      	b.n	8003c10 <HAL_PWREx_ConfigSupply+0x6c>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003bfc:	f7fd fc7a 	bl	80014f4 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c0a:	d901      	bls.n	8003c10 <HAL_PWREx_ConfigSupply+0x6c>
    {
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e007      	b.n	8003c20 <HAL_PWREx_ConfigSupply+0x7c>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <HAL_PWREx_ConfigSupply+0x88>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c1c:	d1ee      	bne.n	8003bfc <HAL_PWREx_ConfigSupply+0x58>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	080188c8 	.word	0x080188c8
 8003c2c:	58024800 	.word	0x58024800

08003c30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08c      	sub	sp, #48	; 0x30
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d102      	bne.n	8003c44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f000 bce9 	b.w	8004616 <HAL_RCC_OscConfig+0x9e6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d028      	beq.n	8003c9e <HAL_RCC_OscConfig+0x6e>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d122      	bne.n	8003c9e <HAL_RCC_OscConfig+0x6e>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d11c      	bne.n	8003c9e <HAL_RCC_OscConfig+0x6e>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d116      	bne.n	8003c9e <HAL_RCC_OscConfig+0x6e>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d110      	bne.n	8003c9e <HAL_RCC_OscConfig+0x6e>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <HAL_RCC_OscConfig+0x6e>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0320 	and.w	r3, r3, #32
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d104      	bne.n	8003c9e <HAL_RCC_OscConfig+0x6e>
 8003c94:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8003c98:	48a0      	ldr	r0, [pc, #640]	; (8003f1c <HAL_RCC_OscConfig+0x2ec>)
 8003c9a:	f7fd f812 	bl	8000cc2 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 809d 	beq.w	8003de6 <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00e      	beq.n	8003cd2 <HAL_RCC_OscConfig+0xa2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cbc:	d009      	beq.n	8003cd2 <HAL_RCC_OscConfig+0xa2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cc6:	d004      	beq.n	8003cd2 <HAL_RCC_OscConfig+0xa2>
 8003cc8:	f240 11a3 	movw	r1, #419	; 0x1a3
 8003ccc:	4893      	ldr	r0, [pc, #588]	; (8003f1c <HAL_RCC_OscConfig+0x2ec>)
 8003cce:	f7fc fff8 	bl	8000cc2 <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cd2:	4b93      	ldr	r3, [pc, #588]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003cdc:	4b90      	ldr	r3, [pc, #576]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce4:	2b10      	cmp	r3, #16
 8003ce6:	d007      	beq.n	8003cf8 <HAL_RCC_OscConfig+0xc8>
 8003ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cea:	2b18      	cmp	r3, #24
 8003cec:	d111      	bne.n	8003d12 <HAL_RCC_OscConfig+0xe2>
 8003cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf0:	f003 0303 	and.w	r3, r3, #3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d10c      	bne.n	8003d12 <HAL_RCC_OscConfig+0xe2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf8:	4b89      	ldr	r3, [pc, #548]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d06f      	beq.n	8003de4 <HAL_RCC_OscConfig+0x1b4>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d16b      	bne.n	8003de4 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f000 bc82 	b.w	8004616 <HAL_RCC_OscConfig+0x9e6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1a:	d106      	bne.n	8003d2a <HAL_RCC_OscConfig+0xfa>
 8003d1c:	4b80      	ldr	r3, [pc, #512]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a7f      	ldr	r2, [pc, #508]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	e02e      	b.n	8003d88 <HAL_RCC_OscConfig+0x158>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10c      	bne.n	8003d4c <HAL_RCC_OscConfig+0x11c>
 8003d32:	4b7b      	ldr	r3, [pc, #492]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a7a      	ldr	r2, [pc, #488]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	4b78      	ldr	r3, [pc, #480]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a77      	ldr	r2, [pc, #476]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	e01d      	b.n	8003d88 <HAL_RCC_OscConfig+0x158>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d54:	d10c      	bne.n	8003d70 <HAL_RCC_OscConfig+0x140>
 8003d56:	4b72      	ldr	r3, [pc, #456]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a71      	ldr	r2, [pc, #452]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	4b6f      	ldr	r3, [pc, #444]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a6e      	ldr	r2, [pc, #440]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	e00b      	b.n	8003d88 <HAL_RCC_OscConfig+0x158>
 8003d70:	4b6b      	ldr	r3, [pc, #428]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a6a      	ldr	r2, [pc, #424]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	4b68      	ldr	r3, [pc, #416]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a67      	ldr	r2, [pc, #412]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d014      	beq.n	8003dba <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fd fbb0 	bl	80014f4 <HAL_GetTick>
 8003d94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d96:	e009      	b.n	8003dac <HAL_RCC_OscConfig+0x17c>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d98:	f7fd fbac 	bl	80014f4 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b64      	cmp	r3, #100	; 0x64
 8003da4:	d902      	bls.n	8003dac <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	f000 bc35 	b.w	8004616 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003dac:	4b5c      	ldr	r3, [pc, #368]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0ef      	beq.n	8003d98 <HAL_RCC_OscConfig+0x168>
 8003db8:	e015      	b.n	8003de6 <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dba:	f7fd fb9b 	bl	80014f4 <HAL_GetTick>
 8003dbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003dc0:	e009      	b.n	8003dd6 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc2:	f7fd fb97 	bl	80014f4 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b64      	cmp	r3, #100	; 0x64
 8003dce:	d902      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	f000 bc20 	b.w	8004616 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003dd6:	4b52      	ldr	r3, [pc, #328]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1ef      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x192>
 8003de2:	e000      	b.n	8003de6 <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80bc 	beq.w	8003f6c <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d018      	beq.n	8003e2e <HAL_RCC_OscConfig+0x1fe>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d014      	beq.n	8003e2e <HAL_RCC_OscConfig+0x1fe>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d010      	beq.n	8003e2e <HAL_RCC_OscConfig+0x1fe>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2b09      	cmp	r3, #9
 8003e12:	d00c      	beq.n	8003e2e <HAL_RCC_OscConfig+0x1fe>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	2b11      	cmp	r3, #17
 8003e1a:	d008      	beq.n	8003e2e <HAL_RCC_OscConfig+0x1fe>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b19      	cmp	r3, #25
 8003e22:	d004      	beq.n	8003e2e <HAL_RCC_OscConfig+0x1fe>
 8003e24:	f240 11d7 	movw	r1, #471	; 0x1d7
 8003e28:	483c      	ldr	r0, [pc, #240]	; (8003f1c <HAL_RCC_OscConfig+0x2ec>)
 8003e2a:	f7fc ff4a 	bl	8000cc2 <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	2b7f      	cmp	r3, #127	; 0x7f
 8003e34:	d904      	bls.n	8003e40 <HAL_RCC_OscConfig+0x210>
 8003e36:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8003e3a:	4838      	ldr	r0, [pc, #224]	; (8003f1c <HAL_RCC_OscConfig+0x2ec>)
 8003e3c:	f7fc ff41 	bl	8000cc2 <assert_failed>

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e40:	4b37      	ldr	r3, [pc, #220]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e48:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e4a:	4b35      	ldr	r3, [pc, #212]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d007      	beq.n	8003e66 <HAL_RCC_OscConfig+0x236>
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	2b18      	cmp	r3, #24
 8003e5a:	d12d      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x288>
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d128      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x288>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e66:	4b2e      	ldr	r3, [pc, #184]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_RCC_OscConfig+0x24e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_RCC_OscConfig+0x24e>
      {
        return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e3cb      	b.n	8004616 <HAL_RCC_OscConfig+0x9e6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e7e:	f7fd fb45 	bl	800150c <HAL_GetREVID>
 8003e82:	4602      	mov	r2, r0
 8003e84:	f241 0303 	movw	r3, #4099	; 0x1003
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d80a      	bhi.n	8003ea2 <HAL_RCC_OscConfig+0x272>
 8003e8c:	4b24      	ldr	r3, [pc, #144]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	031b      	lsls	r3, r3, #12
 8003e9a:	4921      	ldr	r1, [pc, #132]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ea0:	e064      	b.n	8003f6c <HAL_RCC_OscConfig+0x33c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea2:	4b1f      	ldr	r3, [pc, #124]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	061b      	lsls	r3, r3, #24
 8003eb0:	491b      	ldr	r1, [pc, #108]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eb6:	e059      	b.n	8003f6c <HAL_RCC_OscConfig+0x33c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d03c      	beq.n	8003f3a <HAL_RCC_OscConfig+0x30a>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ec0:	4b17      	ldr	r3, [pc, #92]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f023 0219 	bic.w	r2, r3, #25
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	4914      	ldr	r1, [pc, #80]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed2:	f7fd fb0f 	bl	80014f4 <HAL_GetTick>
 8003ed6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x2bc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eda:	f7fd fb0b 	bl	80014f4 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x2bc>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e394      	b.n	8004616 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003eec:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0f0      	beq.n	8003eda <HAL_RCC_OscConfig+0x2aa>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef8:	f7fd fb08 	bl	800150c <HAL_GetREVID>
 8003efc:	4602      	mov	r2, r0
 8003efe:	f241 0303 	movw	r3, #4099	; 0x1003
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d80e      	bhi.n	8003f24 <HAL_RCC_OscConfig+0x2f4>
 8003f06:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	031b      	lsls	r3, r3, #12
 8003f14:	4902      	ldr	r1, [pc, #8]	; (8003f20 <HAL_RCC_OscConfig+0x2f0>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	604b      	str	r3, [r1, #4]
 8003f1a:	e027      	b.n	8003f6c <HAL_RCC_OscConfig+0x33c>
 8003f1c:	08018904 	.word	0x08018904
 8003f20:	58024400 	.word	0x58024400
 8003f24:	4ba5      	ldr	r3, [pc, #660]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	061b      	lsls	r3, r3, #24
 8003f32:	49a2      	ldr	r1, [pc, #648]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	604b      	str	r3, [r1, #4]
 8003f38:	e018      	b.n	8003f6c <HAL_RCC_OscConfig+0x33c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f3a:	4ba0      	ldr	r3, [pc, #640]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a9f      	ldr	r2, [pc, #636]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f46:	f7fd fad5 	bl	80014f4 <HAL_GetTick>
 8003f4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x330>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f4e:	f7fd fad1 	bl	80014f4 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e35a      	b.n	8004616 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f60:	4b96      	ldr	r3, [pc, #600]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f0      	bne.n	8003f4e <HAL_RCC_OscConfig+0x31e>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80a5 	beq.w	80040c4 <HAL_RCC_OscConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d008      	beq.n	8003f94 <HAL_RCC_OscConfig+0x364>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	2b80      	cmp	r3, #128	; 0x80
 8003f88:	d004      	beq.n	8003f94 <HAL_RCC_OscConfig+0x364>
 8003f8a:	f240 211a 	movw	r1, #538	; 0x21a
 8003f8e:	488c      	ldr	r0, [pc, #560]	; (80041c0 <HAL_RCC_OscConfig+0x590>)
 8003f90:	f7fc fe97 	bl	8000cc2 <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	2b3f      	cmp	r3, #63	; 0x3f
 8003f9a:	d904      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x376>
 8003f9c:	f240 211b 	movw	r1, #539	; 0x21b
 8003fa0:	4887      	ldr	r0, [pc, #540]	; (80041c0 <HAL_RCC_OscConfig+0x590>)
 8003fa2:	f7fc fe8e 	bl	8000cc2 <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fa6:	4b85      	ldr	r3, [pc, #532]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fb0:	4b82      	ldr	r3, [pc, #520]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d007      	beq.n	8003fcc <HAL_RCC_OscConfig+0x39c>
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	2b18      	cmp	r3, #24
 8003fc0:	d12d      	bne.n	800401e <HAL_RCC_OscConfig+0x3ee>
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f003 0303 	and.w	r3, r3, #3
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d128      	bne.n	800401e <HAL_RCC_OscConfig+0x3ee>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003fcc:	4b7b      	ldr	r3, [pc, #492]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x3b4>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	2b80      	cmp	r3, #128	; 0x80
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x3b4>
      {
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e318      	b.n	8004616 <HAL_RCC_OscConfig+0x9e6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fe4:	f7fd fa92 	bl	800150c <HAL_GetREVID>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	f241 0303 	movw	r3, #4099	; 0x1003
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d80a      	bhi.n	8004008 <HAL_RCC_OscConfig+0x3d8>
 8003ff2:	4b72      	ldr	r3, [pc, #456]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	069b      	lsls	r3, r3, #26
 8004000:	496e      	ldr	r1, [pc, #440]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 8004002:	4313      	orrs	r3, r2
 8004004:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004006:	e05d      	b.n	80040c4 <HAL_RCC_OscConfig+0x494>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004008:	4b6c      	ldr	r3, [pc, #432]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	061b      	lsls	r3, r3, #24
 8004016:	4969      	ldr	r1, [pc, #420]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 8004018:	4313      	orrs	r3, r2
 800401a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800401c:	e052      	b.n	80040c4 <HAL_RCC_OscConfig+0x494>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d035      	beq.n	8004092 <HAL_RCC_OscConfig+0x462>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004026:	4b65      	ldr	r3, [pc, #404]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a64      	ldr	r2, [pc, #400]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 800402c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004032:	f7fd fa5f 	bl	80014f4 <HAL_GetTick>
 8004036:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x41c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800403a:	f7fd fa5b 	bl	80014f4 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e2e4      	b.n	8004616 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800404c:	4b5b      	ldr	r3, [pc, #364]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0f0      	beq.n	800403a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004058:	f7fd fa58 	bl	800150c <HAL_GetREVID>
 800405c:	4602      	mov	r2, r0
 800405e:	f241 0303 	movw	r3, #4099	; 0x1003
 8004062:	429a      	cmp	r2, r3
 8004064:	d80a      	bhi.n	800407c <HAL_RCC_OscConfig+0x44c>
 8004066:	4b55      	ldr	r3, [pc, #340]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	069b      	lsls	r3, r3, #26
 8004074:	4951      	ldr	r1, [pc, #324]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 8004076:	4313      	orrs	r3, r2
 8004078:	604b      	str	r3, [r1, #4]
 800407a:	e023      	b.n	80040c4 <HAL_RCC_OscConfig+0x494>
 800407c:	4b4f      	ldr	r3, [pc, #316]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	061b      	lsls	r3, r3, #24
 800408a:	494c      	ldr	r1, [pc, #304]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 800408c:	4313      	orrs	r3, r2
 800408e:	60cb      	str	r3, [r1, #12]
 8004090:	e018      	b.n	80040c4 <HAL_RCC_OscConfig+0x494>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004092:	4b4a      	ldr	r3, [pc, #296]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a49      	ldr	r2, [pc, #292]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 8004098:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800409c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409e:	f7fd fa29 	bl	80014f4 <HAL_GetTick>
 80040a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80040a6:	f7fd fa25 	bl	80014f4 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e2ae      	b.n	8004616 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040b8:	4b40      	ldr	r3, [pc, #256]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1f0      	bne.n	80040a6 <HAL_RCC_OscConfig+0x476>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d043      	beq.n	8004158 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_RCC_OscConfig+0x4ba>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d004      	beq.n	80040ea <HAL_RCC_OscConfig+0x4ba>
 80040e0:	f44f 7117 	mov.w	r1, #604	; 0x25c
 80040e4:	4836      	ldr	r0, [pc, #216]	; (80041c0 <HAL_RCC_OscConfig+0x590>)
 80040e6:	f7fc fdec 	bl	8000cc2 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d019      	beq.n	8004126 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040f2:	4b32      	ldr	r3, [pc, #200]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 80040f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f6:	4a31      	ldr	r2, [pc, #196]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fe:	f7fd f9f9 	bl	80014f4 <HAL_GetTick>
 8004102:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004106:	f7fd f9f5 	bl	80014f4 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e27e      	b.n	8004616 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004118:	4b28      	ldr	r3, [pc, #160]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 800411a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0f0      	beq.n	8004106 <HAL_RCC_OscConfig+0x4d6>
 8004124:	e018      	b.n	8004158 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004126:	4b25      	ldr	r3, [pc, #148]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 8004128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800412a:	4a24      	ldr	r2, [pc, #144]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 800412c:	f023 0301 	bic.w	r3, r3, #1
 8004130:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004132:	f7fd f9df 	bl	80014f4 <HAL_GetTick>
 8004136:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x51c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800413a:	f7fd f9db 	bl	80014f4 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x51c>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e264      	b.n	8004616 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800414c:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 800414e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1f0      	bne.n	800413a <HAL_RCC_OscConfig+0x50a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b00      	cmp	r3, #0
 8004162:	d048      	beq.n	80041f6 <HAL_RCC_OscConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_RCC_OscConfig+0x54e>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d004      	beq.n	800417e <HAL_RCC_OscConfig+0x54e>
 8004174:	f240 2187 	movw	r1, #647	; 0x287
 8004178:	4811      	ldr	r0, [pc, #68]	; (80041c0 <HAL_RCC_OscConfig+0x590>)
 800417a:	f7fc fda2 	bl	8000cc2 <assert_failed>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d01e      	beq.n	80041c4 <HAL_RCC_OscConfig+0x594>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004186:	4b0d      	ldr	r3, [pc, #52]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a0c      	ldr	r2, [pc, #48]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 800418c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004190:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004192:	f7fd f9af 	bl	80014f4 <HAL_GetTick>
 8004196:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800419a:	f7fd f9ab 	bl	80014f4 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e234      	b.n	8004616 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80041ac:	4b03      	ldr	r3, [pc, #12]	; (80041bc <HAL_RCC_OscConfig+0x58c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0f0      	beq.n	800419a <HAL_RCC_OscConfig+0x56a>
 80041b8:	e01d      	b.n	80041f6 <HAL_RCC_OscConfig+0x5c6>
 80041ba:	bf00      	nop
 80041bc:	58024400 	.word	0x58024400
 80041c0:	08018904 	.word	0x08018904
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041c4:	4ba3      	ldr	r3, [pc, #652]	; (8004454 <HAL_RCC_OscConfig+0x824>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4aa2      	ldr	r2, [pc, #648]	; (8004454 <HAL_RCC_OscConfig+0x824>)
 80041ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041d0:	f7fd f990 	bl	80014f4 <HAL_GetTick>
 80041d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x5ba>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80041d8:	f7fd f98c 	bl	80014f4 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x5ba>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e215      	b.n	8004616 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041ea:	4b9a      	ldr	r3, [pc, #616]	; (8004454 <HAL_RCC_OscConfig+0x824>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x5a8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 8092 	beq.w	8004328 <HAL_RCC_OscConfig+0x6f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00c      	beq.n	8004226 <HAL_RCC_OscConfig+0x5f6>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d008      	beq.n	8004226 <HAL_RCC_OscConfig+0x5f6>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2b05      	cmp	r3, #5
 800421a:	d004      	beq.n	8004226 <HAL_RCC_OscConfig+0x5f6>
 800421c:	f240 21b1 	movw	r1, #689	; 0x2b1
 8004220:	488d      	ldr	r0, [pc, #564]	; (8004458 <HAL_RCC_OscConfig+0x828>)
 8004222:	f7fc fd4e 	bl	8000cc2 <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004226:	4b8d      	ldr	r3, [pc, #564]	; (800445c <HAL_RCC_OscConfig+0x82c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a8c      	ldr	r2, [pc, #560]	; (800445c <HAL_RCC_OscConfig+0x82c>)
 800422c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004230:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004232:	f7fd f95f 	bl	80014f4 <HAL_GetTick>
 8004236:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x61c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800423a:	f7fd f95b 	bl	80014f4 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b64      	cmp	r3, #100	; 0x64
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x61c>
      {
        return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e1e4      	b.n	8004616 <HAL_RCC_OscConfig+0x9e6>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800424c:	4b83      	ldr	r3, [pc, #524]	; (800445c <HAL_RCC_OscConfig+0x82c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0f0      	beq.n	800423a <HAL_RCC_OscConfig+0x60a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d106      	bne.n	800426e <HAL_RCC_OscConfig+0x63e>
 8004260:	4b7c      	ldr	r3, [pc, #496]	; (8004454 <HAL_RCC_OscConfig+0x824>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004264:	4a7b      	ldr	r2, [pc, #492]	; (8004454 <HAL_RCC_OscConfig+0x824>)
 8004266:	f043 0301 	orr.w	r3, r3, #1
 800426a:	6713      	str	r3, [r2, #112]	; 0x70
 800426c:	e02d      	b.n	80042ca <HAL_RCC_OscConfig+0x69a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10c      	bne.n	8004290 <HAL_RCC_OscConfig+0x660>
 8004276:	4b77      	ldr	r3, [pc, #476]	; (8004454 <HAL_RCC_OscConfig+0x824>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	4a76      	ldr	r2, [pc, #472]	; (8004454 <HAL_RCC_OscConfig+0x824>)
 800427c:	f023 0301 	bic.w	r3, r3, #1
 8004280:	6713      	str	r3, [r2, #112]	; 0x70
 8004282:	4b74      	ldr	r3, [pc, #464]	; (8004454 <HAL_RCC_OscConfig+0x824>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004286:	4a73      	ldr	r2, [pc, #460]	; (8004454 <HAL_RCC_OscConfig+0x824>)
 8004288:	f023 0304 	bic.w	r3, r3, #4
 800428c:	6713      	str	r3, [r2, #112]	; 0x70
 800428e:	e01c      	b.n	80042ca <HAL_RCC_OscConfig+0x69a>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	2b05      	cmp	r3, #5
 8004296:	d10c      	bne.n	80042b2 <HAL_RCC_OscConfig+0x682>
 8004298:	4b6e      	ldr	r3, [pc, #440]	; (8004454 <HAL_RCC_OscConfig+0x824>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429c:	4a6d      	ldr	r2, [pc, #436]	; (8004454 <HAL_RCC_OscConfig+0x824>)
 800429e:	f043 0304 	orr.w	r3, r3, #4
 80042a2:	6713      	str	r3, [r2, #112]	; 0x70
 80042a4:	4b6b      	ldr	r3, [pc, #428]	; (8004454 <HAL_RCC_OscConfig+0x824>)
 80042a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a8:	4a6a      	ldr	r2, [pc, #424]	; (8004454 <HAL_RCC_OscConfig+0x824>)
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	6713      	str	r3, [r2, #112]	; 0x70
 80042b0:	e00b      	b.n	80042ca <HAL_RCC_OscConfig+0x69a>
 80042b2:	4b68      	ldr	r3, [pc, #416]	; (8004454 <HAL_RCC_OscConfig+0x824>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	4a67      	ldr	r2, [pc, #412]	; (8004454 <HAL_RCC_OscConfig+0x824>)
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	6713      	str	r3, [r2, #112]	; 0x70
 80042be:	4b65      	ldr	r3, [pc, #404]	; (8004454 <HAL_RCC_OscConfig+0x824>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c2:	4a64      	ldr	r2, [pc, #400]	; (8004454 <HAL_RCC_OscConfig+0x824>)
 80042c4:	f023 0304 	bic.w	r3, r3, #4
 80042c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d015      	beq.n	80042fe <HAL_RCC_OscConfig+0x6ce>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d2:	f7fd f90f 	bl	80014f4 <HAL_GetTick>
 80042d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042d8:	e00a      	b.n	80042f0 <HAL_RCC_OscConfig+0x6c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042da:	f7fd f90b 	bl	80014f4 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x6c0>
        {
          return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e192      	b.n	8004616 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042f0:	4b58      	ldr	r3, [pc, #352]	; (8004454 <HAL_RCC_OscConfig+0x824>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0ee      	beq.n	80042da <HAL_RCC_OscConfig+0x6aa>
 80042fc:	e014      	b.n	8004328 <HAL_RCC_OscConfig+0x6f8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fe:	f7fd f8f9 	bl	80014f4 <HAL_GetTick>
 8004302:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004304:	e00a      	b.n	800431c <HAL_RCC_OscConfig+0x6ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004306:	f7fd f8f5 	bl	80014f4 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	f241 3288 	movw	r2, #5000	; 0x1388
 8004314:	4293      	cmp	r3, r2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x6ec>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e17c      	b.n	8004616 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800431c:	4b4d      	ldr	r3, [pc, #308]	; (8004454 <HAL_RCC_OscConfig+0x824>)
 800431e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1ee      	bne.n	8004306 <HAL_RCC_OscConfig+0x6d6>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00c      	beq.n	800434a <HAL_RCC_OscConfig+0x71a>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	2b01      	cmp	r3, #1
 8004336:	d008      	beq.n	800434a <HAL_RCC_OscConfig+0x71a>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	2b02      	cmp	r3, #2
 800433e:	d004      	beq.n	800434a <HAL_RCC_OscConfig+0x71a>
 8004340:	f240 21e3 	movw	r1, #739	; 0x2e3
 8004344:	4844      	ldr	r0, [pc, #272]	; (8004458 <HAL_RCC_OscConfig+0x828>)
 8004346:	f7fc fcbc 	bl	8000cc2 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 8160 	beq.w	8004614 <HAL_RCC_OscConfig+0x9e4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004354:	4b3f      	ldr	r3, [pc, #252]	; (8004454 <HAL_RCC_OscConfig+0x824>)
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800435c:	2b18      	cmp	r3, #24
 800435e:	f000 811b 	beq.w	8004598 <HAL_RCC_OscConfig+0x968>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	2b02      	cmp	r3, #2
 8004368:	f040 80fc 	bne.w	8004564 <HAL_RCC_OscConfig+0x934>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	2b01      	cmp	r3, #1
 8004372:	d010      	beq.n	8004396 <HAL_RCC_OscConfig+0x766>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00c      	beq.n	8004396 <HAL_RCC_OscConfig+0x766>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004380:	2b03      	cmp	r3, #3
 8004382:	d008      	beq.n	8004396 <HAL_RCC_OscConfig+0x766>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	2b02      	cmp	r3, #2
 800438a:	d004      	beq.n	8004396 <HAL_RCC_OscConfig+0x766>
 800438c:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 8004390:	4831      	ldr	r0, [pc, #196]	; (8004458 <HAL_RCC_OscConfig+0x828>)
 8004392:	f7fc fc96 	bl	8000cc2 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_RCC_OscConfig+0x776>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a2:	2b3f      	cmp	r3, #63	; 0x3f
 80043a4:	d904      	bls.n	80043b0 <HAL_RCC_OscConfig+0x780>
 80043a6:	f240 21ed 	movw	r1, #749	; 0x2ed
 80043aa:	482b      	ldr	r0, [pc, #172]	; (8004458 <HAL_RCC_OscConfig+0x828>)
 80043ac:	f7fc fc89 	bl	8000cc2 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d904      	bls.n	80043c2 <HAL_RCC_OscConfig+0x792>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043c0:	d904      	bls.n	80043cc <HAL_RCC_OscConfig+0x79c>
 80043c2:	f240 21ee 	movw	r1, #750	; 0x2ee
 80043c6:	4824      	ldr	r0, [pc, #144]	; (8004458 <HAL_RCC_OscConfig+0x828>)
 80043c8:	f7fc fc7b 	bl	8000cc2 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_RCC_OscConfig+0x7ac>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d8:	2b80      	cmp	r3, #128	; 0x80
 80043da:	d904      	bls.n	80043e6 <HAL_RCC_OscConfig+0x7b6>
 80043dc:	f240 21ef 	movw	r1, #751	; 0x2ef
 80043e0:	481d      	ldr	r0, [pc, #116]	; (8004458 <HAL_RCC_OscConfig+0x828>)
 80043e2:	f7fc fc6e 	bl	8000cc2 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_RCC_OscConfig+0x7c6>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f2:	2b80      	cmp	r3, #128	; 0x80
 80043f4:	d904      	bls.n	8004400 <HAL_RCC_OscConfig+0x7d0>
 80043f6:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 80043fa:	4817      	ldr	r0, [pc, #92]	; (8004458 <HAL_RCC_OscConfig+0x828>)
 80043fc:	f7fc fc61 	bl	8000cc2 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_RCC_OscConfig+0x7e0>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440c:	2b80      	cmp	r3, #128	; 0x80
 800440e:	d904      	bls.n	800441a <HAL_RCC_OscConfig+0x7ea>
 8004410:	f240 21f1 	movw	r1, #753	; 0x2f1
 8004414:	4810      	ldr	r0, [pc, #64]	; (8004458 <HAL_RCC_OscConfig+0x828>)
 8004416:	f7fc fc54 	bl	8000cc2 <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800441e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004422:	d304      	bcc.n	800442e <HAL_RCC_OscConfig+0x7fe>
 8004424:	f240 21f2 	movw	r1, #754	; 0x2f2
 8004428:	480b      	ldr	r0, [pc, #44]	; (8004458 <HAL_RCC_OscConfig+0x828>)
 800442a:	f7fc fc4a 	bl	8000cc2 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <HAL_RCC_OscConfig+0x824>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a08      	ldr	r2, [pc, #32]	; (8004454 <HAL_RCC_OscConfig+0x824>)
 8004434:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443a:	f7fd f85b 	bl	80014f4 <HAL_GetTick>
 800443e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004440:	e00e      	b.n	8004460 <HAL_RCC_OscConfig+0x830>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004442:	f7fd f857 	bl	80014f4 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d907      	bls.n	8004460 <HAL_RCC_OscConfig+0x830>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e0e0      	b.n	8004616 <HAL_RCC_OscConfig+0x9e6>
 8004454:	58024400 	.word	0x58024400
 8004458:	08018904 	.word	0x08018904
 800445c:	58024800 	.word	0x58024800
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004460:	4b6f      	ldr	r3, [pc, #444]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1ea      	bne.n	8004442 <HAL_RCC_OscConfig+0x812>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800446c:	4b6c      	ldr	r3, [pc, #432]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 800446e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004470:	4b6c      	ldr	r3, [pc, #432]	; (8004624 <HAL_RCC_OscConfig+0x9f4>)
 8004472:	4013      	ands	r3, r2
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800447c:	0112      	lsls	r2, r2, #4
 800447e:	430a      	orrs	r2, r1
 8004480:	4967      	ldr	r1, [pc, #412]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 8004482:	4313      	orrs	r3, r2
 8004484:	628b      	str	r3, [r1, #40]	; 0x28
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	3b01      	subs	r3, #1
 800448c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004494:	3b01      	subs	r3, #1
 8004496:	025b      	lsls	r3, r3, #9
 8004498:	b29b      	uxth	r3, r3
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a0:	3b01      	subs	r3, #1
 80044a2:	041b      	lsls	r3, r3, #16
 80044a4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ae:	3b01      	subs	r3, #1
 80044b0:	061b      	lsls	r3, r3, #24
 80044b2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044b6:	495a      	ldr	r1, [pc, #360]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80044bc:	4b58      	ldr	r3, [pc, #352]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	4a57      	ldr	r2, [pc, #348]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 80044c2:	f023 0301 	bic.w	r3, r3, #1
 80044c6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80044c8:	4b55      	ldr	r3, [pc, #340]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 80044ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044cc:	4b56      	ldr	r3, [pc, #344]	; (8004628 <HAL_RCC_OscConfig+0x9f8>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80044d4:	00d2      	lsls	r2, r2, #3
 80044d6:	4952      	ldr	r1, [pc, #328]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80044dc:	4b50      	ldr	r3, [pc, #320]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	f023 020c 	bic.w	r2, r3, #12
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	494d      	ldr	r1, [pc, #308]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80044ee:	4b4c      	ldr	r3, [pc, #304]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	f023 0202 	bic.w	r2, r3, #2
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	4949      	ldr	r1, [pc, #292]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004500:	4b47      	ldr	r3, [pc, #284]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	4a46      	ldr	r2, [pc, #280]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 8004506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800450c:	4b44      	ldr	r3, [pc, #272]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	4a43      	ldr	r2, [pc, #268]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 8004512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004516:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004518:	4b41      	ldr	r3, [pc, #260]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	4a40      	ldr	r2, [pc, #256]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 800451e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004522:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004524:	4b3e      	ldr	r3, [pc, #248]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	4a3d      	ldr	r2, [pc, #244]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004530:	4b3b      	ldr	r3, [pc, #236]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a3a      	ldr	r2, [pc, #232]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 8004536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800453a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453c:	f7fc ffda 	bl	80014f4 <HAL_GetTick>
 8004540:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x926>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004544:	f7fc ffd6 	bl	80014f4 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x926>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e05f      	b.n	8004616 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004556:	4b32      	ldr	r3, [pc, #200]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0f0      	beq.n	8004544 <HAL_RCC_OscConfig+0x914>
 8004562:	e057      	b.n	8004614 <HAL_RCC_OscConfig+0x9e4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004564:	4b2e      	ldr	r3, [pc, #184]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a2d      	ldr	r2, [pc, #180]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 800456a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800456e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004570:	f7fc ffc0 	bl	80014f4 <HAL_GetTick>
 8004574:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x95a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004578:	f7fc ffbc 	bl	80014f4 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x95a>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e045      	b.n	8004616 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800458a:	4b25      	ldr	r3, [pc, #148]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f0      	bne.n	8004578 <HAL_RCC_OscConfig+0x948>
 8004596:	e03d      	b.n	8004614 <HAL_RCC_OscConfig+0x9e4>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004598:	4b21      	ldr	r3, [pc, #132]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 800459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800459e:	4b20      	ldr	r3, [pc, #128]	; (8004620 <HAL_RCC_OscConfig+0x9f0>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d031      	beq.n	8004610 <HAL_RCC_OscConfig+0x9e0>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	f003 0203 	and.w	r2, r3, #3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d12a      	bne.n	8004610 <HAL_RCC_OscConfig+0x9e0>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	091b      	lsrs	r3, r3, #4
 80045be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d122      	bne.n	8004610 <HAL_RCC_OscConfig+0x9e0>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d11a      	bne.n	8004610 <HAL_RCC_OscConfig+0x9e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	0a5b      	lsrs	r3, r3, #9
 80045de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d111      	bne.n	8004610 <HAL_RCC_OscConfig+0x9e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	0c1b      	lsrs	r3, r3, #16
 80045f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d108      	bne.n	8004610 <HAL_RCC_OscConfig+0x9e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	0e1b      	lsrs	r3, r3, #24
 8004602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800460c:	429a      	cmp	r2, r3
 800460e:	d001      	beq.n	8004614 <HAL_RCC_OscConfig+0x9e4>
      {
        return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e000      	b.n	8004616 <HAL_RCC_OscConfig+0x9e6>
      }
    }
  }
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3730      	adds	r7, #48	; 0x30
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	58024400 	.word	0x58024400
 8004624:	fffffc0c 	.word	0xfffffc0c
 8004628:	ffff0007 	.word	0xffff0007

0800462c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e354      	b.n	8004cea <HAL_RCC_ClockConfig+0x6be>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <HAL_RCC_ClockConfig+0x24>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b3f      	cmp	r3, #63	; 0x3f
 800464e:	d904      	bls.n	800465a <HAL_RCC_ClockConfig+0x2e>
 8004650:	f240 317f 	movw	r1, #895	; 0x37f
 8004654:	4827      	ldr	r0, [pc, #156]	; (80046f4 <HAL_RCC_ClockConfig+0xc8>)
 8004656:	f7fc fb34 	bl	8000cc2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d031      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x98>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d02e      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x98>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d02b      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x98>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b03      	cmp	r3, #3
 8004670:	d028      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x98>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b04      	cmp	r3, #4
 8004676:	d025      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x98>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2b05      	cmp	r3, #5
 800467c:	d022      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x98>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b06      	cmp	r3, #6
 8004682:	d01f      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x98>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2b07      	cmp	r3, #7
 8004688:	d01c      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x98>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b08      	cmp	r3, #8
 800468e:	d019      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x98>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b09      	cmp	r3, #9
 8004694:	d016      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x98>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b0a      	cmp	r3, #10
 800469a:	d013      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x98>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	2b0b      	cmp	r3, #11
 80046a0:	d010      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x98>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b0c      	cmp	r3, #12
 80046a6:	d00d      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x98>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b0d      	cmp	r3, #13
 80046ac:	d00a      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x98>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b0e      	cmp	r3, #14
 80046b2:	d007      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x98>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b0f      	cmp	r3, #15
 80046b8:	d004      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x98>
 80046ba:	f44f 7160 	mov.w	r1, #896	; 0x380
 80046be:	480d      	ldr	r0, [pc, #52]	; (80046f4 <HAL_RCC_ClockConfig+0xc8>)
 80046c0:	f7fc faff 	bl	8000cc2 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046c4:	4b0c      	ldr	r3, [pc, #48]	; (80046f8 <HAL_RCC_ClockConfig+0xcc>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 030f 	and.w	r3, r3, #15
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d914      	bls.n	80046fc <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d2:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <HAL_RCC_ClockConfig+0xcc>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f023 020f 	bic.w	r2, r3, #15
 80046da:	4907      	ldr	r1, [pc, #28]	; (80046f8 <HAL_RCC_ClockConfig+0xcc>)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	4313      	orrs	r3, r2
 80046e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e2:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <HAL_RCC_ClockConfig+0xcc>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d005      	beq.n	80046fc <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e2fa      	b.n	8004cea <HAL_RCC_ClockConfig+0x6be>
 80046f4:	08018904 	.word	0x08018904
 80046f8:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d029      	beq.n	800475c <HAL_RCC_ClockConfig+0x130>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	4b9a      	ldr	r3, [pc, #616]	; (8004978 <HAL_RCC_ClockConfig+0x34c>)
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004714:	429a      	cmp	r2, r3
 8004716:	d921      	bls.n	800475c <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d014      	beq.n	800474a <HAL_RCC_ClockConfig+0x11e>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	2b40      	cmp	r3, #64	; 0x40
 8004726:	d010      	beq.n	800474a <HAL_RCC_ClockConfig+0x11e>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	2b50      	cmp	r3, #80	; 0x50
 800472e:	d00c      	beq.n	800474a <HAL_RCC_ClockConfig+0x11e>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	2b60      	cmp	r3, #96	; 0x60
 8004736:	d008      	beq.n	800474a <HAL_RCC_ClockConfig+0x11e>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b70      	cmp	r3, #112	; 0x70
 800473e:	d004      	beq.n	800474a <HAL_RCC_ClockConfig+0x11e>
 8004740:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8004744:	488d      	ldr	r0, [pc, #564]	; (800497c <HAL_RCC_ClockConfig+0x350>)
 8004746:	f7fc fabc 	bl	8000cc2 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800474a:	4b8b      	ldr	r3, [pc, #556]	; (8004978 <HAL_RCC_ClockConfig+0x34c>)
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	4988      	ldr	r1, [pc, #544]	; (8004978 <HAL_RCC_ClockConfig+0x34c>)
 8004758:	4313      	orrs	r3, r2
 800475a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	d029      	beq.n	80047bc <HAL_RCC_ClockConfig+0x190>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	695a      	ldr	r2, [r3, #20]
 800476c:	4b82      	ldr	r3, [pc, #520]	; (8004978 <HAL_RCC_ClockConfig+0x34c>)
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004774:	429a      	cmp	r2, r3
 8004776:	d921      	bls.n	80047bc <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d014      	beq.n	80047aa <HAL_RCC_ClockConfig+0x17e>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	2b40      	cmp	r3, #64	; 0x40
 8004786:	d010      	beq.n	80047aa <HAL_RCC_ClockConfig+0x17e>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	2b50      	cmp	r3, #80	; 0x50
 800478e:	d00c      	beq.n	80047aa <HAL_RCC_ClockConfig+0x17e>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	2b60      	cmp	r3, #96	; 0x60
 8004796:	d008      	beq.n	80047aa <HAL_RCC_ClockConfig+0x17e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	2b70      	cmp	r3, #112	; 0x70
 800479e:	d004      	beq.n	80047aa <HAL_RCC_ClockConfig+0x17e>
 80047a0:	f240 31ae 	movw	r1, #942	; 0x3ae
 80047a4:	4875      	ldr	r0, [pc, #468]	; (800497c <HAL_RCC_ClockConfig+0x350>)
 80047a6:	f7fc fa8c 	bl	8000cc2 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047aa:	4b73      	ldr	r3, [pc, #460]	; (8004978 <HAL_RCC_ClockConfig+0x34c>)
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	4970      	ldr	r1, [pc, #448]	; (8004978 <HAL_RCC_ClockConfig+0x34c>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0310 	and.w	r3, r3, #16
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d02d      	beq.n	8004824 <HAL_RCC_ClockConfig+0x1f8>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699a      	ldr	r2, [r3, #24]
 80047cc:	4b6a      	ldr	r3, [pc, #424]	; (8004978 <HAL_RCC_ClockConfig+0x34c>)
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d925      	bls.n	8004824 <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d018      	beq.n	8004812 <HAL_RCC_ClockConfig+0x1e6>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e8:	d013      	beq.n	8004812 <HAL_RCC_ClockConfig+0x1e6>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80047f2:	d00e      	beq.n	8004812 <HAL_RCC_ClockConfig+0x1e6>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047fc:	d009      	beq.n	8004812 <HAL_RCC_ClockConfig+0x1e6>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004806:	d004      	beq.n	8004812 <HAL_RCC_ClockConfig+0x1e6>
 8004808:	f240 31bf 	movw	r1, #959	; 0x3bf
 800480c:	485b      	ldr	r0, [pc, #364]	; (800497c <HAL_RCC_ClockConfig+0x350>)
 800480e:	f7fc fa58 	bl	8000cc2 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004812:	4b59      	ldr	r3, [pc, #356]	; (8004978 <HAL_RCC_ClockConfig+0x34c>)
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	4956      	ldr	r1, [pc, #344]	; (8004978 <HAL_RCC_ClockConfig+0x34c>)
 8004820:	4313      	orrs	r3, r2
 8004822:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0320 	and.w	r3, r3, #32
 800482c:	2b00      	cmp	r3, #0
 800482e:	d029      	beq.n	8004884 <HAL_RCC_ClockConfig+0x258>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	4b50      	ldr	r3, [pc, #320]	; (8004978 <HAL_RCC_ClockConfig+0x34c>)
 8004836:	6a1b      	ldr	r3, [r3, #32]
 8004838:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800483c:	429a      	cmp	r2, r3
 800483e:	d921      	bls.n	8004884 <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d014      	beq.n	8004872 <HAL_RCC_ClockConfig+0x246>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	2b40      	cmp	r3, #64	; 0x40
 800484e:	d010      	beq.n	8004872 <HAL_RCC_ClockConfig+0x246>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	2b50      	cmp	r3, #80	; 0x50
 8004856:	d00c      	beq.n	8004872 <HAL_RCC_ClockConfig+0x246>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	2b60      	cmp	r3, #96	; 0x60
 800485e:	d008      	beq.n	8004872 <HAL_RCC_ClockConfig+0x246>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	2b70      	cmp	r3, #112	; 0x70
 8004866:	d004      	beq.n	8004872 <HAL_RCC_ClockConfig+0x246>
 8004868:	f240 31d1 	movw	r1, #977	; 0x3d1
 800486c:	4843      	ldr	r0, [pc, #268]	; (800497c <HAL_RCC_ClockConfig+0x350>)
 800486e:	f7fc fa28 	bl	8000cc2 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004872:	4b41      	ldr	r3, [pc, #260]	; (8004978 <HAL_RCC_ClockConfig+0x34c>)
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	493e      	ldr	r1, [pc, #248]	; (8004978 <HAL_RCC_ClockConfig+0x34c>)
 8004880:	4313      	orrs	r3, r2
 8004882:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d039      	beq.n	8004904 <HAL_RCC_ClockConfig+0x2d8>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	4b38      	ldr	r3, [pc, #224]	; (8004978 <HAL_RCC_ClockConfig+0x34c>)
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	f003 030f 	and.w	r3, r3, #15
 800489c:	429a      	cmp	r2, r3
 800489e:	d931      	bls.n	8004904 <HAL_RCC_ClockConfig+0x2d8>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d024      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x2c6>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d020      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x2c6>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	2b09      	cmp	r3, #9
 80048b6:	d01c      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x2c6>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	2b0a      	cmp	r3, #10
 80048be:	d018      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x2c6>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	2b0b      	cmp	r3, #11
 80048c6:	d014      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x2c6>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	2b0c      	cmp	r3, #12
 80048ce:	d010      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x2c6>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	2b0d      	cmp	r3, #13
 80048d6:	d00c      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x2c6>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2b0e      	cmp	r3, #14
 80048de:	d008      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x2c6>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2b0f      	cmp	r3, #15
 80048e6:	d004      	beq.n	80048f2 <HAL_RCC_ClockConfig+0x2c6>
 80048e8:	f44f 7179 	mov.w	r1, #996	; 0x3e4
 80048ec:	4823      	ldr	r0, [pc, #140]	; (800497c <HAL_RCC_ClockConfig+0x350>)
 80048ee:	f7fc f9e8 	bl	8000cc2 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048f2:	4b21      	ldr	r3, [pc, #132]	; (8004978 <HAL_RCC_ClockConfig+0x34c>)
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	f023 020f 	bic.w	r2, r3, #15
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	491e      	ldr	r1, [pc, #120]	; (8004978 <HAL_RCC_ClockConfig+0x34c>)
 8004900:	4313      	orrs	r3, r2
 8004902:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 80a2 	beq.w	8004a56 <HAL_RCC_ClockConfig+0x42a>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d032      	beq.n	8004980 <HAL_RCC_ClockConfig+0x354>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004922:	d02d      	beq.n	8004980 <HAL_RCC_ClockConfig+0x354>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800492c:	d028      	beq.n	8004980 <HAL_RCC_ClockConfig+0x354>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004936:	d023      	beq.n	8004980 <HAL_RCC_ClockConfig+0x354>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004940:	d01e      	beq.n	8004980 <HAL_RCC_ClockConfig+0x354>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800494a:	d019      	beq.n	8004980 <HAL_RCC_ClockConfig+0x354>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004954:	d014      	beq.n	8004980 <HAL_RCC_ClockConfig+0x354>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 800495e:	d00f      	beq.n	8004980 <HAL_RCC_ClockConfig+0x354>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004968:	d00a      	beq.n	8004980 <HAL_RCC_ClockConfig+0x354>
 800496a:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 800496e:	4803      	ldr	r0, [pc, #12]	; (800497c <HAL_RCC_ClockConfig+0x350>)
 8004970:	f7fc f9a7 	bl	8000cc2 <assert_failed>
 8004974:	e004      	b.n	8004980 <HAL_RCC_ClockConfig+0x354>
 8004976:	bf00      	nop
 8004978:	58024400 	.word	0x58024400
 800497c:	08018904 	.word	0x08018904
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d010      	beq.n	80049aa <HAL_RCC_ClockConfig+0x37e>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00c      	beq.n	80049aa <HAL_RCC_ClockConfig+0x37e>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2b02      	cmp	r3, #2
 8004996:	d008      	beq.n	80049aa <HAL_RCC_ClockConfig+0x37e>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b03      	cmp	r3, #3
 800499e:	d004      	beq.n	80049aa <HAL_RCC_ClockConfig+0x37e>
 80049a0:	f240 31f5 	movw	r1, #1013	; 0x3f5
 80049a4:	4858      	ldr	r0, [pc, #352]	; (8004b08 <HAL_RCC_ClockConfig+0x4dc>)
 80049a6:	f7fc f98c 	bl	8000cc2 <assert_failed>
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80049aa:	4b58      	ldr	r3, [pc, #352]	; (8004b0c <HAL_RCC_ClockConfig+0x4e0>)
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	4955      	ldr	r1, [pc, #340]	; (8004b0c <HAL_RCC_ClockConfig+0x4e0>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d107      	bne.n	80049d4 <HAL_RCC_ClockConfig+0x3a8>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049c4:	4b51      	ldr	r3, [pc, #324]	; (8004b0c <HAL_RCC_ClockConfig+0x4e0>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d121      	bne.n	8004a14 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e18a      	b.n	8004cea <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b03      	cmp	r3, #3
 80049da:	d107      	bne.n	80049ec <HAL_RCC_ClockConfig+0x3c0>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049dc:	4b4b      	ldr	r3, [pc, #300]	; (8004b0c <HAL_RCC_ClockConfig+0x4e0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d115      	bne.n	8004a14 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e17e      	b.n	8004cea <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d107      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x3d8>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049f4:	4b45      	ldr	r3, [pc, #276]	; (8004b0c <HAL_RCC_ClockConfig+0x4e0>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d109      	bne.n	8004a14 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e172      	b.n	8004cea <HAL_RCC_ClockConfig+0x6be>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a04:	4b41      	ldr	r3, [pc, #260]	; (8004b0c <HAL_RCC_ClockConfig+0x4e0>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e16a      	b.n	8004cea <HAL_RCC_ClockConfig+0x6be>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a14:	4b3d      	ldr	r3, [pc, #244]	; (8004b0c <HAL_RCC_ClockConfig+0x4e0>)
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	f023 0207 	bic.w	r2, r3, #7
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	493a      	ldr	r1, [pc, #232]	; (8004b0c <HAL_RCC_ClockConfig+0x4e0>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a26:	f7fc fd65 	bl	80014f4 <HAL_GetTick>
 8004a2a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2c:	e00a      	b.n	8004a44 <HAL_RCC_ClockConfig+0x418>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a2e:	f7fc fd61 	bl	80014f4 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_ClockConfig+0x418>
          {
            return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e152      	b.n	8004cea <HAL_RCC_ClockConfig+0x6be>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a44:	4b31      	ldr	r3, [pc, #196]	; (8004b0c <HAL_RCC_ClockConfig+0x4e0>)
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d1eb      	bne.n	8004a2e <HAL_RCC_ClockConfig+0x402>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d039      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0x4aa>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	4b29      	ldr	r3, [pc, #164]	; (8004b0c <HAL_RCC_ClockConfig+0x4e0>)
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d231      	bcs.n	8004ad6 <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d024      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x498>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	2b08      	cmp	r3, #8
 8004a80:	d020      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x498>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	2b09      	cmp	r3, #9
 8004a88:	d01c      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x498>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	2b0a      	cmp	r3, #10
 8004a90:	d018      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x498>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	2b0b      	cmp	r3, #11
 8004a98:	d014      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x498>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	2b0c      	cmp	r3, #12
 8004aa0:	d010      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x498>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	2b0d      	cmp	r3, #13
 8004aa8:	d00c      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x498>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	2b0e      	cmp	r3, #14
 8004ab0:	d008      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x498>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	2b0f      	cmp	r3, #15
 8004ab8:	d004      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x498>
 8004aba:	f240 4136 	movw	r1, #1078	; 0x436
 8004abe:	4812      	ldr	r0, [pc, #72]	; (8004b08 <HAL_RCC_ClockConfig+0x4dc>)
 8004ac0:	f7fc f8ff 	bl	8000cc2 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac4:	4b11      	ldr	r3, [pc, #68]	; (8004b0c <HAL_RCC_ClockConfig+0x4e0>)
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	f023 020f 	bic.w	r2, r3, #15
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	490e      	ldr	r1, [pc, #56]	; (8004b0c <HAL_RCC_ClockConfig+0x4e0>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ad6:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <HAL_RCC_ClockConfig+0x4e4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d217      	bcs.n	8004b14 <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae4:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <HAL_RCC_ClockConfig+0x4e4>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f023 020f 	bic.w	r2, r3, #15
 8004aec:	4908      	ldr	r1, [pc, #32]	; (8004b10 <HAL_RCC_ClockConfig+0x4e4>)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_RCC_ClockConfig+0x4e4>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 030f 	and.w	r3, r3, #15
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d008      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e0f1      	b.n	8004cea <HAL_RCC_ClockConfig+0x6be>
 8004b06:	bf00      	nop
 8004b08:	08018904 	.word	0x08018904
 8004b0c:	58024400 	.word	0x58024400
 8004b10:	52002000 	.word	0x52002000
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d029      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x548>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	4b73      	ldr	r3, [pc, #460]	; (8004cf4 <HAL_RCC_ClockConfig+0x6c8>)
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d221      	bcs.n	8004b74 <HAL_RCC_ClockConfig+0x548>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d014      	beq.n	8004b62 <HAL_RCC_ClockConfig+0x536>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	2b40      	cmp	r3, #64	; 0x40
 8004b3e:	d010      	beq.n	8004b62 <HAL_RCC_ClockConfig+0x536>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	2b50      	cmp	r3, #80	; 0x50
 8004b46:	d00c      	beq.n	8004b62 <HAL_RCC_ClockConfig+0x536>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	2b60      	cmp	r3, #96	; 0x60
 8004b4e:	d008      	beq.n	8004b62 <HAL_RCC_ClockConfig+0x536>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	2b70      	cmp	r3, #112	; 0x70
 8004b56:	d004      	beq.n	8004b62 <HAL_RCC_ClockConfig+0x536>
 8004b58:	f240 4157 	movw	r1, #1111	; 0x457
 8004b5c:	4866      	ldr	r0, [pc, #408]	; (8004cf8 <HAL_RCC_ClockConfig+0x6cc>)
 8004b5e:	f7fc f8b0 	bl	8000cc2 <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b62:	4b64      	ldr	r3, [pc, #400]	; (8004cf4 <HAL_RCC_ClockConfig+0x6c8>)
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	4961      	ldr	r1, [pc, #388]	; (8004cf4 <HAL_RCC_ClockConfig+0x6c8>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d029      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x5a8>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	695a      	ldr	r2, [r3, #20]
 8004b84:	4b5b      	ldr	r3, [pc, #364]	; (8004cf4 <HAL_RCC_ClockConfig+0x6c8>)
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d221      	bcs.n	8004bd4 <HAL_RCC_ClockConfig+0x5a8>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d014      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x596>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	2b40      	cmp	r3, #64	; 0x40
 8004b9e:	d010      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x596>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	2b50      	cmp	r3, #80	; 0x50
 8004ba6:	d00c      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x596>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	2b60      	cmp	r3, #96	; 0x60
 8004bae:	d008      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x596>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	2b70      	cmp	r3, #112	; 0x70
 8004bb6:	d004      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x596>
 8004bb8:	f240 4169 	movw	r1, #1129	; 0x469
 8004bbc:	484e      	ldr	r0, [pc, #312]	; (8004cf8 <HAL_RCC_ClockConfig+0x6cc>)
 8004bbe:	f7fc f880 	bl	8000cc2 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004bc2:	4b4c      	ldr	r3, [pc, #304]	; (8004cf4 <HAL_RCC_ClockConfig+0x6c8>)
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	4949      	ldr	r1, [pc, #292]	; (8004cf4 <HAL_RCC_ClockConfig+0x6c8>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0310 	and.w	r3, r3, #16
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d02d      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x610>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699a      	ldr	r2, [r3, #24]
 8004be4:	4b43      	ldr	r3, [pc, #268]	; (8004cf4 <HAL_RCC_ClockConfig+0x6c8>)
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d225      	bcs.n	8004c3c <HAL_RCC_ClockConfig+0x610>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d018      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x5fe>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c00:	d013      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x5fe>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004c0a:	d00e      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x5fe>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c14:	d009      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x5fe>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c1e:	d004      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x5fe>
 8004c20:	f240 417b 	movw	r1, #1147	; 0x47b
 8004c24:	4834      	ldr	r0, [pc, #208]	; (8004cf8 <HAL_RCC_ClockConfig+0x6cc>)
 8004c26:	f7fc f84c 	bl	8000cc2 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c2a:	4b32      	ldr	r3, [pc, #200]	; (8004cf4 <HAL_RCC_ClockConfig+0x6c8>)
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	492f      	ldr	r1, [pc, #188]	; (8004cf4 <HAL_RCC_ClockConfig+0x6c8>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0320 	and.w	r3, r3, #32
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d029      	beq.n	8004c9c <HAL_RCC_ClockConfig+0x670>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69da      	ldr	r2, [r3, #28]
 8004c4c:	4b29      	ldr	r3, [pc, #164]	; (8004cf4 <HAL_RCC_ClockConfig+0x6c8>)
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d221      	bcs.n	8004c9c <HAL_RCC_ClockConfig+0x670>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d014      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x65e>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d010      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x65e>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	2b50      	cmp	r3, #80	; 0x50
 8004c6e:	d00c      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x65e>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	2b60      	cmp	r3, #96	; 0x60
 8004c76:	d008      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x65e>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	2b70      	cmp	r3, #112	; 0x70
 8004c7e:	d004      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x65e>
 8004c80:	f240 418d 	movw	r1, #1165	; 0x48d
 8004c84:	481c      	ldr	r0, [pc, #112]	; (8004cf8 <HAL_RCC_ClockConfig+0x6cc>)
 8004c86:	f7fc f81c 	bl	8000cc2 <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c8a:	4b1a      	ldr	r3, [pc, #104]	; (8004cf4 <HAL_RCC_ClockConfig+0x6c8>)
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	4917      	ldr	r1, [pc, #92]	; (8004cf4 <HAL_RCC_ClockConfig+0x6c8>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c9c:	f000 f836 	bl	8004d0c <HAL_RCC_GetSysClockFreq>
 8004ca0:	4601      	mov	r1, r0
 8004ca2:	4b14      	ldr	r3, [pc, #80]	; (8004cf4 <HAL_RCC_ClockConfig+0x6c8>)
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	0a1b      	lsrs	r3, r3, #8
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	4a13      	ldr	r2, [pc, #76]	; (8004cfc <HAL_RCC_ClockConfig+0x6d0>)
 8004cae:	5cd3      	ldrb	r3, [r2, r3]
 8004cb0:	f003 031f 	and.w	r3, r3, #31
 8004cb4:	fa21 f303 	lsr.w	r3, r1, r3
 8004cb8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004cba:	4b0e      	ldr	r3, [pc, #56]	; (8004cf4 <HAL_RCC_ClockConfig+0x6c8>)
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	4a0e      	ldr	r2, [pc, #56]	; (8004cfc <HAL_RCC_ClockConfig+0x6d0>)
 8004cc4:	5cd3      	ldrb	r3, [r2, r3]
 8004cc6:	f003 031f 	and.w	r3, r3, #31
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd0:	4a0b      	ldr	r2, [pc, #44]	; (8004d00 <HAL_RCC_ClockConfig+0x6d4>)
 8004cd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004cd4:	4a0b      	ldr	r2, [pc, #44]	; (8004d04 <HAL_RCC_ClockConfig+0x6d8>)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004cda:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <HAL_RCC_ClockConfig+0x6dc>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fc f818 	bl	8000d14 <HAL_InitTick>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	58024400 	.word	0x58024400
 8004cf8:	08018904 	.word	0x08018904
 8004cfc:	0801a8a0 	.word	0x0801a8a0
 8004d00:	24000004 	.word	0x24000004
 8004d04:	24000000 	.word	0x24000000
 8004d08:	24000008 	.word	0x24000008

08004d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b089      	sub	sp, #36	; 0x24
 8004d10:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d12:	4baf      	ldr	r3, [pc, #700]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d1a:	2b18      	cmp	r3, #24
 8004d1c:	f200 814e 	bhi.w	8004fbc <HAL_RCC_GetSysClockFreq+0x2b0>
 8004d20:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d26:	bf00      	nop
 8004d28:	08004d8d 	.word	0x08004d8d
 8004d2c:	08004fbd 	.word	0x08004fbd
 8004d30:	08004fbd 	.word	0x08004fbd
 8004d34:	08004fbd 	.word	0x08004fbd
 8004d38:	08004fbd 	.word	0x08004fbd
 8004d3c:	08004fbd 	.word	0x08004fbd
 8004d40:	08004fbd 	.word	0x08004fbd
 8004d44:	08004fbd 	.word	0x08004fbd
 8004d48:	08004db3 	.word	0x08004db3
 8004d4c:	08004fbd 	.word	0x08004fbd
 8004d50:	08004fbd 	.word	0x08004fbd
 8004d54:	08004fbd 	.word	0x08004fbd
 8004d58:	08004fbd 	.word	0x08004fbd
 8004d5c:	08004fbd 	.word	0x08004fbd
 8004d60:	08004fbd 	.word	0x08004fbd
 8004d64:	08004fbd 	.word	0x08004fbd
 8004d68:	08004db9 	.word	0x08004db9
 8004d6c:	08004fbd 	.word	0x08004fbd
 8004d70:	08004fbd 	.word	0x08004fbd
 8004d74:	08004fbd 	.word	0x08004fbd
 8004d78:	08004fbd 	.word	0x08004fbd
 8004d7c:	08004fbd 	.word	0x08004fbd
 8004d80:	08004fbd 	.word	0x08004fbd
 8004d84:	08004fbd 	.word	0x08004fbd
 8004d88:	08004dbf 	.word	0x08004dbf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d8c:	4b90      	ldr	r3, [pc, #576]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0320 	and.w	r3, r3, #32
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d009      	beq.n	8004dac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d98:	4b8d      	ldr	r3, [pc, #564]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	08db      	lsrs	r3, r3, #3
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	4a8c      	ldr	r2, [pc, #560]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004da4:	fa22 f303 	lsr.w	r3, r2, r3
 8004da8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004daa:	e10a      	b.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004dac:	4b89      	ldr	r3, [pc, #548]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004dae:	61bb      	str	r3, [r7, #24]
    break;
 8004db0:	e107      	b.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004db2:	4b89      	ldr	r3, [pc, #548]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004db4:	61bb      	str	r3, [r7, #24]
    break;
 8004db6:	e104      	b.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004db8:	4b88      	ldr	r3, [pc, #544]	; (8004fdc <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004dba:	61bb      	str	r3, [r7, #24]
    break;
 8004dbc:	e101      	b.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004dbe:	4b84      	ldr	r3, [pc, #528]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004dc8:	4b81      	ldr	r3, [pc, #516]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dcc:	091b      	lsrs	r3, r3, #4
 8004dce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dd2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004dd4:	4b7e      	ldr	r3, [pc, #504]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004dde:	4b7c      	ldr	r3, [pc, #496]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de2:	08db      	lsrs	r3, r3, #3
 8004de4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	fb02 f303 	mul.w	r3, r2, r3
 8004dee:	ee07 3a90 	vmov	s15, r3
 8004df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 80da 	beq.w	8004fb6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d05a      	beq.n	8004ebe <HAL_RCC_GetSysClockFreq+0x1b2>
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d302      	bcc.n	8004e12 <HAL_RCC_GetSysClockFreq+0x106>
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d078      	beq.n	8004f02 <HAL_RCC_GetSysClockFreq+0x1f6>
 8004e10:	e099      	b.n	8004f46 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e12:	4b6f      	ldr	r3, [pc, #444]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0320 	and.w	r3, r3, #32
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d02d      	beq.n	8004e7a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e1e:	4b6c      	ldr	r3, [pc, #432]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	08db      	lsrs	r3, r3, #3
 8004e24:	f003 0303 	and.w	r3, r3, #3
 8004e28:	4a6a      	ldr	r2, [pc, #424]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	ee07 3a90 	vmov	s15, r3
 8004e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	ee07 3a90 	vmov	s15, r3
 8004e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e48:	4b61      	ldr	r3, [pc, #388]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e50:	ee07 3a90 	vmov	s15, r3
 8004e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e58:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e5c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004fe0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004e60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e74:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004e78:	e087      	b.n	8004f8a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	ee07 3a90 	vmov	s15, r3
 8004e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e84:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004fe4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004e88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e8c:	4b50      	ldr	r3, [pc, #320]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e94:	ee07 3a90 	vmov	s15, r3
 8004e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ea0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004fe0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004ea4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ebc:	e065      	b.n	8004f8a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	ee07 3a90 	vmov	s15, r3
 8004ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004fe8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004ecc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ed0:	4b3f      	ldr	r3, [pc, #252]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed8:	ee07 3a90 	vmov	s15, r3
 8004edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ee4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004fe0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004ee8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ef0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ef4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004efc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f00:	e043      	b.n	8004f8a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	ee07 3a90 	vmov	s15, r3
 8004f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f0c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004fec <HAL_RCC_GetSysClockFreq+0x2e0>
 8004f10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f14:	4b2e      	ldr	r3, [pc, #184]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f1c:	ee07 3a90 	vmov	s15, r3
 8004f20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f24:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f28:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004fe0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004f2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f44:	e021      	b.n	8004f8a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	ee07 3a90 	vmov	s15, r3
 8004f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f50:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004fe8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004f54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f58:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f60:	ee07 3a90 	vmov	s15, r3
 8004f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f68:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f6c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004fe0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004f70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f88:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004f8a:	4b11      	ldr	r3, [pc, #68]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	0a5b      	lsrs	r3, r3, #9
 8004f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f94:	3301      	adds	r3, #1
 8004f96:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004fa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fae:	ee17 3a90 	vmov	r3, s15
 8004fb2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004fb4:	e005      	b.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61bb      	str	r3, [r7, #24]
    break;
 8004fba:	e002      	b.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004fbc:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004fbe:	61bb      	str	r3, [r7, #24]
    break;
 8004fc0:	bf00      	nop
  }

  return sysclockfreq;
 8004fc2:	69bb      	ldr	r3, [r7, #24]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3724      	adds	r7, #36	; 0x24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	58024400 	.word	0x58024400
 8004fd4:	03d09000 	.word	0x03d09000
 8004fd8:	003d0900 	.word	0x003d0900
 8004fdc:	007a1200 	.word	0x007a1200
 8004fe0:	46000000 	.word	0x46000000
 8004fe4:	4c742400 	.word	0x4c742400
 8004fe8:	4a742400 	.word	0x4a742400
 8004fec:	4af42400 	.word	0x4af42400

08004ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ff6:	f7ff fe89 	bl	8004d0c <HAL_RCC_GetSysClockFreq>
 8004ffa:	4601      	mov	r1, r0
 8004ffc:	4b10      	ldr	r3, [pc, #64]	; (8005040 <HAL_RCC_GetHCLKFreq+0x50>)
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	0a1b      	lsrs	r3, r3, #8
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	4a0f      	ldr	r2, [pc, #60]	; (8005044 <HAL_RCC_GetHCLKFreq+0x54>)
 8005008:	5cd3      	ldrb	r3, [r2, r3]
 800500a:	f003 031f 	and.w	r3, r3, #31
 800500e:	fa21 f303 	lsr.w	r3, r1, r3
 8005012:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005014:	4b0a      	ldr	r3, [pc, #40]	; (8005040 <HAL_RCC_GetHCLKFreq+0x50>)
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	f003 030f 	and.w	r3, r3, #15
 800501c:	4a09      	ldr	r2, [pc, #36]	; (8005044 <HAL_RCC_GetHCLKFreq+0x54>)
 800501e:	5cd3      	ldrb	r3, [r2, r3]
 8005020:	f003 031f 	and.w	r3, r3, #31
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	fa22 f303 	lsr.w	r3, r2, r3
 800502a:	4a07      	ldr	r2, [pc, #28]	; (8005048 <HAL_RCC_GetHCLKFreq+0x58>)
 800502c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800502e:	4a07      	ldr	r2, [pc, #28]	; (800504c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005034:	4b04      	ldr	r3, [pc, #16]	; (8005048 <HAL_RCC_GetHCLKFreq+0x58>)
 8005036:	681b      	ldr	r3, [r3, #0]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	58024400 	.word	0x58024400
 8005044:	0801a8a0 	.word	0x0801a8a0
 8005048:	24000004 	.word	0x24000004
 800504c:	24000000 	.word	0x24000000

08005050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005054:	f7ff ffcc 	bl	8004ff0 <HAL_RCC_GetHCLKFreq>
 8005058:	4601      	mov	r1, r0
 800505a:	4b06      	ldr	r3, [pc, #24]	; (8005074 <HAL_RCC_GetPCLK1Freq+0x24>)
 800505c:	69db      	ldr	r3, [r3, #28]
 800505e:	091b      	lsrs	r3, r3, #4
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	4a04      	ldr	r2, [pc, #16]	; (8005078 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005066:	5cd3      	ldrb	r3, [r2, r3]
 8005068:	f003 031f 	and.w	r3, r3, #31
 800506c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005070:	4618      	mov	r0, r3
 8005072:	bd80      	pop	{r7, pc}
 8005074:	58024400 	.word	0x58024400
 8005078:	0801a8a0 	.word	0x0801a8a0

0800507c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005080:	f7ff ffb6 	bl	8004ff0 <HAL_RCC_GetHCLKFreq>
 8005084:	4601      	mov	r1, r0
 8005086:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	0a1b      	lsrs	r3, r3, #8
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	4a04      	ldr	r2, [pc, #16]	; (80050a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005092:	5cd3      	ldrb	r3, [r2, r3]
 8005094:	f003 031f 	and.w	r3, r3, #31
 8005098:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800509c:	4618      	mov	r0, r3
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	58024400 	.word	0x58024400
 80050a4:	0801a8a0 	.word	0x0801a8a0

080050a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	223f      	movs	r2, #63	; 0x3f
 80050b6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80050b8:	4b1a      	ldr	r3, [pc, #104]	; (8005124 <HAL_RCC_GetClockConfig+0x7c>)
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f003 0207 	and.w	r2, r3, #7
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80050c4:	4b17      	ldr	r3, [pc, #92]	; (8005124 <HAL_RCC_GetClockConfig+0x7c>)
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80050d0:	4b14      	ldr	r3, [pc, #80]	; (8005124 <HAL_RCC_GetClockConfig+0x7c>)
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	f003 020f 	and.w	r2, r3, #15
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80050dc:	4b11      	ldr	r3, [pc, #68]	; (8005124 <HAL_RCC_GetClockConfig+0x7c>)
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80050e8:	4b0e      	ldr	r3, [pc, #56]	; (8005124 <HAL_RCC_GetClockConfig+0x7c>)
 80050ea:	69db      	ldr	r3, [r3, #28]
 80050ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80050f4:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <HAL_RCC_GetClockConfig+0x7c>)
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005100:	4b08      	ldr	r3, [pc, #32]	; (8005124 <HAL_RCC_GetClockConfig+0x7c>)
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800510c:	4b06      	ldr	r3, [pc, #24]	; (8005128 <HAL_RCC_GetClockConfig+0x80>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 020f 	and.w	r2, r3, #15
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	601a      	str	r2, [r3, #0]
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	58024400 	.word	0x58024400
 8005128:	52002000 	.word	0x52002000

0800512c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005134:	2300      	movs	r3, #0
 8005136:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005138:	2300      	movs	r3, #0
 800513a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d03d      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800514c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005150:	d013      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005156:	d802      	bhi.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005158:	2b00      	cmp	r3, #0
 800515a:	d007      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800515c:	e01f      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800515e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005162:	d013      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005164:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005168:	d01c      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800516a:	e018      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800516c:	4baf      	ldr	r3, [pc, #700]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800516e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005170:	4aae      	ldr	r2, [pc, #696]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005176:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005178:	e015      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3304      	adds	r3, #4
 800517e:	2102      	movs	r1, #2
 8005180:	4618      	mov	r0, r3
 8005182:	f001 fc01 	bl	8006988 <RCCEx_PLL2_Config>
 8005186:	4603      	mov	r3, r0
 8005188:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800518a:	e00c      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3324      	adds	r3, #36	; 0x24
 8005190:	2102      	movs	r1, #2
 8005192:	4618      	mov	r0, r3
 8005194:	f001 fd1a 	bl	8006bcc <RCCEx_PLL3_Config>
 8005198:	4603      	mov	r3, r0
 800519a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800519c:	e003      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	75fb      	strb	r3, [r7, #23]
      break;
 80051a2:	e000      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80051a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051a6:	7dfb      	ldrb	r3, [r7, #23]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d109      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80051ac:	4b9f      	ldr	r3, [pc, #636]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051b8:	499c      	ldr	r1, [pc, #624]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	650b      	str	r3, [r1, #80]	; 0x50
 80051be:	e001      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c0:	7dfb      	ldrb	r3, [r7, #23]
 80051c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d03d      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d826      	bhi.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80051d8:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80051da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051de:	bf00      	nop
 80051e0:	080051f5 	.word	0x080051f5
 80051e4:	08005203 	.word	0x08005203
 80051e8:	08005215 	.word	0x08005215
 80051ec:	0800522d 	.word	0x0800522d
 80051f0:	0800522d 	.word	0x0800522d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051f4:	4b8d      	ldr	r3, [pc, #564]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f8:	4a8c      	ldr	r2, [pc, #560]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005200:	e015      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3304      	adds	r3, #4
 8005206:	2100      	movs	r1, #0
 8005208:	4618      	mov	r0, r3
 800520a:	f001 fbbd 	bl	8006988 <RCCEx_PLL2_Config>
 800520e:	4603      	mov	r3, r0
 8005210:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005212:	e00c      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3324      	adds	r3, #36	; 0x24
 8005218:	2100      	movs	r1, #0
 800521a:	4618      	mov	r0, r3
 800521c:	f001 fcd6 	bl	8006bcc <RCCEx_PLL3_Config>
 8005220:	4603      	mov	r3, r0
 8005222:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005224:	e003      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	75fb      	strb	r3, [r7, #23]
      break;
 800522a:	e000      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800522c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800522e:	7dfb      	ldrb	r3, [r7, #23]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d109      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005234:	4b7d      	ldr	r3, [pc, #500]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005238:	f023 0207 	bic.w	r2, r3, #7
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005240:	497a      	ldr	r1, [pc, #488]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005242:	4313      	orrs	r3, r2
 8005244:	650b      	str	r3, [r1, #80]	; 0x50
 8005246:	e001      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005248:	7dfb      	ldrb	r3, [r7, #23]
 800524a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005254:	2b00      	cmp	r3, #0
 8005256:	d03e      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525c:	2b80      	cmp	r3, #128	; 0x80
 800525e:	d01c      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005260:	2b80      	cmp	r3, #128	; 0x80
 8005262:	d804      	bhi.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005264:	2b00      	cmp	r3, #0
 8005266:	d008      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005268:	2b40      	cmp	r3, #64	; 0x40
 800526a:	d00d      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800526c:	e01e      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x180>
 800526e:	2bc0      	cmp	r3, #192	; 0xc0
 8005270:	d01f      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005276:	d01e      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005278:	e018      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800527a:	4b6c      	ldr	r3, [pc, #432]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800527c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527e:	4a6b      	ldr	r2, [pc, #428]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005284:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005286:	e017      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3304      	adds	r3, #4
 800528c:	2100      	movs	r1, #0
 800528e:	4618      	mov	r0, r3
 8005290:	f001 fb7a 	bl	8006988 <RCCEx_PLL2_Config>
 8005294:	4603      	mov	r3, r0
 8005296:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005298:	e00e      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3324      	adds	r3, #36	; 0x24
 800529e:	2100      	movs	r1, #0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f001 fc93 	bl	8006bcc <RCCEx_PLL3_Config>
 80052a6:	4603      	mov	r3, r0
 80052a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80052aa:	e005      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	75fb      	strb	r3, [r7, #23]
      break;
 80052b0:	e002      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80052b2:	bf00      	nop
 80052b4:	e000      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80052b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052b8:	7dfb      	ldrb	r3, [r7, #23]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d109      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80052be:	4b5b      	ldr	r3, [pc, #364]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ca:	4958      	ldr	r1, [pc, #352]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	650b      	str	r3, [r1, #80]	; 0x50
 80052d0:	e001      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d2:	7dfb      	ldrb	r3, [r7, #23]
 80052d4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d044      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80052e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052ec:	d01f      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80052ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052f2:	d805      	bhi.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00a      	beq.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052fc:	d00e      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80052fe:	e01f      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8005300:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005304:	d01f      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8005306:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800530a:	d01e      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800530c:	e018      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800530e:	4b47      	ldr	r3, [pc, #284]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	4a46      	ldr	r2, [pc, #280]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005318:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800531a:	e017      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3304      	adds	r3, #4
 8005320:	2100      	movs	r1, #0
 8005322:	4618      	mov	r0, r3
 8005324:	f001 fb30 	bl	8006988 <RCCEx_PLL2_Config>
 8005328:	4603      	mov	r3, r0
 800532a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800532c:	e00e      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3324      	adds	r3, #36	; 0x24
 8005332:	2100      	movs	r1, #0
 8005334:	4618      	mov	r0, r3
 8005336:	f001 fc49 	bl	8006bcc <RCCEx_PLL3_Config>
 800533a:	4603      	mov	r3, r0
 800533c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800533e:	e005      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	75fb      	strb	r3, [r7, #23]
      break;
 8005344:	e002      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005346:	bf00      	nop
 8005348:	e000      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800534a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800534c:	7dfb      	ldrb	r3, [r7, #23]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10a      	bne.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005352:	4b36      	ldr	r3, [pc, #216]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005356:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005360:	4932      	ldr	r1, [pc, #200]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005362:	4313      	orrs	r3, r2
 8005364:	658b      	str	r3, [r1, #88]	; 0x58
 8005366:	e001      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005368:	7dfb      	ldrb	r3, [r7, #23]
 800536a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005374:	2b00      	cmp	r3, #0
 8005376:	d044      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800537e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005382:	d01f      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005384:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005388:	d805      	bhi.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800538e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005392:	d00e      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005394:	e01f      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8005396:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800539a:	d01f      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800539c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053a0:	d01e      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80053a2:	e018      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053a4:	4b21      	ldr	r3, [pc, #132]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a8:	4a20      	ldr	r2, [pc, #128]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80053b0:	e017      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	3304      	adds	r3, #4
 80053b6:	2100      	movs	r1, #0
 80053b8:	4618      	mov	r0, r3
 80053ba:	f001 fae5 	bl	8006988 <RCCEx_PLL2_Config>
 80053be:	4603      	mov	r3, r0
 80053c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80053c2:	e00e      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	3324      	adds	r3, #36	; 0x24
 80053c8:	2100      	movs	r1, #0
 80053ca:	4618      	mov	r0, r3
 80053cc:	f001 fbfe 	bl	8006bcc <RCCEx_PLL3_Config>
 80053d0:	4603      	mov	r3, r0
 80053d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80053d4:	e005      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	75fb      	strb	r3, [r7, #23]
      break;
 80053da:	e002      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80053dc:	bf00      	nop
 80053de:	e000      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80053e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053e2:	7dfb      	ldrb	r3, [r7, #23]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80053e8:	4b10      	ldr	r3, [pc, #64]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80053f6:	490d      	ldr	r1, [pc, #52]	; (800542c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	658b      	str	r3, [r1, #88]	; 0x58
 80053fc:	e001      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fe:	7dfb      	ldrb	r3, [r7, #23]
 8005400:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d035      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005412:	2b10      	cmp	r3, #16
 8005414:	d00c      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005416:	2b10      	cmp	r3, #16
 8005418:	d802      	bhi.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800541a:	2b00      	cmp	r3, #0
 800541c:	d01b      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800541e:	e017      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005420:	2b20      	cmp	r3, #32
 8005422:	d00c      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005424:	2b30      	cmp	r3, #48	; 0x30
 8005426:	d018      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005428:	e012      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800542a:	bf00      	nop
 800542c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005430:	4baf      	ldr	r3, [pc, #700]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005434:	4aae      	ldr	r2, [pc, #696]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800543a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800543c:	e00e      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	3304      	adds	r3, #4
 8005442:	2102      	movs	r1, #2
 8005444:	4618      	mov	r0, r3
 8005446:	f001 fa9f 	bl	8006988 <RCCEx_PLL2_Config>
 800544a:	4603      	mov	r3, r0
 800544c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800544e:	e005      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	75fb      	strb	r3, [r7, #23]
      break;
 8005454:	e002      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005456:	bf00      	nop
 8005458:	e000      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800545a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800545c:	7dfb      	ldrb	r3, [r7, #23]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d109      	bne.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005462:	4ba3      	ldr	r3, [pc, #652]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005466:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800546e:	49a0      	ldr	r1, [pc, #640]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005470:	4313      	orrs	r3, r2
 8005472:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005474:	e001      	b.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005476:	7dfb      	ldrb	r3, [r7, #23]
 8005478:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d042      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800548a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800548e:	d01f      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005494:	d805      	bhi.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800549a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800549e:	d00e      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x392>
 80054a0:	e01f      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80054a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054a6:	d01f      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80054a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054ac:	d01e      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80054ae:	e018      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b0:	4b8f      	ldr	r3, [pc, #572]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	4a8e      	ldr	r2, [pc, #568]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80054bc:	e017      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3304      	adds	r3, #4
 80054c2:	2100      	movs	r1, #0
 80054c4:	4618      	mov	r0, r3
 80054c6:	f001 fa5f 	bl	8006988 <RCCEx_PLL2_Config>
 80054ca:	4603      	mov	r3, r0
 80054cc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80054ce:	e00e      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3324      	adds	r3, #36	; 0x24
 80054d4:	2100      	movs	r1, #0
 80054d6:	4618      	mov	r0, r3
 80054d8:	f001 fb78 	bl	8006bcc <RCCEx_PLL3_Config>
 80054dc:	4603      	mov	r3, r0
 80054de:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80054e0:	e005      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	75fb      	strb	r3, [r7, #23]
      break;
 80054e6:	e002      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80054e8:	bf00      	nop
 80054ea:	e000      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80054ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ee:	7dfb      	ldrb	r3, [r7, #23]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d109      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80054f4:	4b7e      	ldr	r3, [pc, #504]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005500:	497b      	ldr	r1, [pc, #492]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005502:	4313      	orrs	r3, r2
 8005504:	650b      	str	r3, [r1, #80]	; 0x50
 8005506:	e001      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005508:	7dfb      	ldrb	r3, [r7, #23]
 800550a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d042      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800551c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005520:	d01b      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005522:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005526:	d805      	bhi.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005528:	2b00      	cmp	r3, #0
 800552a:	d022      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800552c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005530:	d00a      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005532:	e01b      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005534:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005538:	d01d      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800553a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800553e:	d01c      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005540:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005544:	d01b      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005546:	e011      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3304      	adds	r3, #4
 800554c:	2101      	movs	r1, #1
 800554e:	4618      	mov	r0, r3
 8005550:	f001 fa1a 	bl	8006988 <RCCEx_PLL2_Config>
 8005554:	4603      	mov	r3, r0
 8005556:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005558:	e012      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	3324      	adds	r3, #36	; 0x24
 800555e:	2101      	movs	r1, #1
 8005560:	4618      	mov	r0, r3
 8005562:	f001 fb33 	bl	8006bcc <RCCEx_PLL3_Config>
 8005566:	4603      	mov	r3, r0
 8005568:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800556a:	e009      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	75fb      	strb	r3, [r7, #23]
      break;
 8005570:	e006      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005572:	bf00      	nop
 8005574:	e004      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005576:	bf00      	nop
 8005578:	e002      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800557a:	bf00      	nop
 800557c:	e000      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800557e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005580:	7dfb      	ldrb	r3, [r7, #23]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d109      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005586:	4b5a      	ldr	r3, [pc, #360]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800558a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005592:	4957      	ldr	r1, [pc, #348]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005594:	4313      	orrs	r3, r2
 8005596:	650b      	str	r3, [r1, #80]	; 0x50
 8005598:	e001      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800559a:	7dfb      	ldrb	r3, [r7, #23]
 800559c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d044      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80055b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055b4:	d01b      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80055b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ba:	d805      	bhi.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d022      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80055c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055c4:	d00a      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80055c6:	e01b      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80055c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055cc:	d01d      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80055ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055d2:	d01c      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80055d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055d8:	d01b      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80055da:	e011      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3304      	adds	r3, #4
 80055e0:	2101      	movs	r1, #1
 80055e2:	4618      	mov	r0, r3
 80055e4:	f001 f9d0 	bl	8006988 <RCCEx_PLL2_Config>
 80055e8:	4603      	mov	r3, r0
 80055ea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80055ec:	e012      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	3324      	adds	r3, #36	; 0x24
 80055f2:	2101      	movs	r1, #1
 80055f4:	4618      	mov	r0, r3
 80055f6:	f001 fae9 	bl	8006bcc <RCCEx_PLL3_Config>
 80055fa:	4603      	mov	r3, r0
 80055fc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80055fe:	e009      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	75fb      	strb	r3, [r7, #23]
      break;
 8005604:	e006      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005606:	bf00      	nop
 8005608:	e004      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800560a:	bf00      	nop
 800560c:	e002      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800560e:	bf00      	nop
 8005610:	e000      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005612:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005614:	7dfb      	ldrb	r3, [r7, #23]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10a      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800561a:	4b35      	ldr	r3, [pc, #212]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800561c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005628:	4931      	ldr	r1, [pc, #196]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800562a:	4313      	orrs	r3, r2
 800562c:	658b      	str	r3, [r1, #88]	; 0x58
 800562e:	e001      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005630:	7dfb      	ldrb	r3, [r7, #23]
 8005632:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d02d      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005644:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005648:	d005      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800564a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800564e:	d009      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005650:	2b00      	cmp	r3, #0
 8005652:	d013      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005654:	e00f      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005656:	4b26      	ldr	r3, [pc, #152]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565a:	4a25      	ldr	r2, [pc, #148]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800565c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005660:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005662:	e00c      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3304      	adds	r3, #4
 8005668:	2101      	movs	r1, #1
 800566a:	4618      	mov	r0, r3
 800566c:	f001 f98c 	bl	8006988 <RCCEx_PLL2_Config>
 8005670:	4603      	mov	r3, r0
 8005672:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005674:	e003      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	75fb      	strb	r3, [r7, #23]
      break;
 800567a:	e000      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800567c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800567e:	7dfb      	ldrb	r3, [r7, #23]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d109      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005684:	4b1a      	ldr	r3, [pc, #104]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005688:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005690:	4917      	ldr	r1, [pc, #92]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005692:	4313      	orrs	r3, r2
 8005694:	650b      	str	r3, [r1, #80]	; 0x50
 8005696:	e001      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005698:	7dfb      	ldrb	r3, [r7, #23]
 800569a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d037      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d81b      	bhi.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80056b0:	a201      	add	r2, pc, #4	; (adr r2, 80056b8 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80056b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b6:	bf00      	nop
 80056b8:	080056f5 	.word	0x080056f5
 80056bc:	080056c9 	.word	0x080056c9
 80056c0:	080056d7 	.word	0x080056d7
 80056c4:	080056f5 	.word	0x080056f5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056c8:	4b09      	ldr	r3, [pc, #36]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	4a08      	ldr	r2, [pc, #32]	; (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80056ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80056d4:	e00f      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3304      	adds	r3, #4
 80056da:	2102      	movs	r1, #2
 80056dc:	4618      	mov	r0, r3
 80056de:	f001 f953 	bl	8006988 <RCCEx_PLL2_Config>
 80056e2:	4603      	mov	r3, r0
 80056e4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80056e6:	e006      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	75fb      	strb	r3, [r7, #23]
      break;
 80056ec:	e003      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80056ee:	bf00      	nop
 80056f0:	58024400 	.word	0x58024400
      break;
 80056f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056f6:	7dfb      	ldrb	r3, [r7, #23]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10b      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80056fc:	4b04      	ldr	r3, [pc, #16]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80056fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005700:	f023 0203 	bic.w	r2, r3, #3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005708:	4901      	ldr	r1, [pc, #4]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800570a:	4313      	orrs	r3, r2
 800570c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800570e:	e003      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8005710:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005714:	7dfb      	ldrb	r3, [r7, #23]
 8005716:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 829b 	beq.w	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xb30>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800572c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005730:	f000 81a9 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800573a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800573e:	f000 81a2 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005748:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 800574c:	f000 819b 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005756:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 800575a:	f000 8194 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005764:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 8005768:	f000 818d 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005772:	f5b3 4fa6 	cmp.w	r3, #21248	; 0x5300
 8005776:	f000 8186 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005780:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 8005784:	f000 817f 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800578e:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 8005792:	f000 8178 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800579c:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 80057a0:	f000 8171 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057aa:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 80057ae:	f000 816a 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057b8:	f5b3 4f23 	cmp.w	r3, #41728	; 0xa300
 80057bc:	f000 8163 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057c6:	f5b3 4f33 	cmp.w	r3, #45824	; 0xb300
 80057ca:	f000 815c 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057d4:	f5b3 4f43 	cmp.w	r3, #49920	; 0xc300
 80057d8:	f000 8155 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057e2:	f5b3 4f53 	cmp.w	r3, #54016	; 0xd300
 80057e6:	f000 814e 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057f0:	f5b3 4f63 	cmp.w	r3, #58112	; 0xe300
 80057f4:	f000 8147 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057fe:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 8005802:	f000 8140 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800580c:	4aa8      	ldr	r2, [pc, #672]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800580e:	4293      	cmp	r3, r2
 8005810:	f000 8139 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800581a:	4aa6      	ldr	r2, [pc, #664]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 800581c:	4293      	cmp	r3, r2
 800581e:	f000 8132 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005828:	4aa3      	ldr	r2, [pc, #652]	; (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x98c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	f000 812b 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005836:	4aa1      	ldr	r2, [pc, #644]	; (8005abc <HAL_RCCEx_PeriphCLKConfig+0x990>)
 8005838:	4293      	cmp	r3, r2
 800583a:	f000 8124 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005844:	4a9e      	ldr	r2, [pc, #632]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005846:	4293      	cmp	r3, r2
 8005848:	f000 811d 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005852:	4a9c      	ldr	r2, [pc, #624]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x998>)
 8005854:	4293      	cmp	r3, r2
 8005856:	f000 8116 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005860:	4a99      	ldr	r2, [pc, #612]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	f000 810f 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800586e:	4a97      	ldr	r2, [pc, #604]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005870:	4293      	cmp	r3, r2
 8005872:	f000 8108 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800587c:	4a94      	ldr	r2, [pc, #592]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	f000 8101 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800588a:	4a92      	ldr	r2, [pc, #584]	; (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	f000 80fa 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005898:	4a8f      	ldr	r2, [pc, #572]	; (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 800589a:	4293      	cmp	r3, r2
 800589c:	f000 80f3 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058a6:	4a8d      	ldr	r2, [pc, #564]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x9b0>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	f000 80ec 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058b4:	4a8a      	ldr	r2, [pc, #552]	; (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	f000 80e5 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058c2:	4a88      	ldr	r2, [pc, #544]	; (8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	f000 80de 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058d0:	4a85      	ldr	r2, [pc, #532]	; (8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	f000 80d7 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058de:	4a83      	ldr	r2, [pc, #524]	; (8005aec <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	f000 80d0 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058ec:	4a80      	ldr	r2, [pc, #512]	; (8005af0 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	f000 80c9 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058fa:	4a7e      	ldr	r2, [pc, #504]	; (8005af4 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	f000 80c2 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005908:	4a7b      	ldr	r2, [pc, #492]	; (8005af8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800590a:	4293      	cmp	r3, r2
 800590c:	f000 80bb 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005916:	4a79      	ldr	r2, [pc, #484]	; (8005afc <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 8005918:	4293      	cmp	r3, r2
 800591a:	f000 80b4 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005924:	4a76      	ldr	r2, [pc, #472]	; (8005b00 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005926:	4293      	cmp	r3, r2
 8005928:	f000 80ad 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005932:	4a74      	ldr	r2, [pc, #464]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8005934:	4293      	cmp	r3, r2
 8005936:	f000 80a6 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005940:	4a71      	ldr	r2, [pc, #452]	; (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 8005942:	4293      	cmp	r3, r2
 8005944:	f000 809f 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800594e:	4a6f      	ldr	r2, [pc, #444]	; (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005950:	4293      	cmp	r3, r2
 8005952:	f000 8098 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800595c:	4a6c      	ldr	r2, [pc, #432]	; (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	f000 8091 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800596a:	4a6a      	ldr	r2, [pc, #424]	; (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 800596c:	4293      	cmp	r3, r2
 800596e:	f000 808a 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005978:	4a67      	ldr	r2, [pc, #412]	; (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800597a:	4293      	cmp	r3, r2
 800597c:	f000 8083 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005986:	4a65      	ldr	r2, [pc, #404]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d07c      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005992:	4a63      	ldr	r2, [pc, #396]	; (8005b20 <HAL_RCCEx_PeriphCLKConfig+0x9f4>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d076      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800599e:	4a61      	ldr	r2, [pc, #388]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x9f8>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d070      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059aa:	4a5f      	ldr	r2, [pc, #380]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x9fc>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d06a      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059b6:	4a5d      	ldr	r2, [pc, #372]	; (8005b2c <HAL_RCCEx_PeriphCLKConfig+0xa00>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d064      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059c2:	4a5b      	ldr	r2, [pc, #364]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0xa04>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d05e      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059ce:	4a59      	ldr	r2, [pc, #356]	; (8005b34 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d058      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059da:	4a57      	ldr	r2, [pc, #348]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d052      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059e6:	4a55      	ldr	r2, [pc, #340]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d04c      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059f2:	4a53      	ldr	r2, [pc, #332]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0xa14>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d046      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059fe:	4a51      	ldr	r2, [pc, #324]	; (8005b44 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d040      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a0a:	4a4f      	ldr	r2, [pc, #316]	; (8005b48 <HAL_RCCEx_PeriphCLKConfig+0xa1c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d03a      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a16:	4a4d      	ldr	r2, [pc, #308]	; (8005b4c <HAL_RCCEx_PeriphCLKConfig+0xa20>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d034      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a22:	4a4b      	ldr	r2, [pc, #300]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d02e      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a2e:	4a49      	ldr	r2, [pc, #292]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d028      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a3a:	4a47      	ldr	r2, [pc, #284]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0xa2c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d022      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a46:	4a45      	ldr	r2, [pc, #276]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d01c      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a52:	4a43      	ldr	r2, [pc, #268]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d016      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a5e:	4a41      	ldr	r2, [pc, #260]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d010      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a6a:	4a3f      	ldr	r2, [pc, #252]	; (8005b68 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d00a      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a76:	4a3d      	ldr	r2, [pc, #244]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d004      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a7c:	f44f 715a 	mov.w	r1, #872	; 0x368
 8005a80:	483b      	ldr	r0, [pc, #236]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 8005a82:	f7fb f91e 	bl	8000cc2 <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a86:	4b3b      	ldr	r3, [pc, #236]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a3a      	ldr	r2, [pc, #232]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8005a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a92:	f7fb fd2f 	bl	80014f4 <HAL_GetTick>
 8005a96:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a98:	e06e      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a9a:	f7fb fd2b 	bl	80014f4 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b64      	cmp	r3, #100	; 0x64
 8005aa6:	d967      	bls.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
      {
        ret = HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	75fb      	strb	r3, [r7, #23]
        break;
 8005aac:	e06a      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8005aae:	bf00      	nop
 8005ab0:	00010300 	.word	0x00010300
 8005ab4:	00011300 	.word	0x00011300
 8005ab8:	00012300 	.word	0x00012300
 8005abc:	00013300 	.word	0x00013300
 8005ac0:	00014300 	.word	0x00014300
 8005ac4:	00015300 	.word	0x00015300
 8005ac8:	00016300 	.word	0x00016300
 8005acc:	00017300 	.word	0x00017300
 8005ad0:	00018300 	.word	0x00018300
 8005ad4:	00019300 	.word	0x00019300
 8005ad8:	0001a300 	.word	0x0001a300
 8005adc:	0001b300 	.word	0x0001b300
 8005ae0:	0001c300 	.word	0x0001c300
 8005ae4:	0001d300 	.word	0x0001d300
 8005ae8:	0001e300 	.word	0x0001e300
 8005aec:	0001f300 	.word	0x0001f300
 8005af0:	00020300 	.word	0x00020300
 8005af4:	00021300 	.word	0x00021300
 8005af8:	00022300 	.word	0x00022300
 8005afc:	00023300 	.word	0x00023300
 8005b00:	00024300 	.word	0x00024300
 8005b04:	00025300 	.word	0x00025300
 8005b08:	00026300 	.word	0x00026300
 8005b0c:	00027300 	.word	0x00027300
 8005b10:	00028300 	.word	0x00028300
 8005b14:	00029300 	.word	0x00029300
 8005b18:	0002a300 	.word	0x0002a300
 8005b1c:	0002b300 	.word	0x0002b300
 8005b20:	0002c300 	.word	0x0002c300
 8005b24:	0002d300 	.word	0x0002d300
 8005b28:	0002e300 	.word	0x0002e300
 8005b2c:	0002f300 	.word	0x0002f300
 8005b30:	00030300 	.word	0x00030300
 8005b34:	00031300 	.word	0x00031300
 8005b38:	00032300 	.word	0x00032300
 8005b3c:	00033300 	.word	0x00033300
 8005b40:	00034300 	.word	0x00034300
 8005b44:	00035300 	.word	0x00035300
 8005b48:	00036300 	.word	0x00036300
 8005b4c:	00037300 	.word	0x00037300
 8005b50:	00038300 	.word	0x00038300
 8005b54:	00039300 	.word	0x00039300
 8005b58:	0003a300 	.word	0x0003a300
 8005b5c:	0003b300 	.word	0x0003b300
 8005b60:	0003c300 	.word	0x0003c300
 8005b64:	0003d300 	.word	0x0003d300
 8005b68:	0003e300 	.word	0x0003e300
 8005b6c:	0003f300 	.word	0x0003f300
 8005b70:	0801893c 	.word	0x0801893c
 8005b74:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b78:	4bb9      	ldr	r3, [pc, #740]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d08a      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x96e>
      }
    }

    if(ret == HAL_OK)
 8005b84:	7dfb      	ldrb	r3, [r7, #23]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d166      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xb2c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b8a:	4bb6      	ldr	r3, [pc, #728]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b94:	4053      	eors	r3, r2
 8005b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d013      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b9e:	4bb1      	ldr	r3, [pc, #708]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ba8:	4bae      	ldr	r3, [pc, #696]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bac:	4aad      	ldr	r2, [pc, #692]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bb2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bb4:	4bab      	ldr	r3, [pc, #684]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb8:	4aaa      	ldr	r2, [pc, #680]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bbe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005bc0:	4aa8      	ldr	r2, [pc, #672]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd0:	d115      	bne.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xad2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd2:	f7fb fc8f 	bl	80014f4 <HAL_GetTick>
 8005bd6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bd8:	e00b      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xac6>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bda:	f7fb fc8b 	bl	80014f4 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d902      	bls.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xac6>
          {
            ret = HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	75fb      	strb	r3, [r7, #23]
            break;
 8005bf0:	e005      	b.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xad2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bf2:	4b9c      	ldr	r3, [pc, #624]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0ed      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0xaae>
          }
        }
      }

      if(ret == HAL_OK)
 8005bfe:	7dfb      	ldrb	r3, [r7, #23]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d126      	bne.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xb26>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c12:	d10d      	bne.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8005c14:	4b93      	ldr	r3, [pc, #588]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c22:	0919      	lsrs	r1, r3, #4
 8005c24:	4b90      	ldr	r3, [pc, #576]	; (8005e68 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005c26:	400b      	ands	r3, r1
 8005c28:	498e      	ldr	r1, [pc, #568]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	610b      	str	r3, [r1, #16]
 8005c2e:	e005      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xb10>
 8005c30:	4b8c      	ldr	r3, [pc, #560]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	4a8b      	ldr	r2, [pc, #556]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c36:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c3a:	6113      	str	r3, [r2, #16]
 8005c3c:	4b89      	ldr	r3, [pc, #548]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c4a:	4986      	ldr	r1, [pc, #536]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	670b      	str	r3, [r1, #112]	; 0x70
 8005c50:	e004      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	75bb      	strb	r3, [r7, #22]
 8005c56:	e001      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c58:	7dfb      	ldrb	r3, [r7, #23]
 8005c5a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d07e      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xc3a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c6c:	2b28      	cmp	r3, #40	; 0x28
 8005c6e:	d867      	bhi.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0xc14>
 8005c70:	a201      	add	r2, pc, #4	; (adr r2, 8005c78 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
 8005c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c76:	bf00      	nop
 8005c78:	08005d47 	.word	0x08005d47
 8005c7c:	08005d41 	.word	0x08005d41
 8005c80:	08005d41 	.word	0x08005d41
 8005c84:	08005d41 	.word	0x08005d41
 8005c88:	08005d41 	.word	0x08005d41
 8005c8c:	08005d41 	.word	0x08005d41
 8005c90:	08005d41 	.word	0x08005d41
 8005c94:	08005d41 	.word	0x08005d41
 8005c98:	08005d1d 	.word	0x08005d1d
 8005c9c:	08005d41 	.word	0x08005d41
 8005ca0:	08005d41 	.word	0x08005d41
 8005ca4:	08005d41 	.word	0x08005d41
 8005ca8:	08005d41 	.word	0x08005d41
 8005cac:	08005d41 	.word	0x08005d41
 8005cb0:	08005d41 	.word	0x08005d41
 8005cb4:	08005d41 	.word	0x08005d41
 8005cb8:	08005d2f 	.word	0x08005d2f
 8005cbc:	08005d41 	.word	0x08005d41
 8005cc0:	08005d41 	.word	0x08005d41
 8005cc4:	08005d41 	.word	0x08005d41
 8005cc8:	08005d41 	.word	0x08005d41
 8005ccc:	08005d41 	.word	0x08005d41
 8005cd0:	08005d41 	.word	0x08005d41
 8005cd4:	08005d41 	.word	0x08005d41
 8005cd8:	08005d47 	.word	0x08005d47
 8005cdc:	08005d41 	.word	0x08005d41
 8005ce0:	08005d41 	.word	0x08005d41
 8005ce4:	08005d41 	.word	0x08005d41
 8005ce8:	08005d41 	.word	0x08005d41
 8005cec:	08005d41 	.word	0x08005d41
 8005cf0:	08005d41 	.word	0x08005d41
 8005cf4:	08005d41 	.word	0x08005d41
 8005cf8:	08005d47 	.word	0x08005d47
 8005cfc:	08005d41 	.word	0x08005d41
 8005d00:	08005d41 	.word	0x08005d41
 8005d04:	08005d41 	.word	0x08005d41
 8005d08:	08005d41 	.word	0x08005d41
 8005d0c:	08005d41 	.word	0x08005d41
 8005d10:	08005d41 	.word	0x08005d41
 8005d14:	08005d41 	.word	0x08005d41
 8005d18:	08005d47 	.word	0x08005d47
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	2101      	movs	r1, #1
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fe30 	bl	8006988 <RCCEx_PLL2_Config>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005d2c:	e00c      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	3324      	adds	r3, #36	; 0x24
 8005d32:	2101      	movs	r1, #1
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 ff49 	bl	8006bcc <RCCEx_PLL3_Config>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005d3e:	e003      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	75fb      	strb	r3, [r7, #23]
      break;
 8005d44:	e000      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8005d46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d48:	7dfb      	ldrb	r3, [r7, #23]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d109      	bne.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xc36>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d4e:	4b45      	ldr	r3, [pc, #276]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d52:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d5a:	4942      	ldr	r1, [pc, #264]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	654b      	str	r3, [r1, #84]	; 0x54
 8005d60:	e001      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xc3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d62:	7dfb      	ldrb	r3, [r7, #23]
 8005d64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d037      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d76:	2b05      	cmp	r3, #5
 8005d78:	d820      	bhi.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xc90>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005dc3 	.word	0x08005dc3
 8005d84:	08005d99 	.word	0x08005d99
 8005d88:	08005dab 	.word	0x08005dab
 8005d8c:	08005dc3 	.word	0x08005dc3
 8005d90:	08005dc3 	.word	0x08005dc3
 8005d94:	08005dc3 	.word	0x08005dc3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	3304      	adds	r3, #4
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 fdf2 	bl	8006988 <RCCEx_PLL2_Config>
 8005da4:	4603      	mov	r3, r0
 8005da6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005da8:	e00c      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xc98>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	3324      	adds	r3, #36	; 0x24
 8005dae:	2101      	movs	r1, #1
 8005db0:	4618      	mov	r0, r3
 8005db2:	f000 ff0b 	bl	8006bcc <RCCEx_PLL3_Config>
 8005db6:	4603      	mov	r3, r0
 8005db8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005dba:	e003      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8005dc0:	e000      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      break;
 8005dc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d109      	bne.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005dca:	4b26      	ldr	r3, [pc, #152]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dce:	f023 0207 	bic.w	r2, r3, #7
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dd6:	4923      	ldr	r1, [pc, #140]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	654b      	str	r3, [r1, #84]	; 0x54
 8005ddc:	e001      	b.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dde:	7dfb      	ldrb	r3, [r7, #23]
 8005de0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d040      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df4:	2b05      	cmp	r3, #5
 8005df6:	d821      	bhi.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005df8:	a201      	add	r2, pc, #4	; (adr r2, 8005e00 <HAL_RCCEx_PeriphCLKConfig+0xcd4>)
 8005dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfe:	bf00      	nop
 8005e00:	08005e43 	.word	0x08005e43
 8005e04:	08005e19 	.word	0x08005e19
 8005e08:	08005e2b 	.word	0x08005e2b
 8005e0c:	08005e43 	.word	0x08005e43
 8005e10:	08005e43 	.word	0x08005e43
 8005e14:	08005e43 	.word	0x08005e43
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 fdb2 	bl	8006988 <RCCEx_PLL2_Config>
 8005e24:	4603      	mov	r3, r0
 8005e26:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005e28:	e00c      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xd18>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3324      	adds	r3, #36	; 0x24
 8005e2e:	2101      	movs	r1, #1
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 fecb 	bl	8006bcc <RCCEx_PLL3_Config>
 8005e36:	4603      	mov	r3, r0
 8005e38:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005e3a:	e003      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e40:	e000      	b.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8005e42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d110      	bne.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e4a:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4e:	f023 0207 	bic.w	r2, r3, #7
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e58:	4902      	ldr	r1, [pc, #8]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	658b      	str	r3, [r1, #88]	; 0x58
 8005e5e:	e007      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005e60:	58024800 	.word	0x58024800
 8005e64:	58024400 	.word	0x58024400
 8005e68:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e6c:	7dfb      	ldrb	r3, [r7, #23]
 8005e6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0320 	and.w	r3, r3, #32
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d044      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e86:	d01b      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005e88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e8c:	d805      	bhi.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d022      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8005e92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e96:	d00a      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005e98:	e01b      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
 8005e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9e:	d01d      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8005ea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ea4:	d01c      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005ea6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005eaa:	d01b      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
 8005eac:	e011      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fd67 	bl	8006988 <RCCEx_PLL2_Config>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005ebe:	e012      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xdba>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3324      	adds	r3, #36	; 0x24
 8005ec4:	2102      	movs	r1, #2
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fe80 	bl	8006bcc <RCCEx_PLL3_Config>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005ed0:	e009      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ed6:	e006      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8005ed8:	bf00      	nop
 8005eda:	e004      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8005edc:	bf00      	nop
 8005ede:	e002      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8005ee0:	bf00      	nop
 8005ee2:	e000      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8005ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ee6:	7dfb      	ldrb	r3, [r7, #23]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10a      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005eec:	4bb6      	ldr	r3, [pc, #728]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005efa:	49b3      	ldr	r1, [pc, #716]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	654b      	str	r3, [r1, #84]	; 0x54
 8005f00:	e001      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xdda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f02:	7dfb      	ldrb	r3, [r7, #23]
 8005f04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d044      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xe70>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f1c:	d01b      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xe2a>
 8005f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f22:	d805      	bhi.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xe04>
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d022      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0xe42>
 8005f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f2c:	d00a      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8005f2e:	e01b      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 8005f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f34:	d01d      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xe46>
 8005f36:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005f3a:	d01c      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xe4a>
 8005f3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f40:	d01b      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xe4e>
 8005f42:	e011      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3304      	adds	r3, #4
 8005f48:	2100      	movs	r1, #0
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fd1c 	bl	8006988 <RCCEx_PLL2_Config>
 8005f50:	4603      	mov	r3, r0
 8005f52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005f54:	e012      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xe50>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	3324      	adds	r3, #36	; 0x24
 8005f5a:	2102      	movs	r1, #2
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fe35 	bl	8006bcc <RCCEx_PLL3_Config>
 8005f62:	4603      	mov	r3, r0
 8005f64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005f66:	e009      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f6c:	e006      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8005f6e:	bf00      	nop
 8005f70:	e004      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8005f72:	bf00      	nop
 8005f74:	e002      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8005f76:	bf00      	nop
 8005f78:	e000      	b.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8005f7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f7c:	7dfb      	ldrb	r3, [r7, #23]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10a      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f82:	4b91      	ldr	r3, [pc, #580]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f86:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f90:	498d      	ldr	r1, [pc, #564]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	658b      	str	r3, [r1, #88]	; 0x58
 8005f96:	e001      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xe70>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f98:	7dfb      	ldrb	r3, [r7, #23]
 8005f9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d044      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xf06>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fb2:	d01b      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xec0>
 8005fb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fb8:	d805      	bhi.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xe9a>
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d022      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xed8>
 8005fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc2:	d00a      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0xeae>
 8005fc4:	e01b      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xed2>
 8005fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fca:	d01d      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8005fcc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005fd0:	d01c      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xee0>
 8005fd2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005fd6:	d01b      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xee4>
 8005fd8:	e011      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xed2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	2100      	movs	r1, #0
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 fcd1 	bl	8006988 <RCCEx_PLL2_Config>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005fea:	e012      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xee6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3324      	adds	r3, #36	; 0x24
 8005ff0:	2102      	movs	r1, #2
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 fdea 	bl	8006bcc <RCCEx_PLL3_Config>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005ffc:	e009      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	75fb      	strb	r3, [r7, #23]
      break;
 8006002:	e006      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8006004:	bf00      	nop
 8006006:	e004      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8006008:	bf00      	nop
 800600a:	e002      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 800600c:	bf00      	nop
 800600e:	e000      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8006010:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006012:	7dfb      	ldrb	r3, [r7, #23]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10a      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xf02>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006018:	4b6b      	ldr	r3, [pc, #428]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 800601a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006026:	4968      	ldr	r1, [pc, #416]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8006028:	4313      	orrs	r3, r2
 800602a:	658b      	str	r3, [r1, #88]	; 0x58
 800602c:	e001      	b.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xf06>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800602e:	7dfb      	ldrb	r3, [r7, #23]
 8006030:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0308 	and.w	r3, r3, #8
 800603a:	2b00      	cmp	r3, #0
 800603c:	d036      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xf80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006048:	d015      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006054:	d00f      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00a      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006066:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800606a:	d004      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 800606c:	f240 41e6 	movw	r1, #1254	; 0x4e6
 8006070:	4856      	ldr	r0, [pc, #344]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8006072:	f7fa fe26 	bl	8000cc2 <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800607c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006080:	d10a      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	3324      	adds	r3, #36	; 0x24
 8006086:	2102      	movs	r1, #2
 8006088:	4618      	mov	r0, r3
 800608a:	f000 fd9f 	bl	8006bcc <RCCEx_PLL3_Config>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
        {
          status = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006098:	4b4b      	ldr	r3, [pc, #300]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 800609a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060a6:	4948      	ldr	r1, [pc, #288]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d036      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xffa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060c2:	d015      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060ce:	d00f      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80060e4:	d004      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 80060e6:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 80060ea:	4838      	ldr	r0, [pc, #224]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 80060ec:	f7fa fde9 	bl	8000cc2 <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060fa:	d10a      	bne.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xfe6>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3324      	adds	r3, #36	; 0x24
 8006100:	2102      	movs	r1, #2
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fd62 	bl	8006bcc <RCCEx_PLL3_Config>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xfe6>
      {
        status = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006112:	4b2d      	ldr	r3, [pc, #180]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8006114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006116:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006120:	4929      	ldr	r1, [pc, #164]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8006122:	4313      	orrs	r3, r2
 8006124:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d030      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x1068>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800613c:	d00d      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x102e>
 800613e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006142:	d016      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8006144:	2b00      	cmp	r3, #0
 8006146:	d111      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x1040>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	3304      	adds	r3, #4
 800614c:	2100      	movs	r1, #0
 800614e:	4618      	mov	r0, r3
 8006150:	f000 fc1a 	bl	8006988 <RCCEx_PLL2_Config>
 8006154:	4603      	mov	r3, r0
 8006156:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006158:	e00c      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x1048>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3324      	adds	r3, #36	; 0x24
 800615e:	2102      	movs	r1, #2
 8006160:	4618      	mov	r0, r3
 8006162:	f000 fd33 	bl	8006bcc <RCCEx_PLL3_Config>
 8006166:	4603      	mov	r3, r0
 8006168:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800616a:	e003      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x1048>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	75fb      	strb	r3, [r7, #23]
      break;
 8006170:	e000      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x1048>
      break;
 8006172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006174:	7dfb      	ldrb	r3, [r7, #23]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10a      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x1064>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800617a:	4b13      	ldr	r3, [pc, #76]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 800617c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006188:	490f      	ldr	r1, [pc, #60]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 800618a:	4313      	orrs	r3, r2
 800618c:	658b      	str	r3, [r1, #88]	; 0x58
 800618e:	e001      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x1068>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006190:	7dfb      	ldrb	r3, [r7, #23]
 8006192:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d034      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x10de>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061aa:	d011      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
 80061ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061b0:	d01a      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80061b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061b6:	d114      	bne.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061b8:	4b03      	ldr	r3, [pc, #12]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 80061ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061bc:	4a02      	ldr	r2, [pc, #8]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 80061be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80061c4:	e011      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x10be>
 80061c6:	bf00      	nop
 80061c8:	58024400 	.word	0x58024400
 80061cc:	0801893c 	.word	0x0801893c

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3324      	adds	r3, #36	; 0x24
 80061d4:	2101      	movs	r1, #1
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fcf8 	bl	8006bcc <RCCEx_PLL3_Config>
 80061dc:	4603      	mov	r3, r0
 80061de:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80061e0:	e003      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x10be>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	75fb      	strb	r3, [r7, #23]
      break;
 80061e6:	e000      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x10be>
      break;
 80061e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061ea:	7dfb      	ldrb	r3, [r7, #23]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10a      	bne.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x10da>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061f0:	4b8c      	ldr	r3, [pc, #560]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80061f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061fe:	4989      	ldr	r1, [pc, #548]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006200:	4313      	orrs	r3, r2
 8006202:	654b      	str	r3, [r1, #84]	; 0x54
 8006204:	e001      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x10de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006206:	7dfb      	ldrb	r3, [r7, #23]
 8006208:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d037      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x115a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800621a:	2b00      	cmp	r3, #0
 800621c:	d009      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x1106>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006226:	d004      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x1106>
 8006228:	f240 515e 	movw	r1, #1374	; 0x55e
 800622c:	487e      	ldr	r0, [pc, #504]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 800622e:	f7fa fd48 	bl	8000cc2 <assert_failed>

    switch(PeriphClkInit->SdmmcClockSelection)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800623a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800623e:	d007      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x1124>
 8006240:	e00f      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006242:	4b78      	ldr	r3, [pc, #480]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006246:	4a77      	ldr	r2, [pc, #476]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800624c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800624e:	e00b      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x113c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3304      	adds	r3, #4
 8006254:	2102      	movs	r1, #2
 8006256:	4618      	mov	r0, r3
 8006258:	f000 fb96 	bl	8006988 <RCCEx_PLL2_Config>
 800625c:	4603      	mov	r3, r0
 800625e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006260:	e002      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x113c>

    default:
      ret = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	75fb      	strb	r3, [r7, #23]
      break;
 8006266:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006268:	7dfb      	ldrb	r3, [r7, #23]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d109      	bne.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x1156>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800626e:	4b6d      	ldr	r3, [pc, #436]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006272:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800627a:	496a      	ldr	r1, [pc, #424]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800627c:	4313      	orrs	r3, r2
 800627e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006280:	e001      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x115a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006282:	7dfb      	ldrb	r3, [r7, #23]
 8006284:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00a      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x117c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	3324      	adds	r3, #36	; 0x24
 8006296:	2102      	movs	r1, #2
 8006298:	4618      	mov	r0, r3
 800629a:	f000 fc97 	bl	8006bcc <RCCEx_PLL3_Config>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x117c>
    {
      status=HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d02f      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
  {

    switch(PeriphClkInit->RngClockSelection)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062bc:	d00c      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x11ac>
 80062be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c2:	d802      	bhi.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x119e>
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d011      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x11c0>
 80062c8:	e00d      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
 80062ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ce:	d00f      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x11c4>
 80062d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062d4:	d00e      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80062d6:	e006      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062d8:	4b52      	ldr	r3, [pc, #328]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80062da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062dc:	4a51      	ldr	r2, [pc, #324]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80062de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80062e4:	e007      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	75fb      	strb	r3, [r7, #23]
      break;
 80062ea:	e004      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      break;
 80062ec:	bf00      	nop
 80062ee:	e002      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      break;
 80062f0:	bf00      	nop
 80062f2:	e000      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      break;
 80062f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d109      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x11e4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062fc:	4b49      	ldr	r3, [pc, #292]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80062fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006300:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006308:	4946      	ldr	r1, [pc, #280]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800630a:	4313      	orrs	r3, r2
 800630c:	654b      	str	r3, [r1, #84]	; 0x54
 800630e:	e001      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006310:	7dfb      	ldrb	r3, [r7, #23]
 8006312:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d016      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x1222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006324:	2b00      	cmp	r3, #0
 8006326:	d009      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x1210>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006330:	d004      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x1210>
 8006332:	f240 51bd 	movw	r1, #1469	; 0x5bd
 8006336:	483c      	ldr	r0, [pc, #240]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 8006338:	f7fa fcc3 	bl	8000cc2 <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800633c:	4b39      	ldr	r3, [pc, #228]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800633e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006340:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006348:	4936      	ldr	r1, [pc, #216]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800634a:	4313      	orrs	r3, r2
 800634c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d016      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800635e:	2b00      	cmp	r3, #0
 8006360:	d009      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x124a>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006366:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800636a:	d004      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x124a>
 800636c:	f240 51d1 	movw	r1, #1489	; 0x5d1
 8006370:	482d      	ldr	r0, [pc, #180]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 8006372:	f7fa fca6 	bl	8000cc2 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006376:	4b2b      	ldr	r3, [pc, #172]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006382:	4928      	ldr	r1, [pc, #160]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006384:	4313      	orrs	r3, r2
 8006386:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d01d      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x12a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00a      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1288>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80063a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063a8:	d004      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1288>
 80063aa:	f240 51e7 	movw	r1, #1511	; 0x5e7
 80063ae:	481e      	ldr	r0, [pc, #120]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 80063b0:	f7fa fc87 	bl	8000cc2 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80063b4:	4b1b      	ldr	r3, [pc, #108]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	4a1a      	ldr	r2, [pc, #104]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80063ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063be:	6113      	str	r3, [r2, #16]
 80063c0:	4b18      	ldr	r3, [pc, #96]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80063c2:	691a      	ldr	r2, [r3, #16]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80063ca:	4916      	ldr	r1, [pc, #88]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	da1b      	bge.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x12e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00e      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x12d2>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063e8:	d009      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x12d2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063f2:	d004      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x12d2>
 80063f4:	f240 51f1 	movw	r1, #1521	; 0x5f1
 80063f8:	480b      	ldr	r0, [pc, #44]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 80063fa:	f7fa fc62 	bl	8000cc2 <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80063fe:	4b09      	ldr	r3, [pc, #36]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006402:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800640a:	4906      	ldr	r1, [pc, #24]	; (8006424 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800640c:	4313      	orrs	r3, r2
 800640e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006410:	7dbb      	ldrb	r3, [r7, #22]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x12ee>
  {
    return HAL_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	e000      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x12f0>
  }
  return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
}
 800641c:	4618      	mov	r0, r3
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	58024400 	.word	0x58024400
 8006428:	0801893c 	.word	0x0801893c

0800642c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006430:	f7fe fdde 	bl	8004ff0 <HAL_RCC_GetHCLKFreq>
 8006434:	4601      	mov	r1, r0
 8006436:	4b06      	ldr	r3, [pc, #24]	; (8006450 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	091b      	lsrs	r3, r3, #4
 800643c:	f003 0307 	and.w	r3, r3, #7
 8006440:	4a04      	ldr	r2, [pc, #16]	; (8006454 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006442:	5cd3      	ldrb	r3, [r2, r3]
 8006444:	f003 031f 	and.w	r3, r3, #31
 8006448:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800644c:	4618      	mov	r0, r3
 800644e:	bd80      	pop	{r7, pc}
 8006450:	58024400 	.word	0x58024400
 8006454:	0801a8a0 	.word	0x0801a8a0

08006458 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006458:	b480      	push	{r7}
 800645a:	b089      	sub	sp, #36	; 0x24
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006460:	4b9d      	ldr	r3, [pc, #628]	; (80066d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006464:	f003 0303 	and.w	r3, r3, #3
 8006468:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800646a:	4b9b      	ldr	r3, [pc, #620]	; (80066d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800646c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646e:	0b1b      	lsrs	r3, r3, #12
 8006470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006474:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006476:	4b98      	ldr	r3, [pc, #608]	; (80066d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647a:	091b      	lsrs	r3, r3, #4
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006482:	4b95      	ldr	r3, [pc, #596]	; (80066d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006486:	08db      	lsrs	r3, r3, #3
 8006488:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	fb02 f303 	mul.w	r3, r2, r3
 8006492:	ee07 3a90 	vmov	s15, r3
 8006496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800649a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 810a 	beq.w	80066ba <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d05a      	beq.n	8006562 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d302      	bcc.n	80064b6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d078      	beq.n	80065a6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80064b4:	e099      	b.n	80065ea <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064b6:	4b88      	ldr	r3, [pc, #544]	; (80066d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d02d      	beq.n	800651e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064c2:	4b85      	ldr	r3, [pc, #532]	; (80066d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	08db      	lsrs	r3, r3, #3
 80064c8:	f003 0303 	and.w	r3, r3, #3
 80064cc:	4a83      	ldr	r2, [pc, #524]	; (80066dc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80064ce:	fa22 f303 	lsr.w	r3, r2, r3
 80064d2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	ee07 3a90 	vmov	s15, r3
 80064da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	ee07 3a90 	vmov	s15, r3
 80064e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ec:	4b7a      	ldr	r3, [pc, #488]	; (80066d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80064ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f4:	ee07 3a90 	vmov	s15, r3
 80064f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006500:	eddf 5a77 	vldr	s11, [pc, #476]	; 80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006504:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006508:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800650c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006510:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006518:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800651c:	e087      	b.n	800662e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	ee07 3a90 	vmov	s15, r3
 8006524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006528:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80066e4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800652c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006530:	4b69      	ldr	r3, [pc, #420]	; (80066d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006538:	ee07 3a90 	vmov	s15, r3
 800653c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006540:	ed97 6a03 	vldr	s12, [r7, #12]
 8006544:	eddf 5a66 	vldr	s11, [pc, #408]	; 80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006548:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800654c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006550:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006554:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800655c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006560:	e065      	b.n	800662e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	ee07 3a90 	vmov	s15, r3
 8006568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800656c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80066e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006570:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006574:	4b58      	ldr	r3, [pc, #352]	; (80066d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800657c:	ee07 3a90 	vmov	s15, r3
 8006580:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006584:	ed97 6a03 	vldr	s12, [r7, #12]
 8006588:	eddf 5a55 	vldr	s11, [pc, #340]	; 80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800658c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006590:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006594:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006598:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800659c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065a4:	e043      	b.n	800662e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	ee07 3a90 	vmov	s15, r3
 80065ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80065b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065b8:	4b47      	ldr	r3, [pc, #284]	; (80066d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c0:	ee07 3a90 	vmov	s15, r3
 80065c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80065cc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80065d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065e8:	e021      	b.n	800662e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	ee07 3a90 	vmov	s15, r3
 80065f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80066e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80065f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065fc:	4b36      	ldr	r3, [pc, #216]	; (80066d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80065fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006604:	ee07 3a90 	vmov	s15, r3
 8006608:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800660c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006610:	eddf 5a33 	vldr	s11, [pc, #204]	; 80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006614:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006618:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800661c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006620:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006628:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800662c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800662e:	4b2a      	ldr	r3, [pc, #168]	; (80066d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006632:	0a5b      	lsrs	r3, r3, #9
 8006634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006638:	ee07 3a90 	vmov	s15, r3
 800663c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006640:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006644:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006648:	edd7 6a07 	vldr	s13, [r7, #28]
 800664c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006654:	ee17 2a90 	vmov	r2, s15
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800665c:	4b1e      	ldr	r3, [pc, #120]	; (80066d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800665e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006660:	0c1b      	lsrs	r3, r3, #16
 8006662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006666:	ee07 3a90 	vmov	s15, r3
 800666a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800666e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006672:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006676:	edd7 6a07 	vldr	s13, [r7, #28]
 800667a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800667e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006682:	ee17 2a90 	vmov	r2, s15
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800668a:	4b13      	ldr	r3, [pc, #76]	; (80066d8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800668c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668e:	0e1b      	lsrs	r3, r3, #24
 8006690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006694:	ee07 3a90 	vmov	s15, r3
 8006698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800669c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80066a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066b0:	ee17 2a90 	vmov	r2, s15
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80066b8:	e008      	b.n	80066cc <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	609a      	str	r2, [r3, #8]
}
 80066cc:	bf00      	nop
 80066ce:	3724      	adds	r7, #36	; 0x24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	58024400 	.word	0x58024400
 80066dc:	03d09000 	.word	0x03d09000
 80066e0:	46000000 	.word	0x46000000
 80066e4:	4c742400 	.word	0x4c742400
 80066e8:	4a742400 	.word	0x4a742400
 80066ec:	4af42400 	.word	0x4af42400

080066f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b089      	sub	sp, #36	; 0x24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066f8:	4b9d      	ldr	r3, [pc, #628]	; (8006970 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80066fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fc:	f003 0303 	and.w	r3, r3, #3
 8006700:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006702:	4b9b      	ldr	r3, [pc, #620]	; (8006970 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006706:	0d1b      	lsrs	r3, r3, #20
 8006708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800670c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800670e:	4b98      	ldr	r3, [pc, #608]	; (8006970 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006712:	0a1b      	lsrs	r3, r3, #8
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800671a:	4b95      	ldr	r3, [pc, #596]	; (8006970 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800671c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671e:	08db      	lsrs	r3, r3, #3
 8006720:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	fb02 f303 	mul.w	r3, r2, r3
 800672a:	ee07 3a90 	vmov	s15, r3
 800672e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006732:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 810a 	beq.w	8006952 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d05a      	beq.n	80067fa <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006744:	2b01      	cmp	r3, #1
 8006746:	d302      	bcc.n	800674e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8006748:	2b02      	cmp	r3, #2
 800674a:	d078      	beq.n	800683e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800674c:	e099      	b.n	8006882 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800674e:	4b88      	ldr	r3, [pc, #544]	; (8006970 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0320 	and.w	r3, r3, #32
 8006756:	2b00      	cmp	r3, #0
 8006758:	d02d      	beq.n	80067b6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800675a:	4b85      	ldr	r3, [pc, #532]	; (8006970 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	08db      	lsrs	r3, r3, #3
 8006760:	f003 0303 	and.w	r3, r3, #3
 8006764:	4a83      	ldr	r2, [pc, #524]	; (8006974 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006766:	fa22 f303 	lsr.w	r3, r2, r3
 800676a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	ee07 3a90 	vmov	s15, r3
 8006772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	ee07 3a90 	vmov	s15, r3
 800677c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006780:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006784:	4b7a      	ldr	r3, [pc, #488]	; (8006970 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800678c:	ee07 3a90 	vmov	s15, r3
 8006790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006794:	ed97 6a03 	vldr	s12, [r7, #12]
 8006798:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006978 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800679c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80067b4:	e087      	b.n	80068c6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	ee07 3a90 	vmov	s15, r3
 80067bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067c0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800697c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80067c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067c8:	4b69      	ldr	r3, [pc, #420]	; (8006970 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80067ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d0:	ee07 3a90 	vmov	s15, r3
 80067d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067d8:	ed97 6a03 	vldr	s12, [r7, #12]
 80067dc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006978 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80067e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067f4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067f8:	e065      	b.n	80068c6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	ee07 3a90 	vmov	s15, r3
 8006800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006804:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006980 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006808:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800680c:	4b58      	ldr	r3, [pc, #352]	; (8006970 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800680e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006814:	ee07 3a90 	vmov	s15, r3
 8006818:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800681c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006820:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006978 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006824:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006828:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800682c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006830:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006838:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800683c:	e043      	b.n	80068c6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	ee07 3a90 	vmov	s15, r3
 8006844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006848:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006984 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800684c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006850:	4b47      	ldr	r3, [pc, #284]	; (8006970 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006858:	ee07 3a90 	vmov	s15, r3
 800685c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006860:	ed97 6a03 	vldr	s12, [r7, #12]
 8006864:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006978 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006868:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800686c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006870:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006874:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800687c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006880:	e021      	b.n	80068c6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	ee07 3a90 	vmov	s15, r3
 8006888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800688c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006980 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006890:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006894:	4b36      	ldr	r3, [pc, #216]	; (8006970 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800689c:	ee07 3a90 	vmov	s15, r3
 80068a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80068a8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006978 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80068ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068c4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80068c6:	4b2a      	ldr	r3, [pc, #168]	; (8006970 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	0a5b      	lsrs	r3, r3, #9
 80068cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068d0:	ee07 3a90 	vmov	s15, r3
 80068d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80068e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068ec:	ee17 2a90 	vmov	r2, s15
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80068f4:	4b1e      	ldr	r3, [pc, #120]	; (8006970 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80068f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f8:	0c1b      	lsrs	r3, r3, #16
 80068fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068fe:	ee07 3a90 	vmov	s15, r3
 8006902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006906:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800690a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800690e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800691a:	ee17 2a90 	vmov	r2, s15
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006922:	4b13      	ldr	r3, [pc, #76]	; (8006970 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	0e1b      	lsrs	r3, r3, #24
 8006928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800692c:	ee07 3a90 	vmov	s15, r3
 8006930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006934:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006938:	ee37 7a87 	vadd.f32	s14, s15, s14
 800693c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006948:	ee17 2a90 	vmov	r2, s15
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006950:	e008      	b.n	8006964 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	609a      	str	r2, [r3, #8]
}
 8006964:	bf00      	nop
 8006966:	3724      	adds	r7, #36	; 0x24
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	58024400 	.word	0x58024400
 8006974:	03d09000 	.word	0x03d09000
 8006978:	46000000 	.word	0x46000000
 800697c:	4c742400 	.word	0x4c742400
 8006980:	4a742400 	.word	0x4a742400
 8006984:	4af42400 	.word	0x4af42400

08006988 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d003      	beq.n	80069a6 <RCCEx_PLL2_Config+0x1e>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b3f      	cmp	r3, #63	; 0x3f
 80069a4:	d904      	bls.n	80069b0 <RCCEx_PLL2_Config+0x28>
 80069a6:	f640 417f 	movw	r1, #3199	; 0xc7f
 80069aa:	4885      	ldr	r0, [pc, #532]	; (8006bc0 <RCCEx_PLL2_Config+0x238>)
 80069ac:	f7fa f989 	bl	8000cc2 <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	2b03      	cmp	r3, #3
 80069b6:	d904      	bls.n	80069c2 <RCCEx_PLL2_Config+0x3a>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069c0:	d904      	bls.n	80069cc <RCCEx_PLL2_Config+0x44>
 80069c2:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 80069c6:	487e      	ldr	r0, [pc, #504]	; (8006bc0 <RCCEx_PLL2_Config+0x238>)
 80069c8:	f7fa f97b 	bl	8000cc2 <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d003      	beq.n	80069dc <RCCEx_PLL2_Config+0x54>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	2b80      	cmp	r3, #128	; 0x80
 80069da:	d904      	bls.n	80069e6 <RCCEx_PLL2_Config+0x5e>
 80069dc:	f640 4181 	movw	r1, #3201	; 0xc81
 80069e0:	4877      	ldr	r0, [pc, #476]	; (8006bc0 <RCCEx_PLL2_Config+0x238>)
 80069e2:	f7fa f96e 	bl	8000cc2 <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <RCCEx_PLL2_Config+0x6e>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	2b80      	cmp	r3, #128	; 0x80
 80069f4:	d904      	bls.n	8006a00 <RCCEx_PLL2_Config+0x78>
 80069f6:	f640 4182 	movw	r1, #3202	; 0xc82
 80069fa:	4871      	ldr	r0, [pc, #452]	; (8006bc0 <RCCEx_PLL2_Config+0x238>)
 80069fc:	f7fa f961 	bl	8000cc2 <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d003      	beq.n	8006a10 <RCCEx_PLL2_Config+0x88>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	2b80      	cmp	r3, #128	; 0x80
 8006a0e:	d904      	bls.n	8006a1a <RCCEx_PLL2_Config+0x92>
 8006a10:	f640 4183 	movw	r1, #3203	; 0xc83
 8006a14:	486a      	ldr	r0, [pc, #424]	; (8006bc0 <RCCEx_PLL2_Config+0x238>)
 8006a16:	f7fa f954 	bl	8000cc2 <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d010      	beq.n	8006a44 <RCCEx_PLL2_Config+0xbc>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	2b40      	cmp	r3, #64	; 0x40
 8006a28:	d00c      	beq.n	8006a44 <RCCEx_PLL2_Config+0xbc>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	2b80      	cmp	r3, #128	; 0x80
 8006a30:	d008      	beq.n	8006a44 <RCCEx_PLL2_Config+0xbc>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	2bc0      	cmp	r3, #192	; 0xc0
 8006a38:	d004      	beq.n	8006a44 <RCCEx_PLL2_Config+0xbc>
 8006a3a:	f640 4184 	movw	r1, #3204	; 0xc84
 8006a3e:	4860      	ldr	r0, [pc, #384]	; (8006bc0 <RCCEx_PLL2_Config+0x238>)
 8006a40:	f7fa f93f 	bl	8000cc2 <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d008      	beq.n	8006a5e <RCCEx_PLL2_Config+0xd6>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	2b20      	cmp	r3, #32
 8006a52:	d004      	beq.n	8006a5e <RCCEx_PLL2_Config+0xd6>
 8006a54:	f640 4185 	movw	r1, #3205	; 0xc85
 8006a58:	4859      	ldr	r0, [pc, #356]	; (8006bc0 <RCCEx_PLL2_Config+0x238>)
 8006a5a:	f7fa f932 	bl	8000cc2 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a66:	d304      	bcc.n	8006a72 <RCCEx_PLL2_Config+0xea>
 8006a68:	f640 4186 	movw	r1, #3206	; 0xc86
 8006a6c:	4854      	ldr	r0, [pc, #336]	; (8006bc0 <RCCEx_PLL2_Config+0x238>)
 8006a6e:	f7fa f928 	bl	8000cc2 <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a72:	4b54      	ldr	r3, [pc, #336]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	d101      	bne.n	8006a82 <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e099      	b.n	8006bb6 <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006a82:	4b50      	ldr	r3, [pc, #320]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a4f      	ldr	r2, [pc, #316]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006a88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a8e:	f7fa fd31 	bl	80014f4 <HAL_GetTick>
 8006a92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a94:	e008      	b.n	8006aa8 <RCCEx_PLL2_Config+0x120>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006a96:	f7fa fd2d 	bl	80014f4 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d901      	bls.n	8006aa8 <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e086      	b.n	8006bb6 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006aa8:	4b46      	ldr	r3, [pc, #280]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1f0      	bne.n	8006a96 <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006ab4:	4b43      	ldr	r3, [pc, #268]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	031b      	lsls	r3, r3, #12
 8006ac2:	4940      	ldr	r1, [pc, #256]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	628b      	str	r3, [r1, #40]	; 0x28
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	3b01      	subs	r3, #1
 8006ace:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	025b      	lsls	r3, r3, #9
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	431a      	orrs	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	041b      	lsls	r3, r3, #16
 8006ae6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006aea:	431a      	orrs	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	061b      	lsls	r3, r3, #24
 8006af4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006af8:	4932      	ldr	r1, [pc, #200]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006afe:	4b31      	ldr	r3, [pc, #196]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	492e      	ldr	r1, [pc, #184]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006b10:	4b2c      	ldr	r3, [pc, #176]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b14:	f023 0220 	bic.w	r2, r3, #32
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	4929      	ldr	r1, [pc, #164]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006b22:	4b28      	ldr	r3, [pc, #160]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b26:	4a27      	ldr	r2, [pc, #156]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006b28:	f023 0310 	bic.w	r3, r3, #16
 8006b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006b2e:	4b25      	ldr	r3, [pc, #148]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b32:	4b25      	ldr	r3, [pc, #148]	; (8006bc8 <RCCEx_PLL2_Config+0x240>)
 8006b34:	4013      	ands	r3, r2
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	69d2      	ldr	r2, [r2, #28]
 8006b3a:	00d2      	lsls	r2, r2, #3
 8006b3c:	4921      	ldr	r1, [pc, #132]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006b42:	4b20      	ldr	r3, [pc, #128]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b46:	4a1f      	ldr	r2, [pc, #124]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006b48:	f043 0310 	orr.w	r3, r3, #16
 8006b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d106      	bne.n	8006b62 <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006b54:	4b1b      	ldr	r3, [pc, #108]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b58:	4a1a      	ldr	r2, [pc, #104]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006b5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b60:	e00f      	b.n	8006b82 <RCCEx_PLL2_Config+0x1fa>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d106      	bne.n	8006b76 <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006b68:	4b16      	ldr	r3, [pc, #88]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6c:	4a15      	ldr	r2, [pc, #84]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006b6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b74:	e005      	b.n	8006b82 <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006b76:	4b13      	ldr	r3, [pc, #76]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7a:	4a12      	ldr	r2, [pc, #72]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006b7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006b82:	4b10      	ldr	r3, [pc, #64]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a0f      	ldr	r2, [pc, #60]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006b88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b8e:	f7fa fcb1 	bl	80014f4 <HAL_GetTick>
 8006b92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006b94:	e008      	b.n	8006ba8 <RCCEx_PLL2_Config+0x220>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006b96:	f7fa fcad 	bl	80014f4 <HAL_GetTick>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d901      	bls.n	8006ba8 <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e006      	b.n	8006bb6 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ba8:	4b06      	ldr	r3, [pc, #24]	; (8006bc4 <RCCEx_PLL2_Config+0x23c>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d0f0      	beq.n	8006b96 <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	0801893c 	.word	0x0801893c
 8006bc4:	58024400 	.word	0x58024400
 8006bc8:	ffff0007 	.word	0xffff0007

08006bcc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <RCCEx_PLL3_Config+0x1e>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b3f      	cmp	r3, #63	; 0x3f
 8006be8:	d904      	bls.n	8006bf4 <RCCEx_PLL3_Config+0x28>
 8006bea:	f640 41e7 	movw	r1, #3303	; 0xce7
 8006bee:	4887      	ldr	r0, [pc, #540]	; (8006e0c <RCCEx_PLL3_Config+0x240>)
 8006bf0:	f7fa f867 	bl	8000cc2 <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d904      	bls.n	8006c06 <RCCEx_PLL3_Config+0x3a>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c04:	d904      	bls.n	8006c10 <RCCEx_PLL3_Config+0x44>
 8006c06:	f640 41e8 	movw	r1, #3304	; 0xce8
 8006c0a:	4880      	ldr	r0, [pc, #512]	; (8006e0c <RCCEx_PLL3_Config+0x240>)
 8006c0c:	f7fa f859 	bl	8000cc2 <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d003      	beq.n	8006c20 <RCCEx_PLL3_Config+0x54>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	2b80      	cmp	r3, #128	; 0x80
 8006c1e:	d904      	bls.n	8006c2a <RCCEx_PLL3_Config+0x5e>
 8006c20:	f640 41e9 	movw	r1, #3305	; 0xce9
 8006c24:	4879      	ldr	r0, [pc, #484]	; (8006e0c <RCCEx_PLL3_Config+0x240>)
 8006c26:	f7fa f84c 	bl	8000cc2 <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <RCCEx_PLL3_Config+0x6e>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	2b80      	cmp	r3, #128	; 0x80
 8006c38:	d904      	bls.n	8006c44 <RCCEx_PLL3_Config+0x78>
 8006c3a:	f640 41ea 	movw	r1, #3306	; 0xcea
 8006c3e:	4873      	ldr	r0, [pc, #460]	; (8006e0c <RCCEx_PLL3_Config+0x240>)
 8006c40:	f7fa f83f 	bl	8000cc2 <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <RCCEx_PLL3_Config+0x88>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	2b80      	cmp	r3, #128	; 0x80
 8006c52:	d904      	bls.n	8006c5e <RCCEx_PLL3_Config+0x92>
 8006c54:	f640 41eb 	movw	r1, #3307	; 0xceb
 8006c58:	486c      	ldr	r0, [pc, #432]	; (8006e0c <RCCEx_PLL3_Config+0x240>)
 8006c5a:	f7fa f832 	bl	8000cc2 <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d013      	beq.n	8006c8e <RCCEx_PLL3_Config+0xc2>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c6e:	d00e      	beq.n	8006c8e <RCCEx_PLL3_Config+0xc2>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c78:	d009      	beq.n	8006c8e <RCCEx_PLL3_Config+0xc2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c82:	d004      	beq.n	8006c8e <RCCEx_PLL3_Config+0xc2>
 8006c84:	f640 41ec 	movw	r1, #3308	; 0xcec
 8006c88:	4860      	ldr	r0, [pc, #384]	; (8006e0c <RCCEx_PLL3_Config+0x240>)
 8006c8a:	f7fa f81a 	bl	8000cc2 <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d009      	beq.n	8006caa <RCCEx_PLL3_Config+0xde>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c9e:	d004      	beq.n	8006caa <RCCEx_PLL3_Config+0xde>
 8006ca0:	f640 41ed 	movw	r1, #3309	; 0xced
 8006ca4:	4859      	ldr	r0, [pc, #356]	; (8006e0c <RCCEx_PLL3_Config+0x240>)
 8006ca6:	f7fa f80c 	bl	8000cc2 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb2:	d304      	bcc.n	8006cbe <RCCEx_PLL3_Config+0xf2>
 8006cb4:	f640 41ee 	movw	r1, #3310	; 0xcee
 8006cb8:	4854      	ldr	r0, [pc, #336]	; (8006e0c <RCCEx_PLL3_Config+0x240>)
 8006cba:	f7fa f802 	bl	8000cc2 <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006cbe:	4b54      	ldr	r3, [pc, #336]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc2:	f003 0303 	and.w	r3, r3, #3
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	d101      	bne.n	8006cce <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e099      	b.n	8006e02 <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006cce:	4b50      	ldr	r3, [pc, #320]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a4f      	ldr	r2, [pc, #316]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cda:	f7fa fc0b 	bl	80014f4 <HAL_GetTick>
 8006cde:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ce0:	e008      	b.n	8006cf4 <RCCEx_PLL3_Config+0x128>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006ce2:	f7fa fc07 	bl	80014f4 <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d901      	bls.n	8006cf4 <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e086      	b.n	8006e02 <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006cf4:	4b46      	ldr	r3, [pc, #280]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1f0      	bne.n	8006ce2 <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006d00:	4b43      	ldr	r3, [pc, #268]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d04:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	051b      	lsls	r3, r3, #20
 8006d0e:	4940      	ldr	r1, [pc, #256]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	628b      	str	r3, [r1, #40]	; 0x28
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	3b01      	subs	r3, #1
 8006d24:	025b      	lsls	r3, r3, #9
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	041b      	lsls	r3, r3, #16
 8006d32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d36:	431a      	orrs	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	061b      	lsls	r3, r3, #24
 8006d40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d44:	4932      	ldr	r1, [pc, #200]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006d4a:	4b31      	ldr	r3, [pc, #196]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	492e      	ldr	r1, [pc, #184]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006d5c:	4b2c      	ldr	r3, [pc, #176]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d60:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	4929      	ldr	r1, [pc, #164]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006d6e:	4b28      	ldr	r3, [pc, #160]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d72:	4a27      	ldr	r2, [pc, #156]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006d7a:	4b25      	ldr	r3, [pc, #148]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d7e:	4b25      	ldr	r3, [pc, #148]	; (8006e14 <RCCEx_PLL3_Config+0x248>)
 8006d80:	4013      	ands	r3, r2
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	69d2      	ldr	r2, [r2, #28]
 8006d86:	00d2      	lsls	r2, r2, #3
 8006d88:	4921      	ldr	r1, [pc, #132]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006d8e:	4b20      	ldr	r3, [pc, #128]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d92:	4a1f      	ldr	r2, [pc, #124]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d106      	bne.n	8006dae <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006da0:	4b1b      	ldr	r3, [pc, #108]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	4a1a      	ldr	r2, [pc, #104]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006da6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006daa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006dac:	e00f      	b.n	8006dce <RCCEx_PLL3_Config+0x202>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d106      	bne.n	8006dc2 <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006db4:	4b16      	ldr	r3, [pc, #88]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db8:	4a15      	ldr	r2, [pc, #84]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006dba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006dbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006dc0:	e005      	b.n	8006dce <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006dc2:	4b13      	ldr	r3, [pc, #76]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc6:	4a12      	ldr	r2, [pc, #72]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006dc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dcc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006dce:	4b10      	ldr	r3, [pc, #64]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a0f      	ldr	r2, [pc, #60]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dda:	f7fa fb8b 	bl	80014f4 <HAL_GetTick>
 8006dde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006de0:	e008      	b.n	8006df4 <RCCEx_PLL3_Config+0x228>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006de2:	f7fa fb87 	bl	80014f4 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d901      	bls.n	8006df4 <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e006      	b.n	8006e02 <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006df4:	4b06      	ldr	r3, [pc, #24]	; (8006e10 <RCCEx_PLL3_Config+0x244>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d0f0      	beq.n	8006de2 <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	0801893c 	.word	0x0801893c
 8006e10:	58024400 	.word	0x58024400
 8006e14:	ffff0007 	.word	0xffff0007

08006e18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e0a1      	b.n	8006f6e <HAL_TIM_Base_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a52      	ldr	r2, [pc, #328]	; (8006f78 <HAL_TIM_Base_Init+0x160>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d045      	beq.n	8006ec0 <HAL_TIM_Base_Init+0xa8>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e3c:	d040      	beq.n	8006ec0 <HAL_TIM_Base_Init+0xa8>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a4e      	ldr	r2, [pc, #312]	; (8006f7c <HAL_TIM_Base_Init+0x164>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d03b      	beq.n	8006ec0 <HAL_TIM_Base_Init+0xa8>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a4c      	ldr	r2, [pc, #304]	; (8006f80 <HAL_TIM_Base_Init+0x168>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d036      	beq.n	8006ec0 <HAL_TIM_Base_Init+0xa8>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a4b      	ldr	r2, [pc, #300]	; (8006f84 <HAL_TIM_Base_Init+0x16c>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d031      	beq.n	8006ec0 <HAL_TIM_Base_Init+0xa8>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a49      	ldr	r2, [pc, #292]	; (8006f88 <HAL_TIM_Base_Init+0x170>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d02c      	beq.n	8006ec0 <HAL_TIM_Base_Init+0xa8>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a48      	ldr	r2, [pc, #288]	; (8006f8c <HAL_TIM_Base_Init+0x174>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d027      	beq.n	8006ec0 <HAL_TIM_Base_Init+0xa8>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a46      	ldr	r2, [pc, #280]	; (8006f90 <HAL_TIM_Base_Init+0x178>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d022      	beq.n	8006ec0 <HAL_TIM_Base_Init+0xa8>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a45      	ldr	r2, [pc, #276]	; (8006f94 <HAL_TIM_Base_Init+0x17c>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d01d      	beq.n	8006ec0 <HAL_TIM_Base_Init+0xa8>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a43      	ldr	r2, [pc, #268]	; (8006f98 <HAL_TIM_Base_Init+0x180>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d018      	beq.n	8006ec0 <HAL_TIM_Base_Init+0xa8>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a42      	ldr	r2, [pc, #264]	; (8006f9c <HAL_TIM_Base_Init+0x184>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d013      	beq.n	8006ec0 <HAL_TIM_Base_Init+0xa8>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a40      	ldr	r2, [pc, #256]	; (8006fa0 <HAL_TIM_Base_Init+0x188>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d00e      	beq.n	8006ec0 <HAL_TIM_Base_Init+0xa8>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a3f      	ldr	r2, [pc, #252]	; (8006fa4 <HAL_TIM_Base_Init+0x18c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d009      	beq.n	8006ec0 <HAL_TIM_Base_Init+0xa8>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a3d      	ldr	r2, [pc, #244]	; (8006fa8 <HAL_TIM_Base_Init+0x190>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d004      	beq.n	8006ec0 <HAL_TIM_Base_Init+0xa8>
 8006eb6:	f240 1115 	movw	r1, #277	; 0x115
 8006eba:	483c      	ldr	r0, [pc, #240]	; (8006fac <HAL_TIM_Base_Init+0x194>)
 8006ebc:	f7f9 ff01 	bl	8000cc2 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d014      	beq.n	8006ef2 <HAL_TIM_Base_Init+0xda>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	2b10      	cmp	r3, #16
 8006ece:	d010      	beq.n	8006ef2 <HAL_TIM_Base_Init+0xda>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	2b20      	cmp	r3, #32
 8006ed6:	d00c      	beq.n	8006ef2 <HAL_TIM_Base_Init+0xda>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	2b40      	cmp	r3, #64	; 0x40
 8006ede:	d008      	beq.n	8006ef2 <HAL_TIM_Base_Init+0xda>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	2b60      	cmp	r3, #96	; 0x60
 8006ee6:	d004      	beq.n	8006ef2 <HAL_TIM_Base_Init+0xda>
 8006ee8:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006eec:	482f      	ldr	r0, [pc, #188]	; (8006fac <HAL_TIM_Base_Init+0x194>)
 8006eee:	f7f9 fee8 	bl	8000cc2 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00e      	beq.n	8006f18 <HAL_TIM_Base_Init+0x100>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f02:	d009      	beq.n	8006f18 <HAL_TIM_Base_Init+0x100>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f0c:	d004      	beq.n	8006f18 <HAL_TIM_Base_Init+0x100>
 8006f0e:	f240 1117 	movw	r1, #279	; 0x117
 8006f12:	4826      	ldr	r0, [pc, #152]	; (8006fac <HAL_TIM_Base_Init+0x194>)
 8006f14:	f7f9 fed5 	bl	8000cc2 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d008      	beq.n	8006f32 <HAL_TIM_Base_Init+0x11a>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	2b80      	cmp	r3, #128	; 0x80
 8006f26:	d004      	beq.n	8006f32 <HAL_TIM_Base_Init+0x11a>
 8006f28:	f44f 718c 	mov.w	r1, #280	; 0x118
 8006f2c:	481f      	ldr	r0, [pc, #124]	; (8006fac <HAL_TIM_Base_Init+0x194>)
 8006f2e:	f7f9 fec8 	bl	8000cc2 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d106      	bne.n	8006f4c <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f832 	bl	8006fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3304      	adds	r3, #4
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	4610      	mov	r0, r2
 8006f60:	f000 fa08 	bl	8007374 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	40010000 	.word	0x40010000
 8006f7c:	40000400 	.word	0x40000400
 8006f80:	40000800 	.word	0x40000800
 8006f84:	40000c00 	.word	0x40000c00
 8006f88:	40001000 	.word	0x40001000
 8006f8c:	40001400 	.word	0x40001400
 8006f90:	40010400 	.word	0x40010400
 8006f94:	40001800 	.word	0x40001800
 8006f98:	40001c00 	.word	0x40001c00
 8006f9c:	40002000 	.word	0x40002000
 8006fa0:	40014000 	.word	0x40014000
 8006fa4:	40014400 	.word	0x40014400
 8006fa8:	40014800 	.word	0x40014800
 8006fac:	08018978 	.word	0x08018978

08006fb0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a35      	ldr	r2, [pc, #212]	; (80070a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d045      	beq.n	8007062 <HAL_TIM_Base_Start_IT+0x9e>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fde:	d040      	beq.n	8007062 <HAL_TIM_Base_Start_IT+0x9e>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a31      	ldr	r2, [pc, #196]	; (80070ac <HAL_TIM_Base_Start_IT+0xe8>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d03b      	beq.n	8007062 <HAL_TIM_Base_Start_IT+0x9e>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a30      	ldr	r2, [pc, #192]	; (80070b0 <HAL_TIM_Base_Start_IT+0xec>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d036      	beq.n	8007062 <HAL_TIM_Base_Start_IT+0x9e>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a2e      	ldr	r2, [pc, #184]	; (80070b4 <HAL_TIM_Base_Start_IT+0xf0>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d031      	beq.n	8007062 <HAL_TIM_Base_Start_IT+0x9e>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a2d      	ldr	r2, [pc, #180]	; (80070b8 <HAL_TIM_Base_Start_IT+0xf4>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d02c      	beq.n	8007062 <HAL_TIM_Base_Start_IT+0x9e>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a2b      	ldr	r2, [pc, #172]	; (80070bc <HAL_TIM_Base_Start_IT+0xf8>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d027      	beq.n	8007062 <HAL_TIM_Base_Start_IT+0x9e>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a2a      	ldr	r2, [pc, #168]	; (80070c0 <HAL_TIM_Base_Start_IT+0xfc>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d022      	beq.n	8007062 <HAL_TIM_Base_Start_IT+0x9e>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a28      	ldr	r2, [pc, #160]	; (80070c4 <HAL_TIM_Base_Start_IT+0x100>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d01d      	beq.n	8007062 <HAL_TIM_Base_Start_IT+0x9e>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a27      	ldr	r2, [pc, #156]	; (80070c8 <HAL_TIM_Base_Start_IT+0x104>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d018      	beq.n	8007062 <HAL_TIM_Base_Start_IT+0x9e>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a25      	ldr	r2, [pc, #148]	; (80070cc <HAL_TIM_Base_Start_IT+0x108>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d013      	beq.n	8007062 <HAL_TIM_Base_Start_IT+0x9e>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a24      	ldr	r2, [pc, #144]	; (80070d0 <HAL_TIM_Base_Start_IT+0x10c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d00e      	beq.n	8007062 <HAL_TIM_Base_Start_IT+0x9e>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a22      	ldr	r2, [pc, #136]	; (80070d4 <HAL_TIM_Base_Start_IT+0x110>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d009      	beq.n	8007062 <HAL_TIM_Base_Start_IT+0x9e>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a21      	ldr	r2, [pc, #132]	; (80070d8 <HAL_TIM_Base_Start_IT+0x114>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d004      	beq.n	8007062 <HAL_TIM_Base_Start_IT+0x9e>
 8007058:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800705c:	481f      	ldr	r0, [pc, #124]	; (80070dc <HAL_TIM_Base_Start_IT+0x118>)
 800705e:	f7f9 fe30 	bl	8000cc2 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f042 0201 	orr.w	r2, r2, #1
 8007070:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	4b19      	ldr	r3, [pc, #100]	; (80070e0 <HAL_TIM_Base_Start_IT+0x11c>)
 800707a:	4013      	ands	r3, r2
 800707c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2b06      	cmp	r3, #6
 8007082:	d00b      	beq.n	800709c <HAL_TIM_Base_Start_IT+0xd8>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800708a:	d007      	beq.n	800709c <HAL_TIM_Base_Start_IT+0xd8>
  {
    __HAL_TIM_ENABLE(htim);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0201 	orr.w	r2, r2, #1
 800709a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	40010000 	.word	0x40010000
 80070ac:	40000400 	.word	0x40000400
 80070b0:	40000800 	.word	0x40000800
 80070b4:	40000c00 	.word	0x40000c00
 80070b8:	40001000 	.word	0x40001000
 80070bc:	40001400 	.word	0x40001400
 80070c0:	40010400 	.word	0x40010400
 80070c4:	40001800 	.word	0x40001800
 80070c8:	40001c00 	.word	0x40001c00
 80070cc:	40002000 	.word	0x40002000
 80070d0:	40014000 	.word	0x40014000
 80070d4:	40014400 	.word	0x40014400
 80070d8:	40014800 	.word	0x40014800
 80070dc:	08018978 	.word	0x08018978
 80070e0:	00010007 	.word	0x00010007

080070e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d122      	bne.n	8007140 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	f003 0302 	and.w	r3, r3, #2
 8007104:	2b02      	cmp	r3, #2
 8007106:	d11b      	bne.n	8007140 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f06f 0202 	mvn.w	r2, #2
 8007110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	699b      	ldr	r3, [r3, #24]
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d003      	beq.n	800712e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f905 	bl	8007336 <HAL_TIM_IC_CaptureCallback>
 800712c:	e005      	b.n	800713a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f8f7 	bl	8007322 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f908 	bl	800734a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	f003 0304 	and.w	r3, r3, #4
 800714a:	2b04      	cmp	r3, #4
 800714c:	d122      	bne.n	8007194 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f003 0304 	and.w	r3, r3, #4
 8007158:	2b04      	cmp	r3, #4
 800715a:	d11b      	bne.n	8007194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f06f 0204 	mvn.w	r2, #4
 8007164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2202      	movs	r2, #2
 800716a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007176:	2b00      	cmp	r3, #0
 8007178:	d003      	beq.n	8007182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f8db 	bl	8007336 <HAL_TIM_IC_CaptureCallback>
 8007180:	e005      	b.n	800718e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f8cd 	bl	8007322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f8de 	bl	800734a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	f003 0308 	and.w	r3, r3, #8
 800719e:	2b08      	cmp	r3, #8
 80071a0:	d122      	bne.n	80071e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	f003 0308 	and.w	r3, r3, #8
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	d11b      	bne.n	80071e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f06f 0208 	mvn.w	r2, #8
 80071b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2204      	movs	r2, #4
 80071be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	f003 0303 	and.w	r3, r3, #3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f8b1 	bl	8007336 <HAL_TIM_IC_CaptureCallback>
 80071d4:	e005      	b.n	80071e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f8a3 	bl	8007322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f8b4 	bl	800734a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	f003 0310 	and.w	r3, r3, #16
 80071f2:	2b10      	cmp	r3, #16
 80071f4:	d122      	bne.n	800723c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	f003 0310 	and.w	r3, r3, #16
 8007200:	2b10      	cmp	r3, #16
 8007202:	d11b      	bne.n	800723c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f06f 0210 	mvn.w	r2, #16
 800720c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2208      	movs	r2, #8
 8007212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	69db      	ldr	r3, [r3, #28]
 800721a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f887 	bl	8007336 <HAL_TIM_IC_CaptureCallback>
 8007228:	e005      	b.n	8007236 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f879 	bl	8007322 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f88a 	bl	800734a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b01      	cmp	r3, #1
 8007248:	d10e      	bne.n	8007268 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f003 0301 	and.w	r3, r3, #1
 8007254:	2b01      	cmp	r3, #1
 8007256:	d107      	bne.n	8007268 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f06f 0201 	mvn.w	r2, #1
 8007260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7f9 fd14 	bl	8000c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007272:	2b80      	cmp	r3, #128	; 0x80
 8007274:	d10e      	bne.n	8007294 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007280:	2b80      	cmp	r3, #128	; 0x80
 8007282:	d107      	bne.n	8007294 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800728c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f914 	bl	80074bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800729e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072a2:	d10e      	bne.n	80072c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ae:	2b80      	cmp	r3, #128	; 0x80
 80072b0:	d107      	bne.n	80072c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80072ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f907 	bl	80074d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072cc:	2b40      	cmp	r3, #64	; 0x40
 80072ce:	d10e      	bne.n	80072ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072da:	2b40      	cmp	r3, #64	; 0x40
 80072dc:	d107      	bne.n	80072ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f838 	bl	800735e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	f003 0320 	and.w	r3, r3, #32
 80072f8:	2b20      	cmp	r3, #32
 80072fa:	d10e      	bne.n	800731a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	f003 0320 	and.w	r3, r3, #32
 8007306:	2b20      	cmp	r3, #32
 8007308:	d107      	bne.n	800731a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f06f 0220 	mvn.w	r2, #32
 8007312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f8c7 	bl	80074a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800731a:	bf00      	nop
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007322:	b480      	push	{r7}
 8007324:	b083      	sub	sp, #12
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800732a:	bf00      	nop
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007352:	bf00      	nop
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800735e:	b480      	push	{r7}
 8007360:	b083      	sub	sp, #12
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007366:	bf00      	nop
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
	...

08007374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a40      	ldr	r2, [pc, #256]	; (8007488 <TIM_Base_SetConfig+0x114>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d013      	beq.n	80073b4 <TIM_Base_SetConfig+0x40>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007392:	d00f      	beq.n	80073b4 <TIM_Base_SetConfig+0x40>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a3d      	ldr	r2, [pc, #244]	; (800748c <TIM_Base_SetConfig+0x118>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d00b      	beq.n	80073b4 <TIM_Base_SetConfig+0x40>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a3c      	ldr	r2, [pc, #240]	; (8007490 <TIM_Base_SetConfig+0x11c>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d007      	beq.n	80073b4 <TIM_Base_SetConfig+0x40>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a3b      	ldr	r2, [pc, #236]	; (8007494 <TIM_Base_SetConfig+0x120>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d003      	beq.n	80073b4 <TIM_Base_SetConfig+0x40>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a3a      	ldr	r2, [pc, #232]	; (8007498 <TIM_Base_SetConfig+0x124>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d108      	bne.n	80073c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a2f      	ldr	r2, [pc, #188]	; (8007488 <TIM_Base_SetConfig+0x114>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d01f      	beq.n	800740e <TIM_Base_SetConfig+0x9a>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d4:	d01b      	beq.n	800740e <TIM_Base_SetConfig+0x9a>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a2c      	ldr	r2, [pc, #176]	; (800748c <TIM_Base_SetConfig+0x118>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d017      	beq.n	800740e <TIM_Base_SetConfig+0x9a>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a2b      	ldr	r2, [pc, #172]	; (8007490 <TIM_Base_SetConfig+0x11c>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d013      	beq.n	800740e <TIM_Base_SetConfig+0x9a>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a2a      	ldr	r2, [pc, #168]	; (8007494 <TIM_Base_SetConfig+0x120>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d00f      	beq.n	800740e <TIM_Base_SetConfig+0x9a>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a29      	ldr	r2, [pc, #164]	; (8007498 <TIM_Base_SetConfig+0x124>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d00b      	beq.n	800740e <TIM_Base_SetConfig+0x9a>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a28      	ldr	r2, [pc, #160]	; (800749c <TIM_Base_SetConfig+0x128>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d007      	beq.n	800740e <TIM_Base_SetConfig+0x9a>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a27      	ldr	r2, [pc, #156]	; (80074a0 <TIM_Base_SetConfig+0x12c>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d003      	beq.n	800740e <TIM_Base_SetConfig+0x9a>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a26      	ldr	r2, [pc, #152]	; (80074a4 <TIM_Base_SetConfig+0x130>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d108      	bne.n	8007420 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	4313      	orrs	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a10      	ldr	r2, [pc, #64]	; (8007488 <TIM_Base_SetConfig+0x114>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d00f      	beq.n	800746c <TIM_Base_SetConfig+0xf8>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a12      	ldr	r2, [pc, #72]	; (8007498 <TIM_Base_SetConfig+0x124>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d00b      	beq.n	800746c <TIM_Base_SetConfig+0xf8>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a11      	ldr	r2, [pc, #68]	; (800749c <TIM_Base_SetConfig+0x128>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d007      	beq.n	800746c <TIM_Base_SetConfig+0xf8>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a10      	ldr	r2, [pc, #64]	; (80074a0 <TIM_Base_SetConfig+0x12c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d003      	beq.n	800746c <TIM_Base_SetConfig+0xf8>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a0f      	ldr	r2, [pc, #60]	; (80074a4 <TIM_Base_SetConfig+0x130>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d103      	bne.n	8007474 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	691a      	ldr	r2, [r3, #16]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	615a      	str	r2, [r3, #20]
}
 800747a:	bf00      	nop
 800747c:	3714      	adds	r7, #20
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	40010000 	.word	0x40010000
 800748c:	40000400 	.word	0x40000400
 8007490:	40000800 	.word	0x40000800
 8007494:	40000c00 	.word	0x40000c00
 8007498:	40010400 	.word	0x40010400
 800749c:	40014000 	.word	0x40014000
 80074a0:	40014400 	.word	0x40014400
 80074a4:	40014800 	.word	0x40014800

080074a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e0ab      	b.n	800764e <HAL_UART_Init+0x16a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d032      	beq.n	8007564 <HAL_UART_Init+0x80>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a55      	ldr	r2, [pc, #340]	; (8007658 <HAL_UART_Init+0x174>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d05f      	beq.n	80075c8 <HAL_UART_Init+0xe4>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a53      	ldr	r2, [pc, #332]	; (800765c <HAL_UART_Init+0x178>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d05a      	beq.n	80075c8 <HAL_UART_Init+0xe4>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a52      	ldr	r2, [pc, #328]	; (8007660 <HAL_UART_Init+0x17c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d055      	beq.n	80075c8 <HAL_UART_Init+0xe4>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a50      	ldr	r2, [pc, #320]	; (8007664 <HAL_UART_Init+0x180>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d050      	beq.n	80075c8 <HAL_UART_Init+0xe4>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a4f      	ldr	r2, [pc, #316]	; (8007668 <HAL_UART_Init+0x184>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d04b      	beq.n	80075c8 <HAL_UART_Init+0xe4>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a4d      	ldr	r2, [pc, #308]	; (800766c <HAL_UART_Init+0x188>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d046      	beq.n	80075c8 <HAL_UART_Init+0xe4>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a4c      	ldr	r2, [pc, #304]	; (8007670 <HAL_UART_Init+0x18c>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d041      	beq.n	80075c8 <HAL_UART_Init+0xe4>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a4a      	ldr	r2, [pc, #296]	; (8007674 <HAL_UART_Init+0x190>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d03c      	beq.n	80075c8 <HAL_UART_Init+0xe4>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a49      	ldr	r2, [pc, #292]	; (8007678 <HAL_UART_Init+0x194>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d037      	beq.n	80075c8 <HAL_UART_Init+0xe4>
 8007558:	f44f 7199 	mov.w	r1, #306	; 0x132
 800755c:	4847      	ldr	r0, [pc, #284]	; (800767c <HAL_UART_Init+0x198>)
 800755e:	f7f9 fbb0 	bl	8000cc2 <assert_failed>
 8007562:	e031      	b.n	80075c8 <HAL_UART_Init+0xe4>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a3b      	ldr	r2, [pc, #236]	; (8007658 <HAL_UART_Init+0x174>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d02c      	beq.n	80075c8 <HAL_UART_Init+0xe4>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a3a      	ldr	r2, [pc, #232]	; (800765c <HAL_UART_Init+0x178>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d027      	beq.n	80075c8 <HAL_UART_Init+0xe4>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a38      	ldr	r2, [pc, #224]	; (8007660 <HAL_UART_Init+0x17c>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d022      	beq.n	80075c8 <HAL_UART_Init+0xe4>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a37      	ldr	r2, [pc, #220]	; (8007664 <HAL_UART_Init+0x180>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d01d      	beq.n	80075c8 <HAL_UART_Init+0xe4>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a35      	ldr	r2, [pc, #212]	; (8007668 <HAL_UART_Init+0x184>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d018      	beq.n	80075c8 <HAL_UART_Init+0xe4>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a34      	ldr	r2, [pc, #208]	; (800766c <HAL_UART_Init+0x188>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d013      	beq.n	80075c8 <HAL_UART_Init+0xe4>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a32      	ldr	r2, [pc, #200]	; (8007670 <HAL_UART_Init+0x18c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d00e      	beq.n	80075c8 <HAL_UART_Init+0xe4>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a31      	ldr	r2, [pc, #196]	; (8007674 <HAL_UART_Init+0x190>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d009      	beq.n	80075c8 <HAL_UART_Init+0xe4>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a2f      	ldr	r2, [pc, #188]	; (8007678 <HAL_UART_Init+0x194>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d004      	beq.n	80075c8 <HAL_UART_Init+0xe4>
 80075be:	f240 1137 	movw	r1, #311	; 0x137
 80075c2:	482e      	ldr	r0, [pc, #184]	; (800767c <HAL_UART_Init+0x198>)
 80075c4:	f7f9 fb7d 	bl	8000cc2 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d106      	bne.n	80075e0 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7f9 fd66 	bl	80010ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2224      	movs	r2, #36	; 0x24
 80075e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 0201 	bic.w	r2, r2, #1
 80075f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 f841 	bl	8007680 <UART_SetConfig>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b01      	cmp	r3, #1
 8007602:	d101      	bne.n	8007608 <HAL_UART_Init+0x124>
  {
    return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e022      	b.n	800764e <HAL_UART_Init+0x16a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760c:	2b00      	cmp	r3, #0
 800760e:	d002      	beq.n	8007616 <HAL_UART_Init+0x132>
  {
    UART_AdvFeatureConfig(huart);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f002 fa93 	bl	8009b3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007624:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689a      	ldr	r2, [r3, #8]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007634:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f042 0201 	orr.w	r2, r2, #1
 8007644:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f002 fbee 	bl	8009e28 <UART_CheckIdleState>
 800764c:	4603      	mov	r3, r0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	40011000 	.word	0x40011000
 800765c:	40004400 	.word	0x40004400
 8007660:	40004800 	.word	0x40004800
 8007664:	40004c00 	.word	0x40004c00
 8007668:	40005000 	.word	0x40005000
 800766c:	40011400 	.word	0x40011400
 8007670:	40007800 	.word	0x40007800
 8007674:	40007c00 	.word	0x40007c00
 8007678:	58000c00 	.word	0x58000c00
 800767c:	080189b0 	.word	0x080189b0

08007680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007680:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007684:	b090      	sub	sp, #64	; 0x40
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800768a:	2300      	movs	r3, #0
 800768c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007694:	2300      	movs	r3, #0
 8007696:	62fb      	str	r3, [r7, #44]	; 0x2c
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	4a17      	ldr	r2, [pc, #92]	; (80076fc <UART_SetConfig+0x7c>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d904      	bls.n	80076ac <UART_SetConfig+0x2c>
 80076a2:	f640 3134 	movw	r1, #2868	; 0xb34
 80076a6:	4816      	ldr	r0, [pc, #88]	; (8007700 <UART_SetConfig+0x80>)
 80076a8:	f7f9 fb0b 	bl	8000cc2 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076b4:	d00d      	beq.n	80076d2 <UART_SetConfig+0x52>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d009      	beq.n	80076d2 <UART_SetConfig+0x52>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076c6:	d004      	beq.n	80076d2 <UART_SetConfig+0x52>
 80076c8:	f640 3135 	movw	r1, #2869	; 0xb35
 80076cc:	480c      	ldr	r0, [pc, #48]	; (8007700 <UART_SetConfig+0x80>)
 80076ce:	f7f9 faf8 	bl	8000cc2 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a0b      	ldr	r2, [pc, #44]	; (8007704 <UART_SetConfig+0x84>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d115      	bne.n	8007708 <UART_SetConfig+0x88>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d037      	beq.n	8007754 <UART_SetConfig+0xd4>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076ec:	d032      	beq.n	8007754 <UART_SetConfig+0xd4>
 80076ee:	f640 3138 	movw	r1, #2872	; 0xb38
 80076f2:	4803      	ldr	r0, [pc, #12]	; (8007700 <UART_SetConfig+0x80>)
 80076f4:	f7f9 fae5 	bl	8000cc2 <assert_failed>
 80076f8:	e02c      	b.n	8007754 <UART_SetConfig+0xd4>
 80076fa:	bf00      	nop
 80076fc:	00bebc20 	.word	0x00bebc20
 8007700:	080189b0 	.word	0x080189b0
 8007704:	58000c00 	.word	0x58000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007710:	d012      	beq.n	8007738 <UART_SetConfig+0xb8>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00e      	beq.n	8007738 <UART_SetConfig+0xb8>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007722:	d009      	beq.n	8007738 <UART_SetConfig+0xb8>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800772c:	d004      	beq.n	8007738 <UART_SetConfig+0xb8>
 800772e:	f640 313c 	movw	r1, #2876	; 0xb3c
 8007732:	48aa      	ldr	r0, [pc, #680]	; (80079dc <UART_SetConfig+0x35c>)
 8007734:	f7f9 fac5 	bl	8000cc2 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d009      	beq.n	8007754 <UART_SetConfig+0xd4>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a1b      	ldr	r3, [r3, #32]
 8007744:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007748:	d004      	beq.n	8007754 <UART_SetConfig+0xd4>
 800774a:	f640 313d 	movw	r1, #2877	; 0xb3d
 800774e:	48a3      	ldr	r0, [pc, #652]	; (80079dc <UART_SetConfig+0x35c>)
 8007750:	f7f9 fab7 	bl	8000cc2 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00e      	beq.n	800777a <UART_SetConfig+0xfa>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007764:	d009      	beq.n	800777a <UART_SetConfig+0xfa>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800776e:	d004      	beq.n	800777a <UART_SetConfig+0xfa>
 8007770:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8007774:	4899      	ldr	r0, [pc, #612]	; (80079dc <UART_SetConfig+0x35c>)
 8007776:	f7f9 faa4 	bl	8000cc2 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	f023 030c 	bic.w	r3, r3, #12
 8007782:	2b00      	cmp	r3, #0
 8007784:	d103      	bne.n	800778e <UART_SetConfig+0x10e>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d104      	bne.n	8007798 <UART_SetConfig+0x118>
 800778e:	f640 3141 	movw	r1, #2881	; 0xb41
 8007792:	4892      	ldr	r0, [pc, #584]	; (80079dc <UART_SetConfig+0x35c>)
 8007794:	f7f9 fa95 	bl	8000cc2 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d013      	beq.n	80077c8 <UART_SetConfig+0x148>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077a8:	d00e      	beq.n	80077c8 <UART_SetConfig+0x148>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077b2:	d009      	beq.n	80077c8 <UART_SetConfig+0x148>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077bc:	d004      	beq.n	80077c8 <UART_SetConfig+0x148>
 80077be:	f640 3142 	movw	r1, #2882	; 0xb42
 80077c2:	4886      	ldr	r0, [pc, #536]	; (80079dc <UART_SetConfig+0x35c>)
 80077c4:	f7f9 fa7d 	bl	8000cc2 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	69db      	ldr	r3, [r3, #28]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d009      	beq.n	80077e4 <UART_SetConfig+0x164>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	69db      	ldr	r3, [r3, #28]
 80077d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077d8:	d004      	beq.n	80077e4 <UART_SetConfig+0x164>
 80077da:	f640 3143 	movw	r1, #2883	; 0xb43
 80077de:	487f      	ldr	r0, [pc, #508]	; (80079dc <UART_SetConfig+0x35c>)
 80077e0:	f7f9 fa6f 	bl	8000cc2 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d030      	beq.n	800784e <UART_SetConfig+0x1ce>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d02c      	beq.n	800784e <UART_SetConfig+0x1ce>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d028      	beq.n	800784e <UART_SetConfig+0x1ce>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007800:	2b03      	cmp	r3, #3
 8007802:	d024      	beq.n	800784e <UART_SetConfig+0x1ce>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007808:	2b04      	cmp	r3, #4
 800780a:	d020      	beq.n	800784e <UART_SetConfig+0x1ce>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007810:	2b05      	cmp	r3, #5
 8007812:	d01c      	beq.n	800784e <UART_SetConfig+0x1ce>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007818:	2b06      	cmp	r3, #6
 800781a:	d018      	beq.n	800784e <UART_SetConfig+0x1ce>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007820:	2b07      	cmp	r3, #7
 8007822:	d014      	beq.n	800784e <UART_SetConfig+0x1ce>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	2b08      	cmp	r3, #8
 800782a:	d010      	beq.n	800784e <UART_SetConfig+0x1ce>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007830:	2b09      	cmp	r3, #9
 8007832:	d00c      	beq.n	800784e <UART_SetConfig+0x1ce>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007838:	2b0a      	cmp	r3, #10
 800783a:	d008      	beq.n	800784e <UART_SetConfig+0x1ce>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007840:	2b0b      	cmp	r3, #11
 8007842:	d004      	beq.n	800784e <UART_SetConfig+0x1ce>
 8007844:	f640 3144 	movw	r1, #2884	; 0xb44
 8007848:	4864      	ldr	r0, [pc, #400]	; (80079dc <UART_SetConfig+0x35c>)
 800784a:	f7f9 fa3a 	bl	8000cc2 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	689a      	ldr	r2, [r3, #8]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	431a      	orrs	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	431a      	orrs	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	69db      	ldr	r3, [r3, #28]
 8007862:	4313      	orrs	r3, r2
 8007864:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800786a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800786c:	4313      	orrs	r3, r2
 800786e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	4b5a      	ldr	r3, [pc, #360]	; (80079e0 <UART_SetConfig+0x360>)
 8007878:	4013      	ands	r3, r2
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	6812      	ldr	r2, [r2, #0]
 800787e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007880:	430b      	orrs	r3, r1
 8007882:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68da      	ldr	r2, [r3, #12]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a4f      	ldr	r2, [pc, #316]	; (80079e4 <UART_SetConfig+0x364>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d004      	beq.n	80078b4 <UART_SetConfig+0x234>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078b0:	4313      	orrs	r3, r2
 80078b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	689a      	ldr	r2, [r3, #8]
 80078ba:	4b4b      	ldr	r3, [pc, #300]	; (80079e8 <UART_SetConfig+0x368>)
 80078bc:	4013      	ands	r3, r2
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	6812      	ldr	r2, [r2, #0]
 80078c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80078c4:	430b      	orrs	r3, r1
 80078c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ce:	f023 010f 	bic.w	r1, r3, #15
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	430a      	orrs	r2, r1
 80078dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a42      	ldr	r2, [pc, #264]	; (80079ec <UART_SetConfig+0x36c>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	f040 8085 	bne.w	80079f4 <UART_SetConfig+0x374>
 80078ea:	4b41      	ldr	r3, [pc, #260]	; (80079f0 <UART_SetConfig+0x370>)
 80078ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078f2:	2b28      	cmp	r3, #40	; 0x28
 80078f4:	d86c      	bhi.n	80079d0 <UART_SetConfig+0x350>
 80078f6:	a201      	add	r2, pc, #4	; (adr r2, 80078fc <UART_SetConfig+0x27c>)
 80078f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fc:	080079a1 	.word	0x080079a1
 8007900:	080079d1 	.word	0x080079d1
 8007904:	080079d1 	.word	0x080079d1
 8007908:	080079d1 	.word	0x080079d1
 800790c:	080079d1 	.word	0x080079d1
 8007910:	080079d1 	.word	0x080079d1
 8007914:	080079d1 	.word	0x080079d1
 8007918:	080079d1 	.word	0x080079d1
 800791c:	080079a9 	.word	0x080079a9
 8007920:	080079d1 	.word	0x080079d1
 8007924:	080079d1 	.word	0x080079d1
 8007928:	080079d1 	.word	0x080079d1
 800792c:	080079d1 	.word	0x080079d1
 8007930:	080079d1 	.word	0x080079d1
 8007934:	080079d1 	.word	0x080079d1
 8007938:	080079d1 	.word	0x080079d1
 800793c:	080079b1 	.word	0x080079b1
 8007940:	080079d1 	.word	0x080079d1
 8007944:	080079d1 	.word	0x080079d1
 8007948:	080079d1 	.word	0x080079d1
 800794c:	080079d1 	.word	0x080079d1
 8007950:	080079d1 	.word	0x080079d1
 8007954:	080079d1 	.word	0x080079d1
 8007958:	080079d1 	.word	0x080079d1
 800795c:	080079b9 	.word	0x080079b9
 8007960:	080079d1 	.word	0x080079d1
 8007964:	080079d1 	.word	0x080079d1
 8007968:	080079d1 	.word	0x080079d1
 800796c:	080079d1 	.word	0x080079d1
 8007970:	080079d1 	.word	0x080079d1
 8007974:	080079d1 	.word	0x080079d1
 8007978:	080079d1 	.word	0x080079d1
 800797c:	080079c1 	.word	0x080079c1
 8007980:	080079d1 	.word	0x080079d1
 8007984:	080079d1 	.word	0x080079d1
 8007988:	080079d1 	.word	0x080079d1
 800798c:	080079d1 	.word	0x080079d1
 8007990:	080079d1 	.word	0x080079d1
 8007994:	080079d1 	.word	0x080079d1
 8007998:	080079d1 	.word	0x080079d1
 800799c:	080079c9 	.word	0x080079c9
 80079a0:	2301      	movs	r3, #1
 80079a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079a6:	e23b      	b.n	8007e20 <UART_SetConfig+0x7a0>
 80079a8:	2304      	movs	r3, #4
 80079aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079ae:	e237      	b.n	8007e20 <UART_SetConfig+0x7a0>
 80079b0:	2308      	movs	r3, #8
 80079b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079b6:	e233      	b.n	8007e20 <UART_SetConfig+0x7a0>
 80079b8:	2310      	movs	r3, #16
 80079ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079be:	e22f      	b.n	8007e20 <UART_SetConfig+0x7a0>
 80079c0:	2320      	movs	r3, #32
 80079c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079c6:	e22b      	b.n	8007e20 <UART_SetConfig+0x7a0>
 80079c8:	2340      	movs	r3, #64	; 0x40
 80079ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079ce:	e227      	b.n	8007e20 <UART_SetConfig+0x7a0>
 80079d0:	2380      	movs	r3, #128	; 0x80
 80079d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079d6:	bf00      	nop
 80079d8:	e222      	b.n	8007e20 <UART_SetConfig+0x7a0>
 80079da:	bf00      	nop
 80079dc:	080189b0 	.word	0x080189b0
 80079e0:	cfff69f3 	.word	0xcfff69f3
 80079e4:	58000c00 	.word	0x58000c00
 80079e8:	11fff4ff 	.word	0x11fff4ff
 80079ec:	40011000 	.word	0x40011000
 80079f0:	58024400 	.word	0x58024400
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4ac9      	ldr	r2, [pc, #804]	; (8007d20 <UART_SetConfig+0x6a0>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d131      	bne.n	8007a62 <UART_SetConfig+0x3e2>
 80079fe:	4bc9      	ldr	r3, [pc, #804]	; (8007d24 <UART_SetConfig+0x6a4>)
 8007a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a02:	f003 0307 	and.w	r3, r3, #7
 8007a06:	2b05      	cmp	r3, #5
 8007a08:	d826      	bhi.n	8007a58 <UART_SetConfig+0x3d8>
 8007a0a:	a201      	add	r2, pc, #4	; (adr r2, 8007a10 <UART_SetConfig+0x390>)
 8007a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a10:	08007a29 	.word	0x08007a29
 8007a14:	08007a31 	.word	0x08007a31
 8007a18:	08007a39 	.word	0x08007a39
 8007a1c:	08007a41 	.word	0x08007a41
 8007a20:	08007a49 	.word	0x08007a49
 8007a24:	08007a51 	.word	0x08007a51
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a2e:	e1f7      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007a30:	2304      	movs	r3, #4
 8007a32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a36:	e1f3      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007a38:	2308      	movs	r3, #8
 8007a3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a3e:	e1ef      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007a40:	2310      	movs	r3, #16
 8007a42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a46:	e1eb      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007a48:	2320      	movs	r3, #32
 8007a4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a4e:	e1e7      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007a50:	2340      	movs	r3, #64	; 0x40
 8007a52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a56:	e1e3      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007a58:	2380      	movs	r3, #128	; 0x80
 8007a5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a5e:	bf00      	nop
 8007a60:	e1de      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4ab0      	ldr	r2, [pc, #704]	; (8007d28 <UART_SetConfig+0x6a8>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d132      	bne.n	8007ad2 <UART_SetConfig+0x452>
 8007a6c:	4bad      	ldr	r3, [pc, #692]	; (8007d24 <UART_SetConfig+0x6a4>)
 8007a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a70:	f003 0307 	and.w	r3, r3, #7
 8007a74:	2b05      	cmp	r3, #5
 8007a76:	d827      	bhi.n	8007ac8 <UART_SetConfig+0x448>
 8007a78:	a201      	add	r2, pc, #4	; (adr r2, 8007a80 <UART_SetConfig+0x400>)
 8007a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7e:	bf00      	nop
 8007a80:	08007a99 	.word	0x08007a99
 8007a84:	08007aa1 	.word	0x08007aa1
 8007a88:	08007aa9 	.word	0x08007aa9
 8007a8c:	08007ab1 	.word	0x08007ab1
 8007a90:	08007ab9 	.word	0x08007ab9
 8007a94:	08007ac1 	.word	0x08007ac1
 8007a98:	2300      	movs	r3, #0
 8007a9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a9e:	e1bf      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007aa0:	2304      	movs	r3, #4
 8007aa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007aa6:	e1bb      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007aa8:	2308      	movs	r3, #8
 8007aaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007aae:	e1b7      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007ab0:	2310      	movs	r3, #16
 8007ab2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ab6:	e1b3      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007ab8:	2320      	movs	r3, #32
 8007aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007abe:	e1af      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007ac0:	2340      	movs	r3, #64	; 0x40
 8007ac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ac6:	e1ab      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007ac8:	2380      	movs	r3, #128	; 0x80
 8007aca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ace:	bf00      	nop
 8007ad0:	e1a6      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a95      	ldr	r2, [pc, #596]	; (8007d2c <UART_SetConfig+0x6ac>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d132      	bne.n	8007b42 <UART_SetConfig+0x4c2>
 8007adc:	4b91      	ldr	r3, [pc, #580]	; (8007d24 <UART_SetConfig+0x6a4>)
 8007ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae0:	f003 0307 	and.w	r3, r3, #7
 8007ae4:	2b05      	cmp	r3, #5
 8007ae6:	d827      	bhi.n	8007b38 <UART_SetConfig+0x4b8>
 8007ae8:	a201      	add	r2, pc, #4	; (adr r2, 8007af0 <UART_SetConfig+0x470>)
 8007aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aee:	bf00      	nop
 8007af0:	08007b09 	.word	0x08007b09
 8007af4:	08007b11 	.word	0x08007b11
 8007af8:	08007b19 	.word	0x08007b19
 8007afc:	08007b21 	.word	0x08007b21
 8007b00:	08007b29 	.word	0x08007b29
 8007b04:	08007b31 	.word	0x08007b31
 8007b08:	2300      	movs	r3, #0
 8007b0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b0e:	e187      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007b10:	2304      	movs	r3, #4
 8007b12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b16:	e183      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007b18:	2308      	movs	r3, #8
 8007b1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b1e:	e17f      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007b20:	2310      	movs	r3, #16
 8007b22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b26:	e17b      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007b28:	2320      	movs	r3, #32
 8007b2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b2e:	e177      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007b30:	2340      	movs	r3, #64	; 0x40
 8007b32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b36:	e173      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007b38:	2380      	movs	r3, #128	; 0x80
 8007b3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b3e:	bf00      	nop
 8007b40:	e16e      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a7a      	ldr	r2, [pc, #488]	; (8007d30 <UART_SetConfig+0x6b0>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d132      	bne.n	8007bb2 <UART_SetConfig+0x532>
 8007b4c:	4b75      	ldr	r3, [pc, #468]	; (8007d24 <UART_SetConfig+0x6a4>)
 8007b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b50:	f003 0307 	and.w	r3, r3, #7
 8007b54:	2b05      	cmp	r3, #5
 8007b56:	d827      	bhi.n	8007ba8 <UART_SetConfig+0x528>
 8007b58:	a201      	add	r2, pc, #4	; (adr r2, 8007b60 <UART_SetConfig+0x4e0>)
 8007b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5e:	bf00      	nop
 8007b60:	08007b79 	.word	0x08007b79
 8007b64:	08007b81 	.word	0x08007b81
 8007b68:	08007b89 	.word	0x08007b89
 8007b6c:	08007b91 	.word	0x08007b91
 8007b70:	08007b99 	.word	0x08007b99
 8007b74:	08007ba1 	.word	0x08007ba1
 8007b78:	2300      	movs	r3, #0
 8007b7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b7e:	e14f      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007b80:	2304      	movs	r3, #4
 8007b82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b86:	e14b      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007b88:	2308      	movs	r3, #8
 8007b8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b8e:	e147      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007b90:	2310      	movs	r3, #16
 8007b92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b96:	e143      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007b98:	2320      	movs	r3, #32
 8007b9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b9e:	e13f      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007ba0:	2340      	movs	r3, #64	; 0x40
 8007ba2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ba6:	e13b      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007ba8:	2380      	movs	r3, #128	; 0x80
 8007baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bae:	bf00      	nop
 8007bb0:	e136      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a5f      	ldr	r2, [pc, #380]	; (8007d34 <UART_SetConfig+0x6b4>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d178      	bne.n	8007cae <UART_SetConfig+0x62e>
 8007bbc:	4b59      	ldr	r3, [pc, #356]	; (8007d24 <UART_SetConfig+0x6a4>)
 8007bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bc4:	2b28      	cmp	r3, #40	; 0x28
 8007bc6:	d86d      	bhi.n	8007ca4 <UART_SetConfig+0x624>
 8007bc8:	a201      	add	r2, pc, #4	; (adr r2, 8007bd0 <UART_SetConfig+0x550>)
 8007bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bce:	bf00      	nop
 8007bd0:	08007c75 	.word	0x08007c75
 8007bd4:	08007ca5 	.word	0x08007ca5
 8007bd8:	08007ca5 	.word	0x08007ca5
 8007bdc:	08007ca5 	.word	0x08007ca5
 8007be0:	08007ca5 	.word	0x08007ca5
 8007be4:	08007ca5 	.word	0x08007ca5
 8007be8:	08007ca5 	.word	0x08007ca5
 8007bec:	08007ca5 	.word	0x08007ca5
 8007bf0:	08007c7d 	.word	0x08007c7d
 8007bf4:	08007ca5 	.word	0x08007ca5
 8007bf8:	08007ca5 	.word	0x08007ca5
 8007bfc:	08007ca5 	.word	0x08007ca5
 8007c00:	08007ca5 	.word	0x08007ca5
 8007c04:	08007ca5 	.word	0x08007ca5
 8007c08:	08007ca5 	.word	0x08007ca5
 8007c0c:	08007ca5 	.word	0x08007ca5
 8007c10:	08007c85 	.word	0x08007c85
 8007c14:	08007ca5 	.word	0x08007ca5
 8007c18:	08007ca5 	.word	0x08007ca5
 8007c1c:	08007ca5 	.word	0x08007ca5
 8007c20:	08007ca5 	.word	0x08007ca5
 8007c24:	08007ca5 	.word	0x08007ca5
 8007c28:	08007ca5 	.word	0x08007ca5
 8007c2c:	08007ca5 	.word	0x08007ca5
 8007c30:	08007c8d 	.word	0x08007c8d
 8007c34:	08007ca5 	.word	0x08007ca5
 8007c38:	08007ca5 	.word	0x08007ca5
 8007c3c:	08007ca5 	.word	0x08007ca5
 8007c40:	08007ca5 	.word	0x08007ca5
 8007c44:	08007ca5 	.word	0x08007ca5
 8007c48:	08007ca5 	.word	0x08007ca5
 8007c4c:	08007ca5 	.word	0x08007ca5
 8007c50:	08007c95 	.word	0x08007c95
 8007c54:	08007ca5 	.word	0x08007ca5
 8007c58:	08007ca5 	.word	0x08007ca5
 8007c5c:	08007ca5 	.word	0x08007ca5
 8007c60:	08007ca5 	.word	0x08007ca5
 8007c64:	08007ca5 	.word	0x08007ca5
 8007c68:	08007ca5 	.word	0x08007ca5
 8007c6c:	08007ca5 	.word	0x08007ca5
 8007c70:	08007c9d 	.word	0x08007c9d
 8007c74:	2301      	movs	r3, #1
 8007c76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c7a:	e0d1      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007c7c:	2304      	movs	r3, #4
 8007c7e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c82:	e0cd      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007c84:	2308      	movs	r3, #8
 8007c86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c8a:	e0c9      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007c8c:	2310      	movs	r3, #16
 8007c8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c92:	e0c5      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007c94:	2320      	movs	r3, #32
 8007c96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c9a:	e0c1      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007c9c:	2340      	movs	r3, #64	; 0x40
 8007c9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ca2:	e0bd      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007ca4:	2380      	movs	r3, #128	; 0x80
 8007ca6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007caa:	bf00      	nop
 8007cac:	e0b8      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a21      	ldr	r2, [pc, #132]	; (8007d38 <UART_SetConfig+0x6b8>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d141      	bne.n	8007d3c <UART_SetConfig+0x6bc>
 8007cb8:	4b1a      	ldr	r3, [pc, #104]	; (8007d24 <UART_SetConfig+0x6a4>)
 8007cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cbc:	f003 0307 	and.w	r3, r3, #7
 8007cc0:	2b05      	cmp	r3, #5
 8007cc2:	d827      	bhi.n	8007d14 <UART_SetConfig+0x694>
 8007cc4:	a201      	add	r2, pc, #4	; (adr r2, 8007ccc <UART_SetConfig+0x64c>)
 8007cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cca:	bf00      	nop
 8007ccc:	08007ce5 	.word	0x08007ce5
 8007cd0:	08007ced 	.word	0x08007ced
 8007cd4:	08007cf5 	.word	0x08007cf5
 8007cd8:	08007cfd 	.word	0x08007cfd
 8007cdc:	08007d05 	.word	0x08007d05
 8007ce0:	08007d0d 	.word	0x08007d0d
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cea:	e099      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007cec:	2304      	movs	r3, #4
 8007cee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cf2:	e095      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007cf4:	2308      	movs	r3, #8
 8007cf6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cfa:	e091      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007cfc:	2310      	movs	r3, #16
 8007cfe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d02:	e08d      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007d04:	2320      	movs	r3, #32
 8007d06:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d0a:	e089      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007d0c:	2340      	movs	r3, #64	; 0x40
 8007d0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d12:	e085      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007d14:	2380      	movs	r3, #128	; 0x80
 8007d16:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d1a:	bf00      	nop
 8007d1c:	e080      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007d1e:	bf00      	nop
 8007d20:	40004400 	.word	0x40004400
 8007d24:	58024400 	.word	0x58024400
 8007d28:	40004800 	.word	0x40004800
 8007d2c:	40004c00 	.word	0x40004c00
 8007d30:	40005000 	.word	0x40005000
 8007d34:	40011400 	.word	0x40011400
 8007d38:	40007800 	.word	0x40007800
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a98      	ldr	r2, [pc, #608]	; (8007fa4 <UART_SetConfig+0x924>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d131      	bne.n	8007daa <UART_SetConfig+0x72a>
 8007d46:	4b98      	ldr	r3, [pc, #608]	; (8007fa8 <UART_SetConfig+0x928>)
 8007d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4a:	f003 0307 	and.w	r3, r3, #7
 8007d4e:	2b05      	cmp	r3, #5
 8007d50:	d826      	bhi.n	8007da0 <UART_SetConfig+0x720>
 8007d52:	a201      	add	r2, pc, #4	; (adr r2, 8007d58 <UART_SetConfig+0x6d8>)
 8007d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d58:	08007d71 	.word	0x08007d71
 8007d5c:	08007d79 	.word	0x08007d79
 8007d60:	08007d81 	.word	0x08007d81
 8007d64:	08007d89 	.word	0x08007d89
 8007d68:	08007d91 	.word	0x08007d91
 8007d6c:	08007d99 	.word	0x08007d99
 8007d70:	2300      	movs	r3, #0
 8007d72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d76:	e053      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007d78:	2304      	movs	r3, #4
 8007d7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d7e:	e04f      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007d80:	2308      	movs	r3, #8
 8007d82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d86:	e04b      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007d88:	2310      	movs	r3, #16
 8007d8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d8e:	e047      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007d90:	2320      	movs	r3, #32
 8007d92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d96:	e043      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007d98:	2340      	movs	r3, #64	; 0x40
 8007d9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d9e:	e03f      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007da0:	2380      	movs	r3, #128	; 0x80
 8007da2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007da6:	bf00      	nop
 8007da8:	e03a      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a7f      	ldr	r2, [pc, #508]	; (8007fac <UART_SetConfig+0x92c>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d132      	bne.n	8007e1a <UART_SetConfig+0x79a>
 8007db4:	4b7c      	ldr	r3, [pc, #496]	; (8007fa8 <UART_SetConfig+0x928>)
 8007db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db8:	f003 0307 	and.w	r3, r3, #7
 8007dbc:	2b05      	cmp	r3, #5
 8007dbe:	d827      	bhi.n	8007e10 <UART_SetConfig+0x790>
 8007dc0:	a201      	add	r2, pc, #4	; (adr r2, 8007dc8 <UART_SetConfig+0x748>)
 8007dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc6:	bf00      	nop
 8007dc8:	08007de1 	.word	0x08007de1
 8007dcc:	08007de9 	.word	0x08007de9
 8007dd0:	08007df1 	.word	0x08007df1
 8007dd4:	08007df9 	.word	0x08007df9
 8007dd8:	08007e01 	.word	0x08007e01
 8007ddc:	08007e09 	.word	0x08007e09
 8007de0:	2302      	movs	r3, #2
 8007de2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007de6:	e01b      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007de8:	2304      	movs	r3, #4
 8007dea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dee:	e017      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007df0:	2308      	movs	r3, #8
 8007df2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007df6:	e013      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007df8:	2310      	movs	r3, #16
 8007dfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dfe:	e00f      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007e00:	2320      	movs	r3, #32
 8007e02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007e06:	e00b      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007e08:	2340      	movs	r3, #64	; 0x40
 8007e0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007e0e:	e007      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007e10:	2380      	movs	r3, #128	; 0x80
 8007e12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007e16:	bf00      	nop
 8007e18:	e002      	b.n	8007e20 <UART_SetConfig+0x7a0>
 8007e1a:	2380      	movs	r3, #128	; 0x80
 8007e1c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a61      	ldr	r2, [pc, #388]	; (8007fac <UART_SetConfig+0x92c>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	f040 86f3 	bne.w	8008c12 <UART_SetConfig+0x1592>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e2c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	f000 80bd 	beq.w	8007fb0 <UART_SetConfig+0x930>
 8007e36:	2b08      	cmp	r3, #8
 8007e38:	dc04      	bgt.n	8007e44 <UART_SetConfig+0x7c4>
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d00c      	beq.n	8007e58 <UART_SetConfig+0x7d8>
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	d05b      	beq.n	8007efa <UART_SetConfig+0x87a>
 8007e42:	e276      	b.n	8008332 <UART_SetConfig+0xcb2>
 8007e44:	2b20      	cmp	r3, #32
 8007e46:	f000 81ad 	beq.w	80081a4 <UART_SetConfig+0xb24>
 8007e4a:	2b40      	cmp	r3, #64	; 0x40
 8007e4c:	f000 821a 	beq.w	8008284 <UART_SetConfig+0xc04>
 8007e50:	2b10      	cmp	r3, #16
 8007e52:	f000 8101 	beq.w	8008058 <UART_SetConfig+0x9d8>
 8007e56:	e26c      	b.n	8008332 <UART_SetConfig+0xcb2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007e58:	f7fe fae8 	bl	800642c <HAL_RCCEx_GetD3PCLK1Freq>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d044      	beq.n	8007ef0 <UART_SetConfig+0x870>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d03e      	beq.n	8007eec <UART_SetConfig+0x86c>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d038      	beq.n	8007ee8 <UART_SetConfig+0x868>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7a:	2b03      	cmp	r3, #3
 8007e7c:	d032      	beq.n	8007ee4 <UART_SetConfig+0x864>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	d02c      	beq.n	8007ee0 <UART_SetConfig+0x860>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8a:	2b05      	cmp	r3, #5
 8007e8c:	d026      	beq.n	8007edc <UART_SetConfig+0x85c>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e92:	2b06      	cmp	r3, #6
 8007e94:	d020      	beq.n	8007ed8 <UART_SetConfig+0x858>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	2b07      	cmp	r3, #7
 8007e9c:	d01a      	beq.n	8007ed4 <UART_SetConfig+0x854>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea2:	2b08      	cmp	r3, #8
 8007ea4:	d014      	beq.n	8007ed0 <UART_SetConfig+0x850>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eaa:	2b09      	cmp	r3, #9
 8007eac:	d00e      	beq.n	8007ecc <UART_SetConfig+0x84c>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	2b0a      	cmp	r3, #10
 8007eb4:	d008      	beq.n	8007ec8 <UART_SetConfig+0x848>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eba:	2b0b      	cmp	r3, #11
 8007ebc:	d102      	bne.n	8007ec4 <UART_SetConfig+0x844>
 8007ebe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ec2:	e016      	b.n	8007ef2 <UART_SetConfig+0x872>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e014      	b.n	8007ef2 <UART_SetConfig+0x872>
 8007ec8:	2380      	movs	r3, #128	; 0x80
 8007eca:	e012      	b.n	8007ef2 <UART_SetConfig+0x872>
 8007ecc:	2340      	movs	r3, #64	; 0x40
 8007ece:	e010      	b.n	8007ef2 <UART_SetConfig+0x872>
 8007ed0:	2320      	movs	r3, #32
 8007ed2:	e00e      	b.n	8007ef2 <UART_SetConfig+0x872>
 8007ed4:	2310      	movs	r3, #16
 8007ed6:	e00c      	b.n	8007ef2 <UART_SetConfig+0x872>
 8007ed8:	230c      	movs	r3, #12
 8007eda:	e00a      	b.n	8007ef2 <UART_SetConfig+0x872>
 8007edc:	230a      	movs	r3, #10
 8007ede:	e008      	b.n	8007ef2 <UART_SetConfig+0x872>
 8007ee0:	2308      	movs	r3, #8
 8007ee2:	e006      	b.n	8007ef2 <UART_SetConfig+0x872>
 8007ee4:	2306      	movs	r3, #6
 8007ee6:	e004      	b.n	8007ef2 <UART_SetConfig+0x872>
 8007ee8:	2304      	movs	r3, #4
 8007eea:	e002      	b.n	8007ef2 <UART_SetConfig+0x872>
 8007eec:	2302      	movs	r3, #2
 8007eee:	e000      	b.n	8007ef2 <UART_SetConfig+0x872>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ef8:	e21f      	b.n	800833a <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007efa:	f107 0318 	add.w	r3, r7, #24
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fe faaa 	bl	8006458 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007f04:	69fa      	ldr	r2, [r7, #28]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d044      	beq.n	8007f98 <UART_SetConfig+0x918>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d03e      	beq.n	8007f94 <UART_SetConfig+0x914>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d038      	beq.n	8007f90 <UART_SetConfig+0x910>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d032      	beq.n	8007f8c <UART_SetConfig+0x90c>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2a:	2b04      	cmp	r3, #4
 8007f2c:	d02c      	beq.n	8007f88 <UART_SetConfig+0x908>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f32:	2b05      	cmp	r3, #5
 8007f34:	d026      	beq.n	8007f84 <UART_SetConfig+0x904>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	2b06      	cmp	r3, #6
 8007f3c:	d020      	beq.n	8007f80 <UART_SetConfig+0x900>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f42:	2b07      	cmp	r3, #7
 8007f44:	d01a      	beq.n	8007f7c <UART_SetConfig+0x8fc>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4a:	2b08      	cmp	r3, #8
 8007f4c:	d014      	beq.n	8007f78 <UART_SetConfig+0x8f8>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f52:	2b09      	cmp	r3, #9
 8007f54:	d00e      	beq.n	8007f74 <UART_SetConfig+0x8f4>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5a:	2b0a      	cmp	r3, #10
 8007f5c:	d008      	beq.n	8007f70 <UART_SetConfig+0x8f0>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f62:	2b0b      	cmp	r3, #11
 8007f64:	d102      	bne.n	8007f6c <UART_SetConfig+0x8ec>
 8007f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f6a:	e016      	b.n	8007f9a <UART_SetConfig+0x91a>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e014      	b.n	8007f9a <UART_SetConfig+0x91a>
 8007f70:	2380      	movs	r3, #128	; 0x80
 8007f72:	e012      	b.n	8007f9a <UART_SetConfig+0x91a>
 8007f74:	2340      	movs	r3, #64	; 0x40
 8007f76:	e010      	b.n	8007f9a <UART_SetConfig+0x91a>
 8007f78:	2320      	movs	r3, #32
 8007f7a:	e00e      	b.n	8007f9a <UART_SetConfig+0x91a>
 8007f7c:	2310      	movs	r3, #16
 8007f7e:	e00c      	b.n	8007f9a <UART_SetConfig+0x91a>
 8007f80:	230c      	movs	r3, #12
 8007f82:	e00a      	b.n	8007f9a <UART_SetConfig+0x91a>
 8007f84:	230a      	movs	r3, #10
 8007f86:	e008      	b.n	8007f9a <UART_SetConfig+0x91a>
 8007f88:	2308      	movs	r3, #8
 8007f8a:	e006      	b.n	8007f9a <UART_SetConfig+0x91a>
 8007f8c:	2306      	movs	r3, #6
 8007f8e:	e004      	b.n	8007f9a <UART_SetConfig+0x91a>
 8007f90:	2304      	movs	r3, #4
 8007f92:	e002      	b.n	8007f9a <UART_SetConfig+0x91a>
 8007f94:	2302      	movs	r3, #2
 8007f96:	e000      	b.n	8007f9a <UART_SetConfig+0x91a>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007fa0:	e1cb      	b.n	800833a <UART_SetConfig+0xcba>
 8007fa2:	bf00      	nop
 8007fa4:	40007c00 	.word	0x40007c00
 8007fa8:	58024400 	.word	0x58024400
 8007fac:	58000c00 	.word	0x58000c00
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fb0:	f107 030c 	add.w	r3, r7, #12
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fe fb9b 	bl	80066f0 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d044      	beq.n	800804e <UART_SetConfig+0x9ce>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d03e      	beq.n	800804a <UART_SetConfig+0x9ca>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d038      	beq.n	8008046 <UART_SetConfig+0x9c6>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd8:	2b03      	cmp	r3, #3
 8007fda:	d032      	beq.n	8008042 <UART_SetConfig+0x9c2>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe0:	2b04      	cmp	r3, #4
 8007fe2:	d02c      	beq.n	800803e <UART_SetConfig+0x9be>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe8:	2b05      	cmp	r3, #5
 8007fea:	d026      	beq.n	800803a <UART_SetConfig+0x9ba>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff0:	2b06      	cmp	r3, #6
 8007ff2:	d020      	beq.n	8008036 <UART_SetConfig+0x9b6>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff8:	2b07      	cmp	r3, #7
 8007ffa:	d01a      	beq.n	8008032 <UART_SetConfig+0x9b2>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008000:	2b08      	cmp	r3, #8
 8008002:	d014      	beq.n	800802e <UART_SetConfig+0x9ae>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	2b09      	cmp	r3, #9
 800800a:	d00e      	beq.n	800802a <UART_SetConfig+0x9aa>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008010:	2b0a      	cmp	r3, #10
 8008012:	d008      	beq.n	8008026 <UART_SetConfig+0x9a6>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008018:	2b0b      	cmp	r3, #11
 800801a:	d102      	bne.n	8008022 <UART_SetConfig+0x9a2>
 800801c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008020:	e016      	b.n	8008050 <UART_SetConfig+0x9d0>
 8008022:	2301      	movs	r3, #1
 8008024:	e014      	b.n	8008050 <UART_SetConfig+0x9d0>
 8008026:	2380      	movs	r3, #128	; 0x80
 8008028:	e012      	b.n	8008050 <UART_SetConfig+0x9d0>
 800802a:	2340      	movs	r3, #64	; 0x40
 800802c:	e010      	b.n	8008050 <UART_SetConfig+0x9d0>
 800802e:	2320      	movs	r3, #32
 8008030:	e00e      	b.n	8008050 <UART_SetConfig+0x9d0>
 8008032:	2310      	movs	r3, #16
 8008034:	e00c      	b.n	8008050 <UART_SetConfig+0x9d0>
 8008036:	230c      	movs	r3, #12
 8008038:	e00a      	b.n	8008050 <UART_SetConfig+0x9d0>
 800803a:	230a      	movs	r3, #10
 800803c:	e008      	b.n	8008050 <UART_SetConfig+0x9d0>
 800803e:	2308      	movs	r3, #8
 8008040:	e006      	b.n	8008050 <UART_SetConfig+0x9d0>
 8008042:	2306      	movs	r3, #6
 8008044:	e004      	b.n	8008050 <UART_SetConfig+0x9d0>
 8008046:	2304      	movs	r3, #4
 8008048:	e002      	b.n	8008050 <UART_SetConfig+0x9d0>
 800804a:	2302      	movs	r3, #2
 800804c:	e000      	b.n	8008050 <UART_SetConfig+0x9d0>
 800804e:	2301      	movs	r3, #1
 8008050:	fbb2 f3f3 	udiv	r3, r2, r3
 8008054:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008056:	e170      	b.n	800833a <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008058:	4b79      	ldr	r3, [pc, #484]	; (8008240 <UART_SetConfig+0xbc0>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0320 	and.w	r3, r3, #32
 8008060:	2b00      	cmp	r3, #0
 8008062:	d054      	beq.n	800810e <UART_SetConfig+0xa8e>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008064:	4b76      	ldr	r3, [pc, #472]	; (8008240 <UART_SetConfig+0xbc0>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	08db      	lsrs	r3, r3, #3
 800806a:	f003 0303 	and.w	r3, r3, #3
 800806e:	4a75      	ldr	r2, [pc, #468]	; (8008244 <UART_SetConfig+0xbc4>)
 8008070:	40da      	lsrs	r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008076:	2b00      	cmp	r3, #0
 8008078:	d044      	beq.n	8008104 <UART_SetConfig+0xa84>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807e:	2b01      	cmp	r3, #1
 8008080:	d03e      	beq.n	8008100 <UART_SetConfig+0xa80>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008086:	2b02      	cmp	r3, #2
 8008088:	d038      	beq.n	80080fc <UART_SetConfig+0xa7c>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808e:	2b03      	cmp	r3, #3
 8008090:	d032      	beq.n	80080f8 <UART_SetConfig+0xa78>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008096:	2b04      	cmp	r3, #4
 8008098:	d02c      	beq.n	80080f4 <UART_SetConfig+0xa74>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	2b05      	cmp	r3, #5
 80080a0:	d026      	beq.n	80080f0 <UART_SetConfig+0xa70>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	2b06      	cmp	r3, #6
 80080a8:	d020      	beq.n	80080ec <UART_SetConfig+0xa6c>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	2b07      	cmp	r3, #7
 80080b0:	d01a      	beq.n	80080e8 <UART_SetConfig+0xa68>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b6:	2b08      	cmp	r3, #8
 80080b8:	d014      	beq.n	80080e4 <UART_SetConfig+0xa64>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080be:	2b09      	cmp	r3, #9
 80080c0:	d00e      	beq.n	80080e0 <UART_SetConfig+0xa60>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c6:	2b0a      	cmp	r3, #10
 80080c8:	d008      	beq.n	80080dc <UART_SetConfig+0xa5c>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ce:	2b0b      	cmp	r3, #11
 80080d0:	d102      	bne.n	80080d8 <UART_SetConfig+0xa58>
 80080d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080d6:	e016      	b.n	8008106 <UART_SetConfig+0xa86>
 80080d8:	2301      	movs	r3, #1
 80080da:	e014      	b.n	8008106 <UART_SetConfig+0xa86>
 80080dc:	2380      	movs	r3, #128	; 0x80
 80080de:	e012      	b.n	8008106 <UART_SetConfig+0xa86>
 80080e0:	2340      	movs	r3, #64	; 0x40
 80080e2:	e010      	b.n	8008106 <UART_SetConfig+0xa86>
 80080e4:	2320      	movs	r3, #32
 80080e6:	e00e      	b.n	8008106 <UART_SetConfig+0xa86>
 80080e8:	2310      	movs	r3, #16
 80080ea:	e00c      	b.n	8008106 <UART_SetConfig+0xa86>
 80080ec:	230c      	movs	r3, #12
 80080ee:	e00a      	b.n	8008106 <UART_SetConfig+0xa86>
 80080f0:	230a      	movs	r3, #10
 80080f2:	e008      	b.n	8008106 <UART_SetConfig+0xa86>
 80080f4:	2308      	movs	r3, #8
 80080f6:	e006      	b.n	8008106 <UART_SetConfig+0xa86>
 80080f8:	2306      	movs	r3, #6
 80080fa:	e004      	b.n	8008106 <UART_SetConfig+0xa86>
 80080fc:	2304      	movs	r3, #4
 80080fe:	e002      	b.n	8008106 <UART_SetConfig+0xa86>
 8008100:	2302      	movs	r3, #2
 8008102:	e000      	b.n	8008106 <UART_SetConfig+0xa86>
 8008104:	2301      	movs	r3, #1
 8008106:	fbb2 f3f3 	udiv	r3, r2, r3
 800810a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800810c:	e115      	b.n	800833a <UART_SetConfig+0xcba>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008112:	2b00      	cmp	r3, #0
 8008114:	d043      	beq.n	800819e <UART_SetConfig+0xb1e>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811a:	2b01      	cmp	r3, #1
 800811c:	d03d      	beq.n	800819a <UART_SetConfig+0xb1a>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	2b02      	cmp	r3, #2
 8008124:	d037      	beq.n	8008196 <UART_SetConfig+0xb16>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812a:	2b03      	cmp	r3, #3
 800812c:	d031      	beq.n	8008192 <UART_SetConfig+0xb12>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008132:	2b04      	cmp	r3, #4
 8008134:	d02b      	beq.n	800818e <UART_SetConfig+0xb0e>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813a:	2b05      	cmp	r3, #5
 800813c:	d025      	beq.n	800818a <UART_SetConfig+0xb0a>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008142:	2b06      	cmp	r3, #6
 8008144:	d01f      	beq.n	8008186 <UART_SetConfig+0xb06>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814a:	2b07      	cmp	r3, #7
 800814c:	d019      	beq.n	8008182 <UART_SetConfig+0xb02>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008152:	2b08      	cmp	r3, #8
 8008154:	d013      	beq.n	800817e <UART_SetConfig+0xafe>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815a:	2b09      	cmp	r3, #9
 800815c:	d00d      	beq.n	800817a <UART_SetConfig+0xafa>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008162:	2b0a      	cmp	r3, #10
 8008164:	d007      	beq.n	8008176 <UART_SetConfig+0xaf6>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	2b0b      	cmp	r3, #11
 800816c:	d101      	bne.n	8008172 <UART_SetConfig+0xaf2>
 800816e:	4b36      	ldr	r3, [pc, #216]	; (8008248 <UART_SetConfig+0xbc8>)
 8008170:	e016      	b.n	80081a0 <UART_SetConfig+0xb20>
 8008172:	4b34      	ldr	r3, [pc, #208]	; (8008244 <UART_SetConfig+0xbc4>)
 8008174:	e014      	b.n	80081a0 <UART_SetConfig+0xb20>
 8008176:	4b35      	ldr	r3, [pc, #212]	; (800824c <UART_SetConfig+0xbcc>)
 8008178:	e012      	b.n	80081a0 <UART_SetConfig+0xb20>
 800817a:	4b35      	ldr	r3, [pc, #212]	; (8008250 <UART_SetConfig+0xbd0>)
 800817c:	e010      	b.n	80081a0 <UART_SetConfig+0xb20>
 800817e:	4b35      	ldr	r3, [pc, #212]	; (8008254 <UART_SetConfig+0xbd4>)
 8008180:	e00e      	b.n	80081a0 <UART_SetConfig+0xb20>
 8008182:	4b35      	ldr	r3, [pc, #212]	; (8008258 <UART_SetConfig+0xbd8>)
 8008184:	e00c      	b.n	80081a0 <UART_SetConfig+0xb20>
 8008186:	4b35      	ldr	r3, [pc, #212]	; (800825c <UART_SetConfig+0xbdc>)
 8008188:	e00a      	b.n	80081a0 <UART_SetConfig+0xb20>
 800818a:	4b35      	ldr	r3, [pc, #212]	; (8008260 <UART_SetConfig+0xbe0>)
 800818c:	e008      	b.n	80081a0 <UART_SetConfig+0xb20>
 800818e:	4b35      	ldr	r3, [pc, #212]	; (8008264 <UART_SetConfig+0xbe4>)
 8008190:	e006      	b.n	80081a0 <UART_SetConfig+0xb20>
 8008192:	4b35      	ldr	r3, [pc, #212]	; (8008268 <UART_SetConfig+0xbe8>)
 8008194:	e004      	b.n	80081a0 <UART_SetConfig+0xb20>
 8008196:	4b35      	ldr	r3, [pc, #212]	; (800826c <UART_SetConfig+0xbec>)
 8008198:	e002      	b.n	80081a0 <UART_SetConfig+0xb20>
 800819a:	4b35      	ldr	r3, [pc, #212]	; (8008270 <UART_SetConfig+0xbf0>)
 800819c:	e000      	b.n	80081a0 <UART_SetConfig+0xb20>
 800819e:	4b29      	ldr	r3, [pc, #164]	; (8008244 <UART_SetConfig+0xbc4>)
 80081a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80081a2:	e0ca      	b.n	800833a <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d046      	beq.n	800823a <UART_SetConfig+0xbba>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d040      	beq.n	8008236 <UART_SetConfig+0xbb6>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d03a      	beq.n	8008232 <UART_SetConfig+0xbb2>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d034      	beq.n	800822e <UART_SetConfig+0xbae>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	d02e      	beq.n	800822a <UART_SetConfig+0xbaa>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d0:	2b05      	cmp	r3, #5
 80081d2:	d028      	beq.n	8008226 <UART_SetConfig+0xba6>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	2b06      	cmp	r3, #6
 80081da:	d022      	beq.n	8008222 <UART_SetConfig+0xba2>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e0:	2b07      	cmp	r3, #7
 80081e2:	d01c      	beq.n	800821e <UART_SetConfig+0xb9e>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	2b08      	cmp	r3, #8
 80081ea:	d016      	beq.n	800821a <UART_SetConfig+0xb9a>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f0:	2b09      	cmp	r3, #9
 80081f2:	d00f      	beq.n	8008214 <UART_SetConfig+0xb94>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f8:	2b0a      	cmp	r3, #10
 80081fa:	d008      	beq.n	800820e <UART_SetConfig+0xb8e>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008200:	2b0b      	cmp	r3, #11
 8008202:	d102      	bne.n	800820a <UART_SetConfig+0xb8a>
 8008204:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008208:	e018      	b.n	800823c <UART_SetConfig+0xbbc>
 800820a:	4b13      	ldr	r3, [pc, #76]	; (8008258 <UART_SetConfig+0xbd8>)
 800820c:	e016      	b.n	800823c <UART_SetConfig+0xbbc>
 800820e:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008212:	e013      	b.n	800823c <UART_SetConfig+0xbbc>
 8008214:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008218:	e010      	b.n	800823c <UART_SetConfig+0xbbc>
 800821a:	4b16      	ldr	r3, [pc, #88]	; (8008274 <UART_SetConfig+0xbf4>)
 800821c:	e00e      	b.n	800823c <UART_SetConfig+0xbbc>
 800821e:	4b0a      	ldr	r3, [pc, #40]	; (8008248 <UART_SetConfig+0xbc8>)
 8008220:	e00c      	b.n	800823c <UART_SetConfig+0xbbc>
 8008222:	4b15      	ldr	r3, [pc, #84]	; (8008278 <UART_SetConfig+0xbf8>)
 8008224:	e00a      	b.n	800823c <UART_SetConfig+0xbbc>
 8008226:	4b15      	ldr	r3, [pc, #84]	; (800827c <UART_SetConfig+0xbfc>)
 8008228:	e008      	b.n	800823c <UART_SetConfig+0xbbc>
 800822a:	4b08      	ldr	r3, [pc, #32]	; (800824c <UART_SetConfig+0xbcc>)
 800822c:	e006      	b.n	800823c <UART_SetConfig+0xbbc>
 800822e:	4b14      	ldr	r3, [pc, #80]	; (8008280 <UART_SetConfig+0xc00>)
 8008230:	e004      	b.n	800823c <UART_SetConfig+0xbbc>
 8008232:	4b07      	ldr	r3, [pc, #28]	; (8008250 <UART_SetConfig+0xbd0>)
 8008234:	e002      	b.n	800823c <UART_SetConfig+0xbbc>
 8008236:	4b07      	ldr	r3, [pc, #28]	; (8008254 <UART_SetConfig+0xbd4>)
 8008238:	e000      	b.n	800823c <UART_SetConfig+0xbbc>
 800823a:	4b07      	ldr	r3, [pc, #28]	; (8008258 <UART_SetConfig+0xbd8>)
 800823c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800823e:	e07c      	b.n	800833a <UART_SetConfig+0xcba>
 8008240:	58024400 	.word	0x58024400
 8008244:	03d09000 	.word	0x03d09000
 8008248:	0003d090 	.word	0x0003d090
 800824c:	0007a120 	.word	0x0007a120
 8008250:	000f4240 	.word	0x000f4240
 8008254:	001e8480 	.word	0x001e8480
 8008258:	003d0900 	.word	0x003d0900
 800825c:	00516155 	.word	0x00516155
 8008260:	0061a800 	.word	0x0061a800
 8008264:	007a1200 	.word	0x007a1200
 8008268:	00a2c2aa 	.word	0x00a2c2aa
 800826c:	00f42400 	.word	0x00f42400
 8008270:	01e84800 	.word	0x01e84800
 8008274:	0001e848 	.word	0x0001e848
 8008278:	00051615 	.word	0x00051615
 800827c:	00061a80 	.word	0x00061a80
 8008280:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	2b00      	cmp	r3, #0
 800828a:	d04e      	beq.n	800832a <UART_SetConfig+0xcaa>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008290:	2b01      	cmp	r3, #1
 8008292:	d047      	beq.n	8008324 <UART_SetConfig+0xca4>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008298:	2b02      	cmp	r3, #2
 800829a:	d040      	beq.n	800831e <UART_SetConfig+0xc9e>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d039      	beq.n	8008318 <UART_SetConfig+0xc98>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	2b04      	cmp	r3, #4
 80082aa:	d032      	beq.n	8008312 <UART_SetConfig+0xc92>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	2b05      	cmp	r3, #5
 80082b2:	d02b      	beq.n	800830c <UART_SetConfig+0xc8c>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b8:	2b06      	cmp	r3, #6
 80082ba:	d024      	beq.n	8008306 <UART_SetConfig+0xc86>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	2b07      	cmp	r3, #7
 80082c2:	d01d      	beq.n	8008300 <UART_SetConfig+0xc80>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	2b08      	cmp	r3, #8
 80082ca:	d016      	beq.n	80082fa <UART_SetConfig+0xc7a>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d0:	2b09      	cmp	r3, #9
 80082d2:	d00f      	beq.n	80082f4 <UART_SetConfig+0xc74>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d8:	2b0a      	cmp	r3, #10
 80082da:	d008      	beq.n	80082ee <UART_SetConfig+0xc6e>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e0:	2b0b      	cmp	r3, #11
 80082e2:	d101      	bne.n	80082e8 <UART_SetConfig+0xc68>
 80082e4:	2380      	movs	r3, #128	; 0x80
 80082e6:	e022      	b.n	800832e <UART_SetConfig+0xcae>
 80082e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ec:	e01f      	b.n	800832e <UART_SetConfig+0xcae>
 80082ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082f2:	e01c      	b.n	800832e <UART_SetConfig+0xcae>
 80082f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082f8:	e019      	b.n	800832e <UART_SetConfig+0xcae>
 80082fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082fe:	e016      	b.n	800832e <UART_SetConfig+0xcae>
 8008300:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008304:	e013      	b.n	800832e <UART_SetConfig+0xcae>
 8008306:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800830a:	e010      	b.n	800832e <UART_SetConfig+0xcae>
 800830c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008310:	e00d      	b.n	800832e <UART_SetConfig+0xcae>
 8008312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008316:	e00a      	b.n	800832e <UART_SetConfig+0xcae>
 8008318:	f241 5355 	movw	r3, #5461	; 0x1555
 800831c:	e007      	b.n	800832e <UART_SetConfig+0xcae>
 800831e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008322:	e004      	b.n	800832e <UART_SetConfig+0xcae>
 8008324:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008328:	e001      	b.n	800832e <UART_SetConfig+0xcae>
 800832a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800832e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008330:	e003      	b.n	800833a <UART_SetConfig+0xcba>
      default:
        ret = HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008338:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800833a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833c:	2b00      	cmp	r3, #0
 800833e:	f001 83e8 	beq.w	8009b12 <UART_SetConfig+0x2492>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	4613      	mov	r3, r2
 8008348:	005b      	lsls	r3, r3, #1
 800834a:	4413      	add	r3, r2
 800834c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800834e:	429a      	cmp	r2, r3
 8008350:	d305      	bcc.n	800835e <UART_SetConfig+0xcde>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800835a:	429a      	cmp	r2, r3
 800835c:	d904      	bls.n	8008368 <UART_SetConfig+0xce8>
      {
        ret = HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008364:	f001 bbd5 	b.w	8009b12 <UART_SetConfig+0x2492>
      }
      else
      {
        switch (clocksource)
 8008368:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800836c:	2b08      	cmp	r3, #8
 800836e:	f000 8154 	beq.w	800861a <UART_SetConfig+0xf9a>
 8008372:	2b08      	cmp	r3, #8
 8008374:	dc06      	bgt.n	8008384 <UART_SetConfig+0xd04>
 8008376:	2b02      	cmp	r3, #2
 8008378:	d00f      	beq.n	800839a <UART_SetConfig+0xd1a>
 800837a:	2b04      	cmp	r3, #4
 800837c:	f000 80ac 	beq.w	80084d8 <UART_SetConfig+0xe58>
 8008380:	f000 bc30 	b.w	8008be4 <UART_SetConfig+0x1564>
 8008384:	2b20      	cmp	r3, #32
 8008386:	f000 832d 	beq.w	80089e4 <UART_SetConfig+0x1364>
 800838a:	2b40      	cmp	r3, #64	; 0x40
 800838c:	f000 83a5 	beq.w	8008ada <UART_SetConfig+0x145a>
 8008390:	2b10      	cmp	r3, #16
 8008392:	f000 81e3 	beq.w	800875c <UART_SetConfig+0x10dc>
 8008396:	f000 bc25 	b.w	8008be4 <UART_SetConfig+0x1564>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800839a:	f7fe f847 	bl	800642c <HAL_RCCEx_GetD3PCLK1Freq>
 800839e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a2:	4618      	mov	r0, r3
 80083a4:	f04f 0100 	mov.w	r1, #0
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d067      	beq.n	8008480 <UART_SetConfig+0xe00>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d05e      	beq.n	8008476 <UART_SetConfig+0xdf6>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d055      	beq.n	800846c <UART_SetConfig+0xdec>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d04c      	beq.n	8008462 <UART_SetConfig+0xde2>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	2b04      	cmp	r3, #4
 80083ce:	d043      	beq.n	8008458 <UART_SetConfig+0xdd8>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d4:	2b05      	cmp	r3, #5
 80083d6:	d03a      	beq.n	800844e <UART_SetConfig+0xdce>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083dc:	2b06      	cmp	r3, #6
 80083de:	d031      	beq.n	8008444 <UART_SetConfig+0xdc4>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e4:	2b07      	cmp	r3, #7
 80083e6:	d028      	beq.n	800843a <UART_SetConfig+0xdba>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ec:	2b08      	cmp	r3, #8
 80083ee:	d01f      	beq.n	8008430 <UART_SetConfig+0xdb0>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f4:	2b09      	cmp	r3, #9
 80083f6:	d016      	beq.n	8008426 <UART_SetConfig+0xda6>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fc:	2b0a      	cmp	r3, #10
 80083fe:	d00d      	beq.n	800841c <UART_SetConfig+0xd9c>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008404:	2b0b      	cmp	r3, #11
 8008406:	d104      	bne.n	8008412 <UART_SetConfig+0xd92>
 8008408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800840c:	f04f 0400 	mov.w	r4, #0
 8008410:	e03a      	b.n	8008488 <UART_SetConfig+0xe08>
 8008412:	f04f 0301 	mov.w	r3, #1
 8008416:	f04f 0400 	mov.w	r4, #0
 800841a:	e035      	b.n	8008488 <UART_SetConfig+0xe08>
 800841c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008420:	f04f 0400 	mov.w	r4, #0
 8008424:	e030      	b.n	8008488 <UART_SetConfig+0xe08>
 8008426:	f04f 0340 	mov.w	r3, #64	; 0x40
 800842a:	f04f 0400 	mov.w	r4, #0
 800842e:	e02b      	b.n	8008488 <UART_SetConfig+0xe08>
 8008430:	f04f 0320 	mov.w	r3, #32
 8008434:	f04f 0400 	mov.w	r4, #0
 8008438:	e026      	b.n	8008488 <UART_SetConfig+0xe08>
 800843a:	f04f 0310 	mov.w	r3, #16
 800843e:	f04f 0400 	mov.w	r4, #0
 8008442:	e021      	b.n	8008488 <UART_SetConfig+0xe08>
 8008444:	f04f 030c 	mov.w	r3, #12
 8008448:	f04f 0400 	mov.w	r4, #0
 800844c:	e01c      	b.n	8008488 <UART_SetConfig+0xe08>
 800844e:	f04f 030a 	mov.w	r3, #10
 8008452:	f04f 0400 	mov.w	r4, #0
 8008456:	e017      	b.n	8008488 <UART_SetConfig+0xe08>
 8008458:	f04f 0308 	mov.w	r3, #8
 800845c:	f04f 0400 	mov.w	r4, #0
 8008460:	e012      	b.n	8008488 <UART_SetConfig+0xe08>
 8008462:	f04f 0306 	mov.w	r3, #6
 8008466:	f04f 0400 	mov.w	r4, #0
 800846a:	e00d      	b.n	8008488 <UART_SetConfig+0xe08>
 800846c:	f04f 0304 	mov.w	r3, #4
 8008470:	f04f 0400 	mov.w	r4, #0
 8008474:	e008      	b.n	8008488 <UART_SetConfig+0xe08>
 8008476:	f04f 0302 	mov.w	r3, #2
 800847a:	f04f 0400 	mov.w	r4, #0
 800847e:	e003      	b.n	8008488 <UART_SetConfig+0xe08>
 8008480:	f04f 0301 	mov.w	r3, #1
 8008484:	f04f 0400 	mov.w	r4, #0
 8008488:	461a      	mov	r2, r3
 800848a:	4623      	mov	r3, r4
 800848c:	f7f7 ff78 	bl	8000380 <__aeabi_uldivmod>
 8008490:	4603      	mov	r3, r0
 8008492:	460c      	mov	r4, r1
 8008494:	4619      	mov	r1, r3
 8008496:	4622      	mov	r2, r4
 8008498:	f04f 0300 	mov.w	r3, #0
 800849c:	f04f 0400 	mov.w	r4, #0
 80084a0:	0214      	lsls	r4, r2, #8
 80084a2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80084a6:	020b      	lsls	r3, r1, #8
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	6852      	ldr	r2, [r2, #4]
 80084ac:	0852      	lsrs	r2, r2, #1
 80084ae:	4611      	mov	r1, r2
 80084b0:	f04f 0200 	mov.w	r2, #0
 80084b4:	eb13 0b01 	adds.w	fp, r3, r1
 80084b8:	eb44 0c02 	adc.w	ip, r4, r2
 80084bc:	4658      	mov	r0, fp
 80084be:	4661      	mov	r1, ip
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f04f 0400 	mov.w	r4, #0
 80084c8:	461a      	mov	r2, r3
 80084ca:	4623      	mov	r3, r4
 80084cc:	f7f7 ff58 	bl	8000380 <__aeabi_uldivmod>
 80084d0:	4603      	mov	r3, r0
 80084d2:	460c      	mov	r4, r1
 80084d4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084d6:	e389      	b.n	8008bec <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084d8:	f107 0318 	add.w	r3, r7, #24
 80084dc:	4618      	mov	r0, r3
 80084de:	f7fd ffbb 	bl	8006458 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084e2:	69fb      	ldr	r3, [r7, #28]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f04f 0100 	mov.w	r1, #0
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d067      	beq.n	80085c2 <UART_SetConfig+0xf42>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d05e      	beq.n	80085b8 <UART_SetConfig+0xf38>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d055      	beq.n	80085ae <UART_SetConfig+0xf2e>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008506:	2b03      	cmp	r3, #3
 8008508:	d04c      	beq.n	80085a4 <UART_SetConfig+0xf24>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850e:	2b04      	cmp	r3, #4
 8008510:	d043      	beq.n	800859a <UART_SetConfig+0xf1a>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008516:	2b05      	cmp	r3, #5
 8008518:	d03a      	beq.n	8008590 <UART_SetConfig+0xf10>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851e:	2b06      	cmp	r3, #6
 8008520:	d031      	beq.n	8008586 <UART_SetConfig+0xf06>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008526:	2b07      	cmp	r3, #7
 8008528:	d028      	beq.n	800857c <UART_SetConfig+0xefc>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852e:	2b08      	cmp	r3, #8
 8008530:	d01f      	beq.n	8008572 <UART_SetConfig+0xef2>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008536:	2b09      	cmp	r3, #9
 8008538:	d016      	beq.n	8008568 <UART_SetConfig+0xee8>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853e:	2b0a      	cmp	r3, #10
 8008540:	d00d      	beq.n	800855e <UART_SetConfig+0xede>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	2b0b      	cmp	r3, #11
 8008548:	d104      	bne.n	8008554 <UART_SetConfig+0xed4>
 800854a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800854e:	f04f 0400 	mov.w	r4, #0
 8008552:	e03a      	b.n	80085ca <UART_SetConfig+0xf4a>
 8008554:	f04f 0301 	mov.w	r3, #1
 8008558:	f04f 0400 	mov.w	r4, #0
 800855c:	e035      	b.n	80085ca <UART_SetConfig+0xf4a>
 800855e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008562:	f04f 0400 	mov.w	r4, #0
 8008566:	e030      	b.n	80085ca <UART_SetConfig+0xf4a>
 8008568:	f04f 0340 	mov.w	r3, #64	; 0x40
 800856c:	f04f 0400 	mov.w	r4, #0
 8008570:	e02b      	b.n	80085ca <UART_SetConfig+0xf4a>
 8008572:	f04f 0320 	mov.w	r3, #32
 8008576:	f04f 0400 	mov.w	r4, #0
 800857a:	e026      	b.n	80085ca <UART_SetConfig+0xf4a>
 800857c:	f04f 0310 	mov.w	r3, #16
 8008580:	f04f 0400 	mov.w	r4, #0
 8008584:	e021      	b.n	80085ca <UART_SetConfig+0xf4a>
 8008586:	f04f 030c 	mov.w	r3, #12
 800858a:	f04f 0400 	mov.w	r4, #0
 800858e:	e01c      	b.n	80085ca <UART_SetConfig+0xf4a>
 8008590:	f04f 030a 	mov.w	r3, #10
 8008594:	f04f 0400 	mov.w	r4, #0
 8008598:	e017      	b.n	80085ca <UART_SetConfig+0xf4a>
 800859a:	f04f 0308 	mov.w	r3, #8
 800859e:	f04f 0400 	mov.w	r4, #0
 80085a2:	e012      	b.n	80085ca <UART_SetConfig+0xf4a>
 80085a4:	f04f 0306 	mov.w	r3, #6
 80085a8:	f04f 0400 	mov.w	r4, #0
 80085ac:	e00d      	b.n	80085ca <UART_SetConfig+0xf4a>
 80085ae:	f04f 0304 	mov.w	r3, #4
 80085b2:	f04f 0400 	mov.w	r4, #0
 80085b6:	e008      	b.n	80085ca <UART_SetConfig+0xf4a>
 80085b8:	f04f 0302 	mov.w	r3, #2
 80085bc:	f04f 0400 	mov.w	r4, #0
 80085c0:	e003      	b.n	80085ca <UART_SetConfig+0xf4a>
 80085c2:	f04f 0301 	mov.w	r3, #1
 80085c6:	f04f 0400 	mov.w	r4, #0
 80085ca:	461a      	mov	r2, r3
 80085cc:	4623      	mov	r3, r4
 80085ce:	f7f7 fed7 	bl	8000380 <__aeabi_uldivmod>
 80085d2:	4603      	mov	r3, r0
 80085d4:	460c      	mov	r4, r1
 80085d6:	4619      	mov	r1, r3
 80085d8:	4622      	mov	r2, r4
 80085da:	f04f 0300 	mov.w	r3, #0
 80085de:	f04f 0400 	mov.w	r4, #0
 80085e2:	0214      	lsls	r4, r2, #8
 80085e4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80085e8:	020b      	lsls	r3, r1, #8
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	6852      	ldr	r2, [r2, #4]
 80085ee:	0852      	lsrs	r2, r2, #1
 80085f0:	4611      	mov	r1, r2
 80085f2:	f04f 0200 	mov.w	r2, #0
 80085f6:	eb13 0b01 	adds.w	fp, r3, r1
 80085fa:	eb44 0c02 	adc.w	ip, r4, r2
 80085fe:	4658      	mov	r0, fp
 8008600:	4661      	mov	r1, ip
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f04f 0400 	mov.w	r4, #0
 800860a:	461a      	mov	r2, r3
 800860c:	4623      	mov	r3, r4
 800860e:	f7f7 feb7 	bl	8000380 <__aeabi_uldivmod>
 8008612:	4603      	mov	r3, r0
 8008614:	460c      	mov	r4, r1
 8008616:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008618:	e2e8      	b.n	8008bec <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800861a:	f107 030c 	add.w	r3, r7, #12
 800861e:	4618      	mov	r0, r3
 8008620:	f7fe f866 	bl	80066f0 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	4618      	mov	r0, r3
 8008628:	f04f 0100 	mov.w	r1, #0
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008630:	2b00      	cmp	r3, #0
 8008632:	d067      	beq.n	8008704 <UART_SetConfig+0x1084>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008638:	2b01      	cmp	r3, #1
 800863a:	d05e      	beq.n	80086fa <UART_SetConfig+0x107a>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008640:	2b02      	cmp	r3, #2
 8008642:	d055      	beq.n	80086f0 <UART_SetConfig+0x1070>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008648:	2b03      	cmp	r3, #3
 800864a:	d04c      	beq.n	80086e6 <UART_SetConfig+0x1066>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008650:	2b04      	cmp	r3, #4
 8008652:	d043      	beq.n	80086dc <UART_SetConfig+0x105c>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008658:	2b05      	cmp	r3, #5
 800865a:	d03a      	beq.n	80086d2 <UART_SetConfig+0x1052>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008660:	2b06      	cmp	r3, #6
 8008662:	d031      	beq.n	80086c8 <UART_SetConfig+0x1048>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008668:	2b07      	cmp	r3, #7
 800866a:	d028      	beq.n	80086be <UART_SetConfig+0x103e>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008670:	2b08      	cmp	r3, #8
 8008672:	d01f      	beq.n	80086b4 <UART_SetConfig+0x1034>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008678:	2b09      	cmp	r3, #9
 800867a:	d016      	beq.n	80086aa <UART_SetConfig+0x102a>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	2b0a      	cmp	r3, #10
 8008682:	d00d      	beq.n	80086a0 <UART_SetConfig+0x1020>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008688:	2b0b      	cmp	r3, #11
 800868a:	d104      	bne.n	8008696 <UART_SetConfig+0x1016>
 800868c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008690:	f04f 0400 	mov.w	r4, #0
 8008694:	e03a      	b.n	800870c <UART_SetConfig+0x108c>
 8008696:	f04f 0301 	mov.w	r3, #1
 800869a:	f04f 0400 	mov.w	r4, #0
 800869e:	e035      	b.n	800870c <UART_SetConfig+0x108c>
 80086a0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80086a4:	f04f 0400 	mov.w	r4, #0
 80086a8:	e030      	b.n	800870c <UART_SetConfig+0x108c>
 80086aa:	f04f 0340 	mov.w	r3, #64	; 0x40
 80086ae:	f04f 0400 	mov.w	r4, #0
 80086b2:	e02b      	b.n	800870c <UART_SetConfig+0x108c>
 80086b4:	f04f 0320 	mov.w	r3, #32
 80086b8:	f04f 0400 	mov.w	r4, #0
 80086bc:	e026      	b.n	800870c <UART_SetConfig+0x108c>
 80086be:	f04f 0310 	mov.w	r3, #16
 80086c2:	f04f 0400 	mov.w	r4, #0
 80086c6:	e021      	b.n	800870c <UART_SetConfig+0x108c>
 80086c8:	f04f 030c 	mov.w	r3, #12
 80086cc:	f04f 0400 	mov.w	r4, #0
 80086d0:	e01c      	b.n	800870c <UART_SetConfig+0x108c>
 80086d2:	f04f 030a 	mov.w	r3, #10
 80086d6:	f04f 0400 	mov.w	r4, #0
 80086da:	e017      	b.n	800870c <UART_SetConfig+0x108c>
 80086dc:	f04f 0308 	mov.w	r3, #8
 80086e0:	f04f 0400 	mov.w	r4, #0
 80086e4:	e012      	b.n	800870c <UART_SetConfig+0x108c>
 80086e6:	f04f 0306 	mov.w	r3, #6
 80086ea:	f04f 0400 	mov.w	r4, #0
 80086ee:	e00d      	b.n	800870c <UART_SetConfig+0x108c>
 80086f0:	f04f 0304 	mov.w	r3, #4
 80086f4:	f04f 0400 	mov.w	r4, #0
 80086f8:	e008      	b.n	800870c <UART_SetConfig+0x108c>
 80086fa:	f04f 0302 	mov.w	r3, #2
 80086fe:	f04f 0400 	mov.w	r4, #0
 8008702:	e003      	b.n	800870c <UART_SetConfig+0x108c>
 8008704:	f04f 0301 	mov.w	r3, #1
 8008708:	f04f 0400 	mov.w	r4, #0
 800870c:	461a      	mov	r2, r3
 800870e:	4623      	mov	r3, r4
 8008710:	f7f7 fe36 	bl	8000380 <__aeabi_uldivmod>
 8008714:	4603      	mov	r3, r0
 8008716:	460c      	mov	r4, r1
 8008718:	4619      	mov	r1, r3
 800871a:	4622      	mov	r2, r4
 800871c:	f04f 0300 	mov.w	r3, #0
 8008720:	f04f 0400 	mov.w	r4, #0
 8008724:	0214      	lsls	r4, r2, #8
 8008726:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800872a:	020b      	lsls	r3, r1, #8
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	6852      	ldr	r2, [r2, #4]
 8008730:	0852      	lsrs	r2, r2, #1
 8008732:	4611      	mov	r1, r2
 8008734:	f04f 0200 	mov.w	r2, #0
 8008738:	eb13 0b01 	adds.w	fp, r3, r1
 800873c:	eb44 0c02 	adc.w	ip, r4, r2
 8008740:	4658      	mov	r0, fp
 8008742:	4661      	mov	r1, ip
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	f04f 0400 	mov.w	r4, #0
 800874c:	461a      	mov	r2, r3
 800874e:	4623      	mov	r3, r4
 8008750:	f7f7 fe16 	bl	8000380 <__aeabi_uldivmod>
 8008754:	4603      	mov	r3, r0
 8008756:	460c      	mov	r4, r1
 8008758:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800875a:	e247      	b.n	8008bec <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800875c:	4b96      	ldr	r3, [pc, #600]	; (80089b8 <UART_SetConfig+0x1338>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 0320 	and.w	r3, r3, #32
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 80a3 	beq.w	80088b0 <UART_SetConfig+0x1230>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800876a:	4b93      	ldr	r3, [pc, #588]	; (80089b8 <UART_SetConfig+0x1338>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	08db      	lsrs	r3, r3, #3
 8008770:	f003 0303 	and.w	r3, r3, #3
 8008774:	4a91      	ldr	r2, [pc, #580]	; (80089bc <UART_SetConfig+0x133c>)
 8008776:	fa22 f303 	lsr.w	r3, r2, r3
 800877a:	4618      	mov	r0, r3
 800877c:	f04f 0100 	mov.w	r1, #0
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	2b00      	cmp	r3, #0
 8008786:	d067      	beq.n	8008858 <UART_SetConfig+0x11d8>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878c:	2b01      	cmp	r3, #1
 800878e:	d05e      	beq.n	800884e <UART_SetConfig+0x11ce>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	2b02      	cmp	r3, #2
 8008796:	d055      	beq.n	8008844 <UART_SetConfig+0x11c4>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879c:	2b03      	cmp	r3, #3
 800879e:	d04c      	beq.n	800883a <UART_SetConfig+0x11ba>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a4:	2b04      	cmp	r3, #4
 80087a6:	d043      	beq.n	8008830 <UART_SetConfig+0x11b0>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ac:	2b05      	cmp	r3, #5
 80087ae:	d03a      	beq.n	8008826 <UART_SetConfig+0x11a6>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b4:	2b06      	cmp	r3, #6
 80087b6:	d031      	beq.n	800881c <UART_SetConfig+0x119c>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087bc:	2b07      	cmp	r3, #7
 80087be:	d028      	beq.n	8008812 <UART_SetConfig+0x1192>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c4:	2b08      	cmp	r3, #8
 80087c6:	d01f      	beq.n	8008808 <UART_SetConfig+0x1188>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087cc:	2b09      	cmp	r3, #9
 80087ce:	d016      	beq.n	80087fe <UART_SetConfig+0x117e>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d4:	2b0a      	cmp	r3, #10
 80087d6:	d00d      	beq.n	80087f4 <UART_SetConfig+0x1174>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087dc:	2b0b      	cmp	r3, #11
 80087de:	d104      	bne.n	80087ea <UART_SetConfig+0x116a>
 80087e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087e4:	f04f 0400 	mov.w	r4, #0
 80087e8:	e03a      	b.n	8008860 <UART_SetConfig+0x11e0>
 80087ea:	f04f 0301 	mov.w	r3, #1
 80087ee:	f04f 0400 	mov.w	r4, #0
 80087f2:	e035      	b.n	8008860 <UART_SetConfig+0x11e0>
 80087f4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80087f8:	f04f 0400 	mov.w	r4, #0
 80087fc:	e030      	b.n	8008860 <UART_SetConfig+0x11e0>
 80087fe:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008802:	f04f 0400 	mov.w	r4, #0
 8008806:	e02b      	b.n	8008860 <UART_SetConfig+0x11e0>
 8008808:	f04f 0320 	mov.w	r3, #32
 800880c:	f04f 0400 	mov.w	r4, #0
 8008810:	e026      	b.n	8008860 <UART_SetConfig+0x11e0>
 8008812:	f04f 0310 	mov.w	r3, #16
 8008816:	f04f 0400 	mov.w	r4, #0
 800881a:	e021      	b.n	8008860 <UART_SetConfig+0x11e0>
 800881c:	f04f 030c 	mov.w	r3, #12
 8008820:	f04f 0400 	mov.w	r4, #0
 8008824:	e01c      	b.n	8008860 <UART_SetConfig+0x11e0>
 8008826:	f04f 030a 	mov.w	r3, #10
 800882a:	f04f 0400 	mov.w	r4, #0
 800882e:	e017      	b.n	8008860 <UART_SetConfig+0x11e0>
 8008830:	f04f 0308 	mov.w	r3, #8
 8008834:	f04f 0400 	mov.w	r4, #0
 8008838:	e012      	b.n	8008860 <UART_SetConfig+0x11e0>
 800883a:	f04f 0306 	mov.w	r3, #6
 800883e:	f04f 0400 	mov.w	r4, #0
 8008842:	e00d      	b.n	8008860 <UART_SetConfig+0x11e0>
 8008844:	f04f 0304 	mov.w	r3, #4
 8008848:	f04f 0400 	mov.w	r4, #0
 800884c:	e008      	b.n	8008860 <UART_SetConfig+0x11e0>
 800884e:	f04f 0302 	mov.w	r3, #2
 8008852:	f04f 0400 	mov.w	r4, #0
 8008856:	e003      	b.n	8008860 <UART_SetConfig+0x11e0>
 8008858:	f04f 0301 	mov.w	r3, #1
 800885c:	f04f 0400 	mov.w	r4, #0
 8008860:	461a      	mov	r2, r3
 8008862:	4623      	mov	r3, r4
 8008864:	f7f7 fd8c 	bl	8000380 <__aeabi_uldivmod>
 8008868:	4603      	mov	r3, r0
 800886a:	460c      	mov	r4, r1
 800886c:	4619      	mov	r1, r3
 800886e:	4622      	mov	r2, r4
 8008870:	f04f 0300 	mov.w	r3, #0
 8008874:	f04f 0400 	mov.w	r4, #0
 8008878:	0214      	lsls	r4, r2, #8
 800887a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800887e:	020b      	lsls	r3, r1, #8
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	6852      	ldr	r2, [r2, #4]
 8008884:	0852      	lsrs	r2, r2, #1
 8008886:	4611      	mov	r1, r2
 8008888:	f04f 0200 	mov.w	r2, #0
 800888c:	eb13 0b01 	adds.w	fp, r3, r1
 8008890:	eb44 0c02 	adc.w	ip, r4, r2
 8008894:	4658      	mov	r0, fp
 8008896:	4661      	mov	r1, ip
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f04f 0400 	mov.w	r4, #0
 80088a0:	461a      	mov	r2, r3
 80088a2:	4623      	mov	r3, r4
 80088a4:	f7f7 fd6c 	bl	8000380 <__aeabi_uldivmod>
 80088a8:	4603      	mov	r3, r0
 80088aa:	460c      	mov	r4, r1
 80088ac:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80088ae:	e19d      	b.n	8008bec <UART_SetConfig+0x156c>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d05b      	beq.n	8008970 <UART_SetConfig+0x12f0>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d053      	beq.n	8008968 <UART_SetConfig+0x12e8>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d04b      	beq.n	8008960 <UART_SetConfig+0x12e0>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088cc:	2b03      	cmp	r3, #3
 80088ce:	d043      	beq.n	8008958 <UART_SetConfig+0x12d8>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d4:	2b04      	cmp	r3, #4
 80088d6:	d03b      	beq.n	8008950 <UART_SetConfig+0x12d0>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088dc:	2b05      	cmp	r3, #5
 80088de:	d033      	beq.n	8008948 <UART_SetConfig+0x12c8>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	2b06      	cmp	r3, #6
 80088e6:	d02b      	beq.n	8008940 <UART_SetConfig+0x12c0>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ec:	2b07      	cmp	r3, #7
 80088ee:	d023      	beq.n	8008938 <UART_SetConfig+0x12b8>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f4:	2b08      	cmp	r3, #8
 80088f6:	d01b      	beq.n	8008930 <UART_SetConfig+0x12b0>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fc:	2b09      	cmp	r3, #9
 80088fe:	d013      	beq.n	8008928 <UART_SetConfig+0x12a8>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008904:	2b0a      	cmp	r3, #10
 8008906:	d00b      	beq.n	8008920 <UART_SetConfig+0x12a0>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890c:	2b0b      	cmp	r3, #11
 800890e:	d103      	bne.n	8008918 <UART_SetConfig+0x1298>
 8008910:	4b2a      	ldr	r3, [pc, #168]	; (80089bc <UART_SetConfig+0x133c>)
 8008912:	f04f 0400 	mov.w	r4, #0
 8008916:	e02e      	b.n	8008976 <UART_SetConfig+0x12f6>
 8008918:	4b29      	ldr	r3, [pc, #164]	; (80089c0 <UART_SetConfig+0x1340>)
 800891a:	f04f 0403 	mov.w	r4, #3
 800891e:	e02a      	b.n	8008976 <UART_SetConfig+0x12f6>
 8008920:	4b28      	ldr	r3, [pc, #160]	; (80089c4 <UART_SetConfig+0x1344>)
 8008922:	f04f 0400 	mov.w	r4, #0
 8008926:	e026      	b.n	8008976 <UART_SetConfig+0x12f6>
 8008928:	4b27      	ldr	r3, [pc, #156]	; (80089c8 <UART_SetConfig+0x1348>)
 800892a:	f04f 0400 	mov.w	r4, #0
 800892e:	e022      	b.n	8008976 <UART_SetConfig+0x12f6>
 8008930:	4b26      	ldr	r3, [pc, #152]	; (80089cc <UART_SetConfig+0x134c>)
 8008932:	f04f 0400 	mov.w	r4, #0
 8008936:	e01e      	b.n	8008976 <UART_SetConfig+0x12f6>
 8008938:	4b25      	ldr	r3, [pc, #148]	; (80089d0 <UART_SetConfig+0x1350>)
 800893a:	f04f 0400 	mov.w	r4, #0
 800893e:	e01a      	b.n	8008976 <UART_SetConfig+0x12f6>
 8008940:	a419      	add	r4, pc, #100	; (adr r4, 80089a8 <UART_SetConfig+0x1328>)
 8008942:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008946:	e016      	b.n	8008976 <UART_SetConfig+0x12f6>
 8008948:	4b22      	ldr	r3, [pc, #136]	; (80089d4 <UART_SetConfig+0x1354>)
 800894a:	f04f 0400 	mov.w	r4, #0
 800894e:	e012      	b.n	8008976 <UART_SetConfig+0x12f6>
 8008950:	4b21      	ldr	r3, [pc, #132]	; (80089d8 <UART_SetConfig+0x1358>)
 8008952:	f04f 0400 	mov.w	r4, #0
 8008956:	e00e      	b.n	8008976 <UART_SetConfig+0x12f6>
 8008958:	a415      	add	r4, pc, #84	; (adr r4, 80089b0 <UART_SetConfig+0x1330>)
 800895a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800895e:	e00a      	b.n	8008976 <UART_SetConfig+0x12f6>
 8008960:	4b1e      	ldr	r3, [pc, #120]	; (80089dc <UART_SetConfig+0x135c>)
 8008962:	f04f 0400 	mov.w	r4, #0
 8008966:	e006      	b.n	8008976 <UART_SetConfig+0x12f6>
 8008968:	4b1d      	ldr	r3, [pc, #116]	; (80089e0 <UART_SetConfig+0x1360>)
 800896a:	f04f 0401 	mov.w	r4, #1
 800896e:	e002      	b.n	8008976 <UART_SetConfig+0x12f6>
 8008970:	4b13      	ldr	r3, [pc, #76]	; (80089c0 <UART_SetConfig+0x1340>)
 8008972:	f04f 0403 	mov.w	r4, #3
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	6852      	ldr	r2, [r2, #4]
 800897a:	0852      	lsrs	r2, r2, #1
 800897c:	4611      	mov	r1, r2
 800897e:	f04f 0200 	mov.w	r2, #0
 8008982:	eb13 0b01 	adds.w	fp, r3, r1
 8008986:	eb44 0c02 	adc.w	ip, r4, r2
 800898a:	4658      	mov	r0, fp
 800898c:	4661      	mov	r1, ip
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f04f 0400 	mov.w	r4, #0
 8008996:	461a      	mov	r2, r3
 8008998:	4623      	mov	r3, r4
 800899a:	f7f7 fcf1 	bl	8000380 <__aeabi_uldivmod>
 800899e:	4603      	mov	r3, r0
 80089a0:	460c      	mov	r4, r1
 80089a2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80089a4:	e122      	b.n	8008bec <UART_SetConfig+0x156c>
 80089a6:	bf00      	nop
 80089a8:	51615500 	.word	0x51615500
 80089ac:	00000000 	.word	0x00000000
 80089b0:	a2c2aa00 	.word	0xa2c2aa00
 80089b4:	00000000 	.word	0x00000000
 80089b8:	58024400 	.word	0x58024400
 80089bc:	03d09000 	.word	0x03d09000
 80089c0:	d0900000 	.word	0xd0900000
 80089c4:	07a12000 	.word	0x07a12000
 80089c8:	0f424000 	.word	0x0f424000
 80089cc:	1e848000 	.word	0x1e848000
 80089d0:	3d090000 	.word	0x3d090000
 80089d4:	61a80000 	.word	0x61a80000
 80089d8:	7a120000 	.word	0x7a120000
 80089dc:	f4240000 	.word	0xf4240000
 80089e0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d05b      	beq.n	8008aa4 <UART_SetConfig+0x1424>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d053      	beq.n	8008a9c <UART_SetConfig+0x141c>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d04b      	beq.n	8008a94 <UART_SetConfig+0x1414>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d043      	beq.n	8008a8c <UART_SetConfig+0x140c>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	d03b      	beq.n	8008a84 <UART_SetConfig+0x1404>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a10:	2b05      	cmp	r3, #5
 8008a12:	d033      	beq.n	8008a7c <UART_SetConfig+0x13fc>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a18:	2b06      	cmp	r3, #6
 8008a1a:	d02b      	beq.n	8008a74 <UART_SetConfig+0x13f4>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a20:	2b07      	cmp	r3, #7
 8008a22:	d023      	beq.n	8008a6c <UART_SetConfig+0x13ec>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	2b08      	cmp	r3, #8
 8008a2a:	d01b      	beq.n	8008a64 <UART_SetConfig+0x13e4>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a30:	2b09      	cmp	r3, #9
 8008a32:	d013      	beq.n	8008a5c <UART_SetConfig+0x13dc>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a38:	2b0a      	cmp	r3, #10
 8008a3a:	d00b      	beq.n	8008a54 <UART_SetConfig+0x13d4>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a40:	2b0b      	cmp	r3, #11
 8008a42:	d103      	bne.n	8008a4c <UART_SetConfig+0x13cc>
 8008a44:	4bc0      	ldr	r3, [pc, #768]	; (8008d48 <UART_SetConfig+0x16c8>)
 8008a46:	f04f 0400 	mov.w	r4, #0
 8008a4a:	e02e      	b.n	8008aaa <UART_SetConfig+0x142a>
 8008a4c:	4bbf      	ldr	r3, [pc, #764]	; (8008d4c <UART_SetConfig+0x16cc>)
 8008a4e:	f04f 0400 	mov.w	r4, #0
 8008a52:	e02a      	b.n	8008aaa <UART_SetConfig+0x142a>
 8008a54:	4bbe      	ldr	r3, [pc, #760]	; (8008d50 <UART_SetConfig+0x16d0>)
 8008a56:	f04f 0400 	mov.w	r4, #0
 8008a5a:	e026      	b.n	8008aaa <UART_SetConfig+0x142a>
 8008a5c:	4bbd      	ldr	r3, [pc, #756]	; (8008d54 <UART_SetConfig+0x16d4>)
 8008a5e:	f04f 0400 	mov.w	r4, #0
 8008a62:	e022      	b.n	8008aaa <UART_SetConfig+0x142a>
 8008a64:	4bbc      	ldr	r3, [pc, #752]	; (8008d58 <UART_SetConfig+0x16d8>)
 8008a66:	f04f 0400 	mov.w	r4, #0
 8008a6a:	e01e      	b.n	8008aaa <UART_SetConfig+0x142a>
 8008a6c:	4bbb      	ldr	r3, [pc, #748]	; (8008d5c <UART_SetConfig+0x16dc>)
 8008a6e:	f04f 0400 	mov.w	r4, #0
 8008a72:	e01a      	b.n	8008aaa <UART_SetConfig+0x142a>
 8008a74:	a4b0      	add	r4, pc, #704	; (adr r4, 8008d38 <UART_SetConfig+0x16b8>)
 8008a76:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008a7a:	e016      	b.n	8008aaa <UART_SetConfig+0x142a>
 8008a7c:	4bb8      	ldr	r3, [pc, #736]	; (8008d60 <UART_SetConfig+0x16e0>)
 8008a7e:	f04f 0400 	mov.w	r4, #0
 8008a82:	e012      	b.n	8008aaa <UART_SetConfig+0x142a>
 8008a84:	4bb7      	ldr	r3, [pc, #732]	; (8008d64 <UART_SetConfig+0x16e4>)
 8008a86:	f04f 0400 	mov.w	r4, #0
 8008a8a:	e00e      	b.n	8008aaa <UART_SetConfig+0x142a>
 8008a8c:	a4ac      	add	r4, pc, #688	; (adr r4, 8008d40 <UART_SetConfig+0x16c0>)
 8008a8e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008a92:	e00a      	b.n	8008aaa <UART_SetConfig+0x142a>
 8008a94:	4bb4      	ldr	r3, [pc, #720]	; (8008d68 <UART_SetConfig+0x16e8>)
 8008a96:	f04f 0400 	mov.w	r4, #0
 8008a9a:	e006      	b.n	8008aaa <UART_SetConfig+0x142a>
 8008a9c:	4bb3      	ldr	r3, [pc, #716]	; (8008d6c <UART_SetConfig+0x16ec>)
 8008a9e:	f04f 0400 	mov.w	r4, #0
 8008aa2:	e002      	b.n	8008aaa <UART_SetConfig+0x142a>
 8008aa4:	4ba9      	ldr	r3, [pc, #676]	; (8008d4c <UART_SetConfig+0x16cc>)
 8008aa6:	f04f 0400 	mov.w	r4, #0
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	6852      	ldr	r2, [r2, #4]
 8008aae:	0852      	lsrs	r2, r2, #1
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	f04f 0200 	mov.w	r2, #0
 8008ab6:	eb13 0b01 	adds.w	fp, r3, r1
 8008aba:	eb44 0c02 	adc.w	ip, r4, r2
 8008abe:	4658      	mov	r0, fp
 8008ac0:	4661      	mov	r1, ip
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	f04f 0400 	mov.w	r4, #0
 8008aca:	461a      	mov	r2, r3
 8008acc:	4623      	mov	r3, r4
 8008ace:	f7f7 fc57 	bl	8000380 <__aeabi_uldivmod>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	460c      	mov	r4, r1
 8008ad6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008ad8:	e088      	b.n	8008bec <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d064      	beq.n	8008bac <UART_SetConfig+0x152c>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d05b      	beq.n	8008ba2 <UART_SetConfig+0x1522>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d052      	beq.n	8008b98 <UART_SetConfig+0x1518>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af6:	2b03      	cmp	r3, #3
 8008af8:	d04a      	beq.n	8008b90 <UART_SetConfig+0x1510>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afe:	2b04      	cmp	r3, #4
 8008b00:	d041      	beq.n	8008b86 <UART_SetConfig+0x1506>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b06:	2b05      	cmp	r3, #5
 8008b08:	d039      	beq.n	8008b7e <UART_SetConfig+0x14fe>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0e:	2b06      	cmp	r3, #6
 8008b10:	d031      	beq.n	8008b76 <UART_SetConfig+0x14f6>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b16:	2b07      	cmp	r3, #7
 8008b18:	d028      	beq.n	8008b6c <UART_SetConfig+0x14ec>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1e:	2b08      	cmp	r3, #8
 8008b20:	d01f      	beq.n	8008b62 <UART_SetConfig+0x14e2>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b26:	2b09      	cmp	r3, #9
 8008b28:	d016      	beq.n	8008b58 <UART_SetConfig+0x14d8>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2e:	2b0a      	cmp	r3, #10
 8008b30:	d00d      	beq.n	8008b4e <UART_SetConfig+0x14ce>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b36:	2b0b      	cmp	r3, #11
 8008b38:	d104      	bne.n	8008b44 <UART_SetConfig+0x14c4>
 8008b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b3e:	f04f 0400 	mov.w	r4, #0
 8008b42:	e037      	b.n	8008bb4 <UART_SetConfig+0x1534>
 8008b44:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008b48:	f04f 0400 	mov.w	r4, #0
 8008b4c:	e032      	b.n	8008bb4 <UART_SetConfig+0x1534>
 8008b4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b52:	f04f 0400 	mov.w	r4, #0
 8008b56:	e02d      	b.n	8008bb4 <UART_SetConfig+0x1534>
 8008b58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008b5c:	f04f 0400 	mov.w	r4, #0
 8008b60:	e028      	b.n	8008bb4 <UART_SetConfig+0x1534>
 8008b62:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008b66:	f04f 0400 	mov.w	r4, #0
 8008b6a:	e023      	b.n	8008bb4 <UART_SetConfig+0x1534>
 8008b6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b70:	f04f 0400 	mov.w	r4, #0
 8008b74:	e01e      	b.n	8008bb4 <UART_SetConfig+0x1534>
 8008b76:	4b7e      	ldr	r3, [pc, #504]	; (8008d70 <UART_SetConfig+0x16f0>)
 8008b78:	f04f 0400 	mov.w	r4, #0
 8008b7c:	e01a      	b.n	8008bb4 <UART_SetConfig+0x1534>
 8008b7e:	4b7d      	ldr	r3, [pc, #500]	; (8008d74 <UART_SetConfig+0x16f4>)
 8008b80:	f04f 0400 	mov.w	r4, #0
 8008b84:	e016      	b.n	8008bb4 <UART_SetConfig+0x1534>
 8008b86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b8a:	f04f 0400 	mov.w	r4, #0
 8008b8e:	e011      	b.n	8008bb4 <UART_SetConfig+0x1534>
 8008b90:	4b79      	ldr	r3, [pc, #484]	; (8008d78 <UART_SetConfig+0x16f8>)
 8008b92:	f04f 0400 	mov.w	r4, #0
 8008b96:	e00d      	b.n	8008bb4 <UART_SetConfig+0x1534>
 8008b98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b9c:	f04f 0400 	mov.w	r4, #0
 8008ba0:	e008      	b.n	8008bb4 <UART_SetConfig+0x1534>
 8008ba2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008ba6:	f04f 0400 	mov.w	r4, #0
 8008baa:	e003      	b.n	8008bb4 <UART_SetConfig+0x1534>
 8008bac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008bb0:	f04f 0400 	mov.w	r4, #0
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	6852      	ldr	r2, [r2, #4]
 8008bb8:	0852      	lsrs	r2, r2, #1
 8008bba:	4611      	mov	r1, r2
 8008bbc:	f04f 0200 	mov.w	r2, #0
 8008bc0:	eb13 0b01 	adds.w	fp, r3, r1
 8008bc4:	eb44 0c02 	adc.w	ip, r4, r2
 8008bc8:	4658      	mov	r0, fp
 8008bca:	4661      	mov	r1, ip
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	f04f 0400 	mov.w	r4, #0
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	4623      	mov	r3, r4
 8008bd8:	f7f7 fbd2 	bl	8000380 <__aeabi_uldivmod>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	460c      	mov	r4, r1
 8008be0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008be2:	e003      	b.n	8008bec <UART_SetConfig+0x156c>
          default:
            ret = HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8008bea:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bf2:	d309      	bcc.n	8008c08 <UART_SetConfig+0x1588>
 8008bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bfa:	d205      	bcs.n	8008c08 <UART_SetConfig+0x1588>
        {
          huart->Instance->BRR = usartdiv;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c02:	60da      	str	r2, [r3, #12]
 8008c04:	f000 bf85 	b.w	8009b12 <UART_SetConfig+0x2492>
        }
        else
        {
          ret = HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c0e:	f000 bf80 	b.w	8009b12 <UART_SetConfig+0x2492>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c1a:	f040 83da 	bne.w	80093d2 <UART_SetConfig+0x1d52>
  {
    switch (clocksource)
 8008c1e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008c22:	2b40      	cmp	r3, #64	; 0x40
 8008c24:	f200 83b3 	bhi.w	800938e <UART_SetConfig+0x1d0e>
 8008c28:	a201      	add	r2, pc, #4	; (adr r2, 8008c30 <UART_SetConfig+0x15b0>)
 8008c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2e:	bf00      	nop
 8008c30:	08008d7d 	.word	0x08008d7d
 8008c34:	08008e35 	.word	0x08008e35
 8008c38:	0800938f 	.word	0x0800938f
 8008c3c:	0800938f 	.word	0x0800938f
 8008c40:	08008eed 	.word	0x08008eed
 8008c44:	0800938f 	.word	0x0800938f
 8008c48:	0800938f 	.word	0x0800938f
 8008c4c:	0800938f 	.word	0x0800938f
 8008c50:	08008fa9 	.word	0x08008fa9
 8008c54:	0800938f 	.word	0x0800938f
 8008c58:	0800938f 	.word	0x0800938f
 8008c5c:	0800938f 	.word	0x0800938f
 8008c60:	0800938f 	.word	0x0800938f
 8008c64:	0800938f 	.word	0x0800938f
 8008c68:	0800938f 	.word	0x0800938f
 8008c6c:	0800938f 	.word	0x0800938f
 8008c70:	08009065 	.word	0x08009065
 8008c74:	0800938f 	.word	0x0800938f
 8008c78:	0800938f 	.word	0x0800938f
 8008c7c:	0800938f 	.word	0x0800938f
 8008c80:	0800938f 	.word	0x0800938f
 8008c84:	0800938f 	.word	0x0800938f
 8008c88:	0800938f 	.word	0x0800938f
 8008c8c:	0800938f 	.word	0x0800938f
 8008c90:	0800938f 	.word	0x0800938f
 8008c94:	0800938f 	.word	0x0800938f
 8008c98:	0800938f 	.word	0x0800938f
 8008c9c:	0800938f 	.word	0x0800938f
 8008ca0:	0800938f 	.word	0x0800938f
 8008ca4:	0800938f 	.word	0x0800938f
 8008ca8:	0800938f 	.word	0x0800938f
 8008cac:	0800938f 	.word	0x0800938f
 8008cb0:	080091d7 	.word	0x080091d7
 8008cb4:	0800938f 	.word	0x0800938f
 8008cb8:	0800938f 	.word	0x0800938f
 8008cbc:	0800938f 	.word	0x0800938f
 8008cc0:	0800938f 	.word	0x0800938f
 8008cc4:	0800938f 	.word	0x0800938f
 8008cc8:	0800938f 	.word	0x0800938f
 8008ccc:	0800938f 	.word	0x0800938f
 8008cd0:	0800938f 	.word	0x0800938f
 8008cd4:	0800938f 	.word	0x0800938f
 8008cd8:	0800938f 	.word	0x0800938f
 8008cdc:	0800938f 	.word	0x0800938f
 8008ce0:	0800938f 	.word	0x0800938f
 8008ce4:	0800938f 	.word	0x0800938f
 8008ce8:	0800938f 	.word	0x0800938f
 8008cec:	0800938f 	.word	0x0800938f
 8008cf0:	0800938f 	.word	0x0800938f
 8008cf4:	0800938f 	.word	0x0800938f
 8008cf8:	0800938f 	.word	0x0800938f
 8008cfc:	0800938f 	.word	0x0800938f
 8008d00:	0800938f 	.word	0x0800938f
 8008d04:	0800938f 	.word	0x0800938f
 8008d08:	0800938f 	.word	0x0800938f
 8008d0c:	0800938f 	.word	0x0800938f
 8008d10:	0800938f 	.word	0x0800938f
 8008d14:	0800938f 	.word	0x0800938f
 8008d18:	0800938f 	.word	0x0800938f
 8008d1c:	0800938f 	.word	0x0800938f
 8008d20:	0800938f 	.word	0x0800938f
 8008d24:	0800938f 	.word	0x0800938f
 8008d28:	0800938f 	.word	0x0800938f
 8008d2c:	0800938f 	.word	0x0800938f
 8008d30:	080092cd 	.word	0x080092cd
 8008d34:	f3af 8000 	nop.w
 8008d38:	05161500 	.word	0x05161500
 8008d3c:	00000000 	.word	0x00000000
 8008d40:	0a2c2a00 	.word	0x0a2c2a00
 8008d44:	00000000 	.word	0x00000000
 8008d48:	003d0900 	.word	0x003d0900
 8008d4c:	3d090000 	.word	0x3d090000
 8008d50:	007a1200 	.word	0x007a1200
 8008d54:	00f42400 	.word	0x00f42400
 8008d58:	01e84800 	.word	0x01e84800
 8008d5c:	03d09000 	.word	0x03d09000
 8008d60:	061a8000 	.word	0x061a8000
 8008d64:	07a12000 	.word	0x07a12000
 8008d68:	0f424000 	.word	0x0f424000
 8008d6c:	1e848000 	.word	0x1e848000
 8008d70:	000aaa00 	.word	0x000aaa00
 8008d74:	000ccc00 	.word	0x000ccc00
 8008d78:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d7c:	f7fc f968 	bl	8005050 <HAL_RCC_GetPCLK1Freq>
 8008d80:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d044      	beq.n	8008e14 <UART_SetConfig+0x1794>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d03e      	beq.n	8008e10 <UART_SetConfig+0x1790>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	d038      	beq.n	8008e0c <UART_SetConfig+0x178c>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9e:	2b03      	cmp	r3, #3
 8008da0:	d032      	beq.n	8008e08 <UART_SetConfig+0x1788>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da6:	2b04      	cmp	r3, #4
 8008da8:	d02c      	beq.n	8008e04 <UART_SetConfig+0x1784>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dae:	2b05      	cmp	r3, #5
 8008db0:	d026      	beq.n	8008e00 <UART_SetConfig+0x1780>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db6:	2b06      	cmp	r3, #6
 8008db8:	d020      	beq.n	8008dfc <UART_SetConfig+0x177c>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbe:	2b07      	cmp	r3, #7
 8008dc0:	d01a      	beq.n	8008df8 <UART_SetConfig+0x1778>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc6:	2b08      	cmp	r3, #8
 8008dc8:	d014      	beq.n	8008df4 <UART_SetConfig+0x1774>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dce:	2b09      	cmp	r3, #9
 8008dd0:	d00e      	beq.n	8008df0 <UART_SetConfig+0x1770>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd6:	2b0a      	cmp	r3, #10
 8008dd8:	d008      	beq.n	8008dec <UART_SetConfig+0x176c>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dde:	2b0b      	cmp	r3, #11
 8008de0:	d102      	bne.n	8008de8 <UART_SetConfig+0x1768>
 8008de2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008de6:	e016      	b.n	8008e16 <UART_SetConfig+0x1796>
 8008de8:	2301      	movs	r3, #1
 8008dea:	e014      	b.n	8008e16 <UART_SetConfig+0x1796>
 8008dec:	2380      	movs	r3, #128	; 0x80
 8008dee:	e012      	b.n	8008e16 <UART_SetConfig+0x1796>
 8008df0:	2340      	movs	r3, #64	; 0x40
 8008df2:	e010      	b.n	8008e16 <UART_SetConfig+0x1796>
 8008df4:	2320      	movs	r3, #32
 8008df6:	e00e      	b.n	8008e16 <UART_SetConfig+0x1796>
 8008df8:	2310      	movs	r3, #16
 8008dfa:	e00c      	b.n	8008e16 <UART_SetConfig+0x1796>
 8008dfc:	230c      	movs	r3, #12
 8008dfe:	e00a      	b.n	8008e16 <UART_SetConfig+0x1796>
 8008e00:	230a      	movs	r3, #10
 8008e02:	e008      	b.n	8008e16 <UART_SetConfig+0x1796>
 8008e04:	2308      	movs	r3, #8
 8008e06:	e006      	b.n	8008e16 <UART_SetConfig+0x1796>
 8008e08:	2306      	movs	r3, #6
 8008e0a:	e004      	b.n	8008e16 <UART_SetConfig+0x1796>
 8008e0c:	2304      	movs	r3, #4
 8008e0e:	e002      	b.n	8008e16 <UART_SetConfig+0x1796>
 8008e10:	2302      	movs	r3, #2
 8008e12:	e000      	b.n	8008e16 <UART_SetConfig+0x1796>
 8008e14:	2301      	movs	r3, #1
 8008e16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e1c:	005a      	lsls	r2, r3, #1
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	085b      	lsrs	r3, r3, #1
 8008e24:	441a      	add	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e32:	e2b0      	b.n	8009396 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e34:	f7fc f922 	bl	800507c <HAL_RCC_GetPCLK2Freq>
 8008e38:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d044      	beq.n	8008ecc <UART_SetConfig+0x184c>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d03e      	beq.n	8008ec8 <UART_SetConfig+0x1848>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d038      	beq.n	8008ec4 <UART_SetConfig+0x1844>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e56:	2b03      	cmp	r3, #3
 8008e58:	d032      	beq.n	8008ec0 <UART_SetConfig+0x1840>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5e:	2b04      	cmp	r3, #4
 8008e60:	d02c      	beq.n	8008ebc <UART_SetConfig+0x183c>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e66:	2b05      	cmp	r3, #5
 8008e68:	d026      	beq.n	8008eb8 <UART_SetConfig+0x1838>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6e:	2b06      	cmp	r3, #6
 8008e70:	d020      	beq.n	8008eb4 <UART_SetConfig+0x1834>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e76:	2b07      	cmp	r3, #7
 8008e78:	d01a      	beq.n	8008eb0 <UART_SetConfig+0x1830>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7e:	2b08      	cmp	r3, #8
 8008e80:	d014      	beq.n	8008eac <UART_SetConfig+0x182c>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e86:	2b09      	cmp	r3, #9
 8008e88:	d00e      	beq.n	8008ea8 <UART_SetConfig+0x1828>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8e:	2b0a      	cmp	r3, #10
 8008e90:	d008      	beq.n	8008ea4 <UART_SetConfig+0x1824>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e96:	2b0b      	cmp	r3, #11
 8008e98:	d102      	bne.n	8008ea0 <UART_SetConfig+0x1820>
 8008e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e9e:	e016      	b.n	8008ece <UART_SetConfig+0x184e>
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e014      	b.n	8008ece <UART_SetConfig+0x184e>
 8008ea4:	2380      	movs	r3, #128	; 0x80
 8008ea6:	e012      	b.n	8008ece <UART_SetConfig+0x184e>
 8008ea8:	2340      	movs	r3, #64	; 0x40
 8008eaa:	e010      	b.n	8008ece <UART_SetConfig+0x184e>
 8008eac:	2320      	movs	r3, #32
 8008eae:	e00e      	b.n	8008ece <UART_SetConfig+0x184e>
 8008eb0:	2310      	movs	r3, #16
 8008eb2:	e00c      	b.n	8008ece <UART_SetConfig+0x184e>
 8008eb4:	230c      	movs	r3, #12
 8008eb6:	e00a      	b.n	8008ece <UART_SetConfig+0x184e>
 8008eb8:	230a      	movs	r3, #10
 8008eba:	e008      	b.n	8008ece <UART_SetConfig+0x184e>
 8008ebc:	2308      	movs	r3, #8
 8008ebe:	e006      	b.n	8008ece <UART_SetConfig+0x184e>
 8008ec0:	2306      	movs	r3, #6
 8008ec2:	e004      	b.n	8008ece <UART_SetConfig+0x184e>
 8008ec4:	2304      	movs	r3, #4
 8008ec6:	e002      	b.n	8008ece <UART_SetConfig+0x184e>
 8008ec8:	2302      	movs	r3, #2
 8008eca:	e000      	b.n	8008ece <UART_SetConfig+0x184e>
 8008ecc:	2301      	movs	r3, #1
 8008ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ed4:	005a      	lsls	r2, r3, #1
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	085b      	lsrs	r3, r3, #1
 8008edc:	441a      	add	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008eea:	e254      	b.n	8009396 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eec:	f107 0318 	add.w	r3, r7, #24
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7fd fab1 	bl	8006458 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ef6:	69fa      	ldr	r2, [r7, #28]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d044      	beq.n	8008f8a <UART_SetConfig+0x190a>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d03e      	beq.n	8008f86 <UART_SetConfig+0x1906>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d038      	beq.n	8008f82 <UART_SetConfig+0x1902>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f14:	2b03      	cmp	r3, #3
 8008f16:	d032      	beq.n	8008f7e <UART_SetConfig+0x18fe>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1c:	2b04      	cmp	r3, #4
 8008f1e:	d02c      	beq.n	8008f7a <UART_SetConfig+0x18fa>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f24:	2b05      	cmp	r3, #5
 8008f26:	d026      	beq.n	8008f76 <UART_SetConfig+0x18f6>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2c:	2b06      	cmp	r3, #6
 8008f2e:	d020      	beq.n	8008f72 <UART_SetConfig+0x18f2>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f34:	2b07      	cmp	r3, #7
 8008f36:	d01a      	beq.n	8008f6e <UART_SetConfig+0x18ee>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3c:	2b08      	cmp	r3, #8
 8008f3e:	d014      	beq.n	8008f6a <UART_SetConfig+0x18ea>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f44:	2b09      	cmp	r3, #9
 8008f46:	d00e      	beq.n	8008f66 <UART_SetConfig+0x18e6>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4c:	2b0a      	cmp	r3, #10
 8008f4e:	d008      	beq.n	8008f62 <UART_SetConfig+0x18e2>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f54:	2b0b      	cmp	r3, #11
 8008f56:	d102      	bne.n	8008f5e <UART_SetConfig+0x18de>
 8008f58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f5c:	e016      	b.n	8008f8c <UART_SetConfig+0x190c>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e014      	b.n	8008f8c <UART_SetConfig+0x190c>
 8008f62:	2380      	movs	r3, #128	; 0x80
 8008f64:	e012      	b.n	8008f8c <UART_SetConfig+0x190c>
 8008f66:	2340      	movs	r3, #64	; 0x40
 8008f68:	e010      	b.n	8008f8c <UART_SetConfig+0x190c>
 8008f6a:	2320      	movs	r3, #32
 8008f6c:	e00e      	b.n	8008f8c <UART_SetConfig+0x190c>
 8008f6e:	2310      	movs	r3, #16
 8008f70:	e00c      	b.n	8008f8c <UART_SetConfig+0x190c>
 8008f72:	230c      	movs	r3, #12
 8008f74:	e00a      	b.n	8008f8c <UART_SetConfig+0x190c>
 8008f76:	230a      	movs	r3, #10
 8008f78:	e008      	b.n	8008f8c <UART_SetConfig+0x190c>
 8008f7a:	2308      	movs	r3, #8
 8008f7c:	e006      	b.n	8008f8c <UART_SetConfig+0x190c>
 8008f7e:	2306      	movs	r3, #6
 8008f80:	e004      	b.n	8008f8c <UART_SetConfig+0x190c>
 8008f82:	2304      	movs	r3, #4
 8008f84:	e002      	b.n	8008f8c <UART_SetConfig+0x190c>
 8008f86:	2302      	movs	r3, #2
 8008f88:	e000      	b.n	8008f8c <UART_SetConfig+0x190c>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f90:	005a      	lsls	r2, r3, #1
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	085b      	lsrs	r3, r3, #1
 8008f98:	441a      	add	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008fa6:	e1f6      	b.n	8009396 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fa8:	f107 030c 	add.w	r3, r7, #12
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7fd fb9f 	bl	80066f0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d044      	beq.n	8009046 <UART_SetConfig+0x19c6>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d03e      	beq.n	8009042 <UART_SetConfig+0x19c2>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d038      	beq.n	800903e <UART_SetConfig+0x19be>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd0:	2b03      	cmp	r3, #3
 8008fd2:	d032      	beq.n	800903a <UART_SetConfig+0x19ba>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd8:	2b04      	cmp	r3, #4
 8008fda:	d02c      	beq.n	8009036 <UART_SetConfig+0x19b6>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe0:	2b05      	cmp	r3, #5
 8008fe2:	d026      	beq.n	8009032 <UART_SetConfig+0x19b2>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe8:	2b06      	cmp	r3, #6
 8008fea:	d020      	beq.n	800902e <UART_SetConfig+0x19ae>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff0:	2b07      	cmp	r3, #7
 8008ff2:	d01a      	beq.n	800902a <UART_SetConfig+0x19aa>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff8:	2b08      	cmp	r3, #8
 8008ffa:	d014      	beq.n	8009026 <UART_SetConfig+0x19a6>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009000:	2b09      	cmp	r3, #9
 8009002:	d00e      	beq.n	8009022 <UART_SetConfig+0x19a2>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	2b0a      	cmp	r3, #10
 800900a:	d008      	beq.n	800901e <UART_SetConfig+0x199e>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009010:	2b0b      	cmp	r3, #11
 8009012:	d102      	bne.n	800901a <UART_SetConfig+0x199a>
 8009014:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009018:	e016      	b.n	8009048 <UART_SetConfig+0x19c8>
 800901a:	2301      	movs	r3, #1
 800901c:	e014      	b.n	8009048 <UART_SetConfig+0x19c8>
 800901e:	2380      	movs	r3, #128	; 0x80
 8009020:	e012      	b.n	8009048 <UART_SetConfig+0x19c8>
 8009022:	2340      	movs	r3, #64	; 0x40
 8009024:	e010      	b.n	8009048 <UART_SetConfig+0x19c8>
 8009026:	2320      	movs	r3, #32
 8009028:	e00e      	b.n	8009048 <UART_SetConfig+0x19c8>
 800902a:	2310      	movs	r3, #16
 800902c:	e00c      	b.n	8009048 <UART_SetConfig+0x19c8>
 800902e:	230c      	movs	r3, #12
 8009030:	e00a      	b.n	8009048 <UART_SetConfig+0x19c8>
 8009032:	230a      	movs	r3, #10
 8009034:	e008      	b.n	8009048 <UART_SetConfig+0x19c8>
 8009036:	2308      	movs	r3, #8
 8009038:	e006      	b.n	8009048 <UART_SetConfig+0x19c8>
 800903a:	2306      	movs	r3, #6
 800903c:	e004      	b.n	8009048 <UART_SetConfig+0x19c8>
 800903e:	2304      	movs	r3, #4
 8009040:	e002      	b.n	8009048 <UART_SetConfig+0x19c8>
 8009042:	2302      	movs	r3, #2
 8009044:	e000      	b.n	8009048 <UART_SetConfig+0x19c8>
 8009046:	2301      	movs	r3, #1
 8009048:	fbb2 f3f3 	udiv	r3, r2, r3
 800904c:	005a      	lsls	r2, r3, #1
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	085b      	lsrs	r3, r3, #1
 8009054:	441a      	add	r2, r3
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	fbb2 f3f3 	udiv	r3, r2, r3
 800905e:	b29b      	uxth	r3, r3
 8009060:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009062:	e198      	b.n	8009396 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009064:	4b87      	ldr	r3, [pc, #540]	; (8009284 <UART_SetConfig+0x1c04>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 0320 	and.w	r3, r3, #32
 800906c:	2b00      	cmp	r3, #0
 800906e:	d05e      	beq.n	800912e <UART_SetConfig+0x1aae>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009070:	4b84      	ldr	r3, [pc, #528]	; (8009284 <UART_SetConfig+0x1c04>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	08db      	lsrs	r3, r3, #3
 8009076:	f003 0303 	and.w	r3, r3, #3
 800907a:	4a83      	ldr	r2, [pc, #524]	; (8009288 <UART_SetConfig+0x1c08>)
 800907c:	40da      	lsrs	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009082:	2b00      	cmp	r3, #0
 8009084:	d044      	beq.n	8009110 <UART_SetConfig+0x1a90>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908a:	2b01      	cmp	r3, #1
 800908c:	d03e      	beq.n	800910c <UART_SetConfig+0x1a8c>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009092:	2b02      	cmp	r3, #2
 8009094:	d038      	beq.n	8009108 <UART_SetConfig+0x1a88>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909a:	2b03      	cmp	r3, #3
 800909c:	d032      	beq.n	8009104 <UART_SetConfig+0x1a84>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a2:	2b04      	cmp	r3, #4
 80090a4:	d02c      	beq.n	8009100 <UART_SetConfig+0x1a80>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090aa:	2b05      	cmp	r3, #5
 80090ac:	d026      	beq.n	80090fc <UART_SetConfig+0x1a7c>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b2:	2b06      	cmp	r3, #6
 80090b4:	d020      	beq.n	80090f8 <UART_SetConfig+0x1a78>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ba:	2b07      	cmp	r3, #7
 80090bc:	d01a      	beq.n	80090f4 <UART_SetConfig+0x1a74>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c2:	2b08      	cmp	r3, #8
 80090c4:	d014      	beq.n	80090f0 <UART_SetConfig+0x1a70>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ca:	2b09      	cmp	r3, #9
 80090cc:	d00e      	beq.n	80090ec <UART_SetConfig+0x1a6c>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d2:	2b0a      	cmp	r3, #10
 80090d4:	d008      	beq.n	80090e8 <UART_SetConfig+0x1a68>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090da:	2b0b      	cmp	r3, #11
 80090dc:	d102      	bne.n	80090e4 <UART_SetConfig+0x1a64>
 80090de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090e2:	e016      	b.n	8009112 <UART_SetConfig+0x1a92>
 80090e4:	2301      	movs	r3, #1
 80090e6:	e014      	b.n	8009112 <UART_SetConfig+0x1a92>
 80090e8:	2380      	movs	r3, #128	; 0x80
 80090ea:	e012      	b.n	8009112 <UART_SetConfig+0x1a92>
 80090ec:	2340      	movs	r3, #64	; 0x40
 80090ee:	e010      	b.n	8009112 <UART_SetConfig+0x1a92>
 80090f0:	2320      	movs	r3, #32
 80090f2:	e00e      	b.n	8009112 <UART_SetConfig+0x1a92>
 80090f4:	2310      	movs	r3, #16
 80090f6:	e00c      	b.n	8009112 <UART_SetConfig+0x1a92>
 80090f8:	230c      	movs	r3, #12
 80090fa:	e00a      	b.n	8009112 <UART_SetConfig+0x1a92>
 80090fc:	230a      	movs	r3, #10
 80090fe:	e008      	b.n	8009112 <UART_SetConfig+0x1a92>
 8009100:	2308      	movs	r3, #8
 8009102:	e006      	b.n	8009112 <UART_SetConfig+0x1a92>
 8009104:	2306      	movs	r3, #6
 8009106:	e004      	b.n	8009112 <UART_SetConfig+0x1a92>
 8009108:	2304      	movs	r3, #4
 800910a:	e002      	b.n	8009112 <UART_SetConfig+0x1a92>
 800910c:	2302      	movs	r3, #2
 800910e:	e000      	b.n	8009112 <UART_SetConfig+0x1a92>
 8009110:	2301      	movs	r3, #1
 8009112:	fbb2 f3f3 	udiv	r3, r2, r3
 8009116:	005a      	lsls	r2, r3, #1
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	085b      	lsrs	r3, r3, #1
 800911e:	441a      	add	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	fbb2 f3f3 	udiv	r3, r2, r3
 8009128:	b29b      	uxth	r3, r3
 800912a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800912c:	e133      	b.n	8009396 <UART_SetConfig+0x1d16>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009132:	2b00      	cmp	r3, #0
 8009134:	d043      	beq.n	80091be <UART_SetConfig+0x1b3e>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913a:	2b01      	cmp	r3, #1
 800913c:	d03d      	beq.n	80091ba <UART_SetConfig+0x1b3a>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009142:	2b02      	cmp	r3, #2
 8009144:	d037      	beq.n	80091b6 <UART_SetConfig+0x1b36>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914a:	2b03      	cmp	r3, #3
 800914c:	d031      	beq.n	80091b2 <UART_SetConfig+0x1b32>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009152:	2b04      	cmp	r3, #4
 8009154:	d02b      	beq.n	80091ae <UART_SetConfig+0x1b2e>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915a:	2b05      	cmp	r3, #5
 800915c:	d025      	beq.n	80091aa <UART_SetConfig+0x1b2a>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009162:	2b06      	cmp	r3, #6
 8009164:	d01f      	beq.n	80091a6 <UART_SetConfig+0x1b26>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916a:	2b07      	cmp	r3, #7
 800916c:	d019      	beq.n	80091a2 <UART_SetConfig+0x1b22>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009172:	2b08      	cmp	r3, #8
 8009174:	d013      	beq.n	800919e <UART_SetConfig+0x1b1e>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917a:	2b09      	cmp	r3, #9
 800917c:	d00d      	beq.n	800919a <UART_SetConfig+0x1b1a>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009182:	2b0a      	cmp	r3, #10
 8009184:	d007      	beq.n	8009196 <UART_SetConfig+0x1b16>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918a:	2b0b      	cmp	r3, #11
 800918c:	d101      	bne.n	8009192 <UART_SetConfig+0x1b12>
 800918e:	4b3f      	ldr	r3, [pc, #252]	; (800928c <UART_SetConfig+0x1c0c>)
 8009190:	e016      	b.n	80091c0 <UART_SetConfig+0x1b40>
 8009192:	4b3f      	ldr	r3, [pc, #252]	; (8009290 <UART_SetConfig+0x1c10>)
 8009194:	e014      	b.n	80091c0 <UART_SetConfig+0x1b40>
 8009196:	4b3f      	ldr	r3, [pc, #252]	; (8009294 <UART_SetConfig+0x1c14>)
 8009198:	e012      	b.n	80091c0 <UART_SetConfig+0x1b40>
 800919a:	4b3f      	ldr	r3, [pc, #252]	; (8009298 <UART_SetConfig+0x1c18>)
 800919c:	e010      	b.n	80091c0 <UART_SetConfig+0x1b40>
 800919e:	4b3f      	ldr	r3, [pc, #252]	; (800929c <UART_SetConfig+0x1c1c>)
 80091a0:	e00e      	b.n	80091c0 <UART_SetConfig+0x1b40>
 80091a2:	4b3f      	ldr	r3, [pc, #252]	; (80092a0 <UART_SetConfig+0x1c20>)
 80091a4:	e00c      	b.n	80091c0 <UART_SetConfig+0x1b40>
 80091a6:	4b3f      	ldr	r3, [pc, #252]	; (80092a4 <UART_SetConfig+0x1c24>)
 80091a8:	e00a      	b.n	80091c0 <UART_SetConfig+0x1b40>
 80091aa:	4b3f      	ldr	r3, [pc, #252]	; (80092a8 <UART_SetConfig+0x1c28>)
 80091ac:	e008      	b.n	80091c0 <UART_SetConfig+0x1b40>
 80091ae:	4b3f      	ldr	r3, [pc, #252]	; (80092ac <UART_SetConfig+0x1c2c>)
 80091b0:	e006      	b.n	80091c0 <UART_SetConfig+0x1b40>
 80091b2:	4b3f      	ldr	r3, [pc, #252]	; (80092b0 <UART_SetConfig+0x1c30>)
 80091b4:	e004      	b.n	80091c0 <UART_SetConfig+0x1b40>
 80091b6:	4b3f      	ldr	r3, [pc, #252]	; (80092b4 <UART_SetConfig+0x1c34>)
 80091b8:	e002      	b.n	80091c0 <UART_SetConfig+0x1b40>
 80091ba:	4b33      	ldr	r3, [pc, #204]	; (8009288 <UART_SetConfig+0x1c08>)
 80091bc:	e000      	b.n	80091c0 <UART_SetConfig+0x1b40>
 80091be:	4b34      	ldr	r3, [pc, #208]	; (8009290 <UART_SetConfig+0x1c10>)
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	6852      	ldr	r2, [r2, #4]
 80091c4:	0852      	lsrs	r2, r2, #1
 80091c6:	441a      	add	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80091d4:	e0df      	b.n	8009396 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d045      	beq.n	800926a <UART_SetConfig+0x1bea>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d03f      	beq.n	8009266 <UART_SetConfig+0x1be6>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	d039      	beq.n	8009262 <UART_SetConfig+0x1be2>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f2:	2b03      	cmp	r3, #3
 80091f4:	d033      	beq.n	800925e <UART_SetConfig+0x1bde>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fa:	2b04      	cmp	r3, #4
 80091fc:	d02d      	beq.n	800925a <UART_SetConfig+0x1bda>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009202:	2b05      	cmp	r3, #5
 8009204:	d027      	beq.n	8009256 <UART_SetConfig+0x1bd6>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920a:	2b06      	cmp	r3, #6
 800920c:	d021      	beq.n	8009252 <UART_SetConfig+0x1bd2>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009212:	2b07      	cmp	r3, #7
 8009214:	d01b      	beq.n	800924e <UART_SetConfig+0x1bce>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921a:	2b08      	cmp	r3, #8
 800921c:	d015      	beq.n	800924a <UART_SetConfig+0x1bca>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009222:	2b09      	cmp	r3, #9
 8009224:	d00f      	beq.n	8009246 <UART_SetConfig+0x1bc6>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922a:	2b0a      	cmp	r3, #10
 800922c:	d008      	beq.n	8009240 <UART_SetConfig+0x1bc0>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009232:	2b0b      	cmp	r3, #11
 8009234:	d102      	bne.n	800923c <UART_SetConfig+0x1bbc>
 8009236:	f647 2312 	movw	r3, #31250	; 0x7a12
 800923a:	e017      	b.n	800926c <UART_SetConfig+0x1bec>
 800923c:	4b18      	ldr	r3, [pc, #96]	; (80092a0 <UART_SetConfig+0x1c20>)
 800923e:	e015      	b.n	800926c <UART_SetConfig+0x1bec>
 8009240:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009244:	e012      	b.n	800926c <UART_SetConfig+0x1bec>
 8009246:	4b1c      	ldr	r3, [pc, #112]	; (80092b8 <UART_SetConfig+0x1c38>)
 8009248:	e010      	b.n	800926c <UART_SetConfig+0x1bec>
 800924a:	4b1c      	ldr	r3, [pc, #112]	; (80092bc <UART_SetConfig+0x1c3c>)
 800924c:	e00e      	b.n	800926c <UART_SetConfig+0x1bec>
 800924e:	4b0f      	ldr	r3, [pc, #60]	; (800928c <UART_SetConfig+0x1c0c>)
 8009250:	e00c      	b.n	800926c <UART_SetConfig+0x1bec>
 8009252:	4b1b      	ldr	r3, [pc, #108]	; (80092c0 <UART_SetConfig+0x1c40>)
 8009254:	e00a      	b.n	800926c <UART_SetConfig+0x1bec>
 8009256:	4b1b      	ldr	r3, [pc, #108]	; (80092c4 <UART_SetConfig+0x1c44>)
 8009258:	e008      	b.n	800926c <UART_SetConfig+0x1bec>
 800925a:	4b0e      	ldr	r3, [pc, #56]	; (8009294 <UART_SetConfig+0x1c14>)
 800925c:	e006      	b.n	800926c <UART_SetConfig+0x1bec>
 800925e:	4b1a      	ldr	r3, [pc, #104]	; (80092c8 <UART_SetConfig+0x1c48>)
 8009260:	e004      	b.n	800926c <UART_SetConfig+0x1bec>
 8009262:	4b0d      	ldr	r3, [pc, #52]	; (8009298 <UART_SetConfig+0x1c18>)
 8009264:	e002      	b.n	800926c <UART_SetConfig+0x1bec>
 8009266:	4b0d      	ldr	r3, [pc, #52]	; (800929c <UART_SetConfig+0x1c1c>)
 8009268:	e000      	b.n	800926c <UART_SetConfig+0x1bec>
 800926a:	4b0d      	ldr	r3, [pc, #52]	; (80092a0 <UART_SetConfig+0x1c20>)
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	6852      	ldr	r2, [r2, #4]
 8009270:	0852      	lsrs	r2, r2, #1
 8009272:	441a      	add	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	fbb2 f3f3 	udiv	r3, r2, r3
 800927c:	b29b      	uxth	r3, r3
 800927e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009280:	e089      	b.n	8009396 <UART_SetConfig+0x1d16>
 8009282:	bf00      	nop
 8009284:	58024400 	.word	0x58024400
 8009288:	03d09000 	.word	0x03d09000
 800928c:	0007a120 	.word	0x0007a120
 8009290:	07a12000 	.word	0x07a12000
 8009294:	000f4240 	.word	0x000f4240
 8009298:	001e8480 	.word	0x001e8480
 800929c:	003d0900 	.word	0x003d0900
 80092a0:	007a1200 	.word	0x007a1200
 80092a4:	00a2c2aa 	.word	0x00a2c2aa
 80092a8:	00c35000 	.word	0x00c35000
 80092ac:	00f42400 	.word	0x00f42400
 80092b0:	01458554 	.word	0x01458554
 80092b4:	01e84800 	.word	0x01e84800
 80092b8:	0001e848 	.word	0x0001e848
 80092bc:	0003d090 	.word	0x0003d090
 80092c0:	000a2c2a 	.word	0x000a2c2a
 80092c4:	000c3500 	.word	0x000c3500
 80092c8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d04f      	beq.n	8009374 <UART_SetConfig+0x1cf4>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d048      	beq.n	800936e <UART_SetConfig+0x1cee>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d041      	beq.n	8009368 <UART_SetConfig+0x1ce8>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e8:	2b03      	cmp	r3, #3
 80092ea:	d03a      	beq.n	8009362 <UART_SetConfig+0x1ce2>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f0:	2b04      	cmp	r3, #4
 80092f2:	d033      	beq.n	800935c <UART_SetConfig+0x1cdc>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f8:	2b05      	cmp	r3, #5
 80092fa:	d02c      	beq.n	8009356 <UART_SetConfig+0x1cd6>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009300:	2b06      	cmp	r3, #6
 8009302:	d025      	beq.n	8009350 <UART_SetConfig+0x1cd0>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009308:	2b07      	cmp	r3, #7
 800930a:	d01e      	beq.n	800934a <UART_SetConfig+0x1cca>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009310:	2b08      	cmp	r3, #8
 8009312:	d017      	beq.n	8009344 <UART_SetConfig+0x1cc4>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009318:	2b09      	cmp	r3, #9
 800931a:	d010      	beq.n	800933e <UART_SetConfig+0x1cbe>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009320:	2b0a      	cmp	r3, #10
 8009322:	d009      	beq.n	8009338 <UART_SetConfig+0x1cb8>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009328:	2b0b      	cmp	r3, #11
 800932a:	d102      	bne.n	8009332 <UART_SetConfig+0x1cb2>
 800932c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009330:	e022      	b.n	8009378 <UART_SetConfig+0x1cf8>
 8009332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009336:	e01f      	b.n	8009378 <UART_SetConfig+0x1cf8>
 8009338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800933c:	e01c      	b.n	8009378 <UART_SetConfig+0x1cf8>
 800933e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009342:	e019      	b.n	8009378 <UART_SetConfig+0x1cf8>
 8009344:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009348:	e016      	b.n	8009378 <UART_SetConfig+0x1cf8>
 800934a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800934e:	e013      	b.n	8009378 <UART_SetConfig+0x1cf8>
 8009350:	f241 5354 	movw	r3, #5460	; 0x1554
 8009354:	e010      	b.n	8009378 <UART_SetConfig+0x1cf8>
 8009356:	f641 1398 	movw	r3, #6552	; 0x1998
 800935a:	e00d      	b.n	8009378 <UART_SetConfig+0x1cf8>
 800935c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009360:	e00a      	b.n	8009378 <UART_SetConfig+0x1cf8>
 8009362:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8009366:	e007      	b.n	8009378 <UART_SetConfig+0x1cf8>
 8009368:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800936c:	e004      	b.n	8009378 <UART_SetConfig+0x1cf8>
 800936e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009372:	e001      	b.n	8009378 <UART_SetConfig+0x1cf8>
 8009374:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	6852      	ldr	r2, [r2, #4]
 800937c:	0852      	lsrs	r2, r2, #1
 800937e:	441a      	add	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	fbb2 f3f3 	udiv	r3, r2, r3
 8009388:	b29b      	uxth	r3, r3
 800938a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800938c:	e003      	b.n	8009396 <UART_SetConfig+0x1d16>
      default:
        ret = HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009394:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009398:	2b0f      	cmp	r3, #15
 800939a:	d916      	bls.n	80093ca <UART_SetConfig+0x1d4a>
 800939c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800939e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093a2:	d212      	bcs.n	80093ca <UART_SetConfig+0x1d4a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80093a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	f023 030f 	bic.w	r3, r3, #15
 80093ac:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80093ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b0:	085b      	lsrs	r3, r3, #1
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	f003 0307 	and.w	r3, r3, #7
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80093bc:	4313      	orrs	r3, r2
 80093be:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80093c6:	60da      	str	r2, [r3, #12]
 80093c8:	e3a3      	b.n	8009b12 <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80093d0:	e39f      	b.n	8009b12 <UART_SetConfig+0x2492>
    }
  }
  else
  {
    switch (clocksource)
 80093d2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80093d6:	2b40      	cmp	r3, #64	; 0x40
 80093d8:	f200 8388 	bhi.w	8009aec <UART_SetConfig+0x246c>
 80093dc:	a201      	add	r2, pc, #4	; (adr r2, 80093e4 <UART_SetConfig+0x1d64>)
 80093de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e2:	bf00      	nop
 80093e4:	080094e9 	.word	0x080094e9
 80093e8:	0800959f 	.word	0x0800959f
 80093ec:	08009aed 	.word	0x08009aed
 80093f0:	08009aed 	.word	0x08009aed
 80093f4:	08009655 	.word	0x08009655
 80093f8:	08009aed 	.word	0x08009aed
 80093fc:	08009aed 	.word	0x08009aed
 8009400:	08009aed 	.word	0x08009aed
 8009404:	0800970f 	.word	0x0800970f
 8009408:	08009aed 	.word	0x08009aed
 800940c:	08009aed 	.word	0x08009aed
 8009410:	08009aed 	.word	0x08009aed
 8009414:	08009aed 	.word	0x08009aed
 8009418:	08009aed 	.word	0x08009aed
 800941c:	08009aed 	.word	0x08009aed
 8009420:	08009aed 	.word	0x08009aed
 8009424:	080097c9 	.word	0x080097c9
 8009428:	08009aed 	.word	0x08009aed
 800942c:	08009aed 	.word	0x08009aed
 8009430:	08009aed 	.word	0x08009aed
 8009434:	08009aed 	.word	0x08009aed
 8009438:	08009aed 	.word	0x08009aed
 800943c:	08009aed 	.word	0x08009aed
 8009440:	08009aed 	.word	0x08009aed
 8009444:	08009aed 	.word	0x08009aed
 8009448:	08009aed 	.word	0x08009aed
 800944c:	08009aed 	.word	0x08009aed
 8009450:	08009aed 	.word	0x08009aed
 8009454:	08009aed 	.word	0x08009aed
 8009458:	08009aed 	.word	0x08009aed
 800945c:	08009aed 	.word	0x08009aed
 8009460:	08009aed 	.word	0x08009aed
 8009464:	08009939 	.word	0x08009939
 8009468:	08009aed 	.word	0x08009aed
 800946c:	08009aed 	.word	0x08009aed
 8009470:	08009aed 	.word	0x08009aed
 8009474:	08009aed 	.word	0x08009aed
 8009478:	08009aed 	.word	0x08009aed
 800947c:	08009aed 	.word	0x08009aed
 8009480:	08009aed 	.word	0x08009aed
 8009484:	08009aed 	.word	0x08009aed
 8009488:	08009aed 	.word	0x08009aed
 800948c:	08009aed 	.word	0x08009aed
 8009490:	08009aed 	.word	0x08009aed
 8009494:	08009aed 	.word	0x08009aed
 8009498:	08009aed 	.word	0x08009aed
 800949c:	08009aed 	.word	0x08009aed
 80094a0:	08009aed 	.word	0x08009aed
 80094a4:	08009aed 	.word	0x08009aed
 80094a8:	08009aed 	.word	0x08009aed
 80094ac:	08009aed 	.word	0x08009aed
 80094b0:	08009aed 	.word	0x08009aed
 80094b4:	08009aed 	.word	0x08009aed
 80094b8:	08009aed 	.word	0x08009aed
 80094bc:	08009aed 	.word	0x08009aed
 80094c0:	08009aed 	.word	0x08009aed
 80094c4:	08009aed 	.word	0x08009aed
 80094c8:	08009aed 	.word	0x08009aed
 80094cc:	08009aed 	.word	0x08009aed
 80094d0:	08009aed 	.word	0x08009aed
 80094d4:	08009aed 	.word	0x08009aed
 80094d8:	08009aed 	.word	0x08009aed
 80094dc:	08009aed 	.word	0x08009aed
 80094e0:	08009aed 	.word	0x08009aed
 80094e4:	08009a2d 	.word	0x08009a2d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094e8:	f7fb fdb2 	bl	8005050 <HAL_RCC_GetPCLK1Freq>
 80094ec:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d044      	beq.n	8009580 <UART_SetConfig+0x1f00>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d03e      	beq.n	800957c <UART_SetConfig+0x1efc>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009502:	2b02      	cmp	r3, #2
 8009504:	d038      	beq.n	8009578 <UART_SetConfig+0x1ef8>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950a:	2b03      	cmp	r3, #3
 800950c:	d032      	beq.n	8009574 <UART_SetConfig+0x1ef4>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009512:	2b04      	cmp	r3, #4
 8009514:	d02c      	beq.n	8009570 <UART_SetConfig+0x1ef0>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951a:	2b05      	cmp	r3, #5
 800951c:	d026      	beq.n	800956c <UART_SetConfig+0x1eec>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009522:	2b06      	cmp	r3, #6
 8009524:	d020      	beq.n	8009568 <UART_SetConfig+0x1ee8>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952a:	2b07      	cmp	r3, #7
 800952c:	d01a      	beq.n	8009564 <UART_SetConfig+0x1ee4>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009532:	2b08      	cmp	r3, #8
 8009534:	d014      	beq.n	8009560 <UART_SetConfig+0x1ee0>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953a:	2b09      	cmp	r3, #9
 800953c:	d00e      	beq.n	800955c <UART_SetConfig+0x1edc>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009542:	2b0a      	cmp	r3, #10
 8009544:	d008      	beq.n	8009558 <UART_SetConfig+0x1ed8>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954a:	2b0b      	cmp	r3, #11
 800954c:	d102      	bne.n	8009554 <UART_SetConfig+0x1ed4>
 800954e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009552:	e016      	b.n	8009582 <UART_SetConfig+0x1f02>
 8009554:	2301      	movs	r3, #1
 8009556:	e014      	b.n	8009582 <UART_SetConfig+0x1f02>
 8009558:	2380      	movs	r3, #128	; 0x80
 800955a:	e012      	b.n	8009582 <UART_SetConfig+0x1f02>
 800955c:	2340      	movs	r3, #64	; 0x40
 800955e:	e010      	b.n	8009582 <UART_SetConfig+0x1f02>
 8009560:	2320      	movs	r3, #32
 8009562:	e00e      	b.n	8009582 <UART_SetConfig+0x1f02>
 8009564:	2310      	movs	r3, #16
 8009566:	e00c      	b.n	8009582 <UART_SetConfig+0x1f02>
 8009568:	230c      	movs	r3, #12
 800956a:	e00a      	b.n	8009582 <UART_SetConfig+0x1f02>
 800956c:	230a      	movs	r3, #10
 800956e:	e008      	b.n	8009582 <UART_SetConfig+0x1f02>
 8009570:	2308      	movs	r3, #8
 8009572:	e006      	b.n	8009582 <UART_SetConfig+0x1f02>
 8009574:	2306      	movs	r3, #6
 8009576:	e004      	b.n	8009582 <UART_SetConfig+0x1f02>
 8009578:	2304      	movs	r3, #4
 800957a:	e002      	b.n	8009582 <UART_SetConfig+0x1f02>
 800957c:	2302      	movs	r3, #2
 800957e:	e000      	b.n	8009582 <UART_SetConfig+0x1f02>
 8009580:	2301      	movs	r3, #1
 8009582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009584:	fbb2 f2f3 	udiv	r2, r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	085b      	lsrs	r3, r3, #1
 800958e:	441a      	add	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	fbb2 f3f3 	udiv	r3, r2, r3
 8009598:	b29b      	uxth	r3, r3
 800959a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800959c:	e2aa      	b.n	8009af4 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800959e:	f7fb fd6d 	bl	800507c <HAL_RCC_GetPCLK2Freq>
 80095a2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d044      	beq.n	8009636 <UART_SetConfig+0x1fb6>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d03e      	beq.n	8009632 <UART_SetConfig+0x1fb2>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d038      	beq.n	800962e <UART_SetConfig+0x1fae>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c0:	2b03      	cmp	r3, #3
 80095c2:	d032      	beq.n	800962a <UART_SetConfig+0x1faa>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c8:	2b04      	cmp	r3, #4
 80095ca:	d02c      	beq.n	8009626 <UART_SetConfig+0x1fa6>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d0:	2b05      	cmp	r3, #5
 80095d2:	d026      	beq.n	8009622 <UART_SetConfig+0x1fa2>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d8:	2b06      	cmp	r3, #6
 80095da:	d020      	beq.n	800961e <UART_SetConfig+0x1f9e>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e0:	2b07      	cmp	r3, #7
 80095e2:	d01a      	beq.n	800961a <UART_SetConfig+0x1f9a>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e8:	2b08      	cmp	r3, #8
 80095ea:	d014      	beq.n	8009616 <UART_SetConfig+0x1f96>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f0:	2b09      	cmp	r3, #9
 80095f2:	d00e      	beq.n	8009612 <UART_SetConfig+0x1f92>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f8:	2b0a      	cmp	r3, #10
 80095fa:	d008      	beq.n	800960e <UART_SetConfig+0x1f8e>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009600:	2b0b      	cmp	r3, #11
 8009602:	d102      	bne.n	800960a <UART_SetConfig+0x1f8a>
 8009604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009608:	e016      	b.n	8009638 <UART_SetConfig+0x1fb8>
 800960a:	2301      	movs	r3, #1
 800960c:	e014      	b.n	8009638 <UART_SetConfig+0x1fb8>
 800960e:	2380      	movs	r3, #128	; 0x80
 8009610:	e012      	b.n	8009638 <UART_SetConfig+0x1fb8>
 8009612:	2340      	movs	r3, #64	; 0x40
 8009614:	e010      	b.n	8009638 <UART_SetConfig+0x1fb8>
 8009616:	2320      	movs	r3, #32
 8009618:	e00e      	b.n	8009638 <UART_SetConfig+0x1fb8>
 800961a:	2310      	movs	r3, #16
 800961c:	e00c      	b.n	8009638 <UART_SetConfig+0x1fb8>
 800961e:	230c      	movs	r3, #12
 8009620:	e00a      	b.n	8009638 <UART_SetConfig+0x1fb8>
 8009622:	230a      	movs	r3, #10
 8009624:	e008      	b.n	8009638 <UART_SetConfig+0x1fb8>
 8009626:	2308      	movs	r3, #8
 8009628:	e006      	b.n	8009638 <UART_SetConfig+0x1fb8>
 800962a:	2306      	movs	r3, #6
 800962c:	e004      	b.n	8009638 <UART_SetConfig+0x1fb8>
 800962e:	2304      	movs	r3, #4
 8009630:	e002      	b.n	8009638 <UART_SetConfig+0x1fb8>
 8009632:	2302      	movs	r3, #2
 8009634:	e000      	b.n	8009638 <UART_SetConfig+0x1fb8>
 8009636:	2301      	movs	r3, #1
 8009638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800963a:	fbb2 f2f3 	udiv	r2, r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	085b      	lsrs	r3, r3, #1
 8009644:	441a      	add	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	fbb2 f3f3 	udiv	r3, r2, r3
 800964e:	b29b      	uxth	r3, r3
 8009650:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009652:	e24f      	b.n	8009af4 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009654:	f107 0318 	add.w	r3, r7, #24
 8009658:	4618      	mov	r0, r3
 800965a:	f7fc fefd 	bl	8006458 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800965e:	69fa      	ldr	r2, [r7, #28]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009664:	2b00      	cmp	r3, #0
 8009666:	d044      	beq.n	80096f2 <UART_SetConfig+0x2072>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966c:	2b01      	cmp	r3, #1
 800966e:	d03e      	beq.n	80096ee <UART_SetConfig+0x206e>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009674:	2b02      	cmp	r3, #2
 8009676:	d038      	beq.n	80096ea <UART_SetConfig+0x206a>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967c:	2b03      	cmp	r3, #3
 800967e:	d032      	beq.n	80096e6 <UART_SetConfig+0x2066>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009684:	2b04      	cmp	r3, #4
 8009686:	d02c      	beq.n	80096e2 <UART_SetConfig+0x2062>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968c:	2b05      	cmp	r3, #5
 800968e:	d026      	beq.n	80096de <UART_SetConfig+0x205e>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009694:	2b06      	cmp	r3, #6
 8009696:	d020      	beq.n	80096da <UART_SetConfig+0x205a>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969c:	2b07      	cmp	r3, #7
 800969e:	d01a      	beq.n	80096d6 <UART_SetConfig+0x2056>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a4:	2b08      	cmp	r3, #8
 80096a6:	d014      	beq.n	80096d2 <UART_SetConfig+0x2052>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ac:	2b09      	cmp	r3, #9
 80096ae:	d00e      	beq.n	80096ce <UART_SetConfig+0x204e>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b4:	2b0a      	cmp	r3, #10
 80096b6:	d008      	beq.n	80096ca <UART_SetConfig+0x204a>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096bc:	2b0b      	cmp	r3, #11
 80096be:	d102      	bne.n	80096c6 <UART_SetConfig+0x2046>
 80096c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096c4:	e016      	b.n	80096f4 <UART_SetConfig+0x2074>
 80096c6:	2301      	movs	r3, #1
 80096c8:	e014      	b.n	80096f4 <UART_SetConfig+0x2074>
 80096ca:	2380      	movs	r3, #128	; 0x80
 80096cc:	e012      	b.n	80096f4 <UART_SetConfig+0x2074>
 80096ce:	2340      	movs	r3, #64	; 0x40
 80096d0:	e010      	b.n	80096f4 <UART_SetConfig+0x2074>
 80096d2:	2320      	movs	r3, #32
 80096d4:	e00e      	b.n	80096f4 <UART_SetConfig+0x2074>
 80096d6:	2310      	movs	r3, #16
 80096d8:	e00c      	b.n	80096f4 <UART_SetConfig+0x2074>
 80096da:	230c      	movs	r3, #12
 80096dc:	e00a      	b.n	80096f4 <UART_SetConfig+0x2074>
 80096de:	230a      	movs	r3, #10
 80096e0:	e008      	b.n	80096f4 <UART_SetConfig+0x2074>
 80096e2:	2308      	movs	r3, #8
 80096e4:	e006      	b.n	80096f4 <UART_SetConfig+0x2074>
 80096e6:	2306      	movs	r3, #6
 80096e8:	e004      	b.n	80096f4 <UART_SetConfig+0x2074>
 80096ea:	2304      	movs	r3, #4
 80096ec:	e002      	b.n	80096f4 <UART_SetConfig+0x2074>
 80096ee:	2302      	movs	r3, #2
 80096f0:	e000      	b.n	80096f4 <UART_SetConfig+0x2074>
 80096f2:	2301      	movs	r3, #1
 80096f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	085b      	lsrs	r3, r3, #1
 80096fe:	441a      	add	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	fbb2 f3f3 	udiv	r3, r2, r3
 8009708:	b29b      	uxth	r3, r3
 800970a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800970c:	e1f2      	b.n	8009af4 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800970e:	f107 030c 	add.w	r3, r7, #12
 8009712:	4618      	mov	r0, r3
 8009714:	f7fc ffec 	bl	80066f0 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009718:	693a      	ldr	r2, [r7, #16]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971e:	2b00      	cmp	r3, #0
 8009720:	d044      	beq.n	80097ac <UART_SetConfig+0x212c>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009726:	2b01      	cmp	r3, #1
 8009728:	d03e      	beq.n	80097a8 <UART_SetConfig+0x2128>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972e:	2b02      	cmp	r3, #2
 8009730:	d038      	beq.n	80097a4 <UART_SetConfig+0x2124>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009736:	2b03      	cmp	r3, #3
 8009738:	d032      	beq.n	80097a0 <UART_SetConfig+0x2120>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973e:	2b04      	cmp	r3, #4
 8009740:	d02c      	beq.n	800979c <UART_SetConfig+0x211c>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009746:	2b05      	cmp	r3, #5
 8009748:	d026      	beq.n	8009798 <UART_SetConfig+0x2118>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974e:	2b06      	cmp	r3, #6
 8009750:	d020      	beq.n	8009794 <UART_SetConfig+0x2114>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009756:	2b07      	cmp	r3, #7
 8009758:	d01a      	beq.n	8009790 <UART_SetConfig+0x2110>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975e:	2b08      	cmp	r3, #8
 8009760:	d014      	beq.n	800978c <UART_SetConfig+0x210c>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009766:	2b09      	cmp	r3, #9
 8009768:	d00e      	beq.n	8009788 <UART_SetConfig+0x2108>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976e:	2b0a      	cmp	r3, #10
 8009770:	d008      	beq.n	8009784 <UART_SetConfig+0x2104>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009776:	2b0b      	cmp	r3, #11
 8009778:	d102      	bne.n	8009780 <UART_SetConfig+0x2100>
 800977a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800977e:	e016      	b.n	80097ae <UART_SetConfig+0x212e>
 8009780:	2301      	movs	r3, #1
 8009782:	e014      	b.n	80097ae <UART_SetConfig+0x212e>
 8009784:	2380      	movs	r3, #128	; 0x80
 8009786:	e012      	b.n	80097ae <UART_SetConfig+0x212e>
 8009788:	2340      	movs	r3, #64	; 0x40
 800978a:	e010      	b.n	80097ae <UART_SetConfig+0x212e>
 800978c:	2320      	movs	r3, #32
 800978e:	e00e      	b.n	80097ae <UART_SetConfig+0x212e>
 8009790:	2310      	movs	r3, #16
 8009792:	e00c      	b.n	80097ae <UART_SetConfig+0x212e>
 8009794:	230c      	movs	r3, #12
 8009796:	e00a      	b.n	80097ae <UART_SetConfig+0x212e>
 8009798:	230a      	movs	r3, #10
 800979a:	e008      	b.n	80097ae <UART_SetConfig+0x212e>
 800979c:	2308      	movs	r3, #8
 800979e:	e006      	b.n	80097ae <UART_SetConfig+0x212e>
 80097a0:	2306      	movs	r3, #6
 80097a2:	e004      	b.n	80097ae <UART_SetConfig+0x212e>
 80097a4:	2304      	movs	r3, #4
 80097a6:	e002      	b.n	80097ae <UART_SetConfig+0x212e>
 80097a8:	2302      	movs	r3, #2
 80097aa:	e000      	b.n	80097ae <UART_SetConfig+0x212e>
 80097ac:	2301      	movs	r3, #1
 80097ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	085b      	lsrs	r3, r3, #1
 80097b8:	441a      	add	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	fbb2 f3f3 	udiv	r3, r2, r3
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80097c6:	e195      	b.n	8009af4 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097c8:	4b87      	ldr	r3, [pc, #540]	; (80099e8 <UART_SetConfig+0x2368>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 0320 	and.w	r3, r3, #32
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d05d      	beq.n	8009890 <UART_SetConfig+0x2210>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097d4:	4b84      	ldr	r3, [pc, #528]	; (80099e8 <UART_SetConfig+0x2368>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	08db      	lsrs	r3, r3, #3
 80097da:	f003 0303 	and.w	r3, r3, #3
 80097de:	4a83      	ldr	r2, [pc, #524]	; (80099ec <UART_SetConfig+0x236c>)
 80097e0:	40da      	lsrs	r2, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d044      	beq.n	8009874 <UART_SetConfig+0x21f4>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d03e      	beq.n	8009870 <UART_SetConfig+0x21f0>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	d038      	beq.n	800986c <UART_SetConfig+0x21ec>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fe:	2b03      	cmp	r3, #3
 8009800:	d032      	beq.n	8009868 <UART_SetConfig+0x21e8>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009806:	2b04      	cmp	r3, #4
 8009808:	d02c      	beq.n	8009864 <UART_SetConfig+0x21e4>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980e:	2b05      	cmp	r3, #5
 8009810:	d026      	beq.n	8009860 <UART_SetConfig+0x21e0>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009816:	2b06      	cmp	r3, #6
 8009818:	d020      	beq.n	800985c <UART_SetConfig+0x21dc>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981e:	2b07      	cmp	r3, #7
 8009820:	d01a      	beq.n	8009858 <UART_SetConfig+0x21d8>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009826:	2b08      	cmp	r3, #8
 8009828:	d014      	beq.n	8009854 <UART_SetConfig+0x21d4>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982e:	2b09      	cmp	r3, #9
 8009830:	d00e      	beq.n	8009850 <UART_SetConfig+0x21d0>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009836:	2b0a      	cmp	r3, #10
 8009838:	d008      	beq.n	800984c <UART_SetConfig+0x21cc>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983e:	2b0b      	cmp	r3, #11
 8009840:	d102      	bne.n	8009848 <UART_SetConfig+0x21c8>
 8009842:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009846:	e016      	b.n	8009876 <UART_SetConfig+0x21f6>
 8009848:	2301      	movs	r3, #1
 800984a:	e014      	b.n	8009876 <UART_SetConfig+0x21f6>
 800984c:	2380      	movs	r3, #128	; 0x80
 800984e:	e012      	b.n	8009876 <UART_SetConfig+0x21f6>
 8009850:	2340      	movs	r3, #64	; 0x40
 8009852:	e010      	b.n	8009876 <UART_SetConfig+0x21f6>
 8009854:	2320      	movs	r3, #32
 8009856:	e00e      	b.n	8009876 <UART_SetConfig+0x21f6>
 8009858:	2310      	movs	r3, #16
 800985a:	e00c      	b.n	8009876 <UART_SetConfig+0x21f6>
 800985c:	230c      	movs	r3, #12
 800985e:	e00a      	b.n	8009876 <UART_SetConfig+0x21f6>
 8009860:	230a      	movs	r3, #10
 8009862:	e008      	b.n	8009876 <UART_SetConfig+0x21f6>
 8009864:	2308      	movs	r3, #8
 8009866:	e006      	b.n	8009876 <UART_SetConfig+0x21f6>
 8009868:	2306      	movs	r3, #6
 800986a:	e004      	b.n	8009876 <UART_SetConfig+0x21f6>
 800986c:	2304      	movs	r3, #4
 800986e:	e002      	b.n	8009876 <UART_SetConfig+0x21f6>
 8009870:	2302      	movs	r3, #2
 8009872:	e000      	b.n	8009876 <UART_SetConfig+0x21f6>
 8009874:	2301      	movs	r3, #1
 8009876:	fbb2 f2f3 	udiv	r2, r2, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	085b      	lsrs	r3, r3, #1
 8009880:	441a      	add	r2, r3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	fbb2 f3f3 	udiv	r3, r2, r3
 800988a:	b29b      	uxth	r3, r3
 800988c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800988e:	e131      	b.n	8009af4 <UART_SetConfig+0x2474>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009894:	2b00      	cmp	r3, #0
 8009896:	d043      	beq.n	8009920 <UART_SetConfig+0x22a0>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989c:	2b01      	cmp	r3, #1
 800989e:	d03d      	beq.n	800991c <UART_SetConfig+0x229c>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d037      	beq.n	8009918 <UART_SetConfig+0x2298>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ac:	2b03      	cmp	r3, #3
 80098ae:	d031      	beq.n	8009914 <UART_SetConfig+0x2294>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b4:	2b04      	cmp	r3, #4
 80098b6:	d02b      	beq.n	8009910 <UART_SetConfig+0x2290>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098bc:	2b05      	cmp	r3, #5
 80098be:	d025      	beq.n	800990c <UART_SetConfig+0x228c>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c4:	2b06      	cmp	r3, #6
 80098c6:	d01f      	beq.n	8009908 <UART_SetConfig+0x2288>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098cc:	2b07      	cmp	r3, #7
 80098ce:	d019      	beq.n	8009904 <UART_SetConfig+0x2284>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d4:	2b08      	cmp	r3, #8
 80098d6:	d013      	beq.n	8009900 <UART_SetConfig+0x2280>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098dc:	2b09      	cmp	r3, #9
 80098de:	d00d      	beq.n	80098fc <UART_SetConfig+0x227c>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e4:	2b0a      	cmp	r3, #10
 80098e6:	d007      	beq.n	80098f8 <UART_SetConfig+0x2278>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ec:	2b0b      	cmp	r3, #11
 80098ee:	d101      	bne.n	80098f4 <UART_SetConfig+0x2274>
 80098f0:	4b3f      	ldr	r3, [pc, #252]	; (80099f0 <UART_SetConfig+0x2370>)
 80098f2:	e016      	b.n	8009922 <UART_SetConfig+0x22a2>
 80098f4:	4b3d      	ldr	r3, [pc, #244]	; (80099ec <UART_SetConfig+0x236c>)
 80098f6:	e014      	b.n	8009922 <UART_SetConfig+0x22a2>
 80098f8:	4b3e      	ldr	r3, [pc, #248]	; (80099f4 <UART_SetConfig+0x2374>)
 80098fa:	e012      	b.n	8009922 <UART_SetConfig+0x22a2>
 80098fc:	4b3e      	ldr	r3, [pc, #248]	; (80099f8 <UART_SetConfig+0x2378>)
 80098fe:	e010      	b.n	8009922 <UART_SetConfig+0x22a2>
 8009900:	4b3e      	ldr	r3, [pc, #248]	; (80099fc <UART_SetConfig+0x237c>)
 8009902:	e00e      	b.n	8009922 <UART_SetConfig+0x22a2>
 8009904:	4b3e      	ldr	r3, [pc, #248]	; (8009a00 <UART_SetConfig+0x2380>)
 8009906:	e00c      	b.n	8009922 <UART_SetConfig+0x22a2>
 8009908:	4b3e      	ldr	r3, [pc, #248]	; (8009a04 <UART_SetConfig+0x2384>)
 800990a:	e00a      	b.n	8009922 <UART_SetConfig+0x22a2>
 800990c:	4b3e      	ldr	r3, [pc, #248]	; (8009a08 <UART_SetConfig+0x2388>)
 800990e:	e008      	b.n	8009922 <UART_SetConfig+0x22a2>
 8009910:	4b3e      	ldr	r3, [pc, #248]	; (8009a0c <UART_SetConfig+0x238c>)
 8009912:	e006      	b.n	8009922 <UART_SetConfig+0x22a2>
 8009914:	4b3e      	ldr	r3, [pc, #248]	; (8009a10 <UART_SetConfig+0x2390>)
 8009916:	e004      	b.n	8009922 <UART_SetConfig+0x22a2>
 8009918:	4b3e      	ldr	r3, [pc, #248]	; (8009a14 <UART_SetConfig+0x2394>)
 800991a:	e002      	b.n	8009922 <UART_SetConfig+0x22a2>
 800991c:	4b3e      	ldr	r3, [pc, #248]	; (8009a18 <UART_SetConfig+0x2398>)
 800991e:	e000      	b.n	8009922 <UART_SetConfig+0x22a2>
 8009920:	4b32      	ldr	r3, [pc, #200]	; (80099ec <UART_SetConfig+0x236c>)
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	6852      	ldr	r2, [r2, #4]
 8009926:	0852      	lsrs	r2, r2, #1
 8009928:	441a      	add	r2, r3
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009932:	b29b      	uxth	r3, r3
 8009934:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009936:	e0dd      	b.n	8009af4 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993c:	2b00      	cmp	r3, #0
 800993e:	d046      	beq.n	80099ce <UART_SetConfig+0x234e>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009944:	2b01      	cmp	r3, #1
 8009946:	d040      	beq.n	80099ca <UART_SetConfig+0x234a>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994c:	2b02      	cmp	r3, #2
 800994e:	d03a      	beq.n	80099c6 <UART_SetConfig+0x2346>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009954:	2b03      	cmp	r3, #3
 8009956:	d034      	beq.n	80099c2 <UART_SetConfig+0x2342>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995c:	2b04      	cmp	r3, #4
 800995e:	d02e      	beq.n	80099be <UART_SetConfig+0x233e>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009964:	2b05      	cmp	r3, #5
 8009966:	d028      	beq.n	80099ba <UART_SetConfig+0x233a>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996c:	2b06      	cmp	r3, #6
 800996e:	d022      	beq.n	80099b6 <UART_SetConfig+0x2336>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009974:	2b07      	cmp	r3, #7
 8009976:	d01c      	beq.n	80099b2 <UART_SetConfig+0x2332>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997c:	2b08      	cmp	r3, #8
 800997e:	d016      	beq.n	80099ae <UART_SetConfig+0x232e>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009984:	2b09      	cmp	r3, #9
 8009986:	d00f      	beq.n	80099a8 <UART_SetConfig+0x2328>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998c:	2b0a      	cmp	r3, #10
 800998e:	d008      	beq.n	80099a2 <UART_SetConfig+0x2322>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009994:	2b0b      	cmp	r3, #11
 8009996:	d102      	bne.n	800999e <UART_SetConfig+0x231e>
 8009998:	f643 5309 	movw	r3, #15625	; 0x3d09
 800999c:	e018      	b.n	80099d0 <UART_SetConfig+0x2350>
 800999e:	4b18      	ldr	r3, [pc, #96]	; (8009a00 <UART_SetConfig+0x2380>)
 80099a0:	e016      	b.n	80099d0 <UART_SetConfig+0x2350>
 80099a2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80099a6:	e013      	b.n	80099d0 <UART_SetConfig+0x2350>
 80099a8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80099ac:	e010      	b.n	80099d0 <UART_SetConfig+0x2350>
 80099ae:	4b1b      	ldr	r3, [pc, #108]	; (8009a1c <UART_SetConfig+0x239c>)
 80099b0:	e00e      	b.n	80099d0 <UART_SetConfig+0x2350>
 80099b2:	4b0f      	ldr	r3, [pc, #60]	; (80099f0 <UART_SetConfig+0x2370>)
 80099b4:	e00c      	b.n	80099d0 <UART_SetConfig+0x2350>
 80099b6:	4b1a      	ldr	r3, [pc, #104]	; (8009a20 <UART_SetConfig+0x23a0>)
 80099b8:	e00a      	b.n	80099d0 <UART_SetConfig+0x2350>
 80099ba:	4b1a      	ldr	r3, [pc, #104]	; (8009a24 <UART_SetConfig+0x23a4>)
 80099bc:	e008      	b.n	80099d0 <UART_SetConfig+0x2350>
 80099be:	4b0d      	ldr	r3, [pc, #52]	; (80099f4 <UART_SetConfig+0x2374>)
 80099c0:	e006      	b.n	80099d0 <UART_SetConfig+0x2350>
 80099c2:	4b19      	ldr	r3, [pc, #100]	; (8009a28 <UART_SetConfig+0x23a8>)
 80099c4:	e004      	b.n	80099d0 <UART_SetConfig+0x2350>
 80099c6:	4b0c      	ldr	r3, [pc, #48]	; (80099f8 <UART_SetConfig+0x2378>)
 80099c8:	e002      	b.n	80099d0 <UART_SetConfig+0x2350>
 80099ca:	4b0c      	ldr	r3, [pc, #48]	; (80099fc <UART_SetConfig+0x237c>)
 80099cc:	e000      	b.n	80099d0 <UART_SetConfig+0x2350>
 80099ce:	4b0c      	ldr	r3, [pc, #48]	; (8009a00 <UART_SetConfig+0x2380>)
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	6852      	ldr	r2, [r2, #4]
 80099d4:	0852      	lsrs	r2, r2, #1
 80099d6:	441a      	add	r2, r3
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80099e4:	e086      	b.n	8009af4 <UART_SetConfig+0x2474>
 80099e6:	bf00      	nop
 80099e8:	58024400 	.word	0x58024400
 80099ec:	03d09000 	.word	0x03d09000
 80099f0:	0003d090 	.word	0x0003d090
 80099f4:	0007a120 	.word	0x0007a120
 80099f8:	000f4240 	.word	0x000f4240
 80099fc:	001e8480 	.word	0x001e8480
 8009a00:	003d0900 	.word	0x003d0900
 8009a04:	00516155 	.word	0x00516155
 8009a08:	0061a800 	.word	0x0061a800
 8009a0c:	007a1200 	.word	0x007a1200
 8009a10:	00a2c2aa 	.word	0x00a2c2aa
 8009a14:	00f42400 	.word	0x00f42400
 8009a18:	01e84800 	.word	0x01e84800
 8009a1c:	0001e848 	.word	0x0001e848
 8009a20:	00051615 	.word	0x00051615
 8009a24:	00061a80 	.word	0x00061a80
 8009a28:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d04e      	beq.n	8009ad2 <UART_SetConfig+0x2452>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d047      	beq.n	8009acc <UART_SetConfig+0x244c>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d040      	beq.n	8009ac6 <UART_SetConfig+0x2446>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a48:	2b03      	cmp	r3, #3
 8009a4a:	d039      	beq.n	8009ac0 <UART_SetConfig+0x2440>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a50:	2b04      	cmp	r3, #4
 8009a52:	d032      	beq.n	8009aba <UART_SetConfig+0x243a>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a58:	2b05      	cmp	r3, #5
 8009a5a:	d02b      	beq.n	8009ab4 <UART_SetConfig+0x2434>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a60:	2b06      	cmp	r3, #6
 8009a62:	d024      	beq.n	8009aae <UART_SetConfig+0x242e>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a68:	2b07      	cmp	r3, #7
 8009a6a:	d01d      	beq.n	8009aa8 <UART_SetConfig+0x2428>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a70:	2b08      	cmp	r3, #8
 8009a72:	d016      	beq.n	8009aa2 <UART_SetConfig+0x2422>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a78:	2b09      	cmp	r3, #9
 8009a7a:	d00f      	beq.n	8009a9c <UART_SetConfig+0x241c>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a80:	2b0a      	cmp	r3, #10
 8009a82:	d008      	beq.n	8009a96 <UART_SetConfig+0x2416>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a88:	2b0b      	cmp	r3, #11
 8009a8a:	d101      	bne.n	8009a90 <UART_SetConfig+0x2410>
 8009a8c:	2380      	movs	r3, #128	; 0x80
 8009a8e:	e022      	b.n	8009ad6 <UART_SetConfig+0x2456>
 8009a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a94:	e01f      	b.n	8009ad6 <UART_SetConfig+0x2456>
 8009a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a9a:	e01c      	b.n	8009ad6 <UART_SetConfig+0x2456>
 8009a9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009aa0:	e019      	b.n	8009ad6 <UART_SetConfig+0x2456>
 8009aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aa6:	e016      	b.n	8009ad6 <UART_SetConfig+0x2456>
 8009aa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009aac:	e013      	b.n	8009ad6 <UART_SetConfig+0x2456>
 8009aae:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009ab2:	e010      	b.n	8009ad6 <UART_SetConfig+0x2456>
 8009ab4:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009ab8:	e00d      	b.n	8009ad6 <UART_SetConfig+0x2456>
 8009aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009abe:	e00a      	b.n	8009ad6 <UART_SetConfig+0x2456>
 8009ac0:	f241 5355 	movw	r3, #5461	; 0x1555
 8009ac4:	e007      	b.n	8009ad6 <UART_SetConfig+0x2456>
 8009ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009aca:	e004      	b.n	8009ad6 <UART_SetConfig+0x2456>
 8009acc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009ad0:	e001      	b.n	8009ad6 <UART_SetConfig+0x2456>
 8009ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	6852      	ldr	r2, [r2, #4]
 8009ada:	0852      	lsrs	r2, r2, #1
 8009adc:	441a      	add	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009aea:	e003      	b.n	8009af4 <UART_SetConfig+0x2474>
      default:
        ret = HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009af2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af6:	2b0f      	cmp	r3, #15
 8009af8:	d908      	bls.n	8009b0c <UART_SetConfig+0x248c>
 8009afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b00:	d204      	bcs.n	8009b0c <UART_SetConfig+0x248c>
    {
      huart->Instance->BRR = usartdiv;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b08:	60da      	str	r2, [r3, #12]
 8009b0a:	e002      	b.n	8009b12 <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009b2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3740      	adds	r7, #64	; 0x40
 8009b36:	46bd      	mov	sp, r7
 8009b38:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009b3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b48:	2bff      	cmp	r3, #255	; 0xff
 8009b4a:	d904      	bls.n	8009b56 <UART_AdvFeatureConfig+0x1a>
 8009b4c:	f640 4149 	movw	r1, #3145	; 0xc49
 8009b50:	4899      	ldr	r0, [pc, #612]	; (8009db8 <UART_AdvFeatureConfig+0x27c>)
 8009b52:	f7f7 f8b6 	bl	8000cc2 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b5a:	f003 0301 	and.w	r3, r3, #1
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d018      	beq.n	8009b94 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d009      	beq.n	8009b7e <UART_AdvFeatureConfig+0x42>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b72:	d004      	beq.n	8009b7e <UART_AdvFeatureConfig+0x42>
 8009b74:	f640 414e 	movw	r1, #3150	; 0xc4e
 8009b78:	488f      	ldr	r0, [pc, #572]	; (8009db8 <UART_AdvFeatureConfig+0x27c>)
 8009b7a:	f7f7 f8a2 	bl	8000cc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	430a      	orrs	r2, r1
 8009b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b98:	f003 0302 	and.w	r3, r3, #2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d018      	beq.n	8009bd2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d009      	beq.n	8009bbc <UART_AdvFeatureConfig+0x80>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bb0:	d004      	beq.n	8009bbc <UART_AdvFeatureConfig+0x80>
 8009bb2:	f640 4155 	movw	r1, #3157	; 0xc55
 8009bb6:	4880      	ldr	r0, [pc, #512]	; (8009db8 <UART_AdvFeatureConfig+0x27c>)
 8009bb8:	f7f7 f883 	bl	8000cc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	430a      	orrs	r2, r1
 8009bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd6:	f003 0304 	and.w	r3, r3, #4
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d018      	beq.n	8009c10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d009      	beq.n	8009bfa <UART_AdvFeatureConfig+0xbe>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009bee:	d004      	beq.n	8009bfa <UART_AdvFeatureConfig+0xbe>
 8009bf0:	f640 415c 	movw	r1, #3164	; 0xc5c
 8009bf4:	4870      	ldr	r0, [pc, #448]	; (8009db8 <UART_AdvFeatureConfig+0x27c>)
 8009bf6:	f7f7 f864 	bl	8000cc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	430a      	orrs	r2, r1
 8009c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c14:	f003 0308 	and.w	r3, r3, #8
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d018      	beq.n	8009c4e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d009      	beq.n	8009c38 <UART_AdvFeatureConfig+0xfc>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c2c:	d004      	beq.n	8009c38 <UART_AdvFeatureConfig+0xfc>
 8009c2e:	f640 4163 	movw	r1, #3171	; 0xc63
 8009c32:	4861      	ldr	r0, [pc, #388]	; (8009db8 <UART_AdvFeatureConfig+0x27c>)
 8009c34:	f7f7 f845 	bl	8000cc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	430a      	orrs	r2, r1
 8009c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c52:	f003 0310 	and.w	r3, r3, #16
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d018      	beq.n	8009c8c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d009      	beq.n	8009c76 <UART_AdvFeatureConfig+0x13a>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c6a:	d004      	beq.n	8009c76 <UART_AdvFeatureConfig+0x13a>
 8009c6c:	f640 416a 	movw	r1, #3178	; 0xc6a
 8009c70:	4851      	ldr	r0, [pc, #324]	; (8009db8 <UART_AdvFeatureConfig+0x27c>)
 8009c72:	f7f7 f826 	bl	8000cc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	430a      	orrs	r2, r1
 8009c8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c90:	f003 0320 	and.w	r3, r3, #32
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d018      	beq.n	8009cca <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d009      	beq.n	8009cb4 <UART_AdvFeatureConfig+0x178>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ca8:	d004      	beq.n	8009cb4 <UART_AdvFeatureConfig+0x178>
 8009caa:	f640 4171 	movw	r1, #3185	; 0xc71
 8009cae:	4842      	ldr	r0, [pc, #264]	; (8009db8 <UART_AdvFeatureConfig+0x27c>)
 8009cb0:	f7f7 f807 	bl	8000cc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	430a      	orrs	r2, r1
 8009cc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f000 8082 	beq.w	8009ddc <UART_AdvFeatureConfig+0x2a0>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a37      	ldr	r2, [pc, #220]	; (8009dbc <UART_AdvFeatureConfig+0x280>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d027      	beq.n	8009d32 <UART_AdvFeatureConfig+0x1f6>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a36      	ldr	r2, [pc, #216]	; (8009dc0 <UART_AdvFeatureConfig+0x284>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d022      	beq.n	8009d32 <UART_AdvFeatureConfig+0x1f6>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a34      	ldr	r2, [pc, #208]	; (8009dc4 <UART_AdvFeatureConfig+0x288>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d01d      	beq.n	8009d32 <UART_AdvFeatureConfig+0x1f6>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a33      	ldr	r2, [pc, #204]	; (8009dc8 <UART_AdvFeatureConfig+0x28c>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d018      	beq.n	8009d32 <UART_AdvFeatureConfig+0x1f6>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a31      	ldr	r2, [pc, #196]	; (8009dcc <UART_AdvFeatureConfig+0x290>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d013      	beq.n	8009d32 <UART_AdvFeatureConfig+0x1f6>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a30      	ldr	r2, [pc, #192]	; (8009dd0 <UART_AdvFeatureConfig+0x294>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d00e      	beq.n	8009d32 <UART_AdvFeatureConfig+0x1f6>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a2e      	ldr	r2, [pc, #184]	; (8009dd4 <UART_AdvFeatureConfig+0x298>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d009      	beq.n	8009d32 <UART_AdvFeatureConfig+0x1f6>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a2d      	ldr	r2, [pc, #180]	; (8009dd8 <UART_AdvFeatureConfig+0x29c>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d004      	beq.n	8009d32 <UART_AdvFeatureConfig+0x1f6>
 8009d28:	f640 4178 	movw	r1, #3192	; 0xc78
 8009d2c:	4822      	ldr	r0, [pc, #136]	; (8009db8 <UART_AdvFeatureConfig+0x27c>)
 8009d2e:	f7f6 ffc8 	bl	8000cc2 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d009      	beq.n	8009d4e <UART_AdvFeatureConfig+0x212>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d42:	d004      	beq.n	8009d4e <UART_AdvFeatureConfig+0x212>
 8009d44:	f640 4179 	movw	r1, #3193	; 0xc79
 8009d48:	481b      	ldr	r0, [pc, #108]	; (8009db8 <UART_AdvFeatureConfig+0x27c>)
 8009d4a:	f7f6 ffba 	bl	8000cc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	430a      	orrs	r2, r1
 8009d62:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d6c:	d136      	bne.n	8009ddc <UART_AdvFeatureConfig+0x2a0>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d013      	beq.n	8009d9e <UART_AdvFeatureConfig+0x262>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d7e:	d00e      	beq.n	8009d9e <UART_AdvFeatureConfig+0x262>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d88:	d009      	beq.n	8009d9e <UART_AdvFeatureConfig+0x262>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d8e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009d92:	d004      	beq.n	8009d9e <UART_AdvFeatureConfig+0x262>
 8009d94:	f640 417e 	movw	r1, #3198	; 0xc7e
 8009d98:	4807      	ldr	r0, [pc, #28]	; (8009db8 <UART_AdvFeatureConfig+0x27c>)
 8009d9a:	f7f6 ff92 	bl	8000cc2 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	430a      	orrs	r2, r1
 8009db2:	605a      	str	r2, [r3, #4]
 8009db4:	e012      	b.n	8009ddc <UART_AdvFeatureConfig+0x2a0>
 8009db6:	bf00      	nop
 8009db8:	080189b0 	.word	0x080189b0
 8009dbc:	40011000 	.word	0x40011000
 8009dc0:	40004400 	.word	0x40004400
 8009dc4:	40004800 	.word	0x40004800
 8009dc8:	40004c00 	.word	0x40004c00
 8009dcc:	40005000 	.word	0x40005000
 8009dd0:	40011400 	.word	0x40011400
 8009dd4:	40007800 	.word	0x40007800
 8009dd8:	40007c00 	.word	0x40007c00
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d018      	beq.n	8009e1a <UART_AdvFeatureConfig+0x2de>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d009      	beq.n	8009e04 <UART_AdvFeatureConfig+0x2c8>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009df4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009df8:	d004      	beq.n	8009e04 <UART_AdvFeatureConfig+0x2c8>
 8009dfa:	f640 4186 	movw	r1, #3206	; 0xc86
 8009dfe:	4809      	ldr	r0, [pc, #36]	; (8009e24 <UART_AdvFeatureConfig+0x2e8>)
 8009e00:	f7f6 ff5f 	bl	8000cc2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	430a      	orrs	r2, r1
 8009e18:	605a      	str	r2, [r3, #4]
  }
}
 8009e1a:	bf00      	nop
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	080189b0 	.word	0x080189b0

08009e28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b086      	sub	sp, #24
 8009e2c:	af02      	add	r7, sp, #8
 8009e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009e38:	f7f7 fb5c 	bl	80014f4 <HAL_GetTick>
 8009e3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f003 0308 	and.w	r3, r3, #8
 8009e48:	2b08      	cmp	r3, #8
 8009e4a:	d10e      	bne.n	8009e6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e50:	9300      	str	r3, [sp, #0]
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2200      	movs	r2, #0
 8009e56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 f82c 	bl	8009eb8 <UART_WaitOnFlagUntilTimeout>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e66:	2303      	movs	r3, #3
 8009e68:	e022      	b.n	8009eb0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f003 0304 	and.w	r3, r3, #4
 8009e74:	2b04      	cmp	r3, #4
 8009e76:	d10e      	bne.n	8009e96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f816 	bl	8009eb8 <UART_WaitOnFlagUntilTimeout>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d001      	beq.n	8009e96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e92:	2303      	movs	r3, #3
 8009e94:	e00c      	b.n	8009eb0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2220      	movs	r2, #32
 8009e9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2220      	movs	r2, #32
 8009ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	603b      	str	r3, [r7, #0]
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ec8:	e062      	b.n	8009f90 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ed0:	d05e      	beq.n	8009f90 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ed2:	f7f7 fb0f 	bl	80014f4 <HAL_GetTick>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	69ba      	ldr	r2, [r7, #24]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d302      	bcc.n	8009ee8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d11d      	bne.n	8009f24 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009ef6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	689a      	ldr	r2, [r3, #8]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f022 0201 	bic.w	r2, r2, #1
 8009f06:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2220      	movs	r2, #32
 8009f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2220      	movs	r2, #32
 8009f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009f20:	2303      	movs	r3, #3
 8009f22:	e045      	b.n	8009fb0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f003 0304 	and.w	r3, r3, #4
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d02e      	beq.n	8009f90 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	69db      	ldr	r3, [r3, #28]
 8009f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f40:	d126      	bne.n	8009f90 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f4a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f5a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	689a      	ldr	r2, [r3, #8]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f022 0201 	bic.w	r2, r2, #1
 8009f6a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2220      	movs	r2, #32
 8009f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2220      	movs	r2, #32
 8009f78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2220      	movs	r2, #32
 8009f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2200      	movs	r2, #0
 8009f88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	e00f      	b.n	8009fb0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	69da      	ldr	r2, [r3, #28]
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	4013      	ands	r3, r2
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	bf0c      	ite	eq
 8009fa0:	2301      	moveq	r3, #1
 8009fa2:	2300      	movne	r3, #0
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	79fb      	ldrb	r3, [r7, #7]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d08d      	beq.n	8009eca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a2e      	ldr	r2, [pc, #184]	; (800a080 <HAL_UARTEx_DisableFifoMode+0xc8>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d027      	beq.n	800a01a <HAL_UARTEx_DisableFifoMode+0x62>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a2d      	ldr	r2, [pc, #180]	; (800a084 <HAL_UARTEx_DisableFifoMode+0xcc>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d022      	beq.n	800a01a <HAL_UARTEx_DisableFifoMode+0x62>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a2b      	ldr	r2, [pc, #172]	; (800a088 <HAL_UARTEx_DisableFifoMode+0xd0>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d01d      	beq.n	800a01a <HAL_UARTEx_DisableFifoMode+0x62>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a2a      	ldr	r2, [pc, #168]	; (800a08c <HAL_UARTEx_DisableFifoMode+0xd4>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d018      	beq.n	800a01a <HAL_UARTEx_DisableFifoMode+0x62>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a28      	ldr	r2, [pc, #160]	; (800a090 <HAL_UARTEx_DisableFifoMode+0xd8>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d013      	beq.n	800a01a <HAL_UARTEx_DisableFifoMode+0x62>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a27      	ldr	r2, [pc, #156]	; (800a094 <HAL_UARTEx_DisableFifoMode+0xdc>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d00e      	beq.n	800a01a <HAL_UARTEx_DisableFifoMode+0x62>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a25      	ldr	r2, [pc, #148]	; (800a098 <HAL_UARTEx_DisableFifoMode+0xe0>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d009      	beq.n	800a01a <HAL_UARTEx_DisableFifoMode+0x62>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a24      	ldr	r2, [pc, #144]	; (800a09c <HAL_UARTEx_DisableFifoMode+0xe4>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d004      	beq.n	800a01a <HAL_UARTEx_DisableFifoMode+0x62>
 800a010:	f240 2111 	movw	r1, #529	; 0x211
 800a014:	4822      	ldr	r0, [pc, #136]	; (800a0a0 <HAL_UARTEx_DisableFifoMode+0xe8>)
 800a016:	f7f6 fe54 	bl	8000cc2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a020:	2b01      	cmp	r3, #1
 800a022:	d101      	bne.n	800a028 <HAL_UARTEx_DisableFifoMode+0x70>
 800a024:	2302      	movs	r3, #2
 800a026:	e027      	b.n	800a078 <HAL_UARTEx_DisableFifoMode+0xc0>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2224      	movs	r2, #36	; 0x24
 800a034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f022 0201 	bic.w	r2, r2, #1
 800a04e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a056:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2220      	movs	r2, #32
 800a06a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2200      	movs	r2, #0
 800a072:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	40011000 	.word	0x40011000
 800a084:	40004400 	.word	0x40004400
 800a088:	40004800 	.word	0x40004800
 800a08c:	40004c00 	.word	0x40004c00
 800a090:	40005000 	.word	0x40005000
 800a094:	40011400 	.word	0x40011400
 800a098:	40007800 	.word	0x40007800
 800a09c:	40007c00 	.word	0x40007c00
 800a0a0:	080189ec 	.word	0x080189ec

0800a0a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a40      	ldr	r2, [pc, #256]	; (800a1b4 <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d027      	beq.n	800a108 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a3e      	ldr	r2, [pc, #248]	; (800a1b8 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d022      	beq.n	800a108 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a3d      	ldr	r2, [pc, #244]	; (800a1bc <HAL_UARTEx_SetTxFifoThreshold+0x118>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d01d      	beq.n	800a108 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a3b      	ldr	r2, [pc, #236]	; (800a1c0 <HAL_UARTEx_SetTxFifoThreshold+0x11c>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d018      	beq.n	800a108 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a3a      	ldr	r2, [pc, #232]	; (800a1c4 <HAL_UARTEx_SetTxFifoThreshold+0x120>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d013      	beq.n	800a108 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a38      	ldr	r2, [pc, #224]	; (800a1c8 <HAL_UARTEx_SetTxFifoThreshold+0x124>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d00e      	beq.n	800a108 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a37      	ldr	r2, [pc, #220]	; (800a1cc <HAL_UARTEx_SetTxFifoThreshold+0x128>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d009      	beq.n	800a108 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a35      	ldr	r2, [pc, #212]	; (800a1d0 <HAL_UARTEx_SetTxFifoThreshold+0x12c>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d004      	beq.n	800a108 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a0fe:	f240 213f 	movw	r1, #575	; 0x23f
 800a102:	4834      	ldr	r0, [pc, #208]	; (800a1d4 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800a104:	f7f6 fddd 	bl	8000cc2 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d018      	beq.n	800a140 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a114:	d014      	beq.n	800a140 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a11c:	d010      	beq.n	800a140 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800a124:	d00c      	beq.n	800a140 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a12c:	d008      	beq.n	800a140 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 800a134:	d004      	beq.n	800a140 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a136:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a13a:	4826      	ldr	r0, [pc, #152]	; (800a1d4 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800a13c:	f7f6 fdc1 	bl	8000cc2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a146:	2b01      	cmp	r3, #1
 800a148:	d101      	bne.n	800a14e <HAL_UARTEx_SetTxFifoThreshold+0xaa>
 800a14a:	2302      	movs	r3, #2
 800a14c:	e02d      	b.n	800a1aa <HAL_UARTEx_SetTxFifoThreshold+0x106>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2201      	movs	r2, #1
 800a152:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2224      	movs	r2, #36	; 0x24
 800a15a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f022 0201 	bic.w	r2, r2, #1
 800a174:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	683a      	ldr	r2, [r7, #0]
 800a186:	430a      	orrs	r2, r1
 800a188:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f8be 	bl	800a30c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2220      	movs	r2, #32
 800a19c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a1a8:	2300      	movs	r3, #0
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3710      	adds	r7, #16
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
 800a1b2:	bf00      	nop
 800a1b4:	40011000 	.word	0x40011000
 800a1b8:	40004400 	.word	0x40004400
 800a1bc:	40004800 	.word	0x40004800
 800a1c0:	40004c00 	.word	0x40004c00
 800a1c4:	40005000 	.word	0x40005000
 800a1c8:	40011400 	.word	0x40011400
 800a1cc:	40007800 	.word	0x40007800
 800a1d0:	40007c00 	.word	0x40007c00
 800a1d4:	080189ec 	.word	0x080189ec

0800a1d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a40      	ldr	r2, [pc, #256]	; (800a2e8 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d027      	beq.n	800a23c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a3e      	ldr	r2, [pc, #248]	; (800a2ec <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d022      	beq.n	800a23c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a3d      	ldr	r2, [pc, #244]	; (800a2f0 <HAL_UARTEx_SetRxFifoThreshold+0x118>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d01d      	beq.n	800a23c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a3b      	ldr	r2, [pc, #236]	; (800a2f4 <HAL_UARTEx_SetRxFifoThreshold+0x11c>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d018      	beq.n	800a23c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a3a      	ldr	r2, [pc, #232]	; (800a2f8 <HAL_UARTEx_SetRxFifoThreshold+0x120>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d013      	beq.n	800a23c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a38      	ldr	r2, [pc, #224]	; (800a2fc <HAL_UARTEx_SetRxFifoThreshold+0x124>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d00e      	beq.n	800a23c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a37      	ldr	r2, [pc, #220]	; (800a300 <HAL_UARTEx_SetRxFifoThreshold+0x128>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d009      	beq.n	800a23c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a35      	ldr	r2, [pc, #212]	; (800a304 <HAL_UARTEx_SetRxFifoThreshold+0x12c>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d004      	beq.n	800a23c <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a232:	f44f 711c 	mov.w	r1, #624	; 0x270
 800a236:	4834      	ldr	r0, [pc, #208]	; (800a308 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800a238:	f7f6 fd43 	bl	8000cc2 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d018      	beq.n	800a274 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a248:	d014      	beq.n	800a274 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a250:	d010      	beq.n	800a274 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800a258:	d00c      	beq.n	800a274 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a260:	d008      	beq.n	800a274 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800a268:	d004      	beq.n	800a274 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a26a:	f240 2171 	movw	r1, #625	; 0x271
 800a26e:	4826      	ldr	r0, [pc, #152]	; (800a308 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800a270:	f7f6 fd27 	bl	8000cc2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d101      	bne.n	800a282 <HAL_UARTEx_SetRxFifoThreshold+0xaa>
 800a27e:	2302      	movs	r3, #2
 800a280:	e02d      	b.n	800a2de <HAL_UARTEx_SetRxFifoThreshold+0x106>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2201      	movs	r2, #1
 800a286:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2224      	movs	r2, #36	; 0x24
 800a28e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f022 0201 	bic.w	r2, r2, #1
 800a2a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f824 	bl	800a30c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2220      	movs	r2, #32
 800a2d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	40011000 	.word	0x40011000
 800a2ec:	40004400 	.word	0x40004400
 800a2f0:	40004800 	.word	0x40004800
 800a2f4:	40004c00 	.word	0x40004c00
 800a2f8:	40005000 	.word	0x40005000
 800a2fc:	40011400 	.word	0x40011400
 800a300:	40007800 	.word	0x40007800
 800a304:	40007c00 	.word	0x40007c00
 800a308:	080189ec 	.word	0x080189ec

0800a30c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b089      	sub	sp, #36	; 0x24
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a314:	4a2f      	ldr	r2, [pc, #188]	; (800a3d4 <UARTEx_SetNbDataToProcess+0xc8>)
 800a316:	f107 0314 	add.w	r3, r7, #20
 800a31a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a31e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a322:	4a2d      	ldr	r2, [pc, #180]	; (800a3d8 <UARTEx_SetNbDataToProcess+0xcc>)
 800a324:	f107 030c 	add.w	r3, r7, #12
 800a328:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a32c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a334:	2b00      	cmp	r3, #0
 800a336:	d108      	bne.n	800a34a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a348:	e03d      	b.n	800a3c6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a34a:	2308      	movs	r3, #8
 800a34c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a34e:	2308      	movs	r3, #8
 800a350:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	0e5b      	lsrs	r3, r3, #25
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	f003 0307 	and.w	r3, r3, #7
 800a360:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	0f5b      	lsrs	r3, r3, #29
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	f003 0307 	and.w	r3, r3, #7
 800a370:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a372:	7fbb      	ldrb	r3, [r7, #30]
 800a374:	7f3a      	ldrb	r2, [r7, #28]
 800a376:	f107 0120 	add.w	r1, r7, #32
 800a37a:	440a      	add	r2, r1
 800a37c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a380:	fb02 f303 	mul.w	r3, r2, r3
 800a384:	7f3a      	ldrb	r2, [r7, #28]
 800a386:	f107 0120 	add.w	r1, r7, #32
 800a38a:	440a      	add	r2, r1
 800a38c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a390:	fb93 f3f2 	sdiv	r3, r3, r2
 800a394:	b29a      	uxth	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a39c:	7ffb      	ldrb	r3, [r7, #31]
 800a39e:	7f7a      	ldrb	r2, [r7, #29]
 800a3a0:	f107 0120 	add.w	r1, r7, #32
 800a3a4:	440a      	add	r2, r1
 800a3a6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a3aa:	fb02 f303 	mul.w	r3, r2, r3
 800a3ae:	7f7a      	ldrb	r2, [r7, #29]
 800a3b0:	f107 0120 	add.w	r1, r7, #32
 800a3b4:	440a      	add	r2, r1
 800a3b6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a3ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3be:	b29a      	uxth	r2, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a3c6:	bf00      	nop
 800a3c8:	3724      	adds	r7, #36	; 0x24
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr
 800a3d2:	bf00      	nop
 800a3d4:	08018a28 	.word	0x08018a28
 800a3d8:	08018a30 	.word	0x08018a30

0800a3dc <MX_LWIP_Init>:
/* USER CODE END 2 */

/**
 * LwIP initialization function
 */
void MX_LWIP_Init(void) {
 800a3dc:	b5b0      	push	{r4, r5, r7, lr}
 800a3de:	b08c      	sub	sp, #48	; 0x30
 800a3e0:	af04      	add	r7, sp, #16
	/* IP addresses initialization */
	IP_ADDRESS[0] = 10;
 800a3e2:	4b96      	ldr	r3, [pc, #600]	; (800a63c <MX_LWIP_Init+0x260>)
 800a3e4:	220a      	movs	r2, #10
 800a3e6:	701a      	strb	r2, [r3, #0]
	IP_ADDRESS[1] = 10;
 800a3e8:	4b94      	ldr	r3, [pc, #592]	; (800a63c <MX_LWIP_Init+0x260>)
 800a3ea:	220a      	movs	r2, #10
 800a3ec:	705a      	strb	r2, [r3, #1]
	IP_ADDRESS[2] = 10;
 800a3ee:	4b93      	ldr	r3, [pc, #588]	; (800a63c <MX_LWIP_Init+0x260>)
 800a3f0:	220a      	movs	r2, #10
 800a3f2:	709a      	strb	r2, [r3, #2]
	IP_ADDRESS[3] = 10;
 800a3f4:	4b91      	ldr	r3, [pc, #580]	; (800a63c <MX_LWIP_Init+0x260>)
 800a3f6:	220a      	movs	r2, #10
 800a3f8:	70da      	strb	r2, [r3, #3]
	NETMASK_ADDRESS[0] = 255;
 800a3fa:	4b91      	ldr	r3, [pc, #580]	; (800a640 <MX_LWIP_Init+0x264>)
 800a3fc:	22ff      	movs	r2, #255	; 0xff
 800a3fe:	701a      	strb	r2, [r3, #0]
	NETMASK_ADDRESS[1] = 255;
 800a400:	4b8f      	ldr	r3, [pc, #572]	; (800a640 <MX_LWIP_Init+0x264>)
 800a402:	22ff      	movs	r2, #255	; 0xff
 800a404:	705a      	strb	r2, [r3, #1]
	NETMASK_ADDRESS[2] = 255;
 800a406:	4b8e      	ldr	r3, [pc, #568]	; (800a640 <MX_LWIP_Init+0x264>)
 800a408:	22ff      	movs	r2, #255	; 0xff
 800a40a:	709a      	strb	r2, [r3, #2]
	NETMASK_ADDRESS[3] = 0;
 800a40c:	4b8c      	ldr	r3, [pc, #560]	; (800a640 <MX_LWIP_Init+0x264>)
 800a40e:	2200      	movs	r2, #0
 800a410:	70da      	strb	r2, [r3, #3]
	GATEWAY_ADDRESS[0] = 10;
 800a412:	4b8c      	ldr	r3, [pc, #560]	; (800a644 <MX_LWIP_Init+0x268>)
 800a414:	220a      	movs	r2, #10
 800a416:	701a      	strb	r2, [r3, #0]
	GATEWAY_ADDRESS[1] = 10;
 800a418:	4b8a      	ldr	r3, [pc, #552]	; (800a644 <MX_LWIP_Init+0x268>)
 800a41a:	220a      	movs	r2, #10
 800a41c:	705a      	strb	r2, [r3, #1]
	GATEWAY_ADDRESS[2] = 10;
 800a41e:	4b89      	ldr	r3, [pc, #548]	; (800a644 <MX_LWIP_Init+0x268>)
 800a420:	220a      	movs	r2, #10
 800a422:	709a      	strb	r2, [r3, #2]
	GATEWAY_ADDRESS[3] = 11;
 800a424:	4b87      	ldr	r3, [pc, #540]	; (800a644 <MX_LWIP_Init+0x268>)
 800a426:	220b      	movs	r2, #11
 800a428:	70da      	strb	r2, [r3, #3]

	/* Initilialize the LwIP stack with RTOS */
	tcpip_init( NULL, NULL);
 800a42a:	2100      	movs	r1, #0
 800a42c:	2000      	movs	r0, #0
 800a42e:	f004 fa03 	bl	800e838 <tcpip_init>

	/* IP addresses initialization without DHCP (IPv4) */
	IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2],
 800a432:	4b82      	ldr	r3, [pc, #520]	; (800a63c <MX_LWIP_Init+0x260>)
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	061a      	lsls	r2, r3, #24
 800a438:	4b80      	ldr	r3, [pc, #512]	; (800a63c <MX_LWIP_Init+0x260>)
 800a43a:	785b      	ldrb	r3, [r3, #1]
 800a43c:	041b      	lsls	r3, r3, #16
 800a43e:	431a      	orrs	r2, r3
 800a440:	4b7e      	ldr	r3, [pc, #504]	; (800a63c <MX_LWIP_Init+0x260>)
 800a442:	789b      	ldrb	r3, [r3, #2]
 800a444:	021b      	lsls	r3, r3, #8
 800a446:	4313      	orrs	r3, r2
 800a448:	4a7c      	ldr	r2, [pc, #496]	; (800a63c <MX_LWIP_Init+0x260>)
 800a44a:	78d2      	ldrb	r2, [r2, #3]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	061a      	lsls	r2, r3, #24
 800a450:	4b7a      	ldr	r3, [pc, #488]	; (800a63c <MX_LWIP_Init+0x260>)
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	0619      	lsls	r1, r3, #24
 800a456:	4b79      	ldr	r3, [pc, #484]	; (800a63c <MX_LWIP_Init+0x260>)
 800a458:	785b      	ldrb	r3, [r3, #1]
 800a45a:	041b      	lsls	r3, r3, #16
 800a45c:	4319      	orrs	r1, r3
 800a45e:	4b77      	ldr	r3, [pc, #476]	; (800a63c <MX_LWIP_Init+0x260>)
 800a460:	789b      	ldrb	r3, [r3, #2]
 800a462:	021b      	lsls	r3, r3, #8
 800a464:	430b      	orrs	r3, r1
 800a466:	4975      	ldr	r1, [pc, #468]	; (800a63c <MX_LWIP_Init+0x260>)
 800a468:	78c9      	ldrb	r1, [r1, #3]
 800a46a:	430b      	orrs	r3, r1
 800a46c:	021b      	lsls	r3, r3, #8
 800a46e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a472:	431a      	orrs	r2, r3
 800a474:	4b71      	ldr	r3, [pc, #452]	; (800a63c <MX_LWIP_Init+0x260>)
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	0619      	lsls	r1, r3, #24
 800a47a:	4b70      	ldr	r3, [pc, #448]	; (800a63c <MX_LWIP_Init+0x260>)
 800a47c:	785b      	ldrb	r3, [r3, #1]
 800a47e:	041b      	lsls	r3, r3, #16
 800a480:	4319      	orrs	r1, r3
 800a482:	4b6e      	ldr	r3, [pc, #440]	; (800a63c <MX_LWIP_Init+0x260>)
 800a484:	789b      	ldrb	r3, [r3, #2]
 800a486:	021b      	lsls	r3, r3, #8
 800a488:	430b      	orrs	r3, r1
 800a48a:	496c      	ldr	r1, [pc, #432]	; (800a63c <MX_LWIP_Init+0x260>)
 800a48c:	78c9      	ldrb	r1, [r1, #3]
 800a48e:	430b      	orrs	r3, r1
 800a490:	0a1b      	lsrs	r3, r3, #8
 800a492:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a496:	431a      	orrs	r2, r3
 800a498:	4b68      	ldr	r3, [pc, #416]	; (800a63c <MX_LWIP_Init+0x260>)
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	0619      	lsls	r1, r3, #24
 800a49e:	4b67      	ldr	r3, [pc, #412]	; (800a63c <MX_LWIP_Init+0x260>)
 800a4a0:	785b      	ldrb	r3, [r3, #1]
 800a4a2:	041b      	lsls	r3, r3, #16
 800a4a4:	4319      	orrs	r1, r3
 800a4a6:	4b65      	ldr	r3, [pc, #404]	; (800a63c <MX_LWIP_Init+0x260>)
 800a4a8:	789b      	ldrb	r3, [r3, #2]
 800a4aa:	021b      	lsls	r3, r3, #8
 800a4ac:	430b      	orrs	r3, r1
 800a4ae:	4963      	ldr	r1, [pc, #396]	; (800a63c <MX_LWIP_Init+0x260>)
 800a4b0:	78c9      	ldrb	r1, [r1, #3]
 800a4b2:	430b      	orrs	r3, r1
 800a4b4:	0e1b      	lsrs	r3, r3, #24
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	4a63      	ldr	r2, [pc, #396]	; (800a648 <MX_LWIP_Init+0x26c>)
 800a4ba:	6013      	str	r3, [r2, #0]
			IP_ADDRESS[3]);
	IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1],
 800a4bc:	4b60      	ldr	r3, [pc, #384]	; (800a640 <MX_LWIP_Init+0x264>)
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	061a      	lsls	r2, r3, #24
 800a4c2:	4b5f      	ldr	r3, [pc, #380]	; (800a640 <MX_LWIP_Init+0x264>)
 800a4c4:	785b      	ldrb	r3, [r3, #1]
 800a4c6:	041b      	lsls	r3, r3, #16
 800a4c8:	431a      	orrs	r2, r3
 800a4ca:	4b5d      	ldr	r3, [pc, #372]	; (800a640 <MX_LWIP_Init+0x264>)
 800a4cc:	789b      	ldrb	r3, [r3, #2]
 800a4ce:	021b      	lsls	r3, r3, #8
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	4a5b      	ldr	r2, [pc, #364]	; (800a640 <MX_LWIP_Init+0x264>)
 800a4d4:	78d2      	ldrb	r2, [r2, #3]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	061a      	lsls	r2, r3, #24
 800a4da:	4b59      	ldr	r3, [pc, #356]	; (800a640 <MX_LWIP_Init+0x264>)
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	0619      	lsls	r1, r3, #24
 800a4e0:	4b57      	ldr	r3, [pc, #348]	; (800a640 <MX_LWIP_Init+0x264>)
 800a4e2:	785b      	ldrb	r3, [r3, #1]
 800a4e4:	041b      	lsls	r3, r3, #16
 800a4e6:	4319      	orrs	r1, r3
 800a4e8:	4b55      	ldr	r3, [pc, #340]	; (800a640 <MX_LWIP_Init+0x264>)
 800a4ea:	789b      	ldrb	r3, [r3, #2]
 800a4ec:	021b      	lsls	r3, r3, #8
 800a4ee:	430b      	orrs	r3, r1
 800a4f0:	4953      	ldr	r1, [pc, #332]	; (800a640 <MX_LWIP_Init+0x264>)
 800a4f2:	78c9      	ldrb	r1, [r1, #3]
 800a4f4:	430b      	orrs	r3, r1
 800a4f6:	021b      	lsls	r3, r3, #8
 800a4f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a4fc:	431a      	orrs	r2, r3
 800a4fe:	4b50      	ldr	r3, [pc, #320]	; (800a640 <MX_LWIP_Init+0x264>)
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	0619      	lsls	r1, r3, #24
 800a504:	4b4e      	ldr	r3, [pc, #312]	; (800a640 <MX_LWIP_Init+0x264>)
 800a506:	785b      	ldrb	r3, [r3, #1]
 800a508:	041b      	lsls	r3, r3, #16
 800a50a:	4319      	orrs	r1, r3
 800a50c:	4b4c      	ldr	r3, [pc, #304]	; (800a640 <MX_LWIP_Init+0x264>)
 800a50e:	789b      	ldrb	r3, [r3, #2]
 800a510:	021b      	lsls	r3, r3, #8
 800a512:	430b      	orrs	r3, r1
 800a514:	494a      	ldr	r1, [pc, #296]	; (800a640 <MX_LWIP_Init+0x264>)
 800a516:	78c9      	ldrb	r1, [r1, #3]
 800a518:	430b      	orrs	r3, r1
 800a51a:	0a1b      	lsrs	r3, r3, #8
 800a51c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a520:	431a      	orrs	r2, r3
 800a522:	4b47      	ldr	r3, [pc, #284]	; (800a640 <MX_LWIP_Init+0x264>)
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	0619      	lsls	r1, r3, #24
 800a528:	4b45      	ldr	r3, [pc, #276]	; (800a640 <MX_LWIP_Init+0x264>)
 800a52a:	785b      	ldrb	r3, [r3, #1]
 800a52c:	041b      	lsls	r3, r3, #16
 800a52e:	4319      	orrs	r1, r3
 800a530:	4b43      	ldr	r3, [pc, #268]	; (800a640 <MX_LWIP_Init+0x264>)
 800a532:	789b      	ldrb	r3, [r3, #2]
 800a534:	021b      	lsls	r3, r3, #8
 800a536:	430b      	orrs	r3, r1
 800a538:	4941      	ldr	r1, [pc, #260]	; (800a640 <MX_LWIP_Init+0x264>)
 800a53a:	78c9      	ldrb	r1, [r1, #3]
 800a53c:	430b      	orrs	r3, r1
 800a53e:	0e1b      	lsrs	r3, r3, #24
 800a540:	4313      	orrs	r3, r2
 800a542:	4a42      	ldr	r2, [pc, #264]	; (800a64c <MX_LWIP_Init+0x270>)
 800a544:	6013      	str	r3, [r2, #0]
			NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
	IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2],
 800a546:	4b3f      	ldr	r3, [pc, #252]	; (800a644 <MX_LWIP_Init+0x268>)
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	061a      	lsls	r2, r3, #24
 800a54c:	4b3d      	ldr	r3, [pc, #244]	; (800a644 <MX_LWIP_Init+0x268>)
 800a54e:	785b      	ldrb	r3, [r3, #1]
 800a550:	041b      	lsls	r3, r3, #16
 800a552:	431a      	orrs	r2, r3
 800a554:	4b3b      	ldr	r3, [pc, #236]	; (800a644 <MX_LWIP_Init+0x268>)
 800a556:	789b      	ldrb	r3, [r3, #2]
 800a558:	021b      	lsls	r3, r3, #8
 800a55a:	4313      	orrs	r3, r2
 800a55c:	4a39      	ldr	r2, [pc, #228]	; (800a644 <MX_LWIP_Init+0x268>)
 800a55e:	78d2      	ldrb	r2, [r2, #3]
 800a560:	4313      	orrs	r3, r2
 800a562:	061a      	lsls	r2, r3, #24
 800a564:	4b37      	ldr	r3, [pc, #220]	; (800a644 <MX_LWIP_Init+0x268>)
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	0619      	lsls	r1, r3, #24
 800a56a:	4b36      	ldr	r3, [pc, #216]	; (800a644 <MX_LWIP_Init+0x268>)
 800a56c:	785b      	ldrb	r3, [r3, #1]
 800a56e:	041b      	lsls	r3, r3, #16
 800a570:	4319      	orrs	r1, r3
 800a572:	4b34      	ldr	r3, [pc, #208]	; (800a644 <MX_LWIP_Init+0x268>)
 800a574:	789b      	ldrb	r3, [r3, #2]
 800a576:	021b      	lsls	r3, r3, #8
 800a578:	430b      	orrs	r3, r1
 800a57a:	4932      	ldr	r1, [pc, #200]	; (800a644 <MX_LWIP_Init+0x268>)
 800a57c:	78c9      	ldrb	r1, [r1, #3]
 800a57e:	430b      	orrs	r3, r1
 800a580:	021b      	lsls	r3, r3, #8
 800a582:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a586:	431a      	orrs	r2, r3
 800a588:	4b2e      	ldr	r3, [pc, #184]	; (800a644 <MX_LWIP_Init+0x268>)
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	0619      	lsls	r1, r3, #24
 800a58e:	4b2d      	ldr	r3, [pc, #180]	; (800a644 <MX_LWIP_Init+0x268>)
 800a590:	785b      	ldrb	r3, [r3, #1]
 800a592:	041b      	lsls	r3, r3, #16
 800a594:	4319      	orrs	r1, r3
 800a596:	4b2b      	ldr	r3, [pc, #172]	; (800a644 <MX_LWIP_Init+0x268>)
 800a598:	789b      	ldrb	r3, [r3, #2]
 800a59a:	021b      	lsls	r3, r3, #8
 800a59c:	430b      	orrs	r3, r1
 800a59e:	4929      	ldr	r1, [pc, #164]	; (800a644 <MX_LWIP_Init+0x268>)
 800a5a0:	78c9      	ldrb	r1, [r1, #3]
 800a5a2:	430b      	orrs	r3, r1
 800a5a4:	0a1b      	lsrs	r3, r3, #8
 800a5a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a5aa:	431a      	orrs	r2, r3
 800a5ac:	4b25      	ldr	r3, [pc, #148]	; (800a644 <MX_LWIP_Init+0x268>)
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	0619      	lsls	r1, r3, #24
 800a5b2:	4b24      	ldr	r3, [pc, #144]	; (800a644 <MX_LWIP_Init+0x268>)
 800a5b4:	785b      	ldrb	r3, [r3, #1]
 800a5b6:	041b      	lsls	r3, r3, #16
 800a5b8:	4319      	orrs	r1, r3
 800a5ba:	4b22      	ldr	r3, [pc, #136]	; (800a644 <MX_LWIP_Init+0x268>)
 800a5bc:	789b      	ldrb	r3, [r3, #2]
 800a5be:	021b      	lsls	r3, r3, #8
 800a5c0:	430b      	orrs	r3, r1
 800a5c2:	4920      	ldr	r1, [pc, #128]	; (800a644 <MX_LWIP_Init+0x268>)
 800a5c4:	78c9      	ldrb	r1, [r1, #3]
 800a5c6:	430b      	orrs	r3, r1
 800a5c8:	0e1b      	lsrs	r3, r3, #24
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	4a20      	ldr	r2, [pc, #128]	; (800a650 <MX_LWIP_Init+0x274>)
 800a5ce:	6013      	str	r3, [r2, #0]
			GATEWAY_ADDRESS[3]);

	/* add the network interface (IPv4/IPv6) with RTOS */
	netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init,
 800a5d0:	4b20      	ldr	r3, [pc, #128]	; (800a654 <MX_LWIP_Init+0x278>)
 800a5d2:	9302      	str	r3, [sp, #8]
 800a5d4:	4b20      	ldr	r3, [pc, #128]	; (800a658 <MX_LWIP_Init+0x27c>)
 800a5d6:	9301      	str	r3, [sp, #4]
 800a5d8:	2300      	movs	r3, #0
 800a5da:	9300      	str	r3, [sp, #0]
 800a5dc:	4b1c      	ldr	r3, [pc, #112]	; (800a650 <MX_LWIP_Init+0x274>)
 800a5de:	4a1b      	ldr	r2, [pc, #108]	; (800a64c <MX_LWIP_Init+0x270>)
 800a5e0:	4919      	ldr	r1, [pc, #100]	; (800a648 <MX_LWIP_Init+0x26c>)
 800a5e2:	481e      	ldr	r0, [pc, #120]	; (800a65c <MX_LWIP_Init+0x280>)
 800a5e4:	f004 fee0 	bl	800f3a8 <netif_add>
			&tcpip_input);

	/* Registers the default network interface */
	netif_set_default(&gnetif);
 800a5e8:	481c      	ldr	r0, [pc, #112]	; (800a65c <MX_LWIP_Init+0x280>)
 800a5ea:	f004 ffd3 	bl	800f594 <netif_set_default>

	if (netif_is_link_up(&gnetif)) {
 800a5ee:	4b1b      	ldr	r3, [pc, #108]	; (800a65c <MX_LWIP_Init+0x280>)
 800a5f0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800a5f4:	089b      	lsrs	r3, r3, #2
 800a5f6:	f003 0301 	and.w	r3, r3, #1
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d003      	beq.n	800a608 <MX_LWIP_Init+0x22c>
		/* When the netif is fully configured this function must be called */
		netif_set_up(&gnetif);
 800a600:	4816      	ldr	r0, [pc, #88]	; (800a65c <MX_LWIP_Init+0x280>)
 800a602:	f004 ffd7 	bl	800f5b4 <netif_set_up>
 800a606:	e002      	b.n	800a60e <MX_LWIP_Init+0x232>
	} else {
		/* When the netif link is down this function must be called */
		netif_set_down(&gnetif);
 800a608:	4814      	ldr	r0, [pc, #80]	; (800a65c <MX_LWIP_Init+0x280>)
 800a60a:	f005 f81f 	bl	800f64c <netif_set_down>
	}

	/* Set the link callback function, this function is called on change of link status*/
	netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a60e:	4914      	ldr	r1, [pc, #80]	; (800a660 <MX_LWIP_Init+0x284>)
 800a610:	4812      	ldr	r0, [pc, #72]	; (800a65c <MX_LWIP_Init+0x280>)
 800a612:	f005 f890 	bl	800f736 <netif_set_link_callback>

	/* Create the Ethernet link handler thread */
	/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
	osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0,
 800a616:	4b13      	ldr	r3, [pc, #76]	; (800a664 <MX_LWIP_Init+0x288>)
 800a618:	1d3c      	adds	r4, r7, #4
 800a61a:	461d      	mov	r5, r3
 800a61c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a61e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a620:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a624:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			configMINIMAL_STACK_SIZE *2);
	osThreadCreate(osThread(EthLink), &gnetif);
 800a628:	1d3b      	adds	r3, r7, #4
 800a62a:	490c      	ldr	r1, [pc, #48]	; (800a65c <MX_LWIP_Init+0x280>)
 800a62c:	4618      	mov	r0, r3
 800a62e:	f000 fcc4 	bl	800afba <osThreadCreate>
	/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

	/* USER CODE BEGIN 3 */

	/* USER CODE END 3 */
}
 800a632:	bf00      	nop
 800a634:	3720      	adds	r7, #32
 800a636:	46bd      	mov	sp, r7
 800a638:	bdb0      	pop	{r4, r5, r7, pc}
 800a63a:	bf00      	nop
 800a63c:	24021a74 	.word	0x24021a74
 800a640:	24021a70 	.word	0x24021a70
 800a644:	24021a2c 	.word	0x24021a2c
 800a648:	24021a6c 	.word	0x24021a6c
 800a64c:	24021a78 	.word	0x24021a78
 800a650:	24021a7c 	.word	0x24021a7c
 800a654:	0800e761 	.word	0x0800e761
 800a658:	0800acf1 	.word	0x0800acf1
 800a65c:	24021a30 	.word	0x24021a30
 800a660:	0800a669 	.word	0x0800a669
 800a664:	08018a40 	.word	0x08018a40

0800a668 <ethernet_link_status_updated>:
/**
 * @brief  Notify the User about the network interface config status
 * @param  netif: the network interface
 * @retval None
 */
static void ethernet_link_status_updated(struct netif *netif) {
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
	if (netif_is_up(netif)) {
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800a676:	f003 0301 	and.w	r3, r3, #1
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d003      	beq.n	800a688 <ethernet_link_status_updated+0x20>
		/* USER CODE BEGIN 5 */
		/* When the netif is fully configured this function must be called */
		netif_set_up(&gnetif);
 800a680:	4805      	ldr	r0, [pc, #20]	; (800a698 <ethernet_link_status_updated+0x30>)
 800a682:	f004 ff97 	bl	800f5b4 <netif_set_up>
    /* Update DHCP state machine */
    DHCP_state = DHCP_LINK_DOWN;
#endif
		/* USER CODE END 6 */
	}
}
 800a686:	e002      	b.n	800a68e <ethernet_link_status_updated+0x26>
		netif_set_down(&gnetif);
 800a688:	4803      	ldr	r0, [pc, #12]	; (800a698 <ethernet_link_status_updated+0x30>)
 800a68a:	f004 ffdf 	bl	800f64c <netif_set_down>
}
 800a68e:	bf00      	nop
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	24021a30 	.word	0x24021a30

0800a69c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800a6ae:	2320      	movs	r3, #32
 800a6b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a6b2:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 800a6b6:	e00b      	b.n	800a6d0 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 800a6b8:	4a0c      	ldr	r2, [pc, #48]	; (800a6ec <SCB_InvalidateDCache_by_Addr+0x50>)
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	693a      	ldr	r2, [r7, #16]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800a6c8:	697a      	ldr	r2, [r7, #20]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	dcf0      	bgt.n	800a6b8 <SCB_InvalidateDCache_by_Addr+0x1c>
 800a6d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a6da:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 800a6de:	bf00      	nop
 800a6e0:	371c      	adds	r7, #28
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop
 800a6ec:	e000ed00 	.word	0xe000ed00

0800a6f0 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b08e      	sub	sp, #56	; 0x38
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	601a      	str	r2, [r3, #0]
 800a700:	605a      	str	r2, [r3, #4]
 800a702:	609a      	str	r2, [r3, #8]
 800a704:	60da      	str	r2, [r3, #12]
 800a706:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a59      	ldr	r2, [pc, #356]	; (800a874 <HAL_ETH_MspInit+0x184>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	f040 80ab 	bne.w	800a86a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800a714:	4b58      	ldr	r3, [pc, #352]	; (800a878 <HAL_ETH_MspInit+0x188>)
 800a716:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a71a:	4a57      	ldr	r2, [pc, #348]	; (800a878 <HAL_ETH_MspInit+0x188>)
 800a71c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a720:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a724:	4b54      	ldr	r3, [pc, #336]	; (800a878 <HAL_ETH_MspInit+0x188>)
 800a726:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a72a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a72e:	623b      	str	r3, [r7, #32]
 800a730:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800a732:	4b51      	ldr	r3, [pc, #324]	; (800a878 <HAL_ETH_MspInit+0x188>)
 800a734:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a738:	4a4f      	ldr	r2, [pc, #316]	; (800a878 <HAL_ETH_MspInit+0x188>)
 800a73a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a73e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a742:	4b4d      	ldr	r3, [pc, #308]	; (800a878 <HAL_ETH_MspInit+0x188>)
 800a744:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a74c:	61fb      	str	r3, [r7, #28]
 800a74e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800a750:	4b49      	ldr	r3, [pc, #292]	; (800a878 <HAL_ETH_MspInit+0x188>)
 800a752:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a756:	4a48      	ldr	r2, [pc, #288]	; (800a878 <HAL_ETH_MspInit+0x188>)
 800a758:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a75c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a760:	4b45      	ldr	r3, [pc, #276]	; (800a878 <HAL_ETH_MspInit+0x188>)
 800a762:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a76a:	61bb      	str	r3, [r7, #24]
 800a76c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a76e:	4b42      	ldr	r3, [pc, #264]	; (800a878 <HAL_ETH_MspInit+0x188>)
 800a770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a774:	4a40      	ldr	r2, [pc, #256]	; (800a878 <HAL_ETH_MspInit+0x188>)
 800a776:	f043 0304 	orr.w	r3, r3, #4
 800a77a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a77e:	4b3e      	ldr	r3, [pc, #248]	; (800a878 <HAL_ETH_MspInit+0x188>)
 800a780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a784:	f003 0304 	and.w	r3, r3, #4
 800a788:	617b      	str	r3, [r7, #20]
 800a78a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a78c:	4b3a      	ldr	r3, [pc, #232]	; (800a878 <HAL_ETH_MspInit+0x188>)
 800a78e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a792:	4a39      	ldr	r2, [pc, #228]	; (800a878 <HAL_ETH_MspInit+0x188>)
 800a794:	f043 0301 	orr.w	r3, r3, #1
 800a798:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a79c:	4b36      	ldr	r3, [pc, #216]	; (800a878 <HAL_ETH_MspInit+0x188>)
 800a79e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7a2:	f003 0301 	and.w	r3, r3, #1
 800a7a6:	613b      	str	r3, [r7, #16]
 800a7a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a7aa:	4b33      	ldr	r3, [pc, #204]	; (800a878 <HAL_ETH_MspInit+0x188>)
 800a7ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7b0:	4a31      	ldr	r2, [pc, #196]	; (800a878 <HAL_ETH_MspInit+0x188>)
 800a7b2:	f043 0302 	orr.w	r3, r3, #2
 800a7b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a7ba:	4b2f      	ldr	r3, [pc, #188]	; (800a878 <HAL_ETH_MspInit+0x188>)
 800a7bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7c0:	f003 0302 	and.w	r3, r3, #2
 800a7c4:	60fb      	str	r3, [r7, #12]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a7c8:	4b2b      	ldr	r3, [pc, #172]	; (800a878 <HAL_ETH_MspInit+0x188>)
 800a7ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7ce:	4a2a      	ldr	r2, [pc, #168]	; (800a878 <HAL_ETH_MspInit+0x188>)
 800a7d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a7d8:	4b27      	ldr	r3, [pc, #156]	; (800a878 <HAL_ETH_MspInit+0x188>)
 800a7da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a7de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7e2:	60bb      	str	r3, [r7, #8]
 800a7e4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a7e6:	2332      	movs	r3, #50	; 0x32
 800a7e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7ea:	2302      	movs	r3, #2
 800a7ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a7f6:	230b      	movs	r3, #11
 800a7f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a7fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7fe:	4619      	mov	r1, r3
 800a800:	481e      	ldr	r0, [pc, #120]	; (800a87c <HAL_ETH_MspInit+0x18c>)
 800a802:	f7f8 fec1 	bl	8003588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a806:	2386      	movs	r3, #134	; 0x86
 800a808:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a80a:	2302      	movs	r3, #2
 800a80c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a80e:	2300      	movs	r3, #0
 800a810:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a812:	2300      	movs	r3, #0
 800a814:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a816:	230b      	movs	r3, #11
 800a818:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a81a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a81e:	4619      	mov	r1, r3
 800a820:	4817      	ldr	r0, [pc, #92]	; (800a880 <HAL_ETH_MspInit+0x190>)
 800a822:	f7f8 feb1 	bl	8003588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a826:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a82a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a82c:	2302      	movs	r3, #2
 800a82e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a830:	2300      	movs	r3, #0
 800a832:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a834:	2300      	movs	r3, #0
 800a836:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a838:	230b      	movs	r3, #11
 800a83a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a83c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a840:	4619      	mov	r1, r3
 800a842:	4810      	ldr	r0, [pc, #64]	; (800a884 <HAL_ETH_MspInit+0x194>)
 800a844:	f7f8 fea0 	bl	8003588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a848:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a84c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a84e:	2302      	movs	r3, #2
 800a850:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a852:	2300      	movs	r3, #0
 800a854:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a856:	2300      	movs	r3, #0
 800a858:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a85a:	230b      	movs	r3, #11
 800a85c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a85e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a862:	4619      	mov	r1, r3
 800a864:	4808      	ldr	r0, [pc, #32]	; (800a888 <HAL_ETH_MspInit+0x198>)
 800a866:	f7f8 fe8f 	bl	8003588 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a86a:	bf00      	nop
 800a86c:	3738      	adds	r7, #56	; 0x38
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	40028000 	.word	0x40028000
 800a878:	58024400 	.word	0x58024400
 800a87c:	58020800 	.word	0x58020800
 800a880:	58020000 	.word	0x58020000
 800a884:	58020400 	.word	0x58020400
 800a888:	58021800 	.word	0x58021800

0800a88c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a88c:	b5b0      	push	{r4, r5, r7, lr}
 800a88e:	b0ac      	sub	sp, #176	; 0xb0
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  uint32_t idx = 0;
 800a894:	2300      	movs	r3, #0
 800a896:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800a89a:	2300      	movs	r3, #0
 800a89c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a8a0:	4b90      	ldr	r3, [pc, #576]	; (800aae4 <low_level_init+0x258>)
 800a8a2:	4a91      	ldr	r2, [pc, #580]	; (800aae8 <low_level_init+0x25c>)
 800a8a4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800a8ac:	2380      	movs	r3, #128	; 0x80
 800a8ae:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800a8b2:	23e1      	movs	r3, #225	; 0xe1
 800a8b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800a8ca:	4a86      	ldr	r2, [pc, #536]	; (800aae4 <low_level_init+0x258>)
 800a8cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a8d0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a8d2:	4b84      	ldr	r3, [pc, #528]	; (800aae4 <low_level_init+0x258>)
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a8d8:	4b82      	ldr	r3, [pc, #520]	; (800aae4 <low_level_init+0x258>)
 800a8da:	4a84      	ldr	r2, [pc, #528]	; (800aaec <low_level_init+0x260>)
 800a8dc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a8de:	4b81      	ldr	r3, [pc, #516]	; (800aae4 <low_level_init+0x258>)
 800a8e0:	4a83      	ldr	r2, [pc, #524]	; (800aaf0 <low_level_init+0x264>)
 800a8e2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800a8e4:	4b7f      	ldr	r3, [pc, #508]	; (800aae4 <low_level_init+0x258>)
 800a8e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a8ea:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a8ec:	487d      	ldr	r0, [pc, #500]	; (800aae4 <low_level_init+0x258>)
 800a8ee:	f7f7 f8f5 	bl	8001adc <HAL_ETH_Init>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a8f8:	2234      	movs	r2, #52	; 0x34
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	487d      	ldr	r0, [pc, #500]	; (800aaf4 <low_level_init+0x268>)
 800a8fe:	f00d f841 	bl	8017984 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a902:	4b7c      	ldr	r3, [pc, #496]	; (800aaf4 <low_level_init+0x268>)
 800a904:	2221      	movs	r2, #33	; 0x21
 800a906:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a908:	4b7a      	ldr	r3, [pc, #488]	; (800aaf4 <low_level_init+0x268>)
 800a90a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a90e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a910:	4b78      	ldr	r3, [pc, #480]	; (800aaf4 <low_level_init+0x268>)
 800a912:	2200      	movs	r2, #0
 800a914:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */
  
  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a916:	4878      	ldr	r0, [pc, #480]	; (800aaf8 <low_level_init+0x26c>)
 800a918:	f004 fc00 	bl	800f11c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2206      	movs	r2, #6
 800a920:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a924:	4b6f      	ldr	r3, [pc, #444]	; (800aae4 <low_level_init+0x258>)
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	781a      	ldrb	r2, [r3, #0]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a930:	4b6c      	ldr	r3, [pc, #432]	; (800aae4 <low_level_init+0x258>)
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	785a      	ldrb	r2, [r3, #1]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a93c:	4b69      	ldr	r3, [pc, #420]	; (800aae4 <low_level_init+0x258>)
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	789a      	ldrb	r2, [r3, #2]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a948:	4b66      	ldr	r3, [pc, #408]	; (800aae4 <low_level_init+0x258>)
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	78da      	ldrb	r2, [r3, #3]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a954:	4b63      	ldr	r3, [pc, #396]	; (800aae4 <low_level_init+0x258>)
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	791a      	ldrb	r2, [r3, #4]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a960:	4b60      	ldr	r3, [pc, #384]	; (800aae4 <low_level_init+0x258>)
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	795a      	ldrb	r2, [r3, #5]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a972:	85da      	strh	r2, [r3, #46]	; 0x2e
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800a97a:	f043 030a 	orr.w	r3, r3, #10
 800a97e:	b2da      	uxtb	r2, r3
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800a986:	2300      	movs	r3, #0
 800a988:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a98c:	e012      	b.n	800a9b4 <low_level_init+0x128>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800a98e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a992:	4613      	mov	r3, r2
 800a994:	005b      	lsls	r3, r3, #1
 800a996:	4413      	add	r3, r2
 800a998:	025b      	lsls	r3, r3, #9
 800a99a:	4a58      	ldr	r2, [pc, #352]	; (800aafc <low_level_init+0x270>)
 800a99c:	441a      	add	r2, r3
 800a99e:	2300      	movs	r3, #0
 800a9a0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800a9a4:	484f      	ldr	r0, [pc, #316]	; (800aae4 <low_level_init+0x258>)
 800a9a6:	f7f7 f973 	bl	8001c90 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800a9aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a9b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a9b8:	2b03      	cmp	r3, #3
 800a9ba:	d9e8      	bls.n	800a98e <low_level_init+0x102>
  } 
      
  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800a9bc:	2300      	movs	r3, #0
 800a9be:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800a9c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a9c8:	2101      	movs	r1, #1
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f000 fbfe 	bl	800b1cc <osSemaphoreCreate>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	4b4b      	ldr	r3, [pc, #300]	; (800ab00 <low_level_init+0x274>)
 800a9d4:	601a      	str	r2, [r3, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a9d6:	4b4b      	ldr	r3, [pc, #300]	; (800ab04 <low_level_init+0x278>)
 800a9d8:	f107 040c 	add.w	r4, r7, #12
 800a9dc:	461d      	mov	r5, r3
 800a9de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a9e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800a9ea:	f107 030c 	add.w	r3, r7, #12
 800a9ee:	6879      	ldr	r1, [r7, #4]
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f000 fae2 	bl	800afba <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */ 
    
/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a9f6:	4944      	ldr	r1, [pc, #272]	; (800ab08 <low_level_init+0x27c>)
 800a9f8:	4844      	ldr	r0, [pc, #272]	; (800ab0c <low_level_init+0x280>)
 800a9fa:	f7f6 fbca 	bl	8001192 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a9fe:	4843      	ldr	r0, [pc, #268]	; (800ab0c <low_level_init+0x280>)
 800aa00:	f7f6 fbf9 	bl	80011f6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800aa04:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d164      	bne.n	800aad6 <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800aa0c:	483f      	ldr	r0, [pc, #252]	; (800ab0c <low_level_init+0x280>)
 800aa0e:	f7f6 fc9a 	bl	8001346 <LAN8742_GetLinkState>
 800aa12:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  
    /* Get link state */  
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800aa16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	dc06      	bgt.n	800aa2c <low_level_init+0x1a0>
    {
      netif_set_link_down(netif);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f004 fe69 	bl	800f6f6 <netif_set_link_down>
      netif_set_down(netif);
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f004 fe11 	bl	800f64c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800aa2a:	e056      	b.n	800aada <low_level_init+0x24e>
      switch (PHYLinkState)
 800aa2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aa30:	3b02      	subs	r3, #2
 800aa32:	2b03      	cmp	r3, #3
 800aa34:	d82a      	bhi.n	800aa8c <low_level_init+0x200>
 800aa36:	a201      	add	r2, pc, #4	; (adr r2, 800aa3c <low_level_init+0x1b0>)
 800aa38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa3c:	0800aa4d 	.word	0x0800aa4d
 800aa40:	0800aa5f 	.word	0x0800aa5f
 800aa44:	0800aa6f 	.word	0x0800aa6f
 800aa48:	0800aa7f 	.word	0x0800aa7f
        duplex = ETH_FULLDUPLEX_MODE;
 800aa4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800aa54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aa58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800aa5c:	e01f      	b.n	800aa9e <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800aa64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aa68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800aa6c:	e017      	b.n	800aa9e <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800aa6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800aa76:	2300      	movs	r3, #0
 800aa78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800aa7c:	e00f      	b.n	800aa9e <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800aa84:	2300      	movs	r3, #0
 800aa86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800aa8a:	e008      	b.n	800aa9e <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800aa8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800aa94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aa98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;      
 800aa9c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf); 
 800aa9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	480f      	ldr	r0, [pc, #60]	; (800aae4 <low_level_init+0x258>)
 800aaa6:	f7f7 fd99 	bl	80025dc <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800aaaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aaae:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800aab0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aab4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800aab6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800aaba:	4619      	mov	r1, r3
 800aabc:	4809      	ldr	r0, [pc, #36]	; (800aae4 <low_level_init+0x258>)
 800aabe:	f7f7 ff61 	bl	8002984 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800aac2:	4808      	ldr	r0, [pc, #32]	; (800aae4 <low_level_init+0x258>)
 800aac4:	f7f7 f925 	bl	8001d12 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f004 fd73 	bl	800f5b4 <netif_set_up>
    netif_set_link_up(netif);
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f004 fde6 	bl	800f6a0 <netif_set_link_up>
}
 800aad4:	e001      	b.n	800aada <low_level_init+0x24e>
    Error_Handler();
 800aad6:	f7f6 f8ed 	bl	8000cb4 <Error_Handler>
}
 800aada:	bf00      	nop
 800aadc:	37b0      	adds	r7, #176	; 0xb0
 800aade:	46bd      	mov	sp, r7
 800aae0:	bdb0      	pop	{r4, r5, r7, pc}
 800aae2:	bf00      	nop
 800aae4:	24021b6c 	.word	0x24021b6c
 800aae8:	40028000 	.word	0x40028000
 800aaec:	30040060 	.word	0x30040060
 800aaf0:	30040000 	.word	0x30040000
 800aaf4:	24021bdc 	.word	0x24021bdc
 800aaf8:	0801a8b0 	.word	0x0801a8b0
 800aafc:	30040200 	.word	0x30040200
 800ab00:	24002158 	.word	0x24002158
 800ab04:	08018a64 	.word	0x08018a64
 800ab08:	24000010 	.word	0x24000010
 800ab0c:	24021b4c 	.word	0x24021b4c

0800ab10 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b092      	sub	sp, #72	; 0x48
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  uint32_t i=0, framelen = 0;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	647b      	str	r3, [r7, #68]	; 0x44
 800ab1e:	2300      	movs	r3, #0
 800ab20:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf *q;
  err_t errval = ERR_OK;
 800ab22:	2300      	movs	r3, #0
 800ab24:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800ab28:	f107 0308 	add.w	r3, r7, #8
 800ab2c:	2230      	movs	r2, #48	; 0x30
 800ab2e:	2100      	movs	r1, #0
 800ab30:	4618      	mov	r0, r3
 800ab32:	f00c ff27 	bl	8017984 <memset>
  
  for(q = p; q != NULL; q = q->next)
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab3a:	e04f      	b.n	800abdc <low_level_output+0xcc>
  {
    if(i >= ETH_TX_DESC_CNT)	
 800ab3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab3e:	2b03      	cmp	r3, #3
 800ab40:	d902      	bls.n	800ab48 <low_level_output+0x38>
      return ERR_IF;
 800ab42:	f06f 030b 	mvn.w	r3, #11
 800ab46:	e05a      	b.n	800abfe <low_level_output+0xee>
    
    Txbuffer[i].buffer = q->payload;
 800ab48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab4a:	6859      	ldr	r1, [r3, #4]
 800ab4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab4e:	4613      	mov	r3, r2
 800ab50:	005b      	lsls	r3, r3, #1
 800ab52:	4413      	add	r3, r2
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ab5a:	4413      	add	r3, r2
 800ab5c:	3b40      	subs	r3, #64	; 0x40
 800ab5e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800ab60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab62:	895b      	ldrh	r3, [r3, #10]
 800ab64:	4619      	mov	r1, r3
 800ab66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab68:	4613      	mov	r3, r2
 800ab6a:	005b      	lsls	r3, r3, #1
 800ab6c:	4413      	add	r3, r2
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ab74:	4413      	add	r3, r2
 800ab76:	3b3c      	subs	r3, #60	; 0x3c
 800ab78:	6019      	str	r1, [r3, #0]
    framelen += q->len;
 800ab7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab7c:	895b      	ldrh	r3, [r3, #10]
 800ab7e:	461a      	mov	r2, r3
 800ab80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab82:	4413      	add	r3, r2
 800ab84:	643b      	str	r3, [r7, #64]	; 0x40
    
    if(i>0)
 800ab86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d012      	beq.n	800abb2 <low_level_output+0xa2>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800ab8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab8e:	1e5a      	subs	r2, r3, #1
 800ab90:	f107 0008 	add.w	r0, r7, #8
 800ab94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab96:	460b      	mov	r3, r1
 800ab98:	005b      	lsls	r3, r3, #1
 800ab9a:	440b      	add	r3, r1
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	18c1      	adds	r1, r0, r3
 800aba0:	4613      	mov	r3, r2
 800aba2:	005b      	lsls	r3, r3, #1
 800aba4:	4413      	add	r3, r2
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800abac:	4413      	add	r3, r2
 800abae:	3b38      	subs	r3, #56	; 0x38
 800abb0:	6019      	str	r1, [r3, #0]
    }
    
    if(q->next == NULL)
 800abb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d10a      	bne.n	800abd0 <low_level_output+0xc0>
    {
      Txbuffer[i].next = NULL;
 800abba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abbc:	4613      	mov	r3, r2
 800abbe:	005b      	lsls	r3, r3, #1
 800abc0:	4413      	add	r3, r2
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800abc8:	4413      	add	r3, r2
 800abca:	3b38      	subs	r3, #56	; 0x38
 800abcc:	2200      	movs	r2, #0
 800abce:	601a      	str	r2, [r3, #0]
    }
    
    i++;
 800abd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abd2:	3301      	adds	r3, #1
 800abd4:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800abd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d1ac      	bne.n	800ab3c <low_level_output+0x2c>
  }

  TxConfig.Length = framelen;
 800abe2:	4a09      	ldr	r2, [pc, #36]	; (800ac08 <low_level_output+0xf8>)
 800abe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abe6:	6053      	str	r3, [r2, #4]
  TxConfig.TxBuffer = Txbuffer;
 800abe8:	4a07      	ldr	r2, [pc, #28]	; (800ac08 <low_level_output+0xf8>)
 800abea:	f107 0308 	add.w	r3, r7, #8
 800abee:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800abf0:	2214      	movs	r2, #20
 800abf2:	4905      	ldr	r1, [pc, #20]	; (800ac08 <low_level_output+0xf8>)
 800abf4:	4805      	ldr	r0, [pc, #20]	; (800ac0c <low_level_output+0xfc>)
 800abf6:	f7f7 f999 	bl	8001f2c <HAL_ETH_Transmit>
  
  return errval;
 800abfa:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3748      	adds	r7, #72	; 0x48
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	24021bdc 	.word	0x24021bdc
 800ac0c:	24021b6c 	.word	0x24021b6c

0800ac10 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b08a      	sub	sp, #40	; 0x28
 800ac14:	af02      	add	r7, sp, #8
 800ac16:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	61fb      	str	r3, [r7, #28]
  ETH_BufferTypeDef RxBuff;
  uint32_t framelength = 0;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	60bb      	str	r3, [r7, #8]
  struct pbuf_custom* custom_pbuf;
  
  if (HAL_ETH_GetRxDataBuffer(&heth, &RxBuff) == HAL_OK) 
 800ac20:	f107 030c 	add.w	r3, r7, #12
 800ac24:	4619      	mov	r1, r3
 800ac26:	4817      	ldr	r0, [pc, #92]	; (800ac84 <low_level_input+0x74>)
 800ac28:	f7f7 faea 	bl	8002200 <HAL_ETH_GetRxDataBuffer>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d122      	bne.n	800ac78 <low_level_input+0x68>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800ac32:	f107 0308 	add.w	r3, r7, #8
 800ac36:	4619      	mov	r1, r3
 800ac38:	4812      	ldr	r0, [pc, #72]	; (800ac84 <low_level_input+0x74>)
 800ac3a:	f7f7 fb7f 	bl	800233c <HAL_ETH_GetRxDataLength>
    
    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800ac3e:	4811      	ldr	r0, [pc, #68]	; (800ac84 <low_level_input+0x74>)
 800ac40:	f7f7 fbaf 	bl	80023a2 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff.buffer, framelength);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	68ba      	ldr	r2, [r7, #8]
 800ac48:	4611      	mov	r1, r2
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7ff fd26 	bl	800a69c <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800ac50:	480d      	ldr	r0, [pc, #52]	; (800ac88 <low_level_input+0x78>)
 800ac52:	f004 fadf 	bl	800f214 <memp_malloc_pool>
 800ac56:	61b8      	str	r0, [r7, #24]
    custom_pbuf->custom_free_function = pbuf_free_custom;
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	4a0c      	ldr	r2, [pc, #48]	; (800ac8c <low_level_input+0x7c>)
 800ac5c:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff.buffer, ETH_RX_BUFFER_SIZE);
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	b299      	uxth	r1, r3
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800ac68:	9201      	str	r2, [sp, #4]
 800ac6a:	9300      	str	r3, [sp, #0]
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	2202      	movs	r2, #2
 800ac70:	2004      	movs	r0, #4
 800ac72:	f004 ff65 	bl	800fb40 <pbuf_alloced_custom>
 800ac76:	61f8      	str	r0, [r7, #28]
  }
  
  
  return p;
 800ac78:	69fb      	ldr	r3, [r7, #28]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3720      	adds	r7, #32
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
 800ac82:	bf00      	nop
 800ac84:	24021b6c 	.word	0x24021b6c
 800ac88:	0801a8b0 	.word	0x0801a8b0
 800ac8c:	0800ad4d 	.word	0x0800ad4d

0800ac90 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800ac9c:	4b12      	ldr	r3, [pc, #72]	; (800ace8 <ethernetif_input+0x58>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f04f 31ff 	mov.w	r1, #4294967295
 800aca4:	4618      	mov	r0, r3
 800aca6:	f000 fad1 	bl	800b24c <osSemaphoreWait>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d1f5      	bne.n	800ac9c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800acb0:	480e      	ldr	r0, [pc, #56]	; (800acec <ethernetif_input+0x5c>)
 800acb2:	f00c fdc9 	bl	8017848 <sys_mutex_lock>
        p = low_level_input( netif );
 800acb6:	68f8      	ldr	r0, [r7, #12]
 800acb8:	f7ff ffaa 	bl	800ac10 <low_level_input>
 800acbc:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00a      	beq.n	800acda <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	691b      	ldr	r3, [r3, #16]
 800acc8:	68f9      	ldr	r1, [r7, #12]
 800acca:	68b8      	ldr	r0, [r7, #8]
 800accc:	4798      	blx	r3
 800acce:	4603      	mov	r3, r0
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d002      	beq.n	800acda <ethernetif_input+0x4a>
          {
            pbuf_free(p);           
 800acd4:	68b8      	ldr	r0, [r7, #8]
 800acd6:	f005 f911 	bl	800fefc <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800acda:	4804      	ldr	r0, [pc, #16]	; (800acec <ethernetif_input+0x5c>)
 800acdc:	f00c fdc3 	bl	8017866 <sys_mutex_unlock>
      } while(p!=NULL);
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d1e4      	bne.n	800acb0 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800ace6:	e7d9      	b.n	800ac9c <ethernetif_input+0xc>
 800ace8:	24002158 	.word	0x24002158
 800acec:	24021c50 	.word	0x24021c50

0800acf0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d106      	bne.n	800ad0c <ethernetif_init+0x1c>
 800acfe:	4b0e      	ldr	r3, [pc, #56]	; (800ad38 <ethernetif_init+0x48>)
 800ad00:	f240 223b 	movw	r2, #571	; 0x23b
 800ad04:	490d      	ldr	r1, [pc, #52]	; (800ad3c <ethernetif_init+0x4c>)
 800ad06:	480e      	ldr	r0, [pc, #56]	; (800ad40 <ethernetif_init+0x50>)
 800ad08:	f00c fe44 	bl	8017994 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2273      	movs	r2, #115	; 0x73
 800ad10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  netif->name[1] = IFNAME1;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2274      	movs	r2, #116	; 0x74
 800ad18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a09      	ldr	r2, [pc, #36]	; (800ad44 <ethernetif_init+0x54>)
 800ad20:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	4a08      	ldr	r2, [pc, #32]	; (800ad48 <ethernetif_init+0x58>)
 800ad26:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7ff fdaf 	bl	800a88c <low_level_init>

  return ERR_OK;
 800ad2e:	2300      	movs	r3, #0
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3708      	adds	r7, #8
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	08018a80 	.word	0x08018a80
 800ad3c:	08018a9c 	.word	0x08018a9c
 800ad40:	08018aac 	.word	0x08018aac
 800ad44:	080159d5 	.word	0x080159d5
 800ad48:	0800ab11 	.word	0x0800ab11

0800ad4c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	60fb      	str	r3, [r7, #12]
  
#if !defined(DUAL_CORE) || defined(CORE_CM7)
  /* Invalidate data cache: lwIP and/or application may have written into buffer */
  SCB_InvalidateDCache_by_Addr((uint32_t *)p->payload, p->tot_len);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	685a      	ldr	r2, [r3, #4]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	891b      	ldrh	r3, [r3, #8]
 800ad60:	4619      	mov	r1, r3
 800ad62:	4610      	mov	r0, r2
 800ad64:	f7ff fc9a 	bl	800a69c <SCB_InvalidateDCache_by_Addr>
#endif
  
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800ad68:	68f9      	ldr	r1, [r7, #12]
 800ad6a:	4803      	ldr	r0, [pc, #12]	; (800ad78 <pbuf_free_custom+0x2c>)
 800ad6c:	f004 fac6 	bl	800f2fc <memp_free_pool>
}
 800ad70:	bf00      	nop
 800ad72:	3710      	adds	r7, #16
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	0801a8b0 	.word	0x0801a8b0

0800ad7c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ad80:	f7f6 fbb8 	bl	80014f4 <HAL_GetTick>
 800ad84:	4603      	mov	r3, r0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	bd80      	pop	{r7, pc}
	...

0800ad8c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{  
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here 
  */
  
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800ad90:	4802      	ldr	r0, [pc, #8]	; (800ad9c <ETH_PHY_IO_Init+0x10>)
 800ad92:	f7f7 fe11 	bl	80029b8 <HAL_ETH_SetMDIOClockRange>
  
  return 0;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	24021b6c 	.word	0x24021b6c

0800ada0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800ada0:	b480      	push	{r7}
 800ada2:	af00      	add	r7, sp, #0
  return 0;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	68ba      	ldr	r2, [r7, #8]
 800adc0:	68f9      	ldr	r1, [r7, #12]
 800adc2:	4807      	ldr	r0, [pc, #28]	; (800ade0 <ETH_PHY_IO_ReadReg+0x30>)
 800adc4:	f7f7 fb61 	bl	800248a <HAL_ETH_ReadPHYRegister>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d002      	beq.n	800add4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800adce:	f04f 33ff 	mov.w	r3, #4294967295
 800add2:	e000      	b.n	800add6 <ETH_PHY_IO_ReadReg+0x26>
  }
  
  return 0;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
 800adde:	bf00      	nop
 800ade0:	24021b6c 	.word	0x24021b6c

0800ade4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	68f9      	ldr	r1, [r7, #12]
 800adf6:	4807      	ldr	r0, [pc, #28]	; (800ae14 <ETH_PHY_IO_WriteReg+0x30>)
 800adf8:	f7f7 fb9c 	bl	8002534 <HAL_ETH_WritePHYRegister>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d002      	beq.n	800ae08 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800ae02:	f04f 33ff 	mov.w	r3, #4294967295
 800ae06:	e000      	b.n	800ae0a <ETH_PHY_IO_WriteReg+0x26>
  }
  
  return 0;
 800ae08:	2300      	movs	r3, #0
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	24021b6c 	.word	0x24021b6c

0800ae18 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ae1c:	f7f6 fb6a 	bl	80014f4 <HAL_GetTick>
 800ae20:	4603      	mov	r3, r0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	bd80      	pop	{r7, pc}
	...

0800ae28 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */
 
void ethernet_link_thread(void const * argument)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b0a0      	sub	sp, #128	; 0x80
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800ae30:	2300      	movs	r3, #0
 800ae32:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ae34:	2300      	movs	r3, #0
 800ae36:	67bb      	str	r3, [r7, #120]	; 0x78
 800ae38:	2300      	movs	r3, #0
 800ae3a:	677b      	str	r3, [r7, #116]	; 0x74
  
  struct netif *netif = (struct netif *) argument;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */
  
  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ae40:	483b      	ldr	r0, [pc, #236]	; (800af30 <ethernet_link_thread+0x108>)
 800ae42:	f7f6 fa80 	bl	8001346 <LAN8742_GetLinkState>
 800ae46:	4603      	mov	r3, r0
 800ae48:	66fb      	str	r3, [r7, #108]	; 0x6c
  
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800ae4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae4c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800ae50:	089b      	lsrs	r3, r3, #2
 800ae52:	f003 0301 	and.w	r3, r3, #1
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d00c      	beq.n	800ae76 <ethernet_link_thread+0x4e>
 800ae5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d809      	bhi.n	800ae76 <ethernet_link_thread+0x4e>
  {
    HAL_ETH_Stop_IT(&heth);
 800ae62:	4834      	ldr	r0, [pc, #208]	; (800af34 <ethernet_link_thread+0x10c>)
 800ae64:	f7f6 ffec 	bl	8001e40 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800ae68:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ae6a:	f004 fbef 	bl	800f64c <netif_set_down>
    netif_set_link_down(netif);
 800ae6e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ae70:	f004 fc41 	bl	800f6f6 <netif_set_link_down>
 800ae74:	e057      	b.n	800af26 <ethernet_link_thread+0xfe>
  }
  else if(netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800ae76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ae78:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800ae7c:	089b      	lsrs	r3, r3, #2
 800ae7e:	f003 0301 	and.w	r3, r3, #1
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d04e      	beq.n	800af26 <ethernet_link_thread+0xfe>
 800ae88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d94b      	bls.n	800af26 <ethernet_link_thread+0xfe>
  {
    switch (PHYLinkState)
 800ae8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae90:	3b02      	subs	r3, #2
 800ae92:	2b03      	cmp	r3, #3
 800ae94:	d82a      	bhi.n	800aeec <ethernet_link_thread+0xc4>
 800ae96:	a201      	add	r2, pc, #4	; (adr r2, 800ae9c <ethernet_link_thread+0x74>)
 800ae98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae9c:	0800aead 	.word	0x0800aead
 800aea0:	0800aebf 	.word	0x0800aebf
 800aea4:	0800aecf 	.word	0x0800aecf
 800aea8:	0800aedf 	.word	0x0800aedf
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800aeac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aeb0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800aeb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aeb6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aebc:	e017      	b.n	800aeee <ethernet_link_thread+0xc6>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800aebe:	2300      	movs	r3, #0
 800aec0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800aec2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aec6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aec8:	2301      	movs	r3, #1
 800aeca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aecc:	e00f      	b.n	800aeee <ethernet_link_thread+0xc6>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800aece:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aed2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800aed4:	2300      	movs	r3, #0
 800aed6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aed8:	2301      	movs	r3, #1
 800aeda:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aedc:	e007      	b.n	800aeee <ethernet_link_thread+0xc6>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800aede:	2300      	movs	r3, #0
 800aee0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800aee2:	2300      	movs	r3, #0
 800aee4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800aee6:	2301      	movs	r3, #1
 800aee8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800aeea:	e000      	b.n	800aeee <ethernet_link_thread+0xc6>
    default:
      break;      
 800aeec:	bf00      	nop
    }
    
    if(linkchanged)
 800aeee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d018      	beq.n	800af26 <ethernet_link_thread+0xfe>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf); 
 800aef4:	f107 0308 	add.w	r3, r7, #8
 800aef8:	4619      	mov	r1, r3
 800aefa:	480e      	ldr	r0, [pc, #56]	; (800af34 <ethernet_link_thread+0x10c>)
 800aefc:	f7f7 fb6e 	bl	80025dc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800af00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af02:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800af04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af06:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800af08:	f107 0308 	add.w	r3, r7, #8
 800af0c:	4619      	mov	r1, r3
 800af0e:	4809      	ldr	r0, [pc, #36]	; (800af34 <ethernet_link_thread+0x10c>)
 800af10:	f7f7 fd38 	bl	8002984 <HAL_ETH_SetMACConfig>
      
      HAL_ETH_Start_IT(&heth);
 800af14:	4807      	ldr	r0, [pc, #28]	; (800af34 <ethernet_link_thread+0x10c>)
 800af16:	f7f6 fefc 	bl	8001d12 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800af1a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800af1c:	f004 fb4a 	bl	800f5b4 <netif_set_up>
      netif_set_link_up(netif);
 800af20:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800af22:	f004 fbbd 	bl	800f6a0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */
    
/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800af26:	2064      	movs	r0, #100	; 0x64
 800af28:	f000 f89f 	bl	800b06a <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800af2c:	e788      	b.n	800ae40 <ethernet_link_thread+0x18>
 800af2e:	bf00      	nop
 800af30:	24021b4c 	.word	0x24021b4c
 800af34:	24021b6c 	.word	0x24021b6c

0800af38 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	4603      	mov	r3, r0
 800af40:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800af42:	2300      	movs	r3, #0
 800af44:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800af46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800af4a:	2b84      	cmp	r3, #132	; 0x84
 800af4c:	d005      	beq.n	800af5a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800af4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	4413      	add	r3, r2
 800af56:	3303      	adds	r3, #3
 800af58:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800af5a:	68fb      	ldr	r3, [r7, #12]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3714      	adds	r7, #20
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af6e:	f3ef 8305 	mrs	r3, IPSR
 800af72:	607b      	str	r3, [r7, #4]
  return(result);
 800af74:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800af76:	2b00      	cmp	r3, #0
 800af78:	bf14      	ite	ne
 800af7a:	2301      	movne	r3, #1
 800af7c:	2300      	moveq	r3, #0
 800af7e:	b2db      	uxtb	r3, r3
}
 800af80:	4618      	mov	r0, r3
 800af82:	370c      	adds	r7, #12
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800af90:	f001 fd78 	bl	800ca84 <vTaskStartScheduler>
  
  return osOK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	bd80      	pop	{r7, pc}

0800af9a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800af9e:	f7ff ffe3 	bl	800af68 <inHandlerMode>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d003      	beq.n	800afb0 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800afa8:	f001 fe8a 	bl	800ccc0 <xTaskGetTickCountFromISR>
 800afac:	4603      	mov	r3, r0
 800afae:	e002      	b.n	800afb6 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800afb0:	f001 fe76 	bl	800cca0 <xTaskGetTickCount>
 800afb4:	4603      	mov	r3, r0
  }
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	bd80      	pop	{r7, pc}

0800afba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800afba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afbc:	b089      	sub	sp, #36	; 0x24
 800afbe:	af04      	add	r7, sp, #16
 800afc0:	6078      	str	r0, [r7, #4]
 800afc2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	695b      	ldr	r3, [r3, #20]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d020      	beq.n	800b00e <osThreadCreate+0x54>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	699b      	ldr	r3, [r3, #24]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d01c      	beq.n	800b00e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	685c      	ldr	r4, [r3, #4]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681d      	ldr	r5, [r3, #0]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	691e      	ldr	r6, [r3, #16]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7ff ffa6 	bl	800af38 <makeFreeRtosPriority>
 800afec:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	695b      	ldr	r3, [r3, #20]
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aff6:	9202      	str	r2, [sp, #8]
 800aff8:	9301      	str	r3, [sp, #4]
 800affa:	9100      	str	r1, [sp, #0]
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	4632      	mov	r2, r6
 800b000:	4629      	mov	r1, r5
 800b002:	4620      	mov	r0, r4
 800b004:	f001 faec 	bl	800c5e0 <xTaskCreateStatic>
 800b008:	4603      	mov	r3, r0
 800b00a:	60fb      	str	r3, [r7, #12]
 800b00c:	e01c      	b.n	800b048 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	685c      	ldr	r4, [r3, #4]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b01a:	b29e      	uxth	r6, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b022:	4618      	mov	r0, r3
 800b024:	f7ff ff88 	bl	800af38 <makeFreeRtosPriority>
 800b028:	4602      	mov	r2, r0
 800b02a:	f107 030c 	add.w	r3, r7, #12
 800b02e:	9301      	str	r3, [sp, #4]
 800b030:	9200      	str	r2, [sp, #0]
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	4632      	mov	r2, r6
 800b036:	4629      	mov	r1, r5
 800b038:	4620      	mov	r0, r4
 800b03a:	f001 fb2b 	bl	800c694 <xTaskCreate>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b01      	cmp	r3, #1
 800b042:	d001      	beq.n	800b048 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b044:	2300      	movs	r3, #0
 800b046:	e000      	b.n	800b04a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b048:	68fb      	ldr	r3, [r7, #12]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3714      	adds	r7, #20
 800b04e:	46bd      	mov	sp, r7
 800b050:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b052 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b082      	sub	sp, #8
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f001 fc50 	bl	800c900 <vTaskDelete>
  return osOK;
 800b060:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800b062:	4618      	mov	r0, r3
 800b064:	3708      	adds	r7, #8
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b084      	sub	sp, #16
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d001      	beq.n	800b080 <osDelay+0x16>
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	e000      	b.n	800b082 <osDelay+0x18>
 800b080:	2301      	movs	r3, #1
 800b082:	4618      	mov	r0, r3
 800b084:	f001 fcca 	bl	800ca1c <vTaskDelay>
  
  return osOK;
 800b088:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b082      	sub	sp, #8
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d007      	beq.n	800b0b2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	685b      	ldr	r3, [r3, #4]
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	2001      	movs	r0, #1
 800b0aa:	f000 fc1a 	bl	800b8e2 <xQueueCreateMutexStatic>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	e003      	b.n	800b0ba <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b0b2:	2001      	movs	r0, #1
 800b0b4:	f000 fbfd 	bl	800b8b2 <xQueueCreateMutex>
 800b0b8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3708      	adds	r7, #8
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
	...

0800b0c4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d101      	bne.n	800b0dc <osMutexWait+0x18>
    return osErrorParameter;
 800b0d8:	2380      	movs	r3, #128	; 0x80
 800b0da:	e03a      	b.n	800b152 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e6:	d103      	bne.n	800b0f0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800b0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0ec:	60fb      	str	r3, [r7, #12]
 800b0ee:	e009      	b.n	800b104 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d006      	beq.n	800b104 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d101      	bne.n	800b104 <osMutexWait+0x40>
      ticks = 1;
 800b100:	2301      	movs	r3, #1
 800b102:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b104:	f7ff ff30 	bl	800af68 <inHandlerMode>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d017      	beq.n	800b13e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b10e:	f107 0308 	add.w	r3, r7, #8
 800b112:	461a      	mov	r2, r3
 800b114:	2100      	movs	r1, #0
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f001 f860 	bl	800c1dc <xQueueReceiveFromISR>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b01      	cmp	r3, #1
 800b120:	d001      	beq.n	800b126 <osMutexWait+0x62>
      return osErrorOS;
 800b122:	23ff      	movs	r3, #255	; 0xff
 800b124:	e015      	b.n	800b152 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d011      	beq.n	800b150 <osMutexWait+0x8c>
 800b12c:	4b0b      	ldr	r3, [pc, #44]	; (800b15c <osMutexWait+0x98>)
 800b12e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b132:	601a      	str	r2, [r3, #0]
 800b134:	f3bf 8f4f 	dsb	sy
 800b138:	f3bf 8f6f 	isb	sy
 800b13c:	e008      	b.n	800b150 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800b13e:	68f9      	ldr	r1, [r7, #12]
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 ff43 	bl	800bfcc <xQueueSemaphoreTake>
 800b146:	4603      	mov	r3, r0
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d001      	beq.n	800b150 <osMutexWait+0x8c>
    return osErrorOS;
 800b14c:	23ff      	movs	r3, #255	; 0xff
 800b14e:	e000      	b.n	800b152 <osMutexWait+0x8e>
  }
  
  return osOK;
 800b150:	2300      	movs	r3, #0
}
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	e000ed04 	.word	0xe000ed04

0800b160 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b168:	2300      	movs	r3, #0
 800b16a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b16c:	2300      	movs	r3, #0
 800b16e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800b170:	f7ff fefa 	bl	800af68 <inHandlerMode>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d016      	beq.n	800b1a8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b17a:	f107 0308 	add.w	r3, r7, #8
 800b17e:	4619      	mov	r1, r3
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 fdbd 	bl	800bd00 <xQueueGiveFromISR>
 800b186:	4603      	mov	r3, r0
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d001      	beq.n	800b190 <osMutexRelease+0x30>
      return osErrorOS;
 800b18c:	23ff      	movs	r3, #255	; 0xff
 800b18e:	e017      	b.n	800b1c0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d013      	beq.n	800b1be <osMutexRelease+0x5e>
 800b196:	4b0c      	ldr	r3, [pc, #48]	; (800b1c8 <osMutexRelease+0x68>)
 800b198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b19c:	601a      	str	r2, [r3, #0]
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	f3bf 8f6f 	isb	sy
 800b1a6:	e00a      	b.n	800b1be <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	2100      	movs	r1, #0
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 fc18 	bl	800b9e4 <xQueueGenericSend>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d001      	beq.n	800b1be <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800b1ba:	23ff      	movs	r3, #255	; 0xff
 800b1bc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800b1be:	68fb      	ldr	r3, [r7, #12]
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3710      	adds	r7, #16
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	e000ed04 	.word	0xe000ed04

0800b1cc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b086      	sub	sp, #24
 800b1d0:	af02      	add	r7, sp, #8
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d017      	beq.n	800b20e <osSemaphoreCreate+0x42>
    if (count == 1) {
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d10b      	bne.n	800b1fc <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	685a      	ldr	r2, [r3, #4]
 800b1e8:	2303      	movs	r3, #3
 800b1ea:	9300      	str	r3, [sp, #0]
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	2100      	movs	r1, #0
 800b1f2:	2001      	movs	r0, #1
 800b1f4:	f000 fa72 	bl	800b6dc <xQueueGenericCreateStatic>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	e023      	b.n	800b244 <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800b1fc:	6838      	ldr	r0, [r7, #0]
 800b1fe:	6839      	ldr	r1, [r7, #0]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	461a      	mov	r2, r3
 800b206:	f000 fb87 	bl	800b918 <xQueueCreateCountingSemaphoreStatic>
 800b20a:	4603      	mov	r3, r0
 800b20c:	e01a      	b.n	800b244 <osSemaphoreCreate+0x78>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	2b01      	cmp	r3, #1
 800b212:	d110      	bne.n	800b236 <osSemaphoreCreate+0x6a>
      vSemaphoreCreateBinary(sema);
 800b214:	2203      	movs	r2, #3
 800b216:	2100      	movs	r1, #0
 800b218:	2001      	movs	r0, #1
 800b21a:	f000 fad2 	bl	800b7c2 <xQueueGenericCreate>
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d005      	beq.n	800b232 <osSemaphoreCreate+0x66>
 800b226:	2300      	movs	r3, #0
 800b228:	2200      	movs	r2, #0
 800b22a:	2100      	movs	r1, #0
 800b22c:	68f8      	ldr	r0, [r7, #12]
 800b22e:	f000 fbd9 	bl	800b9e4 <xQueueGenericSend>
      return sema;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	e006      	b.n	800b244 <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	683a      	ldr	r2, [r7, #0]
 800b23a:	4611      	mov	r1, r2
 800b23c:	4618      	mov	r0, r3
 800b23e:	f000 fba0 	bl	800b982 <xQueueCreateCountingSemaphore>
 800b242:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800b244:	4618      	mov	r0, r3
 800b246:	3710      	adds	r7, #16
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b256:	2300      	movs	r3, #0
 800b258:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d101      	bne.n	800b264 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b260:	2380      	movs	r3, #128	; 0x80
 800b262:	e03a      	b.n	800b2da <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b264:	2300      	movs	r3, #0
 800b266:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b26e:	d103      	bne.n	800b278 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b270:	f04f 33ff 	mov.w	r3, #4294967295
 800b274:	60fb      	str	r3, [r7, #12]
 800b276:	e009      	b.n	800b28c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d006      	beq.n	800b28c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d101      	bne.n	800b28c <osSemaphoreWait+0x40>
      ticks = 1;
 800b288:	2301      	movs	r3, #1
 800b28a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b28c:	f7ff fe6c 	bl	800af68 <inHandlerMode>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d017      	beq.n	800b2c6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b296:	f107 0308 	add.w	r3, r7, #8
 800b29a:	461a      	mov	r2, r3
 800b29c:	2100      	movs	r1, #0
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 ff9c 	bl	800c1dc <xQueueReceiveFromISR>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d001      	beq.n	800b2ae <osSemaphoreWait+0x62>
      return osErrorOS;
 800b2aa:	23ff      	movs	r3, #255	; 0xff
 800b2ac:	e015      	b.n	800b2da <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d011      	beq.n	800b2d8 <osSemaphoreWait+0x8c>
 800b2b4:	4b0b      	ldr	r3, [pc, #44]	; (800b2e4 <osSemaphoreWait+0x98>)
 800b2b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2ba:	601a      	str	r2, [r3, #0]
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	f3bf 8f6f 	isb	sy
 800b2c4:	e008      	b.n	800b2d8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b2c6:	68f9      	ldr	r1, [r7, #12]
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 fe7f 	bl	800bfcc <xQueueSemaphoreTake>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d001      	beq.n	800b2d8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b2d4:	23ff      	movs	r3, #255	; 0xff
 800b2d6:	e000      	b.n	800b2da <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b2d8:	2300      	movs	r3, #0
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	e000ed04 	.word	0xe000ed04

0800b2e8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b2e8:	b590      	push	{r4, r7, lr}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af02      	add	r7, sp, #8
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d012      	beq.n	800b320 <osMessageCreate+0x38>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d00e      	beq.n	800b320 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6818      	ldr	r0, [r3, #0]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6859      	ldr	r1, [r3, #4]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	689a      	ldr	r2, [r3, #8]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	68dc      	ldr	r4, [r3, #12]
 800b312:	2300      	movs	r3, #0
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	4623      	mov	r3, r4
 800b318:	f000 f9e0 	bl	800b6dc <xQueueGenericCreateStatic>
 800b31c:	4603      	mov	r3, r0
 800b31e:	e008      	b.n	800b332 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6818      	ldr	r0, [r3, #0]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	685b      	ldr	r3, [r3, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	4619      	mov	r1, r3
 800b32c:	f000 fa49 	bl	800b7c2 <xQueueGenericCreate>
 800b330:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b332:	4618      	mov	r0, r3
 800b334:	370c      	adds	r7, #12
 800b336:	46bd      	mov	sp, r7
 800b338:	bd90      	pop	{r4, r7, pc}
	...

0800b33c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b086      	sub	sp, #24
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b348:	2300      	movs	r3, #0
 800b34a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d101      	bne.n	800b35a <osMessagePut+0x1e>
    ticks = 1;
 800b356:	2301      	movs	r3, #1
 800b358:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b35a:	f7ff fe05 	bl	800af68 <inHandlerMode>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d018      	beq.n	800b396 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b364:	f107 0210 	add.w	r2, r7, #16
 800b368:	f107 0108 	add.w	r1, r7, #8
 800b36c:	2300      	movs	r3, #0
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	f000 fc32 	bl	800bbd8 <xQueueGenericSendFromISR>
 800b374:	4603      	mov	r3, r0
 800b376:	2b01      	cmp	r3, #1
 800b378:	d001      	beq.n	800b37e <osMessagePut+0x42>
      return osErrorOS;
 800b37a:	23ff      	movs	r3, #255	; 0xff
 800b37c:	e018      	b.n	800b3b0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d014      	beq.n	800b3ae <osMessagePut+0x72>
 800b384:	4b0c      	ldr	r3, [pc, #48]	; (800b3b8 <osMessagePut+0x7c>)
 800b386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b38a:	601a      	str	r2, [r3, #0]
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	f3bf 8f6f 	isb	sy
 800b394:	e00b      	b.n	800b3ae <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b396:	f107 0108 	add.w	r1, r7, #8
 800b39a:	2300      	movs	r3, #0
 800b39c:	697a      	ldr	r2, [r7, #20]
 800b39e:	68f8      	ldr	r0, [r7, #12]
 800b3a0:	f000 fb20 	bl	800b9e4 <xQueueGenericSend>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d001      	beq.n	800b3ae <osMessagePut+0x72>
      return osErrorOS;
 800b3aa:	23ff      	movs	r3, #255	; 0xff
 800b3ac:	e000      	b.n	800b3b0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3718      	adds	r7, #24
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	e000ed04 	.word	0xe000ed04

0800b3bc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b3bc:	b590      	push	{r4, r7, lr}
 800b3be:	b08b      	sub	sp, #44	; 0x2c
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d10a      	bne.n	800b3ec <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b3d6:	2380      	movs	r3, #128	; 0x80
 800b3d8:	617b      	str	r3, [r7, #20]
    return event;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	461c      	mov	r4, r3
 800b3de:	f107 0314 	add.w	r3, r7, #20
 800b3e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b3e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b3ea:	e054      	b.n	800b496 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3fa:	d103      	bne.n	800b404 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b3fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b400:	627b      	str	r3, [r7, #36]	; 0x24
 800b402:	e009      	b.n	800b418 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d006      	beq.n	800b418 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b410:	2b00      	cmp	r3, #0
 800b412:	d101      	bne.n	800b418 <osMessageGet+0x5c>
      ticks = 1;
 800b414:	2301      	movs	r3, #1
 800b416:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b418:	f7ff fda6 	bl	800af68 <inHandlerMode>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d01c      	beq.n	800b45c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b422:	f107 0220 	add.w	r2, r7, #32
 800b426:	f107 0314 	add.w	r3, r7, #20
 800b42a:	3304      	adds	r3, #4
 800b42c:	4619      	mov	r1, r3
 800b42e:	68b8      	ldr	r0, [r7, #8]
 800b430:	f000 fed4 	bl	800c1dc <xQueueReceiveFromISR>
 800b434:	4603      	mov	r3, r0
 800b436:	2b01      	cmp	r3, #1
 800b438:	d102      	bne.n	800b440 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b43a:	2310      	movs	r3, #16
 800b43c:	617b      	str	r3, [r7, #20]
 800b43e:	e001      	b.n	800b444 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b440:	2300      	movs	r3, #0
 800b442:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b444:	6a3b      	ldr	r3, [r7, #32]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d01d      	beq.n	800b486 <osMessageGet+0xca>
 800b44a:	4b15      	ldr	r3, [pc, #84]	; (800b4a0 <osMessageGet+0xe4>)
 800b44c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b450:	601a      	str	r2, [r3, #0]
 800b452:	f3bf 8f4f 	dsb	sy
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	e014      	b.n	800b486 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b45c:	f107 0314 	add.w	r3, r7, #20
 800b460:	3304      	adds	r3, #4
 800b462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b464:	4619      	mov	r1, r3
 800b466:	68b8      	ldr	r0, [r7, #8]
 800b468:	f000 fcd4 	bl	800be14 <xQueueReceive>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d102      	bne.n	800b478 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b472:	2310      	movs	r3, #16
 800b474:	617b      	str	r3, [r7, #20]
 800b476:	e006      	b.n	800b486 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d101      	bne.n	800b482 <osMessageGet+0xc6>
 800b47e:	2300      	movs	r3, #0
 800b480:	e000      	b.n	800b484 <osMessageGet+0xc8>
 800b482:	2340      	movs	r3, #64	; 0x40
 800b484:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	461c      	mov	r4, r3
 800b48a:	f107 0314 	add.w	r3, r7, #20
 800b48e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b492:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b496:	68f8      	ldr	r0, [r7, #12]
 800b498:	372c      	adds	r7, #44	; 0x2c
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd90      	pop	{r4, r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	e000ed04 	.word	0xe000ed04

0800b4a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f103 0208 	add.w	r2, r3, #8
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b4bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f103 0208 	add.w	r2, r3, #8
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f103 0208 	add.w	r2, r3, #8
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b4d8:	bf00      	nop
 800b4da:	370c      	adds	r7, #12
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b4f2:	bf00      	nop
 800b4f4:	370c      	adds	r7, #12
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr

0800b4fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b4fe:	b480      	push	{r7}
 800b500:	b085      	sub	sp, #20
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
 800b506:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	68fa      	ldr	r2, [r7, #12]
 800b512:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	689a      	ldr	r2, [r3, #8]
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	689b      	ldr	r3, [r3, #8]
 800b520:	683a      	ldr	r2, [r7, #0]
 800b522:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	1c5a      	adds	r2, r3, #1
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	601a      	str	r2, [r3, #0]
}
 800b53a:	bf00      	nop
 800b53c:	3714      	adds	r7, #20
 800b53e:	46bd      	mov	sp, r7
 800b540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b544:	4770      	bx	lr

0800b546 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b546:	b480      	push	{r7}
 800b548:	b085      	sub	sp, #20
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
 800b54e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b55c:	d103      	bne.n	800b566 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	60fb      	str	r3, [r7, #12]
 800b564:	e00c      	b.n	800b580 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	3308      	adds	r3, #8
 800b56a:	60fb      	str	r3, [r7, #12]
 800b56c:	e002      	b.n	800b574 <vListInsert+0x2e>
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	60fb      	str	r3, [r7, #12]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	68ba      	ldr	r2, [r7, #8]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d2f6      	bcs.n	800b56e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	685a      	ldr	r2, [r3, #4]
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	683a      	ldr	r2, [r7, #0]
 800b58e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	68fa      	ldr	r2, [r7, #12]
 800b594:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	683a      	ldr	r2, [r7, #0]
 800b59a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	1c5a      	adds	r2, r3, #1
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	601a      	str	r2, [r3, #0]
}
 800b5ac:	bf00      	nop
 800b5ae:	3714      	adds	r7, #20
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	691b      	ldr	r3, [r3, #16]
 800b5c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	6892      	ldr	r2, [r2, #8]
 800b5ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	6852      	ldr	r2, [r2, #4]
 800b5d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d103      	bne.n	800b5ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	689a      	ldr	r2, [r3, #8]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	1e5a      	subs	r2, r3, #1
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
}
 800b600:	4618      	mov	r0, r3
 800b602:	3714      	adds	r7, #20
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d109      	bne.n	800b634 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b624:	f383 8811 	msr	BASEPRI, r3
 800b628:	f3bf 8f6f 	isb	sy
 800b62c:	f3bf 8f4f 	dsb	sy
 800b630:	60bb      	str	r3, [r7, #8]
 800b632:	e7fe      	b.n	800b632 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800b634:	f002 fcfa 	bl	800e02c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b640:	68f9      	ldr	r1, [r7, #12]
 800b642:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b644:	fb01 f303 	mul.w	r3, r1, r3
 800b648:	441a      	add	r2, r3
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2200      	movs	r2, #0
 800b652:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b664:	3b01      	subs	r3, #1
 800b666:	68f9      	ldr	r1, [r7, #12]
 800b668:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b66a:	fb01 f303 	mul.w	r3, r1, r3
 800b66e:	441a      	add	r2, r3
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	22ff      	movs	r2, #255	; 0xff
 800b678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	22ff      	movs	r2, #255	; 0xff
 800b680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d114      	bne.n	800b6b4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	691b      	ldr	r3, [r3, #16]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d01a      	beq.n	800b6c8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	3310      	adds	r3, #16
 800b696:	4618      	mov	r0, r3
 800b698:	f001 fc84 	bl	800cfa4 <xTaskRemoveFromEventList>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d012      	beq.n	800b6c8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b6a2:	4b0d      	ldr	r3, [pc, #52]	; (800b6d8 <xQueueGenericReset+0xcc>)
 800b6a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6a8:	601a      	str	r2, [r3, #0]
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	f3bf 8f6f 	isb	sy
 800b6b2:	e009      	b.n	800b6c8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	3310      	adds	r3, #16
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7ff fef3 	bl	800b4a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	3324      	adds	r3, #36	; 0x24
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7ff feee 	bl	800b4a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b6c8:	f002 fcde 	bl	800e088 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b6cc:	2301      	movs	r3, #1
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	e000ed04 	.word	0xe000ed04

0800b6dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b08e      	sub	sp, #56	; 0x38
 800b6e0:	af02      	add	r7, sp, #8
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	607a      	str	r2, [r7, #4]
 800b6e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d109      	bne.n	800b704 <xQueueGenericCreateStatic+0x28>
 800b6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f4:	f383 8811 	msr	BASEPRI, r3
 800b6f8:	f3bf 8f6f 	isb	sy
 800b6fc:	f3bf 8f4f 	dsb	sy
 800b700:	62bb      	str	r3, [r7, #40]	; 0x28
 800b702:	e7fe      	b.n	800b702 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d109      	bne.n	800b71e <xQueueGenericCreateStatic+0x42>
 800b70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70e:	f383 8811 	msr	BASEPRI, r3
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	627b      	str	r3, [r7, #36]	; 0x24
 800b71c:	e7fe      	b.n	800b71c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d002      	beq.n	800b72a <xQueueGenericCreateStatic+0x4e>
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d001      	beq.n	800b72e <xQueueGenericCreateStatic+0x52>
 800b72a:	2301      	movs	r3, #1
 800b72c:	e000      	b.n	800b730 <xQueueGenericCreateStatic+0x54>
 800b72e:	2300      	movs	r3, #0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d109      	bne.n	800b748 <xQueueGenericCreateStatic+0x6c>
 800b734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b738:	f383 8811 	msr	BASEPRI, r3
 800b73c:	f3bf 8f6f 	isb	sy
 800b740:	f3bf 8f4f 	dsb	sy
 800b744:	623b      	str	r3, [r7, #32]
 800b746:	e7fe      	b.n	800b746 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d102      	bne.n	800b754 <xQueueGenericCreateStatic+0x78>
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d101      	bne.n	800b758 <xQueueGenericCreateStatic+0x7c>
 800b754:	2301      	movs	r3, #1
 800b756:	e000      	b.n	800b75a <xQueueGenericCreateStatic+0x7e>
 800b758:	2300      	movs	r3, #0
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d109      	bne.n	800b772 <xQueueGenericCreateStatic+0x96>
 800b75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b762:	f383 8811 	msr	BASEPRI, r3
 800b766:	f3bf 8f6f 	isb	sy
 800b76a:	f3bf 8f4f 	dsb	sy
 800b76e:	61fb      	str	r3, [r7, #28]
 800b770:	e7fe      	b.n	800b770 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b772:	2348      	movs	r3, #72	; 0x48
 800b774:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	2b48      	cmp	r3, #72	; 0x48
 800b77a:	d009      	beq.n	800b790 <xQueueGenericCreateStatic+0xb4>
 800b77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b780:	f383 8811 	msr	BASEPRI, r3
 800b784:	f3bf 8f6f 	isb	sy
 800b788:	f3bf 8f4f 	dsb	sy
 800b78c:	61bb      	str	r3, [r7, #24]
 800b78e:	e7fe      	b.n	800b78e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b790:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d00d      	beq.n	800b7b8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79e:	2201      	movs	r2, #1
 800b7a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b7a4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7aa:	9300      	str	r3, [sp, #0]
 800b7ac:	4613      	mov	r3, r2
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	68b9      	ldr	r1, [r7, #8]
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f000 f844 	bl	800b840 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3730      	adds	r7, #48	; 0x30
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b08a      	sub	sp, #40	; 0x28
 800b7c6:	af02      	add	r7, sp, #8
 800b7c8:	60f8      	str	r0, [r7, #12]
 800b7ca:	60b9      	str	r1, [r7, #8]
 800b7cc:	4613      	mov	r3, r2
 800b7ce:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d109      	bne.n	800b7ea <xQueueGenericCreate+0x28>
 800b7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7da:	f383 8811 	msr	BASEPRI, r3
 800b7de:	f3bf 8f6f 	isb	sy
 800b7e2:	f3bf 8f4f 	dsb	sy
 800b7e6:	613b      	str	r3, [r7, #16]
 800b7e8:	e7fe      	b.n	800b7e8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d102      	bne.n	800b7f6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	61fb      	str	r3, [r7, #28]
 800b7f4:	e004      	b.n	800b800 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	68ba      	ldr	r2, [r7, #8]
 800b7fa:	fb02 f303 	mul.w	r3, r2, r3
 800b7fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	3348      	adds	r3, #72	; 0x48
 800b804:	4618      	mov	r0, r3
 800b806:	f002 fd2b 	bl	800e260 <pvPortMalloc>
 800b80a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d011      	beq.n	800b836 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b812:	69bb      	ldr	r3, [r7, #24]
 800b814:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	3348      	adds	r3, #72	; 0x48
 800b81a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b81c:	69bb      	ldr	r3, [r7, #24]
 800b81e:	2200      	movs	r2, #0
 800b820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b824:	79fa      	ldrb	r2, [r7, #7]
 800b826:	69bb      	ldr	r3, [r7, #24]
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	4613      	mov	r3, r2
 800b82c:	697a      	ldr	r2, [r7, #20]
 800b82e:	68b9      	ldr	r1, [r7, #8]
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f000 f805 	bl	800b840 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b836:	69bb      	ldr	r3, [r7, #24]
	}
 800b838:	4618      	mov	r0, r3
 800b83a:	3720      	adds	r7, #32
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
 800b84c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d103      	bne.n	800b85c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	69ba      	ldr	r2, [r7, #24]
 800b858:	601a      	str	r2, [r3, #0]
 800b85a:	e002      	b.n	800b862 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b85c:	69bb      	ldr	r3, [r7, #24]
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b868:	69bb      	ldr	r3, [r7, #24]
 800b86a:	68ba      	ldr	r2, [r7, #8]
 800b86c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b86e:	2101      	movs	r1, #1
 800b870:	69b8      	ldr	r0, [r7, #24]
 800b872:	f7ff fecb 	bl	800b60c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b876:	bf00      	nop
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}

0800b87e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b082      	sub	sp, #8
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00e      	beq.n	800b8aa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2200      	movs	r2, #0
 800b890:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b89e:	2300      	movs	r3, #0
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	2100      	movs	r1, #0
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f000 f89d 	bl	800b9e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b8aa:	bf00      	nop
 800b8ac:	3708      	adds	r7, #8
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b8b2:	b580      	push	{r7, lr}
 800b8b4:	b086      	sub	sp, #24
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	617b      	str	r3, [r7, #20]
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b8c4:	79fb      	ldrb	r3, [r7, #7]
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	6939      	ldr	r1, [r7, #16]
 800b8ca:	6978      	ldr	r0, [r7, #20]
 800b8cc:	f7ff ff79 	bl	800b7c2 <xQueueGenericCreate>
 800b8d0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b8d2:	68f8      	ldr	r0, [r7, #12]
 800b8d4:	f7ff ffd3 	bl	800b87e <prvInitialiseMutex>

		return xNewQueue;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
	}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3718      	adds	r7, #24
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b088      	sub	sp, #32
 800b8e6:	af02      	add	r7, sp, #8
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	6039      	str	r1, [r7, #0]
 800b8ec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	617b      	str	r3, [r7, #20]
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b8f6:	79fb      	ldrb	r3, [r7, #7]
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	6939      	ldr	r1, [r7, #16]
 800b900:	6978      	ldr	r0, [r7, #20]
 800b902:	f7ff feeb 	bl	800b6dc <xQueueGenericCreateStatic>
 800b906:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f7ff ffb8 	bl	800b87e <prvInitialiseMutex>

		return xNewQueue;
 800b90e:	68fb      	ldr	r3, [r7, #12]
	}
 800b910:	4618      	mov	r0, r3
 800b912:	3718      	adds	r7, #24
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b08a      	sub	sp, #40	; 0x28
 800b91c:	af02      	add	r7, sp, #8
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d109      	bne.n	800b93e <xQueueCreateCountingSemaphoreStatic+0x26>
 800b92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92e:	f383 8811 	msr	BASEPRI, r3
 800b932:	f3bf 8f6f 	isb	sy
 800b936:	f3bf 8f4f 	dsb	sy
 800b93a:	61bb      	str	r3, [r7, #24]
 800b93c:	e7fe      	b.n	800b93c <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b93e:	68ba      	ldr	r2, [r7, #8]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	429a      	cmp	r2, r3
 800b944:	d909      	bls.n	800b95a <xQueueCreateCountingSemaphoreStatic+0x42>
 800b946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94a:	f383 8811 	msr	BASEPRI, r3
 800b94e:	f3bf 8f6f 	isb	sy
 800b952:	f3bf 8f4f 	dsb	sy
 800b956:	617b      	str	r3, [r7, #20]
 800b958:	e7fe      	b.n	800b958 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b95a:	2302      	movs	r3, #2
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	2100      	movs	r1, #0
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	f7ff feb9 	bl	800b6dc <xQueueGenericCreateStatic>
 800b96a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d002      	beq.n	800b978 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	68ba      	ldr	r2, [r7, #8]
 800b976:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b978:	69fb      	ldr	r3, [r7, #28]
	}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3720      	adds	r7, #32
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}

0800b982 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b982:	b580      	push	{r7, lr}
 800b984:	b086      	sub	sp, #24
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d109      	bne.n	800b9a6 <xQueueCreateCountingSemaphore+0x24>
 800b992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b996:	f383 8811 	msr	BASEPRI, r3
 800b99a:	f3bf 8f6f 	isb	sy
 800b99e:	f3bf 8f4f 	dsb	sy
 800b9a2:	613b      	str	r3, [r7, #16]
 800b9a4:	e7fe      	b.n	800b9a4 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b9a6:	683a      	ldr	r2, [r7, #0]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d909      	bls.n	800b9c2 <xQueueCreateCountingSemaphore+0x40>
 800b9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b2:	f383 8811 	msr	BASEPRI, r3
 800b9b6:	f3bf 8f6f 	isb	sy
 800b9ba:	f3bf 8f4f 	dsb	sy
 800b9be:	60fb      	str	r3, [r7, #12]
 800b9c0:	e7fe      	b.n	800b9c0 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f7ff fefb 	bl	800b7c2 <xQueueGenericCreate>
 800b9cc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d002      	beq.n	800b9da <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	683a      	ldr	r2, [r7, #0]
 800b9d8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b9da:	697b      	ldr	r3, [r7, #20]
	}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3718      	adds	r7, #24
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b08e      	sub	sp, #56	; 0x38
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	60b9      	str	r1, [r7, #8]
 800b9ee:	607a      	str	r2, [r7, #4]
 800b9f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d109      	bne.n	800ba14 <xQueueGenericSend+0x30>
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba12:	e7fe      	b.n	800ba12 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d103      	bne.n	800ba22 <xQueueGenericSend+0x3e>
 800ba1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d101      	bne.n	800ba26 <xQueueGenericSend+0x42>
 800ba22:	2301      	movs	r3, #1
 800ba24:	e000      	b.n	800ba28 <xQueueGenericSend+0x44>
 800ba26:	2300      	movs	r3, #0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d109      	bne.n	800ba40 <xQueueGenericSend+0x5c>
 800ba2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba30:	f383 8811 	msr	BASEPRI, r3
 800ba34:	f3bf 8f6f 	isb	sy
 800ba38:	f3bf 8f4f 	dsb	sy
 800ba3c:	627b      	str	r3, [r7, #36]	; 0x24
 800ba3e:	e7fe      	b.n	800ba3e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	2b02      	cmp	r3, #2
 800ba44:	d103      	bne.n	800ba4e <xQueueGenericSend+0x6a>
 800ba46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d101      	bne.n	800ba52 <xQueueGenericSend+0x6e>
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e000      	b.n	800ba54 <xQueueGenericSend+0x70>
 800ba52:	2300      	movs	r3, #0
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d109      	bne.n	800ba6c <xQueueGenericSend+0x88>
 800ba58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5c:	f383 8811 	msr	BASEPRI, r3
 800ba60:	f3bf 8f6f 	isb	sy
 800ba64:	f3bf 8f4f 	dsb	sy
 800ba68:	623b      	str	r3, [r7, #32]
 800ba6a:	e7fe      	b.n	800ba6a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba6c:	f001 fc52 	bl	800d314 <xTaskGetSchedulerState>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d102      	bne.n	800ba7c <xQueueGenericSend+0x98>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d101      	bne.n	800ba80 <xQueueGenericSend+0x9c>
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e000      	b.n	800ba82 <xQueueGenericSend+0x9e>
 800ba80:	2300      	movs	r3, #0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d109      	bne.n	800ba9a <xQueueGenericSend+0xb6>
 800ba86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8a:	f383 8811 	msr	BASEPRI, r3
 800ba8e:	f3bf 8f6f 	isb	sy
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	61fb      	str	r3, [r7, #28]
 800ba98:	e7fe      	b.n	800ba98 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba9a:	f002 fac7 	bl	800e02c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d302      	bcc.n	800bab0 <xQueueGenericSend+0xcc>
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	2b02      	cmp	r3, #2
 800baae:	d129      	bne.n	800bb04 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bab0:	683a      	ldr	r2, [r7, #0]
 800bab2:	68b9      	ldr	r1, [r7, #8]
 800bab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bab6:	f000 fc26 	bl	800c306 <prvCopyDataToQueue>
 800baba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800babc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d010      	beq.n	800bae6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac6:	3324      	adds	r3, #36	; 0x24
 800bac8:	4618      	mov	r0, r3
 800baca:	f001 fa6b 	bl	800cfa4 <xTaskRemoveFromEventList>
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d013      	beq.n	800bafc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bad4:	4b3f      	ldr	r3, [pc, #252]	; (800bbd4 <xQueueGenericSend+0x1f0>)
 800bad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bada:	601a      	str	r2, [r3, #0]
 800badc:	f3bf 8f4f 	dsb	sy
 800bae0:	f3bf 8f6f 	isb	sy
 800bae4:	e00a      	b.n	800bafc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d007      	beq.n	800bafc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800baec:	4b39      	ldr	r3, [pc, #228]	; (800bbd4 <xQueueGenericSend+0x1f0>)
 800baee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baf2:	601a      	str	r2, [r3, #0]
 800baf4:	f3bf 8f4f 	dsb	sy
 800baf8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bafc:	f002 fac4 	bl	800e088 <vPortExitCritical>
				return pdPASS;
 800bb00:	2301      	movs	r3, #1
 800bb02:	e063      	b.n	800bbcc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d103      	bne.n	800bb12 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb0a:	f002 fabd 	bl	800e088 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	e05c      	b.n	800bbcc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d106      	bne.n	800bb26 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb18:	f107 0314 	add.w	r3, r7, #20
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f001 faa3 	bl	800d068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb22:	2301      	movs	r3, #1
 800bb24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb26:	f002 faaf 	bl	800e088 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb2a:	f001 f80f 	bl	800cb4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb2e:	f002 fa7d 	bl	800e02c <vPortEnterCritical>
 800bb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb38:	b25b      	sxtb	r3, r3
 800bb3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb3e:	d103      	bne.n	800bb48 <xQueueGenericSend+0x164>
 800bb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb42:	2200      	movs	r2, #0
 800bb44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb4e:	b25b      	sxtb	r3, r3
 800bb50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb54:	d103      	bne.n	800bb5e <xQueueGenericSend+0x17a>
 800bb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb5e:	f002 fa93 	bl	800e088 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb62:	1d3a      	adds	r2, r7, #4
 800bb64:	f107 0314 	add.w	r3, r7, #20
 800bb68:	4611      	mov	r1, r2
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f001 fa92 	bl	800d094 <xTaskCheckForTimeOut>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d124      	bne.n	800bbc0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bb76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb78:	f000 fcbd 	bl	800c4f6 <prvIsQueueFull>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d018      	beq.n	800bbb4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb84:	3310      	adds	r3, #16
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	4611      	mov	r1, r2
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f001 f9bc 	bl	800cf08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bb90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb92:	f000 fc48 	bl	800c426 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bb96:	f000 ffe7 	bl	800cb68 <xTaskResumeAll>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f47f af7c 	bne.w	800ba9a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800bba2:	4b0c      	ldr	r3, [pc, #48]	; (800bbd4 <xQueueGenericSend+0x1f0>)
 800bba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bba8:	601a      	str	r2, [r3, #0]
 800bbaa:	f3bf 8f4f 	dsb	sy
 800bbae:	f3bf 8f6f 	isb	sy
 800bbb2:	e772      	b.n	800ba9a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bbb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbb6:	f000 fc36 	bl	800c426 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bbba:	f000 ffd5 	bl	800cb68 <xTaskResumeAll>
 800bbbe:	e76c      	b.n	800ba9a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bbc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbc2:	f000 fc30 	bl	800c426 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bbc6:	f000 ffcf 	bl	800cb68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bbca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3738      	adds	r7, #56	; 0x38
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	e000ed04 	.word	0xe000ed04

0800bbd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b08e      	sub	sp, #56	; 0x38
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	607a      	str	r2, [r7, #4]
 800bbe4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d109      	bne.n	800bc04 <xQueueGenericSendFromISR+0x2c>
 800bbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf4:	f383 8811 	msr	BASEPRI, r3
 800bbf8:	f3bf 8f6f 	isb	sy
 800bbfc:	f3bf 8f4f 	dsb	sy
 800bc00:	627b      	str	r3, [r7, #36]	; 0x24
 800bc02:	e7fe      	b.n	800bc02 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d103      	bne.n	800bc12 <xQueueGenericSendFromISR+0x3a>
 800bc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d101      	bne.n	800bc16 <xQueueGenericSendFromISR+0x3e>
 800bc12:	2301      	movs	r3, #1
 800bc14:	e000      	b.n	800bc18 <xQueueGenericSendFromISR+0x40>
 800bc16:	2300      	movs	r3, #0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d109      	bne.n	800bc30 <xQueueGenericSendFromISR+0x58>
 800bc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc20:	f383 8811 	msr	BASEPRI, r3
 800bc24:	f3bf 8f6f 	isb	sy
 800bc28:	f3bf 8f4f 	dsb	sy
 800bc2c:	623b      	str	r3, [r7, #32]
 800bc2e:	e7fe      	b.n	800bc2e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	2b02      	cmp	r3, #2
 800bc34:	d103      	bne.n	800bc3e <xQueueGenericSendFromISR+0x66>
 800bc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d101      	bne.n	800bc42 <xQueueGenericSendFromISR+0x6a>
 800bc3e:	2301      	movs	r3, #1
 800bc40:	e000      	b.n	800bc44 <xQueueGenericSendFromISR+0x6c>
 800bc42:	2300      	movs	r3, #0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d109      	bne.n	800bc5c <xQueueGenericSendFromISR+0x84>
 800bc48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4c:	f383 8811 	msr	BASEPRI, r3
 800bc50:	f3bf 8f6f 	isb	sy
 800bc54:	f3bf 8f4f 	dsb	sy
 800bc58:	61fb      	str	r3, [r7, #28]
 800bc5a:	e7fe      	b.n	800bc5a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc5c:	f002 fac2 	bl	800e1e4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bc60:	f3ef 8211 	mrs	r2, BASEPRI
 800bc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc68:	f383 8811 	msr	BASEPRI, r3
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	61ba      	str	r2, [r7, #24]
 800bc76:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bc78:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d302      	bcc.n	800bc8e <xQueueGenericSendFromISR+0xb6>
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	d12c      	bne.n	800bce8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc98:	683a      	ldr	r2, [r7, #0]
 800bc9a:	68b9      	ldr	r1, [r7, #8]
 800bc9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc9e:	f000 fb32 	bl	800c306 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bca2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcaa:	d112      	bne.n	800bcd2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d016      	beq.n	800bce2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb6:	3324      	adds	r3, #36	; 0x24
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f001 f973 	bl	800cfa4 <xTaskRemoveFromEventList>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d00e      	beq.n	800bce2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00b      	beq.n	800bce2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2201      	movs	r2, #1
 800bcce:	601a      	str	r2, [r3, #0]
 800bcd0:	e007      	b.n	800bce2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bcd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	b25a      	sxtb	r2, r3
 800bcdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bce2:	2301      	movs	r3, #1
 800bce4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bce6:	e001      	b.n	800bcec <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bce8:	2300      	movs	r3, #0
 800bcea:	637b      	str	r3, [r7, #52]	; 0x34
 800bcec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcee:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bcf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3738      	adds	r7, #56	; 0x38
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b08e      	sub	sp, #56	; 0x38
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d109      	bne.n	800bd28 <xQueueGiveFromISR+0x28>
	__asm volatile
 800bd14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd18:	f383 8811 	msr	BASEPRI, r3
 800bd1c:	f3bf 8f6f 	isb	sy
 800bd20:	f3bf 8f4f 	dsb	sy
 800bd24:	623b      	str	r3, [r7, #32]
 800bd26:	e7fe      	b.n	800bd26 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d009      	beq.n	800bd44 <xQueueGiveFromISR+0x44>
 800bd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd34:	f383 8811 	msr	BASEPRI, r3
 800bd38:	f3bf 8f6f 	isb	sy
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	61fb      	str	r3, [r7, #28]
 800bd42:	e7fe      	b.n	800bd42 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d103      	bne.n	800bd54 <xQueueGiveFromISR+0x54>
 800bd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d101      	bne.n	800bd58 <xQueueGiveFromISR+0x58>
 800bd54:	2301      	movs	r3, #1
 800bd56:	e000      	b.n	800bd5a <xQueueGiveFromISR+0x5a>
 800bd58:	2300      	movs	r3, #0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d109      	bne.n	800bd72 <xQueueGiveFromISR+0x72>
 800bd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd62:	f383 8811 	msr	BASEPRI, r3
 800bd66:	f3bf 8f6f 	isb	sy
 800bd6a:	f3bf 8f4f 	dsb	sy
 800bd6e:	61bb      	str	r3, [r7, #24]
 800bd70:	e7fe      	b.n	800bd70 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bd72:	f002 fa37 	bl	800e1e4 <vPortValidateInterruptPriority>
	__asm volatile
 800bd76:	f3ef 8211 	mrs	r2, BASEPRI
 800bd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7e:	f383 8811 	msr	BASEPRI, r3
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	617a      	str	r2, [r7, #20]
 800bd8c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bd8e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d22b      	bcs.n	800bdfa <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bda8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdae:	1c5a      	adds	r2, r3, #1
 800bdb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bdb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bdb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdbc:	d112      	bne.n	800bde4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bdbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d016      	beq.n	800bdf4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc8:	3324      	adds	r3, #36	; 0x24
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f001 f8ea 	bl	800cfa4 <xTaskRemoveFromEventList>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d00e      	beq.n	800bdf4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d00b      	beq.n	800bdf4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	2201      	movs	r2, #1
 800bde0:	601a      	str	r2, [r3, #0]
 800bde2:	e007      	b.n	800bdf4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bde4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bde8:	3301      	adds	r3, #1
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	b25a      	sxtb	r2, r3
 800bdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	637b      	str	r3, [r7, #52]	; 0x34
 800bdf8:	e001      	b.n	800bdfe <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	637b      	str	r3, [r7, #52]	; 0x34
 800bdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be00:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3738      	adds	r7, #56	; 0x38
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
	...

0800be14 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b08c      	sub	sp, #48	; 0x30
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800be20:	2300      	movs	r3, #0
 800be22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800be28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d109      	bne.n	800be42 <xQueueReceive+0x2e>
	__asm volatile
 800be2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be32:	f383 8811 	msr	BASEPRI, r3
 800be36:	f3bf 8f6f 	isb	sy
 800be3a:	f3bf 8f4f 	dsb	sy
 800be3e:	623b      	str	r3, [r7, #32]
 800be40:	e7fe      	b.n	800be40 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d103      	bne.n	800be50 <xQueueReceive+0x3c>
 800be48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d101      	bne.n	800be54 <xQueueReceive+0x40>
 800be50:	2301      	movs	r3, #1
 800be52:	e000      	b.n	800be56 <xQueueReceive+0x42>
 800be54:	2300      	movs	r3, #0
 800be56:	2b00      	cmp	r3, #0
 800be58:	d109      	bne.n	800be6e <xQueueReceive+0x5a>
 800be5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5e:	f383 8811 	msr	BASEPRI, r3
 800be62:	f3bf 8f6f 	isb	sy
 800be66:	f3bf 8f4f 	dsb	sy
 800be6a:	61fb      	str	r3, [r7, #28]
 800be6c:	e7fe      	b.n	800be6c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be6e:	f001 fa51 	bl	800d314 <xTaskGetSchedulerState>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	d102      	bne.n	800be7e <xQueueReceive+0x6a>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d101      	bne.n	800be82 <xQueueReceive+0x6e>
 800be7e:	2301      	movs	r3, #1
 800be80:	e000      	b.n	800be84 <xQueueReceive+0x70>
 800be82:	2300      	movs	r3, #0
 800be84:	2b00      	cmp	r3, #0
 800be86:	d109      	bne.n	800be9c <xQueueReceive+0x88>
 800be88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8c:	f383 8811 	msr	BASEPRI, r3
 800be90:	f3bf 8f6f 	isb	sy
 800be94:	f3bf 8f4f 	dsb	sy
 800be98:	61bb      	str	r3, [r7, #24]
 800be9a:	e7fe      	b.n	800be9a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be9c:	f002 f8c6 	bl	800e02c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d01f      	beq.n	800beec <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800beac:	68b9      	ldr	r1, [r7, #8]
 800beae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beb0:	f000 fa93 	bl	800c3da <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800beb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb6:	1e5a      	subs	r2, r3, #1
 800beb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beba:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bebe:	691b      	ldr	r3, [r3, #16]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00f      	beq.n	800bee4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec6:	3310      	adds	r3, #16
 800bec8:	4618      	mov	r0, r3
 800beca:	f001 f86b 	bl	800cfa4 <xTaskRemoveFromEventList>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d007      	beq.n	800bee4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bed4:	4b3c      	ldr	r3, [pc, #240]	; (800bfc8 <xQueueReceive+0x1b4>)
 800bed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beda:	601a      	str	r2, [r3, #0]
 800bedc:	f3bf 8f4f 	dsb	sy
 800bee0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bee4:	f002 f8d0 	bl	800e088 <vPortExitCritical>
				return pdPASS;
 800bee8:	2301      	movs	r3, #1
 800beea:	e069      	b.n	800bfc0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d103      	bne.n	800befa <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bef2:	f002 f8c9 	bl	800e088 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bef6:	2300      	movs	r3, #0
 800bef8:	e062      	b.n	800bfc0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800befa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befc:	2b00      	cmp	r3, #0
 800befe:	d106      	bne.n	800bf0e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf00:	f107 0310 	add.w	r3, r7, #16
 800bf04:	4618      	mov	r0, r3
 800bf06:	f001 f8af 	bl	800d068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf0e:	f002 f8bb 	bl	800e088 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf12:	f000 fe1b 	bl	800cb4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf16:	f002 f889 	bl	800e02c <vPortEnterCritical>
 800bf1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf20:	b25b      	sxtb	r3, r3
 800bf22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf26:	d103      	bne.n	800bf30 <xQueueReceive+0x11c>
 800bf28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf36:	b25b      	sxtb	r3, r3
 800bf38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf3c:	d103      	bne.n	800bf46 <xQueueReceive+0x132>
 800bf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf40:	2200      	movs	r2, #0
 800bf42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf46:	f002 f89f 	bl	800e088 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf4a:	1d3a      	adds	r2, r7, #4
 800bf4c:	f107 0310 	add.w	r3, r7, #16
 800bf50:	4611      	mov	r1, r2
 800bf52:	4618      	mov	r0, r3
 800bf54:	f001 f89e 	bl	800d094 <xTaskCheckForTimeOut>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d123      	bne.n	800bfa6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf60:	f000 fab3 	bl	800c4ca <prvIsQueueEmpty>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d017      	beq.n	800bf9a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bf6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6c:	3324      	adds	r3, #36	; 0x24
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	4611      	mov	r1, r2
 800bf72:	4618      	mov	r0, r3
 800bf74:	f000 ffc8 	bl	800cf08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bf78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf7a:	f000 fa54 	bl	800c426 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bf7e:	f000 fdf3 	bl	800cb68 <xTaskResumeAll>
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d189      	bne.n	800be9c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800bf88:	4b0f      	ldr	r3, [pc, #60]	; (800bfc8 <xQueueReceive+0x1b4>)
 800bf8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf8e:	601a      	str	r2, [r3, #0]
 800bf90:	f3bf 8f4f 	dsb	sy
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	e780      	b.n	800be9c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bf9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf9c:	f000 fa43 	bl	800c426 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfa0:	f000 fde2 	bl	800cb68 <xTaskResumeAll>
 800bfa4:	e77a      	b.n	800be9c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bfa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfa8:	f000 fa3d 	bl	800c426 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bfac:	f000 fddc 	bl	800cb68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bfb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfb2:	f000 fa8a 	bl	800c4ca <prvIsQueueEmpty>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f43f af6f 	beq.w	800be9c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bfbe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3730      	adds	r7, #48	; 0x30
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	e000ed04 	.word	0xe000ed04

0800bfcc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b08e      	sub	sp, #56	; 0x38
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bfe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d109      	bne.n	800bffc <xQueueSemaphoreTake+0x30>
 800bfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfec:	f383 8811 	msr	BASEPRI, r3
 800bff0:	f3bf 8f6f 	isb	sy
 800bff4:	f3bf 8f4f 	dsb	sy
 800bff8:	623b      	str	r3, [r7, #32]
 800bffa:	e7fe      	b.n	800bffa <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c000:	2b00      	cmp	r3, #0
 800c002:	d009      	beq.n	800c018 <xQueueSemaphoreTake+0x4c>
 800c004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c008:	f383 8811 	msr	BASEPRI, r3
 800c00c:	f3bf 8f6f 	isb	sy
 800c010:	f3bf 8f4f 	dsb	sy
 800c014:	61fb      	str	r3, [r7, #28]
 800c016:	e7fe      	b.n	800c016 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c018:	f001 f97c 	bl	800d314 <xTaskGetSchedulerState>
 800c01c:	4603      	mov	r3, r0
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d102      	bne.n	800c028 <xQueueSemaphoreTake+0x5c>
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d101      	bne.n	800c02c <xQueueSemaphoreTake+0x60>
 800c028:	2301      	movs	r3, #1
 800c02a:	e000      	b.n	800c02e <xQueueSemaphoreTake+0x62>
 800c02c:	2300      	movs	r3, #0
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d109      	bne.n	800c046 <xQueueSemaphoreTake+0x7a>
 800c032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c036:	f383 8811 	msr	BASEPRI, r3
 800c03a:	f3bf 8f6f 	isb	sy
 800c03e:	f3bf 8f4f 	dsb	sy
 800c042:	61bb      	str	r3, [r7, #24]
 800c044:	e7fe      	b.n	800c044 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c046:	f001 fff1 	bl	800e02c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c04e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c052:	2b00      	cmp	r3, #0
 800c054:	d024      	beq.n	800c0a0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c058:	1e5a      	subs	r2, r3, #1
 800c05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d104      	bne.n	800c070 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c066:	f001 fb0f 	bl	800d688 <pvTaskIncrementMutexHeldCount>
 800c06a:	4602      	mov	r2, r0
 800c06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c06e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c072:	691b      	ldr	r3, [r3, #16]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00f      	beq.n	800c098 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07a:	3310      	adds	r3, #16
 800c07c:	4618      	mov	r0, r3
 800c07e:	f000 ff91 	bl	800cfa4 <xTaskRemoveFromEventList>
 800c082:	4603      	mov	r3, r0
 800c084:	2b00      	cmp	r3, #0
 800c086:	d007      	beq.n	800c098 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c088:	4b53      	ldr	r3, [pc, #332]	; (800c1d8 <xQueueSemaphoreTake+0x20c>)
 800c08a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c08e:	601a      	str	r2, [r3, #0]
 800c090:	f3bf 8f4f 	dsb	sy
 800c094:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c098:	f001 fff6 	bl	800e088 <vPortExitCritical>
				return pdPASS;
 800c09c:	2301      	movs	r3, #1
 800c09e:	e096      	b.n	800c1ce <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d110      	bne.n	800c0c8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d009      	beq.n	800c0c0 <xQueueSemaphoreTake+0xf4>
 800c0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b0:	f383 8811 	msr	BASEPRI, r3
 800c0b4:	f3bf 8f6f 	isb	sy
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	617b      	str	r3, [r7, #20]
 800c0be:	e7fe      	b.n	800c0be <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c0c0:	f001 ffe2 	bl	800e088 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	e082      	b.n	800c1ce <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c0c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d106      	bne.n	800c0dc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c0ce:	f107 030c 	add.w	r3, r7, #12
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f000 ffc8 	bl	800d068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c0dc:	f001 ffd4 	bl	800e088 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c0e0:	f000 fd34 	bl	800cb4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c0e4:	f001 ffa2 	bl	800e02c <vPortEnterCritical>
 800c0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0ee:	b25b      	sxtb	r3, r3
 800c0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f4:	d103      	bne.n	800c0fe <xQueueSemaphoreTake+0x132>
 800c0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c100:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c104:	b25b      	sxtb	r3, r3
 800c106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c10a:	d103      	bne.n	800c114 <xQueueSemaphoreTake+0x148>
 800c10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10e:	2200      	movs	r2, #0
 800c110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c114:	f001 ffb8 	bl	800e088 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c118:	463a      	mov	r2, r7
 800c11a:	f107 030c 	add.w	r3, r7, #12
 800c11e:	4611      	mov	r1, r2
 800c120:	4618      	mov	r0, r3
 800c122:	f000 ffb7 	bl	800d094 <xTaskCheckForTimeOut>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d132      	bne.n	800c192 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c12c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c12e:	f000 f9cc 	bl	800c4ca <prvIsQueueEmpty>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d026      	beq.n	800c186 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d109      	bne.n	800c154 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800c140:	f001 ff74 	bl	800e02c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c146:	689b      	ldr	r3, [r3, #8]
 800c148:	4618      	mov	r0, r3
 800c14a:	f001 f901 	bl	800d350 <xTaskPriorityInherit>
 800c14e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c150:	f001 ff9a 	bl	800e088 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c156:	3324      	adds	r3, #36	; 0x24
 800c158:	683a      	ldr	r2, [r7, #0]
 800c15a:	4611      	mov	r1, r2
 800c15c:	4618      	mov	r0, r3
 800c15e:	f000 fed3 	bl	800cf08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c162:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c164:	f000 f95f 	bl	800c426 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c168:	f000 fcfe 	bl	800cb68 <xTaskResumeAll>
 800c16c:	4603      	mov	r3, r0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	f47f af69 	bne.w	800c046 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800c174:	4b18      	ldr	r3, [pc, #96]	; (800c1d8 <xQueueSemaphoreTake+0x20c>)
 800c176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c17a:	601a      	str	r2, [r3, #0]
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	f3bf 8f6f 	isb	sy
 800c184:	e75f      	b.n	800c046 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c186:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c188:	f000 f94d 	bl	800c426 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c18c:	f000 fcec 	bl	800cb68 <xTaskResumeAll>
 800c190:	e759      	b.n	800c046 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c192:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c194:	f000 f947 	bl	800c426 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c198:	f000 fce6 	bl	800cb68 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c19c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c19e:	f000 f994 	bl	800c4ca <prvIsQueueEmpty>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	f43f af4e 	beq.w	800c046 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d00d      	beq.n	800c1cc <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800c1b0:	f001 ff3c 	bl	800e02c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c1b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1b6:	f000 f88e 	bl	800c2d6 <prvGetDisinheritPriorityAfterTimeout>
 800c1ba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f001 f9c8 	bl	800d558 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c1c8:	f001 ff5e 	bl	800e088 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c1cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3738      	adds	r7, #56	; 0x38
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	e000ed04 	.word	0xe000ed04

0800c1dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b08e      	sub	sp, #56	; 0x38
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	60f8      	str	r0, [r7, #12]
 800c1e4:	60b9      	str	r1, [r7, #8]
 800c1e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d109      	bne.n	800c206 <xQueueReceiveFromISR+0x2a>
 800c1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f6:	f383 8811 	msr	BASEPRI, r3
 800c1fa:	f3bf 8f6f 	isb	sy
 800c1fe:	f3bf 8f4f 	dsb	sy
 800c202:	623b      	str	r3, [r7, #32]
 800c204:	e7fe      	b.n	800c204 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d103      	bne.n	800c214 <xQueueReceiveFromISR+0x38>
 800c20c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c210:	2b00      	cmp	r3, #0
 800c212:	d101      	bne.n	800c218 <xQueueReceiveFromISR+0x3c>
 800c214:	2301      	movs	r3, #1
 800c216:	e000      	b.n	800c21a <xQueueReceiveFromISR+0x3e>
 800c218:	2300      	movs	r3, #0
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d109      	bne.n	800c232 <xQueueReceiveFromISR+0x56>
 800c21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c222:	f383 8811 	msr	BASEPRI, r3
 800c226:	f3bf 8f6f 	isb	sy
 800c22a:	f3bf 8f4f 	dsb	sy
 800c22e:	61fb      	str	r3, [r7, #28]
 800c230:	e7fe      	b.n	800c230 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c232:	f001 ffd7 	bl	800e1e4 <vPortValidateInterruptPriority>
	__asm volatile
 800c236:	f3ef 8211 	mrs	r2, BASEPRI
 800c23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c23e:	f383 8811 	msr	BASEPRI, r3
 800c242:	f3bf 8f6f 	isb	sy
 800c246:	f3bf 8f4f 	dsb	sy
 800c24a:	61ba      	str	r2, [r7, #24]
 800c24c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c24e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c250:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c256:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d02f      	beq.n	800c2be <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c268:	68b9      	ldr	r1, [r7, #8]
 800c26a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c26c:	f000 f8b5 	bl	800c3da <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c272:	1e5a      	subs	r2, r3, #1
 800c274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c276:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c278:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c27c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c280:	d112      	bne.n	800c2a8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c284:	691b      	ldr	r3, [r3, #16]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d016      	beq.n	800c2b8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28c:	3310      	adds	r3, #16
 800c28e:	4618      	mov	r0, r3
 800c290:	f000 fe88 	bl	800cfa4 <xTaskRemoveFromEventList>
 800c294:	4603      	mov	r3, r0
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00e      	beq.n	800c2b8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00b      	beq.n	800c2b8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	601a      	str	r2, [r3, #0]
 800c2a6:	e007      	b.n	800c2b8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c2a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	b2db      	uxtb	r3, r3
 800c2b0:	b25a      	sxtb	r2, r3
 800c2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	637b      	str	r3, [r7, #52]	; 0x34
 800c2bc:	e001      	b.n	800c2c2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	637b      	str	r3, [r7, #52]	; 0x34
 800c2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c2cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3738      	adds	r7, #56	; 0x38
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c2d6:	b480      	push	{r7}
 800c2d8:	b085      	sub	sp, #20
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d006      	beq.n	800c2f4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f1c3 0307 	rsb	r3, r3, #7
 800c2f0:	60fb      	str	r3, [r7, #12]
 800c2f2:	e001      	b.n	800c2f8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
	}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3714      	adds	r7, #20
 800c2fe:	46bd      	mov	sp, r7
 800c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c304:	4770      	bx	lr

0800c306 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c306:	b580      	push	{r7, lr}
 800c308:	b086      	sub	sp, #24
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	60f8      	str	r0, [r7, #12]
 800c30e:	60b9      	str	r1, [r7, #8]
 800c310:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c312:	2300      	movs	r3, #0
 800c314:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c31a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c320:	2b00      	cmp	r3, #0
 800c322:	d10d      	bne.n	800c340 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d14d      	bne.n	800c3c8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	689b      	ldr	r3, [r3, #8]
 800c330:	4618      	mov	r0, r3
 800c332:	f001 f88d 	bl	800d450 <xTaskPriorityDisinherit>
 800c336:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2200      	movs	r2, #0
 800c33c:	609a      	str	r2, [r3, #8]
 800c33e:	e043      	b.n	800c3c8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d119      	bne.n	800c37a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6858      	ldr	r0, [r3, #4]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c34e:	461a      	mov	r2, r3
 800c350:	68b9      	ldr	r1, [r7, #8]
 800c352:	f00b fb0c 	bl	801796e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	685a      	ldr	r2, [r3, #4]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c35e:	441a      	add	r2, r3
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	685a      	ldr	r2, [r3, #4]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d32b      	bcc.n	800c3c8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	605a      	str	r2, [r3, #4]
 800c378:	e026      	b.n	800c3c8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	68d8      	ldr	r0, [r3, #12]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c382:	461a      	mov	r2, r3
 800c384:	68b9      	ldr	r1, [r7, #8]
 800c386:	f00b faf2 	bl	801796e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	68da      	ldr	r2, [r3, #12]
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c392:	425b      	negs	r3, r3
 800c394:	441a      	add	r2, r3
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	68da      	ldr	r2, [r3, #12]
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d207      	bcs.n	800c3b6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	689a      	ldr	r2, [r3, #8]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ae:	425b      	negs	r3, r3
 800c3b0:	441a      	add	r2, r3
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2b02      	cmp	r3, #2
 800c3ba:	d105      	bne.n	800c3c8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d002      	beq.n	800c3c8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	3b01      	subs	r3, #1
 800c3c6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	1c5a      	adds	r2, r3, #1
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c3d0:	697b      	ldr	r3, [r7, #20]
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3718      	adds	r7, #24
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}

0800c3da <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b082      	sub	sp, #8
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
 800c3e2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d018      	beq.n	800c41e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	68da      	ldr	r2, [r3, #12]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3f4:	441a      	add	r2, r3
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	68da      	ldr	r2, [r3, #12]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	429a      	cmp	r2, r3
 800c404:	d303      	bcc.n	800c40e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	68d9      	ldr	r1, [r3, #12]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c416:	461a      	mov	r2, r3
 800c418:	6838      	ldr	r0, [r7, #0]
 800c41a:	f00b faa8 	bl	801796e <memcpy>
	}
}
 800c41e:	bf00      	nop
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c426:	b580      	push	{r7, lr}
 800c428:	b084      	sub	sp, #16
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c42e:	f001 fdfd 	bl	800e02c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c438:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c43a:	e011      	b.n	800c460 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c440:	2b00      	cmp	r3, #0
 800c442:	d012      	beq.n	800c46a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	3324      	adds	r3, #36	; 0x24
 800c448:	4618      	mov	r0, r3
 800c44a:	f000 fdab 	bl	800cfa4 <xTaskRemoveFromEventList>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b00      	cmp	r3, #0
 800c452:	d001      	beq.n	800c458 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c454:	f000 fe7e 	bl	800d154 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c458:	7bfb      	ldrb	r3, [r7, #15]
 800c45a:	3b01      	subs	r3, #1
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c464:	2b00      	cmp	r3, #0
 800c466:	dce9      	bgt.n	800c43c <prvUnlockQueue+0x16>
 800c468:	e000      	b.n	800c46c <prvUnlockQueue+0x46>
					break;
 800c46a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	22ff      	movs	r2, #255	; 0xff
 800c470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c474:	f001 fe08 	bl	800e088 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c478:	f001 fdd8 	bl	800e02c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c482:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c484:	e011      	b.n	800c4aa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	691b      	ldr	r3, [r3, #16]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d012      	beq.n	800c4b4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	3310      	adds	r3, #16
 800c492:	4618      	mov	r0, r3
 800c494:	f000 fd86 	bl	800cfa4 <xTaskRemoveFromEventList>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d001      	beq.n	800c4a2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c49e:	f000 fe59 	bl	800d154 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c4a2:	7bbb      	ldrb	r3, [r7, #14]
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c4aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	dce9      	bgt.n	800c486 <prvUnlockQueue+0x60>
 800c4b2:	e000      	b.n	800c4b6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c4b4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	22ff      	movs	r2, #255	; 0xff
 800c4ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c4be:	f001 fde3 	bl	800e088 <vPortExitCritical>
}
 800c4c2:	bf00      	nop
 800c4c4:	3710      	adds	r7, #16
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}

0800c4ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c4ca:	b580      	push	{r7, lr}
 800c4cc:	b084      	sub	sp, #16
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4d2:	f001 fdab 	bl	800e02c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d102      	bne.n	800c4e4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c4de:	2301      	movs	r3, #1
 800c4e0:	60fb      	str	r3, [r7, #12]
 800c4e2:	e001      	b.n	800c4e8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c4e8:	f001 fdce 	bl	800e088 <vPortExitCritical>

	return xReturn;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3710      	adds	r7, #16
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}

0800c4f6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b084      	sub	sp, #16
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4fe:	f001 fd95 	bl	800e02c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d102      	bne.n	800c514 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c50e:	2301      	movs	r3, #1
 800c510:	60fb      	str	r3, [r7, #12]
 800c512:	e001      	b.n	800c518 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c514:	2300      	movs	r3, #0
 800c516:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c518:	f001 fdb6 	bl	800e088 <vPortExitCritical>

	return xReturn;
 800c51c:	68fb      	ldr	r3, [r7, #12]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
	...

0800c528 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c528:	b480      	push	{r7}
 800c52a:	b085      	sub	sp, #20
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c532:	2300      	movs	r3, #0
 800c534:	60fb      	str	r3, [r7, #12]
 800c536:	e014      	b.n	800c562 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c538:	4a0e      	ldr	r2, [pc, #56]	; (800c574 <vQueueAddToRegistry+0x4c>)
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d10b      	bne.n	800c55c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c544:	490b      	ldr	r1, [pc, #44]	; (800c574 <vQueueAddToRegistry+0x4c>)
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	683a      	ldr	r2, [r7, #0]
 800c54a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c54e:	4a09      	ldr	r2, [pc, #36]	; (800c574 <vQueueAddToRegistry+0x4c>)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	00db      	lsls	r3, r3, #3
 800c554:	4413      	add	r3, r2
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c55a:	e005      	b.n	800c568 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	3301      	adds	r3, #1
 800c560:	60fb      	str	r3, [r7, #12]
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2b07      	cmp	r3, #7
 800c566:	d9e7      	bls.n	800c538 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c568:	bf00      	nop
 800c56a:	3714      	adds	r7, #20
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr
 800c574:	24021c10 	.word	0x24021c10

0800c578 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b086      	sub	sp, #24
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c588:	f001 fd50 	bl	800e02c <vPortEnterCritical>
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c592:	b25b      	sxtb	r3, r3
 800c594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c598:	d103      	bne.n	800c5a2 <vQueueWaitForMessageRestricted+0x2a>
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	2200      	movs	r2, #0
 800c59e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5a8:	b25b      	sxtb	r3, r3
 800c5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ae:	d103      	bne.n	800c5b8 <vQueueWaitForMessageRestricted+0x40>
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5b8:	f001 fd66 	bl	800e088 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c5bc:	697b      	ldr	r3, [r7, #20]
 800c5be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d106      	bne.n	800c5d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	3324      	adds	r3, #36	; 0x24
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	68b9      	ldr	r1, [r7, #8]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f000 fcbf 	bl	800cf50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c5d2:	6978      	ldr	r0, [r7, #20]
 800c5d4:	f7ff ff27 	bl	800c426 <prvUnlockQueue>
	}
 800c5d8:	bf00      	nop
 800c5da:	3718      	adds	r7, #24
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b08e      	sub	sp, #56	; 0x38
 800c5e4:	af04      	add	r7, sp, #16
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	607a      	str	r2, [r7, #4]
 800c5ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c5ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d109      	bne.n	800c608 <xTaskCreateStatic+0x28>
	__asm volatile
 800c5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f8:	f383 8811 	msr	BASEPRI, r3
 800c5fc:	f3bf 8f6f 	isb	sy
 800c600:	f3bf 8f4f 	dsb	sy
 800c604:	623b      	str	r3, [r7, #32]
 800c606:	e7fe      	b.n	800c606 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800c608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d109      	bne.n	800c622 <xTaskCreateStatic+0x42>
 800c60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c612:	f383 8811 	msr	BASEPRI, r3
 800c616:	f3bf 8f6f 	isb	sy
 800c61a:	f3bf 8f4f 	dsb	sy
 800c61e:	61fb      	str	r3, [r7, #28]
 800c620:	e7fe      	b.n	800c620 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c622:	2354      	movs	r3, #84	; 0x54
 800c624:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	2b54      	cmp	r3, #84	; 0x54
 800c62a:	d009      	beq.n	800c640 <xTaskCreateStatic+0x60>
 800c62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c630:	f383 8811 	msr	BASEPRI, r3
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	61bb      	str	r3, [r7, #24]
 800c63e:	e7fe      	b.n	800c63e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c640:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c644:	2b00      	cmp	r3, #0
 800c646:	d01e      	beq.n	800c686 <xTaskCreateStatic+0xa6>
 800c648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d01b      	beq.n	800c686 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c650:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c656:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65a:	2202      	movs	r2, #2
 800c65c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c660:	2300      	movs	r3, #0
 800c662:	9303      	str	r3, [sp, #12]
 800c664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c666:	9302      	str	r3, [sp, #8]
 800c668:	f107 0314 	add.w	r3, r7, #20
 800c66c:	9301      	str	r3, [sp, #4]
 800c66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c670:	9300      	str	r3, [sp, #0]
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	68b9      	ldr	r1, [r7, #8]
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f000 f850 	bl	800c71e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c67e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c680:	f000 f8d4 	bl	800c82c <prvAddNewTaskToReadyList>
 800c684:	e001      	b.n	800c68a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800c686:	2300      	movs	r3, #0
 800c688:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c68a:	697b      	ldr	r3, [r7, #20]
	}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3728      	adds	r7, #40	; 0x28
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c694:	b580      	push	{r7, lr}
 800c696:	b08c      	sub	sp, #48	; 0x30
 800c698:	af04      	add	r7, sp, #16
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	60b9      	str	r1, [r7, #8]
 800c69e:	603b      	str	r3, [r7, #0]
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c6a4:	88fb      	ldrh	r3, [r7, #6]
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f001 fdd9 	bl	800e260 <pvPortMalloc>
 800c6ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d00e      	beq.n	800c6d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c6b6:	2054      	movs	r0, #84	; 0x54
 800c6b8:	f001 fdd2 	bl	800e260 <pvPortMalloc>
 800c6bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c6be:	69fb      	ldr	r3, [r7, #28]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d003      	beq.n	800c6cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	697a      	ldr	r2, [r7, #20]
 800c6c8:	631a      	str	r2, [r3, #48]	; 0x30
 800c6ca:	e005      	b.n	800c6d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c6cc:	6978      	ldr	r0, [r7, #20]
 800c6ce:	f001 fe89 	bl	800e3e4 <vPortFree>
 800c6d2:	e001      	b.n	800c6d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d017      	beq.n	800c70e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c6de:	69fb      	ldr	r3, [r7, #28]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c6e6:	88fa      	ldrh	r2, [r7, #6]
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	9303      	str	r3, [sp, #12]
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	9302      	str	r3, [sp, #8]
 800c6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f2:	9301      	str	r3, [sp, #4]
 800c6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f6:	9300      	str	r3, [sp, #0]
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	68b9      	ldr	r1, [r7, #8]
 800c6fc:	68f8      	ldr	r0, [r7, #12]
 800c6fe:	f000 f80e 	bl	800c71e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c702:	69f8      	ldr	r0, [r7, #28]
 800c704:	f000 f892 	bl	800c82c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c708:	2301      	movs	r3, #1
 800c70a:	61bb      	str	r3, [r7, #24]
 800c70c:	e002      	b.n	800c714 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c70e:	f04f 33ff 	mov.w	r3, #4294967295
 800c712:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c714:	69bb      	ldr	r3, [r7, #24]
	}
 800c716:	4618      	mov	r0, r3
 800c718:	3720      	adds	r7, #32
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}

0800c71e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c71e:	b580      	push	{r7, lr}
 800c720:	b088      	sub	sp, #32
 800c722:	af00      	add	r7, sp, #0
 800c724:	60f8      	str	r0, [r7, #12]
 800c726:	60b9      	str	r1, [r7, #8]
 800c728:	607a      	str	r2, [r7, #4]
 800c72a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c730:	6879      	ldr	r1, [r7, #4]
 800c732:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c736:	440b      	add	r3, r1
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	4413      	add	r3, r2
 800c73c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c73e:	69bb      	ldr	r3, [r7, #24]
 800c740:	f023 0307 	bic.w	r3, r3, #7
 800c744:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c746:	69bb      	ldr	r3, [r7, #24]
 800c748:	f003 0307 	and.w	r3, r3, #7
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d009      	beq.n	800c764 <prvInitialiseNewTask+0x46>
 800c750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c754:	f383 8811 	msr	BASEPRI, r3
 800c758:	f3bf 8f6f 	isb	sy
 800c75c:	f3bf 8f4f 	dsb	sy
 800c760:	617b      	str	r3, [r7, #20]
 800c762:	e7fe      	b.n	800c762 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d01f      	beq.n	800c7aa <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c76a:	2300      	movs	r3, #0
 800c76c:	61fb      	str	r3, [r7, #28]
 800c76e:	e012      	b.n	800c796 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c770:	68ba      	ldr	r2, [r7, #8]
 800c772:	69fb      	ldr	r3, [r7, #28]
 800c774:	4413      	add	r3, r2
 800c776:	7819      	ldrb	r1, [r3, #0]
 800c778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c77a:	69fb      	ldr	r3, [r7, #28]
 800c77c:	4413      	add	r3, r2
 800c77e:	3334      	adds	r3, #52	; 0x34
 800c780:	460a      	mov	r2, r1
 800c782:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c784:	68ba      	ldr	r2, [r7, #8]
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	4413      	add	r3, r2
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d006      	beq.n	800c79e <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c790:	69fb      	ldr	r3, [r7, #28]
 800c792:	3301      	adds	r3, #1
 800c794:	61fb      	str	r3, [r7, #28]
 800c796:	69fb      	ldr	r3, [r7, #28]
 800c798:	2b0f      	cmp	r3, #15
 800c79a:	d9e9      	bls.n	800c770 <prvInitialiseNewTask+0x52>
 800c79c:	e000      	b.n	800c7a0 <prvInitialiseNewTask+0x82>
			{
				break;
 800c79e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c7a8:	e003      	b.n	800c7b2 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b4:	2b06      	cmp	r3, #6
 800c7b6:	d901      	bls.n	800c7bc <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c7b8:	2306      	movs	r3, #6
 800c7ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7c6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d0:	3304      	adds	r3, #4
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7fe fe86 	bl	800b4e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7da:	3318      	adds	r3, #24
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7fe fe81 	bl	800b4e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ea:	f1c3 0207 	rsb	r2, r3, #7
 800c7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c800:	2200      	movs	r2, #0
 800c802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c806:	683a      	ldr	r2, [r7, #0]
 800c808:	68f9      	ldr	r1, [r7, #12]
 800c80a:	69b8      	ldr	r0, [r7, #24]
 800c80c:	f001 fae4 	bl	800ddd8 <pxPortInitialiseStack>
 800c810:	4602      	mov	r2, r0
 800c812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c814:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d002      	beq.n	800c822 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c820:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c822:	bf00      	nop
 800c824:	3720      	adds	r7, #32
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
	...

0800c82c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c834:	f001 fbfa 	bl	800e02c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c838:	4b2a      	ldr	r3, [pc, #168]	; (800c8e4 <prvAddNewTaskToReadyList+0xb8>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	3301      	adds	r3, #1
 800c83e:	4a29      	ldr	r2, [pc, #164]	; (800c8e4 <prvAddNewTaskToReadyList+0xb8>)
 800c840:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c842:	4b29      	ldr	r3, [pc, #164]	; (800c8e8 <prvAddNewTaskToReadyList+0xbc>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d109      	bne.n	800c85e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c84a:	4a27      	ldr	r2, [pc, #156]	; (800c8e8 <prvAddNewTaskToReadyList+0xbc>)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c850:	4b24      	ldr	r3, [pc, #144]	; (800c8e4 <prvAddNewTaskToReadyList+0xb8>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	2b01      	cmp	r3, #1
 800c856:	d110      	bne.n	800c87a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c858:	f000 fca2 	bl	800d1a0 <prvInitialiseTaskLists>
 800c85c:	e00d      	b.n	800c87a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c85e:	4b23      	ldr	r3, [pc, #140]	; (800c8ec <prvAddNewTaskToReadyList+0xc0>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d109      	bne.n	800c87a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c866:	4b20      	ldr	r3, [pc, #128]	; (800c8e8 <prvAddNewTaskToReadyList+0xbc>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c870:	429a      	cmp	r2, r3
 800c872:	d802      	bhi.n	800c87a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c874:	4a1c      	ldr	r2, [pc, #112]	; (800c8e8 <prvAddNewTaskToReadyList+0xbc>)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c87a:	4b1d      	ldr	r3, [pc, #116]	; (800c8f0 <prvAddNewTaskToReadyList+0xc4>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	3301      	adds	r3, #1
 800c880:	4a1b      	ldr	r2, [pc, #108]	; (800c8f0 <prvAddNewTaskToReadyList+0xc4>)
 800c882:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c888:	2201      	movs	r2, #1
 800c88a:	409a      	lsls	r2, r3
 800c88c:	4b19      	ldr	r3, [pc, #100]	; (800c8f4 <prvAddNewTaskToReadyList+0xc8>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4313      	orrs	r3, r2
 800c892:	4a18      	ldr	r2, [pc, #96]	; (800c8f4 <prvAddNewTaskToReadyList+0xc8>)
 800c894:	6013      	str	r3, [r2, #0]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c89a:	4613      	mov	r3, r2
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	4413      	add	r3, r2
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	4a15      	ldr	r2, [pc, #84]	; (800c8f8 <prvAddNewTaskToReadyList+0xcc>)
 800c8a4:	441a      	add	r2, r3
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	3304      	adds	r3, #4
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	4610      	mov	r0, r2
 800c8ae:	f7fe fe26 	bl	800b4fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c8b2:	f001 fbe9 	bl	800e088 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c8b6:	4b0d      	ldr	r3, [pc, #52]	; (800c8ec <prvAddNewTaskToReadyList+0xc0>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d00e      	beq.n	800c8dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c8be:	4b0a      	ldr	r3, [pc, #40]	; (800c8e8 <prvAddNewTaskToReadyList+0xbc>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	d207      	bcs.n	800c8dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c8cc:	4b0b      	ldr	r3, [pc, #44]	; (800c8fc <prvAddNewTaskToReadyList+0xd0>)
 800c8ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8d2:	601a      	str	r2, [r3, #0]
 800c8d4:	f3bf 8f4f 	dsb	sy
 800c8d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8dc:	bf00      	nop
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}
 800c8e4:	24002260 	.word	0x24002260
 800c8e8:	24002160 	.word	0x24002160
 800c8ec:	2400226c 	.word	0x2400226c
 800c8f0:	2400227c 	.word	0x2400227c
 800c8f4:	24002268 	.word	0x24002268
 800c8f8:	24002164 	.word	0x24002164
 800c8fc:	e000ed04 	.word	0xe000ed04

0800c900 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c908:	f001 fb90 	bl	800e02c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d102      	bne.n	800c918 <vTaskDelete+0x18>
 800c912:	4b38      	ldr	r3, [pc, #224]	; (800c9f4 <vTaskDelete+0xf4>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	e000      	b.n	800c91a <vTaskDelete+0x1a>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	3304      	adds	r3, #4
 800c920:	4618      	mov	r0, r3
 800c922:	f7fe fe49 	bl	800b5b8 <uxListRemove>
 800c926:	4603      	mov	r3, r0
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d115      	bne.n	800c958 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c930:	4931      	ldr	r1, [pc, #196]	; (800c9f8 <vTaskDelete+0xf8>)
 800c932:	4613      	mov	r3, r2
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	4413      	add	r3, r2
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	440b      	add	r3, r1
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d10a      	bne.n	800c958 <vTaskDelete+0x58>
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c946:	2201      	movs	r2, #1
 800c948:	fa02 f303 	lsl.w	r3, r2, r3
 800c94c:	43da      	mvns	r2, r3
 800c94e:	4b2b      	ldr	r3, [pc, #172]	; (800c9fc <vTaskDelete+0xfc>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4013      	ands	r3, r2
 800c954:	4a29      	ldr	r2, [pc, #164]	; (800c9fc <vTaskDelete+0xfc>)
 800c956:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d004      	beq.n	800c96a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	3318      	adds	r3, #24
 800c964:	4618      	mov	r0, r3
 800c966:	f7fe fe27 	bl	800b5b8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c96a:	4b25      	ldr	r3, [pc, #148]	; (800ca00 <vTaskDelete+0x100>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	3301      	adds	r3, #1
 800c970:	4a23      	ldr	r2, [pc, #140]	; (800ca00 <vTaskDelete+0x100>)
 800c972:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c974:	4b1f      	ldr	r3, [pc, #124]	; (800c9f4 <vTaskDelete+0xf4>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	68fa      	ldr	r2, [r7, #12]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d10b      	bne.n	800c996 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	3304      	adds	r3, #4
 800c982:	4619      	mov	r1, r3
 800c984:	481f      	ldr	r0, [pc, #124]	; (800ca04 <vTaskDelete+0x104>)
 800c986:	f7fe fdba 	bl	800b4fe <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c98a:	4b1f      	ldr	r3, [pc, #124]	; (800ca08 <vTaskDelete+0x108>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	3301      	adds	r3, #1
 800c990:	4a1d      	ldr	r2, [pc, #116]	; (800ca08 <vTaskDelete+0x108>)
 800c992:	6013      	str	r3, [r2, #0]
 800c994:	e009      	b.n	800c9aa <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c996:	4b1d      	ldr	r3, [pc, #116]	; (800ca0c <vTaskDelete+0x10c>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	3b01      	subs	r3, #1
 800c99c:	4a1b      	ldr	r2, [pc, #108]	; (800ca0c <vTaskDelete+0x10c>)
 800c99e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800c9a0:	68f8      	ldr	r0, [r7, #12]
 800c9a2:	f000 fc69 	bl	800d278 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c9a6:	f000 fc95 	bl	800d2d4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800c9aa:	f001 fb6d 	bl	800e088 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c9ae:	4b18      	ldr	r3, [pc, #96]	; (800ca10 <vTaskDelete+0x110>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d01a      	beq.n	800c9ec <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 800c9b6:	4b0f      	ldr	r3, [pc, #60]	; (800c9f4 <vTaskDelete+0xf4>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	68fa      	ldr	r2, [r7, #12]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d115      	bne.n	800c9ec <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c9c0:	4b14      	ldr	r3, [pc, #80]	; (800ca14 <vTaskDelete+0x114>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d009      	beq.n	800c9dc <vTaskDelete+0xdc>
 800c9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9cc:	f383 8811 	msr	BASEPRI, r3
 800c9d0:	f3bf 8f6f 	isb	sy
 800c9d4:	f3bf 8f4f 	dsb	sy
 800c9d8:	60bb      	str	r3, [r7, #8]
 800c9da:	e7fe      	b.n	800c9da <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 800c9dc:	4b0e      	ldr	r3, [pc, #56]	; (800ca18 <vTaskDelete+0x118>)
 800c9de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9e2:	601a      	str	r2, [r3, #0]
 800c9e4:	f3bf 8f4f 	dsb	sy
 800c9e8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c9ec:	bf00      	nop
 800c9ee:	3710      	adds	r7, #16
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	24002160 	.word	0x24002160
 800c9f8:	24002164 	.word	0x24002164
 800c9fc:	24002268 	.word	0x24002268
 800ca00:	2400227c 	.word	0x2400227c
 800ca04:	24002234 	.word	0x24002234
 800ca08:	24002248 	.word	0x24002248
 800ca0c:	24002260 	.word	0x24002260
 800ca10:	2400226c 	.word	0x2400226c
 800ca14:	24002288 	.word	0x24002288
 800ca18:	e000ed04 	.word	0xe000ed04

0800ca1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ca24:	2300      	movs	r3, #0
 800ca26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d016      	beq.n	800ca5c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ca2e:	4b13      	ldr	r3, [pc, #76]	; (800ca7c <vTaskDelay+0x60>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d009      	beq.n	800ca4a <vTaskDelay+0x2e>
 800ca36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3a:	f383 8811 	msr	BASEPRI, r3
 800ca3e:	f3bf 8f6f 	isb	sy
 800ca42:	f3bf 8f4f 	dsb	sy
 800ca46:	60bb      	str	r3, [r7, #8]
 800ca48:	e7fe      	b.n	800ca48 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800ca4a:	f000 f87f 	bl	800cb4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ca4e:	2100      	movs	r1, #0
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 fe2d 	bl	800d6b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ca56:	f000 f887 	bl	800cb68 <xTaskResumeAll>
 800ca5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d107      	bne.n	800ca72 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800ca62:	4b07      	ldr	r3, [pc, #28]	; (800ca80 <vTaskDelay+0x64>)
 800ca64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca68:	601a      	str	r2, [r3, #0]
 800ca6a:	f3bf 8f4f 	dsb	sy
 800ca6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ca72:	bf00      	nop
 800ca74:	3710      	adds	r7, #16
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	24002288 	.word	0x24002288
 800ca80:	e000ed04 	.word	0xe000ed04

0800ca84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b08a      	sub	sp, #40	; 0x28
 800ca88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ca92:	463a      	mov	r2, r7
 800ca94:	1d39      	adds	r1, r7, #4
 800ca96:	f107 0308 	add.w	r3, r7, #8
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f7f3 fdf8 	bl	8000690 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800caa0:	6839      	ldr	r1, [r7, #0]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	68ba      	ldr	r2, [r7, #8]
 800caa6:	9202      	str	r2, [sp, #8]
 800caa8:	9301      	str	r3, [sp, #4]
 800caaa:	2300      	movs	r3, #0
 800caac:	9300      	str	r3, [sp, #0]
 800caae:	2300      	movs	r3, #0
 800cab0:	460a      	mov	r2, r1
 800cab2:	4920      	ldr	r1, [pc, #128]	; (800cb34 <vTaskStartScheduler+0xb0>)
 800cab4:	4820      	ldr	r0, [pc, #128]	; (800cb38 <vTaskStartScheduler+0xb4>)
 800cab6:	f7ff fd93 	bl	800c5e0 <xTaskCreateStatic>
 800caba:	4602      	mov	r2, r0
 800cabc:	4b1f      	ldr	r3, [pc, #124]	; (800cb3c <vTaskStartScheduler+0xb8>)
 800cabe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cac0:	4b1e      	ldr	r3, [pc, #120]	; (800cb3c <vTaskStartScheduler+0xb8>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d002      	beq.n	800cace <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cac8:	2301      	movs	r3, #1
 800caca:	617b      	str	r3, [r7, #20]
 800cacc:	e001      	b.n	800cad2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cace:	2300      	movs	r3, #0
 800cad0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d102      	bne.n	800cade <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cad8:	f000 fe50 	bl	800d77c <xTimerCreateTimerTask>
 800cadc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	d115      	bne.n	800cb10 <vTaskStartScheduler+0x8c>
 800cae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae8:	f383 8811 	msr	BASEPRI, r3
 800caec:	f3bf 8f6f 	isb	sy
 800caf0:	f3bf 8f4f 	dsb	sy
 800caf4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800caf6:	4b12      	ldr	r3, [pc, #72]	; (800cb40 <vTaskStartScheduler+0xbc>)
 800caf8:	f04f 32ff 	mov.w	r2, #4294967295
 800cafc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cafe:	4b11      	ldr	r3, [pc, #68]	; (800cb44 <vTaskStartScheduler+0xc0>)
 800cb00:	2201      	movs	r2, #1
 800cb02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cb04:	4b10      	ldr	r3, [pc, #64]	; (800cb48 <vTaskStartScheduler+0xc4>)
 800cb06:	2200      	movs	r2, #0
 800cb08:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cb0a:	f001 f9f1 	bl	800def0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cb0e:	e00d      	b.n	800cb2c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb16:	d109      	bne.n	800cb2c <vTaskStartScheduler+0xa8>
 800cb18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb1c:	f383 8811 	msr	BASEPRI, r3
 800cb20:	f3bf 8f6f 	isb	sy
 800cb24:	f3bf 8f4f 	dsb	sy
 800cb28:	60fb      	str	r3, [r7, #12]
 800cb2a:	e7fe      	b.n	800cb2a <vTaskStartScheduler+0xa6>
}
 800cb2c:	bf00      	nop
 800cb2e:	3718      	adds	r7, #24
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	08018ad4 	.word	0x08018ad4
 800cb38:	0800d16d 	.word	0x0800d16d
 800cb3c:	24002284 	.word	0x24002284
 800cb40:	24002280 	.word	0x24002280
 800cb44:	2400226c 	.word	0x2400226c
 800cb48:	24002264 	.word	0x24002264

0800cb4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cb50:	4b04      	ldr	r3, [pc, #16]	; (800cb64 <vTaskSuspendAll+0x18>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	3301      	adds	r3, #1
 800cb56:	4a03      	ldr	r2, [pc, #12]	; (800cb64 <vTaskSuspendAll+0x18>)
 800cb58:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cb5a:	bf00      	nop
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr
 800cb64:	24002288 	.word	0x24002288

0800cb68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cb72:	2300      	movs	r3, #0
 800cb74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cb76:	4b41      	ldr	r3, [pc, #260]	; (800cc7c <xTaskResumeAll+0x114>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d109      	bne.n	800cb92 <xTaskResumeAll+0x2a>
 800cb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb82:	f383 8811 	msr	BASEPRI, r3
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	603b      	str	r3, [r7, #0]
 800cb90:	e7fe      	b.n	800cb90 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cb92:	f001 fa4b 	bl	800e02c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cb96:	4b39      	ldr	r3, [pc, #228]	; (800cc7c <xTaskResumeAll+0x114>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	3b01      	subs	r3, #1
 800cb9c:	4a37      	ldr	r2, [pc, #220]	; (800cc7c <xTaskResumeAll+0x114>)
 800cb9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cba0:	4b36      	ldr	r3, [pc, #216]	; (800cc7c <xTaskResumeAll+0x114>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d161      	bne.n	800cc6c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cba8:	4b35      	ldr	r3, [pc, #212]	; (800cc80 <xTaskResumeAll+0x118>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d05d      	beq.n	800cc6c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cbb0:	e02e      	b.n	800cc10 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbb2:	4b34      	ldr	r3, [pc, #208]	; (800cc84 <xTaskResumeAll+0x11c>)
 800cbb4:	68db      	ldr	r3, [r3, #12]
 800cbb6:	68db      	ldr	r3, [r3, #12]
 800cbb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	3318      	adds	r3, #24
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7fe fcfa 	bl	800b5b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	3304      	adds	r3, #4
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7fe fcf5 	bl	800b5b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	409a      	lsls	r2, r3
 800cbd6:	4b2c      	ldr	r3, [pc, #176]	; (800cc88 <xTaskResumeAll+0x120>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	4a2a      	ldr	r2, [pc, #168]	; (800cc88 <xTaskResumeAll+0x120>)
 800cbde:	6013      	str	r3, [r2, #0]
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe4:	4613      	mov	r3, r2
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	4413      	add	r3, r2
 800cbea:	009b      	lsls	r3, r3, #2
 800cbec:	4a27      	ldr	r2, [pc, #156]	; (800cc8c <xTaskResumeAll+0x124>)
 800cbee:	441a      	add	r2, r3
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	3304      	adds	r3, #4
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	4610      	mov	r0, r2
 800cbf8:	f7fe fc81 	bl	800b4fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc00:	4b23      	ldr	r3, [pc, #140]	; (800cc90 <xTaskResumeAll+0x128>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d302      	bcc.n	800cc10 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800cc0a:	4b22      	ldr	r3, [pc, #136]	; (800cc94 <xTaskResumeAll+0x12c>)
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc10:	4b1c      	ldr	r3, [pc, #112]	; (800cc84 <xTaskResumeAll+0x11c>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d1cc      	bne.n	800cbb2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d001      	beq.n	800cc22 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cc1e:	f000 fb59 	bl	800d2d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cc22:	4b1d      	ldr	r3, [pc, #116]	; (800cc98 <xTaskResumeAll+0x130>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d010      	beq.n	800cc50 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cc2e:	f000 f859 	bl	800cce4 <xTaskIncrementTick>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d002      	beq.n	800cc3e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800cc38:	4b16      	ldr	r3, [pc, #88]	; (800cc94 <xTaskResumeAll+0x12c>)
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	3b01      	subs	r3, #1
 800cc42:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d1f1      	bne.n	800cc2e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800cc4a:	4b13      	ldr	r3, [pc, #76]	; (800cc98 <xTaskResumeAll+0x130>)
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cc50:	4b10      	ldr	r3, [pc, #64]	; (800cc94 <xTaskResumeAll+0x12c>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d009      	beq.n	800cc6c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cc5c:	4b0f      	ldr	r3, [pc, #60]	; (800cc9c <xTaskResumeAll+0x134>)
 800cc5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc62:	601a      	str	r2, [r3, #0]
 800cc64:	f3bf 8f4f 	dsb	sy
 800cc68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc6c:	f001 fa0c 	bl	800e088 <vPortExitCritical>

	return xAlreadyYielded;
 800cc70:	68bb      	ldr	r3, [r7, #8]
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3710      	adds	r7, #16
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	24002288 	.word	0x24002288
 800cc80:	24002260 	.word	0x24002260
 800cc84:	24002220 	.word	0x24002220
 800cc88:	24002268 	.word	0x24002268
 800cc8c:	24002164 	.word	0x24002164
 800cc90:	24002160 	.word	0x24002160
 800cc94:	24002274 	.word	0x24002274
 800cc98:	24002270 	.word	0x24002270
 800cc9c:	e000ed04 	.word	0xe000ed04

0800cca0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cca0:	b480      	push	{r7}
 800cca2:	b083      	sub	sp, #12
 800cca4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cca6:	4b05      	ldr	r3, [pc, #20]	; (800ccbc <xTaskGetTickCount+0x1c>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ccac:	687b      	ldr	r3, [r7, #4]
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	370c      	adds	r7, #12
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr
 800ccba:	bf00      	nop
 800ccbc:	24002264 	.word	0x24002264

0800ccc0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ccc6:	f001 fa8d 	bl	800e1e4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ccca:	2300      	movs	r3, #0
 800cccc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ccce:	4b04      	ldr	r3, [pc, #16]	; (800cce0 <xTaskGetTickCountFromISR+0x20>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ccd4:	683b      	ldr	r3, [r7, #0]
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	24002264 	.word	0x24002264

0800cce4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b086      	sub	sp, #24
 800cce8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ccea:	2300      	movs	r3, #0
 800ccec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccee:	4b4e      	ldr	r3, [pc, #312]	; (800ce28 <xTaskIncrementTick+0x144>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	f040 8087 	bne.w	800ce06 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ccf8:	4b4c      	ldr	r3, [pc, #304]	; (800ce2c <xTaskIncrementTick+0x148>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	3301      	adds	r3, #1
 800ccfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cd00:	4a4a      	ldr	r2, [pc, #296]	; (800ce2c <xTaskIncrementTick+0x148>)
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d11f      	bne.n	800cd4c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800cd0c:	4b48      	ldr	r3, [pc, #288]	; (800ce30 <xTaskIncrementTick+0x14c>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d009      	beq.n	800cd2a <xTaskIncrementTick+0x46>
 800cd16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd1a:	f383 8811 	msr	BASEPRI, r3
 800cd1e:	f3bf 8f6f 	isb	sy
 800cd22:	f3bf 8f4f 	dsb	sy
 800cd26:	603b      	str	r3, [r7, #0]
 800cd28:	e7fe      	b.n	800cd28 <xTaskIncrementTick+0x44>
 800cd2a:	4b41      	ldr	r3, [pc, #260]	; (800ce30 <xTaskIncrementTick+0x14c>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	60fb      	str	r3, [r7, #12]
 800cd30:	4b40      	ldr	r3, [pc, #256]	; (800ce34 <xTaskIncrementTick+0x150>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a3e      	ldr	r2, [pc, #248]	; (800ce30 <xTaskIncrementTick+0x14c>)
 800cd36:	6013      	str	r3, [r2, #0]
 800cd38:	4a3e      	ldr	r2, [pc, #248]	; (800ce34 <xTaskIncrementTick+0x150>)
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	6013      	str	r3, [r2, #0]
 800cd3e:	4b3e      	ldr	r3, [pc, #248]	; (800ce38 <xTaskIncrementTick+0x154>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	3301      	adds	r3, #1
 800cd44:	4a3c      	ldr	r2, [pc, #240]	; (800ce38 <xTaskIncrementTick+0x154>)
 800cd46:	6013      	str	r3, [r2, #0]
 800cd48:	f000 fac4 	bl	800d2d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cd4c:	4b3b      	ldr	r3, [pc, #236]	; (800ce3c <xTaskIncrementTick+0x158>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	693a      	ldr	r2, [r7, #16]
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d348      	bcc.n	800cde8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd56:	4b36      	ldr	r3, [pc, #216]	; (800ce30 <xTaskIncrementTick+0x14c>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d104      	bne.n	800cd6a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd60:	4b36      	ldr	r3, [pc, #216]	; (800ce3c <xTaskIncrementTick+0x158>)
 800cd62:	f04f 32ff 	mov.w	r2, #4294967295
 800cd66:	601a      	str	r2, [r3, #0]
					break;
 800cd68:	e03e      	b.n	800cde8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd6a:	4b31      	ldr	r3, [pc, #196]	; (800ce30 <xTaskIncrementTick+0x14c>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	68db      	ldr	r3, [r3, #12]
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cd7a:	693a      	ldr	r2, [r7, #16]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d203      	bcs.n	800cd8a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cd82:	4a2e      	ldr	r2, [pc, #184]	; (800ce3c <xTaskIncrementTick+0x158>)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cd88:	e02e      	b.n	800cde8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	3304      	adds	r3, #4
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7fe fc12 	bl	800b5b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d004      	beq.n	800cda6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	3318      	adds	r3, #24
 800cda0:	4618      	mov	r0, r3
 800cda2:	f7fe fc09 	bl	800b5b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdaa:	2201      	movs	r2, #1
 800cdac:	409a      	lsls	r2, r3
 800cdae:	4b24      	ldr	r3, [pc, #144]	; (800ce40 <xTaskIncrementTick+0x15c>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	4313      	orrs	r3, r2
 800cdb4:	4a22      	ldr	r2, [pc, #136]	; (800ce40 <xTaskIncrementTick+0x15c>)
 800cdb6:	6013      	str	r3, [r2, #0]
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdbc:	4613      	mov	r3, r2
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	4413      	add	r3, r2
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	4a1f      	ldr	r2, [pc, #124]	; (800ce44 <xTaskIncrementTick+0x160>)
 800cdc6:	441a      	add	r2, r3
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	3304      	adds	r3, #4
 800cdcc:	4619      	mov	r1, r3
 800cdce:	4610      	mov	r0, r2
 800cdd0:	f7fe fb95 	bl	800b4fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdd8:	4b1b      	ldr	r3, [pc, #108]	; (800ce48 <xTaskIncrementTick+0x164>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d3b9      	bcc.n	800cd56 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800cde2:	2301      	movs	r3, #1
 800cde4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cde6:	e7b6      	b.n	800cd56 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cde8:	4b17      	ldr	r3, [pc, #92]	; (800ce48 <xTaskIncrementTick+0x164>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdee:	4915      	ldr	r1, [pc, #84]	; (800ce44 <xTaskIncrementTick+0x160>)
 800cdf0:	4613      	mov	r3, r2
 800cdf2:	009b      	lsls	r3, r3, #2
 800cdf4:	4413      	add	r3, r2
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	440b      	add	r3, r1
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d907      	bls.n	800ce10 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800ce00:	2301      	movs	r3, #1
 800ce02:	617b      	str	r3, [r7, #20]
 800ce04:	e004      	b.n	800ce10 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ce06:	4b11      	ldr	r3, [pc, #68]	; (800ce4c <xTaskIncrementTick+0x168>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	4a0f      	ldr	r2, [pc, #60]	; (800ce4c <xTaskIncrementTick+0x168>)
 800ce0e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ce10:	4b0f      	ldr	r3, [pc, #60]	; (800ce50 <xTaskIncrementTick+0x16c>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d001      	beq.n	800ce1c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800ce18:	2301      	movs	r3, #1
 800ce1a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ce1c:	697b      	ldr	r3, [r7, #20]
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3718      	adds	r7, #24
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	24002288 	.word	0x24002288
 800ce2c:	24002264 	.word	0x24002264
 800ce30:	24002218 	.word	0x24002218
 800ce34:	2400221c 	.word	0x2400221c
 800ce38:	24002278 	.word	0x24002278
 800ce3c:	24002280 	.word	0x24002280
 800ce40:	24002268 	.word	0x24002268
 800ce44:	24002164 	.word	0x24002164
 800ce48:	24002160 	.word	0x24002160
 800ce4c:	24002270 	.word	0x24002270
 800ce50:	24002274 	.word	0x24002274

0800ce54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ce54:	b480      	push	{r7}
 800ce56:	b087      	sub	sp, #28
 800ce58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ce5a:	4b26      	ldr	r3, [pc, #152]	; (800cef4 <vTaskSwitchContext+0xa0>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d003      	beq.n	800ce6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ce62:	4b25      	ldr	r3, [pc, #148]	; (800cef8 <vTaskSwitchContext+0xa4>)
 800ce64:	2201      	movs	r2, #1
 800ce66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ce68:	e03e      	b.n	800cee8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800ce6a:	4b23      	ldr	r3, [pc, #140]	; (800cef8 <vTaskSwitchContext+0xa4>)
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce70:	4b22      	ldr	r3, [pc, #136]	; (800cefc <vTaskSwitchContext+0xa8>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	fab3 f383 	clz	r3, r3
 800ce7c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ce7e:	7afb      	ldrb	r3, [r7, #11]
 800ce80:	f1c3 031f 	rsb	r3, r3, #31
 800ce84:	617b      	str	r3, [r7, #20]
 800ce86:	491e      	ldr	r1, [pc, #120]	; (800cf00 <vTaskSwitchContext+0xac>)
 800ce88:	697a      	ldr	r2, [r7, #20]
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	4413      	add	r3, r2
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	440b      	add	r3, r1
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d109      	bne.n	800ceae <vTaskSwitchContext+0x5a>
	__asm volatile
 800ce9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9e:	f383 8811 	msr	BASEPRI, r3
 800cea2:	f3bf 8f6f 	isb	sy
 800cea6:	f3bf 8f4f 	dsb	sy
 800ceaa:	607b      	str	r3, [r7, #4]
 800ceac:	e7fe      	b.n	800ceac <vTaskSwitchContext+0x58>
 800ceae:	697a      	ldr	r2, [r7, #20]
 800ceb0:	4613      	mov	r3, r2
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	4413      	add	r3, r2
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	4a11      	ldr	r2, [pc, #68]	; (800cf00 <vTaskSwitchContext+0xac>)
 800ceba:	4413      	add	r3, r2
 800cebc:	613b      	str	r3, [r7, #16]
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	685b      	ldr	r3, [r3, #4]
 800cec2:	685a      	ldr	r2, [r3, #4]
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	605a      	str	r2, [r3, #4]
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	685a      	ldr	r2, [r3, #4]
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	3308      	adds	r3, #8
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d104      	bne.n	800cede <vTaskSwitchContext+0x8a>
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	685a      	ldr	r2, [r3, #4]
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	605a      	str	r2, [r3, #4]
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	68db      	ldr	r3, [r3, #12]
 800cee4:	4a07      	ldr	r2, [pc, #28]	; (800cf04 <vTaskSwitchContext+0xb0>)
 800cee6:	6013      	str	r3, [r2, #0]
}
 800cee8:	bf00      	nop
 800ceea:	371c      	adds	r7, #28
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr
 800cef4:	24002288 	.word	0x24002288
 800cef8:	24002274 	.word	0x24002274
 800cefc:	24002268 	.word	0x24002268
 800cf00:	24002164 	.word	0x24002164
 800cf04:	24002160 	.word	0x24002160

0800cf08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d109      	bne.n	800cf2c <vTaskPlaceOnEventList+0x24>
 800cf18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1c:	f383 8811 	msr	BASEPRI, r3
 800cf20:	f3bf 8f6f 	isb	sy
 800cf24:	f3bf 8f4f 	dsb	sy
 800cf28:	60fb      	str	r3, [r7, #12]
 800cf2a:	e7fe      	b.n	800cf2a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf2c:	4b07      	ldr	r3, [pc, #28]	; (800cf4c <vTaskPlaceOnEventList+0x44>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	3318      	adds	r3, #24
 800cf32:	4619      	mov	r1, r3
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f7fe fb06 	bl	800b546 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cf3a:	2101      	movs	r1, #1
 800cf3c:	6838      	ldr	r0, [r7, #0]
 800cf3e:	f000 fbb7 	bl	800d6b0 <prvAddCurrentTaskToDelayedList>
}
 800cf42:	bf00      	nop
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	24002160 	.word	0x24002160

0800cf50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b086      	sub	sp, #24
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	60b9      	str	r1, [r7, #8]
 800cf5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d109      	bne.n	800cf76 <vTaskPlaceOnEventListRestricted+0x26>
 800cf62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf66:	f383 8811 	msr	BASEPRI, r3
 800cf6a:	f3bf 8f6f 	isb	sy
 800cf6e:	f3bf 8f4f 	dsb	sy
 800cf72:	617b      	str	r3, [r7, #20]
 800cf74:	e7fe      	b.n	800cf74 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf76:	4b0a      	ldr	r3, [pc, #40]	; (800cfa0 <vTaskPlaceOnEventListRestricted+0x50>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	3318      	adds	r3, #24
 800cf7c:	4619      	mov	r1, r3
 800cf7e:	68f8      	ldr	r0, [r7, #12]
 800cf80:	f7fe fabd 	bl	800b4fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d002      	beq.n	800cf90 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800cf8a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf8e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cf90:	6879      	ldr	r1, [r7, #4]
 800cf92:	68b8      	ldr	r0, [r7, #8]
 800cf94:	f000 fb8c 	bl	800d6b0 <prvAddCurrentTaskToDelayedList>
	}
 800cf98:	bf00      	nop
 800cf9a:	3718      	adds	r7, #24
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}
 800cfa0:	24002160 	.word	0x24002160

0800cfa4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b086      	sub	sp, #24
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	68db      	ldr	r3, [r3, #12]
 800cfb0:	68db      	ldr	r3, [r3, #12]
 800cfb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d109      	bne.n	800cfce <xTaskRemoveFromEventList+0x2a>
 800cfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfbe:	f383 8811 	msr	BASEPRI, r3
 800cfc2:	f3bf 8f6f 	isb	sy
 800cfc6:	f3bf 8f4f 	dsb	sy
 800cfca:	60fb      	str	r3, [r7, #12]
 800cfcc:	e7fe      	b.n	800cfcc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	3318      	adds	r3, #24
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7fe faf0 	bl	800b5b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfd8:	4b1d      	ldr	r3, [pc, #116]	; (800d050 <xTaskRemoveFromEventList+0xac>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d11c      	bne.n	800d01a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	3304      	adds	r3, #4
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7fe fae7 	bl	800b5b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfee:	2201      	movs	r2, #1
 800cff0:	409a      	lsls	r2, r3
 800cff2:	4b18      	ldr	r3, [pc, #96]	; (800d054 <xTaskRemoveFromEventList+0xb0>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4313      	orrs	r3, r2
 800cff8:	4a16      	ldr	r2, [pc, #88]	; (800d054 <xTaskRemoveFromEventList+0xb0>)
 800cffa:	6013      	str	r3, [r2, #0]
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d000:	4613      	mov	r3, r2
 800d002:	009b      	lsls	r3, r3, #2
 800d004:	4413      	add	r3, r2
 800d006:	009b      	lsls	r3, r3, #2
 800d008:	4a13      	ldr	r2, [pc, #76]	; (800d058 <xTaskRemoveFromEventList+0xb4>)
 800d00a:	441a      	add	r2, r3
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	3304      	adds	r3, #4
 800d010:	4619      	mov	r1, r3
 800d012:	4610      	mov	r0, r2
 800d014:	f7fe fa73 	bl	800b4fe <vListInsertEnd>
 800d018:	e005      	b.n	800d026 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	3318      	adds	r3, #24
 800d01e:	4619      	mov	r1, r3
 800d020:	480e      	ldr	r0, [pc, #56]	; (800d05c <xTaskRemoveFromEventList+0xb8>)
 800d022:	f7fe fa6c 	bl	800b4fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d02a:	4b0d      	ldr	r3, [pc, #52]	; (800d060 <xTaskRemoveFromEventList+0xbc>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d030:	429a      	cmp	r2, r3
 800d032:	d905      	bls.n	800d040 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d034:	2301      	movs	r3, #1
 800d036:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d038:	4b0a      	ldr	r3, [pc, #40]	; (800d064 <xTaskRemoveFromEventList+0xc0>)
 800d03a:	2201      	movs	r2, #1
 800d03c:	601a      	str	r2, [r3, #0]
 800d03e:	e001      	b.n	800d044 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800d040:	2300      	movs	r3, #0
 800d042:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d044:	697b      	ldr	r3, [r7, #20]
}
 800d046:	4618      	mov	r0, r3
 800d048:	3718      	adds	r7, #24
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	24002288 	.word	0x24002288
 800d054:	24002268 	.word	0x24002268
 800d058:	24002164 	.word	0x24002164
 800d05c:	24002220 	.word	0x24002220
 800d060:	24002160 	.word	0x24002160
 800d064:	24002274 	.word	0x24002274

0800d068 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d068:	b480      	push	{r7}
 800d06a:	b083      	sub	sp, #12
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d070:	4b06      	ldr	r3, [pc, #24]	; (800d08c <vTaskInternalSetTimeOutState+0x24>)
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d078:	4b05      	ldr	r3, [pc, #20]	; (800d090 <vTaskInternalSetTimeOutState+0x28>)
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	605a      	str	r2, [r3, #4]
}
 800d080:	bf00      	nop
 800d082:	370c      	adds	r7, #12
 800d084:	46bd      	mov	sp, r7
 800d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08a:	4770      	bx	lr
 800d08c:	24002278 	.word	0x24002278
 800d090:	24002264 	.word	0x24002264

0800d094 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b088      	sub	sp, #32
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d109      	bne.n	800d0b8 <xTaskCheckForTimeOut+0x24>
 800d0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a8:	f383 8811 	msr	BASEPRI, r3
 800d0ac:	f3bf 8f6f 	isb	sy
 800d0b0:	f3bf 8f4f 	dsb	sy
 800d0b4:	613b      	str	r3, [r7, #16]
 800d0b6:	e7fe      	b.n	800d0b6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d109      	bne.n	800d0d2 <xTaskCheckForTimeOut+0x3e>
 800d0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c2:	f383 8811 	msr	BASEPRI, r3
 800d0c6:	f3bf 8f6f 	isb	sy
 800d0ca:	f3bf 8f4f 	dsb	sy
 800d0ce:	60fb      	str	r3, [r7, #12]
 800d0d0:	e7fe      	b.n	800d0d0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800d0d2:	f000 ffab 	bl	800e02c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d0d6:	4b1d      	ldr	r3, [pc, #116]	; (800d14c <xTaskCheckForTimeOut+0xb8>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	69ba      	ldr	r2, [r7, #24]
 800d0e2:	1ad3      	subs	r3, r2, r3
 800d0e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ee:	d102      	bne.n	800d0f6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	61fb      	str	r3, [r7, #28]
 800d0f4:	e023      	b.n	800d13e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681a      	ldr	r2, [r3, #0]
 800d0fa:	4b15      	ldr	r3, [pc, #84]	; (800d150 <xTaskCheckForTimeOut+0xbc>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d007      	beq.n	800d112 <xTaskCheckForTimeOut+0x7e>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	69ba      	ldr	r2, [r7, #24]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d302      	bcc.n	800d112 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d10c:	2301      	movs	r3, #1
 800d10e:	61fb      	str	r3, [r7, #28]
 800d110:	e015      	b.n	800d13e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	697a      	ldr	r2, [r7, #20]
 800d118:	429a      	cmp	r2, r3
 800d11a:	d20b      	bcs.n	800d134 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	681a      	ldr	r2, [r3, #0]
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	1ad2      	subs	r2, r2, r3
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f7ff ff9d 	bl	800d068 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d12e:	2300      	movs	r3, #0
 800d130:	61fb      	str	r3, [r7, #28]
 800d132:	e004      	b.n	800d13e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	2200      	movs	r2, #0
 800d138:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d13a:	2301      	movs	r3, #1
 800d13c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d13e:	f000 ffa3 	bl	800e088 <vPortExitCritical>

	return xReturn;
 800d142:	69fb      	ldr	r3, [r7, #28]
}
 800d144:	4618      	mov	r0, r3
 800d146:	3720      	adds	r7, #32
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	24002264 	.word	0x24002264
 800d150:	24002278 	.word	0x24002278

0800d154 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d154:	b480      	push	{r7}
 800d156:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d158:	4b03      	ldr	r3, [pc, #12]	; (800d168 <vTaskMissedYield+0x14>)
 800d15a:	2201      	movs	r2, #1
 800d15c:	601a      	str	r2, [r3, #0]
}
 800d15e:	bf00      	nop
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr
 800d168:	24002274 	.word	0x24002274

0800d16c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d174:	f000 f854 	bl	800d220 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d178:	4b07      	ldr	r3, [pc, #28]	; (800d198 <prvIdleTask+0x2c>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	2b01      	cmp	r3, #1
 800d17e:	d907      	bls.n	800d190 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d180:	4b06      	ldr	r3, [pc, #24]	; (800d19c <prvIdleTask+0x30>)
 800d182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d186:	601a      	str	r2, [r3, #0]
 800d188:	f3bf 8f4f 	dsb	sy
 800d18c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d190:	f7f3 fa76 	bl	8000680 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d194:	e7ee      	b.n	800d174 <prvIdleTask+0x8>
 800d196:	bf00      	nop
 800d198:	24002164 	.word	0x24002164
 800d19c:	e000ed04 	.word	0xe000ed04

0800d1a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b082      	sub	sp, #8
 800d1a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	607b      	str	r3, [r7, #4]
 800d1aa:	e00c      	b.n	800d1c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d1ac:	687a      	ldr	r2, [r7, #4]
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	009b      	lsls	r3, r3, #2
 800d1b2:	4413      	add	r3, r2
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	4a12      	ldr	r2, [pc, #72]	; (800d200 <prvInitialiseTaskLists+0x60>)
 800d1b8:	4413      	add	r3, r2
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7fe f972 	bl	800b4a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	3301      	adds	r3, #1
 800d1c4:	607b      	str	r3, [r7, #4]
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2b06      	cmp	r3, #6
 800d1ca:	d9ef      	bls.n	800d1ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d1cc:	480d      	ldr	r0, [pc, #52]	; (800d204 <prvInitialiseTaskLists+0x64>)
 800d1ce:	f7fe f969 	bl	800b4a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d1d2:	480d      	ldr	r0, [pc, #52]	; (800d208 <prvInitialiseTaskLists+0x68>)
 800d1d4:	f7fe f966 	bl	800b4a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d1d8:	480c      	ldr	r0, [pc, #48]	; (800d20c <prvInitialiseTaskLists+0x6c>)
 800d1da:	f7fe f963 	bl	800b4a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d1de:	480c      	ldr	r0, [pc, #48]	; (800d210 <prvInitialiseTaskLists+0x70>)
 800d1e0:	f7fe f960 	bl	800b4a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d1e4:	480b      	ldr	r0, [pc, #44]	; (800d214 <prvInitialiseTaskLists+0x74>)
 800d1e6:	f7fe f95d 	bl	800b4a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d1ea:	4b0b      	ldr	r3, [pc, #44]	; (800d218 <prvInitialiseTaskLists+0x78>)
 800d1ec:	4a05      	ldr	r2, [pc, #20]	; (800d204 <prvInitialiseTaskLists+0x64>)
 800d1ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d1f0:	4b0a      	ldr	r3, [pc, #40]	; (800d21c <prvInitialiseTaskLists+0x7c>)
 800d1f2:	4a05      	ldr	r2, [pc, #20]	; (800d208 <prvInitialiseTaskLists+0x68>)
 800d1f4:	601a      	str	r2, [r3, #0]
}
 800d1f6:	bf00      	nop
 800d1f8:	3708      	adds	r7, #8
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	bf00      	nop
 800d200:	24002164 	.word	0x24002164
 800d204:	240021f0 	.word	0x240021f0
 800d208:	24002204 	.word	0x24002204
 800d20c:	24002220 	.word	0x24002220
 800d210:	24002234 	.word	0x24002234
 800d214:	2400224c 	.word	0x2400224c
 800d218:	24002218 	.word	0x24002218
 800d21c:	2400221c 	.word	0x2400221c

0800d220 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d226:	e019      	b.n	800d25c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d228:	f000 ff00 	bl	800e02c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d22c:	4b0f      	ldr	r3, [pc, #60]	; (800d26c <prvCheckTasksWaitingTermination+0x4c>)
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	68db      	ldr	r3, [r3, #12]
 800d232:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	3304      	adds	r3, #4
 800d238:	4618      	mov	r0, r3
 800d23a:	f7fe f9bd 	bl	800b5b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d23e:	4b0c      	ldr	r3, [pc, #48]	; (800d270 <prvCheckTasksWaitingTermination+0x50>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	3b01      	subs	r3, #1
 800d244:	4a0a      	ldr	r2, [pc, #40]	; (800d270 <prvCheckTasksWaitingTermination+0x50>)
 800d246:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d248:	4b0a      	ldr	r3, [pc, #40]	; (800d274 <prvCheckTasksWaitingTermination+0x54>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	3b01      	subs	r3, #1
 800d24e:	4a09      	ldr	r2, [pc, #36]	; (800d274 <prvCheckTasksWaitingTermination+0x54>)
 800d250:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d252:	f000 ff19 	bl	800e088 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f000 f80e 	bl	800d278 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d25c:	4b05      	ldr	r3, [pc, #20]	; (800d274 <prvCheckTasksWaitingTermination+0x54>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d1e1      	bne.n	800d228 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d264:	bf00      	nop
 800d266:	3708      	adds	r7, #8
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}
 800d26c:	24002234 	.word	0x24002234
 800d270:	24002260 	.word	0x24002260
 800d274:	24002248 	.word	0x24002248

0800d278 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d286:	2b00      	cmp	r3, #0
 800d288:	d108      	bne.n	800d29c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d28e:	4618      	mov	r0, r3
 800d290:	f001 f8a8 	bl	800e3e4 <vPortFree>
				vPortFree( pxTCB );
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f001 f8a5 	bl	800e3e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d29a:	e017      	b.n	800d2cc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d103      	bne.n	800d2ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f001 f89c 	bl	800e3e4 <vPortFree>
	}
 800d2ac:	e00e      	b.n	800d2cc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d2b4:	2b02      	cmp	r3, #2
 800d2b6:	d009      	beq.n	800d2cc <prvDeleteTCB+0x54>
 800d2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2bc:	f383 8811 	msr	BASEPRI, r3
 800d2c0:	f3bf 8f6f 	isb	sy
 800d2c4:	f3bf 8f4f 	dsb	sy
 800d2c8:	60fb      	str	r3, [r7, #12]
 800d2ca:	e7fe      	b.n	800d2ca <prvDeleteTCB+0x52>
	}
 800d2cc:	bf00      	nop
 800d2ce:	3710      	adds	r7, #16
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2da:	4b0c      	ldr	r3, [pc, #48]	; (800d30c <prvResetNextTaskUnblockTime+0x38>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d104      	bne.n	800d2ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d2e4:	4b0a      	ldr	r3, [pc, #40]	; (800d310 <prvResetNextTaskUnblockTime+0x3c>)
 800d2e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d2ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d2ec:	e008      	b.n	800d300 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2ee:	4b07      	ldr	r3, [pc, #28]	; (800d30c <prvResetNextTaskUnblockTime+0x38>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	68db      	ldr	r3, [r3, #12]
 800d2f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	685b      	ldr	r3, [r3, #4]
 800d2fc:	4a04      	ldr	r2, [pc, #16]	; (800d310 <prvResetNextTaskUnblockTime+0x3c>)
 800d2fe:	6013      	str	r3, [r2, #0]
}
 800d300:	bf00      	nop
 800d302:	370c      	adds	r7, #12
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr
 800d30c:	24002218 	.word	0x24002218
 800d310:	24002280 	.word	0x24002280

0800d314 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d31a:	4b0b      	ldr	r3, [pc, #44]	; (800d348 <xTaskGetSchedulerState+0x34>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d102      	bne.n	800d328 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d322:	2301      	movs	r3, #1
 800d324:	607b      	str	r3, [r7, #4]
 800d326:	e008      	b.n	800d33a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d328:	4b08      	ldr	r3, [pc, #32]	; (800d34c <xTaskGetSchedulerState+0x38>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d102      	bne.n	800d336 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d330:	2302      	movs	r3, #2
 800d332:	607b      	str	r3, [r7, #4]
 800d334:	e001      	b.n	800d33a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d336:	2300      	movs	r3, #0
 800d338:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d33a:	687b      	ldr	r3, [r7, #4]
	}
 800d33c:	4618      	mov	r0, r3
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr
 800d348:	2400226c 	.word	0x2400226c
 800d34c:	24002288 	.word	0x24002288

0800d350 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d35c:	2300      	movs	r3, #0
 800d35e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d069      	beq.n	800d43a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d36a:	4b36      	ldr	r3, [pc, #216]	; (800d444 <xTaskPriorityInherit+0xf4>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d370:	429a      	cmp	r2, r3
 800d372:	d259      	bcs.n	800d428 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	699b      	ldr	r3, [r3, #24]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	db06      	blt.n	800d38a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d37c:	4b31      	ldr	r3, [pc, #196]	; (800d444 <xTaskPriorityInherit+0xf4>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d382:	f1c3 0207 	rsb	r2, r3, #7
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	6959      	ldr	r1, [r3, #20]
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d392:	4613      	mov	r3, r2
 800d394:	009b      	lsls	r3, r3, #2
 800d396:	4413      	add	r3, r2
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	4a2b      	ldr	r2, [pc, #172]	; (800d448 <xTaskPriorityInherit+0xf8>)
 800d39c:	4413      	add	r3, r2
 800d39e:	4299      	cmp	r1, r3
 800d3a0:	d13a      	bne.n	800d418 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	3304      	adds	r3, #4
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7fe f906 	bl	800b5b8 <uxListRemove>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d115      	bne.n	800d3de <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3b6:	4924      	ldr	r1, [pc, #144]	; (800d448 <xTaskPriorityInherit+0xf8>)
 800d3b8:	4613      	mov	r3, r2
 800d3ba:	009b      	lsls	r3, r3, #2
 800d3bc:	4413      	add	r3, r2
 800d3be:	009b      	lsls	r3, r3, #2
 800d3c0:	440b      	add	r3, r1
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d10a      	bne.n	800d3de <xTaskPriorityInherit+0x8e>
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d3d2:	43da      	mvns	r2, r3
 800d3d4:	4b1d      	ldr	r3, [pc, #116]	; (800d44c <xTaskPriorityInherit+0xfc>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4013      	ands	r3, r2
 800d3da:	4a1c      	ldr	r2, [pc, #112]	; (800d44c <xTaskPriorityInherit+0xfc>)
 800d3dc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d3de:	4b19      	ldr	r3, [pc, #100]	; (800d444 <xTaskPriorityInherit+0xf4>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	409a      	lsls	r2, r3
 800d3f0:	4b16      	ldr	r3, [pc, #88]	; (800d44c <xTaskPriorityInherit+0xfc>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	4a15      	ldr	r2, [pc, #84]	; (800d44c <xTaskPriorityInherit+0xfc>)
 800d3f8:	6013      	str	r3, [r2, #0]
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3fe:	4613      	mov	r3, r2
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	4413      	add	r3, r2
 800d404:	009b      	lsls	r3, r3, #2
 800d406:	4a10      	ldr	r2, [pc, #64]	; (800d448 <xTaskPriorityInherit+0xf8>)
 800d408:	441a      	add	r2, r3
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	3304      	adds	r3, #4
 800d40e:	4619      	mov	r1, r3
 800d410:	4610      	mov	r0, r2
 800d412:	f7fe f874 	bl	800b4fe <vListInsertEnd>
 800d416:	e004      	b.n	800d422 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d418:	4b0a      	ldr	r3, [pc, #40]	; (800d444 <xTaskPriorityInherit+0xf4>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d422:	2301      	movs	r3, #1
 800d424:	60fb      	str	r3, [r7, #12]
 800d426:	e008      	b.n	800d43a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d42c:	4b05      	ldr	r3, [pc, #20]	; (800d444 <xTaskPriorityInherit+0xf4>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d432:	429a      	cmp	r2, r3
 800d434:	d201      	bcs.n	800d43a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d436:	2301      	movs	r3, #1
 800d438:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d43a:	68fb      	ldr	r3, [r7, #12]
	}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3710      	adds	r7, #16
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}
 800d444:	24002160 	.word	0x24002160
 800d448:	24002164 	.word	0x24002164
 800d44c:	24002268 	.word	0x24002268

0800d450 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d450:	b580      	push	{r7, lr}
 800d452:	b086      	sub	sp, #24
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d45c:	2300      	movs	r3, #0
 800d45e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d06c      	beq.n	800d540 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d466:	4b39      	ldr	r3, [pc, #228]	; (800d54c <xTaskPriorityDisinherit+0xfc>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	693a      	ldr	r2, [r7, #16]
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d009      	beq.n	800d484 <xTaskPriorityDisinherit+0x34>
 800d470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d474:	f383 8811 	msr	BASEPRI, r3
 800d478:	f3bf 8f6f 	isb	sy
 800d47c:	f3bf 8f4f 	dsb	sy
 800d480:	60fb      	str	r3, [r7, #12]
 800d482:	e7fe      	b.n	800d482 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d109      	bne.n	800d4a0 <xTaskPriorityDisinherit+0x50>
 800d48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d490:	f383 8811 	msr	BASEPRI, r3
 800d494:	f3bf 8f6f 	isb	sy
 800d498:	f3bf 8f4f 	dsb	sy
 800d49c:	60bb      	str	r3, [r7, #8]
 800d49e:	e7fe      	b.n	800d49e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4a4:	1e5a      	subs	r2, r3, #1
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d044      	beq.n	800d540 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d140      	bne.n	800d540 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	3304      	adds	r3, #4
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7fe f878 	bl	800b5b8 <uxListRemove>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d115      	bne.n	800d4fa <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4d2:	491f      	ldr	r1, [pc, #124]	; (800d550 <xTaskPriorityDisinherit+0x100>)
 800d4d4:	4613      	mov	r3, r2
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	4413      	add	r3, r2
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	440b      	add	r3, r1
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d10a      	bne.n	800d4fa <xTaskPriorityDisinherit+0xaa>
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	fa02 f303 	lsl.w	r3, r2, r3
 800d4ee:	43da      	mvns	r2, r3
 800d4f0:	4b18      	ldr	r3, [pc, #96]	; (800d554 <xTaskPriorityDisinherit+0x104>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4013      	ands	r3, r2
 800d4f6:	4a17      	ldr	r2, [pc, #92]	; (800d554 <xTaskPriorityDisinherit+0x104>)
 800d4f8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d506:	f1c3 0207 	rsb	r2, r3, #7
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d512:	2201      	movs	r2, #1
 800d514:	409a      	lsls	r2, r3
 800d516:	4b0f      	ldr	r3, [pc, #60]	; (800d554 <xTaskPriorityDisinherit+0x104>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4313      	orrs	r3, r2
 800d51c:	4a0d      	ldr	r2, [pc, #52]	; (800d554 <xTaskPriorityDisinherit+0x104>)
 800d51e:	6013      	str	r3, [r2, #0]
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d524:	4613      	mov	r3, r2
 800d526:	009b      	lsls	r3, r3, #2
 800d528:	4413      	add	r3, r2
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	4a08      	ldr	r2, [pc, #32]	; (800d550 <xTaskPriorityDisinherit+0x100>)
 800d52e:	441a      	add	r2, r3
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	3304      	adds	r3, #4
 800d534:	4619      	mov	r1, r3
 800d536:	4610      	mov	r0, r2
 800d538:	f7fd ffe1 	bl	800b4fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d53c:	2301      	movs	r3, #1
 800d53e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d540:	697b      	ldr	r3, [r7, #20]
	}
 800d542:	4618      	mov	r0, r3
 800d544:	3718      	adds	r7, #24
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	bf00      	nop
 800d54c:	24002160 	.word	0x24002160
 800d550:	24002164 	.word	0x24002164
 800d554:	24002268 	.word	0x24002268

0800d558 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b088      	sub	sp, #32
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d566:	2301      	movs	r3, #1
 800d568:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	f000 8081 	beq.w	800d674 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d572:	69bb      	ldr	r3, [r7, #24]
 800d574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d576:	2b00      	cmp	r3, #0
 800d578:	d109      	bne.n	800d58e <vTaskPriorityDisinheritAfterTimeout+0x36>
 800d57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57e:	f383 8811 	msr	BASEPRI, r3
 800d582:	f3bf 8f6f 	isb	sy
 800d586:	f3bf 8f4f 	dsb	sy
 800d58a:	60fb      	str	r3, [r7, #12]
 800d58c:	e7fe      	b.n	800d58c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d58e:	69bb      	ldr	r3, [r7, #24]
 800d590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d592:	683a      	ldr	r2, [r7, #0]
 800d594:	429a      	cmp	r2, r3
 800d596:	d902      	bls.n	800d59e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	61fb      	str	r3, [r7, #28]
 800d59c:	e002      	b.n	800d5a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d59e:	69bb      	ldr	r3, [r7, #24]
 800d5a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d5a4:	69bb      	ldr	r3, [r7, #24]
 800d5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a8:	69fa      	ldr	r2, [r7, #28]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d062      	beq.n	800d674 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d5ae:	69bb      	ldr	r3, [r7, #24]
 800d5b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5b2:	697a      	ldr	r2, [r7, #20]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d15d      	bne.n	800d674 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d5b8:	4b30      	ldr	r3, [pc, #192]	; (800d67c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	69ba      	ldr	r2, [r7, #24]
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d109      	bne.n	800d5d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800d5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c6:	f383 8811 	msr	BASEPRI, r3
 800d5ca:	f3bf 8f6f 	isb	sy
 800d5ce:	f3bf 8f4f 	dsb	sy
 800d5d2:	60bb      	str	r3, [r7, #8]
 800d5d4:	e7fe      	b.n	800d5d4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d5d6:	69bb      	ldr	r3, [r7, #24]
 800d5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5da:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d5dc:	69bb      	ldr	r3, [r7, #24]
 800d5de:	69fa      	ldr	r2, [r7, #28]
 800d5e0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d5e2:	69bb      	ldr	r3, [r7, #24]
 800d5e4:	699b      	ldr	r3, [r3, #24]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	db04      	blt.n	800d5f4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5ea:	69fb      	ldr	r3, [r7, #28]
 800d5ec:	f1c3 0207 	rsb	r2, r3, #7
 800d5f0:	69bb      	ldr	r3, [r7, #24]
 800d5f2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d5f4:	69bb      	ldr	r3, [r7, #24]
 800d5f6:	6959      	ldr	r1, [r3, #20]
 800d5f8:	693a      	ldr	r2, [r7, #16]
 800d5fa:	4613      	mov	r3, r2
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	4413      	add	r3, r2
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	4a1f      	ldr	r2, [pc, #124]	; (800d680 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d604:	4413      	add	r3, r2
 800d606:	4299      	cmp	r1, r3
 800d608:	d134      	bne.n	800d674 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d60a:	69bb      	ldr	r3, [r7, #24]
 800d60c:	3304      	adds	r3, #4
 800d60e:	4618      	mov	r0, r3
 800d610:	f7fd ffd2 	bl	800b5b8 <uxListRemove>
 800d614:	4603      	mov	r3, r0
 800d616:	2b00      	cmp	r3, #0
 800d618:	d115      	bne.n	800d646 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d61a:	69bb      	ldr	r3, [r7, #24]
 800d61c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d61e:	4918      	ldr	r1, [pc, #96]	; (800d680 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d620:	4613      	mov	r3, r2
 800d622:	009b      	lsls	r3, r3, #2
 800d624:	4413      	add	r3, r2
 800d626:	009b      	lsls	r3, r3, #2
 800d628:	440b      	add	r3, r1
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d10a      	bne.n	800d646 <vTaskPriorityDisinheritAfterTimeout+0xee>
 800d630:	69bb      	ldr	r3, [r7, #24]
 800d632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d634:	2201      	movs	r2, #1
 800d636:	fa02 f303 	lsl.w	r3, r2, r3
 800d63a:	43da      	mvns	r2, r3
 800d63c:	4b11      	ldr	r3, [pc, #68]	; (800d684 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	4013      	ands	r3, r2
 800d642:	4a10      	ldr	r2, [pc, #64]	; (800d684 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d644:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d646:	69bb      	ldr	r3, [r7, #24]
 800d648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d64a:	2201      	movs	r2, #1
 800d64c:	409a      	lsls	r2, r3
 800d64e:	4b0d      	ldr	r3, [pc, #52]	; (800d684 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	4313      	orrs	r3, r2
 800d654:	4a0b      	ldr	r2, [pc, #44]	; (800d684 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d656:	6013      	str	r3, [r2, #0]
 800d658:	69bb      	ldr	r3, [r7, #24]
 800d65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d65c:	4613      	mov	r3, r2
 800d65e:	009b      	lsls	r3, r3, #2
 800d660:	4413      	add	r3, r2
 800d662:	009b      	lsls	r3, r3, #2
 800d664:	4a06      	ldr	r2, [pc, #24]	; (800d680 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d666:	441a      	add	r2, r3
 800d668:	69bb      	ldr	r3, [r7, #24]
 800d66a:	3304      	adds	r3, #4
 800d66c:	4619      	mov	r1, r3
 800d66e:	4610      	mov	r0, r2
 800d670:	f7fd ff45 	bl	800b4fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d674:	bf00      	nop
 800d676:	3720      	adds	r7, #32
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	24002160 	.word	0x24002160
 800d680:	24002164 	.word	0x24002164
 800d684:	24002268 	.word	0x24002268

0800d688 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d688:	b480      	push	{r7}
 800d68a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d68c:	4b07      	ldr	r3, [pc, #28]	; (800d6ac <pvTaskIncrementMutexHeldCount+0x24>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d004      	beq.n	800d69e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d694:	4b05      	ldr	r3, [pc, #20]	; (800d6ac <pvTaskIncrementMutexHeldCount+0x24>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d69a:	3201      	adds	r2, #1
 800d69c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d69e:	4b03      	ldr	r3, [pc, #12]	; (800d6ac <pvTaskIncrementMutexHeldCount+0x24>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
	}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr
 800d6ac:	24002160 	.word	0x24002160

0800d6b0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b084      	sub	sp, #16
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d6ba:	4b29      	ldr	r3, [pc, #164]	; (800d760 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d6c0:	4b28      	ldr	r3, [pc, #160]	; (800d764 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	3304      	adds	r3, #4
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7fd ff76 	bl	800b5b8 <uxListRemove>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d10b      	bne.n	800d6ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d6d2:	4b24      	ldr	r3, [pc, #144]	; (800d764 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6d8:	2201      	movs	r2, #1
 800d6da:	fa02 f303 	lsl.w	r3, r2, r3
 800d6de:	43da      	mvns	r2, r3
 800d6e0:	4b21      	ldr	r3, [pc, #132]	; (800d768 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	4013      	ands	r3, r2
 800d6e6:	4a20      	ldr	r2, [pc, #128]	; (800d768 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d6e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6f0:	d10a      	bne.n	800d708 <prvAddCurrentTaskToDelayedList+0x58>
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d007      	beq.n	800d708 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6f8:	4b1a      	ldr	r3, [pc, #104]	; (800d764 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	3304      	adds	r3, #4
 800d6fe:	4619      	mov	r1, r3
 800d700:	481a      	ldr	r0, [pc, #104]	; (800d76c <prvAddCurrentTaskToDelayedList+0xbc>)
 800d702:	f7fd fefc 	bl	800b4fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d706:	e026      	b.n	800d756 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d708:	68fa      	ldr	r2, [r7, #12]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	4413      	add	r3, r2
 800d70e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d710:	4b14      	ldr	r3, [pc, #80]	; (800d764 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	68ba      	ldr	r2, [r7, #8]
 800d716:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d718:	68ba      	ldr	r2, [r7, #8]
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d209      	bcs.n	800d734 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d720:	4b13      	ldr	r3, [pc, #76]	; (800d770 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d722:	681a      	ldr	r2, [r3, #0]
 800d724:	4b0f      	ldr	r3, [pc, #60]	; (800d764 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	3304      	adds	r3, #4
 800d72a:	4619      	mov	r1, r3
 800d72c:	4610      	mov	r0, r2
 800d72e:	f7fd ff0a 	bl	800b546 <vListInsert>
}
 800d732:	e010      	b.n	800d756 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d734:	4b0f      	ldr	r3, [pc, #60]	; (800d774 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d736:	681a      	ldr	r2, [r3, #0]
 800d738:	4b0a      	ldr	r3, [pc, #40]	; (800d764 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	3304      	adds	r3, #4
 800d73e:	4619      	mov	r1, r3
 800d740:	4610      	mov	r0, r2
 800d742:	f7fd ff00 	bl	800b546 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d746:	4b0c      	ldr	r3, [pc, #48]	; (800d778 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	68ba      	ldr	r2, [r7, #8]
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d202      	bcs.n	800d756 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d750:	4a09      	ldr	r2, [pc, #36]	; (800d778 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	6013      	str	r3, [r2, #0]
}
 800d756:	bf00      	nop
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	24002264 	.word	0x24002264
 800d764:	24002160 	.word	0x24002160
 800d768:	24002268 	.word	0x24002268
 800d76c:	2400224c 	.word	0x2400224c
 800d770:	2400221c 	.word	0x2400221c
 800d774:	24002218 	.word	0x24002218
 800d778:	24002280 	.word	0x24002280

0800d77c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b08a      	sub	sp, #40	; 0x28
 800d780:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d782:	2300      	movs	r3, #0
 800d784:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d786:	f000 fae7 	bl	800dd58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d78a:	4b1c      	ldr	r3, [pc, #112]	; (800d7fc <xTimerCreateTimerTask+0x80>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d021      	beq.n	800d7d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d792:	2300      	movs	r3, #0
 800d794:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d796:	2300      	movs	r3, #0
 800d798:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d79a:	1d3a      	adds	r2, r7, #4
 800d79c:	f107 0108 	add.w	r1, r7, #8
 800d7a0:	f107 030c 	add.w	r3, r7, #12
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7f2 ff8d 	bl	80006c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d7aa:	6879      	ldr	r1, [r7, #4]
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	68fa      	ldr	r2, [r7, #12]
 800d7b0:	9202      	str	r2, [sp, #8]
 800d7b2:	9301      	str	r3, [sp, #4]
 800d7b4:	2302      	movs	r3, #2
 800d7b6:	9300      	str	r3, [sp, #0]
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	460a      	mov	r2, r1
 800d7bc:	4910      	ldr	r1, [pc, #64]	; (800d800 <xTimerCreateTimerTask+0x84>)
 800d7be:	4811      	ldr	r0, [pc, #68]	; (800d804 <xTimerCreateTimerTask+0x88>)
 800d7c0:	f7fe ff0e 	bl	800c5e0 <xTaskCreateStatic>
 800d7c4:	4602      	mov	r2, r0
 800d7c6:	4b10      	ldr	r3, [pc, #64]	; (800d808 <xTimerCreateTimerTask+0x8c>)
 800d7c8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d7ca:	4b0f      	ldr	r3, [pc, #60]	; (800d808 <xTimerCreateTimerTask+0x8c>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d001      	beq.n	800d7d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d109      	bne.n	800d7f0 <xTimerCreateTimerTask+0x74>
 800d7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e0:	f383 8811 	msr	BASEPRI, r3
 800d7e4:	f3bf 8f6f 	isb	sy
 800d7e8:	f3bf 8f4f 	dsb	sy
 800d7ec:	613b      	str	r3, [r7, #16]
 800d7ee:	e7fe      	b.n	800d7ee <xTimerCreateTimerTask+0x72>
	return xReturn;
 800d7f0:	697b      	ldr	r3, [r7, #20]
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3718      	adds	r7, #24
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	240022bc 	.word	0x240022bc
 800d800:	08018adc 	.word	0x08018adc
 800d804:	0800d93d 	.word	0x0800d93d
 800d808:	240022c0 	.word	0x240022c0

0800d80c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b08a      	sub	sp, #40	; 0x28
 800d810:	af00      	add	r7, sp, #0
 800d812:	60f8      	str	r0, [r7, #12]
 800d814:	60b9      	str	r1, [r7, #8]
 800d816:	607a      	str	r2, [r7, #4]
 800d818:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d81a:	2300      	movs	r3, #0
 800d81c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d109      	bne.n	800d838 <xTimerGenericCommand+0x2c>
 800d824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d828:	f383 8811 	msr	BASEPRI, r3
 800d82c:	f3bf 8f6f 	isb	sy
 800d830:	f3bf 8f4f 	dsb	sy
 800d834:	623b      	str	r3, [r7, #32]
 800d836:	e7fe      	b.n	800d836 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d838:	4b19      	ldr	r3, [pc, #100]	; (800d8a0 <xTimerGenericCommand+0x94>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d02a      	beq.n	800d896 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	2b05      	cmp	r3, #5
 800d850:	dc18      	bgt.n	800d884 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d852:	f7ff fd5f 	bl	800d314 <xTaskGetSchedulerState>
 800d856:	4603      	mov	r3, r0
 800d858:	2b02      	cmp	r3, #2
 800d85a:	d109      	bne.n	800d870 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d85c:	4b10      	ldr	r3, [pc, #64]	; (800d8a0 <xTimerGenericCommand+0x94>)
 800d85e:	6818      	ldr	r0, [r3, #0]
 800d860:	f107 0114 	add.w	r1, r7, #20
 800d864:	2300      	movs	r3, #0
 800d866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d868:	f7fe f8bc 	bl	800b9e4 <xQueueGenericSend>
 800d86c:	6278      	str	r0, [r7, #36]	; 0x24
 800d86e:	e012      	b.n	800d896 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d870:	4b0b      	ldr	r3, [pc, #44]	; (800d8a0 <xTimerGenericCommand+0x94>)
 800d872:	6818      	ldr	r0, [r3, #0]
 800d874:	f107 0114 	add.w	r1, r7, #20
 800d878:	2300      	movs	r3, #0
 800d87a:	2200      	movs	r2, #0
 800d87c:	f7fe f8b2 	bl	800b9e4 <xQueueGenericSend>
 800d880:	6278      	str	r0, [r7, #36]	; 0x24
 800d882:	e008      	b.n	800d896 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d884:	4b06      	ldr	r3, [pc, #24]	; (800d8a0 <xTimerGenericCommand+0x94>)
 800d886:	6818      	ldr	r0, [r3, #0]
 800d888:	f107 0114 	add.w	r1, r7, #20
 800d88c:	2300      	movs	r3, #0
 800d88e:	683a      	ldr	r2, [r7, #0]
 800d890:	f7fe f9a2 	bl	800bbd8 <xQueueGenericSendFromISR>
 800d894:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3728      	adds	r7, #40	; 0x28
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}
 800d8a0:	240022bc 	.word	0x240022bc

0800d8a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b088      	sub	sp, #32
 800d8a8:	af02      	add	r7, sp, #8
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8ae:	4b22      	ldr	r3, [pc, #136]	; (800d938 <prvProcessExpiredTimer+0x94>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	68db      	ldr	r3, [r3, #12]
 800d8b4:	68db      	ldr	r3, [r3, #12]
 800d8b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	3304      	adds	r3, #4
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7fd fe7b 	bl	800b5b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d8c8:	f003 0304 	and.w	r3, r3, #4
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d021      	beq.n	800d914 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	699a      	ldr	r2, [r3, #24]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	18d1      	adds	r1, r2, r3
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	683a      	ldr	r2, [r7, #0]
 800d8dc:	6978      	ldr	r0, [r7, #20]
 800d8de:	f000 f8d1 	bl	800da84 <prvInsertTimerInActiveList>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d01e      	beq.n	800d926 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	9300      	str	r3, [sp, #0]
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	687a      	ldr	r2, [r7, #4]
 800d8f0:	2100      	movs	r1, #0
 800d8f2:	6978      	ldr	r0, [r7, #20]
 800d8f4:	f7ff ff8a 	bl	800d80c <xTimerGenericCommand>
 800d8f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d112      	bne.n	800d926 <prvProcessExpiredTimer+0x82>
 800d900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d904:	f383 8811 	msr	BASEPRI, r3
 800d908:	f3bf 8f6f 	isb	sy
 800d90c:	f3bf 8f4f 	dsb	sy
 800d910:	60fb      	str	r3, [r7, #12]
 800d912:	e7fe      	b.n	800d912 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d91a:	f023 0301 	bic.w	r3, r3, #1
 800d91e:	b2da      	uxtb	r2, r3
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	6a1b      	ldr	r3, [r3, #32]
 800d92a:	6978      	ldr	r0, [r7, #20]
 800d92c:	4798      	blx	r3
}
 800d92e:	bf00      	nop
 800d930:	3718      	adds	r7, #24
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	240022b4 	.word	0x240022b4

0800d93c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b084      	sub	sp, #16
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d944:	f107 0308 	add.w	r3, r7, #8
 800d948:	4618      	mov	r0, r3
 800d94a:	f000 f857 	bl	800d9fc <prvGetNextExpireTime>
 800d94e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	4619      	mov	r1, r3
 800d954:	68f8      	ldr	r0, [r7, #12]
 800d956:	f000 f803 	bl	800d960 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d95a:	f000 f8d5 	bl	800db08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d95e:	e7f1      	b.n	800d944 <prvTimerTask+0x8>

0800d960 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d96a:	f7ff f8ef 	bl	800cb4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d96e:	f107 0308 	add.w	r3, r7, #8
 800d972:	4618      	mov	r0, r3
 800d974:	f000 f866 	bl	800da44 <prvSampleTimeNow>
 800d978:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d130      	bne.n	800d9e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d10a      	bne.n	800d99c <prvProcessTimerOrBlockTask+0x3c>
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d806      	bhi.n	800d99c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d98e:	f7ff f8eb 	bl	800cb68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d992:	68f9      	ldr	r1, [r7, #12]
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f7ff ff85 	bl	800d8a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d99a:	e024      	b.n	800d9e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d008      	beq.n	800d9b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d9a2:	4b13      	ldr	r3, [pc, #76]	; (800d9f0 <prvProcessTimerOrBlockTask+0x90>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d101      	bne.n	800d9b0 <prvProcessTimerOrBlockTask+0x50>
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	e000      	b.n	800d9b2 <prvProcessTimerOrBlockTask+0x52>
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d9b4:	4b0f      	ldr	r3, [pc, #60]	; (800d9f4 <prvProcessTimerOrBlockTask+0x94>)
 800d9b6:	6818      	ldr	r0, [r3, #0]
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	1ad3      	subs	r3, r2, r3
 800d9be:	683a      	ldr	r2, [r7, #0]
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	f7fe fdd9 	bl	800c578 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d9c6:	f7ff f8cf 	bl	800cb68 <xTaskResumeAll>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d10a      	bne.n	800d9e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d9d0:	4b09      	ldr	r3, [pc, #36]	; (800d9f8 <prvProcessTimerOrBlockTask+0x98>)
 800d9d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9d6:	601a      	str	r2, [r3, #0]
 800d9d8:	f3bf 8f4f 	dsb	sy
 800d9dc:	f3bf 8f6f 	isb	sy
}
 800d9e0:	e001      	b.n	800d9e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d9e2:	f7ff f8c1 	bl	800cb68 <xTaskResumeAll>
}
 800d9e6:	bf00      	nop
 800d9e8:	3710      	adds	r7, #16
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
 800d9ee:	bf00      	nop
 800d9f0:	240022b8 	.word	0x240022b8
 800d9f4:	240022bc 	.word	0x240022bc
 800d9f8:	e000ed04 	.word	0xe000ed04

0800d9fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b085      	sub	sp, #20
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800da04:	4b0e      	ldr	r3, [pc, #56]	; (800da40 <prvGetNextExpireTime+0x44>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d101      	bne.n	800da12 <prvGetNextExpireTime+0x16>
 800da0e:	2201      	movs	r2, #1
 800da10:	e000      	b.n	800da14 <prvGetNextExpireTime+0x18>
 800da12:	2200      	movs	r2, #0
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d105      	bne.n	800da2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800da20:	4b07      	ldr	r3, [pc, #28]	; (800da40 <prvGetNextExpireTime+0x44>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	68db      	ldr	r3, [r3, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	60fb      	str	r3, [r7, #12]
 800da2a:	e001      	b.n	800da30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800da2c:	2300      	movs	r3, #0
 800da2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800da30:	68fb      	ldr	r3, [r7, #12]
}
 800da32:	4618      	mov	r0, r3
 800da34:	3714      	adds	r7, #20
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	240022b4 	.word	0x240022b4

0800da44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800da4c:	f7ff f928 	bl	800cca0 <xTaskGetTickCount>
 800da50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800da52:	4b0b      	ldr	r3, [pc, #44]	; (800da80 <prvSampleTimeNow+0x3c>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	68fa      	ldr	r2, [r7, #12]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d205      	bcs.n	800da68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800da5c:	f000 f918 	bl	800dc90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2201      	movs	r2, #1
 800da64:	601a      	str	r2, [r3, #0]
 800da66:	e002      	b.n	800da6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2200      	movs	r2, #0
 800da6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800da6e:	4a04      	ldr	r2, [pc, #16]	; (800da80 <prvSampleTimeNow+0x3c>)
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800da74:	68fb      	ldr	r3, [r7, #12]
}
 800da76:	4618      	mov	r0, r3
 800da78:	3710      	adds	r7, #16
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
 800da7e:	bf00      	nop
 800da80:	240022c4 	.word	0x240022c4

0800da84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b086      	sub	sp, #24
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60f8      	str	r0, [r7, #12]
 800da8c:	60b9      	str	r1, [r7, #8]
 800da8e:	607a      	str	r2, [r7, #4]
 800da90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800da92:	2300      	movs	r3, #0
 800da94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	68ba      	ldr	r2, [r7, #8]
 800da9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	68fa      	ldr	r2, [r7, #12]
 800daa0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800daa2:	68ba      	ldr	r2, [r7, #8]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d812      	bhi.n	800dad0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800daaa:	687a      	ldr	r2, [r7, #4]
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	1ad2      	subs	r2, r2, r3
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	699b      	ldr	r3, [r3, #24]
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d302      	bcc.n	800dabe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dab8:	2301      	movs	r3, #1
 800daba:	617b      	str	r3, [r7, #20]
 800dabc:	e01b      	b.n	800daf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dabe:	4b10      	ldr	r3, [pc, #64]	; (800db00 <prvInsertTimerInActiveList+0x7c>)
 800dac0:	681a      	ldr	r2, [r3, #0]
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	3304      	adds	r3, #4
 800dac6:	4619      	mov	r1, r3
 800dac8:	4610      	mov	r0, r2
 800daca:	f7fd fd3c 	bl	800b546 <vListInsert>
 800dace:	e012      	b.n	800daf6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dad0:	687a      	ldr	r2, [r7, #4]
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d206      	bcs.n	800dae6 <prvInsertTimerInActiveList+0x62>
 800dad8:	68ba      	ldr	r2, [r7, #8]
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	429a      	cmp	r2, r3
 800dade:	d302      	bcc.n	800dae6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dae0:	2301      	movs	r3, #1
 800dae2:	617b      	str	r3, [r7, #20]
 800dae4:	e007      	b.n	800daf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dae6:	4b07      	ldr	r3, [pc, #28]	; (800db04 <prvInsertTimerInActiveList+0x80>)
 800dae8:	681a      	ldr	r2, [r3, #0]
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	3304      	adds	r3, #4
 800daee:	4619      	mov	r1, r3
 800daf0:	4610      	mov	r0, r2
 800daf2:	f7fd fd28 	bl	800b546 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800daf6:	697b      	ldr	r3, [r7, #20]
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3718      	adds	r7, #24
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	240022b8 	.word	0x240022b8
 800db04:	240022b4 	.word	0x240022b4

0800db08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b08c      	sub	sp, #48	; 0x30
 800db0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db0e:	e0ac      	b.n	800dc6a <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	2b00      	cmp	r3, #0
 800db14:	f2c0 80a8 	blt.w	800dc68 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800db1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1e:	695b      	ldr	r3, [r3, #20]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d004      	beq.n	800db2e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db26:	3304      	adds	r3, #4
 800db28:	4618      	mov	r0, r3
 800db2a:	f7fd fd45 	bl	800b5b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800db2e:	1d3b      	adds	r3, r7, #4
 800db30:	4618      	mov	r0, r3
 800db32:	f7ff ff87 	bl	800da44 <prvSampleTimeNow>
 800db36:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	2b09      	cmp	r3, #9
 800db3c:	f200 8095 	bhi.w	800dc6a <prvProcessReceivedCommands+0x162>
 800db40:	a201      	add	r2, pc, #4	; (adr r2, 800db48 <prvProcessReceivedCommands+0x40>)
 800db42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db46:	bf00      	nop
 800db48:	0800db71 	.word	0x0800db71
 800db4c:	0800db71 	.word	0x0800db71
 800db50:	0800db71 	.word	0x0800db71
 800db54:	0800dbe3 	.word	0x0800dbe3
 800db58:	0800dbf7 	.word	0x0800dbf7
 800db5c:	0800dc3f 	.word	0x0800dc3f
 800db60:	0800db71 	.word	0x0800db71
 800db64:	0800db71 	.word	0x0800db71
 800db68:	0800dbe3 	.word	0x0800dbe3
 800db6c:	0800dbf7 	.word	0x0800dbf7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800db70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800db76:	f043 0301 	orr.w	r3, r3, #1
 800db7a:	b2da      	uxtb	r2, r3
 800db7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800db82:	68fa      	ldr	r2, [r7, #12]
 800db84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db86:	699b      	ldr	r3, [r3, #24]
 800db88:	18d1      	adds	r1, r2, r3
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	6a3a      	ldr	r2, [r7, #32]
 800db8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db90:	f7ff ff78 	bl	800da84 <prvInsertTimerInActiveList>
 800db94:	4603      	mov	r3, r0
 800db96:	2b00      	cmp	r3, #0
 800db98:	d067      	beq.n	800dc6a <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800db9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9c:	6a1b      	ldr	r3, [r3, #32]
 800db9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dba0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dba8:	f003 0304 	and.w	r3, r3, #4
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d05c      	beq.n	800dc6a <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dbb0:	68fa      	ldr	r2, [r7, #12]
 800dbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb4:	699b      	ldr	r3, [r3, #24]
 800dbb6:	441a      	add	r2, r3
 800dbb8:	2300      	movs	r3, #0
 800dbba:	9300      	str	r3, [sp, #0]
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	2100      	movs	r1, #0
 800dbc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbc2:	f7ff fe23 	bl	800d80c <xTimerGenericCommand>
 800dbc6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800dbc8:	69fb      	ldr	r3, [r7, #28]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d14d      	bne.n	800dc6a <prvProcessReceivedCommands+0x162>
 800dbce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd2:	f383 8811 	msr	BASEPRI, r3
 800dbd6:	f3bf 8f6f 	isb	sy
 800dbda:	f3bf 8f4f 	dsb	sy
 800dbde:	61bb      	str	r3, [r7, #24]
 800dbe0:	e7fe      	b.n	800dbe0 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dbe8:	f023 0301 	bic.w	r3, r3, #1
 800dbec:	b2da      	uxtb	r2, r3
 800dbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800dbf4:	e039      	b.n	800dc6a <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dbfc:	f043 0301 	orr.w	r3, r3, #1
 800dc00:	b2da      	uxtb	r2, r3
 800dc02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dc08:	68fa      	ldr	r2, [r7, #12]
 800dc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc0c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc10:	699b      	ldr	r3, [r3, #24]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d109      	bne.n	800dc2a <prvProcessReceivedCommands+0x122>
 800dc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc1a:	f383 8811 	msr	BASEPRI, r3
 800dc1e:	f3bf 8f6f 	isb	sy
 800dc22:	f3bf 8f4f 	dsb	sy
 800dc26:	617b      	str	r3, [r7, #20]
 800dc28:	e7fe      	b.n	800dc28 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2c:	699a      	ldr	r2, [r3, #24]
 800dc2e:	6a3b      	ldr	r3, [r7, #32]
 800dc30:	18d1      	adds	r1, r2, r3
 800dc32:	6a3b      	ldr	r3, [r7, #32]
 800dc34:	6a3a      	ldr	r2, [r7, #32]
 800dc36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc38:	f7ff ff24 	bl	800da84 <prvInsertTimerInActiveList>
					break;
 800dc3c:	e015      	b.n	800dc6a <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dc44:	f003 0302 	and.w	r3, r3, #2
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d103      	bne.n	800dc54 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800dc4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc4e:	f000 fbc9 	bl	800e3e4 <vPortFree>
 800dc52:	e00a      	b.n	800dc6a <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dc5a:	f023 0301 	bic.w	r3, r3, #1
 800dc5e:	b2da      	uxtb	r2, r3
 800dc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dc66:	e000      	b.n	800dc6a <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dc68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dc6a:	4b08      	ldr	r3, [pc, #32]	; (800dc8c <prvProcessReceivedCommands+0x184>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f107 0108 	add.w	r1, r7, #8
 800dc72:	2200      	movs	r2, #0
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fe f8cd 	bl	800be14 <xQueueReceive>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	f47f af47 	bne.w	800db10 <prvProcessReceivedCommands+0x8>
	}
}
 800dc82:	bf00      	nop
 800dc84:	3728      	adds	r7, #40	; 0x28
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	240022bc 	.word	0x240022bc

0800dc90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b088      	sub	sp, #32
 800dc94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc96:	e047      	b.n	800dd28 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dc98:	4b2d      	ldr	r3, [pc, #180]	; (800dd50 <prvSwitchTimerLists+0xc0>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	68db      	ldr	r3, [r3, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dca2:	4b2b      	ldr	r3, [pc, #172]	; (800dd50 <prvSwitchTimerLists+0xc0>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	68db      	ldr	r3, [r3, #12]
 800dca8:	68db      	ldr	r3, [r3, #12]
 800dcaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	3304      	adds	r3, #4
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	f7fd fc81 	bl	800b5b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	6a1b      	ldr	r3, [r3, #32]
 800dcba:	68f8      	ldr	r0, [r7, #12]
 800dcbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dcc4:	f003 0304 	and.w	r3, r3, #4
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d02d      	beq.n	800dd28 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	699b      	ldr	r3, [r3, #24]
 800dcd0:	693a      	ldr	r2, [r7, #16]
 800dcd2:	4413      	add	r3, r2
 800dcd4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dcd6:	68ba      	ldr	r2, [r7, #8]
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d90e      	bls.n	800dcfc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	68ba      	ldr	r2, [r7, #8]
 800dce2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	68fa      	ldr	r2, [r7, #12]
 800dce8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dcea:	4b19      	ldr	r3, [pc, #100]	; (800dd50 <prvSwitchTimerLists+0xc0>)
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	3304      	adds	r3, #4
 800dcf2:	4619      	mov	r1, r3
 800dcf4:	4610      	mov	r0, r2
 800dcf6:	f7fd fc26 	bl	800b546 <vListInsert>
 800dcfa:	e015      	b.n	800dd28 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	9300      	str	r3, [sp, #0]
 800dd00:	2300      	movs	r3, #0
 800dd02:	693a      	ldr	r2, [r7, #16]
 800dd04:	2100      	movs	r1, #0
 800dd06:	68f8      	ldr	r0, [r7, #12]
 800dd08:	f7ff fd80 	bl	800d80c <xTimerGenericCommand>
 800dd0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d109      	bne.n	800dd28 <prvSwitchTimerLists+0x98>
 800dd14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd18:	f383 8811 	msr	BASEPRI, r3
 800dd1c:	f3bf 8f6f 	isb	sy
 800dd20:	f3bf 8f4f 	dsb	sy
 800dd24:	603b      	str	r3, [r7, #0]
 800dd26:	e7fe      	b.n	800dd26 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dd28:	4b09      	ldr	r3, [pc, #36]	; (800dd50 <prvSwitchTimerLists+0xc0>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d1b2      	bne.n	800dc98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dd32:	4b07      	ldr	r3, [pc, #28]	; (800dd50 <prvSwitchTimerLists+0xc0>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dd38:	4b06      	ldr	r3, [pc, #24]	; (800dd54 <prvSwitchTimerLists+0xc4>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	4a04      	ldr	r2, [pc, #16]	; (800dd50 <prvSwitchTimerLists+0xc0>)
 800dd3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dd40:	4a04      	ldr	r2, [pc, #16]	; (800dd54 <prvSwitchTimerLists+0xc4>)
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	6013      	str	r3, [r2, #0]
}
 800dd46:	bf00      	nop
 800dd48:	3718      	adds	r7, #24
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
 800dd4e:	bf00      	nop
 800dd50:	240022b4 	.word	0x240022b4
 800dd54:	240022b8 	.word	0x240022b8

0800dd58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b082      	sub	sp, #8
 800dd5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dd5e:	f000 f965 	bl	800e02c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dd62:	4b15      	ldr	r3, [pc, #84]	; (800ddb8 <prvCheckForValidListAndQueue+0x60>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d120      	bne.n	800ddac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dd6a:	4814      	ldr	r0, [pc, #80]	; (800ddbc <prvCheckForValidListAndQueue+0x64>)
 800dd6c:	f7fd fb9a 	bl	800b4a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dd70:	4813      	ldr	r0, [pc, #76]	; (800ddc0 <prvCheckForValidListAndQueue+0x68>)
 800dd72:	f7fd fb97 	bl	800b4a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dd76:	4b13      	ldr	r3, [pc, #76]	; (800ddc4 <prvCheckForValidListAndQueue+0x6c>)
 800dd78:	4a10      	ldr	r2, [pc, #64]	; (800ddbc <prvCheckForValidListAndQueue+0x64>)
 800dd7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dd7c:	4b12      	ldr	r3, [pc, #72]	; (800ddc8 <prvCheckForValidListAndQueue+0x70>)
 800dd7e:	4a10      	ldr	r2, [pc, #64]	; (800ddc0 <prvCheckForValidListAndQueue+0x68>)
 800dd80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dd82:	2300      	movs	r3, #0
 800dd84:	9300      	str	r3, [sp, #0]
 800dd86:	4b11      	ldr	r3, [pc, #68]	; (800ddcc <prvCheckForValidListAndQueue+0x74>)
 800dd88:	4a11      	ldr	r2, [pc, #68]	; (800ddd0 <prvCheckForValidListAndQueue+0x78>)
 800dd8a:	210c      	movs	r1, #12
 800dd8c:	200a      	movs	r0, #10
 800dd8e:	f7fd fca5 	bl	800b6dc <xQueueGenericCreateStatic>
 800dd92:	4602      	mov	r2, r0
 800dd94:	4b08      	ldr	r3, [pc, #32]	; (800ddb8 <prvCheckForValidListAndQueue+0x60>)
 800dd96:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dd98:	4b07      	ldr	r3, [pc, #28]	; (800ddb8 <prvCheckForValidListAndQueue+0x60>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d005      	beq.n	800ddac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dda0:	4b05      	ldr	r3, [pc, #20]	; (800ddb8 <prvCheckForValidListAndQueue+0x60>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	490b      	ldr	r1, [pc, #44]	; (800ddd4 <prvCheckForValidListAndQueue+0x7c>)
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7fe fbbe 	bl	800c528 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ddac:	f000 f96c 	bl	800e088 <vPortExitCritical>
}
 800ddb0:	bf00      	nop
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	240022bc 	.word	0x240022bc
 800ddbc:	2400228c 	.word	0x2400228c
 800ddc0:	240022a0 	.word	0x240022a0
 800ddc4:	240022b4 	.word	0x240022b4
 800ddc8:	240022b8 	.word	0x240022b8
 800ddcc:	24002340 	.word	0x24002340
 800ddd0:	240022c8 	.word	0x240022c8
 800ddd4:	08018ae4 	.word	0x08018ae4

0800ddd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b085      	sub	sp, #20
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	3b04      	subs	r3, #4
 800dde8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ddf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	3b04      	subs	r3, #4
 800ddf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	f023 0201 	bic.w	r2, r3, #1
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	3b04      	subs	r3, #4
 800de06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800de08:	4a0c      	ldr	r2, [pc, #48]	; (800de3c <pxPortInitialiseStack+0x64>)
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	3b14      	subs	r3, #20
 800de12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800de14:	687a      	ldr	r2, [r7, #4]
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	3b04      	subs	r3, #4
 800de1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f06f 0202 	mvn.w	r2, #2
 800de26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	3b20      	subs	r3, #32
 800de2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800de2e:	68fb      	ldr	r3, [r7, #12]
}
 800de30:	4618      	mov	r0, r3
 800de32:	3714      	adds	r7, #20
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr
 800de3c:	0800de41 	.word	0x0800de41

0800de40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800de40:	b480      	push	{r7}
 800de42:	b085      	sub	sp, #20
 800de44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800de46:	2300      	movs	r3, #0
 800de48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800de4a:	4b11      	ldr	r3, [pc, #68]	; (800de90 <prvTaskExitError+0x50>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de52:	d009      	beq.n	800de68 <prvTaskExitError+0x28>
 800de54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de58:	f383 8811 	msr	BASEPRI, r3
 800de5c:	f3bf 8f6f 	isb	sy
 800de60:	f3bf 8f4f 	dsb	sy
 800de64:	60fb      	str	r3, [r7, #12]
 800de66:	e7fe      	b.n	800de66 <prvTaskExitError+0x26>
 800de68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de6c:	f383 8811 	msr	BASEPRI, r3
 800de70:	f3bf 8f6f 	isb	sy
 800de74:	f3bf 8f4f 	dsb	sy
 800de78:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800de7a:	bf00      	nop
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d0fc      	beq.n	800de7c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800de82:	bf00      	nop
 800de84:	3714      	adds	r7, #20
 800de86:	46bd      	mov	sp, r7
 800de88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8c:	4770      	bx	lr
 800de8e:	bf00      	nop
 800de90:	24000024 	.word	0x24000024
	...

0800dea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dea0:	4b07      	ldr	r3, [pc, #28]	; (800dec0 <pxCurrentTCBConst2>)
 800dea2:	6819      	ldr	r1, [r3, #0]
 800dea4:	6808      	ldr	r0, [r1, #0]
 800dea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deaa:	f380 8809 	msr	PSP, r0
 800deae:	f3bf 8f6f 	isb	sy
 800deb2:	f04f 0000 	mov.w	r0, #0
 800deb6:	f380 8811 	msr	BASEPRI, r0
 800deba:	4770      	bx	lr
 800debc:	f3af 8000 	nop.w

0800dec0 <pxCurrentTCBConst2>:
 800dec0:	24002160 	.word	0x24002160
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dec4:	bf00      	nop
 800dec6:	bf00      	nop

0800dec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dec8:	4808      	ldr	r0, [pc, #32]	; (800deec <prvPortStartFirstTask+0x24>)
 800deca:	6800      	ldr	r0, [r0, #0]
 800decc:	6800      	ldr	r0, [r0, #0]
 800dece:	f380 8808 	msr	MSP, r0
 800ded2:	f04f 0000 	mov.w	r0, #0
 800ded6:	f380 8814 	msr	CONTROL, r0
 800deda:	b662      	cpsie	i
 800dedc:	b661      	cpsie	f
 800dede:	f3bf 8f4f 	dsb	sy
 800dee2:	f3bf 8f6f 	isb	sy
 800dee6:	df00      	svc	0
 800dee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800deea:	bf00      	nop
 800deec:	e000ed08 	.word	0xe000ed08

0800def0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b086      	sub	sp, #24
 800def4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800def6:	4b44      	ldr	r3, [pc, #272]	; (800e008 <xPortStartScheduler+0x118>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	4a44      	ldr	r2, [pc, #272]	; (800e00c <xPortStartScheduler+0x11c>)
 800defc:	4293      	cmp	r3, r2
 800defe:	d109      	bne.n	800df14 <xPortStartScheduler+0x24>
 800df00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df04:	f383 8811 	msr	BASEPRI, r3
 800df08:	f3bf 8f6f 	isb	sy
 800df0c:	f3bf 8f4f 	dsb	sy
 800df10:	613b      	str	r3, [r7, #16]
 800df12:	e7fe      	b.n	800df12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800df14:	4b3c      	ldr	r3, [pc, #240]	; (800e008 <xPortStartScheduler+0x118>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4a3d      	ldr	r2, [pc, #244]	; (800e010 <xPortStartScheduler+0x120>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d109      	bne.n	800df32 <xPortStartScheduler+0x42>
 800df1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df22:	f383 8811 	msr	BASEPRI, r3
 800df26:	f3bf 8f6f 	isb	sy
 800df2a:	f3bf 8f4f 	dsb	sy
 800df2e:	60fb      	str	r3, [r7, #12]
 800df30:	e7fe      	b.n	800df30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800df32:	4b38      	ldr	r3, [pc, #224]	; (800e014 <xPortStartScheduler+0x124>)
 800df34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	b2db      	uxtb	r3, r3
 800df3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	22ff      	movs	r2, #255	; 0xff
 800df42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800df4c:	78fb      	ldrb	r3, [r7, #3]
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800df54:	b2da      	uxtb	r2, r3
 800df56:	4b30      	ldr	r3, [pc, #192]	; (800e018 <xPortStartScheduler+0x128>)
 800df58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800df5a:	4b30      	ldr	r3, [pc, #192]	; (800e01c <xPortStartScheduler+0x12c>)
 800df5c:	2207      	movs	r2, #7
 800df5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800df60:	e009      	b.n	800df76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800df62:	4b2e      	ldr	r3, [pc, #184]	; (800e01c <xPortStartScheduler+0x12c>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	3b01      	subs	r3, #1
 800df68:	4a2c      	ldr	r2, [pc, #176]	; (800e01c <xPortStartScheduler+0x12c>)
 800df6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800df6c:	78fb      	ldrb	r3, [r7, #3]
 800df6e:	b2db      	uxtb	r3, r3
 800df70:	005b      	lsls	r3, r3, #1
 800df72:	b2db      	uxtb	r3, r3
 800df74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800df76:	78fb      	ldrb	r3, [r7, #3]
 800df78:	b2db      	uxtb	r3, r3
 800df7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df7e:	2b80      	cmp	r3, #128	; 0x80
 800df80:	d0ef      	beq.n	800df62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800df82:	4b26      	ldr	r3, [pc, #152]	; (800e01c <xPortStartScheduler+0x12c>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f1c3 0307 	rsb	r3, r3, #7
 800df8a:	2b04      	cmp	r3, #4
 800df8c:	d009      	beq.n	800dfa2 <xPortStartScheduler+0xb2>
 800df8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df92:	f383 8811 	msr	BASEPRI, r3
 800df96:	f3bf 8f6f 	isb	sy
 800df9a:	f3bf 8f4f 	dsb	sy
 800df9e:	60bb      	str	r3, [r7, #8]
 800dfa0:	e7fe      	b.n	800dfa0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dfa2:	4b1e      	ldr	r3, [pc, #120]	; (800e01c <xPortStartScheduler+0x12c>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	021b      	lsls	r3, r3, #8
 800dfa8:	4a1c      	ldr	r2, [pc, #112]	; (800e01c <xPortStartScheduler+0x12c>)
 800dfaa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dfac:	4b1b      	ldr	r3, [pc, #108]	; (800e01c <xPortStartScheduler+0x12c>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dfb4:	4a19      	ldr	r2, [pc, #100]	; (800e01c <xPortStartScheduler+0x12c>)
 800dfb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	b2da      	uxtb	r2, r3
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dfc0:	4b17      	ldr	r3, [pc, #92]	; (800e020 <xPortStartScheduler+0x130>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	4a16      	ldr	r2, [pc, #88]	; (800e020 <xPortStartScheduler+0x130>)
 800dfc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dfca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dfcc:	4b14      	ldr	r3, [pc, #80]	; (800e020 <xPortStartScheduler+0x130>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4a13      	ldr	r2, [pc, #76]	; (800e020 <xPortStartScheduler+0x130>)
 800dfd2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dfd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dfd8:	f000 f8d6 	bl	800e188 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dfdc:	4b11      	ldr	r3, [pc, #68]	; (800e024 <xPortStartScheduler+0x134>)
 800dfde:	2200      	movs	r2, #0
 800dfe0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dfe2:	f000 f8f5 	bl	800e1d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dfe6:	4b10      	ldr	r3, [pc, #64]	; (800e028 <xPortStartScheduler+0x138>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	4a0f      	ldr	r2, [pc, #60]	; (800e028 <xPortStartScheduler+0x138>)
 800dfec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dff0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dff2:	f7ff ff69 	bl	800dec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dff6:	f7fe ff2d 	bl	800ce54 <vTaskSwitchContext>
	prvTaskExitError();
 800dffa:	f7ff ff21 	bl	800de40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dffe:	2300      	movs	r3, #0
}
 800e000:	4618      	mov	r0, r3
 800e002:	3718      	adds	r7, #24
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}
 800e008:	e000ed00 	.word	0xe000ed00
 800e00c:	410fc271 	.word	0x410fc271
 800e010:	410fc270 	.word	0x410fc270
 800e014:	e000e400 	.word	0xe000e400
 800e018:	24002388 	.word	0x24002388
 800e01c:	2400238c 	.word	0x2400238c
 800e020:	e000ed20 	.word	0xe000ed20
 800e024:	24000024 	.word	0x24000024
 800e028:	e000ef34 	.word	0xe000ef34

0800e02c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e02c:	b480      	push	{r7}
 800e02e:	b083      	sub	sp, #12
 800e030:	af00      	add	r7, sp, #0
 800e032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e036:	f383 8811 	msr	BASEPRI, r3
 800e03a:	f3bf 8f6f 	isb	sy
 800e03e:	f3bf 8f4f 	dsb	sy
 800e042:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e044:	4b0e      	ldr	r3, [pc, #56]	; (800e080 <vPortEnterCritical+0x54>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	3301      	adds	r3, #1
 800e04a:	4a0d      	ldr	r2, [pc, #52]	; (800e080 <vPortEnterCritical+0x54>)
 800e04c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e04e:	4b0c      	ldr	r3, [pc, #48]	; (800e080 <vPortEnterCritical+0x54>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2b01      	cmp	r3, #1
 800e054:	d10e      	bne.n	800e074 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e056:	4b0b      	ldr	r3, [pc, #44]	; (800e084 <vPortEnterCritical+0x58>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d009      	beq.n	800e074 <vPortEnterCritical+0x48>
 800e060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e064:	f383 8811 	msr	BASEPRI, r3
 800e068:	f3bf 8f6f 	isb	sy
 800e06c:	f3bf 8f4f 	dsb	sy
 800e070:	603b      	str	r3, [r7, #0]
 800e072:	e7fe      	b.n	800e072 <vPortEnterCritical+0x46>
	}
}
 800e074:	bf00      	nop
 800e076:	370c      	adds	r7, #12
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr
 800e080:	24000024 	.word	0x24000024
 800e084:	e000ed04 	.word	0xe000ed04

0800e088 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e088:	b480      	push	{r7}
 800e08a:	b083      	sub	sp, #12
 800e08c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e08e:	4b11      	ldr	r3, [pc, #68]	; (800e0d4 <vPortExitCritical+0x4c>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d109      	bne.n	800e0aa <vPortExitCritical+0x22>
 800e096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e09a:	f383 8811 	msr	BASEPRI, r3
 800e09e:	f3bf 8f6f 	isb	sy
 800e0a2:	f3bf 8f4f 	dsb	sy
 800e0a6:	607b      	str	r3, [r7, #4]
 800e0a8:	e7fe      	b.n	800e0a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800e0aa:	4b0a      	ldr	r3, [pc, #40]	; (800e0d4 <vPortExitCritical+0x4c>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	4a08      	ldr	r2, [pc, #32]	; (800e0d4 <vPortExitCritical+0x4c>)
 800e0b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e0b4:	4b07      	ldr	r3, [pc, #28]	; (800e0d4 <vPortExitCritical+0x4c>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d104      	bne.n	800e0c6 <vPortExitCritical+0x3e>
 800e0bc:	2300      	movs	r3, #0
 800e0be:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e0c6:	bf00      	nop
 800e0c8:	370c      	adds	r7, #12
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d0:	4770      	bx	lr
 800e0d2:	bf00      	nop
 800e0d4:	24000024 	.word	0x24000024
	...

0800e0e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e0e0:	f3ef 8009 	mrs	r0, PSP
 800e0e4:	f3bf 8f6f 	isb	sy
 800e0e8:	4b15      	ldr	r3, [pc, #84]	; (800e140 <pxCurrentTCBConst>)
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	f01e 0f10 	tst.w	lr, #16
 800e0f0:	bf08      	it	eq
 800e0f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e0f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0fa:	6010      	str	r0, [r2, #0]
 800e0fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e100:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e104:	f380 8811 	msr	BASEPRI, r0
 800e108:	f3bf 8f4f 	dsb	sy
 800e10c:	f3bf 8f6f 	isb	sy
 800e110:	f7fe fea0 	bl	800ce54 <vTaskSwitchContext>
 800e114:	f04f 0000 	mov.w	r0, #0
 800e118:	f380 8811 	msr	BASEPRI, r0
 800e11c:	bc09      	pop	{r0, r3}
 800e11e:	6819      	ldr	r1, [r3, #0]
 800e120:	6808      	ldr	r0, [r1, #0]
 800e122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e126:	f01e 0f10 	tst.w	lr, #16
 800e12a:	bf08      	it	eq
 800e12c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e130:	f380 8809 	msr	PSP, r0
 800e134:	f3bf 8f6f 	isb	sy
 800e138:	4770      	bx	lr
 800e13a:	bf00      	nop
 800e13c:	f3af 8000 	nop.w

0800e140 <pxCurrentTCBConst>:
 800e140:	24002160 	.word	0x24002160
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e144:	bf00      	nop
 800e146:	bf00      	nop

0800e148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b082      	sub	sp, #8
 800e14c:	af00      	add	r7, sp, #0
	__asm volatile
 800e14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e152:	f383 8811 	msr	BASEPRI, r3
 800e156:	f3bf 8f6f 	isb	sy
 800e15a:	f3bf 8f4f 	dsb	sy
 800e15e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e160:	f7fe fdc0 	bl	800cce4 <xTaskIncrementTick>
 800e164:	4603      	mov	r3, r0
 800e166:	2b00      	cmp	r3, #0
 800e168:	d003      	beq.n	800e172 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e16a:	4b06      	ldr	r3, [pc, #24]	; (800e184 <SysTick_Handler+0x3c>)
 800e16c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e170:	601a      	str	r2, [r3, #0]
 800e172:	2300      	movs	r3, #0
 800e174:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e17c:	bf00      	nop
 800e17e:	3708      	adds	r7, #8
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	e000ed04 	.word	0xe000ed04

0800e188 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e188:	b480      	push	{r7}
 800e18a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e18c:	4b0b      	ldr	r3, [pc, #44]	; (800e1bc <vPortSetupTimerInterrupt+0x34>)
 800e18e:	2200      	movs	r2, #0
 800e190:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e192:	4b0b      	ldr	r3, [pc, #44]	; (800e1c0 <vPortSetupTimerInterrupt+0x38>)
 800e194:	2200      	movs	r2, #0
 800e196:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e198:	4b0a      	ldr	r3, [pc, #40]	; (800e1c4 <vPortSetupTimerInterrupt+0x3c>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	4a0a      	ldr	r2, [pc, #40]	; (800e1c8 <vPortSetupTimerInterrupt+0x40>)
 800e19e:	fba2 2303 	umull	r2, r3, r2, r3
 800e1a2:	099b      	lsrs	r3, r3, #6
 800e1a4:	4a09      	ldr	r2, [pc, #36]	; (800e1cc <vPortSetupTimerInterrupt+0x44>)
 800e1a6:	3b01      	subs	r3, #1
 800e1a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e1aa:	4b04      	ldr	r3, [pc, #16]	; (800e1bc <vPortSetupTimerInterrupt+0x34>)
 800e1ac:	2207      	movs	r2, #7
 800e1ae:	601a      	str	r2, [r3, #0]
}
 800e1b0:	bf00      	nop
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b8:	4770      	bx	lr
 800e1ba:	bf00      	nop
 800e1bc:	e000e010 	.word	0xe000e010
 800e1c0:	e000e018 	.word	0xe000e018
 800e1c4:	24000000 	.word	0x24000000
 800e1c8:	10624dd3 	.word	0x10624dd3
 800e1cc:	e000e014 	.word	0xe000e014

0800e1d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e1d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e1e0 <vPortEnableVFP+0x10>
 800e1d4:	6801      	ldr	r1, [r0, #0]
 800e1d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e1da:	6001      	str	r1, [r0, #0]
 800e1dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e1de:	bf00      	nop
 800e1e0:	e000ed88 	.word	0xe000ed88

0800e1e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b085      	sub	sp, #20
 800e1e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e1ea:	f3ef 8305 	mrs	r3, IPSR
 800e1ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2b0f      	cmp	r3, #15
 800e1f4:	d913      	bls.n	800e21e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e1f6:	4a16      	ldr	r2, [pc, #88]	; (800e250 <vPortValidateInterruptPriority+0x6c>)
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	4413      	add	r3, r2
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e200:	4b14      	ldr	r3, [pc, #80]	; (800e254 <vPortValidateInterruptPriority+0x70>)
 800e202:	781b      	ldrb	r3, [r3, #0]
 800e204:	7afa      	ldrb	r2, [r7, #11]
 800e206:	429a      	cmp	r2, r3
 800e208:	d209      	bcs.n	800e21e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800e20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e20e:	f383 8811 	msr	BASEPRI, r3
 800e212:	f3bf 8f6f 	isb	sy
 800e216:	f3bf 8f4f 	dsb	sy
 800e21a:	607b      	str	r3, [r7, #4]
 800e21c:	e7fe      	b.n	800e21c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e21e:	4b0e      	ldr	r3, [pc, #56]	; (800e258 <vPortValidateInterruptPriority+0x74>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e226:	4b0d      	ldr	r3, [pc, #52]	; (800e25c <vPortValidateInterruptPriority+0x78>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d909      	bls.n	800e242 <vPortValidateInterruptPriority+0x5e>
 800e22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e232:	f383 8811 	msr	BASEPRI, r3
 800e236:	f3bf 8f6f 	isb	sy
 800e23a:	f3bf 8f4f 	dsb	sy
 800e23e:	603b      	str	r3, [r7, #0]
 800e240:	e7fe      	b.n	800e240 <vPortValidateInterruptPriority+0x5c>
	}
 800e242:	bf00      	nop
 800e244:	3714      	adds	r7, #20
 800e246:	46bd      	mov	sp, r7
 800e248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24c:	4770      	bx	lr
 800e24e:	bf00      	nop
 800e250:	e000e3f0 	.word	0xe000e3f0
 800e254:	24002388 	.word	0x24002388
 800e258:	e000ed0c 	.word	0xe000ed0c
 800e25c:	2400238c 	.word	0x2400238c

0800e260 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b08a      	sub	sp, #40	; 0x28
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e268:	2300      	movs	r3, #0
 800e26a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e26c:	f7fe fc6e 	bl	800cb4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e270:	4b57      	ldr	r3, [pc, #348]	; (800e3d0 <pvPortMalloc+0x170>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d101      	bne.n	800e27c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e278:	f000 f90c 	bl	800e494 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e27c:	4b55      	ldr	r3, [pc, #340]	; (800e3d4 <pvPortMalloc+0x174>)
 800e27e:	681a      	ldr	r2, [r3, #0]
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	4013      	ands	r3, r2
 800e284:	2b00      	cmp	r3, #0
 800e286:	f040 808c 	bne.w	800e3a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d01c      	beq.n	800e2ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800e290:	2208      	movs	r2, #8
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	4413      	add	r3, r2
 800e296:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f003 0307 	and.w	r3, r3, #7
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d013      	beq.n	800e2ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f023 0307 	bic.w	r3, r3, #7
 800e2a8:	3308      	adds	r3, #8
 800e2aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f003 0307 	and.w	r3, r3, #7
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d009      	beq.n	800e2ca <pvPortMalloc+0x6a>
 800e2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ba:	f383 8811 	msr	BASEPRI, r3
 800e2be:	f3bf 8f6f 	isb	sy
 800e2c2:	f3bf 8f4f 	dsb	sy
 800e2c6:	617b      	str	r3, [r7, #20]
 800e2c8:	e7fe      	b.n	800e2c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d068      	beq.n	800e3a2 <pvPortMalloc+0x142>
 800e2d0:	4b41      	ldr	r3, [pc, #260]	; (800e3d8 <pvPortMalloc+0x178>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	687a      	ldr	r2, [r7, #4]
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	d863      	bhi.n	800e3a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e2da:	4b40      	ldr	r3, [pc, #256]	; (800e3dc <pvPortMalloc+0x17c>)
 800e2dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e2de:	4b3f      	ldr	r3, [pc, #252]	; (800e3dc <pvPortMalloc+0x17c>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e2e4:	e004      	b.n	800e2f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800e2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	687a      	ldr	r2, [r7, #4]
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d903      	bls.n	800e302 <pvPortMalloc+0xa2>
 800e2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d1f1      	bne.n	800e2e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e302:	4b33      	ldr	r3, [pc, #204]	; (800e3d0 <pvPortMalloc+0x170>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e308:	429a      	cmp	r2, r3
 800e30a:	d04a      	beq.n	800e3a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e30c:	6a3b      	ldr	r3, [r7, #32]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	2208      	movs	r2, #8
 800e312:	4413      	add	r3, r2
 800e314:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	6a3b      	ldr	r3, [r7, #32]
 800e31c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e320:	685a      	ldr	r2, [r3, #4]
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	1ad2      	subs	r2, r2, r3
 800e326:	2308      	movs	r3, #8
 800e328:	005b      	lsls	r3, r3, #1
 800e32a:	429a      	cmp	r2, r3
 800e32c:	d91e      	bls.n	800e36c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e32e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	4413      	add	r3, r2
 800e334:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e336:	69bb      	ldr	r3, [r7, #24]
 800e338:	f003 0307 	and.w	r3, r3, #7
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d009      	beq.n	800e354 <pvPortMalloc+0xf4>
 800e340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e344:	f383 8811 	msr	BASEPRI, r3
 800e348:	f3bf 8f6f 	isb	sy
 800e34c:	f3bf 8f4f 	dsb	sy
 800e350:	613b      	str	r3, [r7, #16]
 800e352:	e7fe      	b.n	800e352 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e356:	685a      	ldr	r2, [r3, #4]
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	1ad2      	subs	r2, r2, r3
 800e35c:	69bb      	ldr	r3, [r7, #24]
 800e35e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e362:	687a      	ldr	r2, [r7, #4]
 800e364:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e366:	69b8      	ldr	r0, [r7, #24]
 800e368:	f000 f8f6 	bl	800e558 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e36c:	4b1a      	ldr	r3, [pc, #104]	; (800e3d8 <pvPortMalloc+0x178>)
 800e36e:	681a      	ldr	r2, [r3, #0]
 800e370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e372:	685b      	ldr	r3, [r3, #4]
 800e374:	1ad3      	subs	r3, r2, r3
 800e376:	4a18      	ldr	r2, [pc, #96]	; (800e3d8 <pvPortMalloc+0x178>)
 800e378:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e37a:	4b17      	ldr	r3, [pc, #92]	; (800e3d8 <pvPortMalloc+0x178>)
 800e37c:	681a      	ldr	r2, [r3, #0]
 800e37e:	4b18      	ldr	r3, [pc, #96]	; (800e3e0 <pvPortMalloc+0x180>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	429a      	cmp	r2, r3
 800e384:	d203      	bcs.n	800e38e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e386:	4b14      	ldr	r3, [pc, #80]	; (800e3d8 <pvPortMalloc+0x178>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	4a15      	ldr	r2, [pc, #84]	; (800e3e0 <pvPortMalloc+0x180>)
 800e38c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e390:	685a      	ldr	r2, [r3, #4]
 800e392:	4b10      	ldr	r3, [pc, #64]	; (800e3d4 <pvPortMalloc+0x174>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	431a      	orrs	r2, r3
 800e398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39e:	2200      	movs	r2, #0
 800e3a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e3a2:	f7fe fbe1 	bl	800cb68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e3a6:	69fb      	ldr	r3, [r7, #28]
 800e3a8:	f003 0307 	and.w	r3, r3, #7
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d009      	beq.n	800e3c4 <pvPortMalloc+0x164>
 800e3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b4:	f383 8811 	msr	BASEPRI, r3
 800e3b8:	f3bf 8f6f 	isb	sy
 800e3bc:	f3bf 8f4f 	dsb	sy
 800e3c0:	60fb      	str	r3, [r7, #12]
 800e3c2:	e7fe      	b.n	800e3c2 <pvPortMalloc+0x162>
	return pvReturn;
 800e3c4:	69fb      	ldr	r3, [r7, #28]
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3728      	adds	r7, #40	; 0x28
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
 800e3ce:	bf00      	nop
 800e3d0:	24021798 	.word	0x24021798
 800e3d4:	240217a4 	.word	0x240217a4
 800e3d8:	2402179c 	.word	0x2402179c
 800e3dc:	24021790 	.word	0x24021790
 800e3e0:	240217a0 	.word	0x240217a0

0800e3e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b086      	sub	sp, #24
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d046      	beq.n	800e484 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e3f6:	2308      	movs	r3, #8
 800e3f8:	425b      	negs	r3, r3
 800e3fa:	697a      	ldr	r2, [r7, #20]
 800e3fc:	4413      	add	r3, r2
 800e3fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	685a      	ldr	r2, [r3, #4]
 800e408:	4b20      	ldr	r3, [pc, #128]	; (800e48c <vPortFree+0xa8>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	4013      	ands	r3, r2
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d109      	bne.n	800e426 <vPortFree+0x42>
 800e412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e416:	f383 8811 	msr	BASEPRI, r3
 800e41a:	f3bf 8f6f 	isb	sy
 800e41e:	f3bf 8f4f 	dsb	sy
 800e422:	60fb      	str	r3, [r7, #12]
 800e424:	e7fe      	b.n	800e424 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e426:	693b      	ldr	r3, [r7, #16]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d009      	beq.n	800e442 <vPortFree+0x5e>
 800e42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e432:	f383 8811 	msr	BASEPRI, r3
 800e436:	f3bf 8f6f 	isb	sy
 800e43a:	f3bf 8f4f 	dsb	sy
 800e43e:	60bb      	str	r3, [r7, #8]
 800e440:	e7fe      	b.n	800e440 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	685a      	ldr	r2, [r3, #4]
 800e446:	4b11      	ldr	r3, [pc, #68]	; (800e48c <vPortFree+0xa8>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	4013      	ands	r3, r2
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d019      	beq.n	800e484 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e450:	693b      	ldr	r3, [r7, #16]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d115      	bne.n	800e484 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	685a      	ldr	r2, [r3, #4]
 800e45c:	4b0b      	ldr	r3, [pc, #44]	; (800e48c <vPortFree+0xa8>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	43db      	mvns	r3, r3
 800e462:	401a      	ands	r2, r3
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e468:	f7fe fb70 	bl	800cb4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	685a      	ldr	r2, [r3, #4]
 800e470:	4b07      	ldr	r3, [pc, #28]	; (800e490 <vPortFree+0xac>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4413      	add	r3, r2
 800e476:	4a06      	ldr	r2, [pc, #24]	; (800e490 <vPortFree+0xac>)
 800e478:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e47a:	6938      	ldr	r0, [r7, #16]
 800e47c:	f000 f86c 	bl	800e558 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e480:	f7fe fb72 	bl	800cb68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e484:	bf00      	nop
 800e486:	3718      	adds	r7, #24
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}
 800e48c:	240217a4 	.word	0x240217a4
 800e490:	2402179c 	.word	0x2402179c

0800e494 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e494:	b480      	push	{r7}
 800e496:	b085      	sub	sp, #20
 800e498:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e49a:	f44f 33fa 	mov.w	r3, #128000	; 0x1f400
 800e49e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e4a0:	4b27      	ldr	r3, [pc, #156]	; (800e540 <prvHeapInit+0xac>)
 800e4a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	f003 0307 	and.w	r3, r3, #7
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d00c      	beq.n	800e4c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	3307      	adds	r3, #7
 800e4b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	f023 0307 	bic.w	r3, r3, #7
 800e4ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e4bc:	68ba      	ldr	r2, [r7, #8]
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	1ad3      	subs	r3, r2, r3
 800e4c2:	4a1f      	ldr	r2, [pc, #124]	; (800e540 <prvHeapInit+0xac>)
 800e4c4:	4413      	add	r3, r2
 800e4c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e4cc:	4a1d      	ldr	r2, [pc, #116]	; (800e544 <prvHeapInit+0xb0>)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e4d2:	4b1c      	ldr	r3, [pc, #112]	; (800e544 <prvHeapInit+0xb0>)
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	68ba      	ldr	r2, [r7, #8]
 800e4dc:	4413      	add	r3, r2
 800e4de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e4e0:	2208      	movs	r2, #8
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	1a9b      	subs	r3, r3, r2
 800e4e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	f023 0307 	bic.w	r3, r3, #7
 800e4ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	4a15      	ldr	r2, [pc, #84]	; (800e548 <prvHeapInit+0xb4>)
 800e4f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e4f6:	4b14      	ldr	r3, [pc, #80]	; (800e548 <prvHeapInit+0xb4>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e4fe:	4b12      	ldr	r3, [pc, #72]	; (800e548 <prvHeapInit+0xb4>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2200      	movs	r2, #0
 800e504:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	68fa      	ldr	r2, [r7, #12]
 800e50e:	1ad2      	subs	r2, r2, r3
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e514:	4b0c      	ldr	r3, [pc, #48]	; (800e548 <prvHeapInit+0xb4>)
 800e516:	681a      	ldr	r2, [r3, #0]
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	685b      	ldr	r3, [r3, #4]
 800e520:	4a0a      	ldr	r2, [pc, #40]	; (800e54c <prvHeapInit+0xb8>)
 800e522:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	685b      	ldr	r3, [r3, #4]
 800e528:	4a09      	ldr	r2, [pc, #36]	; (800e550 <prvHeapInit+0xbc>)
 800e52a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e52c:	4b09      	ldr	r3, [pc, #36]	; (800e554 <prvHeapInit+0xc0>)
 800e52e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e532:	601a      	str	r2, [r3, #0]
}
 800e534:	bf00      	nop
 800e536:	3714      	adds	r7, #20
 800e538:	46bd      	mov	sp, r7
 800e53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53e:	4770      	bx	lr
 800e540:	24002390 	.word	0x24002390
 800e544:	24021790 	.word	0x24021790
 800e548:	24021798 	.word	0x24021798
 800e54c:	240217a0 	.word	0x240217a0
 800e550:	2402179c 	.word	0x2402179c
 800e554:	240217a4 	.word	0x240217a4

0800e558 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e558:	b480      	push	{r7}
 800e55a:	b085      	sub	sp, #20
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e560:	4b28      	ldr	r3, [pc, #160]	; (800e604 <prvInsertBlockIntoFreeList+0xac>)
 800e562:	60fb      	str	r3, [r7, #12]
 800e564:	e002      	b.n	800e56c <prvInsertBlockIntoFreeList+0x14>
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	60fb      	str	r3, [r7, #12]
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	687a      	ldr	r2, [r7, #4]
 800e572:	429a      	cmp	r2, r3
 800e574:	d8f7      	bhi.n	800e566 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	68ba      	ldr	r2, [r7, #8]
 800e580:	4413      	add	r3, r2
 800e582:	687a      	ldr	r2, [r7, #4]
 800e584:	429a      	cmp	r2, r3
 800e586:	d108      	bne.n	800e59a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	685a      	ldr	r2, [r3, #4]
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	685b      	ldr	r3, [r3, #4]
 800e590:	441a      	add	r2, r3
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	68ba      	ldr	r2, [r7, #8]
 800e5a4:	441a      	add	r2, r3
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	d118      	bne.n	800e5e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681a      	ldr	r2, [r3, #0]
 800e5b2:	4b15      	ldr	r3, [pc, #84]	; (800e608 <prvInsertBlockIntoFreeList+0xb0>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	d00d      	beq.n	800e5d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	685a      	ldr	r2, [r3, #4]
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	685b      	ldr	r3, [r3, #4]
 800e5c4:	441a      	add	r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	681a      	ldr	r2, [r3, #0]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	601a      	str	r2, [r3, #0]
 800e5d4:	e008      	b.n	800e5e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e5d6:	4b0c      	ldr	r3, [pc, #48]	; (800e608 <prvInsertBlockIntoFreeList+0xb0>)
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	601a      	str	r2, [r3, #0]
 800e5de:	e003      	b.n	800e5e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681a      	ldr	r2, [r3, #0]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e5e8:	68fa      	ldr	r2, [r7, #12]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	d002      	beq.n	800e5f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	687a      	ldr	r2, [r7, #4]
 800e5f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e5f6:	bf00      	nop
 800e5f8:	3714      	adds	r7, #20
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e600:	4770      	bx	lr
 800e602:	bf00      	nop
 800e604:	24021790 	.word	0x24021790
 800e608:	24021798 	.word	0x24021798

0800e60c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b084      	sub	sp, #16
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800e614:	4b29      	ldr	r3, [pc, #164]	; (800e6bc <tcpip_thread+0xb0>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d005      	beq.n	800e628 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800e61c:	4b27      	ldr	r3, [pc, #156]	; (800e6bc <tcpip_thread+0xb0>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4a27      	ldr	r2, [pc, #156]	; (800e6c0 <tcpip_thread+0xb4>)
 800e622:	6812      	ldr	r2, [r2, #0]
 800e624:	4610      	mov	r0, r2
 800e626:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800e628:	4826      	ldr	r0, [pc, #152]	; (800e6c4 <tcpip_thread+0xb8>)
 800e62a:	f009 f90d 	bl	8017848 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800e62e:	4825      	ldr	r0, [pc, #148]	; (800e6c4 <tcpip_thread+0xb8>)
 800e630:	f009 f919 	bl	8017866 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800e634:	f107 030c 	add.w	r3, r7, #12
 800e638:	4619      	mov	r1, r3
 800e63a:	4823      	ldr	r0, [pc, #140]	; (800e6c8 <tcpip_thread+0xbc>)
 800e63c:	f006 fbbc 	bl	8014db8 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800e640:	4820      	ldr	r0, [pc, #128]	; (800e6c4 <tcpip_thread+0xb8>)
 800e642:	f009 f901 	bl	8017848 <sys_mutex_lock>
    if (msg == NULL) {
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d106      	bne.n	800e65a <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e64c:	4b1f      	ldr	r3, [pc, #124]	; (800e6cc <tcpip_thread+0xc0>)
 800e64e:	2269      	movs	r2, #105	; 0x69
 800e650:	491f      	ldr	r1, [pc, #124]	; (800e6d0 <tcpip_thread+0xc4>)
 800e652:	4820      	ldr	r0, [pc, #128]	; (800e6d4 <tcpip_thread+0xc8>)
 800e654:	f009 f99e 	bl	8017994 <iprintf>
      continue;
 800e658:	e02f      	b.n	800e6ba <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	2b03      	cmp	r3, #3
 800e660:	d011      	beq.n	800e686 <tcpip_thread+0x7a>
 800e662:	2b04      	cmp	r3, #4
 800e664:	d01b      	beq.n	800e69e <tcpip_thread+0x92>
 800e666:	2b02      	cmp	r3, #2
 800e668:	d120      	bne.n	800e6ac <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	68db      	ldr	r3, [r3, #12]
 800e66e:	68fa      	ldr	r2, [r7, #12]
 800e670:	6850      	ldr	r0, [r2, #4]
 800e672:	68fa      	ldr	r2, [r7, #12]
 800e674:	6892      	ldr	r2, [r2, #8]
 800e676:	4611      	mov	r1, r2
 800e678:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	4619      	mov	r1, r3
 800e67e:	2009      	movs	r0, #9
 800e680:	f000 fe60 	bl	800f344 <memp_free>
      break;
 800e684:	e019      	b.n	800e6ba <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	685b      	ldr	r3, [r3, #4]
 800e68a:	68fa      	ldr	r2, [r7, #12]
 800e68c:	6892      	ldr	r2, [r2, #8]
 800e68e:	4610      	mov	r0, r2
 800e690:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	4619      	mov	r1, r3
 800e696:	2008      	movs	r0, #8
 800e698:	f000 fe54 	bl	800f344 <memp_free>
      break;
 800e69c:	e00d      	b.n	800e6ba <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	685b      	ldr	r3, [r3, #4]
 800e6a2:	68fa      	ldr	r2, [r7, #12]
 800e6a4:	6892      	ldr	r2, [r2, #8]
 800e6a6:	4610      	mov	r0, r2
 800e6a8:	4798      	blx	r3
      break;
 800e6aa:	e006      	b.n	800e6ba <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e6ac:	4b07      	ldr	r3, [pc, #28]	; (800e6cc <tcpip_thread+0xc0>)
 800e6ae:	229b      	movs	r2, #155	; 0x9b
 800e6b0:	4907      	ldr	r1, [pc, #28]	; (800e6d0 <tcpip_thread+0xc4>)
 800e6b2:	4808      	ldr	r0, [pc, #32]	; (800e6d4 <tcpip_thread+0xc8>)
 800e6b4:	f009 f96e 	bl	8017994 <iprintf>
      break;
 800e6b8:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800e6ba:	e7b8      	b.n	800e62e <tcpip_thread+0x22>
 800e6bc:	240217a8 	.word	0x240217a8
 800e6c0:	240217ac 	.word	0x240217ac
 800e6c4:	24021c50 	.word	0x24021c50
 800e6c8:	240217b0 	.word	0x240217b0
 800e6cc:	08018aec 	.word	0x08018aec
 800e6d0:	08018b1c 	.word	0x08018b1c
 800e6d4:	08018b3c 	.word	0x08018b3c

0800e6d8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b086      	sub	sp, #24
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	60b9      	str	r1, [r7, #8]
 800e6e2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800e6e4:	481a      	ldr	r0, [pc, #104]	; (800e750 <tcpip_inpkt+0x78>)
 800e6e6:	f009 f873 	bl	80177d0 <sys_mbox_valid>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d105      	bne.n	800e6fc <tcpip_inpkt+0x24>
 800e6f0:	4b18      	ldr	r3, [pc, #96]	; (800e754 <tcpip_inpkt+0x7c>)
 800e6f2:	22b5      	movs	r2, #181	; 0xb5
 800e6f4:	4918      	ldr	r1, [pc, #96]	; (800e758 <tcpip_inpkt+0x80>)
 800e6f6:	4819      	ldr	r0, [pc, #100]	; (800e75c <tcpip_inpkt+0x84>)
 800e6f8:	f009 f94c 	bl	8017994 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800e6fc:	2009      	movs	r0, #9
 800e6fe:	f000 fdab 	bl	800f258 <memp_malloc>
 800e702:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d102      	bne.n	800e710 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800e70a:	f04f 33ff 	mov.w	r3, #4294967295
 800e70e:	e01a      	b.n	800e746 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	2202      	movs	r2, #2
 800e714:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	68fa      	ldr	r2, [r7, #12]
 800e71a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	68ba      	ldr	r2, [r7, #8]
 800e720:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	687a      	ldr	r2, [r7, #4]
 800e726:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800e728:	6979      	ldr	r1, [r7, #20]
 800e72a:	4809      	ldr	r0, [pc, #36]	; (800e750 <tcpip_inpkt+0x78>)
 800e72c:	f008 fff7 	bl	801771e <sys_mbox_trypost>
 800e730:	4603      	mov	r3, r0
 800e732:	2b00      	cmp	r3, #0
 800e734:	d006      	beq.n	800e744 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e736:	6979      	ldr	r1, [r7, #20]
 800e738:	2009      	movs	r0, #9
 800e73a:	f000 fe03 	bl	800f344 <memp_free>
    return ERR_MEM;
 800e73e:	f04f 33ff 	mov.w	r3, #4294967295
 800e742:	e000      	b.n	800e746 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800e744:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800e746:	4618      	mov	r0, r3
 800e748:	3718      	adds	r7, #24
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}
 800e74e:	bf00      	nop
 800e750:	240217b0 	.word	0x240217b0
 800e754:	08018aec 	.word	0x08018aec
 800e758:	08018b64 	.word	0x08018b64
 800e75c:	08018b3c 	.word	0x08018b3c

0800e760 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b082      	sub	sp, #8
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800e770:	f003 0318 	and.w	r3, r3, #24
 800e774:	2b00      	cmp	r3, #0
 800e776:	d006      	beq.n	800e786 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800e778:	4a08      	ldr	r2, [pc, #32]	; (800e79c <tcpip_input+0x3c>)
 800e77a:	6839      	ldr	r1, [r7, #0]
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f7ff ffab 	bl	800e6d8 <tcpip_inpkt>
 800e782:	4603      	mov	r3, r0
 800e784:	e005      	b.n	800e792 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800e786:	4a06      	ldr	r2, [pc, #24]	; (800e7a0 <tcpip_input+0x40>)
 800e788:	6839      	ldr	r1, [r7, #0]
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f7ff ffa4 	bl	800e6d8 <tcpip_inpkt>
 800e790:	4603      	mov	r3, r0
}
 800e792:	4618      	mov	r0, r3
 800e794:	3708      	adds	r7, #8
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
 800e79a:	bf00      	nop
 800e79c:	080174f9 	.word	0x080174f9
 800e7a0:	080164bd 	.word	0x080164bd

0800e7a4 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b086      	sub	sp, #24
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800e7b2:	481d      	ldr	r0, [pc, #116]	; (800e828 <tcpip_callback_with_block+0x84>)
 800e7b4:	f009 f80c 	bl	80177d0 <sys_mbox_valid>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d105      	bne.n	800e7ca <tcpip_callback_with_block+0x26>
 800e7be:	4b1b      	ldr	r3, [pc, #108]	; (800e82c <tcpip_callback_with_block+0x88>)
 800e7c0:	22ee      	movs	r2, #238	; 0xee
 800e7c2:	491b      	ldr	r1, [pc, #108]	; (800e830 <tcpip_callback_with_block+0x8c>)
 800e7c4:	481b      	ldr	r0, [pc, #108]	; (800e834 <tcpip_callback_with_block+0x90>)
 800e7c6:	f009 f8e5 	bl	8017994 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800e7ca:	2008      	movs	r0, #8
 800e7cc:	f000 fd44 	bl	800f258 <memp_malloc>
 800e7d0:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e7d2:	697b      	ldr	r3, [r7, #20]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d102      	bne.n	800e7de <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800e7d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e7dc:	e01f      	b.n	800e81e <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	2203      	movs	r2, #3
 800e7e2:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	68fa      	ldr	r2, [r7, #12]
 800e7e8:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	68ba      	ldr	r2, [r7, #8]
 800e7ee:	609a      	str	r2, [r3, #8]
  if (block) {
 800e7f0:	79fb      	ldrb	r3, [r7, #7]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d004      	beq.n	800e800 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800e7f6:	6979      	ldr	r1, [r7, #20]
 800e7f8:	480b      	ldr	r0, [pc, #44]	; (800e828 <tcpip_callback_with_block+0x84>)
 800e7fa:	f008 ff7b 	bl	80176f4 <sys_mbox_post>
 800e7fe:	e00d      	b.n	800e81c <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800e800:	6979      	ldr	r1, [r7, #20]
 800e802:	4809      	ldr	r0, [pc, #36]	; (800e828 <tcpip_callback_with_block+0x84>)
 800e804:	f008 ff8b 	bl	801771e <sys_mbox_trypost>
 800e808:	4603      	mov	r3, r0
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d006      	beq.n	800e81c <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e80e:	6979      	ldr	r1, [r7, #20]
 800e810:	2008      	movs	r0, #8
 800e812:	f000 fd97 	bl	800f344 <memp_free>
      return ERR_MEM;
 800e816:	f04f 33ff 	mov.w	r3, #4294967295
 800e81a:	e000      	b.n	800e81e <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800e81c:	2300      	movs	r3, #0
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3718      	adds	r7, #24
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	240217b0 	.word	0x240217b0
 800e82c:	08018aec 	.word	0x08018aec
 800e830:	08018b64 	.word	0x08018b64
 800e834:	08018b3c 	.word	0x08018b3c

0800e838 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b084      	sub	sp, #16
 800e83c:	af02      	add	r7, sp, #8
 800e83e:	6078      	str	r0, [r7, #4]
 800e840:	6039      	str	r1, [r7, #0]
  lwip_init();
 800e842:	f000 f923 	bl	800ea8c <lwip_init>

  tcpip_init_done = initfunc;
 800e846:	4a17      	ldr	r2, [pc, #92]	; (800e8a4 <tcpip_init+0x6c>)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800e84c:	4a16      	ldr	r2, [pc, #88]	; (800e8a8 <tcpip_init+0x70>)
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800e852:	2106      	movs	r1, #6
 800e854:	4815      	ldr	r0, [pc, #84]	; (800e8ac <tcpip_init+0x74>)
 800e856:	f008 ff2b 	bl	80176b0 <sys_mbox_new>
 800e85a:	4603      	mov	r3, r0
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d006      	beq.n	800e86e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800e860:	4b13      	ldr	r3, [pc, #76]	; (800e8b0 <tcpip_init+0x78>)
 800e862:	f240 12d5 	movw	r2, #469	; 0x1d5
 800e866:	4913      	ldr	r1, [pc, #76]	; (800e8b4 <tcpip_init+0x7c>)
 800e868:	4813      	ldr	r0, [pc, #76]	; (800e8b8 <tcpip_init+0x80>)
 800e86a:	f009 f893 	bl	8017994 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800e86e:	4813      	ldr	r0, [pc, #76]	; (800e8bc <tcpip_init+0x84>)
 800e870:	f008 ffce 	bl	8017810 <sys_mutex_new>
 800e874:	4603      	mov	r3, r0
 800e876:	2b00      	cmp	r3, #0
 800e878:	d006      	beq.n	800e888 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800e87a:	4b0d      	ldr	r3, [pc, #52]	; (800e8b0 <tcpip_init+0x78>)
 800e87c:	f240 12d9 	movw	r2, #473	; 0x1d9
 800e880:	490f      	ldr	r1, [pc, #60]	; (800e8c0 <tcpip_init+0x88>)
 800e882:	480d      	ldr	r0, [pc, #52]	; (800e8b8 <tcpip_init+0x80>)
 800e884:	f009 f886 	bl	8017994 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800e888:	2300      	movs	r3, #0
 800e88a:	9300      	str	r3, [sp, #0]
 800e88c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e890:	2200      	movs	r2, #0
 800e892:	490c      	ldr	r1, [pc, #48]	; (800e8c4 <tcpip_init+0x8c>)
 800e894:	480c      	ldr	r0, [pc, #48]	; (800e8c8 <tcpip_init+0x90>)
 800e896:	f008 fff3 	bl	8017880 <sys_thread_new>
}
 800e89a:	bf00      	nop
 800e89c:	3708      	adds	r7, #8
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}
 800e8a2:	bf00      	nop
 800e8a4:	240217a8 	.word	0x240217a8
 800e8a8:	240217ac 	.word	0x240217ac
 800e8ac:	240217b0 	.word	0x240217b0
 800e8b0:	08018aec 	.word	0x08018aec
 800e8b4:	08018b74 	.word	0x08018b74
 800e8b8:	08018b3c 	.word	0x08018b3c
 800e8bc:	24021c50 	.word	0x24021c50
 800e8c0:	08018b98 	.word	0x08018b98
 800e8c4:	0800e60d 	.word	0x0800e60d
 800e8c8:	08018bbc 	.word	0x08018bbc

0800e8cc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b083      	sub	sp, #12
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800e8d6:	88fb      	ldrh	r3, [r7, #6]
 800e8d8:	ba5b      	rev16	r3, r3
 800e8da:	b29b      	uxth	r3, r3
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	370c      	adds	r7, #12
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr

0800e8e8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	061a      	lsls	r2, r3, #24
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	021b      	lsls	r3, r3, #8
 800e8f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e8fc:	431a      	orrs	r2, r3
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	0a1b      	lsrs	r3, r3, #8
 800e902:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e906:	431a      	orrs	r2, r3
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	0e1b      	lsrs	r3, r3, #24
 800e90c:	4313      	orrs	r3, r2
}
 800e90e:	4618      	mov	r0, r3
 800e910:	370c      	adds	r7, #12
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr

0800e91a <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800e91a:	b480      	push	{r7}
 800e91c:	b089      	sub	sp, #36	; 0x24
 800e91e:	af00      	add	r7, sp, #0
 800e920:	6078      	str	r0, [r7, #4]
 800e922:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800e928:	2300      	movs	r3, #0
 800e92a:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800e92c:	2300      	movs	r3, #0
 800e92e:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800e930:	69fb      	ldr	r3, [r7, #28]
 800e932:	f003 0301 	and.w	r3, r3, #1
 800e936:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d00d      	beq.n	800e95a <lwip_standard_chksum+0x40>
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	dd0a      	ble.n	800e95a <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800e944:	69fa      	ldr	r2, [r7, #28]
 800e946:	1c53      	adds	r3, r2, #1
 800e948:	61fb      	str	r3, [r7, #28]
 800e94a:	f107 030e 	add.w	r3, r7, #14
 800e94e:	3301      	adds	r3, #1
 800e950:	7812      	ldrb	r2, [r2, #0]
 800e952:	701a      	strb	r2, [r3, #0]
    len--;
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	3b01      	subs	r3, #1
 800e958:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800e95a:	69fb      	ldr	r3, [r7, #28]
 800e95c:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800e95e:	e00a      	b.n	800e976 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800e960:	69bb      	ldr	r3, [r7, #24]
 800e962:	1c9a      	adds	r2, r3, #2
 800e964:	61ba      	str	r2, [r7, #24]
 800e966:	881b      	ldrh	r3, [r3, #0]
 800e968:	461a      	mov	r2, r3
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	4413      	add	r3, r2
 800e96e:	617b      	str	r3, [r7, #20]
    len -= 2;
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	3b02      	subs	r3, #2
 800e974:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	2b01      	cmp	r3, #1
 800e97a:	dcf1      	bgt.n	800e960 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	dd04      	ble.n	800e98c <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800e982:	f107 030e 	add.w	r3, r7, #14
 800e986:	69ba      	ldr	r2, [r7, #24]
 800e988:	7812      	ldrb	r2, [r2, #0]
 800e98a:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800e98c:	89fb      	ldrh	r3, [r7, #14]
 800e98e:	461a      	mov	r2, r3
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	4413      	add	r3, r2
 800e994:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	0c1a      	lsrs	r2, r3, #16
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	4413      	add	r3, r2
 800e9a0:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	0c1a      	lsrs	r2, r3, #16
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	4413      	add	r3, r2
 800e9ac:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800e9ae:	693b      	ldr	r3, [r7, #16]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d007      	beq.n	800e9c4 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	021b      	lsls	r3, r3, #8
 800e9b8:	b29a      	uxth	r2, r3
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	0a1b      	lsrs	r3, r3, #8
 800e9be:	b2db      	uxtb	r3, r3
 800e9c0:	4313      	orrs	r3, r2
 800e9c2:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	b29b      	uxth	r3, r3
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3724      	adds	r7, #36	; 0x24
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d2:	4770      	bx	lr

0800e9d4 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b082      	sub	sp, #8
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	460b      	mov	r3, r1
 800e9de:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800e9e0:	887b      	ldrh	r3, [r7, #2]
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f7ff ff98 	bl	800e91a <lwip_standard_chksum>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	43db      	mvns	r3, r3
 800e9ee:	b29b      	uxth	r3, r3
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3708      	adds	r7, #8
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b086      	sub	sp, #24
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
 800ea00:	2300      	movs	r3, #0
 800ea02:	617b      	str	r3, [r7, #20]
  swapped = 0;
 800ea04:	2300      	movs	r3, #0
 800ea06:	73fb      	strb	r3, [r7, #15]
  for (q = p; q != NULL; q = q->next) {
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	613b      	str	r3, [r7, #16]
 800ea0c:	e028      	b.n	800ea60 <inet_chksum_pbuf+0x68>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	685a      	ldr	r2, [r3, #4]
 800ea12:	693b      	ldr	r3, [r7, #16]
 800ea14:	895b      	ldrh	r3, [r3, #10]
 800ea16:	4619      	mov	r1, r3
 800ea18:	4610      	mov	r0, r2
 800ea1a:	f7ff ff7e 	bl	800e91a <lwip_standard_chksum>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	461a      	mov	r2, r3
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	4413      	add	r3, r2
 800ea26:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	0c1a      	lsrs	r2, r3, #16
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	b29b      	uxth	r3, r3
 800ea30:	4413      	add	r3, r2
 800ea32:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	895b      	ldrh	r3, [r3, #10]
 800ea38:	f003 0301 	and.w	r3, r3, #1
 800ea3c:	b29b      	uxth	r3, r3
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d00b      	beq.n	800ea5a <inet_chksum_pbuf+0x62>
      swapped = 1 - swapped;
 800ea42:	7bfb      	ldrb	r3, [r7, #15]
 800ea44:	f1c3 0301 	rsb	r3, r3, #1
 800ea48:	73fb      	strb	r3, [r7, #15]
      acc = SWAP_BYTES_IN_WORD(acc);
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	021b      	lsls	r3, r3, #8
 800ea4e:	b29a      	uxth	r2, r3
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	0a1b      	lsrs	r3, r3, #8
 800ea54:	b2db      	uxtb	r3, r3
 800ea56:	4313      	orrs	r3, r2
 800ea58:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	613b      	str	r3, [r7, #16]
 800ea60:	693b      	ldr	r3, [r7, #16]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d1d3      	bne.n	800ea0e <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800ea66:	7bfb      	ldrb	r3, [r7, #15]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d007      	beq.n	800ea7c <inet_chksum_pbuf+0x84>
    acc = SWAP_BYTES_IN_WORD(acc);
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	021b      	lsls	r3, r3, #8
 800ea70:	b29a      	uxth	r2, r3
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	0a1b      	lsrs	r3, r3, #8
 800ea76:	b2db      	uxtb	r3, r3
 800ea78:	4313      	orrs	r3, r2
 800ea7a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	b29b      	uxth	r3, r3
 800ea80:	43db      	mvns	r3, r3
 800ea82:	b29b      	uxth	r3, r3
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	3718      	adds	r7, #24
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}

0800ea8c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b082      	sub	sp, #8
 800ea90:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ea92:	2300      	movs	r3, #0
 800ea94:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ea96:	f008 fead 	bl	80177f4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ea9a:	f000 f8a7 	bl	800ebec <mem_init>
  memp_init();
 800ea9e:	f000 fb6d 	bl	800f17c <memp_init>
  pbuf_init();
  netif_init();
 800eaa2:	f000 fc79 	bl	800f398 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800eaa6:	f006 f9ad 	bl	8014e04 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800eaaa:	f001 fc9d 	bl	80103e8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800eaae:	f006 f83f 	bl	8014b30 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800eab2:	bf00      	nop
 800eab4:	3708      	adds	r7, #8
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
	...

0800eabc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800eac4:	4b40      	ldr	r3, [pc, #256]	; (800ebc8 <plug_holes+0x10c>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	687a      	ldr	r2, [r7, #4]
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d206      	bcs.n	800eadc <plug_holes+0x20>
 800eace:	4b3f      	ldr	r3, [pc, #252]	; (800ebcc <plug_holes+0x110>)
 800ead0:	f240 125d 	movw	r2, #349	; 0x15d
 800ead4:	493e      	ldr	r1, [pc, #248]	; (800ebd0 <plug_holes+0x114>)
 800ead6:	483f      	ldr	r0, [pc, #252]	; (800ebd4 <plug_holes+0x118>)
 800ead8:	f008 ff5c 	bl	8017994 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800eadc:	4b3e      	ldr	r3, [pc, #248]	; (800ebd8 <plug_holes+0x11c>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	687a      	ldr	r2, [r7, #4]
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d306      	bcc.n	800eaf4 <plug_holes+0x38>
 800eae6:	4b39      	ldr	r3, [pc, #228]	; (800ebcc <plug_holes+0x110>)
 800eae8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800eaec:	493b      	ldr	r1, [pc, #236]	; (800ebdc <plug_holes+0x120>)
 800eaee:	4839      	ldr	r0, [pc, #228]	; (800ebd4 <plug_holes+0x118>)
 800eaf0:	f008 ff50 	bl	8017994 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	791b      	ldrb	r3, [r3, #4]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d006      	beq.n	800eb0a <plug_holes+0x4e>
 800eafc:	4b33      	ldr	r3, [pc, #204]	; (800ebcc <plug_holes+0x110>)
 800eafe:	f240 125f 	movw	r2, #351	; 0x15f
 800eb02:	4937      	ldr	r1, [pc, #220]	; (800ebe0 <plug_holes+0x124>)
 800eb04:	4833      	ldr	r0, [pc, #204]	; (800ebd4 <plug_holes+0x118>)
 800eb06:	f008 ff45 	bl	8017994 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	881b      	ldrh	r3, [r3, #0]
 800eb0e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eb12:	d906      	bls.n	800eb22 <plug_holes+0x66>
 800eb14:	4b2d      	ldr	r3, [pc, #180]	; (800ebcc <plug_holes+0x110>)
 800eb16:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800eb1a:	4932      	ldr	r1, [pc, #200]	; (800ebe4 <plug_holes+0x128>)
 800eb1c:	482d      	ldr	r0, [pc, #180]	; (800ebd4 <plug_holes+0x118>)
 800eb1e:	f008 ff39 	bl	8017994 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800eb22:	4b29      	ldr	r3, [pc, #164]	; (800ebc8 <plug_holes+0x10c>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	687a      	ldr	r2, [r7, #4]
 800eb28:	8812      	ldrh	r2, [r2, #0]
 800eb2a:	4413      	add	r3, r2
 800eb2c:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d01f      	beq.n	800eb76 <plug_holes+0xba>
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	791b      	ldrb	r3, [r3, #4]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d11b      	bne.n	800eb76 <plug_holes+0xba>
 800eb3e:	4b26      	ldr	r3, [pc, #152]	; (800ebd8 <plug_holes+0x11c>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	68fa      	ldr	r2, [r7, #12]
 800eb44:	429a      	cmp	r2, r3
 800eb46:	d016      	beq.n	800eb76 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800eb48:	4b27      	ldr	r3, [pc, #156]	; (800ebe8 <plug_holes+0x12c>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	68fa      	ldr	r2, [r7, #12]
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d102      	bne.n	800eb58 <plug_holes+0x9c>
      lfree = mem;
 800eb52:	4a25      	ldr	r2, [pc, #148]	; (800ebe8 <plug_holes+0x12c>)
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	881a      	ldrh	r2, [r3, #0]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	4a19      	ldr	r2, [pc, #100]	; (800ebc8 <plug_holes+0x10c>)
 800eb64:	6812      	ldr	r2, [r2, #0]
 800eb66:	1a99      	subs	r1, r3, r2
 800eb68:	4b17      	ldr	r3, [pc, #92]	; (800ebc8 <plug_holes+0x10c>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	68fa      	ldr	r2, [r7, #12]
 800eb6e:	8812      	ldrh	r2, [r2, #0]
 800eb70:	4413      	add	r3, r2
 800eb72:	b28a      	uxth	r2, r1
 800eb74:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800eb76:	4b14      	ldr	r3, [pc, #80]	; (800ebc8 <plug_holes+0x10c>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	687a      	ldr	r2, [r7, #4]
 800eb7c:	8852      	ldrh	r2, [r2, #2]
 800eb7e:	4413      	add	r3, r2
 800eb80:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800eb82:	68ba      	ldr	r2, [r7, #8]
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d01a      	beq.n	800ebc0 <plug_holes+0x104>
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	791b      	ldrb	r3, [r3, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d116      	bne.n	800ebc0 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800eb92:	4b15      	ldr	r3, [pc, #84]	; (800ebe8 <plug_holes+0x12c>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	687a      	ldr	r2, [r7, #4]
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d102      	bne.n	800eba2 <plug_holes+0xe6>
      lfree = pmem;
 800eb9c:	4a12      	ldr	r2, [pc, #72]	; (800ebe8 <plug_holes+0x12c>)
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	881a      	ldrh	r2, [r3, #0]
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	4a06      	ldr	r2, [pc, #24]	; (800ebc8 <plug_holes+0x10c>)
 800ebae:	6812      	ldr	r2, [r2, #0]
 800ebb0:	1a99      	subs	r1, r3, r2
 800ebb2:	4b05      	ldr	r3, [pc, #20]	; (800ebc8 <plug_holes+0x10c>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	687a      	ldr	r2, [r7, #4]
 800ebb8:	8812      	ldrh	r2, [r2, #0]
 800ebba:	4413      	add	r3, r2
 800ebbc:	b28a      	uxth	r2, r1
 800ebbe:	805a      	strh	r2, [r3, #2]
  }
}
 800ebc0:	bf00      	nop
 800ebc2:	3710      	adds	r7, #16
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}
 800ebc8:	240217b4 	.word	0x240217b4
 800ebcc:	08018bcc 	.word	0x08018bcc
 800ebd0:	08018bfc 	.word	0x08018bfc
 800ebd4:	08018c14 	.word	0x08018c14
 800ebd8:	240217b8 	.word	0x240217b8
 800ebdc:	08018c3c 	.word	0x08018c3c
 800ebe0:	08018c58 	.word	0x08018c58
 800ebe4:	08018c74 	.word	0x08018c74
 800ebe8:	240217bc 	.word	0x240217bc

0800ebec <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b082      	sub	sp, #8
 800ebf0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ebf2:	4b1c      	ldr	r3, [pc, #112]	; (800ec64 <mem_init+0x78>)
 800ebf4:	4a1c      	ldr	r2, [pc, #112]	; (800ec68 <mem_init+0x7c>)
 800ebf6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ebf8:	4b1a      	ldr	r3, [pc, #104]	; (800ec64 <mem_init+0x78>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ec04:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800ec12:	4b14      	ldr	r3, [pc, #80]	; (800ec64 <mem_init+0x78>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800ec1a:	4a14      	ldr	r2, [pc, #80]	; (800ec6c <mem_init+0x80>)
 800ec1c:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ec1e:	4b13      	ldr	r3, [pc, #76]	; (800ec6c <mem_init+0x80>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2201      	movs	r2, #1
 800ec24:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ec26:	4b11      	ldr	r3, [pc, #68]	; (800ec6c <mem_init+0x80>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ec2e:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ec30:	4b0e      	ldr	r3, [pc, #56]	; (800ec6c <mem_init+0x80>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ec38:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ec3a:	4b0a      	ldr	r3, [pc, #40]	; (800ec64 <mem_init+0x78>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	4a0c      	ldr	r2, [pc, #48]	; (800ec70 <mem_init+0x84>)
 800ec40:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ec42:	480c      	ldr	r0, [pc, #48]	; (800ec74 <mem_init+0x88>)
 800ec44:	f008 fde4 	bl	8017810 <sys_mutex_new>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d006      	beq.n	800ec5c <mem_init+0x70>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ec4e:	4b0a      	ldr	r3, [pc, #40]	; (800ec78 <mem_init+0x8c>)
 800ec50:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ec54:	4909      	ldr	r1, [pc, #36]	; (800ec7c <mem_init+0x90>)
 800ec56:	480a      	ldr	r0, [pc, #40]	; (800ec80 <mem_init+0x94>)
 800ec58:	f008 fe9c 	bl	8017994 <iprintf>
  }
}
 800ec5c:	bf00      	nop
 800ec5e:	3708      	adds	r7, #8
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}
 800ec64:	240217b4 	.word	0x240217b4
 800ec68:	30044000 	.word	0x30044000
 800ec6c:	240217b8 	.word	0x240217b8
 800ec70:	240217bc 	.word	0x240217bc
 800ec74:	240217c0 	.word	0x240217c0
 800ec78:	08018bcc 	.word	0x08018bcc
 800ec7c:	08018ca0 	.word	0x08018ca0
 800ec80:	08018c14 	.word	0x08018c14

0800ec84 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b084      	sub	sp, #16
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d050      	beq.n	800ed34 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f003 0303 	and.w	r3, r3, #3
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d006      	beq.n	800ecaa <mem_free+0x26>
 800ec9c:	4b27      	ldr	r3, [pc, #156]	; (800ed3c <mem_free+0xb8>)
 800ec9e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800eca2:	4927      	ldr	r1, [pc, #156]	; (800ed40 <mem_free+0xbc>)
 800eca4:	4827      	ldr	r0, [pc, #156]	; (800ed44 <mem_free+0xc0>)
 800eca6:	f008 fe75 	bl	8017994 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ecaa:	4b27      	ldr	r3, [pc, #156]	; (800ed48 <mem_free+0xc4>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	687a      	ldr	r2, [r7, #4]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d304      	bcc.n	800ecbe <mem_free+0x3a>
 800ecb4:	4b25      	ldr	r3, [pc, #148]	; (800ed4c <mem_free+0xc8>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	687a      	ldr	r2, [r7, #4]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d306      	bcc.n	800eccc <mem_free+0x48>
 800ecbe:	4b1f      	ldr	r3, [pc, #124]	; (800ed3c <mem_free+0xb8>)
 800ecc0:	f240 12af 	movw	r2, #431	; 0x1af
 800ecc4:	4922      	ldr	r1, [pc, #136]	; (800ed50 <mem_free+0xcc>)
 800ecc6:	481f      	ldr	r0, [pc, #124]	; (800ed44 <mem_free+0xc0>)
 800ecc8:	f008 fe64 	bl	8017994 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800eccc:	4b1e      	ldr	r3, [pc, #120]	; (800ed48 <mem_free+0xc4>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	687a      	ldr	r2, [r7, #4]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d304      	bcc.n	800ece0 <mem_free+0x5c>
 800ecd6:	4b1d      	ldr	r3, [pc, #116]	; (800ed4c <mem_free+0xc8>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d306      	bcc.n	800ecee <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800ece0:	f008 fdf4 	bl	80178cc <sys_arch_protect>
 800ece4:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800ece6:	68b8      	ldr	r0, [r7, #8]
 800ece8:	f008 fdfe 	bl	80178e8 <sys_arch_unprotect>
    return;
 800ecec:	e023      	b.n	800ed36 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ecee:	4819      	ldr	r0, [pc, #100]	; (800ed54 <mem_free+0xd0>)
 800ecf0:	f008 fdaa 	bl	8017848 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	3b08      	subs	r3, #8
 800ecf8:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	791b      	ldrb	r3, [r3, #4]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d106      	bne.n	800ed10 <mem_free+0x8c>
 800ed02:	4b0e      	ldr	r3, [pc, #56]	; (800ed3c <mem_free+0xb8>)
 800ed04:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800ed08:	4913      	ldr	r1, [pc, #76]	; (800ed58 <mem_free+0xd4>)
 800ed0a:	480e      	ldr	r0, [pc, #56]	; (800ed44 <mem_free+0xc0>)
 800ed0c:	f008 fe42 	bl	8017994 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	2200      	movs	r2, #0
 800ed14:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ed16:	4b11      	ldr	r3, [pc, #68]	; (800ed5c <mem_free+0xd8>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	68fa      	ldr	r2, [r7, #12]
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	d202      	bcs.n	800ed26 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ed20:	4a0e      	ldr	r2, [pc, #56]	; (800ed5c <mem_free+0xd8>)
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ed26:	68f8      	ldr	r0, [r7, #12]
 800ed28:	f7ff fec8 	bl	800eabc <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ed2c:	4809      	ldr	r0, [pc, #36]	; (800ed54 <mem_free+0xd0>)
 800ed2e:	f008 fd9a 	bl	8017866 <sys_mutex_unlock>
 800ed32:	e000      	b.n	800ed36 <mem_free+0xb2>
    return;
 800ed34:	bf00      	nop
}
 800ed36:	3710      	adds	r7, #16
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	08018bcc 	.word	0x08018bcc
 800ed40:	08018cbc 	.word	0x08018cbc
 800ed44:	08018c14 	.word	0x08018c14
 800ed48:	240217b4 	.word	0x240217b4
 800ed4c:	240217b8 	.word	0x240217b8
 800ed50:	08018ce0 	.word	0x08018ce0
 800ed54:	240217c0 	.word	0x240217c0
 800ed58:	08018cf8 	.word	0x08018cf8
 800ed5c:	240217bc 	.word	0x240217bc

0800ed60 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b088      	sub	sp, #32
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	460b      	mov	r3, r1
 800ed6a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800ed6c:	887b      	ldrh	r3, [r7, #2]
 800ed6e:	3303      	adds	r3, #3
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	f023 0303 	bic.w	r3, r3, #3
 800ed76:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800ed78:	887b      	ldrh	r3, [r7, #2]
 800ed7a:	2b0b      	cmp	r3, #11
 800ed7c:	d801      	bhi.n	800ed82 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ed7e:	230c      	movs	r3, #12
 800ed80:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800ed82:	887b      	ldrh	r3, [r7, #2]
 800ed84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ed88:	d901      	bls.n	800ed8e <mem_trim+0x2e>
    return NULL;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	e0bd      	b.n	800ef0a <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ed8e:	4b61      	ldr	r3, [pc, #388]	; (800ef14 <mem_trim+0x1b4>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	687a      	ldr	r2, [r7, #4]
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d304      	bcc.n	800eda2 <mem_trim+0x42>
 800ed98:	4b5f      	ldr	r3, [pc, #380]	; (800ef18 <mem_trim+0x1b8>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	687a      	ldr	r2, [r7, #4]
 800ed9e:	429a      	cmp	r2, r3
 800eda0:	d306      	bcc.n	800edb0 <mem_trim+0x50>
 800eda2:	4b5e      	ldr	r3, [pc, #376]	; (800ef1c <mem_trim+0x1bc>)
 800eda4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800eda8:	495d      	ldr	r1, [pc, #372]	; (800ef20 <mem_trim+0x1c0>)
 800edaa:	485e      	ldr	r0, [pc, #376]	; (800ef24 <mem_trim+0x1c4>)
 800edac:	f008 fdf2 	bl	8017994 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800edb0:	4b58      	ldr	r3, [pc, #352]	; (800ef14 <mem_trim+0x1b4>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	687a      	ldr	r2, [r7, #4]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d304      	bcc.n	800edc4 <mem_trim+0x64>
 800edba:	4b57      	ldr	r3, [pc, #348]	; (800ef18 <mem_trim+0x1b8>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	687a      	ldr	r2, [r7, #4]
 800edc0:	429a      	cmp	r2, r3
 800edc2:	d307      	bcc.n	800edd4 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800edc4:	f008 fd82 	bl	80178cc <sys_arch_protect>
 800edc8:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800edca:	68f8      	ldr	r0, [r7, #12]
 800edcc:	f008 fd8c 	bl	80178e8 <sys_arch_unprotect>
    return rmem;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	e09a      	b.n	800ef0a <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	3b08      	subs	r3, #8
 800edd8:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800edda:	69fb      	ldr	r3, [r7, #28]
 800eddc:	4a4d      	ldr	r2, [pc, #308]	; (800ef14 <mem_trim+0x1b4>)
 800edde:	6812      	ldr	r2, [r2, #0]
 800ede0:	1a9b      	subs	r3, r3, r2
 800ede2:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	881a      	ldrh	r2, [r3, #0]
 800ede8:	8b7b      	ldrh	r3, [r7, #26]
 800edea:	1ad3      	subs	r3, r2, r3
 800edec:	b29b      	uxth	r3, r3
 800edee:	3b08      	subs	r3, #8
 800edf0:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800edf2:	887a      	ldrh	r2, [r7, #2]
 800edf4:	8b3b      	ldrh	r3, [r7, #24]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d906      	bls.n	800ee08 <mem_trim+0xa8>
 800edfa:	4b48      	ldr	r3, [pc, #288]	; (800ef1c <mem_trim+0x1bc>)
 800edfc:	f240 2206 	movw	r2, #518	; 0x206
 800ee00:	4949      	ldr	r1, [pc, #292]	; (800ef28 <mem_trim+0x1c8>)
 800ee02:	4848      	ldr	r0, [pc, #288]	; (800ef24 <mem_trim+0x1c4>)
 800ee04:	f008 fdc6 	bl	8017994 <iprintf>
  if (newsize > size) {
 800ee08:	887a      	ldrh	r2, [r7, #2]
 800ee0a:	8b3b      	ldrh	r3, [r7, #24]
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d901      	bls.n	800ee14 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800ee10:	2300      	movs	r3, #0
 800ee12:	e07a      	b.n	800ef0a <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800ee14:	887a      	ldrh	r2, [r7, #2]
 800ee16:	8b3b      	ldrh	r3, [r7, #24]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d101      	bne.n	800ee20 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	e074      	b.n	800ef0a <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ee20:	4842      	ldr	r0, [pc, #264]	; (800ef2c <mem_trim+0x1cc>)
 800ee22:	f008 fd11 	bl	8017848 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800ee26:	4b3b      	ldr	r3, [pc, #236]	; (800ef14 <mem_trim+0x1b4>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	69fa      	ldr	r2, [r7, #28]
 800ee2c:	8812      	ldrh	r2, [r2, #0]
 800ee2e:	4413      	add	r3, r2
 800ee30:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	791b      	ldrb	r3, [r3, #4]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d131      	bne.n	800ee9e <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	881b      	ldrh	r3, [r3, #0]
 800ee3e:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ee40:	8b7a      	ldrh	r2, [r7, #26]
 800ee42:	887b      	ldrh	r3, [r7, #2]
 800ee44:	4413      	add	r3, r2
 800ee46:	b29b      	uxth	r3, r3
 800ee48:	3308      	adds	r3, #8
 800ee4a:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800ee4c:	4b38      	ldr	r3, [pc, #224]	; (800ef30 <mem_trim+0x1d0>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	697a      	ldr	r2, [r7, #20]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d105      	bne.n	800ee62 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800ee56:	4b2f      	ldr	r3, [pc, #188]	; (800ef14 <mem_trim+0x1b4>)
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	8a7b      	ldrh	r3, [r7, #18]
 800ee5c:	4413      	add	r3, r2
 800ee5e:	4a34      	ldr	r2, [pc, #208]	; (800ef30 <mem_trim+0x1d0>)
 800ee60:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800ee62:	4b2c      	ldr	r3, [pc, #176]	; (800ef14 <mem_trim+0x1b4>)
 800ee64:	681a      	ldr	r2, [r3, #0]
 800ee66:	8a7b      	ldrh	r3, [r7, #18]
 800ee68:	4413      	add	r3, r2
 800ee6a:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	8a3a      	ldrh	r2, [r7, #16]
 800ee76:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	8b7a      	ldrh	r2, [r7, #26]
 800ee7c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ee7e:	69fb      	ldr	r3, [r7, #28]
 800ee80:	8a7a      	ldrh	r2, [r7, #18]
 800ee82:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	881b      	ldrh	r3, [r3, #0]
 800ee88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ee8c:	d039      	beq.n	800ef02 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800ee8e:	4b21      	ldr	r3, [pc, #132]	; (800ef14 <mem_trim+0x1b4>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	697a      	ldr	r2, [r7, #20]
 800ee94:	8812      	ldrh	r2, [r2, #0]
 800ee96:	4413      	add	r3, r2
 800ee98:	8a7a      	ldrh	r2, [r7, #18]
 800ee9a:	805a      	strh	r2, [r3, #2]
 800ee9c:	e031      	b.n	800ef02 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ee9e:	887b      	ldrh	r3, [r7, #2]
 800eea0:	f103 0214 	add.w	r2, r3, #20
 800eea4:	8b3b      	ldrh	r3, [r7, #24]
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d82b      	bhi.n	800ef02 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800eeaa:	8b7a      	ldrh	r2, [r7, #26]
 800eeac:	887b      	ldrh	r3, [r7, #2]
 800eeae:	4413      	add	r3, r2
 800eeb0:	b29b      	uxth	r3, r3
 800eeb2:	3308      	adds	r3, #8
 800eeb4:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800eeb6:	4b17      	ldr	r3, [pc, #92]	; (800ef14 <mem_trim+0x1b4>)
 800eeb8:	681a      	ldr	r2, [r3, #0]
 800eeba:	8a7b      	ldrh	r3, [r7, #18]
 800eebc:	4413      	add	r3, r2
 800eebe:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800eec0:	4b1b      	ldr	r3, [pc, #108]	; (800ef30 <mem_trim+0x1d0>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	697a      	ldr	r2, [r7, #20]
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d202      	bcs.n	800eed0 <mem_trim+0x170>
      lfree = mem2;
 800eeca:	4a19      	ldr	r2, [pc, #100]	; (800ef30 <mem_trim+0x1d0>)
 800eecc:	697b      	ldr	r3, [r7, #20]
 800eece:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	2200      	movs	r2, #0
 800eed4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800eed6:	69fb      	ldr	r3, [r7, #28]
 800eed8:	881a      	ldrh	r2, [r3, #0]
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	8b7a      	ldrh	r2, [r7, #26]
 800eee2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800eee4:	69fb      	ldr	r3, [r7, #28]
 800eee6:	8a7a      	ldrh	r2, [r7, #18]
 800eee8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	881b      	ldrh	r3, [r3, #0]
 800eeee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eef2:	d006      	beq.n	800ef02 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800eef4:	4b07      	ldr	r3, [pc, #28]	; (800ef14 <mem_trim+0x1b4>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	697a      	ldr	r2, [r7, #20]
 800eefa:	8812      	ldrh	r2, [r2, #0]
 800eefc:	4413      	add	r3, r2
 800eefe:	8a7a      	ldrh	r2, [r7, #18]
 800ef00:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ef02:	480a      	ldr	r0, [pc, #40]	; (800ef2c <mem_trim+0x1cc>)
 800ef04:	f008 fcaf 	bl	8017866 <sys_mutex_unlock>
  return rmem;
 800ef08:	687b      	ldr	r3, [r7, #4]
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3720      	adds	r7, #32
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}
 800ef12:	bf00      	nop
 800ef14:	240217b4 	.word	0x240217b4
 800ef18:	240217b8 	.word	0x240217b8
 800ef1c:	08018bcc 	.word	0x08018bcc
 800ef20:	08018d0c 	.word	0x08018d0c
 800ef24:	08018c14 	.word	0x08018c14
 800ef28:	08018d24 	.word	0x08018d24
 800ef2c:	240217c0 	.word	0x240217c0
 800ef30:	240217bc 	.word	0x240217bc

0800ef34 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b088      	sub	sp, #32
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800ef3e:	88fb      	ldrh	r3, [r7, #6]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d101      	bne.n	800ef48 <mem_malloc+0x14>
    return NULL;
 800ef44:	2300      	movs	r3, #0
 800ef46:	e0d1      	b.n	800f0ec <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800ef48:	88fb      	ldrh	r3, [r7, #6]
 800ef4a:	3303      	adds	r3, #3
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	f023 0303 	bic.w	r3, r3, #3
 800ef52:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800ef54:	88fb      	ldrh	r3, [r7, #6]
 800ef56:	2b0b      	cmp	r3, #11
 800ef58:	d801      	bhi.n	800ef5e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ef5a:	230c      	movs	r3, #12
 800ef5c:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800ef5e:	88fb      	ldrh	r3, [r7, #6]
 800ef60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ef64:	d901      	bls.n	800ef6a <mem_malloc+0x36>
    return NULL;
 800ef66:	2300      	movs	r3, #0
 800ef68:	e0c0      	b.n	800f0ec <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ef6a:	4862      	ldr	r0, [pc, #392]	; (800f0f4 <mem_malloc+0x1c0>)
 800ef6c:	f008 fc6c 	bl	8017848 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800ef70:	4b61      	ldr	r3, [pc, #388]	; (800f0f8 <mem_malloc+0x1c4>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	461a      	mov	r2, r3
 800ef76:	4b61      	ldr	r3, [pc, #388]	; (800f0fc <mem_malloc+0x1c8>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	1ad3      	subs	r3, r2, r3
 800ef7c:	83fb      	strh	r3, [r7, #30]
 800ef7e:	e0aa      	b.n	800f0d6 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800ef80:	4b5e      	ldr	r3, [pc, #376]	; (800f0fc <mem_malloc+0x1c8>)
 800ef82:	681a      	ldr	r2, [r3, #0]
 800ef84:	8bfb      	ldrh	r3, [r7, #30]
 800ef86:	4413      	add	r3, r2
 800ef88:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	791b      	ldrb	r3, [r3, #4]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	f040 809b 	bne.w	800f0ca <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	881b      	ldrh	r3, [r3, #0]
 800ef98:	461a      	mov	r2, r3
 800ef9a:	8bfb      	ldrh	r3, [r7, #30]
 800ef9c:	1ad3      	subs	r3, r2, r3
 800ef9e:	f1a3 0208 	sub.w	r2, r3, #8
 800efa2:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800efa4:	429a      	cmp	r2, r3
 800efa6:	f0c0 8090 	bcc.w	800f0ca <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	881b      	ldrh	r3, [r3, #0]
 800efae:	461a      	mov	r2, r3
 800efb0:	8bfb      	ldrh	r3, [r7, #30]
 800efb2:	1ad3      	subs	r3, r2, r3
 800efb4:	f1a3 0208 	sub.w	r2, r3, #8
 800efb8:	88fb      	ldrh	r3, [r7, #6]
 800efba:	3314      	adds	r3, #20
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d327      	bcc.n	800f010 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800efc0:	8bfa      	ldrh	r2, [r7, #30]
 800efc2:	88fb      	ldrh	r3, [r7, #6]
 800efc4:	4413      	add	r3, r2
 800efc6:	b29b      	uxth	r3, r3
 800efc8:	3308      	adds	r3, #8
 800efca:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800efcc:	4b4b      	ldr	r3, [pc, #300]	; (800f0fc <mem_malloc+0x1c8>)
 800efce:	681a      	ldr	r2, [r3, #0]
 800efd0:	8a7b      	ldrh	r3, [r7, #18]
 800efd2:	4413      	add	r3, r2
 800efd4:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	2200      	movs	r2, #0
 800efda:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	881a      	ldrh	r2, [r3, #0]
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	8bfa      	ldrh	r2, [r7, #30]
 800efe8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	8a7a      	ldrh	r2, [r7, #18]
 800efee:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	2201      	movs	r2, #1
 800eff4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	881b      	ldrh	r3, [r3, #0]
 800effa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800effe:	d00a      	beq.n	800f016 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800f000:	4b3e      	ldr	r3, [pc, #248]	; (800f0fc <mem_malloc+0x1c8>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	68fa      	ldr	r2, [r7, #12]
 800f006:	8812      	ldrh	r2, [r2, #0]
 800f008:	4413      	add	r3, r2
 800f00a:	8a7a      	ldrh	r2, [r7, #18]
 800f00c:	805a      	strh	r2, [r3, #2]
 800f00e:	e002      	b.n	800f016 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	2201      	movs	r2, #1
 800f014:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f016:	4b38      	ldr	r3, [pc, #224]	; (800f0f8 <mem_malloc+0x1c4>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	697a      	ldr	r2, [r7, #20]
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d127      	bne.n	800f070 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800f020:	4b35      	ldr	r3, [pc, #212]	; (800f0f8 <mem_malloc+0x1c4>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f026:	e005      	b.n	800f034 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800f028:	4b34      	ldr	r3, [pc, #208]	; (800f0fc <mem_malloc+0x1c8>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	69ba      	ldr	r2, [r7, #24]
 800f02e:	8812      	ldrh	r2, [r2, #0]
 800f030:	4413      	add	r3, r2
 800f032:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f034:	69bb      	ldr	r3, [r7, #24]
 800f036:	791b      	ldrb	r3, [r3, #4]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d004      	beq.n	800f046 <mem_malloc+0x112>
 800f03c:	4b30      	ldr	r3, [pc, #192]	; (800f100 <mem_malloc+0x1cc>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	69ba      	ldr	r2, [r7, #24]
 800f042:	429a      	cmp	r2, r3
 800f044:	d1f0      	bne.n	800f028 <mem_malloc+0xf4>
          }
          lfree = cur;
 800f046:	4a2c      	ldr	r2, [pc, #176]	; (800f0f8 <mem_malloc+0x1c4>)
 800f048:	69bb      	ldr	r3, [r7, #24]
 800f04a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f04c:	4b2a      	ldr	r3, [pc, #168]	; (800f0f8 <mem_malloc+0x1c4>)
 800f04e:	681a      	ldr	r2, [r3, #0]
 800f050:	4b2b      	ldr	r3, [pc, #172]	; (800f100 <mem_malloc+0x1cc>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	429a      	cmp	r2, r3
 800f056:	d00b      	beq.n	800f070 <mem_malloc+0x13c>
 800f058:	4b27      	ldr	r3, [pc, #156]	; (800f0f8 <mem_malloc+0x1c4>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	791b      	ldrb	r3, [r3, #4]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d006      	beq.n	800f070 <mem_malloc+0x13c>
 800f062:	4b28      	ldr	r3, [pc, #160]	; (800f104 <mem_malloc+0x1d0>)
 800f064:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f068:	4927      	ldr	r1, [pc, #156]	; (800f108 <mem_malloc+0x1d4>)
 800f06a:	4828      	ldr	r0, [pc, #160]	; (800f10c <mem_malloc+0x1d8>)
 800f06c:	f008 fc92 	bl	8017994 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f070:	4820      	ldr	r0, [pc, #128]	; (800f0f4 <mem_malloc+0x1c0>)
 800f072:	f008 fbf8 	bl	8017866 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f076:	88fa      	ldrh	r2, [r7, #6]
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	4413      	add	r3, r2
 800f07c:	3308      	adds	r3, #8
 800f07e:	4a20      	ldr	r2, [pc, #128]	; (800f100 <mem_malloc+0x1cc>)
 800f080:	6812      	ldr	r2, [r2, #0]
 800f082:	4293      	cmp	r3, r2
 800f084:	d906      	bls.n	800f094 <mem_malloc+0x160>
 800f086:	4b1f      	ldr	r3, [pc, #124]	; (800f104 <mem_malloc+0x1d0>)
 800f088:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800f08c:	4920      	ldr	r1, [pc, #128]	; (800f110 <mem_malloc+0x1dc>)
 800f08e:	481f      	ldr	r0, [pc, #124]	; (800f10c <mem_malloc+0x1d8>)
 800f090:	f008 fc80 	bl	8017994 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	f003 0303 	and.w	r3, r3, #3
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d006      	beq.n	800f0ac <mem_malloc+0x178>
 800f09e:	4b19      	ldr	r3, [pc, #100]	; (800f104 <mem_malloc+0x1d0>)
 800f0a0:	f240 22d6 	movw	r2, #726	; 0x2d6
 800f0a4:	491b      	ldr	r1, [pc, #108]	; (800f114 <mem_malloc+0x1e0>)
 800f0a6:	4819      	ldr	r0, [pc, #100]	; (800f10c <mem_malloc+0x1d8>)
 800f0a8:	f008 fc74 	bl	8017994 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	f003 0303 	and.w	r3, r3, #3
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d006      	beq.n	800f0c4 <mem_malloc+0x190>
 800f0b6:	4b13      	ldr	r3, [pc, #76]	; (800f104 <mem_malloc+0x1d0>)
 800f0b8:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800f0bc:	4916      	ldr	r1, [pc, #88]	; (800f118 <mem_malloc+0x1e4>)
 800f0be:	4813      	ldr	r0, [pc, #76]	; (800f10c <mem_malloc+0x1d8>)
 800f0c0:	f008 fc68 	bl	8017994 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	3308      	adds	r3, #8
 800f0c8:	e010      	b.n	800f0ec <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800f0ca:	4b0c      	ldr	r3, [pc, #48]	; (800f0fc <mem_malloc+0x1c8>)
 800f0cc:	681a      	ldr	r2, [r3, #0]
 800f0ce:	8bfb      	ldrh	r3, [r7, #30]
 800f0d0:	4413      	add	r3, r2
 800f0d2:	881b      	ldrh	r3, [r3, #0]
 800f0d4:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800f0d6:	8bfa      	ldrh	r2, [r7, #30]
 800f0d8:	88fb      	ldrh	r3, [r7, #6]
 800f0da:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	f4ff af4e 	bcc.w	800ef80 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f0e4:	4803      	ldr	r0, [pc, #12]	; (800f0f4 <mem_malloc+0x1c0>)
 800f0e6:	f008 fbbe 	bl	8017866 <sys_mutex_unlock>
  return NULL;
 800f0ea:	2300      	movs	r3, #0
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3720      	adds	r7, #32
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}
 800f0f4:	240217c0 	.word	0x240217c0
 800f0f8:	240217bc 	.word	0x240217bc
 800f0fc:	240217b4 	.word	0x240217b4
 800f100:	240217b8 	.word	0x240217b8
 800f104:	08018bcc 	.word	0x08018bcc
 800f108:	08018d44 	.word	0x08018d44
 800f10c:	08018c14 	.word	0x08018c14
 800f110:	08018d60 	.word	0x08018d60
 800f114:	08018d90 	.word	0x08018d90
 800f118:	08018dc0 	.word	0x08018dc0

0800f11c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f11c:	b480      	push	{r7}
 800f11e:	b085      	sub	sp, #20
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	689b      	ldr	r3, [r3, #8]
 800f128:	2200      	movs	r2, #0
 800f12a:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	685b      	ldr	r3, [r3, #4]
 800f130:	3303      	adds	r3, #3
 800f132:	f023 0303 	bic.w	r3, r3, #3
 800f136:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f138:	2300      	movs	r3, #0
 800f13a:	60fb      	str	r3, [r7, #12]
 800f13c:	e011      	b.n	800f162 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	689b      	ldr	r3, [r3, #8]
 800f142:	681a      	ldr	r2, [r3, #0]
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	689b      	ldr	r3, [r3, #8]
 800f14c:	68ba      	ldr	r2, [r7, #8]
 800f14e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	881b      	ldrh	r3, [r3, #0]
 800f154:	461a      	mov	r2, r3
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	4413      	add	r3, r2
 800f15a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	3301      	adds	r3, #1
 800f160:	60fb      	str	r3, [r7, #12]
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	885b      	ldrh	r3, [r3, #2]
 800f166:	461a      	mov	r2, r3
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	4293      	cmp	r3, r2
 800f16c:	dbe7      	blt.n	800f13e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f16e:	bf00      	nop
 800f170:	3714      	adds	r7, #20
 800f172:	46bd      	mov	sp, r7
 800f174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f178:	4770      	bx	lr
	...

0800f17c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f182:	2300      	movs	r3, #0
 800f184:	80fb      	strh	r3, [r7, #6]
 800f186:	e009      	b.n	800f19c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f188:	88fb      	ldrh	r3, [r7, #6]
 800f18a:	4a08      	ldr	r2, [pc, #32]	; (800f1ac <memp_init+0x30>)
 800f18c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f190:	4618      	mov	r0, r3
 800f192:	f7ff ffc3 	bl	800f11c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f196:	88fb      	ldrh	r3, [r7, #6]
 800f198:	3301      	adds	r3, #1
 800f19a:	80fb      	strh	r3, [r7, #6]
 800f19c:	88fb      	ldrh	r3, [r7, #6]
 800f19e:	2b0d      	cmp	r3, #13
 800f1a0:	d9f2      	bls.n	800f188 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f1a2:	bf00      	nop
 800f1a4:	3708      	adds	r7, #8
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	0801a964 	.word	0x0801a964

0800f1b0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b084      	sub	sp, #16
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f1b8:	f008 fb88 	bl	80178cc <sys_arch_protect>
 800f1bc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	689b      	ldr	r3, [r3, #8]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d015      	beq.n	800f1f8 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	689b      	ldr	r3, [r3, #8]
 800f1d0:	68ba      	ldr	r2, [r7, #8]
 800f1d2:	6812      	ldr	r2, [r2, #0]
 800f1d4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	f003 0303 	and.w	r3, r3, #3
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d006      	beq.n	800f1ee <do_memp_malloc_pool+0x3e>
 800f1e0:	4b09      	ldr	r3, [pc, #36]	; (800f208 <do_memp_malloc_pool+0x58>)
 800f1e2:	f240 1249 	movw	r2, #329	; 0x149
 800f1e6:	4909      	ldr	r1, [pc, #36]	; (800f20c <do_memp_malloc_pool+0x5c>)
 800f1e8:	4809      	ldr	r0, [pc, #36]	; (800f210 <do_memp_malloc_pool+0x60>)
 800f1ea:	f008 fbd3 	bl	8017994 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f1ee:	68f8      	ldr	r0, [r7, #12]
 800f1f0:	f008 fb7a 	bl	80178e8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	e003      	b.n	800f200 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800f1f8:	68f8      	ldr	r0, [r7, #12]
 800f1fa:	f008 fb75 	bl	80178e8 <sys_arch_unprotect>
  return NULL;
 800f1fe:	2300      	movs	r3, #0
}
 800f200:	4618      	mov	r0, r3
 800f202:	3710      	adds	r7, #16
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}
 800f208:	08018de4 	.word	0x08018de4
 800f20c:	08018e14 	.word	0x08018e14
 800f210:	08018e38 	.word	0x08018e38

0800f214 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b082      	sub	sp, #8
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d106      	bne.n	800f230 <memp_malloc_pool+0x1c>
 800f222:	4b0a      	ldr	r3, [pc, #40]	; (800f24c <memp_malloc_pool+0x38>)
 800f224:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800f228:	4909      	ldr	r1, [pc, #36]	; (800f250 <memp_malloc_pool+0x3c>)
 800f22a:	480a      	ldr	r0, [pc, #40]	; (800f254 <memp_malloc_pool+0x40>)
 800f22c:	f008 fbb2 	bl	8017994 <iprintf>
  if (desc == NULL) {
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d101      	bne.n	800f23a <memp_malloc_pool+0x26>
    return NULL;
 800f236:	2300      	movs	r3, #0
 800f238:	e003      	b.n	800f242 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f7ff ffb8 	bl	800f1b0 <do_memp_malloc_pool>
 800f240:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f242:	4618      	mov	r0, r3
 800f244:	3708      	adds	r7, #8
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}
 800f24a:	bf00      	nop
 800f24c:	08018de4 	.word	0x08018de4
 800f250:	08018e60 	.word	0x08018e60
 800f254:	08018e38 	.word	0x08018e38

0800f258 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	4603      	mov	r3, r0
 800f260:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f262:	79fb      	ldrb	r3, [r7, #7]
 800f264:	2b0d      	cmp	r3, #13
 800f266:	d908      	bls.n	800f27a <memp_malloc+0x22>
 800f268:	4b0a      	ldr	r3, [pc, #40]	; (800f294 <memp_malloc+0x3c>)
 800f26a:	f240 1287 	movw	r2, #391	; 0x187
 800f26e:	490a      	ldr	r1, [pc, #40]	; (800f298 <memp_malloc+0x40>)
 800f270:	480a      	ldr	r0, [pc, #40]	; (800f29c <memp_malloc+0x44>)
 800f272:	f008 fb8f 	bl	8017994 <iprintf>
 800f276:	2300      	movs	r3, #0
 800f278:	e008      	b.n	800f28c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f27a:	79fb      	ldrb	r3, [r7, #7]
 800f27c:	4a08      	ldr	r2, [pc, #32]	; (800f2a0 <memp_malloc+0x48>)
 800f27e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f282:	4618      	mov	r0, r3
 800f284:	f7ff ff94 	bl	800f1b0 <do_memp_malloc_pool>
 800f288:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f28a:	68fb      	ldr	r3, [r7, #12]
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3710      	adds	r7, #16
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	08018de4 	.word	0x08018de4
 800f298:	08018e74 	.word	0x08018e74
 800f29c:	08018e38 	.word	0x08018e38
 800f2a0:	0801a964 	.word	0x0801a964

0800f2a4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b084      	sub	sp, #16
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	f003 0303 	and.w	r3, r3, #3
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d006      	beq.n	800f2c6 <do_memp_free_pool+0x22>
 800f2b8:	4b0d      	ldr	r3, [pc, #52]	; (800f2f0 <do_memp_free_pool+0x4c>)
 800f2ba:	f240 129d 	movw	r2, #413	; 0x19d
 800f2be:	490d      	ldr	r1, [pc, #52]	; (800f2f4 <do_memp_free_pool+0x50>)
 800f2c0:	480d      	ldr	r0, [pc, #52]	; (800f2f8 <do_memp_free_pool+0x54>)
 800f2c2:	f008 fb67 	bl	8017994 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f2ca:	f008 faff 	bl	80178cc <sys_arch_protect>
 800f2ce:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	689b      	ldr	r3, [r3, #8]
 800f2d4:	681a      	ldr	r2, [r3, #0]
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	689b      	ldr	r3, [r3, #8]
 800f2de:	68fa      	ldr	r2, [r7, #12]
 800f2e0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f2e2:	68b8      	ldr	r0, [r7, #8]
 800f2e4:	f008 fb00 	bl	80178e8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f2e8:	bf00      	nop
 800f2ea:	3710      	adds	r7, #16
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}
 800f2f0:	08018de4 	.word	0x08018de4
 800f2f4:	08018e94 	.word	0x08018e94
 800f2f8:	08018e38 	.word	0x08018e38

0800f2fc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b082      	sub	sp, #8
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
 800f304:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d106      	bne.n	800f31a <memp_free_pool+0x1e>
 800f30c:	4b0a      	ldr	r3, [pc, #40]	; (800f338 <memp_free_pool+0x3c>)
 800f30e:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 800f312:	490a      	ldr	r1, [pc, #40]	; (800f33c <memp_free_pool+0x40>)
 800f314:	480a      	ldr	r0, [pc, #40]	; (800f340 <memp_free_pool+0x44>)
 800f316:	f008 fb3d 	bl	8017994 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d007      	beq.n	800f330 <memp_free_pool+0x34>
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d004      	beq.n	800f330 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800f326:	6839      	ldr	r1, [r7, #0]
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f7ff ffbb 	bl	800f2a4 <do_memp_free_pool>
 800f32e:	e000      	b.n	800f332 <memp_free_pool+0x36>
    return;
 800f330:	bf00      	nop
}
 800f332:	3708      	adds	r7, #8
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	08018de4 	.word	0x08018de4
 800f33c:	08018e60 	.word	0x08018e60
 800f340:	08018e38 	.word	0x08018e38

0800f344 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b082      	sub	sp, #8
 800f348:	af00      	add	r7, sp, #0
 800f34a:	4603      	mov	r3, r0
 800f34c:	6039      	str	r1, [r7, #0]
 800f34e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f350:	79fb      	ldrb	r3, [r7, #7]
 800f352:	2b0d      	cmp	r3, #13
 800f354:	d907      	bls.n	800f366 <memp_free+0x22>
 800f356:	4b0c      	ldr	r3, [pc, #48]	; (800f388 <memp_free+0x44>)
 800f358:	f240 12db 	movw	r2, #475	; 0x1db
 800f35c:	490b      	ldr	r1, [pc, #44]	; (800f38c <memp_free+0x48>)
 800f35e:	480c      	ldr	r0, [pc, #48]	; (800f390 <memp_free+0x4c>)
 800f360:	f008 fb18 	bl	8017994 <iprintf>
 800f364:	e00c      	b.n	800f380 <memp_free+0x3c>

  if (mem == NULL) {
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d008      	beq.n	800f37e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f36c:	79fb      	ldrb	r3, [r7, #7]
 800f36e:	4a09      	ldr	r2, [pc, #36]	; (800f394 <memp_free+0x50>)
 800f370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f374:	6839      	ldr	r1, [r7, #0]
 800f376:	4618      	mov	r0, r3
 800f378:	f7ff ff94 	bl	800f2a4 <do_memp_free_pool>
 800f37c:	e000      	b.n	800f380 <memp_free+0x3c>
    return;
 800f37e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f380:	3708      	adds	r7, #8
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}
 800f386:	bf00      	nop
 800f388:	08018de4 	.word	0x08018de4
 800f38c:	08018eb4 	.word	0x08018eb4
 800f390:	08018e38 	.word	0x08018e38
 800f394:	0801a964 	.word	0x0801a964

0800f398 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f398:	b480      	push	{r7}
 800f39a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f39c:	bf00      	nop
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a4:	4770      	bx	lr
	...

0800f3a8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	60f8      	str	r0, [r7, #12]
 800f3b0:	60b9      	str	r1, [r7, #8]
 800f3b2:	607a      	str	r2, [r7, #4]
 800f3b4:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800f3b6:	69fb      	ldr	r3, [r7, #28]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d105      	bne.n	800f3c8 <netif_add+0x20>
 800f3bc:	4b26      	ldr	r3, [pc, #152]	; (800f458 <netif_add+0xb0>)
 800f3be:	22fb      	movs	r2, #251	; 0xfb
 800f3c0:	4926      	ldr	r1, [pc, #152]	; (800f45c <netif_add+0xb4>)
 800f3c2:	4827      	ldr	r0, [pc, #156]	; (800f460 <netif_add+0xb8>)
 800f3c4:	f008 fae6 	bl	8017994 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	3328      	adds	r3, #40	; 0x28
 800f3e6:	2204      	movs	r2, #4
 800f3e8:	2100      	movs	r1, #0
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f008 faca 	bl	8017984 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	2203      	movs	r2, #3
 800f3f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	2200      	movs	r2, #0
 800f402:	621a      	str	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	69ba      	ldr	r2, [r7, #24]
 800f408:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num++;
 800f40a:	4b16      	ldr	r3, [pc, #88]	; (800f464 <netif_add+0xbc>)
 800f40c:	781b      	ldrb	r3, [r3, #0]
 800f40e:	1c5a      	adds	r2, r3, #1
 800f410:	b2d1      	uxtb	r1, r2
 800f412:	4a14      	ldr	r2, [pc, #80]	; (800f464 <netif_add+0xbc>)
 800f414:	7011      	strb	r1, [r2, #0]
 800f416:	68fa      	ldr	r2, [r7, #12]
 800f418:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  netif->input = input;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	6a3a      	ldr	r2, [r7, #32]
 800f420:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	687a      	ldr	r2, [r7, #4]
 800f426:	68b9      	ldr	r1, [r7, #8]
 800f428:	68f8      	ldr	r0, [r7, #12]
 800f42a:	f000 f81f 	bl	800f46c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f42e:	69fb      	ldr	r3, [r7, #28]
 800f430:	68f8      	ldr	r0, [r7, #12]
 800f432:	4798      	blx	r3
 800f434:	4603      	mov	r3, r0
 800f436:	2b00      	cmp	r3, #0
 800f438:	d001      	beq.n	800f43e <netif_add+0x96>
    return NULL;
 800f43a:	2300      	movs	r3, #0
 800f43c:	e007      	b.n	800f44e <netif_add+0xa6>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f43e:	4b0a      	ldr	r3, [pc, #40]	; (800f468 <netif_add+0xc0>)
 800f440:	681a      	ldr	r2, [r3, #0]
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f446:	4a08      	ldr	r2, [pc, #32]	; (800f468 <netif_add+0xc0>)
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800f44c:	68fb      	ldr	r3, [r7, #12]
}
 800f44e:	4618      	mov	r0, r3
 800f450:	3710      	adds	r7, #16
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}
 800f456:	bf00      	nop
 800f458:	08018ed0 	.word	0x08018ed0
 800f45c:	08018f04 	.word	0x08018f04
 800f460:	08018f1c 	.word	0x08018f1c
 800f464:	240217fc 	.word	0x240217fc
 800f468:	24024e3c 	.word	0x24024e3c

0800f46c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b084      	sub	sp, #16
 800f470:	af00      	add	r7, sp, #0
 800f472:	60f8      	str	r0, [r7, #12]
 800f474:	60b9      	str	r1, [r7, #8]
 800f476:	607a      	str	r2, [r7, #4]
 800f478:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d003      	beq.n	800f488 <netif_set_addr+0x1c>
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d10c      	bne.n	800f4a2 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800f488:	68b9      	ldr	r1, [r7, #8]
 800f48a:	68f8      	ldr	r0, [r7, #12]
 800f48c:	f000 f81a 	bl	800f4c4 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800f490:	6879      	ldr	r1, [r7, #4]
 800f492:	68f8      	ldr	r0, [r7, #12]
 800f494:	f000 f86a 	bl	800f56c <netif_set_netmask>
    netif_set_gw(netif, gw);
 800f498:	6839      	ldr	r1, [r7, #0]
 800f49a:	68f8      	ldr	r0, [r7, #12]
 800f49c:	f000 f852 	bl	800f544 <netif_set_gw>
 800f4a0:	e00b      	b.n	800f4ba <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800f4a2:	6879      	ldr	r1, [r7, #4]
 800f4a4:	68f8      	ldr	r0, [r7, #12]
 800f4a6:	f000 f861 	bl	800f56c <netif_set_netmask>
    netif_set_gw(netif, gw);
 800f4aa:	6839      	ldr	r1, [r7, #0]
 800f4ac:	68f8      	ldr	r0, [r7, #12]
 800f4ae:	f000 f849 	bl	800f544 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800f4b2:	68b9      	ldr	r1, [r7, #8]
 800f4b4:	68f8      	ldr	r0, [r7, #12]
 800f4b6:	f000 f805 	bl	800f4c4 <netif_set_ipaddr>
  }
}
 800f4ba:	bf00      	nop
 800f4bc:	3710      	adds	r7, #16
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}
	...

0800f4c4 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b084      	sub	sp, #16
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800f4ce:	683b      	ldr	r3, [r7, #0]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d003      	beq.n	800f4dc <netif_set_ipaddr+0x18>
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	60fb      	str	r3, [r7, #12]
 800f4da:	e002      	b.n	800f4e2 <netif_set_ipaddr+0x1e>
 800f4dc:	4b18      	ldr	r3, [pc, #96]	; (800f540 <netif_set_ipaddr+0x7c>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800f4e2:	68fa      	ldr	r2, [r7, #12]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	3304      	adds	r3, #4
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d024      	beq.n	800f538 <netif_set_ipaddr+0x74>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	3304      	adds	r3, #4
 800f4f2:	f107 020c 	add.w	r2, r7, #12
 800f4f6:	4611      	mov	r1, r2
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f002 f913 	bl	8011724 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	3304      	adds	r3, #4
 800f502:	f107 020c 	add.w	r2, r7, #12
 800f506:	4611      	mov	r1, r2
 800f508:	4618      	mov	r0, r3
 800f50a:	f005 fda5 	bl	8015058 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d002      	beq.n	800f51a <netif_set_ipaddr+0x56>
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	e000      	b.n	800f51c <netif_set_ipaddr+0x58>
 800f51a:	2300      	movs	r3, #0
 800f51c:	687a      	ldr	r2, [r7, #4]
 800f51e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f520:	2101      	movs	r1, #1
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f000 f871 	bl	800f60a <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	69db      	ldr	r3, [r3, #28]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d003      	beq.n	800f538 <netif_set_ipaddr+0x74>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	69db      	ldr	r3, [r3, #28]
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	4798      	blx	r3
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800f538:	bf00      	nop
 800f53a:	3710      	adds	r7, #16
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}
 800f540:	0801a9dc 	.word	0x0801a9dc

0800f544 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800f544:	b480      	push	{r7}
 800f546:	b083      	sub	sp, #12
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d002      	beq.n	800f55a <netif_set_gw+0x16>
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	e000      	b.n	800f55c <netif_set_gw+0x18>
 800f55a:	2300      	movs	r3, #0
 800f55c:	687a      	ldr	r2, [r7, #4]
 800f55e:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800f560:	bf00      	nop
 800f562:	370c      	adds	r7, #12
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr

0800f56c <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800f56c:	b480      	push	{r7}
 800f56e:	b083      	sub	sp, #12
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
 800f574:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d002      	beq.n	800f582 <netif_set_netmask+0x16>
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	e000      	b.n	800f584 <netif_set_netmask+0x18>
 800f582:	2300      	movs	r3, #0
 800f584:	687a      	ldr	r2, [r7, #4]
 800f586:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800f588:	bf00      	nop
 800f58a:	370c      	adds	r7, #12
 800f58c:	46bd      	mov	sp, r7
 800f58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f592:	4770      	bx	lr

0800f594 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f594:	b480      	push	{r7}
 800f596:	b083      	sub	sp, #12
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f59c:	4a04      	ldr	r2, [pc, #16]	; (800f5b0 <netif_set_default+0x1c>)
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f5a2:	bf00      	nop
 800f5a4:	370c      	adds	r7, #12
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ac:	4770      	bx	lr
 800f5ae:	bf00      	nop
 800f5b0:	24024e40 	.word	0x24024e40

0800f5b4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b082      	sub	sp, #8
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f5c2:	f003 0301 	and.w	r3, r3, #1
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d11b      	bne.n	800f602 <netif_set_up+0x4e>
    netif->flags |= NETIF_FLAG_UP;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f5d0:	f043 0301 	orr.w	r3, r3, #1
 800f5d4:	b2da      	uxtb	r2, r3
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	69db      	ldr	r3, [r3, #28]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d003      	beq.n	800f5ec <netif_set_up+0x38>
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	69db      	ldr	r3, [r3, #28]
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	4798      	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f5f2:	f003 0304 	and.w	r3, r3, #4
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d003      	beq.n	800f602 <netif_set_up+0x4e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800f5fa:	2103      	movs	r1, #3
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f000 f804 	bl	800f60a <netif_issue_reports>
    }
  }
}
 800f602:	bf00      	nop
 800f604:	3708      	adds	r7, #8
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}

0800f60a <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800f60a:	b580      	push	{r7, lr}
 800f60c:	b082      	sub	sp, #8
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
 800f612:	460b      	mov	r3, r1
 800f614:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f616:	78fb      	ldrb	r3, [r7, #3]
 800f618:	f003 0301 	and.w	r3, r3, #1
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d011      	beq.n	800f644 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	3304      	adds	r3, #4
 800f624:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f626:	2b00      	cmp	r3, #0
 800f628:	d00c      	beq.n	800f644 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f630:	f003 0308 	and.w	r3, r3, #8
 800f634:	2b00      	cmp	r3, #0
 800f636:	d005      	beq.n	800f644 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	3304      	adds	r3, #4
 800f63c:	4619      	mov	r1, r3
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f006 fcfe 	bl	8016040 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800f644:	bf00      	nop
 800f646:	3708      	adds	r7, #8
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}

0800f64c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b082      	sub	sp, #8
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f65a:	f003 0301 	and.w	r3, r3, #1
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d01a      	beq.n	800f698 <netif_set_down+0x4c>
    netif->flags &= ~NETIF_FLAG_UP;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f668:	f023 0301 	bic.w	r3, r3, #1
 800f66c:	b2da      	uxtb	r2, r3
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f67a:	f003 0308 	and.w	r3, r3, #8
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d002      	beq.n	800f688 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f006 f852 	bl	801572c <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	69db      	ldr	r3, [r3, #28]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d003      	beq.n	800f698 <netif_set_down+0x4c>
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	69db      	ldr	r3, [r3, #28]
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	4798      	blx	r3
  }
}
 800f698:	bf00      	nop
 800f69a:	3708      	adds	r7, #8
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}

0800f6a0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b082      	sub	sp, #8
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f6ae:	f003 0304 	and.w	r3, r3, #4
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d11b      	bne.n	800f6ee <netif_set_link_up+0x4e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f6bc:	f043 0304 	orr.w	r3, r3, #4
 800f6c0:	b2da      	uxtb	r2, r3
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f6ce:	f003 0301 	and.w	r3, r3, #1
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d003      	beq.n	800f6de <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800f6d6:	2103      	movs	r1, #3
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f7ff ff96 	bl	800f60a <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6a1b      	ldr	r3, [r3, #32]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d003      	beq.n	800f6ee <netif_set_link_up+0x4e>
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	6a1b      	ldr	r3, [r3, #32]
 800f6ea:	6878      	ldr	r0, [r7, #4]
 800f6ec:	4798      	blx	r3
  }
}
 800f6ee:	bf00      	nop
 800f6f0:	3708      	adds	r7, #8
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}

0800f6f6 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 800f6f6:	b580      	push	{r7, lr}
 800f6f8:	b082      	sub	sp, #8
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f704:	f003 0304 	and.w	r3, r3, #4
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d010      	beq.n	800f72e <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f712:	f023 0304 	bic.w	r3, r3, #4
 800f716:	b2da      	uxtb	r2, r3
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    NETIF_LINK_CALLBACK(netif);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6a1b      	ldr	r3, [r3, #32]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d003      	beq.n	800f72e <netif_set_link_down+0x38>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6a1b      	ldr	r3, [r3, #32]
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	4798      	blx	r3
  }
}
 800f72e:	bf00      	nop
 800f730:	3708      	adds	r7, #8
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}

0800f736 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800f736:	b480      	push	{r7}
 800f738:	b083      	sub	sp, #12
 800f73a:	af00      	add	r7, sp, #0
 800f73c:	6078      	str	r0, [r7, #4]
 800f73e:	6039      	str	r1, [r7, #0]
  if (netif) {
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d002      	beq.n	800f74c <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	683a      	ldr	r2, [r7, #0]
 800f74a:	621a      	str	r2, [r3, #32]
  }
}
 800f74c:	bf00      	nop
 800f74e:	370c      	adds	r7, #12
 800f750:	46bd      	mov	sp, r7
 800f752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f756:	4770      	bx	lr

0800f758 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800f75e:	f008 f8b5 	bl	80178cc <sys_arch_protect>
 800f762:	6038      	str	r0, [r7, #0]
 800f764:	4b0f      	ldr	r3, [pc, #60]	; (800f7a4 <pbuf_free_ooseq+0x4c>)
 800f766:	2200      	movs	r2, #0
 800f768:	701a      	strb	r2, [r3, #0]
 800f76a:	6838      	ldr	r0, [r7, #0]
 800f76c:	f008 f8bc 	bl	80178e8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f770:	4b0d      	ldr	r3, [pc, #52]	; (800f7a8 <pbuf_free_ooseq+0x50>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	607b      	str	r3, [r7, #4]
 800f776:	e00f      	b.n	800f798 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d008      	beq.n	800f792 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f784:	4618      	mov	r0, r3
 800f786:	f001 fcfe 	bl	8011186 <tcp_segs_free>
      pcb->ooseq = NULL;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2200      	movs	r2, #0
 800f78e:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800f790:	e005      	b.n	800f79e <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	68db      	ldr	r3, [r3, #12]
 800f796:	607b      	str	r3, [r7, #4]
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d1ec      	bne.n	800f778 <pbuf_free_ooseq+0x20>
    }
  }
}
 800f79e:	3708      	adds	r7, #8
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}
 800f7a4:	24024e44 	.word	0x24024e44
 800f7a8:	24024e4c 	.word	0x24024e4c

0800f7ac <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b082      	sub	sp, #8
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800f7b4:	f7ff ffd0 	bl	800f758 <pbuf_free_ooseq>
}
 800f7b8:	bf00      	nop
 800f7ba:	3708      	adds	r7, #8
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b082      	sub	sp, #8
 800f7c4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800f7c6:	f008 f881 	bl	80178cc <sys_arch_protect>
 800f7ca:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800f7cc:	4b10      	ldr	r3, [pc, #64]	; (800f810 <pbuf_pool_is_empty+0x50>)
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800f7d2:	4b0f      	ldr	r3, [pc, #60]	; (800f810 <pbuf_pool_is_empty+0x50>)
 800f7d4:	2201      	movs	r2, #1
 800f7d6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f008 f885 	bl	80178e8 <sys_arch_unprotect>

  if (!queued) {
 800f7de:	78fb      	ldrb	r3, [r7, #3]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d110      	bne.n	800f806 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	2100      	movs	r1, #0
 800f7e8:	480a      	ldr	r0, [pc, #40]	; (800f814 <pbuf_pool_is_empty+0x54>)
 800f7ea:	f7fe ffdb 	bl	800e7a4 <tcpip_callback_with_block>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d008      	beq.n	800f806 <pbuf_pool_is_empty+0x46>
 800f7f4:	f008 f86a 	bl	80178cc <sys_arch_protect>
 800f7f8:	6078      	str	r0, [r7, #4]
 800f7fa:	4b05      	ldr	r3, [pc, #20]	; (800f810 <pbuf_pool_is_empty+0x50>)
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	701a      	strb	r2, [r3, #0]
 800f800:	6878      	ldr	r0, [r7, #4]
 800f802:	f008 f871 	bl	80178e8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800f806:	bf00      	nop
 800f808:	3708      	adds	r7, #8
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop
 800f810:	24024e44 	.word	0x24024e44
 800f814:	0800f7ad 	.word	0x0800f7ad

0800f818 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b088      	sub	sp, #32
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	4603      	mov	r3, r0
 800f820:	71fb      	strb	r3, [r7, #7]
 800f822:	460b      	mov	r3, r1
 800f824:	80bb      	strh	r3, [r7, #4]
 800f826:	4613      	mov	r3, r2
 800f828:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800f82a:	79fb      	ldrb	r3, [r7, #7]
 800f82c:	2b04      	cmp	r3, #4
 800f82e:	d81c      	bhi.n	800f86a <pbuf_alloc+0x52>
 800f830:	a201      	add	r2, pc, #4	; (adr r2, 800f838 <pbuf_alloc+0x20>)
 800f832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f836:	bf00      	nop
 800f838:	0800f84d 	.word	0x0800f84d
 800f83c:	0800f853 	.word	0x0800f853
 800f840:	0800f859 	.word	0x0800f859
 800f844:	0800f85f 	.word	0x0800f85f
 800f848:	0800f865 	.word	0x0800f865
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800f84c:	2336      	movs	r3, #54	; 0x36
 800f84e:	82fb      	strh	r3, [r7, #22]
    break;
 800f850:	e014      	b.n	800f87c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800f852:	2322      	movs	r3, #34	; 0x22
 800f854:	82fb      	strh	r3, [r7, #22]
    break;
 800f856:	e011      	b.n	800f87c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800f858:	230e      	movs	r3, #14
 800f85a:	82fb      	strh	r3, [r7, #22]
    break;
 800f85c:	e00e      	b.n	800f87c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800f85e:	2300      	movs	r3, #0
 800f860:	82fb      	strh	r3, [r7, #22]
    break;
 800f862:	e00b      	b.n	800f87c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800f864:	2300      	movs	r3, #0
 800f866:	82fb      	strh	r3, [r7, #22]
    break;
 800f868:	e008      	b.n	800f87c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800f86a:	4ba5      	ldr	r3, [pc, #660]	; (800fb00 <pbuf_alloc+0x2e8>)
 800f86c:	f44f 728b 	mov.w	r2, #278	; 0x116
 800f870:	49a4      	ldr	r1, [pc, #656]	; (800fb04 <pbuf_alloc+0x2ec>)
 800f872:	48a5      	ldr	r0, [pc, #660]	; (800fb08 <pbuf_alloc+0x2f0>)
 800f874:	f008 f88e 	bl	8017994 <iprintf>
    return NULL;
 800f878:	2300      	movs	r3, #0
 800f87a:	e15d      	b.n	800fb38 <pbuf_alloc+0x320>
  }

  switch (type) {
 800f87c:	79bb      	ldrb	r3, [r7, #6]
 800f87e:	2b03      	cmp	r3, #3
 800f880:	f200 8134 	bhi.w	800faec <pbuf_alloc+0x2d4>
 800f884:	a201      	add	r2, pc, #4	; (adr r2, 800f88c <pbuf_alloc+0x74>)
 800f886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f88a:	bf00      	nop
 800f88c:	0800fa2d 	.word	0x0800fa2d
 800f890:	0800fab9 	.word	0x0800fab9
 800f894:	0800fab9 	.word	0x0800fab9
 800f898:	0800f89d 	.word	0x0800f89d
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f89c:	200d      	movs	r0, #13
 800f89e:	f7ff fcdb 	bl	800f258 <memp_malloc>
 800f8a2:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800f8a4:	69fb      	ldr	r3, [r7, #28]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d103      	bne.n	800f8b2 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800f8aa:	f7ff ff89 	bl	800f7c0 <pbuf_pool_is_empty>
      return NULL;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	e142      	b.n	800fb38 <pbuf_alloc+0x320>
    }
    p->type = type;
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	79ba      	ldrb	r2, [r7, #6]
 800f8b6:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800f8b8:	69fb      	ldr	r3, [r7, #28]
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800f8be:	8afb      	ldrh	r3, [r7, #22]
 800f8c0:	3310      	adds	r3, #16
 800f8c2:	69fa      	ldr	r2, [r7, #28]
 800f8c4:	4413      	add	r3, r2
 800f8c6:	3303      	adds	r3, #3
 800f8c8:	f023 0303 	bic.w	r3, r3, #3
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	69fb      	ldr	r3, [r7, #28]
 800f8d0:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800f8d2:	69fb      	ldr	r3, [r7, #28]
 800f8d4:	685b      	ldr	r3, [r3, #4]
 800f8d6:	f003 0303 	and.w	r3, r3, #3
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d006      	beq.n	800f8ec <pbuf_alloc+0xd4>
 800f8de:	4b88      	ldr	r3, [pc, #544]	; (800fb00 <pbuf_alloc+0x2e8>)
 800f8e0:	f240 1229 	movw	r2, #297	; 0x129
 800f8e4:	4989      	ldr	r1, [pc, #548]	; (800fb0c <pbuf_alloc+0x2f4>)
 800f8e6:	4888      	ldr	r0, [pc, #544]	; (800fb08 <pbuf_alloc+0x2f0>)
 800f8e8:	f008 f854 	bl	8017994 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	88ba      	ldrh	r2, [r7, #4]
 800f8f0:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800f8f2:	8afb      	ldrh	r3, [r7, #22]
 800f8f4:	3303      	adds	r3, #3
 800f8f6:	f023 0303 	bic.w	r3, r3, #3
 800f8fa:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800f8fe:	88bb      	ldrh	r3, [r7, #4]
 800f900:	4293      	cmp	r3, r2
 800f902:	bf28      	it	cs
 800f904:	4613      	movcs	r3, r2
 800f906:	b29a      	uxth	r2, r3
 800f908:	69fb      	ldr	r3, [r7, #28]
 800f90a:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800f90c:	69fb      	ldr	r3, [r7, #28]
 800f90e:	685b      	ldr	r3, [r3, #4]
 800f910:	69fa      	ldr	r2, [r7, #28]
 800f912:	8952      	ldrh	r2, [r2, #10]
 800f914:	441a      	add	r2, r3
 800f916:	69fb      	ldr	r3, [r7, #28]
 800f918:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d906      	bls.n	800f92e <pbuf_alloc+0x116>
 800f920:	4b77      	ldr	r3, [pc, #476]	; (800fb00 <pbuf_alloc+0x2e8>)
 800f922:	f44f 7298 	mov.w	r2, #304	; 0x130
 800f926:	497a      	ldr	r1, [pc, #488]	; (800fb10 <pbuf_alloc+0x2f8>)
 800f928:	4877      	ldr	r0, [pc, #476]	; (800fb08 <pbuf_alloc+0x2f0>)
 800f92a:	f008 f833 	bl	8017994 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f92e:	8afb      	ldrh	r3, [r7, #22]
 800f930:	3303      	adds	r3, #3
 800f932:	f023 0303 	bic.w	r3, r3, #3
 800f936:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800f93a:	d106      	bne.n	800f94a <pbuf_alloc+0x132>
 800f93c:	4b70      	ldr	r3, [pc, #448]	; (800fb00 <pbuf_alloc+0x2e8>)
 800f93e:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f942:	4974      	ldr	r1, [pc, #464]	; (800fb14 <pbuf_alloc+0x2fc>)
 800f944:	4870      	ldr	r0, [pc, #448]	; (800fb08 <pbuf_alloc+0x2f0>)
 800f946:	f008 f825 	bl	8017994 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800f94a:	69fb      	ldr	r3, [r7, #28]
 800f94c:	2201      	movs	r2, #1
 800f94e:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800f950:	69fb      	ldr	r3, [r7, #28]
 800f952:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800f954:	88bb      	ldrh	r3, [r7, #4]
 800f956:	69fa      	ldr	r2, [r7, #28]
 800f958:	8952      	ldrh	r2, [r2, #10]
 800f95a:	1a9b      	subs	r3, r3, r2
 800f95c:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800f95e:	e061      	b.n	800fa24 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f960:	200d      	movs	r0, #13
 800f962:	f7ff fc79 	bl	800f258 <memp_malloc>
 800f966:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d106      	bne.n	800f97c <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800f96e:	f7ff ff27 	bl	800f7c0 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800f972:	69f8      	ldr	r0, [r7, #28]
 800f974:	f000 fac2 	bl	800fefc <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800f978:	2300      	movs	r3, #0
 800f97a:	e0dd      	b.n	800fb38 <pbuf_alloc+0x320>
      }
      q->type = type;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	79ba      	ldrb	r2, [r7, #6]
 800f980:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	2200      	movs	r2, #0
 800f986:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	2200      	movs	r2, #0
 800f98c:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800f98e:	69bb      	ldr	r3, [r7, #24]
 800f990:	68fa      	ldr	r2, [r7, #12]
 800f992:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800f994:	693b      	ldr	r3, [r7, #16]
 800f996:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f99a:	4293      	cmp	r3, r2
 800f99c:	dd06      	ble.n	800f9ac <pbuf_alloc+0x194>
 800f99e:	4b58      	ldr	r3, [pc, #352]	; (800fb00 <pbuf_alloc+0x2e8>)
 800f9a0:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800f9a4:	495c      	ldr	r1, [pc, #368]	; (800fb18 <pbuf_alloc+0x300>)
 800f9a6:	4858      	ldr	r0, [pc, #352]	; (800fb08 <pbuf_alloc+0x2f0>)
 800f9a8:	f007 fff4 	bl	8017994 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800f9ac:	693b      	ldr	r3, [r7, #16]
 800f9ae:	b29a      	uxth	r2, r3
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800f9b4:	693b      	ldr	r3, [r7, #16]
 800f9b6:	b29b      	uxth	r3, r3
 800f9b8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800f9bc:	bf28      	it	cs
 800f9be:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800f9c2:	b29a      	uxth	r2, r3
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	f103 0210 	add.w	r2, r3, #16
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	685b      	ldr	r3, [r3, #4]
 800f9d6:	f003 0303 	and.w	r3, r3, #3
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d006      	beq.n	800f9ec <pbuf_alloc+0x1d4>
 800f9de:	4b48      	ldr	r3, [pc, #288]	; (800fb00 <pbuf_alloc+0x2e8>)
 800f9e0:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800f9e4:	494d      	ldr	r1, [pc, #308]	; (800fb1c <pbuf_alloc+0x304>)
 800f9e6:	4848      	ldr	r0, [pc, #288]	; (800fb08 <pbuf_alloc+0x2f0>)
 800f9e8:	f007 ffd4 	bl	8017994 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800f9ec:	69fb      	ldr	r3, [r7, #28]
 800f9ee:	685b      	ldr	r3, [r3, #4]
 800f9f0:	69fa      	ldr	r2, [r7, #28]
 800f9f2:	8952      	ldrh	r2, [r2, #10]
 800f9f4:	441a      	add	r2, r3
 800f9f6:	69fb      	ldr	r3, [r7, #28]
 800f9f8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d906      	bls.n	800fa0e <pbuf_alloc+0x1f6>
 800fa00:	4b3f      	ldr	r3, [pc, #252]	; (800fb00 <pbuf_alloc+0x2e8>)
 800fa02:	f240 1255 	movw	r2, #341	; 0x155
 800fa06:	4942      	ldr	r1, [pc, #264]	; (800fb10 <pbuf_alloc+0x2f8>)
 800fa08:	483f      	ldr	r0, [pc, #252]	; (800fb08 <pbuf_alloc+0x2f0>)
 800fa0a:	f007 ffc3 	bl	8017994 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	2201      	movs	r2, #1
 800fa12:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	895b      	ldrh	r3, [r3, #10]
 800fa18:	461a      	mov	r2, r3
 800fa1a:	693b      	ldr	r3, [r7, #16]
 800fa1c:	1a9b      	subs	r3, r3, r2
 800fa1e:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800fa24:	693b      	ldr	r3, [r7, #16]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	dc9a      	bgt.n	800f960 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800fa2a:	e07e      	b.n	800fb2a <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800fa2c:	8afb      	ldrh	r3, [r7, #22]
 800fa2e:	3313      	adds	r3, #19
 800fa30:	b29b      	uxth	r3, r3
 800fa32:	f023 0303 	bic.w	r3, r3, #3
 800fa36:	b29a      	uxth	r2, r3
 800fa38:	88bb      	ldrh	r3, [r7, #4]
 800fa3a:	3303      	adds	r3, #3
 800fa3c:	b29b      	uxth	r3, r3
 800fa3e:	f023 0303 	bic.w	r3, r3, #3
 800fa42:	b29b      	uxth	r3, r3
 800fa44:	4413      	add	r3, r2
 800fa46:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800fa48:	897a      	ldrh	r2, [r7, #10]
 800fa4a:	88bb      	ldrh	r3, [r7, #4]
 800fa4c:	3303      	adds	r3, #3
 800fa4e:	f023 0303 	bic.w	r3, r3, #3
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d201      	bcs.n	800fa5a <pbuf_alloc+0x242>
        return NULL;
 800fa56:	2300      	movs	r3, #0
 800fa58:	e06e      	b.n	800fb38 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800fa5a:	897b      	ldrh	r3, [r7, #10]
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f7ff fa69 	bl	800ef34 <mem_malloc>
 800fa62:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800fa64:	69fb      	ldr	r3, [r7, #28]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d101      	bne.n	800fa6e <pbuf_alloc+0x256>
      return NULL;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	e064      	b.n	800fb38 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800fa6e:	8afb      	ldrh	r3, [r7, #22]
 800fa70:	3310      	adds	r3, #16
 800fa72:	69fa      	ldr	r2, [r7, #28]
 800fa74:	4413      	add	r3, r2
 800fa76:	3303      	adds	r3, #3
 800fa78:	f023 0303 	bic.w	r3, r3, #3
 800fa7c:	461a      	mov	r2, r3
 800fa7e:	69fb      	ldr	r3, [r7, #28]
 800fa80:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800fa82:	69fb      	ldr	r3, [r7, #28]
 800fa84:	88ba      	ldrh	r2, [r7, #4]
 800fa86:	811a      	strh	r2, [r3, #8]
 800fa88:	69fb      	ldr	r3, [r7, #28]
 800fa8a:	891a      	ldrh	r2, [r3, #8]
 800fa8c:	69fb      	ldr	r3, [r7, #28]
 800fa8e:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800fa90:	69fb      	ldr	r3, [r7, #28]
 800fa92:	2200      	movs	r2, #0
 800fa94:	601a      	str	r2, [r3, #0]
    p->type = type;
 800fa96:	69fb      	ldr	r3, [r7, #28]
 800fa98:	79ba      	ldrb	r2, [r7, #6]
 800fa9a:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800fa9c:	69fb      	ldr	r3, [r7, #28]
 800fa9e:	685b      	ldr	r3, [r3, #4]
 800faa0:	f003 0303 	and.w	r3, r3, #3
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d03f      	beq.n	800fb28 <pbuf_alloc+0x310>
 800faa8:	4b15      	ldr	r3, [pc, #84]	; (800fb00 <pbuf_alloc+0x2e8>)
 800faaa:	f240 1277 	movw	r2, #375	; 0x177
 800faae:	491c      	ldr	r1, [pc, #112]	; (800fb20 <pbuf_alloc+0x308>)
 800fab0:	4815      	ldr	r0, [pc, #84]	; (800fb08 <pbuf_alloc+0x2f0>)
 800fab2:	f007 ff6f 	bl	8017994 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800fab6:	e037      	b.n	800fb28 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800fab8:	200c      	movs	r0, #12
 800faba:	f7ff fbcd 	bl	800f258 <memp_malloc>
 800fabe:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800fac0:	69fb      	ldr	r3, [r7, #28]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d101      	bne.n	800faca <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800fac6:	2300      	movs	r3, #0
 800fac8:	e036      	b.n	800fb38 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800faca:	69fb      	ldr	r3, [r7, #28]
 800facc:	2200      	movs	r2, #0
 800face:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800fad0:	69fb      	ldr	r3, [r7, #28]
 800fad2:	88ba      	ldrh	r2, [r7, #4]
 800fad4:	811a      	strh	r2, [r3, #8]
 800fad6:	69fb      	ldr	r3, [r7, #28]
 800fad8:	891a      	ldrh	r2, [r3, #8]
 800fada:	69fb      	ldr	r3, [r7, #28]
 800fadc:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800fade:	69fb      	ldr	r3, [r7, #28]
 800fae0:	2200      	movs	r2, #0
 800fae2:	601a      	str	r2, [r3, #0]
    p->type = type;
 800fae4:	69fb      	ldr	r3, [r7, #28]
 800fae6:	79ba      	ldrb	r2, [r7, #6]
 800fae8:	731a      	strb	r2, [r3, #12]
    break;
 800faea:	e01e      	b.n	800fb2a <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800faec:	4b04      	ldr	r3, [pc, #16]	; (800fb00 <pbuf_alloc+0x2e8>)
 800faee:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800faf2:	490c      	ldr	r1, [pc, #48]	; (800fb24 <pbuf_alloc+0x30c>)
 800faf4:	4804      	ldr	r0, [pc, #16]	; (800fb08 <pbuf_alloc+0x2f0>)
 800faf6:	f007 ff4d 	bl	8017994 <iprintf>
    return NULL;
 800fafa:	2300      	movs	r3, #0
 800fafc:	e01c      	b.n	800fb38 <pbuf_alloc+0x320>
 800fafe:	bf00      	nop
 800fb00:	08018f78 	.word	0x08018f78
 800fb04:	08018fa8 	.word	0x08018fa8
 800fb08:	08018fc4 	.word	0x08018fc4
 800fb0c:	08018fec 	.word	0x08018fec
 800fb10:	0801901c 	.word	0x0801901c
 800fb14:	08019050 	.word	0x08019050
 800fb18:	08019084 	.word	0x08019084
 800fb1c:	08019098 	.word	0x08019098
 800fb20:	080190c8 	.word	0x080190c8
 800fb24:	080190f4 	.word	0x080190f4
    break;
 800fb28:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800fb2a:	69fb      	ldr	r3, [r7, #28]
 800fb2c:	2201      	movs	r2, #1
 800fb2e:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800fb30:	69fb      	ldr	r3, [r7, #28]
 800fb32:	2200      	movs	r2, #0
 800fb34:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800fb36:	69fb      	ldr	r3, [r7, #28]
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3720      	adds	r7, #32
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b084      	sub	sp, #16
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	603b      	str	r3, [r7, #0]
 800fb48:	4603      	mov	r3, r0
 800fb4a:	71fb      	strb	r3, [r7, #7]
 800fb4c:	460b      	mov	r3, r1
 800fb4e:	80bb      	strh	r3, [r7, #4]
 800fb50:	4613      	mov	r3, r2
 800fb52:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800fb54:	79fb      	ldrb	r3, [r7, #7]
 800fb56:	2b04      	cmp	r3, #4
 800fb58:	d81b      	bhi.n	800fb92 <pbuf_alloced_custom+0x52>
 800fb5a:	a201      	add	r2, pc, #4	; (adr r2, 800fb60 <pbuf_alloced_custom+0x20>)
 800fb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb60:	0800fb75 	.word	0x0800fb75
 800fb64:	0800fb7b 	.word	0x0800fb7b
 800fb68:	0800fb81 	.word	0x0800fb81
 800fb6c:	0800fb87 	.word	0x0800fb87
 800fb70:	0800fb8d 	.word	0x0800fb8d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800fb74:	2336      	movs	r3, #54	; 0x36
 800fb76:	81fb      	strh	r3, [r7, #14]
    break;
 800fb78:	e014      	b.n	800fba4 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800fb7a:	2322      	movs	r3, #34	; 0x22
 800fb7c:	81fb      	strh	r3, [r7, #14]
    break;
 800fb7e:	e011      	b.n	800fba4 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800fb80:	230e      	movs	r3, #14
 800fb82:	81fb      	strh	r3, [r7, #14]
    break;
 800fb84:	e00e      	b.n	800fba4 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800fb86:	2300      	movs	r3, #0
 800fb88:	81fb      	strh	r3, [r7, #14]
    break;
 800fb8a:	e00b      	b.n	800fba4 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	81fb      	strh	r3, [r7, #14]
    break;
 800fb90:	e008      	b.n	800fba4 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800fb92:	4b1d      	ldr	r3, [pc, #116]	; (800fc08 <pbuf_alloced_custom+0xc8>)
 800fb94:	f240 12c5 	movw	r2, #453	; 0x1c5
 800fb98:	491c      	ldr	r1, [pc, #112]	; (800fc0c <pbuf_alloced_custom+0xcc>)
 800fb9a:	481d      	ldr	r0, [pc, #116]	; (800fc10 <pbuf_alloced_custom+0xd0>)
 800fb9c:	f007 fefa 	bl	8017994 <iprintf>
    return NULL;
 800fba0:	2300      	movs	r3, #0
 800fba2:	e02d      	b.n	800fc00 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800fba4:	89fb      	ldrh	r3, [r7, #14]
 800fba6:	3303      	adds	r3, #3
 800fba8:	f023 0203 	bic.w	r2, r3, #3
 800fbac:	88bb      	ldrh	r3, [r7, #4]
 800fbae:	441a      	add	r2, r3
 800fbb0:	8bbb      	ldrh	r3, [r7, #28]
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d901      	bls.n	800fbba <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	e022      	b.n	800fc00 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800fbc0:	69bb      	ldr	r3, [r7, #24]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d008      	beq.n	800fbd8 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800fbc6:	89fb      	ldrh	r3, [r7, #14]
 800fbc8:	3303      	adds	r3, #3
 800fbca:	f023 0303 	bic.w	r3, r3, #3
 800fbce:	69ba      	ldr	r2, [r7, #24]
 800fbd0:	441a      	add	r2, r3
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	605a      	str	r2, [r3, #4]
 800fbd6:	e002      	b.n	800fbde <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	2202      	movs	r2, #2
 800fbe2:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	88ba      	ldrh	r2, [r7, #4]
 800fbe8:	811a      	strh	r2, [r3, #8]
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	891a      	ldrh	r2, [r3, #8]
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800fbf2:	683b      	ldr	r3, [r7, #0]
 800fbf4:	79ba      	ldrb	r2, [r7, #6]
 800fbf6:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	2201      	movs	r2, #1
 800fbfc:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800fbfe:	683b      	ldr	r3, [r7, #0]
}
 800fc00:	4618      	mov	r0, r3
 800fc02:	3710      	adds	r7, #16
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}
 800fc08:	08018f78 	.word	0x08018f78
 800fc0c:	08019110 	.word	0x08019110
 800fc10:	08018fc4 	.word	0x08018fc4

0800fc14 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b086      	sub	sp, #24
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	460b      	mov	r3, r1
 800fc1e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d106      	bne.n	800fc34 <pbuf_realloc+0x20>
 800fc26:	4b4b      	ldr	r3, [pc, #300]	; (800fd54 <pbuf_realloc+0x140>)
 800fc28:	f240 12f3 	movw	r2, #499	; 0x1f3
 800fc2c:	494a      	ldr	r1, [pc, #296]	; (800fd58 <pbuf_realloc+0x144>)
 800fc2e:	484b      	ldr	r0, [pc, #300]	; (800fd5c <pbuf_realloc+0x148>)
 800fc30:	f007 feb0 	bl	8017994 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	7b1b      	ldrb	r3, [r3, #12]
 800fc38:	2b03      	cmp	r3, #3
 800fc3a:	d012      	beq.n	800fc62 <pbuf_realloc+0x4e>
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	7b1b      	ldrb	r3, [r3, #12]
 800fc40:	2b01      	cmp	r3, #1
 800fc42:	d00e      	beq.n	800fc62 <pbuf_realloc+0x4e>
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	7b1b      	ldrb	r3, [r3, #12]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d00a      	beq.n	800fc62 <pbuf_realloc+0x4e>
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	7b1b      	ldrb	r3, [r3, #12]
 800fc50:	2b02      	cmp	r3, #2
 800fc52:	d006      	beq.n	800fc62 <pbuf_realloc+0x4e>
 800fc54:	4b3f      	ldr	r3, [pc, #252]	; (800fd54 <pbuf_realloc+0x140>)
 800fc56:	f240 12f7 	movw	r2, #503	; 0x1f7
 800fc5a:	4941      	ldr	r1, [pc, #260]	; (800fd60 <pbuf_realloc+0x14c>)
 800fc5c:	483f      	ldr	r0, [pc, #252]	; (800fd5c <pbuf_realloc+0x148>)
 800fc5e:	f007 fe99 	bl	8017994 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	891b      	ldrh	r3, [r3, #8]
 800fc66:	887a      	ldrh	r2, [r7, #2]
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	d26f      	bcs.n	800fd4c <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800fc6c:	887b      	ldrh	r3, [r7, #2]
 800fc6e:	687a      	ldr	r2, [r7, #4]
 800fc70:	8912      	ldrh	r2, [r2, #8]
 800fc72:	1a9b      	subs	r3, r3, r2
 800fc74:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800fc76:	887b      	ldrh	r3, [r7, #2]
 800fc78:	827b      	strh	r3, [r7, #18]
  q = p;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800fc7e:	e025      	b.n	800fccc <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	895b      	ldrh	r3, [r3, #10]
 800fc84:	8a7a      	ldrh	r2, [r7, #18]
 800fc86:	1ad3      	subs	r3, r2, r3
 800fc88:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fc90:	4293      	cmp	r3, r2
 800fc92:	dd06      	ble.n	800fca2 <pbuf_realloc+0x8e>
 800fc94:	4b2f      	ldr	r3, [pc, #188]	; (800fd54 <pbuf_realloc+0x140>)
 800fc96:	f240 220b 	movw	r2, #523	; 0x20b
 800fc9a:	4932      	ldr	r1, [pc, #200]	; (800fd64 <pbuf_realloc+0x150>)
 800fc9c:	482f      	ldr	r0, [pc, #188]	; (800fd5c <pbuf_realloc+0x148>)
 800fc9e:	f007 fe79 	bl	8017994 <iprintf>
    q->tot_len += (u16_t)grow;
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	891a      	ldrh	r2, [r3, #8]
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	b29b      	uxth	r3, r3
 800fcaa:	4413      	add	r3, r2
 800fcac:	b29a      	uxth	r2, r3
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800fcb2:	697b      	ldr	r3, [r7, #20]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d106      	bne.n	800fccc <pbuf_realloc+0xb8>
 800fcbe:	4b25      	ldr	r3, [pc, #148]	; (800fd54 <pbuf_realloc+0x140>)
 800fcc0:	f240 220f 	movw	r2, #527	; 0x20f
 800fcc4:	4928      	ldr	r1, [pc, #160]	; (800fd68 <pbuf_realloc+0x154>)
 800fcc6:	4825      	ldr	r0, [pc, #148]	; (800fd5c <pbuf_realloc+0x148>)
 800fcc8:	f007 fe64 	bl	8017994 <iprintf>
  while (rem_len > q->len) {
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	895b      	ldrh	r3, [r3, #10]
 800fcd0:	8a7a      	ldrh	r2, [r7, #18]
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d8d4      	bhi.n	800fc80 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	7b1b      	ldrb	r3, [r3, #12]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d122      	bne.n	800fd24 <pbuf_realloc+0x110>
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	895b      	ldrh	r3, [r3, #10]
 800fce2:	8a7a      	ldrh	r2, [r7, #18]
 800fce4:	429a      	cmp	r2, r3
 800fce6:	d01d      	beq.n	800fd24 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	7b5b      	ldrb	r3, [r3, #13]
 800fcec:	f003 0302 	and.w	r3, r3, #2
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d117      	bne.n	800fd24 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	685b      	ldr	r3, [r3, #4]
 800fcf8:	461a      	mov	r2, r3
 800fcfa:	697b      	ldr	r3, [r7, #20]
 800fcfc:	1ad3      	subs	r3, r2, r3
 800fcfe:	b29a      	uxth	r2, r3
 800fd00:	8a7b      	ldrh	r3, [r7, #18]
 800fd02:	4413      	add	r3, r2
 800fd04:	b29b      	uxth	r3, r3
 800fd06:	4619      	mov	r1, r3
 800fd08:	6978      	ldr	r0, [r7, #20]
 800fd0a:	f7ff f829 	bl	800ed60 <mem_trim>
 800fd0e:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800fd10:	697b      	ldr	r3, [r7, #20]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d106      	bne.n	800fd24 <pbuf_realloc+0x110>
 800fd16:	4b0f      	ldr	r3, [pc, #60]	; (800fd54 <pbuf_realloc+0x140>)
 800fd18:	f240 221d 	movw	r2, #541	; 0x21d
 800fd1c:	4913      	ldr	r1, [pc, #76]	; (800fd6c <pbuf_realloc+0x158>)
 800fd1e:	480f      	ldr	r0, [pc, #60]	; (800fd5c <pbuf_realloc+0x148>)
 800fd20:	f007 fe38 	bl	8017994 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	8a7a      	ldrh	r2, [r7, #18]
 800fd28:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	895a      	ldrh	r2, [r3, #10]
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d004      	beq.n	800fd44 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f000 f8dc 	bl	800fefc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800fd44:	697b      	ldr	r3, [r7, #20]
 800fd46:	2200      	movs	r2, #0
 800fd48:	601a      	str	r2, [r3, #0]
 800fd4a:	e000      	b.n	800fd4e <pbuf_realloc+0x13a>
    return;
 800fd4c:	bf00      	nop

}
 800fd4e:	3718      	adds	r7, #24
 800fd50:	46bd      	mov	sp, r7
 800fd52:	bd80      	pop	{r7, pc}
 800fd54:	08018f78 	.word	0x08018f78
 800fd58:	08019134 	.word	0x08019134
 800fd5c:	08018fc4 	.word	0x08018fc4
 800fd60:	0801914c 	.word	0x0801914c
 800fd64:	08019168 	.word	0x08019168
 800fd68:	0801917c 	.word	0x0801917c
 800fd6c:	08019194 	.word	0x08019194

0800fd70 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b084      	sub	sp, #16
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	460b      	mov	r3, r1
 800fd7a:	807b      	strh	r3, [r7, #2]
 800fd7c:	4613      	mov	r3, r2
 800fd7e:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d106      	bne.n	800fd94 <pbuf_header_impl+0x24>
 800fd86:	4b46      	ldr	r3, [pc, #280]	; (800fea0 <pbuf_header_impl+0x130>)
 800fd88:	f240 223f 	movw	r2, #575	; 0x23f
 800fd8c:	4945      	ldr	r1, [pc, #276]	; (800fea4 <pbuf_header_impl+0x134>)
 800fd8e:	4846      	ldr	r0, [pc, #280]	; (800fea8 <pbuf_header_impl+0x138>)
 800fd90:	f007 fe00 	bl	8017994 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800fd94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d002      	beq.n	800fda2 <pbuf_header_impl+0x32>
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d101      	bne.n	800fda6 <pbuf_header_impl+0x36>
    return 0;
 800fda2:	2300      	movs	r3, #0
 800fda4:	e078      	b.n	800fe98 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800fda6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	da10      	bge.n	800fdd0 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800fdae:	887b      	ldrh	r3, [r7, #2]
 800fdb0:	425b      	negs	r3, r3
 800fdb2:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	895b      	ldrh	r3, [r3, #10]
 800fdb8:	89fa      	ldrh	r2, [r7, #14]
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d90a      	bls.n	800fdd4 <pbuf_header_impl+0x64>
 800fdbe:	4b38      	ldr	r3, [pc, #224]	; (800fea0 <pbuf_header_impl+0x130>)
 800fdc0:	f240 2247 	movw	r2, #583	; 0x247
 800fdc4:	4939      	ldr	r1, [pc, #228]	; (800feac <pbuf_header_impl+0x13c>)
 800fdc6:	4838      	ldr	r0, [pc, #224]	; (800fea8 <pbuf_header_impl+0x138>)
 800fdc8:	f007 fde4 	bl	8017994 <iprintf>
 800fdcc:	2301      	movs	r3, #1
 800fdce:	e063      	b.n	800fe98 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800fdd0:	887b      	ldrh	r3, [r7, #2]
 800fdd2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	7b1b      	ldrb	r3, [r3, #12]
 800fdd8:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	685b      	ldr	r3, [r3, #4]
 800fdde:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800fde0:	89bb      	ldrh	r3, [r7, #12]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d002      	beq.n	800fdec <pbuf_header_impl+0x7c>
 800fde6:	89bb      	ldrh	r3, [r7, #12]
 800fde8:	2b03      	cmp	r3, #3
 800fdea:	d112      	bne.n	800fe12 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	685a      	ldr	r2, [r3, #4]
 800fdf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fdf4:	425b      	negs	r3, r3
 800fdf6:	441a      	add	r2, r3
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	685a      	ldr	r2, [r3, #4]
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	3310      	adds	r3, #16
 800fe04:	429a      	cmp	r2, r3
 800fe06:	d238      	bcs.n	800fe7a <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	68ba      	ldr	r2, [r7, #8]
 800fe0c:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800fe0e:	2301      	movs	r3, #1
 800fe10:	e042      	b.n	800fe98 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800fe12:	89bb      	ldrh	r3, [r7, #12]
 800fe14:	2b02      	cmp	r3, #2
 800fe16:	d002      	beq.n	800fe1e <pbuf_header_impl+0xae>
 800fe18:	89bb      	ldrh	r3, [r7, #12]
 800fe1a:	2b01      	cmp	r3, #1
 800fe1c:	d124      	bne.n	800fe68 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800fe1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	da0d      	bge.n	800fe42 <pbuf_header_impl+0xd2>
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	895b      	ldrh	r3, [r3, #10]
 800fe2a:	89fa      	ldrh	r2, [r7, #14]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d808      	bhi.n	800fe42 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	685a      	ldr	r2, [r3, #4]
 800fe34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fe38:	425b      	negs	r3, r3
 800fe3a:	441a      	add	r2, r3
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	605a      	str	r2, [r3, #4]
 800fe40:	e011      	b.n	800fe66 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800fe42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	dd0b      	ble.n	800fe62 <pbuf_header_impl+0xf2>
 800fe4a:	787b      	ldrb	r3, [r7, #1]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d008      	beq.n	800fe62 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	685a      	ldr	r2, [r3, #4]
 800fe54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fe58:	425b      	negs	r3, r3
 800fe5a:	441a      	add	r2, r3
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	605a      	str	r2, [r3, #4]
 800fe60:	e001      	b.n	800fe66 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800fe62:	2301      	movs	r3, #1
 800fe64:	e018      	b.n	800fe98 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800fe66:	e008      	b.n	800fe7a <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800fe68:	4b0d      	ldr	r3, [pc, #52]	; (800fea0 <pbuf_header_impl+0x130>)
 800fe6a:	f240 2277 	movw	r2, #631	; 0x277
 800fe6e:	4910      	ldr	r1, [pc, #64]	; (800feb0 <pbuf_header_impl+0x140>)
 800fe70:	480d      	ldr	r0, [pc, #52]	; (800fea8 <pbuf_header_impl+0x138>)
 800fe72:	f007 fd8f 	bl	8017994 <iprintf>
    return 1;
 800fe76:	2301      	movs	r3, #1
 800fe78:	e00e      	b.n	800fe98 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	895a      	ldrh	r2, [r3, #10]
 800fe7e:	887b      	ldrh	r3, [r7, #2]
 800fe80:	4413      	add	r3, r2
 800fe82:	b29a      	uxth	r2, r3
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	891a      	ldrh	r2, [r3, #8]
 800fe8c:	887b      	ldrh	r3, [r7, #2]
 800fe8e:	4413      	add	r3, r2
 800fe90:	b29a      	uxth	r2, r3
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800fe96:	2300      	movs	r3, #0
}
 800fe98:	4618      	mov	r0, r3
 800fe9a:	3710      	adds	r7, #16
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	bd80      	pop	{r7, pc}
 800fea0:	08018f78 	.word	0x08018f78
 800fea4:	080191b0 	.word	0x080191b0
 800fea8:	08018fc4 	.word	0x08018fc4
 800feac:	080191bc 	.word	0x080191bc
 800feb0:	080191dc 	.word	0x080191dc

0800feb4 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
 800febc:	460b      	mov	r3, r1
 800febe:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800fec0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fec4:	2200      	movs	r2, #0
 800fec6:	4619      	mov	r1, r3
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f7ff ff51 	bl	800fd70 <pbuf_header_impl>
 800fece:	4603      	mov	r3, r0
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	3708      	adds	r7, #8
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}

0800fed8 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b082      	sub	sp, #8
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	460b      	mov	r3, r1
 800fee2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800fee4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fee8:	2201      	movs	r2, #1
 800feea:	4619      	mov	r1, r3
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f7ff ff3f 	bl	800fd70 <pbuf_header_impl>
 800fef2:	4603      	mov	r3, r0
}
 800fef4:	4618      	mov	r0, r3
 800fef6:	3708      	adds	r7, #8
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}

0800fefc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b088      	sub	sp, #32
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d10b      	bne.n	800ff22 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d106      	bne.n	800ff1e <pbuf_free+0x22>
 800ff10:	4b41      	ldr	r3, [pc, #260]	; (8010018 <pbuf_free+0x11c>)
 800ff12:	f240 22d2 	movw	r2, #722	; 0x2d2
 800ff16:	4941      	ldr	r1, [pc, #260]	; (801001c <pbuf_free+0x120>)
 800ff18:	4841      	ldr	r0, [pc, #260]	; (8010020 <pbuf_free+0x124>)
 800ff1a:	f007 fd3b 	bl	8017994 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ff1e:	2300      	movs	r3, #0
 800ff20:	e076      	b.n	8010010 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	7b1b      	ldrb	r3, [r3, #12]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d012      	beq.n	800ff50 <pbuf_free+0x54>
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	7b1b      	ldrb	r3, [r3, #12]
 800ff2e:	2b01      	cmp	r3, #1
 800ff30:	d00e      	beq.n	800ff50 <pbuf_free+0x54>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	7b1b      	ldrb	r3, [r3, #12]
 800ff36:	2b02      	cmp	r3, #2
 800ff38:	d00a      	beq.n	800ff50 <pbuf_free+0x54>
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	7b1b      	ldrb	r3, [r3, #12]
 800ff3e:	2b03      	cmp	r3, #3
 800ff40:	d006      	beq.n	800ff50 <pbuf_free+0x54>
 800ff42:	4b35      	ldr	r3, [pc, #212]	; (8010018 <pbuf_free+0x11c>)
 800ff44:	f240 22de 	movw	r2, #734	; 0x2de
 800ff48:	4936      	ldr	r1, [pc, #216]	; (8010024 <pbuf_free+0x128>)
 800ff4a:	4835      	ldr	r0, [pc, #212]	; (8010020 <pbuf_free+0x124>)
 800ff4c:	f007 fd22 	bl	8017994 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800ff50:	2300      	movs	r3, #0
 800ff52:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ff54:	e058      	b.n	8010008 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ff56:	f007 fcb9 	bl	80178cc <sys_arch_protect>
 800ff5a:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	89db      	ldrh	r3, [r3, #14]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d106      	bne.n	800ff72 <pbuf_free+0x76>
 800ff64:	4b2c      	ldr	r3, [pc, #176]	; (8010018 <pbuf_free+0x11c>)
 800ff66:	f240 22eb 	movw	r2, #747	; 0x2eb
 800ff6a:	492f      	ldr	r1, [pc, #188]	; (8010028 <pbuf_free+0x12c>)
 800ff6c:	482c      	ldr	r0, [pc, #176]	; (8010020 <pbuf_free+0x124>)
 800ff6e:	f007 fd11 	bl	8017994 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	89db      	ldrh	r3, [r3, #14]
 800ff76:	3b01      	subs	r3, #1
 800ff78:	b29a      	uxth	r2, r3
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	81da      	strh	r2, [r3, #14]
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	89db      	ldrh	r3, [r3, #14]
 800ff82:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800ff84:	69b8      	ldr	r0, [r7, #24]
 800ff86:	f007 fcaf 	bl	80178e8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ff8a:	8afb      	ldrh	r3, [r7, #22]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d139      	bne.n	8010004 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	7b1b      	ldrb	r3, [r3, #12]
 800ff9a:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	7b5b      	ldrb	r3, [r3, #13]
 800ffa0:	f003 0302 	and.w	r3, r3, #2
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d011      	beq.n	800ffcc <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	691b      	ldr	r3, [r3, #16]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d106      	bne.n	800ffc2 <pbuf_free+0xc6>
 800ffb4:	4b18      	ldr	r3, [pc, #96]	; (8010018 <pbuf_free+0x11c>)
 800ffb6:	f240 22f9 	movw	r2, #761	; 0x2f9
 800ffba:	491c      	ldr	r1, [pc, #112]	; (801002c <pbuf_free+0x130>)
 800ffbc:	4818      	ldr	r0, [pc, #96]	; (8010020 <pbuf_free+0x124>)
 800ffbe:	f007 fce9 	bl	8017994 <iprintf>
        pc->custom_free_function(p);
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	691b      	ldr	r3, [r3, #16]
 800ffc6:	6878      	ldr	r0, [r7, #4]
 800ffc8:	4798      	blx	r3
 800ffca:	e015      	b.n	800fff8 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800ffcc:	89fb      	ldrh	r3, [r7, #14]
 800ffce:	2b03      	cmp	r3, #3
 800ffd0:	d104      	bne.n	800ffdc <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800ffd2:	6879      	ldr	r1, [r7, #4]
 800ffd4:	200d      	movs	r0, #13
 800ffd6:	f7ff f9b5 	bl	800f344 <memp_free>
 800ffda:	e00d      	b.n	800fff8 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800ffdc:	89fb      	ldrh	r3, [r7, #14]
 800ffde:	2b01      	cmp	r3, #1
 800ffe0:	d002      	beq.n	800ffe8 <pbuf_free+0xec>
 800ffe2:	89fb      	ldrh	r3, [r7, #14]
 800ffe4:	2b02      	cmp	r3, #2
 800ffe6:	d104      	bne.n	800fff2 <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800ffe8:	6879      	ldr	r1, [r7, #4]
 800ffea:	200c      	movs	r0, #12
 800ffec:	f7ff f9aa 	bl	800f344 <memp_free>
 800fff0:	e002      	b.n	800fff8 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f7fe fe46 	bl	800ec84 <mem_free>
        }
      }
      count++;
 800fff8:	7ffb      	ldrb	r3, [r7, #31]
 800fffa:	3301      	adds	r3, #1
 800fffc:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	607b      	str	r3, [r7, #4]
 8010002:	e001      	b.n	8010008 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8010004:	2300      	movs	r3, #0
 8010006:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d1a3      	bne.n	800ff56 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801000e:	7ffb      	ldrb	r3, [r7, #31]
}
 8010010:	4618      	mov	r0, r3
 8010012:	3720      	adds	r7, #32
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}
 8010018:	08018f78 	.word	0x08018f78
 801001c:	080191b0 	.word	0x080191b0
 8010020:	08018fc4 	.word	0x08018fc4
 8010024:	080191ec 	.word	0x080191ec
 8010028:	08019204 	.word	0x08019204
 801002c:	0801921c 	.word	0x0801921c

08010030 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010030:	b480      	push	{r7}
 8010032:	b085      	sub	sp, #20
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010038:	2300      	movs	r3, #0
 801003a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801003c:	e005      	b.n	801004a <pbuf_clen+0x1a>
    ++len;
 801003e:	89fb      	ldrh	r3, [r7, #14]
 8010040:	3301      	adds	r3, #1
 8010042:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d1f6      	bne.n	801003e <pbuf_clen+0xe>
  }
  return len;
 8010050:	89fb      	ldrh	r3, [r7, #14]
}
 8010052:	4618      	mov	r0, r3
 8010054:	3714      	adds	r7, #20
 8010056:	46bd      	mov	sp, r7
 8010058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005c:	4770      	bx	lr
	...

08010060 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b084      	sub	sp, #16
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d016      	beq.n	801009c <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 801006e:	f007 fc2d 	bl	80178cc <sys_arch_protect>
 8010072:	60f8      	str	r0, [r7, #12]
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	89db      	ldrh	r3, [r3, #14]
 8010078:	3301      	adds	r3, #1
 801007a:	b29a      	uxth	r2, r3
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	81da      	strh	r2, [r3, #14]
 8010080:	68f8      	ldr	r0, [r7, #12]
 8010082:	f007 fc31 	bl	80178e8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	89db      	ldrh	r3, [r3, #14]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d106      	bne.n	801009c <pbuf_ref+0x3c>
 801008e:	4b05      	ldr	r3, [pc, #20]	; (80100a4 <pbuf_ref+0x44>)
 8010090:	f240 3239 	movw	r2, #825	; 0x339
 8010094:	4904      	ldr	r1, [pc, #16]	; (80100a8 <pbuf_ref+0x48>)
 8010096:	4805      	ldr	r0, [pc, #20]	; (80100ac <pbuf_ref+0x4c>)
 8010098:	f007 fc7c 	bl	8017994 <iprintf>
  }
}
 801009c:	bf00      	nop
 801009e:	3710      	adds	r7, #16
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}
 80100a4:	08018f78 	.word	0x08018f78
 80100a8:	08019240 	.word	0x08019240
 80100ac:	08018fc4 	.word	0x08018fc4

080100b0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b084      	sub	sp, #16
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d002      	beq.n	80100c6 <pbuf_cat+0x16>
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d107      	bne.n	80100d6 <pbuf_cat+0x26>
 80100c6:	4b20      	ldr	r3, [pc, #128]	; (8010148 <pbuf_cat+0x98>)
 80100c8:	f240 324d 	movw	r2, #845	; 0x34d
 80100cc:	491f      	ldr	r1, [pc, #124]	; (801014c <pbuf_cat+0x9c>)
 80100ce:	4820      	ldr	r0, [pc, #128]	; (8010150 <pbuf_cat+0xa0>)
 80100d0:	f007 fc60 	bl	8017994 <iprintf>
 80100d4:	e034      	b.n	8010140 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	60fb      	str	r3, [r7, #12]
 80100da:	e00a      	b.n	80100f2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	891a      	ldrh	r2, [r3, #8]
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	891b      	ldrh	r3, [r3, #8]
 80100e4:	4413      	add	r3, r2
 80100e6:	b29a      	uxth	r2, r3
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	60fb      	str	r3, [r7, #12]
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d1f0      	bne.n	80100dc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	891a      	ldrh	r2, [r3, #8]
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	895b      	ldrh	r3, [r3, #10]
 8010102:	429a      	cmp	r2, r3
 8010104:	d006      	beq.n	8010114 <pbuf_cat+0x64>
 8010106:	4b10      	ldr	r3, [pc, #64]	; (8010148 <pbuf_cat+0x98>)
 8010108:	f240 3255 	movw	r2, #853	; 0x355
 801010c:	4911      	ldr	r1, [pc, #68]	; (8010154 <pbuf_cat+0xa4>)
 801010e:	4810      	ldr	r0, [pc, #64]	; (8010150 <pbuf_cat+0xa0>)
 8010110:	f007 fc40 	bl	8017994 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d006      	beq.n	801012a <pbuf_cat+0x7a>
 801011c:	4b0a      	ldr	r3, [pc, #40]	; (8010148 <pbuf_cat+0x98>)
 801011e:	f240 3256 	movw	r2, #854	; 0x356
 8010122:	490d      	ldr	r1, [pc, #52]	; (8010158 <pbuf_cat+0xa8>)
 8010124:	480a      	ldr	r0, [pc, #40]	; (8010150 <pbuf_cat+0xa0>)
 8010126:	f007 fc35 	bl	8017994 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	891a      	ldrh	r2, [r3, #8]
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	891b      	ldrh	r3, [r3, #8]
 8010132:	4413      	add	r3, r2
 8010134:	b29a      	uxth	r2, r3
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	683a      	ldr	r2, [r7, #0]
 801013e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010140:	3710      	adds	r7, #16
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}
 8010146:	bf00      	nop
 8010148:	08018f78 	.word	0x08018f78
 801014c:	08019254 	.word	0x08019254
 8010150:	08018fc4 	.word	0x08018fc4
 8010154:	0801928c 	.word	0x0801928c
 8010158:	080192bc 	.word	0x080192bc

0801015c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b084      	sub	sp, #16
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8010166:	2300      	movs	r3, #0
 8010168:	81fb      	strh	r3, [r7, #14]
 801016a:	2300      	movs	r3, #0
 801016c:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d008      	beq.n	8010186 <pbuf_copy+0x2a>
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d005      	beq.n	8010186 <pbuf_copy+0x2a>
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	891a      	ldrh	r2, [r3, #8]
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	891b      	ldrh	r3, [r3, #8]
 8010182:	429a      	cmp	r2, r3
 8010184:	d209      	bcs.n	801019a <pbuf_copy+0x3e>
 8010186:	4b54      	ldr	r3, [pc, #336]	; (80102d8 <pbuf_copy+0x17c>)
 8010188:	f240 32bd 	movw	r2, #957	; 0x3bd
 801018c:	4953      	ldr	r1, [pc, #332]	; (80102dc <pbuf_copy+0x180>)
 801018e:	4854      	ldr	r0, [pc, #336]	; (80102e0 <pbuf_copy+0x184>)
 8010190:	f007 fc00 	bl	8017994 <iprintf>
 8010194:	f06f 030f 	mvn.w	r3, #15
 8010198:	e099      	b.n	80102ce <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	895b      	ldrh	r3, [r3, #10]
 801019e:	461a      	mov	r2, r3
 80101a0:	89fb      	ldrh	r3, [r7, #14]
 80101a2:	1ad2      	subs	r2, r2, r3
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	895b      	ldrh	r3, [r3, #10]
 80101a8:	4619      	mov	r1, r3
 80101aa:	89bb      	ldrh	r3, [r7, #12]
 80101ac:	1acb      	subs	r3, r1, r3
 80101ae:	429a      	cmp	r2, r3
 80101b0:	db05      	blt.n	80101be <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	895a      	ldrh	r2, [r3, #10]
 80101b6:	89bb      	ldrh	r3, [r7, #12]
 80101b8:	1ad3      	subs	r3, r2, r3
 80101ba:	817b      	strh	r3, [r7, #10]
 80101bc:	e004      	b.n	80101c8 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	895a      	ldrh	r2, [r3, #10]
 80101c2:	89fb      	ldrh	r3, [r7, #14]
 80101c4:	1ad3      	subs	r3, r2, r3
 80101c6:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	685a      	ldr	r2, [r3, #4]
 80101cc:	89fb      	ldrh	r3, [r7, #14]
 80101ce:	18d0      	adds	r0, r2, r3
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	685a      	ldr	r2, [r3, #4]
 80101d4:	89bb      	ldrh	r3, [r7, #12]
 80101d6:	4413      	add	r3, r2
 80101d8:	897a      	ldrh	r2, [r7, #10]
 80101da:	4619      	mov	r1, r3
 80101dc:	f007 fbc7 	bl	801796e <memcpy>
    offset_to += len;
 80101e0:	89fa      	ldrh	r2, [r7, #14]
 80101e2:	897b      	ldrh	r3, [r7, #10]
 80101e4:	4413      	add	r3, r2
 80101e6:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 80101e8:	89ba      	ldrh	r2, [r7, #12]
 80101ea:	897b      	ldrh	r3, [r7, #10]
 80101ec:	4413      	add	r3, r2
 80101ee:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	895b      	ldrh	r3, [r3, #10]
 80101f4:	89fa      	ldrh	r2, [r7, #14]
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d906      	bls.n	8010208 <pbuf_copy+0xac>
 80101fa:	4b37      	ldr	r3, [pc, #220]	; (80102d8 <pbuf_copy+0x17c>)
 80101fc:	f240 32cd 	movw	r2, #973	; 0x3cd
 8010200:	4938      	ldr	r1, [pc, #224]	; (80102e4 <pbuf_copy+0x188>)
 8010202:	4837      	ldr	r0, [pc, #220]	; (80102e0 <pbuf_copy+0x184>)
 8010204:	f007 fbc6 	bl	8017994 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	895b      	ldrh	r3, [r3, #10]
 801020c:	89ba      	ldrh	r2, [r7, #12]
 801020e:	429a      	cmp	r2, r3
 8010210:	d906      	bls.n	8010220 <pbuf_copy+0xc4>
 8010212:	4b31      	ldr	r3, [pc, #196]	; (80102d8 <pbuf_copy+0x17c>)
 8010214:	f240 32ce 	movw	r2, #974	; 0x3ce
 8010218:	4933      	ldr	r1, [pc, #204]	; (80102e8 <pbuf_copy+0x18c>)
 801021a:	4831      	ldr	r0, [pc, #196]	; (80102e0 <pbuf_copy+0x184>)
 801021c:	f007 fbba 	bl	8017994 <iprintf>
    if (offset_from >= p_from->len) {
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	895b      	ldrh	r3, [r3, #10]
 8010224:	89ba      	ldrh	r2, [r7, #12]
 8010226:	429a      	cmp	r2, r3
 8010228:	d304      	bcc.n	8010234 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 801022a:	2300      	movs	r3, #0
 801022c:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	895b      	ldrh	r3, [r3, #10]
 8010238:	89fa      	ldrh	r2, [r7, #14]
 801023a:	429a      	cmp	r2, r3
 801023c:	d114      	bne.n	8010268 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 801023e:	2300      	movs	r3, #0
 8010240:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d10c      	bne.n	8010268 <pbuf_copy+0x10c>
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d009      	beq.n	8010268 <pbuf_copy+0x10c>
 8010254:	4b20      	ldr	r3, [pc, #128]	; (80102d8 <pbuf_copy+0x17c>)
 8010256:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801025a:	4924      	ldr	r1, [pc, #144]	; (80102ec <pbuf_copy+0x190>)
 801025c:	4820      	ldr	r0, [pc, #128]	; (80102e0 <pbuf_copy+0x184>)
 801025e:	f007 fb99 	bl	8017994 <iprintf>
 8010262:	f06f 030f 	mvn.w	r3, #15
 8010266:	e032      	b.n	80102ce <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010268:	683b      	ldr	r3, [r7, #0]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d013      	beq.n	8010296 <pbuf_copy+0x13a>
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	895a      	ldrh	r2, [r3, #10]
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	891b      	ldrh	r3, [r3, #8]
 8010276:	429a      	cmp	r2, r3
 8010278:	d10d      	bne.n	8010296 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d009      	beq.n	8010296 <pbuf_copy+0x13a>
 8010282:	4b15      	ldr	r3, [pc, #84]	; (80102d8 <pbuf_copy+0x17c>)
 8010284:	f240 32de 	movw	r2, #990	; 0x3de
 8010288:	4919      	ldr	r1, [pc, #100]	; (80102f0 <pbuf_copy+0x194>)
 801028a:	4815      	ldr	r0, [pc, #84]	; (80102e0 <pbuf_copy+0x184>)
 801028c:	f007 fb82 	bl	8017994 <iprintf>
 8010290:	f06f 0305 	mvn.w	r3, #5
 8010294:	e01b      	b.n	80102ce <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d013      	beq.n	80102c4 <pbuf_copy+0x168>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	895a      	ldrh	r2, [r3, #10]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	891b      	ldrh	r3, [r3, #8]
 80102a4:	429a      	cmp	r2, r3
 80102a6:	d10d      	bne.n	80102c4 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d009      	beq.n	80102c4 <pbuf_copy+0x168>
 80102b0:	4b09      	ldr	r3, [pc, #36]	; (80102d8 <pbuf_copy+0x17c>)
 80102b2:	f240 32e3 	movw	r2, #995	; 0x3e3
 80102b6:	490e      	ldr	r1, [pc, #56]	; (80102f0 <pbuf_copy+0x194>)
 80102b8:	4809      	ldr	r0, [pc, #36]	; (80102e0 <pbuf_copy+0x184>)
 80102ba:	f007 fb6b 	bl	8017994 <iprintf>
 80102be:	f06f 0305 	mvn.w	r3, #5
 80102c2:	e004      	b.n	80102ce <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	f47f af67 	bne.w	801019a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80102cc:	2300      	movs	r3, #0
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3710      	adds	r7, #16
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}
 80102d6:	bf00      	nop
 80102d8:	08018f78 	.word	0x08018f78
 80102dc:	08019308 	.word	0x08019308
 80102e0:	08018fc4 	.word	0x08018fc4
 80102e4:	08019338 	.word	0x08019338
 80102e8:	08019350 	.word	0x08019350
 80102ec:	0801936c 	.word	0x0801936c
 80102f0:	0801937c 	.word	0x0801937c

080102f4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b088      	sub	sp, #32
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	60f8      	str	r0, [r7, #12]
 80102fc:	60b9      	str	r1, [r7, #8]
 80102fe:	4611      	mov	r1, r2
 8010300:	461a      	mov	r2, r3
 8010302:	460b      	mov	r3, r1
 8010304:	80fb      	strh	r3, [r7, #6]
 8010306:	4613      	mov	r3, r2
 8010308:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801030a:	2300      	movs	r3, #0
 801030c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d108      	bne.n	8010326 <pbuf_copy_partial+0x32>
 8010314:	4b30      	ldr	r3, [pc, #192]	; (80103d8 <pbuf_copy_partial+0xe4>)
 8010316:	f240 32fe 	movw	r2, #1022	; 0x3fe
 801031a:	4930      	ldr	r1, [pc, #192]	; (80103dc <pbuf_copy_partial+0xe8>)
 801031c:	4830      	ldr	r0, [pc, #192]	; (80103e0 <pbuf_copy_partial+0xec>)
 801031e:	f007 fb39 	bl	8017994 <iprintf>
 8010322:	2300      	movs	r3, #0
 8010324:	e054      	b.n	80103d0 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d108      	bne.n	801033e <pbuf_copy_partial+0x4a>
 801032c:	4b2a      	ldr	r3, [pc, #168]	; (80103d8 <pbuf_copy_partial+0xe4>)
 801032e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8010332:	492c      	ldr	r1, [pc, #176]	; (80103e4 <pbuf_copy_partial+0xf0>)
 8010334:	482a      	ldr	r0, [pc, #168]	; (80103e0 <pbuf_copy_partial+0xec>)
 8010336:	f007 fb2d 	bl	8017994 <iprintf>
 801033a:	2300      	movs	r3, #0
 801033c:	e048      	b.n	80103d0 <pbuf_copy_partial+0xdc>

  left = 0;
 801033e:	2300      	movs	r3, #0
 8010340:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d002      	beq.n	801034e <pbuf_copy_partial+0x5a>
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d101      	bne.n	8010352 <pbuf_copy_partial+0x5e>
    return 0;
 801034e:	2300      	movs	r3, #0
 8010350:	e03e      	b.n	80103d0 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	61fb      	str	r3, [r7, #28]
 8010356:	e034      	b.n	80103c2 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8010358:	88bb      	ldrh	r3, [r7, #4]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d00a      	beq.n	8010374 <pbuf_copy_partial+0x80>
 801035e:	69fb      	ldr	r3, [r7, #28]
 8010360:	895b      	ldrh	r3, [r3, #10]
 8010362:	88ba      	ldrh	r2, [r7, #4]
 8010364:	429a      	cmp	r2, r3
 8010366:	d305      	bcc.n	8010374 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	895b      	ldrh	r3, [r3, #10]
 801036c:	88ba      	ldrh	r2, [r7, #4]
 801036e:	1ad3      	subs	r3, r2, r3
 8010370:	80bb      	strh	r3, [r7, #4]
 8010372:	e023      	b.n	80103bc <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8010374:	69fb      	ldr	r3, [r7, #28]
 8010376:	895a      	ldrh	r2, [r3, #10]
 8010378:	88bb      	ldrh	r3, [r7, #4]
 801037a:	1ad3      	subs	r3, r2, r3
 801037c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801037e:	8b3a      	ldrh	r2, [r7, #24]
 8010380:	88fb      	ldrh	r3, [r7, #6]
 8010382:	429a      	cmp	r2, r3
 8010384:	d901      	bls.n	801038a <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8010386:	88fb      	ldrh	r3, [r7, #6]
 8010388:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 801038a:	8b7b      	ldrh	r3, [r7, #26]
 801038c:	68ba      	ldr	r2, [r7, #8]
 801038e:	18d0      	adds	r0, r2, r3
 8010390:	69fb      	ldr	r3, [r7, #28]
 8010392:	685a      	ldr	r2, [r3, #4]
 8010394:	88bb      	ldrh	r3, [r7, #4]
 8010396:	4413      	add	r3, r2
 8010398:	8b3a      	ldrh	r2, [r7, #24]
 801039a:	4619      	mov	r1, r3
 801039c:	f007 fae7 	bl	801796e <memcpy>
      copied_total += buf_copy_len;
 80103a0:	8afa      	ldrh	r2, [r7, #22]
 80103a2:	8b3b      	ldrh	r3, [r7, #24]
 80103a4:	4413      	add	r3, r2
 80103a6:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 80103a8:	8b7a      	ldrh	r2, [r7, #26]
 80103aa:	8b3b      	ldrh	r3, [r7, #24]
 80103ac:	4413      	add	r3, r2
 80103ae:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 80103b0:	88fa      	ldrh	r2, [r7, #6]
 80103b2:	8b3b      	ldrh	r3, [r7, #24]
 80103b4:	1ad3      	subs	r3, r2, r3
 80103b6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80103b8:	2300      	movs	r3, #0
 80103ba:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80103bc:	69fb      	ldr	r3, [r7, #28]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	61fb      	str	r3, [r7, #28]
 80103c2:	88fb      	ldrh	r3, [r7, #6]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d002      	beq.n	80103ce <pbuf_copy_partial+0xda>
 80103c8:	69fb      	ldr	r3, [r7, #28]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d1c4      	bne.n	8010358 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 80103ce:	8afb      	ldrh	r3, [r7, #22]
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	3720      	adds	r7, #32
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}
 80103d8:	08018f78 	.word	0x08018f78
 80103dc:	080193a8 	.word	0x080193a8
 80103e0:	08018fc4 	.word	0x08018fc4
 80103e4:	080193c8 	.word	0x080193c8

080103e8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80103e8:	b480      	push	{r7}
 80103ea:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80103ec:	bf00      	nop
 80103ee:	46bd      	mov	sp, r7
 80103f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f4:	4770      	bx	lr
	...

080103f8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80103fc:	f000 fdf6 	bl	8010fec <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010400:	4b07      	ldr	r3, [pc, #28]	; (8010420 <tcp_tmr+0x28>)
 8010402:	781b      	ldrb	r3, [r3, #0]
 8010404:	3301      	adds	r3, #1
 8010406:	b2da      	uxtb	r2, r3
 8010408:	4b05      	ldr	r3, [pc, #20]	; (8010420 <tcp_tmr+0x28>)
 801040a:	701a      	strb	r2, [r3, #0]
 801040c:	4b04      	ldr	r3, [pc, #16]	; (8010420 <tcp_tmr+0x28>)
 801040e:	781b      	ldrb	r3, [r3, #0]
 8010410:	f003 0301 	and.w	r3, r3, #1
 8010414:	2b00      	cmp	r3, #0
 8010416:	d001      	beq.n	801041c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010418:	f000 fb22 	bl	8010a60 <tcp_slowtmr>
  }
}
 801041c:	bf00      	nop
 801041e:	bd80      	pop	{r7, pc}
 8010420:	240217fd 	.word	0x240217fd

08010424 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010424:	b480      	push	{r7}
 8010426:	b085      	sub	sp, #20
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	60fb      	str	r3, [r7, #12]
 8010432:	e00a      	b.n	801044a <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010438:	683a      	ldr	r2, [r7, #0]
 801043a:	429a      	cmp	r2, r3
 801043c:	d102      	bne.n	8010444 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	2200      	movs	r2, #0
 8010442:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	68db      	ldr	r3, [r3, #12]
 8010448:	60fb      	str	r3, [r7, #12]
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d1f1      	bne.n	8010434 <tcp_remove_listener+0x10>
      }
   }
}
 8010450:	bf00      	nop
 8010452:	3714      	adds	r7, #20
 8010454:	46bd      	mov	sp, r7
 8010456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045a:	4770      	bx	lr

0801045c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b084      	sub	sp, #16
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d105      	bne.n	8010476 <tcp_listen_closed+0x1a>
 801046a:	4b13      	ldr	r3, [pc, #76]	; (80104b8 <tcp_listen_closed+0x5c>)
 801046c:	22c0      	movs	r2, #192	; 0xc0
 801046e:	4913      	ldr	r1, [pc, #76]	; (80104bc <tcp_listen_closed+0x60>)
 8010470:	4813      	ldr	r0, [pc, #76]	; (80104c0 <tcp_listen_closed+0x64>)
 8010472:	f007 fa8f 	bl	8017994 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	7d1b      	ldrb	r3, [r3, #20]
 801047a:	2b01      	cmp	r3, #1
 801047c:	d005      	beq.n	801048a <tcp_listen_closed+0x2e>
 801047e:	4b0e      	ldr	r3, [pc, #56]	; (80104b8 <tcp_listen_closed+0x5c>)
 8010480:	22c1      	movs	r2, #193	; 0xc1
 8010482:	4910      	ldr	r1, [pc, #64]	; (80104c4 <tcp_listen_closed+0x68>)
 8010484:	480e      	ldr	r0, [pc, #56]	; (80104c0 <tcp_listen_closed+0x64>)
 8010486:	f007 fa85 	bl	8017994 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801048a:	2301      	movs	r3, #1
 801048c:	60fb      	str	r3, [r7, #12]
 801048e:	e00b      	b.n	80104a8 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8010490:	4a0d      	ldr	r2, [pc, #52]	; (80104c8 <tcp_listen_closed+0x6c>)
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	6879      	ldr	r1, [r7, #4]
 801049c:	4618      	mov	r0, r3
 801049e:	f7ff ffc1 	bl	8010424 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	3301      	adds	r3, #1
 80104a6:	60fb      	str	r3, [r7, #12]
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	2b03      	cmp	r3, #3
 80104ac:	d9f0      	bls.n	8010490 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80104ae:	bf00      	nop
 80104b0:	3710      	adds	r7, #16
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
 80104b6:	bf00      	nop
 80104b8:	080194fc 	.word	0x080194fc
 80104bc:	0801952c 	.word	0x0801952c
 80104c0:	08019538 	.word	0x08019538
 80104c4:	08019560 	.word	0x08019560
 80104c8:	0801a9b4 	.word	0x0801a9b4

080104cc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80104cc:	b5b0      	push	{r4, r5, r7, lr}
 80104ce:	b086      	sub	sp, #24
 80104d0:	af02      	add	r7, sp, #8
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	460b      	mov	r3, r1
 80104d6:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80104d8:	78fb      	ldrb	r3, [r7, #3]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d075      	beq.n	80105ca <tcp_close_shutdown+0xfe>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	7d1b      	ldrb	r3, [r3, #20]
 80104e2:	2b04      	cmp	r3, #4
 80104e4:	d003      	beq.n	80104ee <tcp_close_shutdown+0x22>
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	7d1b      	ldrb	r3, [r3, #20]
 80104ea:	2b07      	cmp	r3, #7
 80104ec:	d16d      	bne.n	80105ca <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d104      	bne.n	8010500 <tcp_close_shutdown+0x34>
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80104fa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80104fe:	d064      	beq.n	80105ca <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	7e9b      	ldrb	r3, [r3, #26]
 8010504:	f003 0310 	and.w	r3, r3, #16
 8010508:	2b00      	cmp	r3, #0
 801050a:	d106      	bne.n	801051a <tcp_close_shutdown+0x4e>
 801050c:	4b59      	ldr	r3, [pc, #356]	; (8010674 <tcp_close_shutdown+0x1a8>)
 801050e:	f240 120f 	movw	r2, #271	; 0x10f
 8010512:	4959      	ldr	r1, [pc, #356]	; (8010678 <tcp_close_shutdown+0x1ac>)
 8010514:	4859      	ldr	r0, [pc, #356]	; (801067c <tcp_close_shutdown+0x1b0>)
 8010516:	f007 fa3d 	bl	8017994 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010522:	687c      	ldr	r4, [r7, #4]
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	1d1d      	adds	r5, r3, #4
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	8adb      	ldrh	r3, [r3, #22]
 801052c:	687a      	ldr	r2, [r7, #4]
 801052e:	8b12      	ldrh	r2, [r2, #24]
 8010530:	9201      	str	r2, [sp, #4]
 8010532:	9300      	str	r3, [sp, #0]
 8010534:	462b      	mov	r3, r5
 8010536:	4622      	mov	r2, r4
 8010538:	f004 f872 	bl	8014620 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f000 ffd5 	bl	80114ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010542:	4b4f      	ldr	r3, [pc, #316]	; (8010680 <tcp_close_shutdown+0x1b4>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	687a      	ldr	r2, [r7, #4]
 8010548:	429a      	cmp	r2, r3
 801054a:	d105      	bne.n	8010558 <tcp_close_shutdown+0x8c>
 801054c:	4b4c      	ldr	r3, [pc, #304]	; (8010680 <tcp_close_shutdown+0x1b4>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	68db      	ldr	r3, [r3, #12]
 8010552:	4a4b      	ldr	r2, [pc, #300]	; (8010680 <tcp_close_shutdown+0x1b4>)
 8010554:	6013      	str	r3, [r2, #0]
 8010556:	e013      	b.n	8010580 <tcp_close_shutdown+0xb4>
 8010558:	4b49      	ldr	r3, [pc, #292]	; (8010680 <tcp_close_shutdown+0x1b4>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	60fb      	str	r3, [r7, #12]
 801055e:	e00c      	b.n	801057a <tcp_close_shutdown+0xae>
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	68db      	ldr	r3, [r3, #12]
 8010564:	687a      	ldr	r2, [r7, #4]
 8010566:	429a      	cmp	r2, r3
 8010568:	d104      	bne.n	8010574 <tcp_close_shutdown+0xa8>
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	68da      	ldr	r2, [r3, #12]
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	60da      	str	r2, [r3, #12]
 8010572:	e005      	b.n	8010580 <tcp_close_shutdown+0xb4>
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	68db      	ldr	r3, [r3, #12]
 8010578:	60fb      	str	r3, [r7, #12]
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d1ef      	bne.n	8010560 <tcp_close_shutdown+0x94>
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2200      	movs	r2, #0
 8010584:	60da      	str	r2, [r3, #12]
 8010586:	4b3f      	ldr	r3, [pc, #252]	; (8010684 <tcp_close_shutdown+0x1b8>)
 8010588:	2201      	movs	r2, #1
 801058a:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	7d1b      	ldrb	r3, [r3, #20]
 8010590:	2b04      	cmp	r3, #4
 8010592:	d10c      	bne.n	80105ae <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	220a      	movs	r2, #10
 8010598:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801059a:	4b3b      	ldr	r3, [pc, #236]	; (8010688 <tcp_close_shutdown+0x1bc>)
 801059c:	681a      	ldr	r2, [r3, #0]
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	60da      	str	r2, [r3, #12]
 80105a2:	4a39      	ldr	r2, [pc, #228]	; (8010688 <tcp_close_shutdown+0x1bc>)
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	6013      	str	r3, [r2, #0]
 80105a8:	f004 fa8c 	bl	8014ac4 <tcp_timer_needed>
 80105ac:	e00b      	b.n	80105c6 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 80105ae:	4b37      	ldr	r3, [pc, #220]	; (801068c <tcp_close_shutdown+0x1c0>)
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	687a      	ldr	r2, [r7, #4]
 80105b4:	429a      	cmp	r2, r3
 80105b6:	d102      	bne.n	80105be <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 80105b8:	f003 fafc 	bl	8013bb4 <tcp_trigger_input_pcb_close>
 80105bc:	e003      	b.n	80105c6 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 80105be:	6879      	ldr	r1, [r7, #4]
 80105c0:	2001      	movs	r0, #1
 80105c2:	f7fe febf 	bl	800f344 <memp_free>
        }
      }
      return ERR_OK;
 80105c6:	2300      	movs	r3, #0
 80105c8:	e050      	b.n	801066c <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	7d1b      	ldrb	r3, [r3, #20]
 80105ce:	2b01      	cmp	r3, #1
 80105d0:	d02e      	beq.n	8010630 <tcp_close_shutdown+0x164>
 80105d2:	2b02      	cmp	r3, #2
 80105d4:	d038      	beq.n	8010648 <tcp_close_shutdown+0x17c>
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d142      	bne.n	8010660 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	8adb      	ldrh	r3, [r3, #22]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d021      	beq.n	8010626 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80105e2:	4b2b      	ldr	r3, [pc, #172]	; (8010690 <tcp_close_shutdown+0x1c4>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	687a      	ldr	r2, [r7, #4]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d105      	bne.n	80105f8 <tcp_close_shutdown+0x12c>
 80105ec:	4b28      	ldr	r3, [pc, #160]	; (8010690 <tcp_close_shutdown+0x1c4>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	68db      	ldr	r3, [r3, #12]
 80105f2:	4a27      	ldr	r2, [pc, #156]	; (8010690 <tcp_close_shutdown+0x1c4>)
 80105f4:	6013      	str	r3, [r2, #0]
 80105f6:	e013      	b.n	8010620 <tcp_close_shutdown+0x154>
 80105f8:	4b25      	ldr	r3, [pc, #148]	; (8010690 <tcp_close_shutdown+0x1c4>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	60bb      	str	r3, [r7, #8]
 80105fe:	e00c      	b.n	801061a <tcp_close_shutdown+0x14e>
 8010600:	68bb      	ldr	r3, [r7, #8]
 8010602:	68db      	ldr	r3, [r3, #12]
 8010604:	687a      	ldr	r2, [r7, #4]
 8010606:	429a      	cmp	r2, r3
 8010608:	d104      	bne.n	8010614 <tcp_close_shutdown+0x148>
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	68da      	ldr	r2, [r3, #12]
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	60da      	str	r2, [r3, #12]
 8010612:	e005      	b.n	8010620 <tcp_close_shutdown+0x154>
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	68db      	ldr	r3, [r3, #12]
 8010618:	60bb      	str	r3, [r7, #8]
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d1ef      	bne.n	8010600 <tcp_close_shutdown+0x134>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2200      	movs	r2, #0
 8010624:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8010626:	6879      	ldr	r1, [r7, #4]
 8010628:	2001      	movs	r0, #1
 801062a:	f7fe fe8b 	bl	800f344 <memp_free>
    break;
 801062e:	e01c      	b.n	801066a <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 8010630:	6878      	ldr	r0, [r7, #4]
 8010632:	f7ff ff13 	bl	801045c <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010636:	6879      	ldr	r1, [r7, #4]
 8010638:	4816      	ldr	r0, [pc, #88]	; (8010694 <tcp_close_shutdown+0x1c8>)
 801063a:	f000 ff99 	bl	8011570 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801063e:	6879      	ldr	r1, [r7, #4]
 8010640:	2002      	movs	r0, #2
 8010642:	f7fe fe7f 	bl	800f344 <memp_free>
    break;
 8010646:	e010      	b.n	801066a <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8010648:	6879      	ldr	r1, [r7, #4]
 801064a:	480d      	ldr	r0, [pc, #52]	; (8010680 <tcp_close_shutdown+0x1b4>)
 801064c:	f000 ff90 	bl	8011570 <tcp_pcb_remove>
 8010650:	4b0c      	ldr	r3, [pc, #48]	; (8010684 <tcp_close_shutdown+0x1b8>)
 8010652:	2201      	movs	r2, #1
 8010654:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8010656:	6879      	ldr	r1, [r7, #4]
 8010658:	2001      	movs	r0, #1
 801065a:	f7fe fe73 	bl	800f344 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 801065e:	e004      	b.n	801066a <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 8010660:	6878      	ldr	r0, [r7, #4]
 8010662:	f000 f819 	bl	8010698 <tcp_close_shutdown_fin>
 8010666:	4603      	mov	r3, r0
 8010668:	e000      	b.n	801066c <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 801066a:	2300      	movs	r3, #0
}
 801066c:	4618      	mov	r0, r3
 801066e:	3710      	adds	r7, #16
 8010670:	46bd      	mov	sp, r7
 8010672:	bdb0      	pop	{r4, r5, r7, pc}
 8010674:	080194fc 	.word	0x080194fc
 8010678:	08019578 	.word	0x08019578
 801067c:	08019538 	.word	0x08019538
 8010680:	24024e4c 	.word	0x24024e4c
 8010684:	24024e48 	.word	0x24024e48
 8010688:	24024e5c 	.word	0x24024e5c
 801068c:	24024e60 	.word	0x24024e60
 8010690:	24024e58 	.word	0x24024e58
 8010694:	24024e54 	.word	0x24024e54

08010698 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b084      	sub	sp, #16
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d106      	bne.n	80106b4 <tcp_close_shutdown_fin+0x1c>
 80106a6:	4b2c      	ldr	r3, [pc, #176]	; (8010758 <tcp_close_shutdown_fin+0xc0>)
 80106a8:	f240 124d 	movw	r2, #333	; 0x14d
 80106ac:	492b      	ldr	r1, [pc, #172]	; (801075c <tcp_close_shutdown_fin+0xc4>)
 80106ae:	482c      	ldr	r0, [pc, #176]	; (8010760 <tcp_close_shutdown_fin+0xc8>)
 80106b0:	f007 f970 	bl	8017994 <iprintf>

  switch (pcb->state) {
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	7d1b      	ldrb	r3, [r3, #20]
 80106b8:	2b04      	cmp	r3, #4
 80106ba:	d010      	beq.n	80106de <tcp_close_shutdown_fin+0x46>
 80106bc:	2b07      	cmp	r3, #7
 80106be:	d01b      	beq.n	80106f8 <tcp_close_shutdown_fin+0x60>
 80106c0:	2b03      	cmp	r3, #3
 80106c2:	d126      	bne.n	8010712 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f003 fb01 	bl	8013ccc <tcp_send_fin>
 80106ca:	4603      	mov	r3, r0
 80106cc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80106ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d11f      	bne.n	8010716 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2205      	movs	r2, #5
 80106da:	751a      	strb	r2, [r3, #20]
    }
    break;
 80106dc:	e01b      	b.n	8010716 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 80106de:	6878      	ldr	r0, [r7, #4]
 80106e0:	f003 faf4 	bl	8013ccc <tcp_send_fin>
 80106e4:	4603      	mov	r3, r0
 80106e6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80106e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d114      	bne.n	801071a <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2205      	movs	r2, #5
 80106f4:	751a      	strb	r2, [r3, #20]
    }
    break;
 80106f6:	e010      	b.n	801071a <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f003 fae7 	bl	8013ccc <tcp_send_fin>
 80106fe:	4603      	mov	r3, r0
 8010700:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d109      	bne.n	801071e <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	2209      	movs	r2, #9
 801070e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8010710:	e005      	b.n	801071e <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8010712:	2300      	movs	r3, #0
 8010714:	e01c      	b.n	8010750 <tcp_close_shutdown_fin+0xb8>
    break;
 8010716:	bf00      	nop
 8010718:	e002      	b.n	8010720 <tcp_close_shutdown_fin+0x88>
    break;
 801071a:	bf00      	nop
 801071c:	e000      	b.n	8010720 <tcp_close_shutdown_fin+0x88>
    break;
 801071e:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d103      	bne.n	8010730 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010728:	6878      	ldr	r0, [r7, #4]
 801072a:	f003 fcef 	bl	801410c <tcp_output>
 801072e:	e00d      	b.n	801074c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8010730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010738:	d108      	bne.n	801074c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	7e9b      	ldrb	r3, [r3, #26]
 801073e:	f043 0308 	orr.w	r3, r3, #8
 8010742:	b2da      	uxtb	r2, r3
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010748:	2300      	movs	r3, #0
 801074a:	e001      	b.n	8010750 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 801074c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010750:	4618      	mov	r0, r3
 8010752:	3710      	adds	r7, #16
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}
 8010758:	080194fc 	.word	0x080194fc
 801075c:	0801952c 	.word	0x0801952c
 8010760:	08019538 	.word	0x08019538

08010764 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b082      	sub	sp, #8
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	7d1b      	ldrb	r3, [r3, #20]
 8010770:	2b01      	cmp	r3, #1
 8010772:	d006      	beq.n	8010782 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	7e9b      	ldrb	r3, [r3, #26]
 8010778:	f043 0310 	orr.w	r3, r3, #16
 801077c:	b2da      	uxtb	r2, r3
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010782:	2101      	movs	r1, #1
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f7ff fea1 	bl	80104cc <tcp_close_shutdown>
 801078a:	4603      	mov	r3, r0
}
 801078c:	4618      	mov	r0, r3
 801078e:	3708      	adds	r7, #8
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}

08010794 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b08c      	sub	sp, #48	; 0x30
 8010798:	af02      	add	r7, sp, #8
 801079a:	6078      	str	r0, [r7, #4]
 801079c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	7d1b      	ldrb	r3, [r3, #20]
 80107a2:	2b01      	cmp	r3, #1
 80107a4:	d106      	bne.n	80107b4 <tcp_abandon+0x20>
 80107a6:	4b4d      	ldr	r3, [pc, #308]	; (80108dc <tcp_abandon+0x148>)
 80107a8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80107ac:	494c      	ldr	r1, [pc, #304]	; (80108e0 <tcp_abandon+0x14c>)
 80107ae:	484d      	ldr	r0, [pc, #308]	; (80108e4 <tcp_abandon+0x150>)
 80107b0:	f007 f8f0 	bl	8017994 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	7d1b      	ldrb	r3, [r3, #20]
 80107b8:	2b0a      	cmp	r3, #10
 80107ba:	d108      	bne.n	80107ce <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80107bc:	6879      	ldr	r1, [r7, #4]
 80107be:	484a      	ldr	r0, [pc, #296]	; (80108e8 <tcp_abandon+0x154>)
 80107c0:	f000 fed6 	bl	8011570 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80107c4:	6879      	ldr	r1, [r7, #4]
 80107c6:	2001      	movs	r0, #1
 80107c8:	f7fe fdbc 	bl	800f344 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 80107cc:	e081      	b.n	80108d2 <tcp_abandon+0x13e>
    int send_rst = 0;
 80107ce:	2300      	movs	r3, #0
 80107d0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80107d2:	2300      	movs	r3, #0
 80107d4:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80107da:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107e0:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80107e8:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	691b      	ldr	r3, [r3, #16]
 80107ee:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	7d1b      	ldrb	r3, [r3, #20]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d126      	bne.n	8010846 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	8adb      	ldrh	r3, [r3, #22]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d02e      	beq.n	801085e <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010800:	4b3a      	ldr	r3, [pc, #232]	; (80108ec <tcp_abandon+0x158>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	687a      	ldr	r2, [r7, #4]
 8010806:	429a      	cmp	r2, r3
 8010808:	d105      	bne.n	8010816 <tcp_abandon+0x82>
 801080a:	4b38      	ldr	r3, [pc, #224]	; (80108ec <tcp_abandon+0x158>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	68db      	ldr	r3, [r3, #12]
 8010810:	4a36      	ldr	r2, [pc, #216]	; (80108ec <tcp_abandon+0x158>)
 8010812:	6013      	str	r3, [r2, #0]
 8010814:	e013      	b.n	801083e <tcp_abandon+0xaa>
 8010816:	4b35      	ldr	r3, [pc, #212]	; (80108ec <tcp_abandon+0x158>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	61fb      	str	r3, [r7, #28]
 801081c:	e00c      	b.n	8010838 <tcp_abandon+0xa4>
 801081e:	69fb      	ldr	r3, [r7, #28]
 8010820:	68db      	ldr	r3, [r3, #12]
 8010822:	687a      	ldr	r2, [r7, #4]
 8010824:	429a      	cmp	r2, r3
 8010826:	d104      	bne.n	8010832 <tcp_abandon+0x9e>
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	68da      	ldr	r2, [r3, #12]
 801082c:	69fb      	ldr	r3, [r7, #28]
 801082e:	60da      	str	r2, [r3, #12]
 8010830:	e005      	b.n	801083e <tcp_abandon+0xaa>
 8010832:	69fb      	ldr	r3, [r7, #28]
 8010834:	68db      	ldr	r3, [r3, #12]
 8010836:	61fb      	str	r3, [r7, #28]
 8010838:	69fb      	ldr	r3, [r7, #28]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d1ef      	bne.n	801081e <tcp_abandon+0x8a>
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2200      	movs	r2, #0
 8010842:	60da      	str	r2, [r3, #12]
 8010844:	e00b      	b.n	801085e <tcp_abandon+0xca>
      send_rst = reset;
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	8adb      	ldrh	r3, [r3, #22]
 801084e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010850:	6879      	ldr	r1, [r7, #4]
 8010852:	4827      	ldr	r0, [pc, #156]	; (80108f0 <tcp_abandon+0x15c>)
 8010854:	f000 fe8c 	bl	8011570 <tcp_pcb_remove>
 8010858:	4b26      	ldr	r3, [pc, #152]	; (80108f4 <tcp_abandon+0x160>)
 801085a:	2201      	movs	r2, #1
 801085c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010862:	2b00      	cmp	r3, #0
 8010864:	d004      	beq.n	8010870 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801086a:	4618      	mov	r0, r3
 801086c:	f000 fc8b 	bl	8011186 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010874:	2b00      	cmp	r3, #0
 8010876:	d004      	beq.n	8010882 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801087c:	4618      	mov	r0, r3
 801087e:	f000 fc82 	bl	8011186 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010886:	2b00      	cmp	r3, #0
 8010888:	d004      	beq.n	8010894 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801088e:	4618      	mov	r0, r3
 8010890:	f000 fc79 	bl	8011186 <tcp_segs_free>
    if (send_rst) {
 8010894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010896:	2b00      	cmp	r3, #0
 8010898:	d00c      	beq.n	80108b4 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801089a:	687a      	ldr	r2, [r7, #4]
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	1d19      	adds	r1, r3, #4
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	8b1b      	ldrh	r3, [r3, #24]
 80108a4:	9301      	str	r3, [sp, #4]
 80108a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80108a8:	9300      	str	r3, [sp, #0]
 80108aa:	460b      	mov	r3, r1
 80108ac:	6979      	ldr	r1, [r7, #20]
 80108ae:	69b8      	ldr	r0, [r7, #24]
 80108b0:	f003 feb6 	bl	8014620 <tcp_rst>
    last_state = pcb->state;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	7d1b      	ldrb	r3, [r3, #20]
 80108b8:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 80108ba:	6879      	ldr	r1, [r7, #4]
 80108bc:	2001      	movs	r0, #1
 80108be:	f7fe fd41 	bl	800f344 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80108c2:	693b      	ldr	r3, [r7, #16]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d004      	beq.n	80108d2 <tcp_abandon+0x13e>
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	f06f 010c 	mvn.w	r1, #12
 80108ce:	68f8      	ldr	r0, [r7, #12]
 80108d0:	4798      	blx	r3
}
 80108d2:	bf00      	nop
 80108d4:	3728      	adds	r7, #40	; 0x28
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}
 80108da:	bf00      	nop
 80108dc:	080194fc 	.word	0x080194fc
 80108e0:	08019594 	.word	0x08019594
 80108e4:	08019538 	.word	0x08019538
 80108e8:	24024e5c 	.word	0x24024e5c
 80108ec:	24024e58 	.word	0x24024e58
 80108f0:	24024e4c 	.word	0x24024e4c
 80108f4:	24024e48 	.word	0x24024e48

080108f8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b082      	sub	sp, #8
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010900:	2101      	movs	r1, #1
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f7ff ff46 	bl	8010794 <tcp_abandon>
}
 8010908:	bf00      	nop
 801090a:	3708      	adds	r7, #8
 801090c:	46bd      	mov	sp, r7
 801090e:	bd80      	pop	{r7, pc}

08010910 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b084      	sub	sp, #16
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801091c:	687a      	ldr	r2, [r7, #4]
 801091e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010920:	4413      	add	r3, r2
 8010922:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010928:	687a      	ldr	r2, [r7, #4]
 801092a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801092c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8010930:	bf28      	it	cs
 8010932:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8010936:	b292      	uxth	r2, r2
 8010938:	4413      	add	r3, r2
 801093a:	68fa      	ldr	r2, [r7, #12]
 801093c:	1ad3      	subs	r3, r2, r3
 801093e:	2b00      	cmp	r3, #0
 8010940:	db08      	blt.n	8010954 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801094e:	68fa      	ldr	r2, [r7, #12]
 8010950:	1ad3      	subs	r3, r2, r3
 8010952:	e020      	b.n	8010996 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801095c:	1ad3      	subs	r3, r2, r3
 801095e:	2b00      	cmp	r3, #0
 8010960:	dd03      	ble.n	801096a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	2200      	movs	r2, #0
 8010966:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010968:	e014      	b.n	8010994 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010972:	1ad3      	subs	r3, r2, r3
 8010974:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801097c:	d306      	bcc.n	801098c <tcp_update_rcv_ann_wnd+0x7c>
 801097e:	4b08      	ldr	r3, [pc, #32]	; (80109a0 <tcp_update_rcv_ann_wnd+0x90>)
 8010980:	f44f 7242 	mov.w	r2, #776	; 0x308
 8010984:	4907      	ldr	r1, [pc, #28]	; (80109a4 <tcp_update_rcv_ann_wnd+0x94>)
 8010986:	4808      	ldr	r0, [pc, #32]	; (80109a8 <tcp_update_rcv_ann_wnd+0x98>)
 8010988:	f007 f804 	bl	8017994 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	b29a      	uxth	r2, r3
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010994:	2300      	movs	r3, #0
  }
}
 8010996:	4618      	mov	r0, r3
 8010998:	3710      	adds	r7, #16
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}
 801099e:	bf00      	nop
 80109a0:	080194fc 	.word	0x080194fc
 80109a4:	08019614 	.word	0x08019614
 80109a8:	08019538 	.word	0x08019538

080109ac <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b084      	sub	sp, #16
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
 80109b4:	460b      	mov	r3, r1
 80109b6:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	7d1b      	ldrb	r3, [r3, #20]
 80109bc:	2b01      	cmp	r3, #1
 80109be:	d106      	bne.n	80109ce <tcp_recved+0x22>
 80109c0:	4b23      	ldr	r3, [pc, #140]	; (8010a50 <tcp_recved+0xa4>)
 80109c2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80109c6:	4923      	ldr	r1, [pc, #140]	; (8010a54 <tcp_recved+0xa8>)
 80109c8:	4823      	ldr	r0, [pc, #140]	; (8010a58 <tcp_recved+0xac>)
 80109ca:	f006 ffe3 	bl	8017994 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80109d2:	887b      	ldrh	r3, [r7, #2]
 80109d4:	4413      	add	r3, r2
 80109d6:	b29a      	uxth	r2, r3
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80109e0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80109e4:	d904      	bls.n	80109f0 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80109ec:	851a      	strh	r2, [r3, #40]	; 0x28
 80109ee:	e017      	b.n	8010a20 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d113      	bne.n	8010a20 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	7d1b      	ldrb	r3, [r3, #20]
 80109fc:	2b07      	cmp	r3, #7
 80109fe:	d003      	beq.n	8010a08 <tcp_recved+0x5c>
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	7d1b      	ldrb	r3, [r3, #20]
 8010a04:	2b09      	cmp	r3, #9
 8010a06:	d104      	bne.n	8010a12 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010a0e:	851a      	strh	r2, [r3, #40]	; 0x28
 8010a10:	e006      	b.n	8010a20 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8010a12:	4b0f      	ldr	r3, [pc, #60]	; (8010a50 <tcp_recved+0xa4>)
 8010a14:	f240 322d 	movw	r2, #813	; 0x32d
 8010a18:	4910      	ldr	r1, [pc, #64]	; (8010a5c <tcp_recved+0xb0>)
 8010a1a:	480f      	ldr	r0, [pc, #60]	; (8010a58 <tcp_recved+0xac>)
 8010a1c:	f006 ffba 	bl	8017994 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f7ff ff75 	bl	8010910 <tcp_update_rcv_ann_wnd>
 8010a26:	4603      	mov	r3, r0
 8010a28:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010a30:	db09      	blt.n	8010a46 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	7e9b      	ldrb	r3, [r3, #26]
 8010a36:	f043 0302 	orr.w	r3, r3, #2
 8010a3a:	b2da      	uxtb	r2, r3
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f003 fb63 	bl	801410c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010a46:	bf00      	nop
 8010a48:	3710      	adds	r7, #16
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}
 8010a4e:	bf00      	nop
 8010a50:	080194fc 	.word	0x080194fc
 8010a54:	08019630 	.word	0x08019630
 8010a58:	08019538 	.word	0x08019538
 8010a5c:	08019658 	.word	0x08019658

08010a60 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010a60:	b5b0      	push	{r4, r5, r7, lr}
 8010a62:	b08c      	sub	sp, #48	; 0x30
 8010a64:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010a66:	2300      	movs	r3, #0
 8010a68:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8010a6a:	4b9a      	ldr	r3, [pc, #616]	; (8010cd4 <tcp_slowtmr+0x274>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	3301      	adds	r3, #1
 8010a70:	4a98      	ldr	r2, [pc, #608]	; (8010cd4 <tcp_slowtmr+0x274>)
 8010a72:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010a74:	4b98      	ldr	r3, [pc, #608]	; (8010cd8 <tcp_slowtmr+0x278>)
 8010a76:	781b      	ldrb	r3, [r3, #0]
 8010a78:	3301      	adds	r3, #1
 8010a7a:	b2da      	uxtb	r2, r3
 8010a7c:	4b96      	ldr	r3, [pc, #600]	; (8010cd8 <tcp_slowtmr+0x278>)
 8010a7e:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8010a80:	2300      	movs	r3, #0
 8010a82:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8010a84:	4b95      	ldr	r3, [pc, #596]	; (8010cdc <tcp_slowtmr+0x27c>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8010a8a:	e22f      	b.n	8010eec <tcp_slowtmr+0x48c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a8e:	7d1b      	ldrb	r3, [r3, #20]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d106      	bne.n	8010aa2 <tcp_slowtmr+0x42>
 8010a94:	4b92      	ldr	r3, [pc, #584]	; (8010ce0 <tcp_slowtmr+0x280>)
 8010a96:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8010a9a:	4992      	ldr	r1, [pc, #584]	; (8010ce4 <tcp_slowtmr+0x284>)
 8010a9c:	4892      	ldr	r0, [pc, #584]	; (8010ce8 <tcp_slowtmr+0x288>)
 8010a9e:	f006 ff79 	bl	8017994 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa4:	7d1b      	ldrb	r3, [r3, #20]
 8010aa6:	2b01      	cmp	r3, #1
 8010aa8:	d106      	bne.n	8010ab8 <tcp_slowtmr+0x58>
 8010aaa:	4b8d      	ldr	r3, [pc, #564]	; (8010ce0 <tcp_slowtmr+0x280>)
 8010aac:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010ab0:	498e      	ldr	r1, [pc, #568]	; (8010cec <tcp_slowtmr+0x28c>)
 8010ab2:	488d      	ldr	r0, [pc, #564]	; (8010ce8 <tcp_slowtmr+0x288>)
 8010ab4:	f006 ff6e 	bl	8017994 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aba:	7d1b      	ldrb	r3, [r3, #20]
 8010abc:	2b0a      	cmp	r3, #10
 8010abe:	d106      	bne.n	8010ace <tcp_slowtmr+0x6e>
 8010ac0:	4b87      	ldr	r3, [pc, #540]	; (8010ce0 <tcp_slowtmr+0x280>)
 8010ac2:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8010ac6:	498a      	ldr	r1, [pc, #552]	; (8010cf0 <tcp_slowtmr+0x290>)
 8010ac8:	4887      	ldr	r0, [pc, #540]	; (8010ce8 <tcp_slowtmr+0x288>)
 8010aca:	f006 ff63 	bl	8017994 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad0:	7f5a      	ldrb	r2, [r3, #29]
 8010ad2:	4b81      	ldr	r3, [pc, #516]	; (8010cd8 <tcp_slowtmr+0x278>)
 8010ad4:	781b      	ldrb	r3, [r3, #0]
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	d103      	bne.n	8010ae2 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8010ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010adc:	68db      	ldr	r3, [r3, #12]
 8010ade:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8010ae0:	e204      	b.n	8010eec <tcp_slowtmr+0x48c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010ae2:	4b7d      	ldr	r3, [pc, #500]	; (8010cd8 <tcp_slowtmr+0x278>)
 8010ae4:	781a      	ldrb	r2, [r3, #0]
 8010ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae8:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8010aea:	2300      	movs	r3, #0
 8010aec:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8010aee:	2300      	movs	r3, #0
 8010af0:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af4:	7d1b      	ldrb	r3, [r3, #20]
 8010af6:	2b02      	cmp	r3, #2
 8010af8:	d108      	bne.n	8010b0c <tcp_slowtmr+0xac>
 8010afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010b00:	2b05      	cmp	r3, #5
 8010b02:	d903      	bls.n	8010b0c <tcp_slowtmr+0xac>
      ++pcb_remove;
 8010b04:	7ffb      	ldrb	r3, [r7, #31]
 8010b06:	3301      	adds	r3, #1
 8010b08:	77fb      	strb	r3, [r7, #31]
 8010b0a:	e0a2      	b.n	8010c52 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8010b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010b12:	2b0b      	cmp	r3, #11
 8010b14:	d903      	bls.n	8010b1e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8010b16:	7ffb      	ldrb	r3, [r7, #31]
 8010b18:	3301      	adds	r3, #1
 8010b1a:	77fb      	strb	r3, [r7, #31]
 8010b1c:	e099      	b.n	8010c52 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b20:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d032      	beq.n	8010b8e <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8010b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010b2e:	3b01      	subs	r3, #1
 8010b30:	4a70      	ldr	r2, [pc, #448]	; (8010cf4 <tcp_slowtmr+0x294>)
 8010b32:	5cd3      	ldrb	r3, [r2, r3]
 8010b34:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8010b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b38:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8010b3c:	7cfa      	ldrb	r2, [r7, #19]
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d907      	bls.n	8010b52 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8010b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b44:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8010b48:	3301      	adds	r3, #1
 8010b4a:	b2da      	uxtb	r2, r3
 8010b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b4e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8010b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b54:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8010b58:	7cfa      	ldrb	r2, [r7, #19]
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d879      	bhi.n	8010c52 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8010b5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b60:	f003 fef0 	bl	8014944 <tcp_zero_window_probe>
 8010b64:	4603      	mov	r3, r0
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d173      	bne.n	8010c52 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8010b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b74:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010b78:	2b06      	cmp	r3, #6
 8010b7a:	d86a      	bhi.n	8010c52 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8010b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b7e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010b82:	3301      	adds	r3, #1
 8010b84:	b2da      	uxtb	r2, r3
 8010b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b88:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8010b8c:	e061      	b.n	8010c52 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8010b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b90:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	db08      	blt.n	8010baa <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8010b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b9a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010b9e:	b29b      	uxth	r3, r3
 8010ba0:	3301      	adds	r3, #1
 8010ba2:	b29b      	uxth	r3, r3
 8010ba4:	b21a      	sxth	r2, r3
 8010ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba8:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8010baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d04f      	beq.n	8010c52 <tcp_slowtmr+0x1f2>
 8010bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb4:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8010bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bba:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010bbe:	429a      	cmp	r2, r3
 8010bc0:	db47      	blt.n	8010c52 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8010bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bc4:	7d1b      	ldrb	r3, [r3, #20]
 8010bc6:	2b02      	cmp	r3, #2
 8010bc8:	d018      	beq.n	8010bfc <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8010bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010bd0:	2b0c      	cmp	r3, #12
 8010bd2:	bf28      	it	cs
 8010bd4:	230c      	movcs	r3, #12
 8010bd6:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bda:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010bde:	10db      	asrs	r3, r3, #3
 8010be0:	b21b      	sxth	r3, r3
 8010be2:	461a      	mov	r2, r3
 8010be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010be6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010bea:	4413      	add	r3, r2
 8010bec:	7dfa      	ldrb	r2, [r7, #23]
 8010bee:	4942      	ldr	r1, [pc, #264]	; (8010cf8 <tcp_slowtmr+0x298>)
 8010bf0:	5c8a      	ldrb	r2, [r1, r2]
 8010bf2:	4093      	lsls	r3, r2
 8010bf4:	b21a      	sxth	r2, r3
 8010bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8010bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bfe:	2200      	movs	r2, #0
 8010c00:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c04:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	bf28      	it	cs
 8010c12:	4613      	movcs	r3, r2
 8010c14:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8010c16:	8abb      	ldrh	r3, [r7, #20]
 8010c18:	085b      	lsrs	r3, r3, #1
 8010c1a:	b29a      	uxth	r2, r3
 8010c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c1e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c24:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c2c:	005b      	lsls	r3, r3, #1
 8010c2e:	b29b      	uxth	r3, r3
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d206      	bcs.n	8010c42 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8010c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c38:	005b      	lsls	r3, r3, #1
 8010c3a:	b29a      	uxth	r2, r3
 8010c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c3e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8010c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c44:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c48:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8010c4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c4e:	f003 fd5d 	bl	801470c <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8010c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c54:	7d1b      	ldrb	r3, [r3, #20]
 8010c56:	2b06      	cmp	r3, #6
 8010c58:	d10f      	bne.n	8010c7a <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8010c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5c:	7e9b      	ldrb	r3, [r3, #26]
 8010c5e:	f003 0310 	and.w	r3, r3, #16
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d009      	beq.n	8010c7a <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010c66:	4b1b      	ldr	r3, [pc, #108]	; (8010cd4 <tcp_slowtmr+0x274>)
 8010c68:	681a      	ldr	r2, [r3, #0]
 8010c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c6c:	6a1b      	ldr	r3, [r3, #32]
 8010c6e:	1ad3      	subs	r3, r2, r3
 8010c70:	2b28      	cmp	r3, #40	; 0x28
 8010c72:	d902      	bls.n	8010c7a <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8010c74:	7ffb      	ldrb	r3, [r7, #31]
 8010c76:	3301      	adds	r3, #1
 8010c78:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c7c:	7a1b      	ldrb	r3, [r3, #8]
 8010c7e:	f003 0308 	and.w	r3, r3, #8
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d065      	beq.n	8010d52 <tcp_slowtmr+0x2f2>
       ((pcb->state == ESTABLISHED) ||
 8010c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c88:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010c8a:	2b04      	cmp	r3, #4
 8010c8c:	d003      	beq.n	8010c96 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8010c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c90:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8010c92:	2b07      	cmp	r3, #7
 8010c94:	d15d      	bne.n	8010d52 <tcp_slowtmr+0x2f2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010c96:	4b0f      	ldr	r3, [pc, #60]	; (8010cd4 <tcp_slowtmr+0x274>)
 8010c98:	681a      	ldr	r2, [r3, #0]
 8010c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c9c:	6a1b      	ldr	r3, [r3, #32]
 8010c9e:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8010ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca2:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8010ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010cac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010cae:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 8010cb2:	fb00 f303 	mul.w	r3, r0, r3
 8010cb6:	440b      	add	r3, r1
 8010cb8:	4910      	ldr	r1, [pc, #64]	; (8010cfc <tcp_slowtmr+0x29c>)
 8010cba:	fba1 1303 	umull	r1, r3, r1, r3
 8010cbe:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	d91d      	bls.n	8010d00 <tcp_slowtmr+0x2a0>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8010cc4:	7ffb      	ldrb	r3, [r7, #31]
 8010cc6:	3301      	adds	r3, #1
 8010cc8:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8010cca:	7fbb      	ldrb	r3, [r7, #30]
 8010ccc:	3301      	adds	r3, #1
 8010cce:	77bb      	strb	r3, [r7, #30]
 8010cd0:	e03f      	b.n	8010d52 <tcp_slowtmr+0x2f2>
 8010cd2:	bf00      	nop
 8010cd4:	24024e50 	.word	0x24024e50
 8010cd8:	240217fe 	.word	0x240217fe
 8010cdc:	24024e4c 	.word	0x24024e4c
 8010ce0:	080194fc 	.word	0x080194fc
 8010ce4:	080196ac 	.word	0x080196ac
 8010ce8:	08019538 	.word	0x08019538
 8010cec:	080196d8 	.word	0x080196d8
 8010cf0:	08019704 	.word	0x08019704
 8010cf4:	0801a9ac 	.word	0x0801a9ac
 8010cf8:	0801a99c 	.word	0x0801a99c
 8010cfc:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010d00:	4b98      	ldr	r3, [pc, #608]	; (8010f64 <tcp_slowtmr+0x504>)
 8010d02:	681a      	ldr	r2, [r3, #0]
 8010d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d06:	6a1b      	ldr	r3, [r3, #32]
 8010d08:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d0c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8010d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d12:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8010d16:	4618      	mov	r0, r3
 8010d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010d1e:	fb03 f300 	mul.w	r3, r3, r0
 8010d22:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8010d24:	4990      	ldr	r1, [pc, #576]	; (8010f68 <tcp_slowtmr+0x508>)
 8010d26:	fba1 1303 	umull	r1, r3, r1, r3
 8010d2a:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010d2c:	429a      	cmp	r2, r3
 8010d2e:	d910      	bls.n	8010d52 <tcp_slowtmr+0x2f2>
      {
        err = tcp_keepalive(pcb);
 8010d30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d32:	f003 fdca 	bl	80148ca <tcp_keepalive>
 8010d36:	4603      	mov	r3, r0
 8010d38:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8010d3a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d107      	bne.n	8010d52 <tcp_slowtmr+0x2f2>
          pcb->keep_cnt_sent++;
 8010d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d44:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8010d48:	3301      	adds	r3, #1
 8010d4a:	b2da      	uxtb	r2, r3
 8010d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d4e:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8010d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d016      	beq.n	8010d88 <tcp_slowtmr+0x328>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8010d5a:	4b82      	ldr	r3, [pc, #520]	; (8010f64 <tcp_slowtmr+0x504>)
 8010d5c:	681a      	ldr	r2, [r3, #0]
 8010d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d60:	6a1b      	ldr	r3, [r3, #32]
 8010d62:	1ad2      	subs	r2, r2, r3
 8010d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d66:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010d6a:	4619      	mov	r1, r3
 8010d6c:	460b      	mov	r3, r1
 8010d6e:	005b      	lsls	r3, r3, #1
 8010d70:	440b      	add	r3, r1
 8010d72:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010d74:	429a      	cmp	r2, r3
 8010d76:	d307      	bcc.n	8010d88 <tcp_slowtmr+0x328>
      tcp_segs_free(pcb->ooseq);
 8010d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f000 fa02 	bl	8011186 <tcp_segs_free>
      pcb->ooseq = NULL;
 8010d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d84:	2200      	movs	r2, #0
 8010d86:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8010d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8a:	7d1b      	ldrb	r3, [r3, #20]
 8010d8c:	2b03      	cmp	r3, #3
 8010d8e:	d109      	bne.n	8010da4 <tcp_slowtmr+0x344>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010d90:	4b74      	ldr	r3, [pc, #464]	; (8010f64 <tcp_slowtmr+0x504>)
 8010d92:	681a      	ldr	r2, [r3, #0]
 8010d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d96:	6a1b      	ldr	r3, [r3, #32]
 8010d98:	1ad3      	subs	r3, r2, r3
 8010d9a:	2b28      	cmp	r3, #40	; 0x28
 8010d9c:	d902      	bls.n	8010da4 <tcp_slowtmr+0x344>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8010d9e:	7ffb      	ldrb	r3, [r7, #31]
 8010da0:	3301      	adds	r3, #1
 8010da2:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8010da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da6:	7d1b      	ldrb	r3, [r3, #20]
 8010da8:	2b09      	cmp	r3, #9
 8010daa:	d109      	bne.n	8010dc0 <tcp_slowtmr+0x360>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010dac:	4b6d      	ldr	r3, [pc, #436]	; (8010f64 <tcp_slowtmr+0x504>)
 8010dae:	681a      	ldr	r2, [r3, #0]
 8010db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010db2:	6a1b      	ldr	r3, [r3, #32]
 8010db4:	1ad3      	subs	r3, r2, r3
 8010db6:	2bf0      	cmp	r3, #240	; 0xf0
 8010db8:	d902      	bls.n	8010dc0 <tcp_slowtmr+0x360>
        ++pcb_remove;
 8010dba:	7ffb      	ldrb	r3, [r7, #31]
 8010dbc:	3301      	adds	r3, #1
 8010dbe:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010dc0:	7ffb      	ldrb	r3, [r7, #31]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d05d      	beq.n	8010e82 <tcp_slowtmr+0x422>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8010dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010dcc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8010dce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010dd0:	f000 fb8c 	bl	80114ec <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8010dd4:	6a3b      	ldr	r3, [r7, #32]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d010      	beq.n	8010dfc <tcp_slowtmr+0x39c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010dda:	4b64      	ldr	r3, [pc, #400]	; (8010f6c <tcp_slowtmr+0x50c>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d106      	bne.n	8010df2 <tcp_slowtmr+0x392>
 8010de4:	4b62      	ldr	r3, [pc, #392]	; (8010f70 <tcp_slowtmr+0x510>)
 8010de6:	f240 4289 	movw	r2, #1161	; 0x489
 8010dea:	4962      	ldr	r1, [pc, #392]	; (8010f74 <tcp_slowtmr+0x514>)
 8010dec:	4862      	ldr	r0, [pc, #392]	; (8010f78 <tcp_slowtmr+0x518>)
 8010dee:	f006 fdd1 	bl	8017994 <iprintf>
        prev->next = pcb->next;
 8010df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df4:	68da      	ldr	r2, [r3, #12]
 8010df6:	6a3b      	ldr	r3, [r7, #32]
 8010df8:	60da      	str	r2, [r3, #12]
 8010dfa:	e00f      	b.n	8010e1c <tcp_slowtmr+0x3bc>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010dfc:	4b5b      	ldr	r3, [pc, #364]	; (8010f6c <tcp_slowtmr+0x50c>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e02:	429a      	cmp	r2, r3
 8010e04:	d006      	beq.n	8010e14 <tcp_slowtmr+0x3b4>
 8010e06:	4b5a      	ldr	r3, [pc, #360]	; (8010f70 <tcp_slowtmr+0x510>)
 8010e08:	f240 428d 	movw	r2, #1165	; 0x48d
 8010e0c:	495b      	ldr	r1, [pc, #364]	; (8010f7c <tcp_slowtmr+0x51c>)
 8010e0e:	485a      	ldr	r0, [pc, #360]	; (8010f78 <tcp_slowtmr+0x518>)
 8010e10:	f006 fdc0 	bl	8017994 <iprintf>
        tcp_active_pcbs = pcb->next;
 8010e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e16:	68db      	ldr	r3, [r3, #12]
 8010e18:	4a54      	ldr	r2, [pc, #336]	; (8010f6c <tcp_slowtmr+0x50c>)
 8010e1a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8010e1c:	7fbb      	ldrb	r3, [r7, #30]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d010      	beq.n	8010e44 <tcp_slowtmr+0x3e4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e24:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e28:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010e2a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8010e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e2e:	1d1d      	adds	r5, r3, #4
 8010e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e32:	8adb      	ldrh	r3, [r3, #22]
 8010e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e36:	8b12      	ldrh	r2, [r2, #24]
 8010e38:	9201      	str	r2, [sp, #4]
 8010e3a:	9300      	str	r3, [sp, #0]
 8010e3c:	462b      	mov	r3, r5
 8010e3e:	4622      	mov	r2, r4
 8010e40:	f003 fbee 	bl	8014620 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8010e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e46:	691b      	ldr	r3, [r3, #16]
 8010e48:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e4c:	7d1b      	ldrb	r3, [r3, #20]
 8010e4e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e52:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e56:	68db      	ldr	r3, [r3, #12]
 8010e58:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8010e5a:	6839      	ldr	r1, [r7, #0]
 8010e5c:	2001      	movs	r0, #1
 8010e5e:	f7fe fa71 	bl	800f344 <memp_free>

      tcp_active_pcbs_changed = 0;
 8010e62:	4b47      	ldr	r3, [pc, #284]	; (8010f80 <tcp_slowtmr+0x520>)
 8010e64:	2200      	movs	r2, #0
 8010e66:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d004      	beq.n	8010e78 <tcp_slowtmr+0x418>
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	f06f 010c 	mvn.w	r1, #12
 8010e74:	68b8      	ldr	r0, [r7, #8]
 8010e76:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010e78:	4b41      	ldr	r3, [pc, #260]	; (8010f80 <tcp_slowtmr+0x520>)
 8010e7a:	781b      	ldrb	r3, [r3, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d035      	beq.n	8010eec <tcp_slowtmr+0x48c>
        goto tcp_slowtmr_start;
 8010e80:	e5fe      	b.n	8010a80 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8010e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e84:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8010e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e88:	68db      	ldr	r3, [r3, #12]
 8010e8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8010e8c:	6a3b      	ldr	r3, [r7, #32]
 8010e8e:	7edb      	ldrb	r3, [r3, #27]
 8010e90:	3301      	adds	r3, #1
 8010e92:	b2da      	uxtb	r2, r3
 8010e94:	6a3b      	ldr	r3, [r7, #32]
 8010e96:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8010e98:	6a3b      	ldr	r3, [r7, #32]
 8010e9a:	7eda      	ldrb	r2, [r3, #27]
 8010e9c:	6a3b      	ldr	r3, [r7, #32]
 8010e9e:	7f1b      	ldrb	r3, [r3, #28]
 8010ea0:	429a      	cmp	r2, r3
 8010ea2:	d323      	bcc.n	8010eec <tcp_slowtmr+0x48c>
        prev->polltmr = 0;
 8010ea4:	6a3b      	ldr	r3, [r7, #32]
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8010eaa:	4b35      	ldr	r3, [pc, #212]	; (8010f80 <tcp_slowtmr+0x520>)
 8010eac:	2200      	movs	r2, #0
 8010eae:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010eb0:	6a3b      	ldr	r3, [r7, #32]
 8010eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d00a      	beq.n	8010ed0 <tcp_slowtmr+0x470>
 8010eba:	6a3b      	ldr	r3, [r7, #32]
 8010ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010ec0:	6a3a      	ldr	r2, [r7, #32]
 8010ec2:	6912      	ldr	r2, [r2, #16]
 8010ec4:	6a39      	ldr	r1, [r7, #32]
 8010ec6:	4610      	mov	r0, r2
 8010ec8:	4798      	blx	r3
 8010eca:	4603      	mov	r3, r0
 8010ecc:	777b      	strb	r3, [r7, #29]
 8010ece:	e001      	b.n	8010ed4 <tcp_slowtmr+0x474>
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8010ed4:	4b2a      	ldr	r3, [pc, #168]	; (8010f80 <tcp_slowtmr+0x520>)
 8010ed6:	781b      	ldrb	r3, [r3, #0]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d000      	beq.n	8010ede <tcp_slowtmr+0x47e>
          goto tcp_slowtmr_start;
 8010edc:	e5d0      	b.n	8010a80 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010ede:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d102      	bne.n	8010eec <tcp_slowtmr+0x48c>
          tcp_output(prev);
 8010ee6:	6a38      	ldr	r0, [r7, #32]
 8010ee8:	f003 f910 	bl	801410c <tcp_output>
  while (pcb != NULL) {
 8010eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	f47f adcc 	bne.w	8010a8c <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8010ef8:	4b22      	ldr	r3, [pc, #136]	; (8010f84 <tcp_slowtmr+0x524>)
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8010efe:	e066      	b.n	8010fce <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f02:	7d1b      	ldrb	r3, [r3, #20]
 8010f04:	2b0a      	cmp	r3, #10
 8010f06:	d006      	beq.n	8010f16 <tcp_slowtmr+0x4b6>
 8010f08:	4b19      	ldr	r3, [pc, #100]	; (8010f70 <tcp_slowtmr+0x510>)
 8010f0a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8010f0e:	491e      	ldr	r1, [pc, #120]	; (8010f88 <tcp_slowtmr+0x528>)
 8010f10:	4819      	ldr	r0, [pc, #100]	; (8010f78 <tcp_slowtmr+0x518>)
 8010f12:	f006 fd3f 	bl	8017994 <iprintf>
    pcb_remove = 0;
 8010f16:	2300      	movs	r3, #0
 8010f18:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010f1a:	4b12      	ldr	r3, [pc, #72]	; (8010f64 <tcp_slowtmr+0x504>)
 8010f1c:	681a      	ldr	r2, [r3, #0]
 8010f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f20:	6a1b      	ldr	r3, [r3, #32]
 8010f22:	1ad3      	subs	r3, r2, r3
 8010f24:	2bf0      	cmp	r3, #240	; 0xf0
 8010f26:	d902      	bls.n	8010f2e <tcp_slowtmr+0x4ce>
      ++pcb_remove;
 8010f28:	7ffb      	ldrb	r3, [r7, #31]
 8010f2a:	3301      	adds	r3, #1
 8010f2c:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010f2e:	7ffb      	ldrb	r3, [r7, #31]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d047      	beq.n	8010fc4 <tcp_slowtmr+0x564>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010f34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f36:	f000 fad9 	bl	80114ec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010f3a:	6a3b      	ldr	r3, [r7, #32]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d027      	beq.n	8010f90 <tcp_slowtmr+0x530>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010f40:	4b10      	ldr	r3, [pc, #64]	; (8010f84 <tcp_slowtmr+0x524>)
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f46:	429a      	cmp	r2, r3
 8010f48:	d106      	bne.n	8010f58 <tcp_slowtmr+0x4f8>
 8010f4a:	4b09      	ldr	r3, [pc, #36]	; (8010f70 <tcp_slowtmr+0x510>)
 8010f4c:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8010f50:	490e      	ldr	r1, [pc, #56]	; (8010f8c <tcp_slowtmr+0x52c>)
 8010f52:	4809      	ldr	r0, [pc, #36]	; (8010f78 <tcp_slowtmr+0x518>)
 8010f54:	f006 fd1e 	bl	8017994 <iprintf>
        prev->next = pcb->next;
 8010f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f5a:	68da      	ldr	r2, [r3, #12]
 8010f5c:	6a3b      	ldr	r3, [r7, #32]
 8010f5e:	60da      	str	r2, [r3, #12]
 8010f60:	e026      	b.n	8010fb0 <tcp_slowtmr+0x550>
 8010f62:	bf00      	nop
 8010f64:	24024e50 	.word	0x24024e50
 8010f68:	10624dd3 	.word	0x10624dd3
 8010f6c:	24024e4c 	.word	0x24024e4c
 8010f70:	080194fc 	.word	0x080194fc
 8010f74:	08019734 	.word	0x08019734
 8010f78:	08019538 	.word	0x08019538
 8010f7c:	08019760 	.word	0x08019760
 8010f80:	24024e48 	.word	0x24024e48
 8010f84:	24024e5c 	.word	0x24024e5c
 8010f88:	0801978c 	.word	0x0801978c
 8010f8c:	080197bc 	.word	0x080197bc
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010f90:	4b12      	ldr	r3, [pc, #72]	; (8010fdc <tcp_slowtmr+0x57c>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d006      	beq.n	8010fa8 <tcp_slowtmr+0x548>
 8010f9a:	4b11      	ldr	r3, [pc, #68]	; (8010fe0 <tcp_slowtmr+0x580>)
 8010f9c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8010fa0:	4910      	ldr	r1, [pc, #64]	; (8010fe4 <tcp_slowtmr+0x584>)
 8010fa2:	4811      	ldr	r0, [pc, #68]	; (8010fe8 <tcp_slowtmr+0x588>)
 8010fa4:	f006 fcf6 	bl	8017994 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010faa:	68db      	ldr	r3, [r3, #12]
 8010fac:	4a0b      	ldr	r2, [pc, #44]	; (8010fdc <tcp_slowtmr+0x57c>)
 8010fae:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb2:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8010fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb6:	68db      	ldr	r3, [r3, #12]
 8010fb8:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8010fba:	69b9      	ldr	r1, [r7, #24]
 8010fbc:	2001      	movs	r0, #1
 8010fbe:	f7fe f9c1 	bl	800f344 <memp_free>
 8010fc2:	e004      	b.n	8010fce <tcp_slowtmr+0x56e>
    } else {
      prev = pcb;
 8010fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc6:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8010fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fca:	68db      	ldr	r3, [r3, #12]
 8010fcc:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8010fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d195      	bne.n	8010f00 <tcp_slowtmr+0x4a0>
    }
  }
}
 8010fd4:	bf00      	nop
 8010fd6:	3728      	adds	r7, #40	; 0x28
 8010fd8:	46bd      	mov	sp, r7
 8010fda:	bdb0      	pop	{r4, r5, r7, pc}
 8010fdc:	24024e5c 	.word	0x24024e5c
 8010fe0:	080194fc 	.word	0x080194fc
 8010fe4:	080197e4 	.word	0x080197e4
 8010fe8:	08019538 	.word	0x08019538

08010fec <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b082      	sub	sp, #8
 8010ff0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010ff2:	4b2d      	ldr	r3, [pc, #180]	; (80110a8 <tcp_fasttmr+0xbc>)
 8010ff4:	781b      	ldrb	r3, [r3, #0]
 8010ff6:	3301      	adds	r3, #1
 8010ff8:	b2da      	uxtb	r2, r3
 8010ffa:	4b2b      	ldr	r3, [pc, #172]	; (80110a8 <tcp_fasttmr+0xbc>)
 8010ffc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010ffe:	4b2b      	ldr	r3, [pc, #172]	; (80110ac <tcp_fasttmr+0xc0>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011004:	e048      	b.n	8011098 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	7f5a      	ldrb	r2, [r3, #29]
 801100a:	4b27      	ldr	r3, [pc, #156]	; (80110a8 <tcp_fasttmr+0xbc>)
 801100c:	781b      	ldrb	r3, [r3, #0]
 801100e:	429a      	cmp	r2, r3
 8011010:	d03f      	beq.n	8011092 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011012:	4b25      	ldr	r3, [pc, #148]	; (80110a8 <tcp_fasttmr+0xbc>)
 8011014:	781a      	ldrb	r2, [r3, #0]
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	7e9b      	ldrb	r3, [r3, #26]
 801101e:	f003 0301 	and.w	r3, r3, #1
 8011022:	2b00      	cmp	r3, #0
 8011024:	d010      	beq.n	8011048 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	7e9b      	ldrb	r3, [r3, #26]
 801102a:	f043 0302 	orr.w	r3, r3, #2
 801102e:	b2da      	uxtb	r2, r3
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f003 f869 	bl	801410c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	7e9b      	ldrb	r3, [r3, #26]
 801103e:	f023 0303 	bic.w	r3, r3, #3
 8011042:	b2da      	uxtb	r2, r3
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	7e9b      	ldrb	r3, [r3, #26]
 801104c:	f003 0308 	and.w	r3, r3, #8
 8011050:	2b00      	cmp	r3, #0
 8011052:	d009      	beq.n	8011068 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	7e9b      	ldrb	r3, [r3, #26]
 8011058:	f023 0308 	bic.w	r3, r3, #8
 801105c:	b2da      	uxtb	r2, r3
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f7ff fb18 	bl	8010698 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	68db      	ldr	r3, [r3, #12]
 801106c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011072:	2b00      	cmp	r3, #0
 8011074:	d00a      	beq.n	801108c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011076:	4b0e      	ldr	r3, [pc, #56]	; (80110b0 <tcp_fasttmr+0xc4>)
 8011078:	2200      	movs	r2, #0
 801107a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	f000 f819 	bl	80110b4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011082:	4b0b      	ldr	r3, [pc, #44]	; (80110b0 <tcp_fasttmr+0xc4>)
 8011084:	781b      	ldrb	r3, [r3, #0]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d000      	beq.n	801108c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801108a:	e7b8      	b.n	8010ffe <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	607b      	str	r3, [r7, #4]
 8011090:	e002      	b.n	8011098 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	68db      	ldr	r3, [r3, #12]
 8011096:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d1b3      	bne.n	8011006 <tcp_fasttmr+0x1a>
    }
  }
}
 801109e:	bf00      	nop
 80110a0:	3708      	adds	r7, #8
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd80      	pop	{r7, pc}
 80110a6:	bf00      	nop
 80110a8:	240217fe 	.word	0x240217fe
 80110ac:	24024e4c 	.word	0x24024e4c
 80110b0:	24024e48 	.word	0x24024e48

080110b4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80110b4:	b590      	push	{r4, r7, lr}
 80110b6:	b085      	sub	sp, #20
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110c0:	7b5b      	ldrb	r3, [r3, #13]
 80110c2:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110c8:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2200      	movs	r2, #0
 80110ce:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d00b      	beq.n	80110f2 <tcp_process_refused_data+0x3e>
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	6918      	ldr	r0, [r3, #16]
 80110e4:	2300      	movs	r3, #0
 80110e6:	68ba      	ldr	r2, [r7, #8]
 80110e8:	6879      	ldr	r1, [r7, #4]
 80110ea:	47a0      	blx	r4
 80110ec:	4603      	mov	r3, r0
 80110ee:	73fb      	strb	r3, [r7, #15]
 80110f0:	e007      	b.n	8011102 <tcp_process_refused_data+0x4e>
 80110f2:	2300      	movs	r3, #0
 80110f4:	68ba      	ldr	r2, [r7, #8]
 80110f6:	6879      	ldr	r1, [r7, #4]
 80110f8:	2000      	movs	r0, #0
 80110fa:	f000 f88c 	bl	8011216 <tcp_recv_null>
 80110fe:	4603      	mov	r3, r0
 8011100:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d12a      	bne.n	8011160 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 801110a:	7bbb      	ldrb	r3, [r7, #14]
 801110c:	f003 0320 	and.w	r3, r3, #32
 8011110:	2b00      	cmp	r3, #0
 8011112:	d033      	beq.n	801117c <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011118:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801111c:	d005      	beq.n	801112a <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011122:	3301      	adds	r3, #1
 8011124:	b29a      	uxth	r2, r3
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011130:	2b00      	cmp	r3, #0
 8011132:	d00b      	beq.n	801114c <tcp_process_refused_data+0x98>
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6918      	ldr	r0, [r3, #16]
 801113e:	2300      	movs	r3, #0
 8011140:	2200      	movs	r2, #0
 8011142:	6879      	ldr	r1, [r7, #4]
 8011144:	47a0      	blx	r4
 8011146:	4603      	mov	r3, r0
 8011148:	73fb      	strb	r3, [r7, #15]
 801114a:	e001      	b.n	8011150 <tcp_process_refused_data+0x9c>
 801114c:	2300      	movs	r3, #0
 801114e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011154:	f113 0f0d 	cmn.w	r3, #13
 8011158:	d110      	bne.n	801117c <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 801115a:	f06f 030c 	mvn.w	r3, #12
 801115e:	e00e      	b.n	801117e <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8011160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011164:	f113 0f0d 	cmn.w	r3, #13
 8011168:	d102      	bne.n	8011170 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801116a:	f06f 030c 	mvn.w	r3, #12
 801116e:	e006      	b.n	801117e <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	68ba      	ldr	r2, [r7, #8]
 8011174:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8011176:	f06f 0304 	mvn.w	r3, #4
 801117a:	e000      	b.n	801117e <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 801117c:	2300      	movs	r3, #0
}
 801117e:	4618      	mov	r0, r3
 8011180:	3714      	adds	r7, #20
 8011182:	46bd      	mov	sp, r7
 8011184:	bd90      	pop	{r4, r7, pc}

08011186 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011186:	b580      	push	{r7, lr}
 8011188:	b084      	sub	sp, #16
 801118a:	af00      	add	r7, sp, #0
 801118c:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801118e:	e007      	b.n	80111a0 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f000 f809 	bl	80111ae <tcp_seg_free>
    seg = next;
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d1f4      	bne.n	8011190 <tcp_segs_free+0xa>
  }
}
 80111a6:	bf00      	nop
 80111a8:	3710      	adds	r7, #16
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}

080111ae <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80111ae:	b580      	push	{r7, lr}
 80111b0:	b082      	sub	sp, #8
 80111b2:	af00      	add	r7, sp, #0
 80111b4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d00c      	beq.n	80111d6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	685b      	ldr	r3, [r3, #4]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d004      	beq.n	80111ce <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	685b      	ldr	r3, [r3, #4]
 80111c8:	4618      	mov	r0, r3
 80111ca:	f7fe fe97 	bl	800fefc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80111ce:	6879      	ldr	r1, [r7, #4]
 80111d0:	2003      	movs	r0, #3
 80111d2:	f7fe f8b7 	bl	800f344 <memp_free>
  }
}
 80111d6:	bf00      	nop
 80111d8:	3708      	adds	r7, #8
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}

080111de <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80111de:	b580      	push	{r7, lr}
 80111e0:	b084      	sub	sp, #16
 80111e2:	af00      	add	r7, sp, #0
 80111e4:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80111e6:	2003      	movs	r0, #3
 80111e8:	f7fe f836 	bl	800f258 <memp_malloc>
 80111ec:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d101      	bne.n	80111f8 <tcp_seg_copy+0x1a>
    return NULL;
 80111f4:	2300      	movs	r3, #0
 80111f6:	e00a      	b.n	801120e <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80111f8:	2210      	movs	r2, #16
 80111fa:	6879      	ldr	r1, [r7, #4]
 80111fc:	68f8      	ldr	r0, [r7, #12]
 80111fe:	f006 fbb6 	bl	801796e <memcpy>
  pbuf_ref(cseg->p);
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	685b      	ldr	r3, [r3, #4]
 8011206:	4618      	mov	r0, r3
 8011208:	f7fe ff2a 	bl	8010060 <pbuf_ref>
  return cseg;
 801120c:	68fb      	ldr	r3, [r7, #12]
}
 801120e:	4618      	mov	r0, r3
 8011210:	3710      	adds	r7, #16
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}

08011216 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011216:	b580      	push	{r7, lr}
 8011218:	b084      	sub	sp, #16
 801121a:	af00      	add	r7, sp, #0
 801121c:	60f8      	str	r0, [r7, #12]
 801121e:	60b9      	str	r1, [r7, #8]
 8011220:	607a      	str	r2, [r7, #4]
 8011222:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d009      	beq.n	801123e <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	891b      	ldrh	r3, [r3, #8]
 801122e:	4619      	mov	r1, r3
 8011230:	68b8      	ldr	r0, [r7, #8]
 8011232:	f7ff fbbb 	bl	80109ac <tcp_recved>
    pbuf_free(p);
 8011236:	6878      	ldr	r0, [r7, #4]
 8011238:	f7fe fe60 	bl	800fefc <pbuf_free>
 801123c:	e008      	b.n	8011250 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 801123e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d104      	bne.n	8011250 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8011246:	68b8      	ldr	r0, [r7, #8]
 8011248:	f7ff fa8c 	bl	8010764 <tcp_close>
 801124c:	4603      	mov	r3, r0
 801124e:	e000      	b.n	8011252 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8011250:	2300      	movs	r3, #0
}
 8011252:	4618      	mov	r0, r3
 8011254:	3710      	adds	r7, #16
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}
	...

0801125c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b086      	sub	sp, #24
 8011260:	af00      	add	r7, sp, #0
 8011262:	4603      	mov	r3, r0
 8011264:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801126a:	2b00      	cmp	r3, #0
 801126c:	db01      	blt.n	8011272 <tcp_kill_prio+0x16>
 801126e:	79fb      	ldrb	r3, [r7, #7]
 8011270:	e000      	b.n	8011274 <tcp_kill_prio+0x18>
 8011272:	237f      	movs	r3, #127	; 0x7f
 8011274:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8011276:	2300      	movs	r3, #0
 8011278:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801127a:	2300      	movs	r3, #0
 801127c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801127e:	4b16      	ldr	r3, [pc, #88]	; (80112d8 <tcp_kill_prio+0x7c>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	617b      	str	r3, [r7, #20]
 8011284:	e01a      	b.n	80112bc <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8011286:	697b      	ldr	r3, [r7, #20]
 8011288:	7d5b      	ldrb	r3, [r3, #21]
 801128a:	7afa      	ldrb	r2, [r7, #11]
 801128c:	429a      	cmp	r2, r3
 801128e:	d312      	bcc.n	80112b6 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011290:	4b12      	ldr	r3, [pc, #72]	; (80112dc <tcp_kill_prio+0x80>)
 8011292:	681a      	ldr	r2, [r3, #0]
 8011294:	697b      	ldr	r3, [r7, #20]
 8011296:	6a1b      	ldr	r3, [r3, #32]
 8011298:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 801129a:	68fa      	ldr	r2, [r7, #12]
 801129c:	429a      	cmp	r2, r3
 801129e:	d80a      	bhi.n	80112b6 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 80112a0:	4b0e      	ldr	r3, [pc, #56]	; (80112dc <tcp_kill_prio+0x80>)
 80112a2:	681a      	ldr	r2, [r3, #0]
 80112a4:	697b      	ldr	r3, [r7, #20]
 80112a6:	6a1b      	ldr	r3, [r3, #32]
 80112a8:	1ad3      	subs	r3, r2, r3
 80112aa:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 80112ac:	697b      	ldr	r3, [r7, #20]
 80112ae:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 80112b0:	697b      	ldr	r3, [r7, #20]
 80112b2:	7d5b      	ldrb	r3, [r3, #21]
 80112b4:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	68db      	ldr	r3, [r3, #12]
 80112ba:	617b      	str	r3, [r7, #20]
 80112bc:	697b      	ldr	r3, [r7, #20]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d1e1      	bne.n	8011286 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 80112c2:	693b      	ldr	r3, [r7, #16]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d002      	beq.n	80112ce <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80112c8:	6938      	ldr	r0, [r7, #16]
 80112ca:	f7ff fb15 	bl	80108f8 <tcp_abort>
  }
}
 80112ce:	bf00      	nop
 80112d0:	3718      	adds	r7, #24
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}
 80112d6:	bf00      	nop
 80112d8:	24024e4c 	.word	0x24024e4c
 80112dc:	24024e50 	.word	0x24024e50

080112e0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b086      	sub	sp, #24
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	4603      	mov	r3, r0
 80112e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80112ea:	79fb      	ldrb	r3, [r7, #7]
 80112ec:	2b08      	cmp	r3, #8
 80112ee:	d009      	beq.n	8011304 <tcp_kill_state+0x24>
 80112f0:	79fb      	ldrb	r3, [r7, #7]
 80112f2:	2b09      	cmp	r3, #9
 80112f4:	d006      	beq.n	8011304 <tcp_kill_state+0x24>
 80112f6:	4b1a      	ldr	r3, [pc, #104]	; (8011360 <tcp_kill_state+0x80>)
 80112f8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80112fc:	4919      	ldr	r1, [pc, #100]	; (8011364 <tcp_kill_state+0x84>)
 80112fe:	481a      	ldr	r0, [pc, #104]	; (8011368 <tcp_kill_state+0x88>)
 8011300:	f006 fb48 	bl	8017994 <iprintf>

  inactivity = 0;
 8011304:	2300      	movs	r3, #0
 8011306:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011308:	2300      	movs	r3, #0
 801130a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801130c:	4b17      	ldr	r3, [pc, #92]	; (801136c <tcp_kill_state+0x8c>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	617b      	str	r3, [r7, #20]
 8011312:	e017      	b.n	8011344 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011314:	697b      	ldr	r3, [r7, #20]
 8011316:	7d1b      	ldrb	r3, [r3, #20]
 8011318:	79fa      	ldrb	r2, [r7, #7]
 801131a:	429a      	cmp	r2, r3
 801131c:	d10f      	bne.n	801133e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801131e:	4b14      	ldr	r3, [pc, #80]	; (8011370 <tcp_kill_state+0x90>)
 8011320:	681a      	ldr	r2, [r3, #0]
 8011322:	697b      	ldr	r3, [r7, #20]
 8011324:	6a1b      	ldr	r3, [r3, #32]
 8011326:	1ad3      	subs	r3, r2, r3
 8011328:	68fa      	ldr	r2, [r7, #12]
 801132a:	429a      	cmp	r2, r3
 801132c:	d807      	bhi.n	801133e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801132e:	4b10      	ldr	r3, [pc, #64]	; (8011370 <tcp_kill_state+0x90>)
 8011330:	681a      	ldr	r2, [r3, #0]
 8011332:	697b      	ldr	r3, [r7, #20]
 8011334:	6a1b      	ldr	r3, [r3, #32]
 8011336:	1ad3      	subs	r3, r2, r3
 8011338:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801133a:	697b      	ldr	r3, [r7, #20]
 801133c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801133e:	697b      	ldr	r3, [r7, #20]
 8011340:	68db      	ldr	r3, [r3, #12]
 8011342:	617b      	str	r3, [r7, #20]
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d1e4      	bne.n	8011314 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801134a:	693b      	ldr	r3, [r7, #16]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d003      	beq.n	8011358 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011350:	2100      	movs	r1, #0
 8011352:	6938      	ldr	r0, [r7, #16]
 8011354:	f7ff fa1e 	bl	8010794 <tcp_abandon>
  }
}
 8011358:	bf00      	nop
 801135a:	3718      	adds	r7, #24
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}
 8011360:	080194fc 	.word	0x080194fc
 8011364:	0801980c 	.word	0x0801980c
 8011368:	08019538 	.word	0x08019538
 801136c:	24024e4c 	.word	0x24024e4c
 8011370:	24024e50 	.word	0x24024e50

08011374 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b084      	sub	sp, #16
 8011378:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801137a:	2300      	movs	r3, #0
 801137c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801137e:	2300      	movs	r3, #0
 8011380:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011382:	4b12      	ldr	r3, [pc, #72]	; (80113cc <tcp_kill_timewait+0x58>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	60fb      	str	r3, [r7, #12]
 8011388:	e012      	b.n	80113b0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801138a:	4b11      	ldr	r3, [pc, #68]	; (80113d0 <tcp_kill_timewait+0x5c>)
 801138c:	681a      	ldr	r2, [r3, #0]
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	6a1b      	ldr	r3, [r3, #32]
 8011392:	1ad3      	subs	r3, r2, r3
 8011394:	687a      	ldr	r2, [r7, #4]
 8011396:	429a      	cmp	r2, r3
 8011398:	d807      	bhi.n	80113aa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801139a:	4b0d      	ldr	r3, [pc, #52]	; (80113d0 <tcp_kill_timewait+0x5c>)
 801139c:	681a      	ldr	r2, [r3, #0]
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	6a1b      	ldr	r3, [r3, #32]
 80113a2:	1ad3      	subs	r3, r2, r3
 80113a4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	68db      	ldr	r3, [r3, #12]
 80113ae:	60fb      	str	r3, [r7, #12]
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d1e9      	bne.n	801138a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d002      	beq.n	80113c2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80113bc:	68b8      	ldr	r0, [r7, #8]
 80113be:	f7ff fa9b 	bl	80108f8 <tcp_abort>
  }
}
 80113c2:	bf00      	nop
 80113c4:	3710      	adds	r7, #16
 80113c6:	46bd      	mov	sp, r7
 80113c8:	bd80      	pop	{r7, pc}
 80113ca:	bf00      	nop
 80113cc:	24024e5c 	.word	0x24024e5c
 80113d0:	24024e50 	.word	0x24024e50

080113d4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b084      	sub	sp, #16
 80113d8:	af00      	add	r7, sp, #0
 80113da:	4603      	mov	r3, r0
 80113dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80113de:	2001      	movs	r0, #1
 80113e0:	f7fd ff3a 	bl	800f258 <memp_malloc>
 80113e4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d124      	bne.n	8011436 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80113ec:	f7ff ffc2 	bl	8011374 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80113f0:	2001      	movs	r0, #1
 80113f2:	f7fd ff31 	bl	800f258 <memp_malloc>
 80113f6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d11b      	bne.n	8011436 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80113fe:	2009      	movs	r0, #9
 8011400:	f7ff ff6e 	bl	80112e0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011404:	2001      	movs	r0, #1
 8011406:	f7fd ff27 	bl	800f258 <memp_malloc>
 801140a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d111      	bne.n	8011436 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011412:	2008      	movs	r0, #8
 8011414:	f7ff ff64 	bl	80112e0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011418:	2001      	movs	r0, #1
 801141a:	f7fd ff1d 	bl	800f258 <memp_malloc>
 801141e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d107      	bne.n	8011436 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011426:	79fb      	ldrb	r3, [r7, #7]
 8011428:	4618      	mov	r0, r3
 801142a:	f7ff ff17 	bl	801125c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801142e:	2001      	movs	r0, #1
 8011430:	f7fd ff12 	bl	800f258 <memp_malloc>
 8011434:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d047      	beq.n	80114cc <tcp_alloc+0xf8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801143c:	22a0      	movs	r2, #160	; 0xa0
 801143e:	2100      	movs	r1, #0
 8011440:	68f8      	ldr	r0, [r7, #12]
 8011442:	f006 fa9f 	bl	8017984 <memset>
    pcb->prio = prio;
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	79fa      	ldrb	r2, [r7, #7]
 801144a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011452:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801145c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	22ff      	movs	r2, #255	; 0xff
 801146a:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011472:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	2206      	movs	r2, #6
 8011478:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	2206      	movs	r2, #6
 8011480:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011488:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	2201      	movs	r2, #1
 801148e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011492:	4b11      	ldr	r3, [pc, #68]	; (80114d8 <tcp_alloc+0x104>)
 8011494:	681a      	ldr	r2, [r3, #0]
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801149a:	4b10      	ldr	r3, [pc, #64]	; (80114dc <tcp_alloc+0x108>)
 801149c:	781a      	ldrb	r2, [r3, #0]
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80114a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	4a0c      	ldr	r2, [pc, #48]	; (80114e0 <tcp_alloc+0x10c>)
 80114b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	4a0b      	ldr	r2, [pc, #44]	; (80114e4 <tcp_alloc+0x110>)
 80114b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	4a0a      	ldr	r2, [pc, #40]	; (80114e8 <tcp_alloc+0x114>)
 80114c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	2209      	movs	r2, #9
 80114c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80114cc:	68fb      	ldr	r3, [r7, #12]
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	3710      	adds	r7, #16
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}
 80114d6:	bf00      	nop
 80114d8:	24024e50 	.word	0x24024e50
 80114dc:	240217fe 	.word	0x240217fe
 80114e0:	08011217 	.word	0x08011217
 80114e4:	006ddd00 	.word	0x006ddd00
 80114e8:	000124f8 	.word	0x000124f8

080114ec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b082      	sub	sp, #8
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	7d1b      	ldrb	r3, [r3, #20]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d034      	beq.n	8011566 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011500:	2b0a      	cmp	r3, #10
 8011502:	d030      	beq.n	8011566 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8011508:	2b01      	cmp	r3, #1
 801150a:	d02c      	beq.n	8011566 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011510:	2b00      	cmp	r3, #0
 8011512:	d007      	beq.n	8011524 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011518:	4618      	mov	r0, r3
 801151a:	f7fe fcef 	bl	800fefc <pbuf_free>
      pcb->refused_data = NULL;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	2200      	movs	r2, #0
 8011522:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011528:	4618      	mov	r0, r3
 801152a:	f7ff fe2c 	bl	8011186 <tcp_segs_free>
    pcb->ooseq = NULL;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	2200      	movs	r2, #0
 8011532:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801153a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011540:	4618      	mov	r0, r3
 8011542:	f7ff fe20 	bl	8011186 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801154a:	4618      	mov	r0, r3
 801154c:	f7ff fe1b 	bl	8011186 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	2200      	movs	r2, #0
 8011554:	669a      	str	r2, [r3, #104]	; 0x68
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	2200      	movs	r2, #0
 8011562:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8011566:	bf00      	nop
 8011568:	3708      	adds	r7, #8
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}
	...

08011570 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011570:	b580      	push	{r7, lr}
 8011572:	b084      	sub	sp, #16
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]
 8011578:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	683a      	ldr	r2, [r7, #0]
 8011580:	429a      	cmp	r2, r3
 8011582:	d105      	bne.n	8011590 <tcp_pcb_remove+0x20>
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	68da      	ldr	r2, [r3, #12]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	601a      	str	r2, [r3, #0]
 801158e:	e013      	b.n	80115b8 <tcp_pcb_remove+0x48>
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	60fb      	str	r3, [r7, #12]
 8011596:	e00c      	b.n	80115b2 <tcp_pcb_remove+0x42>
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	68db      	ldr	r3, [r3, #12]
 801159c:	683a      	ldr	r2, [r7, #0]
 801159e:	429a      	cmp	r2, r3
 80115a0:	d104      	bne.n	80115ac <tcp_pcb_remove+0x3c>
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	68da      	ldr	r2, [r3, #12]
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	60da      	str	r2, [r3, #12]
 80115aa:	e005      	b.n	80115b8 <tcp_pcb_remove+0x48>
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	68db      	ldr	r3, [r3, #12]
 80115b0:	60fb      	str	r3, [r7, #12]
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d1ef      	bne.n	8011598 <tcp_pcb_remove+0x28>
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	2200      	movs	r2, #0
 80115bc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80115be:	6838      	ldr	r0, [r7, #0]
 80115c0:	f7ff ff94 	bl	80114ec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	7d1b      	ldrb	r3, [r3, #20]
 80115c8:	2b0a      	cmp	r3, #10
 80115ca:	d013      	beq.n	80115f4 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 80115d0:	2b01      	cmp	r3, #1
 80115d2:	d00f      	beq.n	80115f4 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	7e9b      	ldrb	r3, [r3, #26]
 80115d8:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d009      	beq.n	80115f4 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	7e9b      	ldrb	r3, [r3, #26]
 80115e4:	f043 0302 	orr.w	r3, r3, #2
 80115e8:	b2da      	uxtb	r2, r3
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80115ee:	6838      	ldr	r0, [r7, #0]
 80115f0:	f002 fd8c 	bl	801410c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	7d1b      	ldrb	r3, [r3, #20]
 80115f8:	2b01      	cmp	r3, #1
 80115fa:	d020      	beq.n	801163e <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011600:	2b00      	cmp	r3, #0
 8011602:	d006      	beq.n	8011612 <tcp_pcb_remove+0xa2>
 8011604:	4b13      	ldr	r3, [pc, #76]	; (8011654 <tcp_pcb_remove+0xe4>)
 8011606:	f240 7253 	movw	r2, #1875	; 0x753
 801160a:	4913      	ldr	r1, [pc, #76]	; (8011658 <tcp_pcb_remove+0xe8>)
 801160c:	4813      	ldr	r0, [pc, #76]	; (801165c <tcp_pcb_remove+0xec>)
 801160e:	f006 f9c1 	bl	8017994 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011616:	2b00      	cmp	r3, #0
 8011618:	d006      	beq.n	8011628 <tcp_pcb_remove+0xb8>
 801161a:	4b0e      	ldr	r3, [pc, #56]	; (8011654 <tcp_pcb_remove+0xe4>)
 801161c:	f240 7254 	movw	r2, #1876	; 0x754
 8011620:	490f      	ldr	r1, [pc, #60]	; (8011660 <tcp_pcb_remove+0xf0>)
 8011622:	480e      	ldr	r0, [pc, #56]	; (801165c <tcp_pcb_remove+0xec>)
 8011624:	f006 f9b6 	bl	8017994 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011628:	683b      	ldr	r3, [r7, #0]
 801162a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801162c:	2b00      	cmp	r3, #0
 801162e:	d006      	beq.n	801163e <tcp_pcb_remove+0xce>
 8011630:	4b08      	ldr	r3, [pc, #32]	; (8011654 <tcp_pcb_remove+0xe4>)
 8011632:	f240 7256 	movw	r2, #1878	; 0x756
 8011636:	490b      	ldr	r1, [pc, #44]	; (8011664 <tcp_pcb_remove+0xf4>)
 8011638:	4808      	ldr	r0, [pc, #32]	; (801165c <tcp_pcb_remove+0xec>)
 801163a:	f006 f9ab 	bl	8017994 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	2200      	movs	r2, #0
 8011642:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	2200      	movs	r2, #0
 8011648:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801164a:	bf00      	nop
 801164c:	3710      	adds	r7, #16
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}
 8011652:	bf00      	nop
 8011654:	080194fc 	.word	0x080194fc
 8011658:	080198b4 	.word	0x080198b4
 801165c:	08019538 	.word	0x08019538
 8011660:	080198cc 	.word	0x080198cc
 8011664:	080198e8 	.word	0x080198e8

08011668 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011668:	b480      	push	{r7}
 801166a:	b083      	sub	sp, #12
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011670:	4b07      	ldr	r3, [pc, #28]	; (8011690 <tcp_next_iss+0x28>)
 8011672:	681a      	ldr	r2, [r3, #0]
 8011674:	4b07      	ldr	r3, [pc, #28]	; (8011694 <tcp_next_iss+0x2c>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	4413      	add	r3, r2
 801167a:	4a05      	ldr	r2, [pc, #20]	; (8011690 <tcp_next_iss+0x28>)
 801167c:	6013      	str	r3, [r2, #0]
  return iss;
 801167e:	4b04      	ldr	r3, [pc, #16]	; (8011690 <tcp_next_iss+0x28>)
 8011680:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8011682:	4618      	mov	r0, r3
 8011684:	370c      	adds	r7, #12
 8011686:	46bd      	mov	sp, r7
 8011688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168c:	4770      	bx	lr
 801168e:	bf00      	nop
 8011690:	24000028 	.word	0x24000028
 8011694:	24024e50 	.word	0x24024e50

08011698 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b084      	sub	sp, #16
 801169c:	af00      	add	r7, sp, #0
 801169e:	4603      	mov	r3, r0
 80116a0:	6039      	str	r1, [r7, #0]
 80116a2:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 80116a4:	6838      	ldr	r0, [r7, #0]
 80116a6:	f004 fe8f 	bl	80163c8 <ip4_route>
 80116aa:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d101      	bne.n	80116b6 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 80116b2:	88fb      	ldrh	r3, [r7, #6]
 80116b4:	e010      	b.n	80116d8 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80116ba:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80116bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d008      	beq.n	80116d6 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80116c4:	897b      	ldrh	r3, [r7, #10]
 80116c6:	3b28      	subs	r3, #40	; 0x28
 80116c8:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80116ca:	893a      	ldrh	r2, [r7, #8]
 80116cc:	88fb      	ldrh	r3, [r7, #6]
 80116ce:	4293      	cmp	r3, r2
 80116d0:	bf28      	it	cs
 80116d2:	4613      	movcs	r3, r2
 80116d4:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 80116d6:	88fb      	ldrh	r3, [r7, #6]
}
 80116d8:	4618      	mov	r0, r3
 80116da:	3710      	adds	r7, #16
 80116dc:	46bd      	mov	sp, r7
 80116de:	bd80      	pop	{r7, pc}

080116e0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b084      	sub	sp, #16
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
 80116e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80116ee:	e011      	b.n	8011714 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	681a      	ldr	r2, [r3, #0]
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	429a      	cmp	r2, r3
 80116fa:	d108      	bne.n	801170e <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	68db      	ldr	r3, [r3, #12]
 8011700:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011702:	68f8      	ldr	r0, [r7, #12]
 8011704:	f7ff f8f8 	bl	80108f8 <tcp_abort>
      pcb = next;
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	60fb      	str	r3, [r7, #12]
 801170c:	e002      	b.n	8011714 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	68db      	ldr	r3, [r3, #12]
 8011712:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d1ea      	bne.n	80116f0 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 801171a:	bf00      	nop
 801171c:	3710      	adds	r7, #16
 801171e:	46bd      	mov	sp, r7
 8011720:	bd80      	pop	{r7, pc}
	...

08011724 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b084      	sub	sp, #16
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
 801172c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d02c      	beq.n	801178e <tcp_netif_ip_addr_changed+0x6a>
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d028      	beq.n	801178e <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801173c:	4b16      	ldr	r3, [pc, #88]	; (8011798 <tcp_netif_ip_addr_changed+0x74>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	4619      	mov	r1, r3
 8011742:	6878      	ldr	r0, [r7, #4]
 8011744:	f7ff ffcc 	bl	80116e0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011748:	4b14      	ldr	r3, [pc, #80]	; (801179c <tcp_netif_ip_addr_changed+0x78>)
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	4619      	mov	r1, r3
 801174e:	6878      	ldr	r0, [r7, #4]
 8011750:	f7ff ffc6 	bl	80116e0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011754:	683b      	ldr	r3, [r7, #0]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d019      	beq.n	801178e <tcp_netif_ip_addr_changed+0x6a>
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d015      	beq.n	801178e <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8011762:	4b0f      	ldr	r3, [pc, #60]	; (80117a0 <tcp_netif_ip_addr_changed+0x7c>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	60fb      	str	r3, [r7, #12]
 8011768:	e00e      	b.n	8011788 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	68db      	ldr	r3, [r3, #12]
 801176e:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	681a      	ldr	r2, [r3, #0]
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	429a      	cmp	r2, r3
 801177a:	d103      	bne.n	8011784 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	681a      	ldr	r2, [r3, #0]
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	60fb      	str	r3, [r7, #12]
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d1ed      	bne.n	801176a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801178e:	bf00      	nop
 8011790:	3710      	adds	r7, #16
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}
 8011796:	bf00      	nop
 8011798:	24024e4c 	.word	0x24024e4c
 801179c:	24024e58 	.word	0x24024e58
 80117a0:	24024e54 	.word	0x24024e54

080117a4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80117a4:	b590      	push	{r4, r7, lr}
 80117a6:	b08b      	sub	sp, #44	; 0x2c
 80117a8:	af02      	add	r7, sp, #8
 80117aa:	6078      	str	r0, [r7, #4]
 80117ac:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	685b      	ldr	r3, [r3, #4]
 80117b2:	4a82      	ldr	r2, [pc, #520]	; (80119bc <tcp_input+0x218>)
 80117b4:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	895b      	ldrh	r3, [r3, #10]
 80117ba:	2b13      	cmp	r3, #19
 80117bc:	f240 838a 	bls.w	8011ed4 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80117c0:	4b7f      	ldr	r3, [pc, #508]	; (80119c0 <tcp_input+0x21c>)
 80117c2:	695a      	ldr	r2, [r3, #20]
 80117c4:	4b7e      	ldr	r3, [pc, #504]	; (80119c0 <tcp_input+0x21c>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	4619      	mov	r1, r3
 80117ca:	4610      	mov	r0, r2
 80117cc:	f005 f886 	bl	80168dc <ip4_addr_isbroadcast_u32>
 80117d0:	4603      	mov	r3, r0
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	f040 8380 	bne.w	8011ed8 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80117d8:	4b79      	ldr	r3, [pc, #484]	; (80119c0 <tcp_input+0x21c>)
 80117da:	695b      	ldr	r3, [r3, #20]
 80117dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80117e0:	2be0      	cmp	r3, #224	; 0xe0
 80117e2:	f000 8379 	beq.w	8011ed8 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80117e6:	4b75      	ldr	r3, [pc, #468]	; (80119bc <tcp_input+0x218>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	899b      	ldrh	r3, [r3, #12]
 80117ec:	b29b      	uxth	r3, r3
 80117ee:	4618      	mov	r0, r3
 80117f0:	f7fd f86c 	bl	800e8cc <lwip_htons>
 80117f4:	4603      	mov	r3, r0
 80117f6:	0b1b      	lsrs	r3, r3, #12
 80117f8:	b29b      	uxth	r3, r3
 80117fa:	b2db      	uxtb	r3, r3
 80117fc:	009b      	lsls	r3, r3, #2
 80117fe:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011800:	7cbb      	ldrb	r3, [r7, #18]
 8011802:	2b13      	cmp	r3, #19
 8011804:	f240 8368 	bls.w	8011ed8 <tcp_input+0x734>
 8011808:	7cbb      	ldrb	r3, [r7, #18]
 801180a:	b29a      	uxth	r2, r3
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	891b      	ldrh	r3, [r3, #8]
 8011810:	429a      	cmp	r2, r3
 8011812:	f200 8361 	bhi.w	8011ed8 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8011816:	7cbb      	ldrb	r3, [r7, #18]
 8011818:	b29b      	uxth	r3, r3
 801181a:	3b14      	subs	r3, #20
 801181c:	b29a      	uxth	r2, r3
 801181e:	4b69      	ldr	r3, [pc, #420]	; (80119c4 <tcp_input+0x220>)
 8011820:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011822:	4b69      	ldr	r3, [pc, #420]	; (80119c8 <tcp_input+0x224>)
 8011824:	2200      	movs	r2, #0
 8011826:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	895a      	ldrh	r2, [r3, #10]
 801182c:	7cbb      	ldrb	r3, [r7, #18]
 801182e:	b29b      	uxth	r3, r3
 8011830:	429a      	cmp	r2, r3
 8011832:	d30d      	bcc.n	8011850 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011834:	4b63      	ldr	r3, [pc, #396]	; (80119c4 <tcp_input+0x220>)
 8011836:	881a      	ldrh	r2, [r3, #0]
 8011838:	4b64      	ldr	r3, [pc, #400]	; (80119cc <tcp_input+0x228>)
 801183a:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 801183c:	7cbb      	ldrb	r3, [r7, #18]
 801183e:	b29b      	uxth	r3, r3
 8011840:	425b      	negs	r3, r3
 8011842:	b29b      	uxth	r3, r3
 8011844:	b21b      	sxth	r3, r3
 8011846:	4619      	mov	r1, r3
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	f7fe fb33 	bl	800feb4 <pbuf_header>
 801184e:	e055      	b.n	80118fc <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d105      	bne.n	8011864 <tcp_input+0xc0>
 8011858:	4b5d      	ldr	r3, [pc, #372]	; (80119d0 <tcp_input+0x22c>)
 801185a:	22b2      	movs	r2, #178	; 0xb2
 801185c:	495d      	ldr	r1, [pc, #372]	; (80119d4 <tcp_input+0x230>)
 801185e:	485e      	ldr	r0, [pc, #376]	; (80119d8 <tcp_input+0x234>)
 8011860:	f006 f898 	bl	8017994 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8011864:	f06f 0113 	mvn.w	r1, #19
 8011868:	6878      	ldr	r0, [r7, #4]
 801186a:	f7fe fb23 	bl	800feb4 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	895a      	ldrh	r2, [r3, #10]
 8011872:	4b56      	ldr	r3, [pc, #344]	; (80119cc <tcp_input+0x228>)
 8011874:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8011876:	4b53      	ldr	r3, [pc, #332]	; (80119c4 <tcp_input+0x220>)
 8011878:	881a      	ldrh	r2, [r3, #0]
 801187a:	4b54      	ldr	r3, [pc, #336]	; (80119cc <tcp_input+0x228>)
 801187c:	881b      	ldrh	r3, [r3, #0]
 801187e:	1ad3      	subs	r3, r2, r3
 8011880:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8011882:	4b52      	ldr	r3, [pc, #328]	; (80119cc <tcp_input+0x228>)
 8011884:	881b      	ldrh	r3, [r3, #0]
 8011886:	425b      	negs	r3, r3
 8011888:	b29b      	uxth	r3, r3
 801188a:	b21b      	sxth	r3, r3
 801188c:	4619      	mov	r1, r3
 801188e:	6878      	ldr	r0, [r7, #4]
 8011890:	f7fe fb10 	bl	800feb4 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	895b      	ldrh	r3, [r3, #10]
 801189a:	8a3a      	ldrh	r2, [r7, #16]
 801189c:	429a      	cmp	r2, r3
 801189e:	f200 831d 	bhi.w	8011edc <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	685b      	ldr	r3, [r3, #4]
 80118a8:	4a47      	ldr	r2, [pc, #284]	; (80119c8 <tcp_input+0x224>)
 80118aa:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681a      	ldr	r2, [r3, #0]
 80118b0:	8a3b      	ldrh	r3, [r7, #16]
 80118b2:	425b      	negs	r3, r3
 80118b4:	b29b      	uxth	r3, r3
 80118b6:	b21b      	sxth	r3, r3
 80118b8:	4619      	mov	r1, r3
 80118ba:	4610      	mov	r0, r2
 80118bc:	f7fe fafa 	bl	800feb4 <pbuf_header>
    p->tot_len -= opt2len;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	891a      	ldrh	r2, [r3, #8]
 80118c4:	8a3b      	ldrh	r3, [r7, #16]
 80118c6:	1ad3      	subs	r3, r2, r3
 80118c8:	b29a      	uxth	r2, r3
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	895b      	ldrh	r3, [r3, #10]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d005      	beq.n	80118e2 <tcp_input+0x13e>
 80118d6:	4b3e      	ldr	r3, [pc, #248]	; (80119d0 <tcp_input+0x22c>)
 80118d8:	22cf      	movs	r2, #207	; 0xcf
 80118da:	4940      	ldr	r1, [pc, #256]	; (80119dc <tcp_input+0x238>)
 80118dc:	483e      	ldr	r0, [pc, #248]	; (80119d8 <tcp_input+0x234>)
 80118de:	f006 f859 	bl	8017994 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	891a      	ldrh	r2, [r3, #8]
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	891b      	ldrh	r3, [r3, #8]
 80118ec:	429a      	cmp	r2, r3
 80118ee:	d005      	beq.n	80118fc <tcp_input+0x158>
 80118f0:	4b37      	ldr	r3, [pc, #220]	; (80119d0 <tcp_input+0x22c>)
 80118f2:	22d0      	movs	r2, #208	; 0xd0
 80118f4:	493a      	ldr	r1, [pc, #232]	; (80119e0 <tcp_input+0x23c>)
 80118f6:	4838      	ldr	r0, [pc, #224]	; (80119d8 <tcp_input+0x234>)
 80118f8:	f006 f84c 	bl	8017994 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80118fc:	4b2f      	ldr	r3, [pc, #188]	; (80119bc <tcp_input+0x218>)
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	881b      	ldrh	r3, [r3, #0]
 8011902:	b29a      	uxth	r2, r3
 8011904:	4b2d      	ldr	r3, [pc, #180]	; (80119bc <tcp_input+0x218>)
 8011906:	681c      	ldr	r4, [r3, #0]
 8011908:	4610      	mov	r0, r2
 801190a:	f7fc ffdf 	bl	800e8cc <lwip_htons>
 801190e:	4603      	mov	r3, r0
 8011910:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011912:	4b2a      	ldr	r3, [pc, #168]	; (80119bc <tcp_input+0x218>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	885b      	ldrh	r3, [r3, #2]
 8011918:	b29a      	uxth	r2, r3
 801191a:	4b28      	ldr	r3, [pc, #160]	; (80119bc <tcp_input+0x218>)
 801191c:	681c      	ldr	r4, [r3, #0]
 801191e:	4610      	mov	r0, r2
 8011920:	f7fc ffd4 	bl	800e8cc <lwip_htons>
 8011924:	4603      	mov	r3, r0
 8011926:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011928:	4b24      	ldr	r3, [pc, #144]	; (80119bc <tcp_input+0x218>)
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	685a      	ldr	r2, [r3, #4]
 801192e:	4b23      	ldr	r3, [pc, #140]	; (80119bc <tcp_input+0x218>)
 8011930:	681c      	ldr	r4, [r3, #0]
 8011932:	4610      	mov	r0, r2
 8011934:	f7fc ffd8 	bl	800e8e8 <lwip_htonl>
 8011938:	4603      	mov	r3, r0
 801193a:	6063      	str	r3, [r4, #4]
 801193c:	6863      	ldr	r3, [r4, #4]
 801193e:	4a29      	ldr	r2, [pc, #164]	; (80119e4 <tcp_input+0x240>)
 8011940:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011942:	4b1e      	ldr	r3, [pc, #120]	; (80119bc <tcp_input+0x218>)
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	689a      	ldr	r2, [r3, #8]
 8011948:	4b1c      	ldr	r3, [pc, #112]	; (80119bc <tcp_input+0x218>)
 801194a:	681c      	ldr	r4, [r3, #0]
 801194c:	4610      	mov	r0, r2
 801194e:	f7fc ffcb 	bl	800e8e8 <lwip_htonl>
 8011952:	4603      	mov	r3, r0
 8011954:	60a3      	str	r3, [r4, #8]
 8011956:	68a3      	ldr	r3, [r4, #8]
 8011958:	4a23      	ldr	r2, [pc, #140]	; (80119e8 <tcp_input+0x244>)
 801195a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801195c:	4b17      	ldr	r3, [pc, #92]	; (80119bc <tcp_input+0x218>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	89db      	ldrh	r3, [r3, #14]
 8011962:	b29a      	uxth	r2, r3
 8011964:	4b15      	ldr	r3, [pc, #84]	; (80119bc <tcp_input+0x218>)
 8011966:	681c      	ldr	r4, [r3, #0]
 8011968:	4610      	mov	r0, r2
 801196a:	f7fc ffaf 	bl	800e8cc <lwip_htons>
 801196e:	4603      	mov	r3, r0
 8011970:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8011972:	4b12      	ldr	r3, [pc, #72]	; (80119bc <tcp_input+0x218>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	899b      	ldrh	r3, [r3, #12]
 8011978:	b29b      	uxth	r3, r3
 801197a:	4618      	mov	r0, r3
 801197c:	f7fc ffa6 	bl	800e8cc <lwip_htons>
 8011980:	4603      	mov	r3, r0
 8011982:	b2db      	uxtb	r3, r3
 8011984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011988:	b2da      	uxtb	r2, r3
 801198a:	4b18      	ldr	r3, [pc, #96]	; (80119ec <tcp_input+0x248>)
 801198c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	891a      	ldrh	r2, [r3, #8]
 8011992:	4b16      	ldr	r3, [pc, #88]	; (80119ec <tcp_input+0x248>)
 8011994:	781b      	ldrb	r3, [r3, #0]
 8011996:	f003 0303 	and.w	r3, r3, #3
 801199a:	2b00      	cmp	r3, #0
 801199c:	bf14      	ite	ne
 801199e:	2301      	movne	r3, #1
 80119a0:	2300      	moveq	r3, #0
 80119a2:	b2db      	uxtb	r3, r3
 80119a4:	b29b      	uxth	r3, r3
 80119a6:	4413      	add	r3, r2
 80119a8:	b29a      	uxth	r2, r3
 80119aa:	4b11      	ldr	r3, [pc, #68]	; (80119f0 <tcp_input+0x24c>)
 80119ac:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80119ae:	2300      	movs	r3, #0
 80119b0:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80119b2:	4b10      	ldr	r3, [pc, #64]	; (80119f4 <tcp_input+0x250>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	61fb      	str	r3, [r7, #28]
 80119b8:	e082      	b.n	8011ac0 <tcp_input+0x31c>
 80119ba:	bf00      	nop
 80119bc:	24021810 	.word	0x24021810
 80119c0:	24021c54 	.word	0x24021c54
 80119c4:	24021814 	.word	0x24021814
 80119c8:	24021818 	.word	0x24021818
 80119cc:	24021816 	.word	0x24021816
 80119d0:	08019900 	.word	0x08019900
 80119d4:	08019934 	.word	0x08019934
 80119d8:	08019944 	.word	0x08019944
 80119dc:	0801996c 	.word	0x0801996c
 80119e0:	08019978 	.word	0x08019978
 80119e4:	24021820 	.word	0x24021820
 80119e8:	24021824 	.word	0x24021824
 80119ec:	2402182c 	.word	0x2402182c
 80119f0:	2402182a 	.word	0x2402182a
 80119f4:	24024e4c 	.word	0x24024e4c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80119f8:	69fb      	ldr	r3, [r7, #28]
 80119fa:	7d1b      	ldrb	r3, [r3, #20]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d105      	bne.n	8011a0c <tcp_input+0x268>
 8011a00:	4b8f      	ldr	r3, [pc, #572]	; (8011c40 <tcp_input+0x49c>)
 8011a02:	22e2      	movs	r2, #226	; 0xe2
 8011a04:	498f      	ldr	r1, [pc, #572]	; (8011c44 <tcp_input+0x4a0>)
 8011a06:	4890      	ldr	r0, [pc, #576]	; (8011c48 <tcp_input+0x4a4>)
 8011a08:	f005 ffc4 	bl	8017994 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011a0c:	69fb      	ldr	r3, [r7, #28]
 8011a0e:	7d1b      	ldrb	r3, [r3, #20]
 8011a10:	2b0a      	cmp	r3, #10
 8011a12:	d105      	bne.n	8011a20 <tcp_input+0x27c>
 8011a14:	4b8a      	ldr	r3, [pc, #552]	; (8011c40 <tcp_input+0x49c>)
 8011a16:	22e3      	movs	r2, #227	; 0xe3
 8011a18:	498c      	ldr	r1, [pc, #560]	; (8011c4c <tcp_input+0x4a8>)
 8011a1a:	488b      	ldr	r0, [pc, #556]	; (8011c48 <tcp_input+0x4a4>)
 8011a1c:	f005 ffba 	bl	8017994 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011a20:	69fb      	ldr	r3, [r7, #28]
 8011a22:	7d1b      	ldrb	r3, [r3, #20]
 8011a24:	2b01      	cmp	r3, #1
 8011a26:	d105      	bne.n	8011a34 <tcp_input+0x290>
 8011a28:	4b85      	ldr	r3, [pc, #532]	; (8011c40 <tcp_input+0x49c>)
 8011a2a:	22e4      	movs	r2, #228	; 0xe4
 8011a2c:	4988      	ldr	r1, [pc, #544]	; (8011c50 <tcp_input+0x4ac>)
 8011a2e:	4886      	ldr	r0, [pc, #536]	; (8011c48 <tcp_input+0x4a4>)
 8011a30:	f005 ffb0 	bl	8017994 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8011a34:	69fb      	ldr	r3, [r7, #28]
 8011a36:	8b1a      	ldrh	r2, [r3, #24]
 8011a38:	4b86      	ldr	r3, [pc, #536]	; (8011c54 <tcp_input+0x4b0>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	881b      	ldrh	r3, [r3, #0]
 8011a3e:	b29b      	uxth	r3, r3
 8011a40:	429a      	cmp	r2, r3
 8011a42:	d138      	bne.n	8011ab6 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8011a44:	69fb      	ldr	r3, [r7, #28]
 8011a46:	8ada      	ldrh	r2, [r3, #22]
 8011a48:	4b82      	ldr	r3, [pc, #520]	; (8011c54 <tcp_input+0x4b0>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	885b      	ldrh	r3, [r3, #2]
 8011a4e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d130      	bne.n	8011ab6 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011a54:	69fb      	ldr	r3, [r7, #28]
 8011a56:	685a      	ldr	r2, [r3, #4]
 8011a58:	4b7f      	ldr	r3, [pc, #508]	; (8011c58 <tcp_input+0x4b4>)
 8011a5a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d12a      	bne.n	8011ab6 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011a60:	69fb      	ldr	r3, [r7, #28]
 8011a62:	681a      	ldr	r2, [r3, #0]
 8011a64:	4b7c      	ldr	r3, [pc, #496]	; (8011c58 <tcp_input+0x4b4>)
 8011a66:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d124      	bne.n	8011ab6 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011a6c:	69fb      	ldr	r3, [r7, #28]
 8011a6e:	68db      	ldr	r3, [r3, #12]
 8011a70:	69fa      	ldr	r2, [r7, #28]
 8011a72:	429a      	cmp	r2, r3
 8011a74:	d105      	bne.n	8011a82 <tcp_input+0x2de>
 8011a76:	4b72      	ldr	r3, [pc, #456]	; (8011c40 <tcp_input+0x49c>)
 8011a78:	22ec      	movs	r2, #236	; 0xec
 8011a7a:	4978      	ldr	r1, [pc, #480]	; (8011c5c <tcp_input+0x4b8>)
 8011a7c:	4872      	ldr	r0, [pc, #456]	; (8011c48 <tcp_input+0x4a4>)
 8011a7e:	f005 ff89 	bl	8017994 <iprintf>
      if (prev != NULL) {
 8011a82:	69bb      	ldr	r3, [r7, #24]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d00a      	beq.n	8011a9e <tcp_input+0x2fa>
        prev->next = pcb->next;
 8011a88:	69fb      	ldr	r3, [r7, #28]
 8011a8a:	68da      	ldr	r2, [r3, #12]
 8011a8c:	69bb      	ldr	r3, [r7, #24]
 8011a8e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011a90:	4b73      	ldr	r3, [pc, #460]	; (8011c60 <tcp_input+0x4bc>)
 8011a92:	681a      	ldr	r2, [r3, #0]
 8011a94:	69fb      	ldr	r3, [r7, #28]
 8011a96:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8011a98:	4a71      	ldr	r2, [pc, #452]	; (8011c60 <tcp_input+0x4bc>)
 8011a9a:	69fb      	ldr	r3, [r7, #28]
 8011a9c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011a9e:	69fb      	ldr	r3, [r7, #28]
 8011aa0:	68db      	ldr	r3, [r3, #12]
 8011aa2:	69fa      	ldr	r2, [r7, #28]
 8011aa4:	429a      	cmp	r2, r3
 8011aa6:	d10f      	bne.n	8011ac8 <tcp_input+0x324>
 8011aa8:	4b65      	ldr	r3, [pc, #404]	; (8011c40 <tcp_input+0x49c>)
 8011aaa:	22f4      	movs	r2, #244	; 0xf4
 8011aac:	496d      	ldr	r1, [pc, #436]	; (8011c64 <tcp_input+0x4c0>)
 8011aae:	4866      	ldr	r0, [pc, #408]	; (8011c48 <tcp_input+0x4a4>)
 8011ab0:	f005 ff70 	bl	8017994 <iprintf>
      break;
 8011ab4:	e008      	b.n	8011ac8 <tcp_input+0x324>
    }
    prev = pcb;
 8011ab6:	69fb      	ldr	r3, [r7, #28]
 8011ab8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011aba:	69fb      	ldr	r3, [r7, #28]
 8011abc:	68db      	ldr	r3, [r3, #12]
 8011abe:	61fb      	str	r3, [r7, #28]
 8011ac0:	69fb      	ldr	r3, [r7, #28]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d198      	bne.n	80119f8 <tcp_input+0x254>
 8011ac6:	e000      	b.n	8011aca <tcp_input+0x326>
      break;
 8011ac8:	bf00      	nop
  }

  if (pcb == NULL) {
 8011aca:	69fb      	ldr	r3, [r7, #28]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d173      	bne.n	8011bb8 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ad0:	4b65      	ldr	r3, [pc, #404]	; (8011c68 <tcp_input+0x4c4>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	61fb      	str	r3, [r7, #28]
 8011ad6:	e02f      	b.n	8011b38 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011ad8:	69fb      	ldr	r3, [r7, #28]
 8011ada:	7d1b      	ldrb	r3, [r3, #20]
 8011adc:	2b0a      	cmp	r3, #10
 8011ade:	d005      	beq.n	8011aec <tcp_input+0x348>
 8011ae0:	4b57      	ldr	r3, [pc, #348]	; (8011c40 <tcp_input+0x49c>)
 8011ae2:	22fe      	movs	r2, #254	; 0xfe
 8011ae4:	4961      	ldr	r1, [pc, #388]	; (8011c6c <tcp_input+0x4c8>)
 8011ae6:	4858      	ldr	r0, [pc, #352]	; (8011c48 <tcp_input+0x4a4>)
 8011ae8:	f005 ff54 	bl	8017994 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8011aec:	69fb      	ldr	r3, [r7, #28]
 8011aee:	8b1a      	ldrh	r2, [r3, #24]
 8011af0:	4b58      	ldr	r3, [pc, #352]	; (8011c54 <tcp_input+0x4b0>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	881b      	ldrh	r3, [r3, #0]
 8011af6:	b29b      	uxth	r3, r3
 8011af8:	429a      	cmp	r2, r3
 8011afa:	d11a      	bne.n	8011b32 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 8011afc:	69fb      	ldr	r3, [r7, #28]
 8011afe:	8ada      	ldrh	r2, [r3, #22]
 8011b00:	4b54      	ldr	r3, [pc, #336]	; (8011c54 <tcp_input+0x4b0>)
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	885b      	ldrh	r3, [r3, #2]
 8011b06:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d112      	bne.n	8011b32 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011b0c:	69fb      	ldr	r3, [r7, #28]
 8011b0e:	685a      	ldr	r2, [r3, #4]
 8011b10:	4b51      	ldr	r3, [pc, #324]	; (8011c58 <tcp_input+0x4b4>)
 8011b12:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011b14:	429a      	cmp	r2, r3
 8011b16:	d10c      	bne.n	8011b32 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011b18:	69fb      	ldr	r3, [r7, #28]
 8011b1a:	681a      	ldr	r2, [r3, #0]
 8011b1c:	4b4e      	ldr	r3, [pc, #312]	; (8011c58 <tcp_input+0x4b4>)
 8011b1e:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011b20:	429a      	cmp	r2, r3
 8011b22:	d106      	bne.n	8011b32 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8011b24:	69f8      	ldr	r0, [r7, #28]
 8011b26:	f000 fb15 	bl	8012154 <tcp_timewait_input>
        pbuf_free(p);
 8011b2a:	6878      	ldr	r0, [r7, #4]
 8011b2c:	f7fe f9e6 	bl	800fefc <pbuf_free>
        return;
 8011b30:	e1da      	b.n	8011ee8 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b32:	69fb      	ldr	r3, [r7, #28]
 8011b34:	68db      	ldr	r3, [r3, #12]
 8011b36:	61fb      	str	r3, [r7, #28]
 8011b38:	69fb      	ldr	r3, [r7, #28]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d1cc      	bne.n	8011ad8 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011b3e:	2300      	movs	r3, #0
 8011b40:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011b42:	4b4b      	ldr	r3, [pc, #300]	; (8011c70 <tcp_input+0x4cc>)
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	617b      	str	r3, [r7, #20]
 8011b48:	e019      	b.n	8011b7e <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8011b4a:	697b      	ldr	r3, [r7, #20]
 8011b4c:	8ada      	ldrh	r2, [r3, #22]
 8011b4e:	4b41      	ldr	r3, [pc, #260]	; (8011c54 <tcp_input+0x4b0>)
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	885b      	ldrh	r3, [r3, #2]
 8011b54:	b29b      	uxth	r3, r3
 8011b56:	429a      	cmp	r2, r3
 8011b58:	d10c      	bne.n	8011b74 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011b5a:	697b      	ldr	r3, [r7, #20]
 8011b5c:	681a      	ldr	r2, [r3, #0]
 8011b5e:	4b3e      	ldr	r3, [pc, #248]	; (8011c58 <tcp_input+0x4b4>)
 8011b60:	695b      	ldr	r3, [r3, #20]
 8011b62:	429a      	cmp	r2, r3
 8011b64:	d00f      	beq.n	8011b86 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011b66:	697b      	ldr	r3, [r7, #20]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d00d      	beq.n	8011b88 <tcp_input+0x3e4>
 8011b6c:	697b      	ldr	r3, [r7, #20]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d009      	beq.n	8011b88 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011b74:	697b      	ldr	r3, [r7, #20]
 8011b76:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011b78:	697b      	ldr	r3, [r7, #20]
 8011b7a:	68db      	ldr	r3, [r3, #12]
 8011b7c:	617b      	str	r3, [r7, #20]
 8011b7e:	697b      	ldr	r3, [r7, #20]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d1e2      	bne.n	8011b4a <tcp_input+0x3a6>
 8011b84:	e000      	b.n	8011b88 <tcp_input+0x3e4>
            break;
 8011b86:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011b88:	697b      	ldr	r3, [r7, #20]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d014      	beq.n	8011bb8 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011b8e:	69bb      	ldr	r3, [r7, #24]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d00a      	beq.n	8011baa <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011b94:	697b      	ldr	r3, [r7, #20]
 8011b96:	68da      	ldr	r2, [r3, #12]
 8011b98:	69bb      	ldr	r3, [r7, #24]
 8011b9a:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011b9c:	4b34      	ldr	r3, [pc, #208]	; (8011c70 <tcp_input+0x4cc>)
 8011b9e:	681a      	ldr	r2, [r3, #0]
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011ba4:	4a32      	ldr	r2, [pc, #200]	; (8011c70 <tcp_input+0x4cc>)
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8011baa:	6978      	ldr	r0, [r7, #20]
 8011bac:	f000 f9f0 	bl	8011f90 <tcp_listen_input>
      pbuf_free(p);
 8011bb0:	6878      	ldr	r0, [r7, #4]
 8011bb2:	f7fe f9a3 	bl	800fefc <pbuf_free>
      return;
 8011bb6:	e197      	b.n	8011ee8 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8011bb8:	69fb      	ldr	r3, [r7, #28]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	f000 8164 	beq.w	8011e88 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8011bc0:	4b2c      	ldr	r3, [pc, #176]	; (8011c74 <tcp_input+0x4d0>)
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	891a      	ldrh	r2, [r3, #8]
 8011bca:	4b2a      	ldr	r3, [pc, #168]	; (8011c74 <tcp_input+0x4d0>)
 8011bcc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8011bce:	4a29      	ldr	r2, [pc, #164]	; (8011c74 <tcp_input+0x4d0>)
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011bd4:	4b1f      	ldr	r3, [pc, #124]	; (8011c54 <tcp_input+0x4b0>)
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	4a26      	ldr	r2, [pc, #152]	; (8011c74 <tcp_input+0x4d0>)
 8011bda:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8011bdc:	4b26      	ldr	r3, [pc, #152]	; (8011c78 <tcp_input+0x4d4>)
 8011bde:	2200      	movs	r2, #0
 8011be0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011be2:	4b26      	ldr	r3, [pc, #152]	; (8011c7c <tcp_input+0x4d8>)
 8011be4:	2200      	movs	r2, #0
 8011be6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011be8:	4b25      	ldr	r3, [pc, #148]	; (8011c80 <tcp_input+0x4dc>)
 8011bea:	2200      	movs	r2, #0
 8011bec:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8011bee:	4b25      	ldr	r3, [pc, #148]	; (8011c84 <tcp_input+0x4e0>)
 8011bf0:	781b      	ldrb	r3, [r3, #0]
 8011bf2:	f003 0308 	and.w	r3, r3, #8
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d006      	beq.n	8011c08 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	7b5b      	ldrb	r3, [r3, #13]
 8011bfe:	f043 0301 	orr.w	r3, r3, #1
 8011c02:	b2da      	uxtb	r2, r3
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011c08:	69fb      	ldr	r3, [r7, #28]
 8011c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d03d      	beq.n	8011c8c <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011c10:	69f8      	ldr	r0, [r7, #28]
 8011c12:	f7ff fa4f 	bl	80110b4 <tcp_process_refused_data>
 8011c16:	4603      	mov	r3, r0
 8011c18:	f113 0f0d 	cmn.w	r3, #13
 8011c1c:	d007      	beq.n	8011c2e <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011c1e:	69fb      	ldr	r3, [r7, #28]
 8011c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d032      	beq.n	8011c8c <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011c26:	4b18      	ldr	r3, [pc, #96]	; (8011c88 <tcp_input+0x4e4>)
 8011c28:	881b      	ldrh	r3, [r3, #0]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d02e      	beq.n	8011c8c <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011c2e:	69fb      	ldr	r3, [r7, #28]
 8011c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	f040 8108 	bne.w	8011e48 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011c38:	69f8      	ldr	r0, [r7, #28]
 8011c3a:	f002 fa0b 	bl	8014054 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011c3e:	e103      	b.n	8011e48 <tcp_input+0x6a4>
 8011c40:	08019900 	.word	0x08019900
 8011c44:	08019998 	.word	0x08019998
 8011c48:	08019944 	.word	0x08019944
 8011c4c:	080199c0 	.word	0x080199c0
 8011c50:	080199ec 	.word	0x080199ec
 8011c54:	24021810 	.word	0x24021810
 8011c58:	24021c54 	.word	0x24021c54
 8011c5c:	08019a14 	.word	0x08019a14
 8011c60:	24024e4c 	.word	0x24024e4c
 8011c64:	08019a40 	.word	0x08019a40
 8011c68:	24024e5c 	.word	0x24024e5c
 8011c6c:	08019a6c 	.word	0x08019a6c
 8011c70:	24024e54 	.word	0x24024e54
 8011c74:	24021800 	.word	0x24021800
 8011c78:	24021830 	.word	0x24021830
 8011c7c:	2402182d 	.word	0x2402182d
 8011c80:	24021828 	.word	0x24021828
 8011c84:	2402182c 	.word	0x2402182c
 8011c88:	2402182a 	.word	0x2402182a
      }
    }
    tcp_input_pcb = pcb;
 8011c8c:	4a98      	ldr	r2, [pc, #608]	; (8011ef0 <tcp_input+0x74c>)
 8011c8e:	69fb      	ldr	r3, [r7, #28]
 8011c90:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011c92:	69f8      	ldr	r0, [r7, #28]
 8011c94:	f000 fac6 	bl	8012224 <tcp_process>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011c9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011ca0:	f113 0f0d 	cmn.w	r3, #13
 8011ca4:	f000 80d2 	beq.w	8011e4c <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8011ca8:	4b92      	ldr	r3, [pc, #584]	; (8011ef4 <tcp_input+0x750>)
 8011caa:	781b      	ldrb	r3, [r3, #0]
 8011cac:	f003 0308 	and.w	r3, r3, #8
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d016      	beq.n	8011ce2 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011cb4:	69fb      	ldr	r3, [r7, #28]
 8011cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d008      	beq.n	8011cd0 <tcp_input+0x52c>
 8011cbe:	69fb      	ldr	r3, [r7, #28]
 8011cc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011cc4:	69fa      	ldr	r2, [r7, #28]
 8011cc6:	6912      	ldr	r2, [r2, #16]
 8011cc8:	f06f 010d 	mvn.w	r1, #13
 8011ccc:	4610      	mov	r0, r2
 8011cce:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011cd0:	69f9      	ldr	r1, [r7, #28]
 8011cd2:	4889      	ldr	r0, [pc, #548]	; (8011ef8 <tcp_input+0x754>)
 8011cd4:	f7ff fc4c 	bl	8011570 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8011cd8:	69f9      	ldr	r1, [r7, #28]
 8011cda:	2001      	movs	r0, #1
 8011cdc:	f7fd fb32 	bl	800f344 <memp_free>
 8011ce0:	e0bf      	b.n	8011e62 <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011ce6:	4b85      	ldr	r3, [pc, #532]	; (8011efc <tcp_input+0x758>)
 8011ce8:	881b      	ldrh	r3, [r3, #0]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d01b      	beq.n	8011d26 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011cee:	4b83      	ldr	r3, [pc, #524]	; (8011efc <tcp_input+0x758>)
 8011cf0:	881b      	ldrh	r3, [r3, #0]
 8011cf2:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011cf4:	69fb      	ldr	r3, [r7, #28]
 8011cf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d009      	beq.n	8011d10 <tcp_input+0x56c>
 8011cfc:	69fb      	ldr	r3, [r7, #28]
 8011cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d00:	69fa      	ldr	r2, [r7, #28]
 8011d02:	6910      	ldr	r0, [r2, #16]
 8011d04:	89fa      	ldrh	r2, [r7, #14]
 8011d06:	69f9      	ldr	r1, [r7, #28]
 8011d08:	4798      	blx	r3
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	74fb      	strb	r3, [r7, #19]
 8011d0e:	e001      	b.n	8011d14 <tcp_input+0x570>
 8011d10:	2300      	movs	r3, #0
 8011d12:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011d14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011d18:	f113 0f0d 	cmn.w	r3, #13
 8011d1c:	f000 8098 	beq.w	8011e50 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011d20:	4b76      	ldr	r3, [pc, #472]	; (8011efc <tcp_input+0x758>)
 8011d22:	2200      	movs	r2, #0
 8011d24:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011d26:	69f8      	ldr	r0, [r7, #28]
 8011d28:	f000 f900 	bl	8011f2c <tcp_input_delayed_close>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	f040 8090 	bne.w	8011e54 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011d34:	4b72      	ldr	r3, [pc, #456]	; (8011f00 <tcp_input+0x75c>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d041      	beq.n	8011dc0 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011d3c:	69fb      	ldr	r3, [r7, #28]
 8011d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d006      	beq.n	8011d52 <tcp_input+0x5ae>
 8011d44:	4b6f      	ldr	r3, [pc, #444]	; (8011f04 <tcp_input+0x760>)
 8011d46:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8011d4a:	496f      	ldr	r1, [pc, #444]	; (8011f08 <tcp_input+0x764>)
 8011d4c:	486f      	ldr	r0, [pc, #444]	; (8011f0c <tcp_input+0x768>)
 8011d4e:	f005 fe21 	bl	8017994 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011d52:	69fb      	ldr	r3, [r7, #28]
 8011d54:	7e9b      	ldrb	r3, [r3, #26]
 8011d56:	f003 0310 	and.w	r3, r3, #16
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d008      	beq.n	8011d70 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011d5e:	4b68      	ldr	r3, [pc, #416]	; (8011f00 <tcp_input+0x75c>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7fe f8ca 	bl	800fefc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8011d68:	69f8      	ldr	r0, [r7, #28]
 8011d6a:	f7fe fdc5 	bl	80108f8 <tcp_abort>
            goto aborted;
 8011d6e:	e078      	b.n	8011e62 <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011d70:	69fb      	ldr	r3, [r7, #28]
 8011d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d00c      	beq.n	8011d94 <tcp_input+0x5f0>
 8011d7a:	69fb      	ldr	r3, [r7, #28]
 8011d7c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8011d80:	69fb      	ldr	r3, [r7, #28]
 8011d82:	6918      	ldr	r0, [r3, #16]
 8011d84:	4b5e      	ldr	r3, [pc, #376]	; (8011f00 <tcp_input+0x75c>)
 8011d86:	681a      	ldr	r2, [r3, #0]
 8011d88:	2300      	movs	r3, #0
 8011d8a:	69f9      	ldr	r1, [r7, #28]
 8011d8c:	47a0      	blx	r4
 8011d8e:	4603      	mov	r3, r0
 8011d90:	74fb      	strb	r3, [r7, #19]
 8011d92:	e008      	b.n	8011da6 <tcp_input+0x602>
 8011d94:	4b5a      	ldr	r3, [pc, #360]	; (8011f00 <tcp_input+0x75c>)
 8011d96:	681a      	ldr	r2, [r3, #0]
 8011d98:	2300      	movs	r3, #0
 8011d9a:	69f9      	ldr	r1, [r7, #28]
 8011d9c:	2000      	movs	r0, #0
 8011d9e:	f7ff fa3a 	bl	8011216 <tcp_recv_null>
 8011da2:	4603      	mov	r3, r0
 8011da4:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011da6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011daa:	f113 0f0d 	cmn.w	r3, #13
 8011dae:	d053      	beq.n	8011e58 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011db0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d003      	beq.n	8011dc0 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011db8:	4b51      	ldr	r3, [pc, #324]	; (8011f00 <tcp_input+0x75c>)
 8011dba:	681a      	ldr	r2, [r3, #0]
 8011dbc:	69fb      	ldr	r3, [r7, #28]
 8011dbe:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011dc0:	4b4c      	ldr	r3, [pc, #304]	; (8011ef4 <tcp_input+0x750>)
 8011dc2:	781b      	ldrb	r3, [r3, #0]
 8011dc4:	f003 0320 	and.w	r3, r3, #32
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d030      	beq.n	8011e2e <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8011dcc:	69fb      	ldr	r3, [r7, #28]
 8011dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d009      	beq.n	8011de8 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011dd4:	69fb      	ldr	r3, [r7, #28]
 8011dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011dd8:	7b5a      	ldrb	r2, [r3, #13]
 8011dda:	69fb      	ldr	r3, [r7, #28]
 8011ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011dde:	f042 0220 	orr.w	r2, r2, #32
 8011de2:	b2d2      	uxtb	r2, r2
 8011de4:	735a      	strb	r2, [r3, #13]
 8011de6:	e022      	b.n	8011e2e <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011de8:	69fb      	ldr	r3, [r7, #28]
 8011dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011dec:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011df0:	d005      	beq.n	8011dfe <tcp_input+0x65a>
              pcb->rcv_wnd++;
 8011df2:	69fb      	ldr	r3, [r7, #28]
 8011df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011df6:	3301      	adds	r3, #1
 8011df8:	b29a      	uxth	r2, r3
 8011dfa:	69fb      	ldr	r3, [r7, #28]
 8011dfc:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011dfe:	69fb      	ldr	r3, [r7, #28]
 8011e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d00b      	beq.n	8011e20 <tcp_input+0x67c>
 8011e08:	69fb      	ldr	r3, [r7, #28]
 8011e0a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8011e0e:	69fb      	ldr	r3, [r7, #28]
 8011e10:	6918      	ldr	r0, [r3, #16]
 8011e12:	2300      	movs	r3, #0
 8011e14:	2200      	movs	r2, #0
 8011e16:	69f9      	ldr	r1, [r7, #28]
 8011e18:	47a0      	blx	r4
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	74fb      	strb	r3, [r7, #19]
 8011e1e:	e001      	b.n	8011e24 <tcp_input+0x680>
 8011e20:	2300      	movs	r3, #0
 8011e22:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011e24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011e28:	f113 0f0d 	cmn.w	r3, #13
 8011e2c:	d016      	beq.n	8011e5c <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011e2e:	4b30      	ldr	r3, [pc, #192]	; (8011ef0 <tcp_input+0x74c>)
 8011e30:	2200      	movs	r2, #0
 8011e32:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011e34:	69f8      	ldr	r0, [r7, #28]
 8011e36:	f000 f879 	bl	8011f2c <tcp_input_delayed_close>
 8011e3a:	4603      	mov	r3, r0
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d10f      	bne.n	8011e60 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011e40:	69f8      	ldr	r0, [r7, #28]
 8011e42:	f002 f963 	bl	801410c <tcp_output>
 8011e46:	e00c      	b.n	8011e62 <tcp_input+0x6be>
        goto aborted;
 8011e48:	bf00      	nop
 8011e4a:	e00a      	b.n	8011e62 <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011e4c:	bf00      	nop
 8011e4e:	e008      	b.n	8011e62 <tcp_input+0x6be>
              goto aborted;
 8011e50:	bf00      	nop
 8011e52:	e006      	b.n	8011e62 <tcp_input+0x6be>
          goto aborted;
 8011e54:	bf00      	nop
 8011e56:	e004      	b.n	8011e62 <tcp_input+0x6be>
            goto aborted;
 8011e58:	bf00      	nop
 8011e5a:	e002      	b.n	8011e62 <tcp_input+0x6be>
              goto aborted;
 8011e5c:	bf00      	nop
 8011e5e:	e000      	b.n	8011e62 <tcp_input+0x6be>
          goto aborted;
 8011e60:	bf00      	nop
    tcp_input_pcb = NULL;
 8011e62:	4b23      	ldr	r3, [pc, #140]	; (8011ef0 <tcp_input+0x74c>)
 8011e64:	2200      	movs	r2, #0
 8011e66:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011e68:	4b25      	ldr	r3, [pc, #148]	; (8011f00 <tcp_input+0x75c>)
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8011e6e:	4b28      	ldr	r3, [pc, #160]	; (8011f10 <tcp_input+0x76c>)
 8011e70:	685b      	ldr	r3, [r3, #4]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d037      	beq.n	8011ee6 <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 8011e76:	4b26      	ldr	r3, [pc, #152]	; (8011f10 <tcp_input+0x76c>)
 8011e78:	685b      	ldr	r3, [r3, #4]
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f7fe f83e 	bl	800fefc <pbuf_free>
      inseg.p = NULL;
 8011e80:	4b23      	ldr	r3, [pc, #140]	; (8011f10 <tcp_input+0x76c>)
 8011e82:	2200      	movs	r2, #0
 8011e84:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011e86:	e02e      	b.n	8011ee6 <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011e88:	4b22      	ldr	r3, [pc, #136]	; (8011f14 <tcp_input+0x770>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	899b      	ldrh	r3, [r3, #12]
 8011e8e:	b29b      	uxth	r3, r3
 8011e90:	4618      	mov	r0, r3
 8011e92:	f7fc fd1b 	bl	800e8cc <lwip_htons>
 8011e96:	4603      	mov	r3, r0
 8011e98:	f003 0304 	and.w	r3, r3, #4
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d115      	bne.n	8011ecc <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ea0:	4b1d      	ldr	r3, [pc, #116]	; (8011f18 <tcp_input+0x774>)
 8011ea2:	6818      	ldr	r0, [r3, #0]
 8011ea4:	4b1d      	ldr	r3, [pc, #116]	; (8011f1c <tcp_input+0x778>)
 8011ea6:	881b      	ldrh	r3, [r3, #0]
 8011ea8:	461a      	mov	r2, r3
 8011eaa:	4b1d      	ldr	r3, [pc, #116]	; (8011f20 <tcp_input+0x77c>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011eb0:	4b18      	ldr	r3, [pc, #96]	; (8011f14 <tcp_input+0x770>)
 8011eb2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011eb4:	885b      	ldrh	r3, [r3, #2]
 8011eb6:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011eb8:	4a16      	ldr	r2, [pc, #88]	; (8011f14 <tcp_input+0x770>)
 8011eba:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ebc:	8812      	ldrh	r2, [r2, #0]
 8011ebe:	b292      	uxth	r2, r2
 8011ec0:	9201      	str	r2, [sp, #4]
 8011ec2:	9300      	str	r3, [sp, #0]
 8011ec4:	4b17      	ldr	r3, [pc, #92]	; (8011f24 <tcp_input+0x780>)
 8011ec6:	4a18      	ldr	r2, [pc, #96]	; (8011f28 <tcp_input+0x784>)
 8011ec8:	f002 fbaa 	bl	8014620 <tcp_rst>
    pbuf_free(p);
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f7fe f815 	bl	800fefc <pbuf_free>
  return;
 8011ed2:	e008      	b.n	8011ee6 <tcp_input+0x742>
    goto dropped;
 8011ed4:	bf00      	nop
 8011ed6:	e002      	b.n	8011ede <tcp_input+0x73a>
dropped:
 8011ed8:	bf00      	nop
 8011eda:	e000      	b.n	8011ede <tcp_input+0x73a>
      goto dropped;
 8011edc:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011ede:	6878      	ldr	r0, [r7, #4]
 8011ee0:	f7fe f80c 	bl	800fefc <pbuf_free>
 8011ee4:	e000      	b.n	8011ee8 <tcp_input+0x744>
  return;
 8011ee6:	bf00      	nop
}
 8011ee8:	3724      	adds	r7, #36	; 0x24
 8011eea:	46bd      	mov	sp, r7
 8011eec:	bd90      	pop	{r4, r7, pc}
 8011eee:	bf00      	nop
 8011ef0:	24024e60 	.word	0x24024e60
 8011ef4:	2402182d 	.word	0x2402182d
 8011ef8:	24024e4c 	.word	0x24024e4c
 8011efc:	24021828 	.word	0x24021828
 8011f00:	24021830 	.word	0x24021830
 8011f04:	08019900 	.word	0x08019900
 8011f08:	08019a9c 	.word	0x08019a9c
 8011f0c:	08019944 	.word	0x08019944
 8011f10:	24021800 	.word	0x24021800
 8011f14:	24021810 	.word	0x24021810
 8011f18:	24021824 	.word	0x24021824
 8011f1c:	2402182a 	.word	0x2402182a
 8011f20:	24021820 	.word	0x24021820
 8011f24:	24021c64 	.word	0x24021c64
 8011f28:	24021c68 	.word	0x24021c68

08011f2c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b082      	sub	sp, #8
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8011f34:	4b14      	ldr	r3, [pc, #80]	; (8011f88 <tcp_input_delayed_close+0x5c>)
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	f003 0310 	and.w	r3, r3, #16
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d01d      	beq.n	8011f7c <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	7e9b      	ldrb	r3, [r3, #26]
 8011f44:	f003 0310 	and.w	r3, r3, #16
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d10d      	bne.n	8011f68 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d008      	beq.n	8011f68 <tcp_input_delayed_close+0x3c>
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f5c:	687a      	ldr	r2, [r7, #4]
 8011f5e:	6912      	ldr	r2, [r2, #16]
 8011f60:	f06f 010e 	mvn.w	r1, #14
 8011f64:	4610      	mov	r0, r2
 8011f66:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011f68:	6879      	ldr	r1, [r7, #4]
 8011f6a:	4808      	ldr	r0, [pc, #32]	; (8011f8c <tcp_input_delayed_close+0x60>)
 8011f6c:	f7ff fb00 	bl	8011570 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8011f70:	6879      	ldr	r1, [r7, #4]
 8011f72:	2001      	movs	r0, #1
 8011f74:	f7fd f9e6 	bl	800f344 <memp_free>
    return 1;
 8011f78:	2301      	movs	r3, #1
 8011f7a:	e000      	b.n	8011f7e <tcp_input_delayed_close+0x52>
  }
  return 0;
 8011f7c:	2300      	movs	r3, #0
}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	3708      	adds	r7, #8
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd80      	pop	{r7, pc}
 8011f86:	bf00      	nop
 8011f88:	2402182d 	.word	0x2402182d
 8011f8c:	24024e4c 	.word	0x24024e4c

08011f90 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b088      	sub	sp, #32
 8011f94:	af02      	add	r7, sp, #8
 8011f96:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011f98:	4b64      	ldr	r3, [pc, #400]	; (801212c <tcp_listen_input+0x19c>)
 8011f9a:	781b      	ldrb	r3, [r3, #0]
 8011f9c:	f003 0304 	and.w	r3, r3, #4
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	f040 80bc 	bne.w	801211e <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011fa6:	4b61      	ldr	r3, [pc, #388]	; (801212c <tcp_listen_input+0x19c>)
 8011fa8:	781b      	ldrb	r3, [r3, #0]
 8011faa:	f003 0310 	and.w	r3, r3, #16
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d016      	beq.n	8011fe0 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011fb2:	4b5f      	ldr	r3, [pc, #380]	; (8012130 <tcp_listen_input+0x1a0>)
 8011fb4:	6818      	ldr	r0, [r3, #0]
 8011fb6:	4b5f      	ldr	r3, [pc, #380]	; (8012134 <tcp_listen_input+0x1a4>)
 8011fb8:	881b      	ldrh	r3, [r3, #0]
 8011fba:	461a      	mov	r2, r3
 8011fbc:	4b5e      	ldr	r3, [pc, #376]	; (8012138 <tcp_listen_input+0x1a8>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011fc2:	4b5e      	ldr	r3, [pc, #376]	; (801213c <tcp_listen_input+0x1ac>)
 8011fc4:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011fc6:	885b      	ldrh	r3, [r3, #2]
 8011fc8:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011fca:	4a5c      	ldr	r2, [pc, #368]	; (801213c <tcp_listen_input+0x1ac>)
 8011fcc:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011fce:	8812      	ldrh	r2, [r2, #0]
 8011fd0:	b292      	uxth	r2, r2
 8011fd2:	9201      	str	r2, [sp, #4]
 8011fd4:	9300      	str	r3, [sp, #0]
 8011fd6:	4b5a      	ldr	r3, [pc, #360]	; (8012140 <tcp_listen_input+0x1b0>)
 8011fd8:	4a5a      	ldr	r2, [pc, #360]	; (8012144 <tcp_listen_input+0x1b4>)
 8011fda:	f002 fb21 	bl	8014620 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011fde:	e0a0      	b.n	8012122 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 8011fe0:	4b52      	ldr	r3, [pc, #328]	; (801212c <tcp_listen_input+0x19c>)
 8011fe2:	781b      	ldrb	r3, [r3, #0]
 8011fe4:	f003 0302 	and.w	r3, r3, #2
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	f000 809a 	beq.w	8012122 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	7d5b      	ldrb	r3, [r3, #21]
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f7ff f9ee 	bl	80113d4 <tcp_alloc>
 8011ff8:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011ffa:	697b      	ldr	r3, [r7, #20]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d111      	bne.n	8012024 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	699b      	ldr	r3, [r3, #24]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d00a      	beq.n	801201e <tcp_listen_input+0x8e>
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	699b      	ldr	r3, [r3, #24]
 801200c:	687a      	ldr	r2, [r7, #4]
 801200e:	6910      	ldr	r0, [r2, #16]
 8012010:	f04f 32ff 	mov.w	r2, #4294967295
 8012014:	2100      	movs	r1, #0
 8012016:	4798      	blx	r3
 8012018:	4603      	mov	r3, r0
 801201a:	73bb      	strb	r3, [r7, #14]
      return;
 801201c:	e082      	b.n	8012124 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801201e:	23f0      	movs	r3, #240	; 0xf0
 8012020:	73bb      	strb	r3, [r7, #14]
      return;
 8012022:	e07f      	b.n	8012124 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012024:	4b48      	ldr	r3, [pc, #288]	; (8012148 <tcp_listen_input+0x1b8>)
 8012026:	695a      	ldr	r2, [r3, #20]
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801202c:	4b46      	ldr	r3, [pc, #280]	; (8012148 <tcp_listen_input+0x1b8>)
 801202e:	691a      	ldr	r2, [r3, #16]
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	8ada      	ldrh	r2, [r3, #22]
 8012038:	697b      	ldr	r3, [r7, #20]
 801203a:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801203c:	4b3f      	ldr	r3, [pc, #252]	; (801213c <tcp_listen_input+0x1ac>)
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	881b      	ldrh	r3, [r3, #0]
 8012042:	b29a      	uxth	r2, r3
 8012044:	697b      	ldr	r3, [r7, #20]
 8012046:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	2203      	movs	r2, #3
 801204c:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801204e:	4b3a      	ldr	r3, [pc, #232]	; (8012138 <tcp_listen_input+0x1a8>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	1c5a      	adds	r2, r3, #1
 8012054:	697b      	ldr	r3, [r7, #20]
 8012056:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012058:	697b      	ldr	r3, [r7, #20]
 801205a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801205c:	697b      	ldr	r3, [r7, #20]
 801205e:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8012060:	6978      	ldr	r0, [r7, #20]
 8012062:	f7ff fb01 	bl	8011668 <tcp_next_iss>
 8012066:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012068:	697b      	ldr	r3, [r7, #20]
 801206a:	693a      	ldr	r2, [r7, #16]
 801206c:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 801206e:	697b      	ldr	r3, [r7, #20]
 8012070:	693a      	ldr	r2, [r7, #16]
 8012072:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8012074:	697b      	ldr	r3, [r7, #20]
 8012076:	693a      	ldr	r2, [r7, #16]
 8012078:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801207a:	697b      	ldr	r3, [r7, #20]
 801207c:	693a      	ldr	r2, [r7, #16]
 801207e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012080:	4b2d      	ldr	r3, [pc, #180]	; (8012138 <tcp_listen_input+0x1a8>)
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	1e5a      	subs	r2, r3, #1
 8012086:	697b      	ldr	r3, [r7, #20]
 8012088:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	691a      	ldr	r2, [r3, #16]
 801208e:	697b      	ldr	r3, [r7, #20]
 8012090:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	687a      	ldr	r2, [r7, #4]
 8012096:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	7a1b      	ldrb	r3, [r3, #8]
 801209c:	f003 030c 	and.w	r3, r3, #12
 80120a0:	b2da      	uxtb	r2, r3
 80120a2:	697b      	ldr	r3, [r7, #20]
 80120a4:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80120a6:	4b29      	ldr	r3, [pc, #164]	; (801214c <tcp_listen_input+0x1bc>)
 80120a8:	681a      	ldr	r2, [r3, #0]
 80120aa:	697b      	ldr	r3, [r7, #20]
 80120ac:	60da      	str	r2, [r3, #12]
 80120ae:	4a27      	ldr	r2, [pc, #156]	; (801214c <tcp_listen_input+0x1bc>)
 80120b0:	697b      	ldr	r3, [r7, #20]
 80120b2:	6013      	str	r3, [r2, #0]
 80120b4:	f002 fd06 	bl	8014ac4 <tcp_timer_needed>
 80120b8:	4b25      	ldr	r3, [pc, #148]	; (8012150 <tcp_listen_input+0x1c0>)
 80120ba:	2201      	movs	r2, #1
 80120bc:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80120be:	6978      	ldr	r0, [r7, #20]
 80120c0:	f001 fd14 	bl	8013aec <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80120c4:	4b1d      	ldr	r3, [pc, #116]	; (801213c <tcp_listen_input+0x1ac>)
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	89db      	ldrh	r3, [r3, #14]
 80120ca:	b29a      	uxth	r2, r3
 80120cc:	697b      	ldr	r3, [r7, #20]
 80120ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80120d8:	697b      	ldr	r3, [r7, #20]
 80120da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80120de:	697b      	ldr	r3, [r7, #20]
 80120e0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80120e2:	697b      	ldr	r3, [r7, #20]
 80120e4:	3304      	adds	r3, #4
 80120e6:	4619      	mov	r1, r3
 80120e8:	4610      	mov	r0, r2
 80120ea:	f7ff fad5 	bl	8011698 <tcp_eff_send_mss_impl>
 80120ee:	4603      	mov	r3, r0
 80120f0:	461a      	mov	r2, r3
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80120f6:	2112      	movs	r1, #18
 80120f8:	6978      	ldr	r0, [r7, #20]
 80120fa:	f001 feaf 	bl	8013e5c <tcp_enqueue_flags>
 80120fe:	4603      	mov	r3, r0
 8012100:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d004      	beq.n	8012114 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 801210a:	2100      	movs	r1, #0
 801210c:	6978      	ldr	r0, [r7, #20]
 801210e:	f7fe fb41 	bl	8010794 <tcp_abandon>
      return;
 8012112:	e007      	b.n	8012124 <tcp_listen_input+0x194>
    tcp_output(npcb);
 8012114:	6978      	ldr	r0, [r7, #20]
 8012116:	f001 fff9 	bl	801410c <tcp_output>
  return;
 801211a:	bf00      	nop
 801211c:	e001      	b.n	8012122 <tcp_listen_input+0x192>
    return;
 801211e:	bf00      	nop
 8012120:	e000      	b.n	8012124 <tcp_listen_input+0x194>
  return;
 8012122:	bf00      	nop
}
 8012124:	3718      	adds	r7, #24
 8012126:	46bd      	mov	sp, r7
 8012128:	bd80      	pop	{r7, pc}
 801212a:	bf00      	nop
 801212c:	2402182c 	.word	0x2402182c
 8012130:	24021824 	.word	0x24021824
 8012134:	2402182a 	.word	0x2402182a
 8012138:	24021820 	.word	0x24021820
 801213c:	24021810 	.word	0x24021810
 8012140:	24021c64 	.word	0x24021c64
 8012144:	24021c68 	.word	0x24021c68
 8012148:	24021c54 	.word	0x24021c54
 801214c:	24024e4c 	.word	0x24024e4c
 8012150:	24024e48 	.word	0x24024e48

08012154 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b084      	sub	sp, #16
 8012158:	af02      	add	r7, sp, #8
 801215a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801215c:	4b29      	ldr	r3, [pc, #164]	; (8012204 <tcp_timewait_input+0xb0>)
 801215e:	781b      	ldrb	r3, [r3, #0]
 8012160:	f003 0304 	and.w	r3, r3, #4
 8012164:	2b00      	cmp	r3, #0
 8012166:	d147      	bne.n	80121f8 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012168:	4b26      	ldr	r3, [pc, #152]	; (8012204 <tcp_timewait_input+0xb0>)
 801216a:	781b      	ldrb	r3, [r3, #0]
 801216c:	f003 0302 	and.w	r3, r3, #2
 8012170:	2b00      	cmp	r3, #0
 8012172:	d027      	beq.n	80121c4 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012174:	4b24      	ldr	r3, [pc, #144]	; (8012208 <tcp_timewait_input+0xb4>)
 8012176:	681a      	ldr	r2, [r3, #0]
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801217c:	1ad3      	subs	r3, r2, r3
 801217e:	2b00      	cmp	r3, #0
 8012180:	db2a      	blt.n	80121d8 <tcp_timewait_input+0x84>
 8012182:	4b21      	ldr	r3, [pc, #132]	; (8012208 <tcp_timewait_input+0xb4>)
 8012184:	681a      	ldr	r2, [r3, #0]
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801218a:	6879      	ldr	r1, [r7, #4]
 801218c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801218e:	440b      	add	r3, r1
 8012190:	1ad3      	subs	r3, r2, r3
 8012192:	2b00      	cmp	r3, #0
 8012194:	dc20      	bgt.n	80121d8 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012196:	4b1d      	ldr	r3, [pc, #116]	; (801220c <tcp_timewait_input+0xb8>)
 8012198:	6818      	ldr	r0, [r3, #0]
 801219a:	4b1d      	ldr	r3, [pc, #116]	; (8012210 <tcp_timewait_input+0xbc>)
 801219c:	881b      	ldrh	r3, [r3, #0]
 801219e:	461a      	mov	r2, r3
 80121a0:	4b19      	ldr	r3, [pc, #100]	; (8012208 <tcp_timewait_input+0xb4>)
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80121a6:	4b1b      	ldr	r3, [pc, #108]	; (8012214 <tcp_timewait_input+0xc0>)
 80121a8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80121aa:	885b      	ldrh	r3, [r3, #2]
 80121ac:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80121ae:	4a19      	ldr	r2, [pc, #100]	; (8012214 <tcp_timewait_input+0xc0>)
 80121b0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80121b2:	8812      	ldrh	r2, [r2, #0]
 80121b4:	b292      	uxth	r2, r2
 80121b6:	9201      	str	r2, [sp, #4]
 80121b8:	9300      	str	r3, [sp, #0]
 80121ba:	4b17      	ldr	r3, [pc, #92]	; (8012218 <tcp_timewait_input+0xc4>)
 80121bc:	4a17      	ldr	r2, [pc, #92]	; (801221c <tcp_timewait_input+0xc8>)
 80121be:	f002 fa2f 	bl	8014620 <tcp_rst>
      return;
 80121c2:	e01c      	b.n	80121fe <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 80121c4:	4b0f      	ldr	r3, [pc, #60]	; (8012204 <tcp_timewait_input+0xb0>)
 80121c6:	781b      	ldrb	r3, [r3, #0]
 80121c8:	f003 0301 	and.w	r3, r3, #1
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d003      	beq.n	80121d8 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80121d0:	4b13      	ldr	r3, [pc, #76]	; (8012220 <tcp_timewait_input+0xcc>)
 80121d2:	681a      	ldr	r2, [r3, #0]
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80121d8:	4b0d      	ldr	r3, [pc, #52]	; (8012210 <tcp_timewait_input+0xbc>)
 80121da:	881b      	ldrh	r3, [r3, #0]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d00d      	beq.n	80121fc <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	7e9b      	ldrb	r3, [r3, #26]
 80121e4:	f043 0302 	orr.w	r3, r3, #2
 80121e8:	b2da      	uxtb	r2, r3
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80121ee:	6878      	ldr	r0, [r7, #4]
 80121f0:	f001 ff8c 	bl	801410c <tcp_output>
  }
  return;
 80121f4:	bf00      	nop
 80121f6:	e001      	b.n	80121fc <tcp_timewait_input+0xa8>
    return;
 80121f8:	bf00      	nop
 80121fa:	e000      	b.n	80121fe <tcp_timewait_input+0xaa>
  return;
 80121fc:	bf00      	nop
}
 80121fe:	3708      	adds	r7, #8
 8012200:	46bd      	mov	sp, r7
 8012202:	bd80      	pop	{r7, pc}
 8012204:	2402182c 	.word	0x2402182c
 8012208:	24021820 	.word	0x24021820
 801220c:	24021824 	.word	0x24021824
 8012210:	2402182a 	.word	0x2402182a
 8012214:	24021810 	.word	0x24021810
 8012218:	24021c64 	.word	0x24021c64
 801221c:	24021c68 	.word	0x24021c68
 8012220:	24024e50 	.word	0x24024e50

08012224 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b08a      	sub	sp, #40	; 0x28
 8012228:	af02      	add	r7, sp, #8
 801222a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801222c:	2300      	movs	r3, #0
 801222e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012230:	2300      	movs	r3, #0
 8012232:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012234:	4ba4      	ldr	r3, [pc, #656]	; (80124c8 <tcp_process+0x2a4>)
 8012236:	781b      	ldrb	r3, [r3, #0]
 8012238:	f003 0304 	and.w	r3, r3, #4
 801223c:	2b00      	cmp	r3, #0
 801223e:	d04e      	beq.n	80122de <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	7d1b      	ldrb	r3, [r3, #20]
 8012244:	2b02      	cmp	r3, #2
 8012246:	d108      	bne.n	801225a <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801224c:	4b9f      	ldr	r3, [pc, #636]	; (80124cc <tcp_process+0x2a8>)
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	429a      	cmp	r2, r3
 8012252:	d123      	bne.n	801229c <tcp_process+0x78>
        acceptable = 1;
 8012254:	2301      	movs	r3, #1
 8012256:	76fb      	strb	r3, [r7, #27]
 8012258:	e020      	b.n	801229c <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801225e:	4b9c      	ldr	r3, [pc, #624]	; (80124d0 <tcp_process+0x2ac>)
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	429a      	cmp	r2, r3
 8012264:	d102      	bne.n	801226c <tcp_process+0x48>
        acceptable = 1;
 8012266:	2301      	movs	r3, #1
 8012268:	76fb      	strb	r3, [r7, #27]
 801226a:	e017      	b.n	801229c <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801226c:	4b98      	ldr	r3, [pc, #608]	; (80124d0 <tcp_process+0x2ac>)
 801226e:	681a      	ldr	r2, [r3, #0]
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012274:	1ad3      	subs	r3, r2, r3
 8012276:	2b00      	cmp	r3, #0
 8012278:	db10      	blt.n	801229c <tcp_process+0x78>
 801227a:	4b95      	ldr	r3, [pc, #596]	; (80124d0 <tcp_process+0x2ac>)
 801227c:	681a      	ldr	r2, [r3, #0]
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012282:	6879      	ldr	r1, [r7, #4]
 8012284:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012286:	440b      	add	r3, r1
 8012288:	1ad3      	subs	r3, r2, r3
 801228a:	2b00      	cmp	r3, #0
 801228c:	dc06      	bgt.n	801229c <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	7e9b      	ldrb	r3, [r3, #26]
 8012292:	f043 0302 	orr.w	r3, r3, #2
 8012296:	b2da      	uxtb	r2, r3
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801229c:	7efb      	ldrb	r3, [r7, #27]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d01b      	beq.n	80122da <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	7d1b      	ldrb	r3, [r3, #20]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d106      	bne.n	80122b8 <tcp_process+0x94>
 80122aa:	4b8a      	ldr	r3, [pc, #552]	; (80124d4 <tcp_process+0x2b0>)
 80122ac:	f240 22e7 	movw	r2, #743	; 0x2e7
 80122b0:	4989      	ldr	r1, [pc, #548]	; (80124d8 <tcp_process+0x2b4>)
 80122b2:	488a      	ldr	r0, [pc, #552]	; (80124dc <tcp_process+0x2b8>)
 80122b4:	f005 fb6e 	bl	8017994 <iprintf>
      recv_flags |= TF_RESET;
 80122b8:	4b89      	ldr	r3, [pc, #548]	; (80124e0 <tcp_process+0x2bc>)
 80122ba:	781b      	ldrb	r3, [r3, #0]
 80122bc:	f043 0308 	orr.w	r3, r3, #8
 80122c0:	b2da      	uxtb	r2, r3
 80122c2:	4b87      	ldr	r3, [pc, #540]	; (80124e0 <tcp_process+0x2bc>)
 80122c4:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	7e9b      	ldrb	r3, [r3, #26]
 80122ca:	f023 0301 	bic.w	r3, r3, #1
 80122ce:	b2da      	uxtb	r2, r3
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 80122d4:	f06f 030d 	mvn.w	r3, #13
 80122d8:	e34d      	b.n	8012976 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 80122da:	2300      	movs	r3, #0
 80122dc:	e34b      	b.n	8012976 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80122de:	4b7a      	ldr	r3, [pc, #488]	; (80124c8 <tcp_process+0x2a4>)
 80122e0:	781b      	ldrb	r3, [r3, #0]
 80122e2:	f003 0302 	and.w	r3, r3, #2
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d010      	beq.n	801230c <tcp_process+0xe8>
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	7d1b      	ldrb	r3, [r3, #20]
 80122ee:	2b02      	cmp	r3, #2
 80122f0:	d00c      	beq.n	801230c <tcp_process+0xe8>
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	7d1b      	ldrb	r3, [r3, #20]
 80122f6:	2b03      	cmp	r3, #3
 80122f8:	d008      	beq.n	801230c <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	7e9b      	ldrb	r3, [r3, #26]
 80122fe:	f043 0302 	orr.w	r3, r3, #2
 8012302:	b2da      	uxtb	r2, r3
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8012308:	2300      	movs	r3, #0
 801230a:	e334      	b.n	8012976 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	7e9b      	ldrb	r3, [r3, #26]
 8012310:	f003 0310 	and.w	r3, r3, #16
 8012314:	2b00      	cmp	r3, #0
 8012316:	d103      	bne.n	8012320 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012318:	4b72      	ldr	r3, [pc, #456]	; (80124e4 <tcp_process+0x2c0>)
 801231a:	681a      	ldr	r2, [r3, #0]
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	2200      	movs	r2, #0
 8012324:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

  tcp_parseopt(pcb);
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f001 fbdf 	bl	8013aec <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	7d1b      	ldrb	r3, [r3, #20]
 8012332:	3b02      	subs	r3, #2
 8012334:	2b07      	cmp	r3, #7
 8012336:	f200 830e 	bhi.w	8012956 <tcp_process+0x732>
 801233a:	a201      	add	r2, pc, #4	; (adr r2, 8012340 <tcp_process+0x11c>)
 801233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012340:	08012361 	.word	0x08012361
 8012344:	08012559 	.word	0x08012559
 8012348:	080126b1 	.word	0x080126b1
 801234c:	080126db 	.word	0x080126db
 8012350:	08012805 	.word	0x08012805
 8012354:	080126b1 	.word	0x080126b1
 8012358:	08012891 	.word	0x08012891
 801235c:	08012921 	.word	0x08012921
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012360:	4b59      	ldr	r3, [pc, #356]	; (80124c8 <tcp_process+0x2a4>)
 8012362:	781b      	ldrb	r3, [r3, #0]
 8012364:	f003 0310 	and.w	r3, r3, #16
 8012368:	2b00      	cmp	r3, #0
 801236a:	f000 80cb 	beq.w	8012504 <tcp_process+0x2e0>
 801236e:	4b56      	ldr	r3, [pc, #344]	; (80124c8 <tcp_process+0x2a4>)
 8012370:	781b      	ldrb	r3, [r3, #0]
 8012372:	f003 0302 	and.w	r3, r3, #2
 8012376:	2b00      	cmp	r3, #0
 8012378:	f000 80c4 	beq.w	8012504 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012380:	1c5a      	adds	r2, r3, #1
 8012382:	4b52      	ldr	r3, [pc, #328]	; (80124cc <tcp_process+0x2a8>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	429a      	cmp	r2, r3
 8012388:	f040 80bc 	bne.w	8012504 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 801238c:	4b50      	ldr	r3, [pc, #320]	; (80124d0 <tcp_process+0x2ac>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	1c5a      	adds	r2, r3, #1
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 801239e:	4b4b      	ldr	r3, [pc, #300]	; (80124cc <tcp_process+0x2a8>)
 80123a0:	681a      	ldr	r2, [r3, #0]
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 80123a6:	4b50      	ldr	r3, [pc, #320]	; (80124e8 <tcp_process+0x2c4>)
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	89db      	ldrh	r3, [r3, #14]
 80123ac:	b29a      	uxth	r2, r3
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80123c0:	4b43      	ldr	r3, [pc, #268]	; (80124d0 <tcp_process+0x2ac>)
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	1e5a      	subs	r2, r3, #1
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	2204      	movs	r2, #4
 80123ce:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	3304      	adds	r3, #4
 80123d8:	4619      	mov	r1, r3
 80123da:	4610      	mov	r0, r2
 80123dc:	f7ff f95c 	bl	8011698 <tcp_eff_send_mss_impl>
 80123e0:	4603      	mov	r3, r0
 80123e2:	461a      	mov	r2, r3
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80123ec:	005b      	lsls	r3, r3, #1
 80123ee:	f241 121c 	movw	r2, #4380	; 0x111c
 80123f2:	429a      	cmp	r2, r3
 80123f4:	bf38      	it	cc
 80123f6:	461a      	movcc	r2, r3
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80123fc:	009b      	lsls	r3, r3, #2
 80123fe:	4293      	cmp	r3, r2
 8012400:	bf28      	it	cs
 8012402:	4613      	movcs	r3, r2
 8012404:	b29a      	uxth	r2, r3
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012412:	2b00      	cmp	r3, #0
 8012414:	d106      	bne.n	8012424 <tcp_process+0x200>
 8012416:	4b2f      	ldr	r3, [pc, #188]	; (80124d4 <tcp_process+0x2b0>)
 8012418:	f240 321a 	movw	r2, #794	; 0x31a
 801241c:	4933      	ldr	r1, [pc, #204]	; (80124ec <tcp_process+0x2c8>)
 801241e:	482f      	ldr	r0, [pc, #188]	; (80124dc <tcp_process+0x2b8>)
 8012420:	f005 fab8 	bl	8017994 <iprintf>
      --pcb->snd_queuelen;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801242a:	3b01      	subs	r3, #1
 801242c:	b29a      	uxth	r2, r3
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012438:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 801243a:	69fb      	ldr	r3, [r7, #28]
 801243c:	2b00      	cmp	r3, #0
 801243e:	d111      	bne.n	8012464 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012444:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8012446:	69fb      	ldr	r3, [r7, #28]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d106      	bne.n	801245a <tcp_process+0x236>
 801244c:	4b21      	ldr	r3, [pc, #132]	; (80124d4 <tcp_process+0x2b0>)
 801244e:	f240 3222 	movw	r2, #802	; 0x322
 8012452:	4927      	ldr	r1, [pc, #156]	; (80124f0 <tcp_process+0x2cc>)
 8012454:	4821      	ldr	r0, [pc, #132]	; (80124dc <tcp_process+0x2b8>)
 8012456:	f005 fa9d 	bl	8017994 <iprintf>
        pcb->unsent = rseg->next;
 801245a:	69fb      	ldr	r3, [r7, #28]
 801245c:	681a      	ldr	r2, [r3, #0]
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	669a      	str	r2, [r3, #104]	; 0x68
 8012462:	e003      	b.n	801246c <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8012464:	69fb      	ldr	r3, [r7, #28]
 8012466:	681a      	ldr	r2, [r3, #0]
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 801246c:	69f8      	ldr	r0, [r7, #28]
 801246e:	f7fe fe9e 	bl	80111ae <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012476:	2b00      	cmp	r3, #0
 8012478:	d104      	bne.n	8012484 <tcp_process+0x260>
        pcb->rtime = -1;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012480:	861a      	strh	r2, [r3, #48]	; 0x30
 8012482:	e006      	b.n	8012492 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2200      	movs	r2, #0
 8012488:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	2200      	movs	r2, #0
 801248e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012498:	2b00      	cmp	r3, #0
 801249a:	d00a      	beq.n	80124b2 <tcp_process+0x28e>
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80124a2:	687a      	ldr	r2, [r7, #4]
 80124a4:	6910      	ldr	r0, [r2, #16]
 80124a6:	2200      	movs	r2, #0
 80124a8:	6879      	ldr	r1, [r7, #4]
 80124aa:	4798      	blx	r3
 80124ac:	4603      	mov	r3, r0
 80124ae:	76bb      	strb	r3, [r7, #26]
 80124b0:	e001      	b.n	80124b6 <tcp_process+0x292>
 80124b2:	2300      	movs	r3, #0
 80124b4:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 80124b6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80124ba:	f113 0f0d 	cmn.w	r3, #13
 80124be:	d119      	bne.n	80124f4 <tcp_process+0x2d0>
        return ERR_ABRT;
 80124c0:	f06f 030c 	mvn.w	r3, #12
 80124c4:	e257      	b.n	8012976 <tcp_process+0x752>
 80124c6:	bf00      	nop
 80124c8:	2402182c 	.word	0x2402182c
 80124cc:	24021824 	.word	0x24021824
 80124d0:	24021820 	.word	0x24021820
 80124d4:	08019900 	.word	0x08019900
 80124d8:	08019ab8 	.word	0x08019ab8
 80124dc:	08019944 	.word	0x08019944
 80124e0:	2402182d 	.word	0x2402182d
 80124e4:	24024e50 	.word	0x24024e50
 80124e8:	24021810 	.word	0x24021810
 80124ec:	08019ad8 	.word	0x08019ad8
 80124f0:	08019af0 	.word	0x08019af0
      }
      tcp_ack_now(pcb);
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	7e9b      	ldrb	r3, [r3, #26]
 80124f8:	f043 0302 	orr.w	r3, r3, #2
 80124fc:	b2da      	uxtb	r2, r3
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8012502:	e22a      	b.n	801295a <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 8012504:	4b9f      	ldr	r3, [pc, #636]	; (8012784 <tcp_process+0x560>)
 8012506:	781b      	ldrb	r3, [r3, #0]
 8012508:	f003 0310 	and.w	r3, r3, #16
 801250c:	2b00      	cmp	r3, #0
 801250e:	f000 8224 	beq.w	801295a <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012512:	4b9d      	ldr	r3, [pc, #628]	; (8012788 <tcp_process+0x564>)
 8012514:	6818      	ldr	r0, [r3, #0]
 8012516:	4b9d      	ldr	r3, [pc, #628]	; (801278c <tcp_process+0x568>)
 8012518:	881b      	ldrh	r3, [r3, #0]
 801251a:	461a      	mov	r2, r3
 801251c:	4b9c      	ldr	r3, [pc, #624]	; (8012790 <tcp_process+0x56c>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012522:	4b9c      	ldr	r3, [pc, #624]	; (8012794 <tcp_process+0x570>)
 8012524:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012526:	885b      	ldrh	r3, [r3, #2]
 8012528:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801252a:	4a9a      	ldr	r2, [pc, #616]	; (8012794 <tcp_process+0x570>)
 801252c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801252e:	8812      	ldrh	r2, [r2, #0]
 8012530:	b292      	uxth	r2, r2
 8012532:	9201      	str	r2, [sp, #4]
 8012534:	9300      	str	r3, [sp, #0]
 8012536:	4b98      	ldr	r3, [pc, #608]	; (8012798 <tcp_process+0x574>)
 8012538:	4a98      	ldr	r2, [pc, #608]	; (801279c <tcp_process+0x578>)
 801253a:	f002 f871 	bl	8014620 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012544:	2b05      	cmp	r3, #5
 8012546:	f200 8208 	bhi.w	801295a <tcp_process+0x736>
        pcb->rtime = 0;
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	2200      	movs	r2, #0
 801254e:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8012550:	6878      	ldr	r0, [r7, #4]
 8012552:	f002 f8db 	bl	801470c <tcp_rexmit_rto>
    break;
 8012556:	e200      	b.n	801295a <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8012558:	4b8a      	ldr	r3, [pc, #552]	; (8012784 <tcp_process+0x560>)
 801255a:	781b      	ldrb	r3, [r3, #0]
 801255c:	f003 0310 	and.w	r3, r3, #16
 8012560:	2b00      	cmp	r3, #0
 8012562:	f000 8091 	beq.w	8012688 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8012566:	4b88      	ldr	r3, [pc, #544]	; (8012788 <tcp_process+0x564>)
 8012568:	681a      	ldr	r2, [r3, #0]
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801256e:	1ad3      	subs	r3, r2, r3
 8012570:	3b01      	subs	r3, #1
 8012572:	2b00      	cmp	r3, #0
 8012574:	db71      	blt.n	801265a <tcp_process+0x436>
 8012576:	4b84      	ldr	r3, [pc, #528]	; (8012788 <tcp_process+0x564>)
 8012578:	681a      	ldr	r2, [r3, #0]
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801257e:	1ad3      	subs	r3, r2, r3
 8012580:	2b00      	cmp	r3, #0
 8012582:	dc6a      	bgt.n	801265a <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	2204      	movs	r2, #4
 8012588:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801258e:	2b00      	cmp	r3, #0
 8012590:	d00b      	beq.n	80125aa <tcp_process+0x386>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012596:	699b      	ldr	r3, [r3, #24]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d106      	bne.n	80125aa <tcp_process+0x386>
 801259c:	4b80      	ldr	r3, [pc, #512]	; (80127a0 <tcp_process+0x57c>)
 801259e:	f240 3251 	movw	r2, #849	; 0x351
 80125a2:	4980      	ldr	r1, [pc, #512]	; (80127a4 <tcp_process+0x580>)
 80125a4:	4880      	ldr	r0, [pc, #512]	; (80127a8 <tcp_process+0x584>)
 80125a6:	f005 f9f5 	bl	8017994 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d102      	bne.n	80125b8 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 80125b2:	23fa      	movs	r3, #250	; 0xfa
 80125b4:	76bb      	strb	r3, [r7, #26]
 80125b6:	e011      	b.n	80125dc <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80125bc:	699b      	ldr	r3, [r3, #24]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d00a      	beq.n	80125d8 <tcp_process+0x3b4>
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80125c6:	699b      	ldr	r3, [r3, #24]
 80125c8:	687a      	ldr	r2, [r7, #4]
 80125ca:	6910      	ldr	r0, [r2, #16]
 80125cc:	2200      	movs	r2, #0
 80125ce:	6879      	ldr	r1, [r7, #4]
 80125d0:	4798      	blx	r3
 80125d2:	4603      	mov	r3, r0
 80125d4:	76bb      	strb	r3, [r7, #26]
 80125d6:	e001      	b.n	80125dc <tcp_process+0x3b8>
 80125d8:	23f0      	movs	r3, #240	; 0xf0
 80125da:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 80125dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d00a      	beq.n	80125fa <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 80125e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80125e8:	f113 0f0d 	cmn.w	r3, #13
 80125ec:	d002      	beq.n	80125f4 <tcp_process+0x3d0>
            tcp_abort(pcb);
 80125ee:	6878      	ldr	r0, [r7, #4]
 80125f0:	f7fe f982 	bl	80108f8 <tcp_abort>
          }
          return ERR_ABRT;
 80125f4:	f06f 030c 	mvn.w	r3, #12
 80125f8:	e1bd      	b.n	8012976 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f000 fa42 	bl	8012a84 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8012600:	4b6a      	ldr	r3, [pc, #424]	; (80127ac <tcp_process+0x588>)
 8012602:	881b      	ldrh	r3, [r3, #0]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d005      	beq.n	8012614 <tcp_process+0x3f0>
          recv_acked--;
 8012608:	4b68      	ldr	r3, [pc, #416]	; (80127ac <tcp_process+0x588>)
 801260a:	881b      	ldrh	r3, [r3, #0]
 801260c:	3b01      	subs	r3, #1
 801260e:	b29a      	uxth	r2, r3
 8012610:	4b66      	ldr	r3, [pc, #408]	; (80127ac <tcp_process+0x588>)
 8012612:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012618:	005b      	lsls	r3, r3, #1
 801261a:	f241 121c 	movw	r2, #4380	; 0x111c
 801261e:	429a      	cmp	r2, r3
 8012620:	bf38      	it	cc
 8012622:	461a      	movcc	r2, r3
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012628:	009b      	lsls	r3, r3, #2
 801262a:	4293      	cmp	r3, r2
 801262c:	bf28      	it	cs
 801262e:	4613      	movcs	r3, r2
 8012630:	b29a      	uxth	r2, r3
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8012638:	4b5d      	ldr	r3, [pc, #372]	; (80127b0 <tcp_process+0x58c>)
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	f003 0320 	and.w	r3, r3, #32
 8012640:	2b00      	cmp	r3, #0
 8012642:	d034      	beq.n	80126ae <tcp_process+0x48a>
          tcp_ack_now(pcb);
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	7e9b      	ldrb	r3, [r3, #26]
 8012648:	f043 0302 	orr.w	r3, r3, #2
 801264c:	b2da      	uxtb	r2, r3
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	2207      	movs	r2, #7
 8012656:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8012658:	e029      	b.n	80126ae <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801265a:	4b4b      	ldr	r3, [pc, #300]	; (8012788 <tcp_process+0x564>)
 801265c:	6818      	ldr	r0, [r3, #0]
 801265e:	4b4b      	ldr	r3, [pc, #300]	; (801278c <tcp_process+0x568>)
 8012660:	881b      	ldrh	r3, [r3, #0]
 8012662:	461a      	mov	r2, r3
 8012664:	4b4a      	ldr	r3, [pc, #296]	; (8012790 <tcp_process+0x56c>)
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801266a:	4b4a      	ldr	r3, [pc, #296]	; (8012794 <tcp_process+0x570>)
 801266c:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801266e:	885b      	ldrh	r3, [r3, #2]
 8012670:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012672:	4a48      	ldr	r2, [pc, #288]	; (8012794 <tcp_process+0x570>)
 8012674:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012676:	8812      	ldrh	r2, [r2, #0]
 8012678:	b292      	uxth	r2, r2
 801267a:	9201      	str	r2, [sp, #4]
 801267c:	9300      	str	r3, [sp, #0]
 801267e:	4b46      	ldr	r3, [pc, #280]	; (8012798 <tcp_process+0x574>)
 8012680:	4a46      	ldr	r2, [pc, #280]	; (801279c <tcp_process+0x578>)
 8012682:	f001 ffcd 	bl	8014620 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8012686:	e16a      	b.n	801295e <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012688:	4b3e      	ldr	r3, [pc, #248]	; (8012784 <tcp_process+0x560>)
 801268a:	781b      	ldrb	r3, [r3, #0]
 801268c:	f003 0302 	and.w	r3, r3, #2
 8012690:	2b00      	cmp	r3, #0
 8012692:	f000 8164 	beq.w	801295e <tcp_process+0x73a>
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801269a:	1e5a      	subs	r2, r3, #1
 801269c:	4b3c      	ldr	r3, [pc, #240]	; (8012790 <tcp_process+0x56c>)
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	429a      	cmp	r2, r3
 80126a2:	f040 815c 	bne.w	801295e <tcp_process+0x73a>
      tcp_rexmit(pcb);
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f002 f866 	bl	8014778 <tcp_rexmit>
    break;
 80126ac:	e157      	b.n	801295e <tcp_process+0x73a>
 80126ae:	e156      	b.n	801295e <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 80126b0:	6878      	ldr	r0, [r7, #4]
 80126b2:	f000 f9e7 	bl	8012a84 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80126b6:	4b3e      	ldr	r3, [pc, #248]	; (80127b0 <tcp_process+0x58c>)
 80126b8:	781b      	ldrb	r3, [r3, #0]
 80126ba:	f003 0320 	and.w	r3, r3, #32
 80126be:	2b00      	cmp	r3, #0
 80126c0:	f000 814f 	beq.w	8012962 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	7e9b      	ldrb	r3, [r3, #26]
 80126c8:	f043 0302 	orr.w	r3, r3, #2
 80126cc:	b2da      	uxtb	r2, r3
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	2207      	movs	r2, #7
 80126d6:	751a      	strb	r2, [r3, #20]
    }
    break;
 80126d8:	e143      	b.n	8012962 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f000 f9d2 	bl	8012a84 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80126e0:	4b33      	ldr	r3, [pc, #204]	; (80127b0 <tcp_process+0x58c>)
 80126e2:	781b      	ldrb	r3, [r3, #0]
 80126e4:	f003 0320 	and.w	r3, r3, #32
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d074      	beq.n	80127d6 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80126ec:	4b25      	ldr	r3, [pc, #148]	; (8012784 <tcp_process+0x560>)
 80126ee:	781b      	ldrb	r3, [r3, #0]
 80126f0:	f003 0310 	and.w	r3, r3, #16
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d063      	beq.n	80127c0 <tcp_process+0x59c>
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80126fc:	4b22      	ldr	r3, [pc, #136]	; (8012788 <tcp_process+0x564>)
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	429a      	cmp	r2, r3
 8012702:	d15d      	bne.n	80127c0 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012708:	2b00      	cmp	r3, #0
 801270a:	d159      	bne.n	80127c0 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	7e9b      	ldrb	r3, [r3, #26]
 8012710:	f043 0302 	orr.w	r3, r3, #2
 8012714:	b2da      	uxtb	r2, r3
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f7fe fee6 	bl	80114ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012720:	4b24      	ldr	r3, [pc, #144]	; (80127b4 <tcp_process+0x590>)
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	687a      	ldr	r2, [r7, #4]
 8012726:	429a      	cmp	r2, r3
 8012728:	d105      	bne.n	8012736 <tcp_process+0x512>
 801272a:	4b22      	ldr	r3, [pc, #136]	; (80127b4 <tcp_process+0x590>)
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	68db      	ldr	r3, [r3, #12]
 8012730:	4a20      	ldr	r2, [pc, #128]	; (80127b4 <tcp_process+0x590>)
 8012732:	6013      	str	r3, [r2, #0]
 8012734:	e013      	b.n	801275e <tcp_process+0x53a>
 8012736:	4b1f      	ldr	r3, [pc, #124]	; (80127b4 <tcp_process+0x590>)
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	617b      	str	r3, [r7, #20]
 801273c:	e00c      	b.n	8012758 <tcp_process+0x534>
 801273e:	697b      	ldr	r3, [r7, #20]
 8012740:	68db      	ldr	r3, [r3, #12]
 8012742:	687a      	ldr	r2, [r7, #4]
 8012744:	429a      	cmp	r2, r3
 8012746:	d104      	bne.n	8012752 <tcp_process+0x52e>
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	68da      	ldr	r2, [r3, #12]
 801274c:	697b      	ldr	r3, [r7, #20]
 801274e:	60da      	str	r2, [r3, #12]
 8012750:	e005      	b.n	801275e <tcp_process+0x53a>
 8012752:	697b      	ldr	r3, [r7, #20]
 8012754:	68db      	ldr	r3, [r3, #12]
 8012756:	617b      	str	r3, [r7, #20]
 8012758:	697b      	ldr	r3, [r7, #20]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d1ef      	bne.n	801273e <tcp_process+0x51a>
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	2200      	movs	r2, #0
 8012762:	60da      	str	r2, [r3, #12]
 8012764:	4b14      	ldr	r3, [pc, #80]	; (80127b8 <tcp_process+0x594>)
 8012766:	2201      	movs	r2, #1
 8012768:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	220a      	movs	r2, #10
 801276e:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012770:	4b12      	ldr	r3, [pc, #72]	; (80127bc <tcp_process+0x598>)
 8012772:	681a      	ldr	r2, [r3, #0]
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	60da      	str	r2, [r3, #12]
 8012778:	4a10      	ldr	r2, [pc, #64]	; (80127bc <tcp_process+0x598>)
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	6013      	str	r3, [r2, #0]
 801277e:	f002 f9a1 	bl	8014ac4 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8012782:	e0f0      	b.n	8012966 <tcp_process+0x742>
 8012784:	2402182c 	.word	0x2402182c
 8012788:	24021824 	.word	0x24021824
 801278c:	2402182a 	.word	0x2402182a
 8012790:	24021820 	.word	0x24021820
 8012794:	24021810 	.word	0x24021810
 8012798:	24021c64 	.word	0x24021c64
 801279c:	24021c68 	.word	0x24021c68
 80127a0:	08019900 	.word	0x08019900
 80127a4:	08019b04 	.word	0x08019b04
 80127a8:	08019944 	.word	0x08019944
 80127ac:	24021828 	.word	0x24021828
 80127b0:	2402182d 	.word	0x2402182d
 80127b4:	24024e4c 	.word	0x24024e4c
 80127b8:	24024e48 	.word	0x24024e48
 80127bc:	24024e5c 	.word	0x24024e5c
        tcp_ack_now(pcb);
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	7e9b      	ldrb	r3, [r3, #26]
 80127c4:	f043 0302 	orr.w	r3, r3, #2
 80127c8:	b2da      	uxtb	r2, r3
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	2208      	movs	r2, #8
 80127d2:	751a      	strb	r2, [r3, #20]
    break;
 80127d4:	e0c7      	b.n	8012966 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80127d6:	4b6a      	ldr	r3, [pc, #424]	; (8012980 <tcp_process+0x75c>)
 80127d8:	781b      	ldrb	r3, [r3, #0]
 80127da:	f003 0310 	and.w	r3, r3, #16
 80127de:	2b00      	cmp	r3, #0
 80127e0:	f000 80c1 	beq.w	8012966 <tcp_process+0x742>
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80127e8:	4b66      	ldr	r3, [pc, #408]	; (8012984 <tcp_process+0x760>)
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	429a      	cmp	r2, r3
 80127ee:	f040 80ba 	bne.w	8012966 <tcp_process+0x742>
               pcb->unsent == NULL) {
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	f040 80b5 	bne.w	8012966 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	2206      	movs	r2, #6
 8012800:	751a      	strb	r2, [r3, #20]
    break;
 8012802:	e0b0      	b.n	8012966 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8012804:	6878      	ldr	r0, [r7, #4]
 8012806:	f000 f93d 	bl	8012a84 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801280a:	4b5f      	ldr	r3, [pc, #380]	; (8012988 <tcp_process+0x764>)
 801280c:	781b      	ldrb	r3, [r3, #0]
 801280e:	f003 0320 	and.w	r3, r3, #32
 8012812:	2b00      	cmp	r3, #0
 8012814:	f000 80a9 	beq.w	801296a <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	7e9b      	ldrb	r3, [r3, #26]
 801281c:	f043 0302 	orr.w	r3, r3, #2
 8012820:	b2da      	uxtb	r2, r3
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	f7fe fe60 	bl	80114ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801282c:	4b57      	ldr	r3, [pc, #348]	; (801298c <tcp_process+0x768>)
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	687a      	ldr	r2, [r7, #4]
 8012832:	429a      	cmp	r2, r3
 8012834:	d105      	bne.n	8012842 <tcp_process+0x61e>
 8012836:	4b55      	ldr	r3, [pc, #340]	; (801298c <tcp_process+0x768>)
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	68db      	ldr	r3, [r3, #12]
 801283c:	4a53      	ldr	r2, [pc, #332]	; (801298c <tcp_process+0x768>)
 801283e:	6013      	str	r3, [r2, #0]
 8012840:	e013      	b.n	801286a <tcp_process+0x646>
 8012842:	4b52      	ldr	r3, [pc, #328]	; (801298c <tcp_process+0x768>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	613b      	str	r3, [r7, #16]
 8012848:	e00c      	b.n	8012864 <tcp_process+0x640>
 801284a:	693b      	ldr	r3, [r7, #16]
 801284c:	68db      	ldr	r3, [r3, #12]
 801284e:	687a      	ldr	r2, [r7, #4]
 8012850:	429a      	cmp	r2, r3
 8012852:	d104      	bne.n	801285e <tcp_process+0x63a>
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	68da      	ldr	r2, [r3, #12]
 8012858:	693b      	ldr	r3, [r7, #16]
 801285a:	60da      	str	r2, [r3, #12]
 801285c:	e005      	b.n	801286a <tcp_process+0x646>
 801285e:	693b      	ldr	r3, [r7, #16]
 8012860:	68db      	ldr	r3, [r3, #12]
 8012862:	613b      	str	r3, [r7, #16]
 8012864:	693b      	ldr	r3, [r7, #16]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d1ef      	bne.n	801284a <tcp_process+0x626>
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	2200      	movs	r2, #0
 801286e:	60da      	str	r2, [r3, #12]
 8012870:	4b47      	ldr	r3, [pc, #284]	; (8012990 <tcp_process+0x76c>)
 8012872:	2201      	movs	r2, #1
 8012874:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	220a      	movs	r2, #10
 801287a:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801287c:	4b45      	ldr	r3, [pc, #276]	; (8012994 <tcp_process+0x770>)
 801287e:	681a      	ldr	r2, [r3, #0]
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	60da      	str	r2, [r3, #12]
 8012884:	4a43      	ldr	r2, [pc, #268]	; (8012994 <tcp_process+0x770>)
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	6013      	str	r3, [r2, #0]
 801288a:	f002 f91b 	bl	8014ac4 <tcp_timer_needed>
    }
    break;
 801288e:	e06c      	b.n	801296a <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8012890:	6878      	ldr	r0, [r7, #4]
 8012892:	f000 f8f7 	bl	8012a84 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012896:	4b3a      	ldr	r3, [pc, #232]	; (8012980 <tcp_process+0x75c>)
 8012898:	781b      	ldrb	r3, [r3, #0]
 801289a:	f003 0310 	and.w	r3, r3, #16
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d065      	beq.n	801296e <tcp_process+0x74a>
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80128a6:	4b37      	ldr	r3, [pc, #220]	; (8012984 <tcp_process+0x760>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	429a      	cmp	r2, r3
 80128ac:	d15f      	bne.n	801296e <tcp_process+0x74a>
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d15b      	bne.n	801296e <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 80128b6:	6878      	ldr	r0, [r7, #4]
 80128b8:	f7fe fe18 	bl	80114ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80128bc:	4b33      	ldr	r3, [pc, #204]	; (801298c <tcp_process+0x768>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	687a      	ldr	r2, [r7, #4]
 80128c2:	429a      	cmp	r2, r3
 80128c4:	d105      	bne.n	80128d2 <tcp_process+0x6ae>
 80128c6:	4b31      	ldr	r3, [pc, #196]	; (801298c <tcp_process+0x768>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	68db      	ldr	r3, [r3, #12]
 80128cc:	4a2f      	ldr	r2, [pc, #188]	; (801298c <tcp_process+0x768>)
 80128ce:	6013      	str	r3, [r2, #0]
 80128d0:	e013      	b.n	80128fa <tcp_process+0x6d6>
 80128d2:	4b2e      	ldr	r3, [pc, #184]	; (801298c <tcp_process+0x768>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	60fb      	str	r3, [r7, #12]
 80128d8:	e00c      	b.n	80128f4 <tcp_process+0x6d0>
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	68db      	ldr	r3, [r3, #12]
 80128de:	687a      	ldr	r2, [r7, #4]
 80128e0:	429a      	cmp	r2, r3
 80128e2:	d104      	bne.n	80128ee <tcp_process+0x6ca>
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	68da      	ldr	r2, [r3, #12]
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	60da      	str	r2, [r3, #12]
 80128ec:	e005      	b.n	80128fa <tcp_process+0x6d6>
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	68db      	ldr	r3, [r3, #12]
 80128f2:	60fb      	str	r3, [r7, #12]
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d1ef      	bne.n	80128da <tcp_process+0x6b6>
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	2200      	movs	r2, #0
 80128fe:	60da      	str	r2, [r3, #12]
 8012900:	4b23      	ldr	r3, [pc, #140]	; (8012990 <tcp_process+0x76c>)
 8012902:	2201      	movs	r2, #1
 8012904:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	220a      	movs	r2, #10
 801290a:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 801290c:	4b21      	ldr	r3, [pc, #132]	; (8012994 <tcp_process+0x770>)
 801290e:	681a      	ldr	r2, [r3, #0]
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	60da      	str	r2, [r3, #12]
 8012914:	4a1f      	ldr	r2, [pc, #124]	; (8012994 <tcp_process+0x770>)
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	6013      	str	r3, [r2, #0]
 801291a:	f002 f8d3 	bl	8014ac4 <tcp_timer_needed>
    }
    break;
 801291e:	e026      	b.n	801296e <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 8012920:	6878      	ldr	r0, [r7, #4]
 8012922:	f000 f8af 	bl	8012a84 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012926:	4b16      	ldr	r3, [pc, #88]	; (8012980 <tcp_process+0x75c>)
 8012928:	781b      	ldrb	r3, [r3, #0]
 801292a:	f003 0310 	and.w	r3, r3, #16
 801292e:	2b00      	cmp	r3, #0
 8012930:	d01f      	beq.n	8012972 <tcp_process+0x74e>
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012936:	4b13      	ldr	r3, [pc, #76]	; (8012984 <tcp_process+0x760>)
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	429a      	cmp	r2, r3
 801293c:	d119      	bne.n	8012972 <tcp_process+0x74e>
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012942:	2b00      	cmp	r3, #0
 8012944:	d115      	bne.n	8012972 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8012946:	4b10      	ldr	r3, [pc, #64]	; (8012988 <tcp_process+0x764>)
 8012948:	781b      	ldrb	r3, [r3, #0]
 801294a:	f043 0310 	orr.w	r3, r3, #16
 801294e:	b2da      	uxtb	r2, r3
 8012950:	4b0d      	ldr	r3, [pc, #52]	; (8012988 <tcp_process+0x764>)
 8012952:	701a      	strb	r2, [r3, #0]
    }
    break;
 8012954:	e00d      	b.n	8012972 <tcp_process+0x74e>
  default:
    break;
 8012956:	bf00      	nop
 8012958:	e00c      	b.n	8012974 <tcp_process+0x750>
    break;
 801295a:	bf00      	nop
 801295c:	e00a      	b.n	8012974 <tcp_process+0x750>
    break;
 801295e:	bf00      	nop
 8012960:	e008      	b.n	8012974 <tcp_process+0x750>
    break;
 8012962:	bf00      	nop
 8012964:	e006      	b.n	8012974 <tcp_process+0x750>
    break;
 8012966:	bf00      	nop
 8012968:	e004      	b.n	8012974 <tcp_process+0x750>
    break;
 801296a:	bf00      	nop
 801296c:	e002      	b.n	8012974 <tcp_process+0x750>
    break;
 801296e:	bf00      	nop
 8012970:	e000      	b.n	8012974 <tcp_process+0x750>
    break;
 8012972:	bf00      	nop
  }
  return ERR_OK;
 8012974:	2300      	movs	r3, #0
}
 8012976:	4618      	mov	r0, r3
 8012978:	3720      	adds	r7, #32
 801297a:	46bd      	mov	sp, r7
 801297c:	bd80      	pop	{r7, pc}
 801297e:	bf00      	nop
 8012980:	2402182c 	.word	0x2402182c
 8012984:	24021824 	.word	0x24021824
 8012988:	2402182d 	.word	0x2402182d
 801298c:	24024e4c 	.word	0x24024e4c
 8012990:	24024e48 	.word	0x24024e48
 8012994:	24024e5c 	.word	0x24024e5c

08012998 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012998:	b590      	push	{r4, r7, lr}
 801299a:	b085      	sub	sp, #20
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
 80129a0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	68db      	ldr	r3, [r3, #12]
 80129a6:	899b      	ldrh	r3, [r3, #12]
 80129a8:	b29b      	uxth	r3, r3
 80129aa:	4618      	mov	r0, r3
 80129ac:	f7fb ff8e 	bl	800e8cc <lwip_htons>
 80129b0:	4603      	mov	r3, r0
 80129b2:	f003 0301 	and.w	r3, r3, #1
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d027      	beq.n	8012a0a <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80129ba:	6838      	ldr	r0, [r7, #0]
 80129bc:	f7fe fbe3 	bl	8011186 <tcp_segs_free>
    next = NULL;
 80129c0:	2300      	movs	r3, #0
 80129c2:	603b      	str	r3, [r7, #0]
 80129c4:	e055      	b.n	8012a72 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80129c6:	683b      	ldr	r3, [r7, #0]
 80129c8:	68db      	ldr	r3, [r3, #12]
 80129ca:	899b      	ldrh	r3, [r3, #12]
 80129cc:	b29b      	uxth	r3, r3
 80129ce:	4618      	mov	r0, r3
 80129d0:	f7fb ff7c 	bl	800e8cc <lwip_htons>
 80129d4:	4603      	mov	r3, r0
 80129d6:	f003 0301 	and.w	r3, r3, #1
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d00d      	beq.n	80129fa <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	68db      	ldr	r3, [r3, #12]
 80129e2:	899b      	ldrh	r3, [r3, #12]
 80129e4:	b29c      	uxth	r4, r3
 80129e6:	2001      	movs	r0, #1
 80129e8:	f7fb ff70 	bl	800e8cc <lwip_htons>
 80129ec:	4603      	mov	r3, r0
 80129ee:	461a      	mov	r2, r3
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	68db      	ldr	r3, [r3, #12]
 80129f4:	4322      	orrs	r2, r4
 80129f6:	b292      	uxth	r2, r2
 80129f8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80129fa:	683b      	ldr	r3, [r7, #0]
 80129fc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80129fe:	683b      	ldr	r3, [r7, #0]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012a04:	68f8      	ldr	r0, [r7, #12]
 8012a06:	f7fe fbd2 	bl	80111ae <tcp_seg_free>
    while (next &&
 8012a0a:	683b      	ldr	r3, [r7, #0]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d00e      	beq.n	8012a2e <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	891b      	ldrh	r3, [r3, #8]
 8012a14:	461a      	mov	r2, r3
 8012a16:	4b1a      	ldr	r3, [pc, #104]	; (8012a80 <tcp_oos_insert_segment+0xe8>)
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	441a      	add	r2, r3
 8012a1c:	683b      	ldr	r3, [r7, #0]
 8012a1e:	68db      	ldr	r3, [r3, #12]
 8012a20:	685b      	ldr	r3, [r3, #4]
 8012a22:	6839      	ldr	r1, [r7, #0]
 8012a24:	8909      	ldrh	r1, [r1, #8]
 8012a26:	440b      	add	r3, r1
 8012a28:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	dacb      	bge.n	80129c6 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d01e      	beq.n	8012a72 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	891b      	ldrh	r3, [r3, #8]
 8012a38:	461a      	mov	r2, r3
 8012a3a:	4b11      	ldr	r3, [pc, #68]	; (8012a80 <tcp_oos_insert_segment+0xe8>)
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	441a      	add	r2, r3
 8012a40:	683b      	ldr	r3, [r7, #0]
 8012a42:	68db      	ldr	r3, [r3, #12]
 8012a44:	685b      	ldr	r3, [r3, #4]
 8012a46:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	dd12      	ble.n	8012a72 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012a4c:	683b      	ldr	r3, [r7, #0]
 8012a4e:	68db      	ldr	r3, [r3, #12]
 8012a50:	685b      	ldr	r3, [r3, #4]
 8012a52:	b29a      	uxth	r2, r3
 8012a54:	4b0a      	ldr	r3, [pc, #40]	; (8012a80 <tcp_oos_insert_segment+0xe8>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	b29b      	uxth	r3, r3
 8012a5a:	1ad3      	subs	r3, r2, r3
 8012a5c:	b29a      	uxth	r2, r3
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	685a      	ldr	r2, [r3, #4]
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	891b      	ldrh	r3, [r3, #8]
 8012a6a:	4619      	mov	r1, r3
 8012a6c:	4610      	mov	r0, r2
 8012a6e:	f7fd f8d1 	bl	800fc14 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	683a      	ldr	r2, [r7, #0]
 8012a76:	601a      	str	r2, [r3, #0]
}
 8012a78:	bf00      	nop
 8012a7a:	3714      	adds	r7, #20
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd90      	pop	{r4, r7, pc}
 8012a80:	24021820 	.word	0x24021820

08012a84 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a86:	b08d      	sub	sp, #52	; 0x34
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8012a8c:	2300      	movs	r3, #0
 8012a8e:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	7d1b      	ldrb	r3, [r3, #20]
 8012a94:	2b03      	cmp	r3, #3
 8012a96:	d806      	bhi.n	8012aa6 <tcp_receive+0x22>
 8012a98:	4ba6      	ldr	r3, [pc, #664]	; (8012d34 <tcp_receive+0x2b0>)
 8012a9a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8012a9e:	49a6      	ldr	r1, [pc, #664]	; (8012d38 <tcp_receive+0x2b4>)
 8012aa0:	48a6      	ldr	r0, [pc, #664]	; (8012d3c <tcp_receive+0x2b8>)
 8012aa2:	f004 ff77 	bl	8017994 <iprintf>

  if (flags & TCP_ACK) {
 8012aa6:	4ba6      	ldr	r3, [pc, #664]	; (8012d40 <tcp_receive+0x2bc>)
 8012aa8:	781b      	ldrb	r3, [r3, #0]
 8012aaa:	f003 0310 	and.w	r3, r3, #16
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	f000 82bf 	beq.w	8013032 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012aba:	461a      	mov	r2, r3
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ac0:	4413      	add	r3, r2
 8012ac2:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012ac8:	4b9e      	ldr	r3, [pc, #632]	; (8012d44 <tcp_receive+0x2c0>)
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	1ad3      	subs	r3, r2, r3
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	db1b      	blt.n	8012b0a <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012ad6:	4b9b      	ldr	r3, [pc, #620]	; (8012d44 <tcp_receive+0x2c0>)
 8012ad8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012ada:	429a      	cmp	r2, r3
 8012adc:	d106      	bne.n	8012aec <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012ae2:	4b99      	ldr	r3, [pc, #612]	; (8012d48 <tcp_receive+0x2c4>)
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	1ad3      	subs	r3, r2, r3
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	db0e      	blt.n	8012b0a <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012af0:	4b95      	ldr	r3, [pc, #596]	; (8012d48 <tcp_receive+0x2c4>)
 8012af2:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012af4:	429a      	cmp	r2, r3
 8012af6:	d141      	bne.n	8012b7c <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012af8:	4b94      	ldr	r3, [pc, #592]	; (8012d4c <tcp_receive+0x2c8>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	89db      	ldrh	r3, [r3, #14]
 8012afe:	b29a      	uxth	r2, r3
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012b06:	429a      	cmp	r2, r3
 8012b08:	d938      	bls.n	8012b7c <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012b0a:	4b90      	ldr	r3, [pc, #576]	; (8012d4c <tcp_receive+0x2c8>)
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	89db      	ldrh	r3, [r3, #14]
 8012b10:	b29a      	uxth	r2, r3
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012b24:	429a      	cmp	r2, r3
 8012b26:	d205      	bcs.n	8012b34 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8012b34:	4b83      	ldr	r3, [pc, #524]	; (8012d44 <tcp_receive+0x2c0>)
 8012b36:	681a      	ldr	r2, [r3, #0]
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8012b3c:	4b82      	ldr	r3, [pc, #520]	; (8012d48 <tcp_receive+0x2c4>)
 8012b3e:	681a      	ldr	r2, [r3, #0]
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d10d      	bne.n	8012b6a <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d111      	bne.n	8012b7c <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
          pcb->persist_backoff = 1;
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2201      	movs	r2, #1
 8012b64:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8012b68:	e008      	b.n	8012b7c <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d003      	beq.n	8012b7c <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2200      	movs	r2, #0
 8012b78:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012b7c:	4b72      	ldr	r3, [pc, #456]	; (8012d48 <tcp_receive+0x2c4>)
 8012b7e:	681a      	ldr	r2, [r3, #0]
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b84:	1ad3      	subs	r3, r2, r3
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	dc53      	bgt.n	8012c32 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8012b8a:	4b71      	ldr	r3, [pc, #452]	; (8012d50 <tcp_receive+0x2cc>)
 8012b8c:	881b      	ldrh	r3, [r3, #0]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d146      	bne.n	8012c20 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b96:	687a      	ldr	r2, [r7, #4]
 8012b98:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8012b9c:	4413      	add	r3, r2
 8012b9e:	697a      	ldr	r2, [r7, #20]
 8012ba0:	429a      	cmp	r2, r3
 8012ba2:	d13d      	bne.n	8012c20 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	db38      	blt.n	8012c20 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012bb2:	4b65      	ldr	r3, [pc, #404]	; (8012d48 <tcp_receive+0x2c4>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	429a      	cmp	r2, r3
 8012bb8:	d132      	bne.n	8012c20 <tcp_receive+0x19c>
              found_dupack = 1;
 8012bba:	2301      	movs	r3, #1
 8012bbc:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012bc4:	2bff      	cmp	r3, #255	; 0xff
 8012bc6:	d007      	beq.n	8012bd8 <tcp_receive+0x154>
                ++pcb->dupacks;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012bce:	3301      	adds	r3, #1
 8012bd0:	b2da      	uxtb	r2, r3
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012bde:	2b03      	cmp	r3, #3
 8012be0:	d916      	bls.n	8012c10 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012bec:	4413      	add	r3, r2
 8012bee:	b29a      	uxth	r2, r3
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012bf6:	429a      	cmp	r2, r3
 8012bf8:	d912      	bls.n	8012c20 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c04:	4413      	add	r3, r2
 8012c06:	b29a      	uxth	r2, r3
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012c0e:	e007      	b.n	8012c20 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012c16:	2b03      	cmp	r3, #3
 8012c18:	d102      	bne.n	8012c20 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8012c1a:	6878      	ldr	r0, [r7, #4]
 8012c1c:	f001 fdfc 	bl	8014818 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012c20:	69fb      	ldr	r3, [r7, #28]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	f040 8169 	bne.w	8012efa <tcp_receive+0x476>
        pcb->dupacks = 0;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012c30:	e163      	b.n	8012efa <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8012c32:	4b45      	ldr	r3, [pc, #276]	; (8012d48 <tcp_receive+0x2c4>)
 8012c34:	681a      	ldr	r2, [r3, #0]
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c3a:	1ad3      	subs	r3, r2, r3
 8012c3c:	3b01      	subs	r3, #1
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	f2c0 8107 	blt.w	8012e52 <tcp_receive+0x3ce>
 8012c44:	4b40      	ldr	r3, [pc, #256]	; (8012d48 <tcp_receive+0x2c4>)
 8012c46:	681a      	ldr	r2, [r3, #0]
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c4c:	1ad3      	subs	r3, r2, r3
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	f300 80ff 	bgt.w	8012e52 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	7e9b      	ldrb	r3, [r3, #26]
 8012c58:	f003 0304 	and.w	r3, r3, #4
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d00c      	beq.n	8012c7a <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	7e9b      	ldrb	r3, [r3, #26]
 8012c64:	f023 0304 	bic.w	r3, r3, #4
 8012c68:	b2da      	uxtb	r2, r3
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012c88:	10db      	asrs	r3, r3, #3
 8012c8a:	b21b      	sxth	r3, r3
 8012c8c:	b29a      	uxth	r2, r3
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012c94:	b29b      	uxth	r3, r3
 8012c96:	4413      	add	r3, r2
 8012c98:	b29b      	uxth	r3, r3
 8012c9a:	b21a      	sxth	r2, r3
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012caa:	4b27      	ldr	r3, [pc, #156]	; (8012d48 <tcp_receive+0x2c4>)
 8012cac:	681a      	ldr	r2, [r3, #0]
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	7d1b      	ldrb	r3, [r3, #20]
 8012cb6:	2b03      	cmp	r3, #3
 8012cb8:	f240 8094 	bls.w	8012de4 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012cc8:	429a      	cmp	r2, r3
 8012cca:	d216      	bcs.n	8012cfa <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012cd6:	4413      	add	r3, r2
 8012cd8:	b29a      	uxth	r2, r3
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012ce0:	429a      	cmp	r2, r3
 8012ce2:	d97f      	bls.n	8012de4 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012cee:	4413      	add	r3, r2
 8012cf0:	b29a      	uxth	r2, r3
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012cf8:	e074      	b.n	8012de4 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d04:	4619      	mov	r1, r3
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012d0a:	fb03 f301 	mul.w	r3, r3, r1
 8012d0e:	6879      	ldr	r1, [r7, #4]
 8012d10:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8012d14:	fb93 f3f1 	sdiv	r3, r3, r1
 8012d18:	b29b      	uxth	r3, r3
 8012d1a:	4413      	add	r3, r2
 8012d1c:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012d24:	8a7a      	ldrh	r2, [r7, #18]
 8012d26:	429a      	cmp	r2, r3
 8012d28:	d95c      	bls.n	8012de4 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	8a7a      	ldrh	r2, [r7, #18]
 8012d2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8012d32:	e057      	b.n	8012de4 <tcp_receive+0x360>
 8012d34:	08019900 	.word	0x08019900
 8012d38:	08019b24 	.word	0x08019b24
 8012d3c:	08019944 	.word	0x08019944
 8012d40:	2402182c 	.word	0x2402182c
 8012d44:	24021820 	.word	0x24021820
 8012d48:	24021824 	.word	0x24021824
 8012d4c:	24021810 	.word	0x24021810
 8012d50:	2402182a 	.word	0x2402182a
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d58:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d5e:	681a      	ldr	r2, [r3, #0]
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8012d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d6c:	685b      	ldr	r3, [r3, #4]
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f7fd f95e 	bl	8010030 <pbuf_clen>
 8012d74:	4603      	mov	r3, r0
 8012d76:	429c      	cmp	r4, r3
 8012d78:	d206      	bcs.n	8012d88 <tcp_receive+0x304>
 8012d7a:	4b70      	ldr	r3, [pc, #448]	; (8012f3c <tcp_receive+0x4b8>)
 8012d7c:	f240 429e 	movw	r2, #1182	; 0x49e
 8012d80:	496f      	ldr	r1, [pc, #444]	; (8012f40 <tcp_receive+0x4bc>)
 8012d82:	4870      	ldr	r0, [pc, #448]	; (8012f44 <tcp_receive+0x4c0>)
 8012d84:	f004 fe06 	bl	8017994 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8012d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d8a:	685b      	ldr	r3, [r3, #4]
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	f7fd f94f 	bl	8010030 <pbuf_clen>
 8012d92:	4603      	mov	r3, r0
 8012d94:	461a      	mov	r2, r3
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012d9c:	1a9b      	subs	r3, r3, r2
 8012d9e:	b29a      	uxth	r2, r3
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8012da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012da8:	891a      	ldrh	r2, [r3, #8]
 8012daa:	4b67      	ldr	r3, [pc, #412]	; (8012f48 <tcp_receive+0x4c4>)
 8012dac:	881b      	ldrh	r3, [r3, #0]
 8012dae:	4413      	add	r3, r2
 8012db0:	b29a      	uxth	r2, r3
 8012db2:	4b65      	ldr	r3, [pc, #404]	; (8012f48 <tcp_receive+0x4c4>)
 8012db4:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8012db6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012db8:	f7fe f9f9 	bl	80111ae <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d00e      	beq.n	8012de4 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d10a      	bne.n	8012de4 <tcp_receive+0x360>
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d106      	bne.n	8012de4 <tcp_receive+0x360>
 8012dd6:	4b59      	ldr	r3, [pc, #356]	; (8012f3c <tcp_receive+0x4b8>)
 8012dd8:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8012ddc:	495b      	ldr	r1, [pc, #364]	; (8012f4c <tcp_receive+0x4c8>)
 8012dde:	4859      	ldr	r0, [pc, #356]	; (8012f44 <tcp_receive+0x4c0>)
 8012de0:	f004 fdd8 	bl	8017994 <iprintf>
      while (pcb->unacked != NULL &&
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d022      	beq.n	8012e32 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012df0:	68db      	ldr	r3, [r3, #12]
 8012df2:	685b      	ldr	r3, [r3, #4]
 8012df4:	4618      	mov	r0, r3
 8012df6:	f7fb fd77 	bl	800e8e8 <lwip_htonl>
 8012dfa:	4604      	mov	r4, r0
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e00:	891b      	ldrh	r3, [r3, #8]
 8012e02:	461d      	mov	r5, r3
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e08:	68db      	ldr	r3, [r3, #12]
 8012e0a:	899b      	ldrh	r3, [r3, #12]
 8012e0c:	b29b      	uxth	r3, r3
 8012e0e:	4618      	mov	r0, r3
 8012e10:	f7fb fd5c 	bl	800e8cc <lwip_htons>
 8012e14:	4603      	mov	r3, r0
 8012e16:	f003 0303 	and.w	r3, r3, #3
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d001      	beq.n	8012e22 <tcp_receive+0x39e>
 8012e1e:	2301      	movs	r3, #1
 8012e20:	e000      	b.n	8012e24 <tcp_receive+0x3a0>
 8012e22:	2300      	movs	r3, #0
 8012e24:	442b      	add	r3, r5
 8012e26:	18e2      	adds	r2, r4, r3
 8012e28:	4b49      	ldr	r3, [pc, #292]	; (8012f50 <tcp_receive+0x4cc>)
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	dd90      	ble.n	8012d54 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d104      	bne.n	8012e44 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e40:	861a      	strh	r2, [r3, #48]	; 0x30
 8012e42:	e002      	b.n	8012e4a <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	2200      	movs	r2, #0
 8012e48:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	76da      	strb	r2, [r3, #27]
 8012e50:	e002      	b.n	8012e58 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012e52:	6878      	ldr	r0, [r7, #4]
 8012e54:	f001 f8fe 	bl	8014054 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8012e58:	e04f      	b.n	8012efa <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012e64:	681a      	ldr	r2, [r3, #0]
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d103      	bne.n	8012e7a <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	2200      	movs	r2, #0
 8012e76:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8012e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e82:	685b      	ldr	r3, [r3, #4]
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7fd f8d3 	bl	8010030 <pbuf_clen>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	429c      	cmp	r4, r3
 8012e8e:	d206      	bcs.n	8012e9e <tcp_receive+0x41a>
 8012e90:	4b2a      	ldr	r3, [pc, #168]	; (8012f3c <tcp_receive+0x4b8>)
 8012e92:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8012e96:	492a      	ldr	r1, [pc, #168]	; (8012f40 <tcp_receive+0x4bc>)
 8012e98:	482a      	ldr	r0, [pc, #168]	; (8012f44 <tcp_receive+0x4c0>)
 8012e9a:	f004 fd7b 	bl	8017994 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8012e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ea0:	685b      	ldr	r3, [r3, #4]
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	f7fd f8c4 	bl	8010030 <pbuf_clen>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	461a      	mov	r2, r3
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012eb2:	1a9b      	subs	r3, r3, r2
 8012eb4:	b29a      	uxth	r2, r3
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8012ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ebe:	891a      	ldrh	r2, [r3, #8]
 8012ec0:	4b21      	ldr	r3, [pc, #132]	; (8012f48 <tcp_receive+0x4c4>)
 8012ec2:	881b      	ldrh	r3, [r3, #0]
 8012ec4:	4413      	add	r3, r2
 8012ec6:	b29a      	uxth	r2, r3
 8012ec8:	4b1f      	ldr	r3, [pc, #124]	; (8012f48 <tcp_receive+0x4c4>)
 8012eca:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8012ecc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ece:	f7fe f96e 	bl	80111ae <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d00e      	beq.n	8012efa <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d10a      	bne.n	8012efa <tcp_receive+0x476>
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d106      	bne.n	8012efa <tcp_receive+0x476>
 8012eec:	4b13      	ldr	r3, [pc, #76]	; (8012f3c <tcp_receive+0x4b8>)
 8012eee:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8012ef2:	4916      	ldr	r1, [pc, #88]	; (8012f4c <tcp_receive+0x4c8>)
 8012ef4:	4813      	ldr	r0, [pc, #76]	; (8012f44 <tcp_receive+0x4c0>)
 8012ef6:	f004 fd4d 	bl	8017994 <iprintf>
    while (pcb->unsent != NULL &&
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d036      	beq.n	8012f70 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8012f02:	4b13      	ldr	r3, [pc, #76]	; (8012f50 <tcp_receive+0x4cc>)
 8012f04:	681c      	ldr	r4, [r3, #0]
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012f0a:	68db      	ldr	r3, [r3, #12]
 8012f0c:	685b      	ldr	r3, [r3, #4]
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f7fb fcea 	bl	800e8e8 <lwip_htonl>
 8012f14:	4605      	mov	r5, r0
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012f1a:	891b      	ldrh	r3, [r3, #8]
 8012f1c:	461e      	mov	r6, r3
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012f22:	68db      	ldr	r3, [r3, #12]
 8012f24:	899b      	ldrh	r3, [r3, #12]
 8012f26:	b29b      	uxth	r3, r3
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f7fb fccf 	bl	800e8cc <lwip_htons>
 8012f2e:	4603      	mov	r3, r0
 8012f30:	f003 0303 	and.w	r3, r3, #3
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d00d      	beq.n	8012f54 <tcp_receive+0x4d0>
 8012f38:	2301      	movs	r3, #1
 8012f3a:	e00c      	b.n	8012f56 <tcp_receive+0x4d2>
 8012f3c:	08019900 	.word	0x08019900
 8012f40:	08019b40 	.word	0x08019b40
 8012f44:	08019944 	.word	0x08019944
 8012f48:	24021828 	.word	0x24021828
 8012f4c:	08019b68 	.word	0x08019b68
 8012f50:	24021824 	.word	0x24021824
 8012f54:	2300      	movs	r3, #0
 8012f56:	4433      	add	r3, r6
 8012f58:	442b      	add	r3, r5
 8012f5a:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	db07      	blt.n	8012f70 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8012f60:	4b8d      	ldr	r3, [pc, #564]	; (8013198 <tcp_receive+0x714>)
 8012f62:	681a      	ldr	r2, [r3, #0]
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f68:	1ad3      	subs	r3, r2, r3
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	f77f af75 	ble.w	8012e5a <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012f76:	4b89      	ldr	r3, [pc, #548]	; (801319c <tcp_receive+0x718>)
 8012f78:	881b      	ldrh	r3, [r3, #0]
 8012f7a:	4413      	add	r3, r2
 8012f7c:	b29a      	uxth	r2, r3
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d052      	beq.n	8013032 <tcp_receive+0x5ae>
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012f90:	4b81      	ldr	r3, [pc, #516]	; (8013198 <tcp_receive+0x714>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	1ad3      	subs	r3, r2, r3
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	da4b      	bge.n	8013032 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012f9a:	4b81      	ldr	r3, [pc, #516]	; (80131a0 <tcp_receive+0x71c>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	b29a      	uxth	r2, r3
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012fa4:	b29b      	uxth	r3, r3
 8012fa6:	1ad3      	subs	r3, r2, r3
 8012fa8:	b29b      	uxth	r3, r3
 8012faa:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8012fac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012fb4:	10db      	asrs	r3, r3, #3
 8012fb6:	b21b      	sxth	r3, r3
 8012fb8:	b29b      	uxth	r3, r3
 8012fba:	1ad3      	subs	r3, r2, r3
 8012fbc:	b29b      	uxth	r3, r3
 8012fbe:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012fc6:	b29a      	uxth	r2, r3
 8012fc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012fca:	4413      	add	r3, r2
 8012fcc:	b29b      	uxth	r3, r3
 8012fce:	b21a      	sxth	r2, r3
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012fd4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	da03      	bge.n	8012fe4 <tcp_receive+0x560>
        m = -m;
 8012fdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012fde:	425b      	negs	r3, r3
 8012fe0:	b29b      	uxth	r3, r3
 8012fe2:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8012fe4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012fec:	109b      	asrs	r3, r3, #2
 8012fee:	b21b      	sxth	r3, r3
 8012ff0:	b29b      	uxth	r3, r3
 8012ff2:	1ad3      	subs	r3, r2, r3
 8012ff4:	b29b      	uxth	r3, r3
 8012ff6:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012ffe:	b29a      	uxth	r2, r3
 8013000:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013002:	4413      	add	r3, r2
 8013004:	b29b      	uxth	r3, r3
 8013006:	b21a      	sxth	r2, r3
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013012:	10db      	asrs	r3, r3, #3
 8013014:	b21b      	sxth	r3, r3
 8013016:	b29a      	uxth	r2, r3
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801301e:	b29b      	uxth	r3, r3
 8013020:	4413      	add	r3, r2
 8013022:	b29b      	uxth	r3, r3
 8013024:	b21a      	sxth	r2, r3
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	2200      	movs	r2, #0
 8013030:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013032:	4b5c      	ldr	r3, [pc, #368]	; (80131a4 <tcp_receive+0x720>)
 8013034:	881b      	ldrh	r3, [r3, #0]
 8013036:	2b00      	cmp	r3, #0
 8013038:	f000 84f1 	beq.w	8013a1e <tcp_receive+0xf9a>
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	7d1b      	ldrb	r3, [r3, #20]
 8013040:	2b06      	cmp	r3, #6
 8013042:	f200 84ec 	bhi.w	8013a1e <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801304a:	4b57      	ldr	r3, [pc, #348]	; (80131a8 <tcp_receive+0x724>)
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	1ad3      	subs	r3, r2, r3
 8013050:	3b01      	subs	r3, #1
 8013052:	2b00      	cmp	r3, #0
 8013054:	f2c0 80b8 	blt.w	80131c8 <tcp_receive+0x744>
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801305c:	4b51      	ldr	r3, [pc, #324]	; (80131a4 <tcp_receive+0x720>)
 801305e:	881b      	ldrh	r3, [r3, #0]
 8013060:	4619      	mov	r1, r3
 8013062:	4b51      	ldr	r3, [pc, #324]	; (80131a8 <tcp_receive+0x724>)
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	440b      	add	r3, r1
 8013068:	1ad3      	subs	r3, r2, r3
 801306a:	3301      	adds	r3, #1
 801306c:	2b00      	cmp	r3, #0
 801306e:	f300 80ab 	bgt.w	80131c8 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013072:	4b4e      	ldr	r3, [pc, #312]	; (80131ac <tcp_receive+0x728>)
 8013074:	685b      	ldr	r3, [r3, #4]
 8013076:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801307c:	4b4a      	ldr	r3, [pc, #296]	; (80131a8 <tcp_receive+0x724>)
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	1ad3      	subs	r3, r2, r3
 8013082:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013084:	4b49      	ldr	r3, [pc, #292]	; (80131ac <tcp_receive+0x728>)
 8013086:	685b      	ldr	r3, [r3, #4]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d106      	bne.n	801309a <tcp_receive+0x616>
 801308c:	4b48      	ldr	r3, [pc, #288]	; (80131b0 <tcp_receive+0x72c>)
 801308e:	f240 523c 	movw	r2, #1340	; 0x53c
 8013092:	4948      	ldr	r1, [pc, #288]	; (80131b4 <tcp_receive+0x730>)
 8013094:	4848      	ldr	r0, [pc, #288]	; (80131b8 <tcp_receive+0x734>)
 8013096:	f004 fc7d 	bl	8017994 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 801309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801309c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80130a0:	4293      	cmp	r3, r2
 80130a2:	dd06      	ble.n	80130b2 <tcp_receive+0x62e>
 80130a4:	4b42      	ldr	r3, [pc, #264]	; (80131b0 <tcp_receive+0x72c>)
 80130a6:	f240 523d 	movw	r2, #1341	; 0x53d
 80130aa:	4944      	ldr	r1, [pc, #272]	; (80131bc <tcp_receive+0x738>)
 80130ac:	4842      	ldr	r0, [pc, #264]	; (80131b8 <tcp_receive+0x734>)
 80130ae:	f004 fc71 	bl	8017994 <iprintf>
      if (inseg.p->len < off) {
 80130b2:	4b3e      	ldr	r3, [pc, #248]	; (80131ac <tcp_receive+0x728>)
 80130b4:	685b      	ldr	r3, [r3, #4]
 80130b6:	895b      	ldrh	r3, [r3, #10]
 80130b8:	461a      	mov	r2, r3
 80130ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130bc:	4293      	cmp	r3, r2
 80130be:	dd3e      	ble.n	801313e <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80130c0:	4b3a      	ldr	r3, [pc, #232]	; (80131ac <tcp_receive+0x728>)
 80130c2:	685b      	ldr	r3, [r3, #4]
 80130c4:	891b      	ldrh	r3, [r3, #8]
 80130c6:	461a      	mov	r2, r3
 80130c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ca:	4293      	cmp	r3, r2
 80130cc:	dd06      	ble.n	80130dc <tcp_receive+0x658>
 80130ce:	4b38      	ldr	r3, [pc, #224]	; (80131b0 <tcp_receive+0x72c>)
 80130d0:	f240 523f 	movw	r2, #1343	; 0x53f
 80130d4:	493a      	ldr	r1, [pc, #232]	; (80131c0 <tcp_receive+0x73c>)
 80130d6:	4838      	ldr	r0, [pc, #224]	; (80131b8 <tcp_receive+0x734>)
 80130d8:	f004 fc5c 	bl	8017994 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80130dc:	4b33      	ldr	r3, [pc, #204]	; (80131ac <tcp_receive+0x728>)
 80130de:	685b      	ldr	r3, [r3, #4]
 80130e0:	891a      	ldrh	r2, [r3, #8]
 80130e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e4:	b29b      	uxth	r3, r3
 80130e6:	1ad3      	subs	r3, r2, r3
 80130e8:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 80130ea:	e00e      	b.n	801310a <tcp_receive+0x686>
          off -= p->len;
 80130ec:	69bb      	ldr	r3, [r7, #24]
 80130ee:	895b      	ldrh	r3, [r3, #10]
 80130f0:	461a      	mov	r2, r3
 80130f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f4:	1a9b      	subs	r3, r3, r2
 80130f6:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 80130f8:	69bb      	ldr	r3, [r7, #24]
 80130fa:	8a3a      	ldrh	r2, [r7, #16]
 80130fc:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 80130fe:	69bb      	ldr	r3, [r7, #24]
 8013100:	2200      	movs	r2, #0
 8013102:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8013104:	69bb      	ldr	r3, [r7, #24]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 801310a:	69bb      	ldr	r3, [r7, #24]
 801310c:	895b      	ldrh	r3, [r3, #10]
 801310e:	461a      	mov	r2, r3
 8013110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013112:	4293      	cmp	r3, r2
 8013114:	dcea      	bgt.n	80130ec <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8013116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013118:	b29b      	uxth	r3, r3
 801311a:	425b      	negs	r3, r3
 801311c:	b29b      	uxth	r3, r3
 801311e:	b21b      	sxth	r3, r3
 8013120:	4619      	mov	r1, r3
 8013122:	69b8      	ldr	r0, [r7, #24]
 8013124:	f7fc fec6 	bl	800feb4 <pbuf_header>
 8013128:	4603      	mov	r3, r0
 801312a:	2b00      	cmp	r3, #0
 801312c:	d01c      	beq.n	8013168 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 801312e:	4b20      	ldr	r3, [pc, #128]	; (80131b0 <tcp_receive+0x72c>)
 8013130:	f240 524c 	movw	r2, #1356	; 0x54c
 8013134:	4923      	ldr	r1, [pc, #140]	; (80131c4 <tcp_receive+0x740>)
 8013136:	4820      	ldr	r0, [pc, #128]	; (80131b8 <tcp_receive+0x734>)
 8013138:	f004 fc2c 	bl	8017994 <iprintf>
 801313c:	e014      	b.n	8013168 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 801313e:	4b1b      	ldr	r3, [pc, #108]	; (80131ac <tcp_receive+0x728>)
 8013140:	685b      	ldr	r3, [r3, #4]
 8013142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013144:	b292      	uxth	r2, r2
 8013146:	4252      	negs	r2, r2
 8013148:	b292      	uxth	r2, r2
 801314a:	b212      	sxth	r2, r2
 801314c:	4611      	mov	r1, r2
 801314e:	4618      	mov	r0, r3
 8013150:	f7fc feb0 	bl	800feb4 <pbuf_header>
 8013154:	4603      	mov	r3, r0
 8013156:	2b00      	cmp	r3, #0
 8013158:	d006      	beq.n	8013168 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 801315a:	4b15      	ldr	r3, [pc, #84]	; (80131b0 <tcp_receive+0x72c>)
 801315c:	f240 5251 	movw	r2, #1361	; 0x551
 8013160:	4918      	ldr	r1, [pc, #96]	; (80131c4 <tcp_receive+0x740>)
 8013162:	4815      	ldr	r0, [pc, #84]	; (80131b8 <tcp_receive+0x734>)
 8013164:	f004 fc16 	bl	8017994 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8013168:	4b10      	ldr	r3, [pc, #64]	; (80131ac <tcp_receive+0x728>)
 801316a:	891a      	ldrh	r2, [r3, #8]
 801316c:	4b0e      	ldr	r3, [pc, #56]	; (80131a8 <tcp_receive+0x724>)
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	b299      	uxth	r1, r3
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013176:	b29b      	uxth	r3, r3
 8013178:	1acb      	subs	r3, r1, r3
 801317a:	b29b      	uxth	r3, r3
 801317c:	4413      	add	r3, r2
 801317e:	b29a      	uxth	r2, r3
 8013180:	4b0a      	ldr	r3, [pc, #40]	; (80131ac <tcp_receive+0x728>)
 8013182:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013188:	4a07      	ldr	r2, [pc, #28]	; (80131a8 <tcp_receive+0x724>)
 801318a:	6013      	str	r3, [r2, #0]
 801318c:	4b07      	ldr	r3, [pc, #28]	; (80131ac <tcp_receive+0x728>)
 801318e:	68db      	ldr	r3, [r3, #12]
 8013190:	4a05      	ldr	r2, [pc, #20]	; (80131a8 <tcp_receive+0x724>)
 8013192:	6812      	ldr	r2, [r2, #0]
 8013194:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013196:	e025      	b.n	80131e4 <tcp_receive+0x760>
 8013198:	24021824 	.word	0x24021824
 801319c:	24021828 	.word	0x24021828
 80131a0:	24024e50 	.word	0x24024e50
 80131a4:	2402182a 	.word	0x2402182a
 80131a8:	24021820 	.word	0x24021820
 80131ac:	24021800 	.word	0x24021800
 80131b0:	08019900 	.word	0x08019900
 80131b4:	08019b88 	.word	0x08019b88
 80131b8:	08019944 	.word	0x08019944
 80131bc:	08019b98 	.word	0x08019b98
 80131c0:	08019ba8 	.word	0x08019ba8
 80131c4:	08019bb8 	.word	0x08019bb8
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80131c8:	4b87      	ldr	r3, [pc, #540]	; (80133e8 <tcp_receive+0x964>)
 80131ca:	681a      	ldr	r2, [r3, #0]
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131d0:	1ad3      	subs	r3, r2, r3
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	da06      	bge.n	80131e4 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	7e9b      	ldrb	r3, [r3, #26]
 80131da:	f043 0302 	orr.w	r3, r3, #2
 80131de:	b2da      	uxtb	r2, r3
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80131e4:	4b80      	ldr	r3, [pc, #512]	; (80133e8 <tcp_receive+0x964>)
 80131e6:	681a      	ldr	r2, [r3, #0]
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131ec:	1ad3      	subs	r3, r2, r3
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	f2c0 8410 	blt.w	8013a14 <tcp_receive+0xf90>
 80131f4:	4b7c      	ldr	r3, [pc, #496]	; (80133e8 <tcp_receive+0x964>)
 80131f6:	681a      	ldr	r2, [r3, #0]
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131fc:	6879      	ldr	r1, [r7, #4]
 80131fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013200:	440b      	add	r3, r1
 8013202:	1ad3      	subs	r3, r2, r3
 8013204:	3301      	adds	r3, #1
 8013206:	2b00      	cmp	r3, #0
 8013208:	f300 8404 	bgt.w	8013a14 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013210:	4b75      	ldr	r3, [pc, #468]	; (80133e8 <tcp_receive+0x964>)
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	429a      	cmp	r2, r3
 8013216:	f040 8287 	bne.w	8013728 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801321a:	4b74      	ldr	r3, [pc, #464]	; (80133ec <tcp_receive+0x968>)
 801321c:	891c      	ldrh	r4, [r3, #8]
 801321e:	4b73      	ldr	r3, [pc, #460]	; (80133ec <tcp_receive+0x968>)
 8013220:	68db      	ldr	r3, [r3, #12]
 8013222:	899b      	ldrh	r3, [r3, #12]
 8013224:	b29b      	uxth	r3, r3
 8013226:	4618      	mov	r0, r3
 8013228:	f7fb fb50 	bl	800e8cc <lwip_htons>
 801322c:	4603      	mov	r3, r0
 801322e:	f003 0303 	and.w	r3, r3, #3
 8013232:	2b00      	cmp	r3, #0
 8013234:	d001      	beq.n	801323a <tcp_receive+0x7b6>
 8013236:	2301      	movs	r3, #1
 8013238:	e000      	b.n	801323c <tcp_receive+0x7b8>
 801323a:	2300      	movs	r3, #0
 801323c:	4423      	add	r3, r4
 801323e:	b29a      	uxth	r2, r3
 8013240:	4b6b      	ldr	r3, [pc, #428]	; (80133f0 <tcp_receive+0x96c>)
 8013242:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013248:	4b69      	ldr	r3, [pc, #420]	; (80133f0 <tcp_receive+0x96c>)
 801324a:	881b      	ldrh	r3, [r3, #0]
 801324c:	429a      	cmp	r2, r3
 801324e:	d26e      	bcs.n	801332e <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013250:	4b66      	ldr	r3, [pc, #408]	; (80133ec <tcp_receive+0x968>)
 8013252:	68db      	ldr	r3, [r3, #12]
 8013254:	899b      	ldrh	r3, [r3, #12]
 8013256:	b29b      	uxth	r3, r3
 8013258:	4618      	mov	r0, r3
 801325a:	f7fb fb37 	bl	800e8cc <lwip_htons>
 801325e:	4603      	mov	r3, r0
 8013260:	f003 0301 	and.w	r3, r3, #1
 8013264:	2b00      	cmp	r3, #0
 8013266:	d01b      	beq.n	80132a0 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013268:	4b60      	ldr	r3, [pc, #384]	; (80133ec <tcp_receive+0x968>)
 801326a:	68db      	ldr	r3, [r3, #12]
 801326c:	899b      	ldrh	r3, [r3, #12]
 801326e:	b29b      	uxth	r3, r3
 8013270:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013274:	b29c      	uxth	r4, r3
 8013276:	4b5d      	ldr	r3, [pc, #372]	; (80133ec <tcp_receive+0x968>)
 8013278:	68db      	ldr	r3, [r3, #12]
 801327a:	899b      	ldrh	r3, [r3, #12]
 801327c:	b29b      	uxth	r3, r3
 801327e:	4618      	mov	r0, r3
 8013280:	f7fb fb24 	bl	800e8cc <lwip_htons>
 8013284:	4603      	mov	r3, r0
 8013286:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801328a:	b29b      	uxth	r3, r3
 801328c:	4618      	mov	r0, r3
 801328e:	f7fb fb1d 	bl	800e8cc <lwip_htons>
 8013292:	4603      	mov	r3, r0
 8013294:	461a      	mov	r2, r3
 8013296:	4b55      	ldr	r3, [pc, #340]	; (80133ec <tcp_receive+0x968>)
 8013298:	68db      	ldr	r3, [r3, #12]
 801329a:	4322      	orrs	r2, r4
 801329c:	b292      	uxth	r2, r2
 801329e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80132a4:	4b51      	ldr	r3, [pc, #324]	; (80133ec <tcp_receive+0x968>)
 80132a6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80132a8:	4b50      	ldr	r3, [pc, #320]	; (80133ec <tcp_receive+0x968>)
 80132aa:	68db      	ldr	r3, [r3, #12]
 80132ac:	899b      	ldrh	r3, [r3, #12]
 80132ae:	b29b      	uxth	r3, r3
 80132b0:	4618      	mov	r0, r3
 80132b2:	f7fb fb0b 	bl	800e8cc <lwip_htons>
 80132b6:	4603      	mov	r3, r0
 80132b8:	f003 0302 	and.w	r3, r3, #2
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d005      	beq.n	80132cc <tcp_receive+0x848>
            inseg.len -= 1;
 80132c0:	4b4a      	ldr	r3, [pc, #296]	; (80133ec <tcp_receive+0x968>)
 80132c2:	891b      	ldrh	r3, [r3, #8]
 80132c4:	3b01      	subs	r3, #1
 80132c6:	b29a      	uxth	r2, r3
 80132c8:	4b48      	ldr	r3, [pc, #288]	; (80133ec <tcp_receive+0x968>)
 80132ca:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80132cc:	4b47      	ldr	r3, [pc, #284]	; (80133ec <tcp_receive+0x968>)
 80132ce:	685a      	ldr	r2, [r3, #4]
 80132d0:	4b46      	ldr	r3, [pc, #280]	; (80133ec <tcp_receive+0x968>)
 80132d2:	891b      	ldrh	r3, [r3, #8]
 80132d4:	4619      	mov	r1, r3
 80132d6:	4610      	mov	r0, r2
 80132d8:	f7fc fc9c 	bl	800fc14 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80132dc:	4b43      	ldr	r3, [pc, #268]	; (80133ec <tcp_receive+0x968>)
 80132de:	891c      	ldrh	r4, [r3, #8]
 80132e0:	4b42      	ldr	r3, [pc, #264]	; (80133ec <tcp_receive+0x968>)
 80132e2:	68db      	ldr	r3, [r3, #12]
 80132e4:	899b      	ldrh	r3, [r3, #12]
 80132e6:	b29b      	uxth	r3, r3
 80132e8:	4618      	mov	r0, r3
 80132ea:	f7fb faef 	bl	800e8cc <lwip_htons>
 80132ee:	4603      	mov	r3, r0
 80132f0:	f003 0303 	and.w	r3, r3, #3
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d001      	beq.n	80132fc <tcp_receive+0x878>
 80132f8:	2301      	movs	r3, #1
 80132fa:	e000      	b.n	80132fe <tcp_receive+0x87a>
 80132fc:	2300      	movs	r3, #0
 80132fe:	4423      	add	r3, r4
 8013300:	b29a      	uxth	r2, r3
 8013302:	4b3b      	ldr	r3, [pc, #236]	; (80133f0 <tcp_receive+0x96c>)
 8013304:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013306:	4b3a      	ldr	r3, [pc, #232]	; (80133f0 <tcp_receive+0x96c>)
 8013308:	881b      	ldrh	r3, [r3, #0]
 801330a:	461a      	mov	r2, r3
 801330c:	4b36      	ldr	r3, [pc, #216]	; (80133e8 <tcp_receive+0x964>)
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	441a      	add	r2, r3
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013316:	6879      	ldr	r1, [r7, #4]
 8013318:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801331a:	440b      	add	r3, r1
 801331c:	429a      	cmp	r2, r3
 801331e:	d006      	beq.n	801332e <tcp_receive+0x8aa>
 8013320:	4b34      	ldr	r3, [pc, #208]	; (80133f4 <tcp_receive+0x970>)
 8013322:	f240 527f 	movw	r2, #1407	; 0x57f
 8013326:	4934      	ldr	r1, [pc, #208]	; (80133f8 <tcp_receive+0x974>)
 8013328:	4834      	ldr	r0, [pc, #208]	; (80133fc <tcp_receive+0x978>)
 801332a:	f004 fb33 	bl	8017994 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013332:	2b00      	cmp	r3, #0
 8013334:	f000 80e1 	beq.w	80134fa <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013338:	4b2c      	ldr	r3, [pc, #176]	; (80133ec <tcp_receive+0x968>)
 801333a:	68db      	ldr	r3, [r3, #12]
 801333c:	899b      	ldrh	r3, [r3, #12]
 801333e:	b29b      	uxth	r3, r3
 8013340:	4618      	mov	r0, r3
 8013342:	f7fb fac3 	bl	800e8cc <lwip_htons>
 8013346:	4603      	mov	r3, r0
 8013348:	f003 0301 	and.w	r3, r3, #1
 801334c:	2b00      	cmp	r3, #0
 801334e:	d010      	beq.n	8013372 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013350:	e00a      	b.n	8013368 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013356:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801335c:	681a      	ldr	r2, [r3, #0]
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8013362:	68b8      	ldr	r0, [r7, #8]
 8013364:	f7fd ff23 	bl	80111ae <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801336c:	2b00      	cmp	r3, #0
 801336e:	d1f0      	bne.n	8013352 <tcp_receive+0x8ce>
 8013370:	e0c3      	b.n	80134fa <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013376:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013378:	e04f      	b.n	801341a <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801337a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801337c:	68db      	ldr	r3, [r3, #12]
 801337e:	899b      	ldrh	r3, [r3, #12]
 8013380:	b29b      	uxth	r3, r3
 8013382:	4618      	mov	r0, r3
 8013384:	f7fb faa2 	bl	800e8cc <lwip_htons>
 8013388:	4603      	mov	r3, r0
 801338a:	f003 0301 	and.w	r3, r3, #1
 801338e:	2b00      	cmp	r3, #0
 8013390:	d03b      	beq.n	801340a <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013392:	4b16      	ldr	r3, [pc, #88]	; (80133ec <tcp_receive+0x968>)
 8013394:	68db      	ldr	r3, [r3, #12]
 8013396:	899b      	ldrh	r3, [r3, #12]
 8013398:	b29b      	uxth	r3, r3
 801339a:	4618      	mov	r0, r3
 801339c:	f7fb fa96 	bl	800e8cc <lwip_htons>
 80133a0:	4603      	mov	r3, r0
 80133a2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d12f      	bne.n	801340a <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80133aa:	4b10      	ldr	r3, [pc, #64]	; (80133ec <tcp_receive+0x968>)
 80133ac:	68db      	ldr	r3, [r3, #12]
 80133ae:	899b      	ldrh	r3, [r3, #12]
 80133b0:	b29c      	uxth	r4, r3
 80133b2:	2001      	movs	r0, #1
 80133b4:	f7fb fa8a 	bl	800e8cc <lwip_htons>
 80133b8:	4603      	mov	r3, r0
 80133ba:	461a      	mov	r2, r3
 80133bc:	4b0b      	ldr	r3, [pc, #44]	; (80133ec <tcp_receive+0x968>)
 80133be:	68db      	ldr	r3, [r3, #12]
 80133c0:	4322      	orrs	r2, r4
 80133c2:	b292      	uxth	r2, r2
 80133c4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80133c6:	4b09      	ldr	r3, [pc, #36]	; (80133ec <tcp_receive+0x968>)
 80133c8:	891c      	ldrh	r4, [r3, #8]
 80133ca:	4b08      	ldr	r3, [pc, #32]	; (80133ec <tcp_receive+0x968>)
 80133cc:	68db      	ldr	r3, [r3, #12]
 80133ce:	899b      	ldrh	r3, [r3, #12]
 80133d0:	b29b      	uxth	r3, r3
 80133d2:	4618      	mov	r0, r3
 80133d4:	f7fb fa7a 	bl	800e8cc <lwip_htons>
 80133d8:	4603      	mov	r3, r0
 80133da:	f003 0303 	and.w	r3, r3, #3
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d00e      	beq.n	8013400 <tcp_receive+0x97c>
 80133e2:	2301      	movs	r3, #1
 80133e4:	e00d      	b.n	8013402 <tcp_receive+0x97e>
 80133e6:	bf00      	nop
 80133e8:	24021820 	.word	0x24021820
 80133ec:	24021800 	.word	0x24021800
 80133f0:	2402182a 	.word	0x2402182a
 80133f4:	08019900 	.word	0x08019900
 80133f8:	08019bcc 	.word	0x08019bcc
 80133fc:	08019944 	.word	0x08019944
 8013400:	2300      	movs	r3, #0
 8013402:	4423      	add	r3, r4
 8013404:	b29a      	uxth	r2, r3
 8013406:	4b95      	ldr	r3, [pc, #596]	; (801365c <tcp_receive+0xbd8>)
 8013408:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 801340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801340c:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 801340e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8013414:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013416:	f7fd feca 	bl	80111ae <tcp_seg_free>
            while (next &&
 801341a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801341c:	2b00      	cmp	r3, #0
 801341e:	d00e      	beq.n	801343e <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013420:	4b8e      	ldr	r3, [pc, #568]	; (801365c <tcp_receive+0xbd8>)
 8013422:	881b      	ldrh	r3, [r3, #0]
 8013424:	461a      	mov	r2, r3
 8013426:	4b8e      	ldr	r3, [pc, #568]	; (8013660 <tcp_receive+0xbdc>)
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	441a      	add	r2, r3
 801342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801342e:	68db      	ldr	r3, [r3, #12]
 8013430:	685b      	ldr	r3, [r3, #4]
 8013432:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013434:	8909      	ldrh	r1, [r1, #8]
 8013436:	440b      	add	r3, r1
 8013438:	1ad3      	subs	r3, r2, r3
            while (next &&
 801343a:	2b00      	cmp	r3, #0
 801343c:	da9d      	bge.n	801337a <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801343e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013440:	2b00      	cmp	r3, #0
 8013442:	d057      	beq.n	80134f4 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 8013444:	4b85      	ldr	r3, [pc, #532]	; (801365c <tcp_receive+0xbd8>)
 8013446:	881b      	ldrh	r3, [r3, #0]
 8013448:	461a      	mov	r2, r3
 801344a:	4b85      	ldr	r3, [pc, #532]	; (8013660 <tcp_receive+0xbdc>)
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	441a      	add	r2, r3
 8013450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013452:	68db      	ldr	r3, [r3, #12]
 8013454:	685b      	ldr	r3, [r3, #4]
 8013456:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013458:	2b00      	cmp	r3, #0
 801345a:	dd4b      	ble.n	80134f4 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801345c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801345e:	68db      	ldr	r3, [r3, #12]
 8013460:	685b      	ldr	r3, [r3, #4]
 8013462:	b29a      	uxth	r2, r3
 8013464:	4b7e      	ldr	r3, [pc, #504]	; (8013660 <tcp_receive+0xbdc>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	b29b      	uxth	r3, r3
 801346a:	1ad3      	subs	r3, r2, r3
 801346c:	b29a      	uxth	r2, r3
 801346e:	4b7d      	ldr	r3, [pc, #500]	; (8013664 <tcp_receive+0xbe0>)
 8013470:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013472:	4b7c      	ldr	r3, [pc, #496]	; (8013664 <tcp_receive+0xbe0>)
 8013474:	68db      	ldr	r3, [r3, #12]
 8013476:	899b      	ldrh	r3, [r3, #12]
 8013478:	b29b      	uxth	r3, r3
 801347a:	4618      	mov	r0, r3
 801347c:	f7fb fa26 	bl	800e8cc <lwip_htons>
 8013480:	4603      	mov	r3, r0
 8013482:	f003 0302 	and.w	r3, r3, #2
 8013486:	2b00      	cmp	r3, #0
 8013488:	d005      	beq.n	8013496 <tcp_receive+0xa12>
                inseg.len -= 1;
 801348a:	4b76      	ldr	r3, [pc, #472]	; (8013664 <tcp_receive+0xbe0>)
 801348c:	891b      	ldrh	r3, [r3, #8]
 801348e:	3b01      	subs	r3, #1
 8013490:	b29a      	uxth	r2, r3
 8013492:	4b74      	ldr	r3, [pc, #464]	; (8013664 <tcp_receive+0xbe0>)
 8013494:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013496:	4b73      	ldr	r3, [pc, #460]	; (8013664 <tcp_receive+0xbe0>)
 8013498:	685a      	ldr	r2, [r3, #4]
 801349a:	4b72      	ldr	r3, [pc, #456]	; (8013664 <tcp_receive+0xbe0>)
 801349c:	891b      	ldrh	r3, [r3, #8]
 801349e:	4619      	mov	r1, r3
 80134a0:	4610      	mov	r0, r2
 80134a2:	f7fc fbb7 	bl	800fc14 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80134a6:	4b6f      	ldr	r3, [pc, #444]	; (8013664 <tcp_receive+0xbe0>)
 80134a8:	891c      	ldrh	r4, [r3, #8]
 80134aa:	4b6e      	ldr	r3, [pc, #440]	; (8013664 <tcp_receive+0xbe0>)
 80134ac:	68db      	ldr	r3, [r3, #12]
 80134ae:	899b      	ldrh	r3, [r3, #12]
 80134b0:	b29b      	uxth	r3, r3
 80134b2:	4618      	mov	r0, r3
 80134b4:	f7fb fa0a 	bl	800e8cc <lwip_htons>
 80134b8:	4603      	mov	r3, r0
 80134ba:	f003 0303 	and.w	r3, r3, #3
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d001      	beq.n	80134c6 <tcp_receive+0xa42>
 80134c2:	2301      	movs	r3, #1
 80134c4:	e000      	b.n	80134c8 <tcp_receive+0xa44>
 80134c6:	2300      	movs	r3, #0
 80134c8:	4423      	add	r3, r4
 80134ca:	b29a      	uxth	r2, r3
 80134cc:	4b63      	ldr	r3, [pc, #396]	; (801365c <tcp_receive+0xbd8>)
 80134ce:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80134d0:	4b62      	ldr	r3, [pc, #392]	; (801365c <tcp_receive+0xbd8>)
 80134d2:	881b      	ldrh	r3, [r3, #0]
 80134d4:	461a      	mov	r2, r3
 80134d6:	4b62      	ldr	r3, [pc, #392]	; (8013660 <tcp_receive+0xbdc>)
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	441a      	add	r2, r3
 80134dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134de:	68db      	ldr	r3, [r3, #12]
 80134e0:	685b      	ldr	r3, [r3, #4]
 80134e2:	429a      	cmp	r2, r3
 80134e4:	d006      	beq.n	80134f4 <tcp_receive+0xa70>
 80134e6:	4b60      	ldr	r3, [pc, #384]	; (8013668 <tcp_receive+0xbe4>)
 80134e8:	f240 52af 	movw	r2, #1455	; 0x5af
 80134ec:	495f      	ldr	r1, [pc, #380]	; (801366c <tcp_receive+0xbe8>)
 80134ee:	4860      	ldr	r0, [pc, #384]	; (8013670 <tcp_receive+0xbec>)
 80134f0:	f004 fa50 	bl	8017994 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134f8:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80134fa:	4b58      	ldr	r3, [pc, #352]	; (801365c <tcp_receive+0xbd8>)
 80134fc:	881b      	ldrh	r3, [r3, #0]
 80134fe:	461a      	mov	r2, r3
 8013500:	4b57      	ldr	r3, [pc, #348]	; (8013660 <tcp_receive+0xbdc>)
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	441a      	add	r2, r3
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801350e:	4b53      	ldr	r3, [pc, #332]	; (801365c <tcp_receive+0xbd8>)
 8013510:	881b      	ldrh	r3, [r3, #0]
 8013512:	429a      	cmp	r2, r3
 8013514:	d206      	bcs.n	8013524 <tcp_receive+0xaa0>
 8013516:	4b54      	ldr	r3, [pc, #336]	; (8013668 <tcp_receive+0xbe4>)
 8013518:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801351c:	4955      	ldr	r1, [pc, #340]	; (8013674 <tcp_receive+0xbf0>)
 801351e:	4854      	ldr	r0, [pc, #336]	; (8013670 <tcp_receive+0xbec>)
 8013520:	f004 fa38 	bl	8017994 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013528:	4b4c      	ldr	r3, [pc, #304]	; (801365c <tcp_receive+0xbd8>)
 801352a:	881b      	ldrh	r3, [r3, #0]
 801352c:	1ad3      	subs	r3, r2, r3
 801352e:	b29a      	uxth	r2, r3
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013534:	6878      	ldr	r0, [r7, #4]
 8013536:	f7fd f9eb 	bl	8010910 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801353a:	4b4a      	ldr	r3, [pc, #296]	; (8013664 <tcp_receive+0xbe0>)
 801353c:	685b      	ldr	r3, [r3, #4]
 801353e:	891b      	ldrh	r3, [r3, #8]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d006      	beq.n	8013552 <tcp_receive+0xace>
          recv_data = inseg.p;
 8013544:	4b47      	ldr	r3, [pc, #284]	; (8013664 <tcp_receive+0xbe0>)
 8013546:	685b      	ldr	r3, [r3, #4]
 8013548:	4a4b      	ldr	r2, [pc, #300]	; (8013678 <tcp_receive+0xbf4>)
 801354a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801354c:	4b45      	ldr	r3, [pc, #276]	; (8013664 <tcp_receive+0xbe0>)
 801354e:	2200      	movs	r2, #0
 8013550:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013552:	4b44      	ldr	r3, [pc, #272]	; (8013664 <tcp_receive+0xbe0>)
 8013554:	68db      	ldr	r3, [r3, #12]
 8013556:	899b      	ldrh	r3, [r3, #12]
 8013558:	b29b      	uxth	r3, r3
 801355a:	4618      	mov	r0, r3
 801355c:	f7fb f9b6 	bl	800e8cc <lwip_htons>
 8013560:	4603      	mov	r3, r0
 8013562:	f003 0301 	and.w	r3, r3, #1
 8013566:	2b00      	cmp	r3, #0
 8013568:	f000 80b4 	beq.w	80136d4 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801356c:	4b43      	ldr	r3, [pc, #268]	; (801367c <tcp_receive+0xbf8>)
 801356e:	781b      	ldrb	r3, [r3, #0]
 8013570:	f043 0320 	orr.w	r3, r3, #32
 8013574:	b2da      	uxtb	r2, r3
 8013576:	4b41      	ldr	r3, [pc, #260]	; (801367c <tcp_receive+0xbf8>)
 8013578:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801357a:	e0ab      	b.n	80136d4 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013580:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013586:	68db      	ldr	r3, [r3, #12]
 8013588:	685b      	ldr	r3, [r3, #4]
 801358a:	4a35      	ldr	r2, [pc, #212]	; (8013660 <tcp_receive+0xbdc>)
 801358c:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	891b      	ldrh	r3, [r3, #8]
 8013592:	461c      	mov	r4, r3
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	68db      	ldr	r3, [r3, #12]
 8013598:	899b      	ldrh	r3, [r3, #12]
 801359a:	b29b      	uxth	r3, r3
 801359c:	4618      	mov	r0, r3
 801359e:	f7fb f995 	bl	800e8cc <lwip_htons>
 80135a2:	4603      	mov	r3, r0
 80135a4:	f003 0303 	and.w	r3, r3, #3
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d001      	beq.n	80135b0 <tcp_receive+0xb2c>
 80135ac:	2301      	movs	r3, #1
 80135ae:	e000      	b.n	80135b2 <tcp_receive+0xb2e>
 80135b0:	2300      	movs	r3, #0
 80135b2:	191a      	adds	r2, r3, r4
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135b8:	441a      	add	r2, r3
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80135c2:	461c      	mov	r4, r3
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	891b      	ldrh	r3, [r3, #8]
 80135c8:	461d      	mov	r5, r3
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	68db      	ldr	r3, [r3, #12]
 80135ce:	899b      	ldrh	r3, [r3, #12]
 80135d0:	b29b      	uxth	r3, r3
 80135d2:	4618      	mov	r0, r3
 80135d4:	f7fb f97a 	bl	800e8cc <lwip_htons>
 80135d8:	4603      	mov	r3, r0
 80135da:	f003 0303 	and.w	r3, r3, #3
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d001      	beq.n	80135e6 <tcp_receive+0xb62>
 80135e2:	2301      	movs	r3, #1
 80135e4:	e000      	b.n	80135e8 <tcp_receive+0xb64>
 80135e6:	2300      	movs	r3, #0
 80135e8:	442b      	add	r3, r5
 80135ea:	429c      	cmp	r4, r3
 80135ec:	d206      	bcs.n	80135fc <tcp_receive+0xb78>
 80135ee:	4b1e      	ldr	r3, [pc, #120]	; (8013668 <tcp_receive+0xbe4>)
 80135f0:	f240 52de 	movw	r2, #1502	; 0x5de
 80135f4:	4922      	ldr	r1, [pc, #136]	; (8013680 <tcp_receive+0xbfc>)
 80135f6:	481e      	ldr	r0, [pc, #120]	; (8013670 <tcp_receive+0xbec>)
 80135f8:	f004 f9cc 	bl	8017994 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	891b      	ldrh	r3, [r3, #8]
 8013600:	461c      	mov	r4, r3
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	68db      	ldr	r3, [r3, #12]
 8013606:	899b      	ldrh	r3, [r3, #12]
 8013608:	b29b      	uxth	r3, r3
 801360a:	4618      	mov	r0, r3
 801360c:	f7fb f95e 	bl	800e8cc <lwip_htons>
 8013610:	4603      	mov	r3, r0
 8013612:	f003 0303 	and.w	r3, r3, #3
 8013616:	2b00      	cmp	r3, #0
 8013618:	d001      	beq.n	801361e <tcp_receive+0xb9a>
 801361a:	2301      	movs	r3, #1
 801361c:	e000      	b.n	8013620 <tcp_receive+0xb9c>
 801361e:	2300      	movs	r3, #0
 8013620:	1919      	adds	r1, r3, r4
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013626:	b28b      	uxth	r3, r1
 8013628:	1ad3      	subs	r3, r2, r3
 801362a:	b29a      	uxth	r2, r3
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013630:	6878      	ldr	r0, [r7, #4]
 8013632:	f7fd f96d 	bl	8010910 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	685b      	ldr	r3, [r3, #4]
 801363a:	891b      	ldrh	r3, [r3, #8]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d028      	beq.n	8013692 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013640:	4b0d      	ldr	r3, [pc, #52]	; (8013678 <tcp_receive+0xbf4>)
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d01d      	beq.n	8013684 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8013648:	4b0b      	ldr	r3, [pc, #44]	; (8013678 <tcp_receive+0xbf4>)
 801364a:	681a      	ldr	r2, [r3, #0]
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	685b      	ldr	r3, [r3, #4]
 8013650:	4619      	mov	r1, r3
 8013652:	4610      	mov	r0, r2
 8013654:	f7fc fd2c 	bl	80100b0 <pbuf_cat>
 8013658:	e018      	b.n	801368c <tcp_receive+0xc08>
 801365a:	bf00      	nop
 801365c:	2402182a 	.word	0x2402182a
 8013660:	24021820 	.word	0x24021820
 8013664:	24021800 	.word	0x24021800
 8013668:	08019900 	.word	0x08019900
 801366c:	08019c04 	.word	0x08019c04
 8013670:	08019944 	.word	0x08019944
 8013674:	08019c40 	.word	0x08019c40
 8013678:	24021830 	.word	0x24021830
 801367c:	2402182d 	.word	0x2402182d
 8013680:	08019c60 	.word	0x08019c60
            } else {
              recv_data = cseg->p;
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	685b      	ldr	r3, [r3, #4]
 8013688:	4a71      	ldr	r2, [pc, #452]	; (8013850 <tcp_receive+0xdcc>)
 801368a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	2200      	movs	r2, #0
 8013690:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	68db      	ldr	r3, [r3, #12]
 8013696:	899b      	ldrh	r3, [r3, #12]
 8013698:	b29b      	uxth	r3, r3
 801369a:	4618      	mov	r0, r3
 801369c:	f7fb f916 	bl	800e8cc <lwip_htons>
 80136a0:	4603      	mov	r3, r0
 80136a2:	f003 0301 	and.w	r3, r3, #1
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d00d      	beq.n	80136c6 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80136aa:	4b6a      	ldr	r3, [pc, #424]	; (8013854 <tcp_receive+0xdd0>)
 80136ac:	781b      	ldrb	r3, [r3, #0]
 80136ae:	f043 0320 	orr.w	r3, r3, #32
 80136b2:	b2da      	uxtb	r2, r3
 80136b4:	4b67      	ldr	r3, [pc, #412]	; (8013854 <tcp_receive+0xdd0>)
 80136b6:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	7d1b      	ldrb	r3, [r3, #20]
 80136bc:	2b04      	cmp	r3, #4
 80136be:	d102      	bne.n	80136c6 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	2207      	movs	r2, #7
 80136c4:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	681a      	ldr	r2, [r3, #0]
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 80136ce:	68f8      	ldr	r0, [r7, #12]
 80136d0:	f7fd fd6d 	bl	80111ae <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d008      	beq.n	80136ee <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136e0:	68db      	ldr	r3, [r3, #12]
 80136e2:	685a      	ldr	r2, [r3, #4]
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80136e8:	429a      	cmp	r2, r3
 80136ea:	f43f af47 	beq.w	801357c <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	7e9b      	ldrb	r3, [r3, #26]
 80136f2:	f003 0301 	and.w	r3, r3, #1
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d00e      	beq.n	8013718 <tcp_receive+0xc94>
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	7e9b      	ldrb	r3, [r3, #26]
 80136fe:	f023 0301 	bic.w	r3, r3, #1
 8013702:	b2da      	uxtb	r2, r3
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	769a      	strb	r2, [r3, #26]
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	7e9b      	ldrb	r3, [r3, #26]
 801370c:	f043 0302 	orr.w	r3, r3, #2
 8013710:	b2da      	uxtb	r2, r3
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013716:	e181      	b.n	8013a1c <tcp_receive+0xf98>
        tcp_ack(pcb);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	7e9b      	ldrb	r3, [r3, #26]
 801371c:	f043 0301 	orr.w	r3, r3, #1
 8013720:	b2da      	uxtb	r2, r3
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013726:	e179      	b.n	8013a1c <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8013728:	6878      	ldr	r0, [r7, #4]
 801372a:	f000 fc93 	bl	8014054 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013732:	2b00      	cmp	r3, #0
 8013734:	d106      	bne.n	8013744 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013736:	4848      	ldr	r0, [pc, #288]	; (8013858 <tcp_receive+0xdd4>)
 8013738:	f7fd fd51 	bl	80111de <tcp_seg_copy>
 801373c:	4602      	mov	r2, r0
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8013742:	e16b      	b.n	8013a1c <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8013744:	2300      	movs	r3, #0
 8013746:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801374c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801374e:	e150      	b.n	80139f2 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8013750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013752:	68db      	ldr	r3, [r3, #12]
 8013754:	685a      	ldr	r2, [r3, #4]
 8013756:	4b41      	ldr	r3, [pc, #260]	; (801385c <tcp_receive+0xdd8>)
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	429a      	cmp	r2, r3
 801375c:	d11d      	bne.n	801379a <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801375e:	4b3e      	ldr	r3, [pc, #248]	; (8013858 <tcp_receive+0xdd4>)
 8013760:	891a      	ldrh	r2, [r3, #8]
 8013762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013764:	891b      	ldrh	r3, [r3, #8]
 8013766:	429a      	cmp	r2, r3
 8013768:	f240 8148 	bls.w	80139fc <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 801376c:	483a      	ldr	r0, [pc, #232]	; (8013858 <tcp_receive+0xdd4>)
 801376e:	f7fd fd36 	bl	80111de <tcp_seg_copy>
 8013772:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	2b00      	cmp	r3, #0
 8013778:	f000 8142 	beq.w	8013a00 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 801377c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801377e:	2b00      	cmp	r3, #0
 8013780:	d003      	beq.n	801378a <tcp_receive+0xd06>
                    prev->next = cseg;
 8013782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013784:	68fa      	ldr	r2, [r7, #12]
 8013786:	601a      	str	r2, [r3, #0]
 8013788:	e002      	b.n	8013790 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	68fa      	ldr	r2, [r7, #12]
 801378e:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013790:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013792:	68f8      	ldr	r0, [r7, #12]
 8013794:	f7ff f900 	bl	8012998 <tcp_oos_insert_segment>
                }
                break;
 8013798:	e132      	b.n	8013a00 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801379c:	2b00      	cmp	r3, #0
 801379e:	d117      	bne.n	80137d0 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80137a0:	4b2e      	ldr	r3, [pc, #184]	; (801385c <tcp_receive+0xdd8>)
 80137a2:	681a      	ldr	r2, [r3, #0]
 80137a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137a6:	68db      	ldr	r3, [r3, #12]
 80137a8:	685b      	ldr	r3, [r3, #4]
 80137aa:	1ad3      	subs	r3, r2, r3
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	da57      	bge.n	8013860 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80137b0:	4829      	ldr	r0, [pc, #164]	; (8013858 <tcp_receive+0xdd4>)
 80137b2:	f7fd fd14 	bl	80111de <tcp_seg_copy>
 80137b6:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	f000 8122 	beq.w	8013a04 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	68fa      	ldr	r2, [r7, #12]
 80137c4:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80137c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80137c8:	68f8      	ldr	r0, [r7, #12]
 80137ca:	f7ff f8e5 	bl	8012998 <tcp_oos_insert_segment>
                  }
                  break;
 80137ce:	e119      	b.n	8013a04 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80137d0:	4b22      	ldr	r3, [pc, #136]	; (801385c <tcp_receive+0xdd8>)
 80137d2:	681a      	ldr	r2, [r3, #0]
 80137d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137d6:	68db      	ldr	r3, [r3, #12]
 80137d8:	685b      	ldr	r3, [r3, #4]
 80137da:	1ad3      	subs	r3, r2, r3
 80137dc:	3b01      	subs	r3, #1
 80137de:	2b00      	cmp	r3, #0
 80137e0:	db3e      	blt.n	8013860 <tcp_receive+0xddc>
 80137e2:	4b1e      	ldr	r3, [pc, #120]	; (801385c <tcp_receive+0xdd8>)
 80137e4:	681a      	ldr	r2, [r3, #0]
 80137e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137e8:	68db      	ldr	r3, [r3, #12]
 80137ea:	685b      	ldr	r3, [r3, #4]
 80137ec:	1ad3      	subs	r3, r2, r3
 80137ee:	3301      	adds	r3, #1
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	dc35      	bgt.n	8013860 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 80137f4:	4818      	ldr	r0, [pc, #96]	; (8013858 <tcp_receive+0xdd4>)
 80137f6:	f7fd fcf2 	bl	80111de <tcp_seg_copy>
 80137fa:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	f000 8102 	beq.w	8013a08 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013806:	68db      	ldr	r3, [r3, #12]
 8013808:	685b      	ldr	r3, [r3, #4]
 801380a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801380c:	8912      	ldrh	r2, [r2, #8]
 801380e:	441a      	add	r2, r3
 8013810:	4b12      	ldr	r3, [pc, #72]	; (801385c <tcp_receive+0xdd8>)
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	1ad3      	subs	r3, r2, r3
 8013816:	2b00      	cmp	r3, #0
 8013818:	dd12      	ble.n	8013840 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801381a:	4b10      	ldr	r3, [pc, #64]	; (801385c <tcp_receive+0xdd8>)
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	b29a      	uxth	r2, r3
 8013820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013822:	68db      	ldr	r3, [r3, #12]
 8013824:	685b      	ldr	r3, [r3, #4]
 8013826:	b29b      	uxth	r3, r3
 8013828:	1ad3      	subs	r3, r2, r3
 801382a:	b29a      	uxth	r2, r3
 801382c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801382e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013832:	685a      	ldr	r2, [r3, #4]
 8013834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013836:	891b      	ldrh	r3, [r3, #8]
 8013838:	4619      	mov	r1, r3
 801383a:	4610      	mov	r0, r2
 801383c:	f7fc f9ea 	bl	800fc14 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013842:	68fa      	ldr	r2, [r7, #12]
 8013844:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013846:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013848:	68f8      	ldr	r0, [r7, #12]
 801384a:	f7ff f8a5 	bl	8012998 <tcp_oos_insert_segment>
                  }
                  break;
 801384e:	e0db      	b.n	8013a08 <tcp_receive+0xf84>
 8013850:	24021830 	.word	0x24021830
 8013854:	2402182d 	.word	0x2402182d
 8013858:	24021800 	.word	0x24021800
 801385c:	24021820 	.word	0x24021820
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	2b00      	cmp	r3, #0
 8013866:	f040 80bf 	bne.w	80139e8 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801386a:	4b7c      	ldr	r3, [pc, #496]	; (8013a5c <tcp_receive+0xfd8>)
 801386c:	681a      	ldr	r2, [r3, #0]
 801386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013870:	68db      	ldr	r3, [r3, #12]
 8013872:	685b      	ldr	r3, [r3, #4]
 8013874:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013876:	2b00      	cmp	r3, #0
 8013878:	f340 80b6 	ble.w	80139e8 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801387c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801387e:	68db      	ldr	r3, [r3, #12]
 8013880:	899b      	ldrh	r3, [r3, #12]
 8013882:	b29b      	uxth	r3, r3
 8013884:	4618      	mov	r0, r3
 8013886:	f7fb f821 	bl	800e8cc <lwip_htons>
 801388a:	4603      	mov	r3, r0
 801388c:	f003 0301 	and.w	r3, r3, #1
 8013890:	2b00      	cmp	r3, #0
 8013892:	f040 80bb 	bne.w	8013a0c <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013896:	4872      	ldr	r0, [pc, #456]	; (8013a60 <tcp_receive+0xfdc>)
 8013898:	f7fd fca1 	bl	80111de <tcp_seg_copy>
 801389c:	4602      	mov	r2, r0
 801389e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138a0:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80138a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	f000 80b2 	beq.w	8013a10 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80138ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ae:	68db      	ldr	r3, [r3, #12]
 80138b0:	685b      	ldr	r3, [r3, #4]
 80138b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138b4:	8912      	ldrh	r2, [r2, #8]
 80138b6:	441a      	add	r2, r3
 80138b8:	4b68      	ldr	r3, [pc, #416]	; (8013a5c <tcp_receive+0xfd8>)
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	1ad3      	subs	r3, r2, r3
 80138be:	2b00      	cmp	r3, #0
 80138c0:	dd12      	ble.n	80138e8 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80138c2:	4b66      	ldr	r3, [pc, #408]	; (8013a5c <tcp_receive+0xfd8>)
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	b29a      	uxth	r2, r3
 80138c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ca:	68db      	ldr	r3, [r3, #12]
 80138cc:	685b      	ldr	r3, [r3, #4]
 80138ce:	b29b      	uxth	r3, r3
 80138d0:	1ad3      	subs	r3, r2, r3
 80138d2:	b29a      	uxth	r2, r3
 80138d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138d6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80138d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138da:	685a      	ldr	r2, [r3, #4]
 80138dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138de:	891b      	ldrh	r3, [r3, #8]
 80138e0:	4619      	mov	r1, r3
 80138e2:	4610      	mov	r0, r2
 80138e4:	f7fc f996 	bl	800fc14 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80138e8:	4b5e      	ldr	r3, [pc, #376]	; (8013a64 <tcp_receive+0xfe0>)
 80138ea:	881b      	ldrh	r3, [r3, #0]
 80138ec:	461a      	mov	r2, r3
 80138ee:	4b5b      	ldr	r3, [pc, #364]	; (8013a5c <tcp_receive+0xfd8>)
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	441a      	add	r2, r3
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138f8:	6879      	ldr	r1, [r7, #4]
 80138fa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80138fc:	440b      	add	r3, r1
 80138fe:	1ad3      	subs	r3, r2, r3
 8013900:	2b00      	cmp	r3, #0
 8013902:	f340 8085 	ble.w	8013a10 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	68db      	ldr	r3, [r3, #12]
 801390c:	899b      	ldrh	r3, [r3, #12]
 801390e:	b29b      	uxth	r3, r3
 8013910:	4618      	mov	r0, r3
 8013912:	f7fa ffdb 	bl	800e8cc <lwip_htons>
 8013916:	4603      	mov	r3, r0
 8013918:	f003 0301 	and.w	r3, r3, #1
 801391c:	2b00      	cmp	r3, #0
 801391e:	d01e      	beq.n	801395e <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	68db      	ldr	r3, [r3, #12]
 8013926:	899b      	ldrh	r3, [r3, #12]
 8013928:	b29b      	uxth	r3, r3
 801392a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801392e:	b29c      	uxth	r4, r3
 8013930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	68db      	ldr	r3, [r3, #12]
 8013936:	899b      	ldrh	r3, [r3, #12]
 8013938:	b29b      	uxth	r3, r3
 801393a:	4618      	mov	r0, r3
 801393c:	f7fa ffc6 	bl	800e8cc <lwip_htons>
 8013940:	4603      	mov	r3, r0
 8013942:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013946:	b29b      	uxth	r3, r3
 8013948:	4618      	mov	r0, r3
 801394a:	f7fa ffbf 	bl	800e8cc <lwip_htons>
 801394e:	4603      	mov	r3, r0
 8013950:	461a      	mov	r2, r3
 8013952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	68db      	ldr	r3, [r3, #12]
 8013958:	4322      	orrs	r2, r4
 801395a:	b292      	uxth	r2, r2
 801395c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013962:	b29a      	uxth	r2, r3
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013968:	4413      	add	r3, r2
 801396a:	b299      	uxth	r1, r3
 801396c:	4b3b      	ldr	r3, [pc, #236]	; (8013a5c <tcp_receive+0xfd8>)
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	b29a      	uxth	r2, r3
 8013972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	1a8a      	subs	r2, r1, r2
 8013978:	b292      	uxth	r2, r2
 801397a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	685a      	ldr	r2, [r3, #4]
 8013982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	891b      	ldrh	r3, [r3, #8]
 8013988:	4619      	mov	r1, r3
 801398a:	4610      	mov	r0, r2
 801398c:	f7fc f942 	bl	800fc14 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	891c      	ldrh	r4, [r3, #8]
 8013996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	68db      	ldr	r3, [r3, #12]
 801399c:	899b      	ldrh	r3, [r3, #12]
 801399e:	b29b      	uxth	r3, r3
 80139a0:	4618      	mov	r0, r3
 80139a2:	f7fa ff93 	bl	800e8cc <lwip_htons>
 80139a6:	4603      	mov	r3, r0
 80139a8:	f003 0303 	and.w	r3, r3, #3
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d001      	beq.n	80139b4 <tcp_receive+0xf30>
 80139b0:	2301      	movs	r3, #1
 80139b2:	e000      	b.n	80139b6 <tcp_receive+0xf32>
 80139b4:	2300      	movs	r3, #0
 80139b6:	4423      	add	r3, r4
 80139b8:	b29a      	uxth	r2, r3
 80139ba:	4b2a      	ldr	r3, [pc, #168]	; (8013a64 <tcp_receive+0xfe0>)
 80139bc:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80139be:	4b29      	ldr	r3, [pc, #164]	; (8013a64 <tcp_receive+0xfe0>)
 80139c0:	881b      	ldrh	r3, [r3, #0]
 80139c2:	461a      	mov	r2, r3
 80139c4:	4b25      	ldr	r3, [pc, #148]	; (8013a5c <tcp_receive+0xfd8>)
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	441a      	add	r2, r3
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139ce:	6879      	ldr	r1, [r7, #4]
 80139d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80139d2:	440b      	add	r3, r1
 80139d4:	429a      	cmp	r2, r3
 80139d6:	d01b      	beq.n	8013a10 <tcp_receive+0xf8c>
 80139d8:	4b23      	ldr	r3, [pc, #140]	; (8013a68 <tcp_receive+0xfe4>)
 80139da:	f240 627b 	movw	r2, #1659	; 0x67b
 80139de:	4923      	ldr	r1, [pc, #140]	; (8013a6c <tcp_receive+0xfe8>)
 80139e0:	4823      	ldr	r0, [pc, #140]	; (8013a70 <tcp_receive+0xfec>)
 80139e2:	f003 ffd7 	bl	8017994 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80139e6:	e013      	b.n	8013a10 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 80139e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139ea:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80139ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80139f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	f47f aeab 	bne.w	8013750 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 80139fa:	e00f      	b.n	8013a1c <tcp_receive+0xf98>
                break;
 80139fc:	bf00      	nop
 80139fe:	e00d      	b.n	8013a1c <tcp_receive+0xf98>
                break;
 8013a00:	bf00      	nop
 8013a02:	e00b      	b.n	8013a1c <tcp_receive+0xf98>
                  break;
 8013a04:	bf00      	nop
 8013a06:	e009      	b.n	8013a1c <tcp_receive+0xf98>
                  break;
 8013a08:	bf00      	nop
 8013a0a:	e007      	b.n	8013a1c <tcp_receive+0xf98>
                  break;
 8013a0c:	bf00      	nop
 8013a0e:	e005      	b.n	8013a1c <tcp_receive+0xf98>
                break;
 8013a10:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8013a12:	e003      	b.n	8013a1c <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013a14:	6878      	ldr	r0, [r7, #4]
 8013a16:	f000 fb1d 	bl	8014054 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013a1a:	e01a      	b.n	8013a52 <tcp_receive+0xfce>
 8013a1c:	e019      	b.n	8013a52 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013a1e:	4b0f      	ldr	r3, [pc, #60]	; (8013a5c <tcp_receive+0xfd8>)
 8013a20:	681a      	ldr	r2, [r3, #0]
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a26:	1ad3      	subs	r3, r2, r3
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	db0a      	blt.n	8013a42 <tcp_receive+0xfbe>
 8013a2c:	4b0b      	ldr	r3, [pc, #44]	; (8013a5c <tcp_receive+0xfd8>)
 8013a2e:	681a      	ldr	r2, [r3, #0]
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a34:	6879      	ldr	r1, [r7, #4]
 8013a36:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013a38:	440b      	add	r3, r1
 8013a3a:	1ad3      	subs	r3, r2, r3
 8013a3c:	3301      	adds	r3, #1
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	dd07      	ble.n	8013a52 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	7e9b      	ldrb	r3, [r3, #26]
 8013a46:	f043 0302 	orr.w	r3, r3, #2
 8013a4a:	b2da      	uxtb	r2, r3
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8013a50:	e7ff      	b.n	8013a52 <tcp_receive+0xfce>
 8013a52:	bf00      	nop
 8013a54:	3734      	adds	r7, #52	; 0x34
 8013a56:	46bd      	mov	sp, r7
 8013a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a5a:	bf00      	nop
 8013a5c:	24021820 	.word	0x24021820
 8013a60:	24021800 	.word	0x24021800
 8013a64:	2402182a 	.word	0x2402182a
 8013a68:	08019900 	.word	0x08019900
 8013a6c:	08019bcc 	.word	0x08019bcc
 8013a70:	08019944 	.word	0x08019944

08013a74 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8013a74:	b480      	push	{r7}
 8013a76:	b083      	sub	sp, #12
 8013a78:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8013a7a:	4b18      	ldr	r3, [pc, #96]	; (8013adc <tcp_getoptbyte+0x68>)
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d005      	beq.n	8013a8e <tcp_getoptbyte+0x1a>
 8013a82:	4b17      	ldr	r3, [pc, #92]	; (8013ae0 <tcp_getoptbyte+0x6c>)
 8013a84:	881a      	ldrh	r2, [r3, #0]
 8013a86:	4b17      	ldr	r3, [pc, #92]	; (8013ae4 <tcp_getoptbyte+0x70>)
 8013a88:	881b      	ldrh	r3, [r3, #0]
 8013a8a:	429a      	cmp	r2, r3
 8013a8c:	d20e      	bcs.n	8013aac <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8013a8e:	4b16      	ldr	r3, [pc, #88]	; (8013ae8 <tcp_getoptbyte+0x74>)
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	3314      	adds	r3, #20
 8013a94:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8013a96:	4b12      	ldr	r3, [pc, #72]	; (8013ae0 <tcp_getoptbyte+0x6c>)
 8013a98:	881b      	ldrh	r3, [r3, #0]
 8013a9a:	1c5a      	adds	r2, r3, #1
 8013a9c:	b291      	uxth	r1, r2
 8013a9e:	4a10      	ldr	r2, [pc, #64]	; (8013ae0 <tcp_getoptbyte+0x6c>)
 8013aa0:	8011      	strh	r1, [r2, #0]
 8013aa2:	461a      	mov	r2, r3
 8013aa4:	683b      	ldr	r3, [r7, #0]
 8013aa6:	4413      	add	r3, r2
 8013aa8:	781b      	ldrb	r3, [r3, #0]
 8013aaa:	e010      	b.n	8013ace <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8013aac:	4b0c      	ldr	r3, [pc, #48]	; (8013ae0 <tcp_getoptbyte+0x6c>)
 8013aae:	881b      	ldrh	r3, [r3, #0]
 8013ab0:	1c5a      	adds	r2, r3, #1
 8013ab2:	b291      	uxth	r1, r2
 8013ab4:	4a0a      	ldr	r2, [pc, #40]	; (8013ae0 <tcp_getoptbyte+0x6c>)
 8013ab6:	8011      	strh	r1, [r2, #0]
 8013ab8:	b2da      	uxtb	r2, r3
 8013aba:	4b0a      	ldr	r3, [pc, #40]	; (8013ae4 <tcp_getoptbyte+0x70>)
 8013abc:	881b      	ldrh	r3, [r3, #0]
 8013abe:	b2db      	uxtb	r3, r3
 8013ac0:	1ad3      	subs	r3, r2, r3
 8013ac2:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8013ac4:	4b05      	ldr	r3, [pc, #20]	; (8013adc <tcp_getoptbyte+0x68>)
 8013ac6:	681a      	ldr	r2, [r3, #0]
 8013ac8:	79fb      	ldrb	r3, [r7, #7]
 8013aca:	4413      	add	r3, r2
 8013acc:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013ace:	4618      	mov	r0, r3
 8013ad0:	370c      	adds	r7, #12
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad8:	4770      	bx	lr
 8013ada:	bf00      	nop
 8013adc:	24021818 	.word	0x24021818
 8013ae0:	2402181c 	.word	0x2402181c
 8013ae4:	24021816 	.word	0x24021816
 8013ae8:	24021810 	.word	0x24021810

08013aec <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b084      	sub	sp, #16
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013af4:	4b2d      	ldr	r3, [pc, #180]	; (8013bac <tcp_parseopt+0xc0>)
 8013af6:	881b      	ldrh	r3, [r3, #0]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d053      	beq.n	8013ba4 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013afc:	4b2c      	ldr	r3, [pc, #176]	; (8013bb0 <tcp_parseopt+0xc4>)
 8013afe:	2200      	movs	r2, #0
 8013b00:	801a      	strh	r2, [r3, #0]
 8013b02:	e043      	b.n	8013b8c <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8013b04:	f7ff ffb6 	bl	8013a74 <tcp_getoptbyte>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013b0c:	7bfb      	ldrb	r3, [r7, #15]
 8013b0e:	2b01      	cmp	r3, #1
 8013b10:	d03c      	beq.n	8013b8c <tcp_parseopt+0xa0>
 8013b12:	2b02      	cmp	r3, #2
 8013b14:	d002      	beq.n	8013b1c <tcp_parseopt+0x30>
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d03f      	beq.n	8013b9a <tcp_parseopt+0xae>
 8013b1a:	e026      	b.n	8013b6a <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013b1c:	f7ff ffaa 	bl	8013a74 <tcp_getoptbyte>
 8013b20:	4603      	mov	r3, r0
 8013b22:	2b04      	cmp	r3, #4
 8013b24:	d13b      	bne.n	8013b9e <tcp_parseopt+0xb2>
 8013b26:	4b22      	ldr	r3, [pc, #136]	; (8013bb0 <tcp_parseopt+0xc4>)
 8013b28:	881b      	ldrh	r3, [r3, #0]
 8013b2a:	3302      	adds	r3, #2
 8013b2c:	4a1f      	ldr	r2, [pc, #124]	; (8013bac <tcp_parseopt+0xc0>)
 8013b2e:	8812      	ldrh	r2, [r2, #0]
 8013b30:	4293      	cmp	r3, r2
 8013b32:	dc34      	bgt.n	8013b9e <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8013b34:	f7ff ff9e 	bl	8013a74 <tcp_getoptbyte>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	b29b      	uxth	r3, r3
 8013b3c:	021b      	lsls	r3, r3, #8
 8013b3e:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8013b40:	f7ff ff98 	bl	8013a74 <tcp_getoptbyte>
 8013b44:	4603      	mov	r3, r0
 8013b46:	b29a      	uxth	r2, r3
 8013b48:	89bb      	ldrh	r3, [r7, #12]
 8013b4a:	4313      	orrs	r3, r2
 8013b4c:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013b4e:	89bb      	ldrh	r3, [r7, #12]
 8013b50:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013b54:	d804      	bhi.n	8013b60 <tcp_parseopt+0x74>
 8013b56:	89bb      	ldrh	r3, [r7, #12]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d001      	beq.n	8013b60 <tcp_parseopt+0x74>
 8013b5c:	89ba      	ldrh	r2, [r7, #12]
 8013b5e:	e001      	b.n	8013b64 <tcp_parseopt+0x78>
 8013b60:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8013b68:	e010      	b.n	8013b8c <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8013b6a:	f7ff ff83 	bl	8013a74 <tcp_getoptbyte>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8013b72:	7afb      	ldrb	r3, [r7, #11]
 8013b74:	2b01      	cmp	r3, #1
 8013b76:	d914      	bls.n	8013ba2 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8013b78:	7afb      	ldrb	r3, [r7, #11]
 8013b7a:	b29a      	uxth	r2, r3
 8013b7c:	4b0c      	ldr	r3, [pc, #48]	; (8013bb0 <tcp_parseopt+0xc4>)
 8013b7e:	881b      	ldrh	r3, [r3, #0]
 8013b80:	4413      	add	r3, r2
 8013b82:	b29b      	uxth	r3, r3
 8013b84:	3b02      	subs	r3, #2
 8013b86:	b29a      	uxth	r2, r3
 8013b88:	4b09      	ldr	r3, [pc, #36]	; (8013bb0 <tcp_parseopt+0xc4>)
 8013b8a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013b8c:	4b08      	ldr	r3, [pc, #32]	; (8013bb0 <tcp_parseopt+0xc4>)
 8013b8e:	881a      	ldrh	r2, [r3, #0]
 8013b90:	4b06      	ldr	r3, [pc, #24]	; (8013bac <tcp_parseopt+0xc0>)
 8013b92:	881b      	ldrh	r3, [r3, #0]
 8013b94:	429a      	cmp	r2, r3
 8013b96:	d3b5      	bcc.n	8013b04 <tcp_parseopt+0x18>
 8013b98:	e004      	b.n	8013ba4 <tcp_parseopt+0xb8>
        return;
 8013b9a:	bf00      	nop
 8013b9c:	e002      	b.n	8013ba4 <tcp_parseopt+0xb8>
          return;
 8013b9e:	bf00      	nop
 8013ba0:	e000      	b.n	8013ba4 <tcp_parseopt+0xb8>
          return;
 8013ba2:	bf00      	nop
      }
    }
  }
}
 8013ba4:	3710      	adds	r7, #16
 8013ba6:	46bd      	mov	sp, r7
 8013ba8:	bd80      	pop	{r7, pc}
 8013baa:	bf00      	nop
 8013bac:	24021814 	.word	0x24021814
 8013bb0:	2402181c 	.word	0x2402181c

08013bb4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013bb4:	b480      	push	{r7}
 8013bb6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013bb8:	4b05      	ldr	r3, [pc, #20]	; (8013bd0 <tcp_trigger_input_pcb_close+0x1c>)
 8013bba:	781b      	ldrb	r3, [r3, #0]
 8013bbc:	f043 0310 	orr.w	r3, r3, #16
 8013bc0:	b2da      	uxtb	r2, r3
 8013bc2:	4b03      	ldr	r3, [pc, #12]	; (8013bd0 <tcp_trigger_input_pcb_close+0x1c>)
 8013bc4:	701a      	strb	r2, [r3, #0]
}
 8013bc6:	bf00      	nop
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bce:	4770      	bx	lr
 8013bd0:	2402182d 	.word	0x2402182d

08013bd4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b086      	sub	sp, #24
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	60f8      	str	r0, [r7, #12]
 8013bdc:	607b      	str	r3, [r7, #4]
 8013bde:	460b      	mov	r3, r1
 8013be0:	817b      	strh	r3, [r7, #10]
 8013be2:	4613      	mov	r3, r2
 8013be4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013be6:	897a      	ldrh	r2, [r7, #10]
 8013be8:	893b      	ldrh	r3, [r7, #8]
 8013bea:	4413      	add	r3, r2
 8013bec:	b29b      	uxth	r3, r3
 8013bee:	3314      	adds	r3, #20
 8013bf0:	b29b      	uxth	r3, r3
 8013bf2:	2200      	movs	r2, #0
 8013bf4:	4619      	mov	r1, r3
 8013bf6:	2001      	movs	r0, #1
 8013bf8:	f7fb fe0e 	bl	800f818 <pbuf_alloc>
 8013bfc:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013bfe:	697b      	ldr	r3, [r7, #20]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d057      	beq.n	8013cb4 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013c04:	697b      	ldr	r3, [r7, #20]
 8013c06:	895b      	ldrh	r3, [r3, #10]
 8013c08:	461a      	mov	r2, r3
 8013c0a:	897b      	ldrh	r3, [r7, #10]
 8013c0c:	3314      	adds	r3, #20
 8013c0e:	429a      	cmp	r2, r3
 8013c10:	da05      	bge.n	8013c1e <tcp_output_alloc_header+0x4a>
 8013c12:	4b2b      	ldr	r3, [pc, #172]	; (8013cc0 <tcp_output_alloc_header+0xec>)
 8013c14:	2273      	movs	r2, #115	; 0x73
 8013c16:	492b      	ldr	r1, [pc, #172]	; (8013cc4 <tcp_output_alloc_header+0xf0>)
 8013c18:	482b      	ldr	r0, [pc, #172]	; (8013cc8 <tcp_output_alloc_header+0xf4>)
 8013c1a:	f003 febb 	bl	8017994 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013c1e:	697b      	ldr	r3, [r7, #20]
 8013c20:	685b      	ldr	r3, [r3, #4]
 8013c22:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	8adb      	ldrh	r3, [r3, #22]
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f7fa fe4f 	bl	800e8cc <lwip_htons>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	461a      	mov	r2, r3
 8013c32:	693b      	ldr	r3, [r7, #16]
 8013c34:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	8b1b      	ldrh	r3, [r3, #24]
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f7fa fe46 	bl	800e8cc <lwip_htons>
 8013c40:	4603      	mov	r3, r0
 8013c42:	461a      	mov	r2, r3
 8013c44:	693b      	ldr	r3, [r7, #16]
 8013c46:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013c48:	693b      	ldr	r3, [r7, #16]
 8013c4a:	687a      	ldr	r2, [r7, #4]
 8013c4c:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c52:	4618      	mov	r0, r3
 8013c54:	f7fa fe48 	bl	800e8e8 <lwip_htonl>
 8013c58:	4602      	mov	r2, r0
 8013c5a:	693b      	ldr	r3, [r7, #16]
 8013c5c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8013c5e:	897b      	ldrh	r3, [r7, #10]
 8013c60:	089b      	lsrs	r3, r3, #2
 8013c62:	b29b      	uxth	r3, r3
 8013c64:	3305      	adds	r3, #5
 8013c66:	b29b      	uxth	r3, r3
 8013c68:	031b      	lsls	r3, r3, #12
 8013c6a:	b29b      	uxth	r3, r3
 8013c6c:	f043 0310 	orr.w	r3, r3, #16
 8013c70:	b29b      	uxth	r3, r3
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7fa fe2a 	bl	800e8cc <lwip_htons>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	461a      	mov	r2, r3
 8013c7c:	693b      	ldr	r3, [r7, #16]
 8013c7e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013c84:	4618      	mov	r0, r3
 8013c86:	f7fa fe21 	bl	800e8cc <lwip_htons>
 8013c8a:	4603      	mov	r3, r0
 8013c8c:	461a      	mov	r2, r3
 8013c8e:	693b      	ldr	r3, [r7, #16]
 8013c90:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013c92:	693b      	ldr	r3, [r7, #16]
 8013c94:	2200      	movs	r2, #0
 8013c96:	741a      	strb	r2, [r3, #16]
 8013c98:	2200      	movs	r2, #0
 8013c9a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013c9c:	693b      	ldr	r3, [r7, #16]
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	749a      	strb	r2, [r3, #18]
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013caa:	68fa      	ldr	r2, [r7, #12]
 8013cac:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013cae:	441a      	add	r2, r3
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013cb4:	697b      	ldr	r3, [r7, #20]
}
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	3718      	adds	r7, #24
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	bd80      	pop	{r7, pc}
 8013cbe:	bf00      	nop
 8013cc0:	08019c88 	.word	0x08019c88
 8013cc4:	08019cbc 	.word	0x08019cbc
 8013cc8:	08019cec 	.word	0x08019cec

08013ccc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013ccc:	b590      	push	{r4, r7, lr}
 8013cce:	b085      	sub	sp, #20
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d02d      	beq.n	8013d38 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013ce0:	60fb      	str	r3, [r7, #12]
 8013ce2:	e002      	b.n	8013cea <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d1f8      	bne.n	8013ce4 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	68db      	ldr	r3, [r3, #12]
 8013cf6:	899b      	ldrh	r3, [r3, #12]
 8013cf8:	b29b      	uxth	r3, r3
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f7fa fde6 	bl	800e8cc <lwip_htons>
 8013d00:	4603      	mov	r3, r0
 8013d02:	f003 0307 	and.w	r3, r3, #7
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d116      	bne.n	8013d38 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	68db      	ldr	r3, [r3, #12]
 8013d0e:	899b      	ldrh	r3, [r3, #12]
 8013d10:	b29c      	uxth	r4, r3
 8013d12:	2001      	movs	r0, #1
 8013d14:	f7fa fdda 	bl	800e8cc <lwip_htons>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	461a      	mov	r2, r3
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	68db      	ldr	r3, [r3, #12]
 8013d20:	4322      	orrs	r2, r4
 8013d22:	b292      	uxth	r2, r2
 8013d24:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	7e9b      	ldrb	r3, [r3, #26]
 8013d2a:	f043 0320 	orr.w	r3, r3, #32
 8013d2e:	b2da      	uxtb	r2, r3
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8013d34:	2300      	movs	r3, #0
 8013d36:	e004      	b.n	8013d42 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013d38:	2101      	movs	r1, #1
 8013d3a:	6878      	ldr	r0, [r7, #4]
 8013d3c:	f000 f88e 	bl	8013e5c <tcp_enqueue_flags>
 8013d40:	4603      	mov	r3, r0
}
 8013d42:	4618      	mov	r0, r3
 8013d44:	3714      	adds	r7, #20
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bd90      	pop	{r4, r7, pc}
	...

08013d4c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8013d4c:	b590      	push	{r4, r7, lr}
 8013d4e:	b087      	sub	sp, #28
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	60f8      	str	r0, [r7, #12]
 8013d54:	60b9      	str	r1, [r7, #8]
 8013d56:	603b      	str	r3, [r7, #0]
 8013d58:	4613      	mov	r3, r2
 8013d5a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013d5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013d60:	009b      	lsls	r3, r3, #2
 8013d62:	b2db      	uxtb	r3, r3
 8013d64:	f003 0304 	and.w	r3, r3, #4
 8013d68:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013d6a:	2003      	movs	r0, #3
 8013d6c:	f7fb fa74 	bl	800f258 <memp_malloc>
 8013d70:	6138      	str	r0, [r7, #16]
 8013d72:	693b      	ldr	r3, [r7, #16]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d104      	bne.n	8013d82 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013d78:	68b8      	ldr	r0, [r7, #8]
 8013d7a:	f7fc f8bf 	bl	800fefc <pbuf_free>
    return NULL;
 8013d7e:	2300      	movs	r3, #0
 8013d80:	e061      	b.n	8013e46 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8013d82:	693b      	ldr	r3, [r7, #16]
 8013d84:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013d88:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013d8a:	693b      	ldr	r3, [r7, #16]
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013d90:	693b      	ldr	r3, [r7, #16]
 8013d92:	68ba      	ldr	r2, [r7, #8]
 8013d94:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013d96:	68bb      	ldr	r3, [r7, #8]
 8013d98:	891a      	ldrh	r2, [r3, #8]
 8013d9a:	7dfb      	ldrb	r3, [r7, #23]
 8013d9c:	b29b      	uxth	r3, r3
 8013d9e:	429a      	cmp	r2, r3
 8013da0:	d205      	bcs.n	8013dae <tcp_create_segment+0x62>
 8013da2:	4b2b      	ldr	r3, [pc, #172]	; (8013e50 <tcp_create_segment+0x104>)
 8013da4:	22ba      	movs	r2, #186	; 0xba
 8013da6:	492b      	ldr	r1, [pc, #172]	; (8013e54 <tcp_create_segment+0x108>)
 8013da8:	482b      	ldr	r0, [pc, #172]	; (8013e58 <tcp_create_segment+0x10c>)
 8013daa:	f003 fdf3 	bl	8017994 <iprintf>
  seg->len = p->tot_len - optlen;
 8013dae:	68bb      	ldr	r3, [r7, #8]
 8013db0:	891a      	ldrh	r2, [r3, #8]
 8013db2:	7dfb      	ldrb	r3, [r7, #23]
 8013db4:	b29b      	uxth	r3, r3
 8013db6:	1ad3      	subs	r3, r2, r3
 8013db8:	b29a      	uxth	r2, r3
 8013dba:	693b      	ldr	r3, [r7, #16]
 8013dbc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8013dbe:	2114      	movs	r1, #20
 8013dc0:	68b8      	ldr	r0, [r7, #8]
 8013dc2:	f7fc f877 	bl	800feb4 <pbuf_header>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d004      	beq.n	8013dd6 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013dcc:	6938      	ldr	r0, [r7, #16]
 8013dce:	f7fd f9ee 	bl	80111ae <tcp_seg_free>
    return NULL;
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	e037      	b.n	8013e46 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013dd6:	693b      	ldr	r3, [r7, #16]
 8013dd8:	685b      	ldr	r3, [r3, #4]
 8013dda:	685a      	ldr	r2, [r3, #4]
 8013ddc:	693b      	ldr	r3, [r7, #16]
 8013dde:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013de0:	68fb      	ldr	r3, [r7, #12]
 8013de2:	8ada      	ldrh	r2, [r3, #22]
 8013de4:	693b      	ldr	r3, [r7, #16]
 8013de6:	68dc      	ldr	r4, [r3, #12]
 8013de8:	4610      	mov	r0, r2
 8013dea:	f7fa fd6f 	bl	800e8cc <lwip_htons>
 8013dee:	4603      	mov	r3, r0
 8013df0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	8b1a      	ldrh	r2, [r3, #24]
 8013df6:	693b      	ldr	r3, [r7, #16]
 8013df8:	68dc      	ldr	r4, [r3, #12]
 8013dfa:	4610      	mov	r0, r2
 8013dfc:	f7fa fd66 	bl	800e8cc <lwip_htons>
 8013e00:	4603      	mov	r3, r0
 8013e02:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013e04:	693b      	ldr	r3, [r7, #16]
 8013e06:	68dc      	ldr	r4, [r3, #12]
 8013e08:	6838      	ldr	r0, [r7, #0]
 8013e0a:	f7fa fd6d 	bl	800e8e8 <lwip_htonl>
 8013e0e:	4603      	mov	r3, r0
 8013e10:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8013e12:	7dfb      	ldrb	r3, [r7, #23]
 8013e14:	089b      	lsrs	r3, r3, #2
 8013e16:	b2db      	uxtb	r3, r3
 8013e18:	b29b      	uxth	r3, r3
 8013e1a:	3305      	adds	r3, #5
 8013e1c:	b29b      	uxth	r3, r3
 8013e1e:	031b      	lsls	r3, r3, #12
 8013e20:	b29a      	uxth	r2, r3
 8013e22:	79fb      	ldrb	r3, [r7, #7]
 8013e24:	b29b      	uxth	r3, r3
 8013e26:	4313      	orrs	r3, r2
 8013e28:	b29a      	uxth	r2, r3
 8013e2a:	693b      	ldr	r3, [r7, #16]
 8013e2c:	68dc      	ldr	r4, [r3, #12]
 8013e2e:	4610      	mov	r0, r2
 8013e30:	f7fa fd4c 	bl	800e8cc <lwip_htons>
 8013e34:	4603      	mov	r3, r0
 8013e36:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013e38:	693b      	ldr	r3, [r7, #16]
 8013e3a:	68db      	ldr	r3, [r3, #12]
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	749a      	strb	r2, [r3, #18]
 8013e40:	2200      	movs	r2, #0
 8013e42:	74da      	strb	r2, [r3, #19]
  return seg;
 8013e44:	693b      	ldr	r3, [r7, #16]
}
 8013e46:	4618      	mov	r0, r3
 8013e48:	371c      	adds	r7, #28
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd90      	pop	{r4, r7, pc}
 8013e4e:	bf00      	nop
 8013e50:	08019c88 	.word	0x08019c88
 8013e54:	08019d14 	.word	0x08019d14
 8013e58:	08019cec 	.word	0x08019cec

08013e5c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b08a      	sub	sp, #40	; 0x28
 8013e60:	af02      	add	r7, sp, #8
 8013e62:	6078      	str	r0, [r7, #4]
 8013e64:	460b      	mov	r3, r1
 8013e66:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013e68:	2300      	movs	r3, #0
 8013e6a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013e70:	78fb      	ldrb	r3, [r7, #3]
 8013e72:	f003 0303 	and.w	r3, r3, #3
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d106      	bne.n	8013e88 <tcp_enqueue_flags+0x2c>
 8013e7a:	4b6f      	ldr	r3, [pc, #444]	; (8014038 <tcp_enqueue_flags+0x1dc>)
 8013e7c:	f240 321b 	movw	r2, #795	; 0x31b
 8013e80:	496e      	ldr	r1, [pc, #440]	; (801403c <tcp_enqueue_flags+0x1e0>)
 8013e82:	486f      	ldr	r0, [pc, #444]	; (8014040 <tcp_enqueue_flags+0x1e4>)
 8013e84:	f003 fd86 	bl	8017994 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013e8e:	2b08      	cmp	r3, #8
 8013e90:	d806      	bhi.n	8013ea0 <tcp_enqueue_flags+0x44>
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013e98:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8013e9c:	4293      	cmp	r3, r2
 8013e9e:	d90e      	bls.n	8013ebe <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8013ea0:	78fb      	ldrb	r3, [r7, #3]
 8013ea2:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d109      	bne.n	8013ebe <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	7e9b      	ldrb	r3, [r3, #26]
 8013eae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013eb2:	b2da      	uxtb	r2, r3
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8013eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8013ebc:	e0b7      	b.n	801402e <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8013ebe:	78fb      	ldrb	r3, [r7, #3]
 8013ec0:	f003 0302 	and.w	r3, r3, #2
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d001      	beq.n	8013ecc <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8013ec8:	2301      	movs	r3, #1
 8013eca:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013ecc:	7ffb      	ldrb	r3, [r7, #31]
 8013ece:	009b      	lsls	r3, r3, #2
 8013ed0:	b2db      	uxtb	r3, r3
 8013ed2:	f003 0304 	and.w	r3, r3, #4
 8013ed6:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013ed8:	7dfb      	ldrb	r3, [r7, #23]
 8013eda:	b29b      	uxth	r3, r3
 8013edc:	2200      	movs	r2, #0
 8013ede:	4619      	mov	r1, r3
 8013ee0:	2000      	movs	r0, #0
 8013ee2:	f7fb fc99 	bl	800f818 <pbuf_alloc>
 8013ee6:	6138      	str	r0, [r7, #16]
 8013ee8:	693b      	ldr	r3, [r7, #16]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d109      	bne.n	8013f02 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	7e9b      	ldrb	r3, [r3, #26]
 8013ef2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013ef6:	b2da      	uxtb	r2, r3
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013efc:	f04f 33ff 	mov.w	r3, #4294967295
 8013f00:	e095      	b.n	801402e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013f02:	693b      	ldr	r3, [r7, #16]
 8013f04:	895a      	ldrh	r2, [r3, #10]
 8013f06:	7dfb      	ldrb	r3, [r7, #23]
 8013f08:	b29b      	uxth	r3, r3
 8013f0a:	429a      	cmp	r2, r3
 8013f0c:	d206      	bcs.n	8013f1c <tcp_enqueue_flags+0xc0>
 8013f0e:	4b4a      	ldr	r3, [pc, #296]	; (8014038 <tcp_enqueue_flags+0x1dc>)
 8013f10:	f240 3241 	movw	r2, #833	; 0x341
 8013f14:	494b      	ldr	r1, [pc, #300]	; (8014044 <tcp_enqueue_flags+0x1e8>)
 8013f16:	484a      	ldr	r0, [pc, #296]	; (8014040 <tcp_enqueue_flags+0x1e4>)
 8013f18:	f003 fd3c 	bl	8017994 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8013f20:	78fa      	ldrb	r2, [r7, #3]
 8013f22:	7ffb      	ldrb	r3, [r7, #31]
 8013f24:	9300      	str	r3, [sp, #0]
 8013f26:	460b      	mov	r3, r1
 8013f28:	6939      	ldr	r1, [r7, #16]
 8013f2a:	6878      	ldr	r0, [r7, #4]
 8013f2c:	f7ff ff0e 	bl	8013d4c <tcp_create_segment>
 8013f30:	60f8      	str	r0, [r7, #12]
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d109      	bne.n	8013f4c <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	7e9b      	ldrb	r3, [r3, #26]
 8013f3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013f40:	b2da      	uxtb	r2, r3
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013f46:	f04f 33ff 	mov.w	r3, #4294967295
 8013f4a:	e070      	b.n	801402e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	68db      	ldr	r3, [r3, #12]
 8013f50:	f003 0303 	and.w	r3, r3, #3
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d006      	beq.n	8013f66 <tcp_enqueue_flags+0x10a>
 8013f58:	4b37      	ldr	r3, [pc, #220]	; (8014038 <tcp_enqueue_flags+0x1dc>)
 8013f5a:	f240 3249 	movw	r2, #841	; 0x349
 8013f5e:	493a      	ldr	r1, [pc, #232]	; (8014048 <tcp_enqueue_flags+0x1ec>)
 8013f60:	4837      	ldr	r0, [pc, #220]	; (8014040 <tcp_enqueue_flags+0x1e4>)
 8013f62:	f003 fd17 	bl	8017994 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	891b      	ldrh	r3, [r3, #8]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d006      	beq.n	8013f7c <tcp_enqueue_flags+0x120>
 8013f6e:	4b32      	ldr	r3, [pc, #200]	; (8014038 <tcp_enqueue_flags+0x1dc>)
 8013f70:	f240 324a 	movw	r2, #842	; 0x34a
 8013f74:	4935      	ldr	r1, [pc, #212]	; (801404c <tcp_enqueue_flags+0x1f0>)
 8013f76:	4832      	ldr	r0, [pc, #200]	; (8014040 <tcp_enqueue_flags+0x1e4>)
 8013f78:	f003 fd0c 	bl	8017994 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d103      	bne.n	8013f8c <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	68fa      	ldr	r2, [r7, #12]
 8013f88:	669a      	str	r2, [r3, #104]	; 0x68
 8013f8a:	e00d      	b.n	8013fa8 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013f90:	61bb      	str	r3, [r7, #24]
 8013f92:	e002      	b.n	8013f9a <tcp_enqueue_flags+0x13e>
 8013f94:	69bb      	ldr	r3, [r7, #24]
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	61bb      	str	r3, [r7, #24]
 8013f9a:	69bb      	ldr	r3, [r7, #24]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d1f8      	bne.n	8013f94 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8013fa2:	69bb      	ldr	r3, [r7, #24]
 8013fa4:	68fa      	ldr	r2, [r7, #12]
 8013fa6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	2200      	movs	r2, #0
 8013fac:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013fb0:	78fb      	ldrb	r3, [r7, #3]
 8013fb2:	f003 0302 	and.w	r3, r3, #2
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d104      	bne.n	8013fc4 <tcp_enqueue_flags+0x168>
 8013fba:	78fb      	ldrb	r3, [r7, #3]
 8013fbc:	f003 0301 	and.w	r3, r3, #1
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d004      	beq.n	8013fce <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013fc8:	1c5a      	adds	r2, r3, #1
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013fce:	78fb      	ldrb	r3, [r7, #3]
 8013fd0:	f003 0301 	and.w	r3, r3, #1
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d006      	beq.n	8013fe6 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	7e9b      	ldrb	r3, [r3, #26]
 8013fdc:	f043 0320 	orr.w	r3, r3, #32
 8013fe0:	b2da      	uxtb	r2, r3
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	685b      	ldr	r3, [r3, #4]
 8013fea:	4618      	mov	r0, r3
 8013fec:	f7fc f820 	bl	8010030 <pbuf_clen>
 8013ff0:	4603      	mov	r3, r0
 8013ff2:	461a      	mov	r2, r3
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013ffa:	4413      	add	r3, r2
 8013ffc:	b29a      	uxth	r2, r3
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801400a:	2b00      	cmp	r3, #0
 801400c:	d00e      	beq.n	801402c <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014012:	2b00      	cmp	r3, #0
 8014014:	d10a      	bne.n	801402c <tcp_enqueue_flags+0x1d0>
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801401a:	2b00      	cmp	r3, #0
 801401c:	d106      	bne.n	801402c <tcp_enqueue_flags+0x1d0>
 801401e:	4b06      	ldr	r3, [pc, #24]	; (8014038 <tcp_enqueue_flags+0x1dc>)
 8014020:	f240 326d 	movw	r2, #877	; 0x36d
 8014024:	490a      	ldr	r1, [pc, #40]	; (8014050 <tcp_enqueue_flags+0x1f4>)
 8014026:	4806      	ldr	r0, [pc, #24]	; (8014040 <tcp_enqueue_flags+0x1e4>)
 8014028:	f003 fcb4 	bl	8017994 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801402c:	2300      	movs	r3, #0
}
 801402e:	4618      	mov	r0, r3
 8014030:	3720      	adds	r7, #32
 8014032:	46bd      	mov	sp, r7
 8014034:	bd80      	pop	{r7, pc}
 8014036:	bf00      	nop
 8014038:	08019c88 	.word	0x08019c88
 801403c:	08019f8c 	.word	0x08019f8c
 8014040:	08019cec 	.word	0x08019cec
 8014044:	08019fe4 	.word	0x08019fe4
 8014048:	0801a020 	.word	0x0801a020
 801404c:	0801a038 	.word	0x0801a038
 8014050:	0801a064 	.word	0x0801a064

08014054 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014054:	b590      	push	{r4, r7, lr}
 8014056:	b08b      	sub	sp, #44	; 0x2c
 8014058:	af04      	add	r7, sp, #16
 801405a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 801405c:	2300      	movs	r3, #0
 801405e:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014060:	7dbb      	ldrb	r3, [r7, #22]
 8014062:	b29c      	uxth	r4, r3
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014068:	4618      	mov	r0, r3
 801406a:	f7fa fc3d 	bl	800e8e8 <lwip_htonl>
 801406e:	4603      	mov	r3, r0
 8014070:	2200      	movs	r2, #0
 8014072:	4621      	mov	r1, r4
 8014074:	6878      	ldr	r0, [r7, #4]
 8014076:	f7ff fdad 	bl	8013bd4 <tcp_output_alloc_header>
 801407a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801407c:	693b      	ldr	r3, [r7, #16]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d109      	bne.n	8014096 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	7e9b      	ldrb	r3, [r3, #26]
 8014086:	f043 0303 	orr.w	r3, r3, #3
 801408a:	b2da      	uxtb	r2, r3
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014090:	f06f 0301 	mvn.w	r3, #1
 8014094:	e036      	b.n	8014104 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	3304      	adds	r3, #4
 801409a:	4618      	mov	r0, r3
 801409c:	f002 f994 	bl	80163c8 <ip4_route>
 80140a0:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d102      	bne.n	80140ae <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 80140a8:	23fc      	movs	r3, #252	; 0xfc
 80140aa:	75fb      	strb	r3, [r7, #23]
 80140ac:	e012      	b.n	80140d4 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80140ae:	6879      	ldr	r1, [r7, #4]
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	1d18      	adds	r0, r3, #4
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	7a9c      	ldrb	r4, [r3, #10]
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	7a5b      	ldrb	r3, [r3, #9]
 80140bc:	68fa      	ldr	r2, [r7, #12]
 80140be:	9202      	str	r2, [sp, #8]
 80140c0:	2206      	movs	r2, #6
 80140c2:	9201      	str	r2, [sp, #4]
 80140c4:	9300      	str	r3, [sp, #0]
 80140c6:	4623      	mov	r3, r4
 80140c8:	4602      	mov	r2, r0
 80140ca:	6938      	ldr	r0, [r7, #16]
 80140cc:	f002 fb34 	bl	8016738 <ip4_output_if>
 80140d0:	4603      	mov	r3, r0
 80140d2:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80140d4:	6938      	ldr	r0, [r7, #16]
 80140d6:	f7fb ff11 	bl	800fefc <pbuf_free>

  if (err != ERR_OK) {
 80140da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d007      	beq.n	80140f2 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	7e9b      	ldrb	r3, [r3, #26]
 80140e6:	f043 0303 	orr.w	r3, r3, #3
 80140ea:	b2da      	uxtb	r2, r3
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	769a      	strb	r2, [r3, #26]
 80140f0:	e006      	b.n	8014100 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	7e9b      	ldrb	r3, [r3, #26]
 80140f6:	f023 0303 	bic.w	r3, r3, #3
 80140fa:	b2da      	uxtb	r2, r3
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8014100:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014104:	4618      	mov	r0, r3
 8014106:	371c      	adds	r7, #28
 8014108:	46bd      	mov	sp, r7
 801410a:	bd90      	pop	{r4, r7, pc}

0801410c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801410c:	b5b0      	push	{r4, r5, r7, lr}
 801410e:	b08a      	sub	sp, #40	; 0x28
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	7d1b      	ldrb	r3, [r3, #20]
 8014118:	2b01      	cmp	r3, #1
 801411a:	d106      	bne.n	801412a <tcp_output+0x1e>
 801411c:	4b9b      	ldr	r3, [pc, #620]	; (801438c <tcp_output+0x280>)
 801411e:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8014122:	499b      	ldr	r1, [pc, #620]	; (8014390 <tcp_output+0x284>)
 8014124:	489b      	ldr	r0, [pc, #620]	; (8014394 <tcp_output+0x288>)
 8014126:	f003 fc35 	bl	8017994 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801412a:	4b9b      	ldr	r3, [pc, #620]	; (8014398 <tcp_output+0x28c>)
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	687a      	ldr	r2, [r7, #4]
 8014130:	429a      	cmp	r2, r3
 8014132:	d101      	bne.n	8014138 <tcp_output+0x2c>
    return ERR_OK;
 8014134:	2300      	movs	r3, #0
 8014136:	e1cf      	b.n	80144d8 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014144:	429a      	cmp	r2, r3
 8014146:	d203      	bcs.n	8014150 <tcp_output+0x44>
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801414e:	e002      	b.n	8014156 <tcp_output+0x4a>
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014156:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801415c:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	7e9b      	ldrb	r3, [r3, #26]
 8014162:	f003 0302 	and.w	r3, r3, #2
 8014166:	2b00      	cmp	r3, #0
 8014168:	d017      	beq.n	801419a <tcp_output+0x8e>
 801416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801416c:	2b00      	cmp	r3, #0
 801416e:	d00f      	beq.n	8014190 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8014170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014172:	68db      	ldr	r3, [r3, #12]
 8014174:	685b      	ldr	r3, [r3, #4]
 8014176:	4618      	mov	r0, r3
 8014178:	f7fa fbb6 	bl	800e8e8 <lwip_htonl>
 801417c:	4602      	mov	r2, r0
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014182:	1ad3      	subs	r3, r2, r3
 8014184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014186:	8912      	ldrh	r2, [r2, #8]
 8014188:	4413      	add	r3, r2
     (seg == NULL ||
 801418a:	69ba      	ldr	r2, [r7, #24]
 801418c:	429a      	cmp	r2, r3
 801418e:	d204      	bcs.n	801419a <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8014190:	6878      	ldr	r0, [r7, #4]
 8014192:	f7ff ff5f 	bl	8014054 <tcp_send_empty_ack>
 8014196:	4603      	mov	r3, r0
 8014198:	e19e      	b.n	80144d8 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801419e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80141a0:	6a3b      	ldr	r3, [r7, #32]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d007      	beq.n	80141b6 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 80141a6:	e002      	b.n	80141ae <tcp_output+0xa2>
 80141a8:	6a3b      	ldr	r3, [r7, #32]
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	623b      	str	r3, [r7, #32]
 80141ae:	6a3b      	ldr	r3, [r7, #32]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d1f8      	bne.n	80141a8 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	3304      	adds	r3, #4
 80141ba:	4618      	mov	r0, r3
 80141bc:	f002 f904 	bl	80163c8 <ip4_route>
 80141c0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80141c2:	697b      	ldr	r3, [r7, #20]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d102      	bne.n	80141ce <tcp_output+0xc2>
    return ERR_RTE;
 80141c8:	f06f 0303 	mvn.w	r3, #3
 80141cc:	e184      	b.n	80144d8 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d003      	beq.n	80141dc <tcp_output+0xd0>
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d111      	bne.n	8014200 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80141dc:	697b      	ldr	r3, [r7, #20]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d002      	beq.n	80141e8 <tcp_output+0xdc>
 80141e2:	697b      	ldr	r3, [r7, #20]
 80141e4:	3304      	adds	r3, #4
 80141e6:	e000      	b.n	80141ea <tcp_output+0xde>
 80141e8:	2300      	movs	r3, #0
 80141ea:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80141ec:	693b      	ldr	r3, [r7, #16]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d102      	bne.n	80141f8 <tcp_output+0xec>
      return ERR_RTE;
 80141f2:	f06f 0303 	mvn.w	r3, #3
 80141f6:	e16f      	b.n	80144d8 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80141f8:	693b      	ldr	r3, [r7, #16]
 80141fa:	681a      	ldr	r2, [r3, #0]
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8014200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014202:	2b00      	cmp	r3, #0
 8014204:	f000 813e 	beq.w	8014484 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8014208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801420a:	68db      	ldr	r3, [r3, #12]
 801420c:	685b      	ldr	r3, [r3, #4]
 801420e:	4618      	mov	r0, r3
 8014210:	f7fa fb6a 	bl	800e8e8 <lwip_htonl>
 8014214:	4602      	mov	r2, r0
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801421a:	1ad3      	subs	r3, r2, r3
 801421c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801421e:	8912      	ldrh	r2, [r2, #8]
 8014220:	4413      	add	r3, r2
  if (seg != NULL &&
 8014222:	69ba      	ldr	r2, [r7, #24]
 8014224:	429a      	cmp	r2, r3
 8014226:	f080 812d 	bcs.w	8014484 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801422a:	69bb      	ldr	r3, [r7, #24]
 801422c:	2b00      	cmp	r3, #0
 801422e:	f000 8129 	beq.w	8014484 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014238:	461a      	mov	r2, r3
 801423a:	69bb      	ldr	r3, [r7, #24]
 801423c:	4293      	cmp	r3, r2
 801423e:	f040 8121 	bne.w	8014484 <tcp_output+0x378>
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014246:	2b00      	cmp	r3, #0
 8014248:	f040 811c 	bne.w	8014484 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8014252:	2b00      	cmp	r3, #0
 8014254:	f040 812b 	bne.w	80144ae <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	2200      	movs	r2, #0
 801425c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
      pcb->persist_backoff = 1;
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	2201      	movs	r2, #1
 8014264:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    }
    goto output_done;
 8014268:	e121      	b.n	80144ae <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801426c:	68db      	ldr	r3, [r3, #12]
 801426e:	899b      	ldrh	r3, [r3, #12]
 8014270:	b29b      	uxth	r3, r3
 8014272:	4618      	mov	r0, r3
 8014274:	f7fa fb2a 	bl	800e8cc <lwip_htons>
 8014278:	4603      	mov	r3, r0
 801427a:	f003 0304 	and.w	r3, r3, #4
 801427e:	2b00      	cmp	r3, #0
 8014280:	d006      	beq.n	8014290 <tcp_output+0x184>
 8014282:	4b42      	ldr	r3, [pc, #264]	; (801438c <tcp_output+0x280>)
 8014284:	f240 4246 	movw	r2, #1094	; 0x446
 8014288:	4944      	ldr	r1, [pc, #272]	; (801439c <tcp_output+0x290>)
 801428a:	4842      	ldr	r0, [pc, #264]	; (8014394 <tcp_output+0x288>)
 801428c:	f003 fb82 	bl	8017994 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014294:	2b00      	cmp	r3, #0
 8014296:	d01f      	beq.n	80142d8 <tcp_output+0x1cc>
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	7e9b      	ldrb	r3, [r3, #26]
 801429c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d119      	bne.n	80142d8 <tcp_output+0x1cc>
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d00b      	beq.n	80142c4 <tcp_output+0x1b8>
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d110      	bne.n	80142d8 <tcp_output+0x1cc>
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80142ba:	891a      	ldrh	r2, [r3, #8]
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80142c0:	429a      	cmp	r2, r3
 80142c2:	d209      	bcs.n	80142d8 <tcp_output+0x1cc>
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d004      	beq.n	80142d8 <tcp_output+0x1cc>
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80142d4:	2b08      	cmp	r3, #8
 80142d6:	d901      	bls.n	80142dc <tcp_output+0x1d0>
 80142d8:	2301      	movs	r3, #1
 80142da:	e000      	b.n	80142de <tcp_output+0x1d2>
 80142dc:	2300      	movs	r3, #0
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d106      	bne.n	80142f0 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	7e9b      	ldrb	r3, [r3, #26]
 80142e6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	f000 80e1 	beq.w	80144b2 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	7d1b      	ldrb	r3, [r3, #20]
 80142f4:	2b02      	cmp	r3, #2
 80142f6:	d00d      	beq.n	8014314 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80142f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142fa:	68db      	ldr	r3, [r3, #12]
 80142fc:	899b      	ldrh	r3, [r3, #12]
 80142fe:	b29c      	uxth	r4, r3
 8014300:	2010      	movs	r0, #16
 8014302:	f7fa fae3 	bl	800e8cc <lwip_htons>
 8014306:	4603      	mov	r3, r0
 8014308:	461a      	mov	r2, r3
 801430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801430c:	68db      	ldr	r3, [r3, #12]
 801430e:	4322      	orrs	r2, r4
 8014310:	b292      	uxth	r2, r2
 8014312:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8014314:	697a      	ldr	r2, [r7, #20]
 8014316:	6879      	ldr	r1, [r7, #4]
 8014318:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801431a:	f000 f8e1 	bl	80144e0 <tcp_output_segment>
 801431e:	4603      	mov	r3, r0
 8014320:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d009      	beq.n	801433e <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	7e9b      	ldrb	r3, [r3, #26]
 801432e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014332:	b2da      	uxtb	r2, r3
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	769a      	strb	r2, [r3, #26]
      return err;
 8014338:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801433c:	e0cc      	b.n	80144d8 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 801433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014340:	681a      	ldr	r2, [r3, #0]
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	7d1b      	ldrb	r3, [r3, #20]
 801434a:	2b02      	cmp	r3, #2
 801434c:	d006      	beq.n	801435c <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	7e9b      	ldrb	r3, [r3, #26]
 8014352:	f023 0303 	bic.w	r3, r3, #3
 8014356:	b2da      	uxtb	r2, r3
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801435e:	68db      	ldr	r3, [r3, #12]
 8014360:	685b      	ldr	r3, [r3, #4]
 8014362:	4618      	mov	r0, r3
 8014364:	f7fa fac0 	bl	800e8e8 <lwip_htonl>
 8014368:	4604      	mov	r4, r0
 801436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801436c:	891b      	ldrh	r3, [r3, #8]
 801436e:	461d      	mov	r5, r3
 8014370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014372:	68db      	ldr	r3, [r3, #12]
 8014374:	899b      	ldrh	r3, [r3, #12]
 8014376:	b29b      	uxth	r3, r3
 8014378:	4618      	mov	r0, r3
 801437a:	f7fa faa7 	bl	800e8cc <lwip_htons>
 801437e:	4603      	mov	r3, r0
 8014380:	f003 0303 	and.w	r3, r3, #3
 8014384:	2b00      	cmp	r3, #0
 8014386:	d00b      	beq.n	80143a0 <tcp_output+0x294>
 8014388:	2301      	movs	r3, #1
 801438a:	e00a      	b.n	80143a2 <tcp_output+0x296>
 801438c:	08019c88 	.word	0x08019c88
 8014390:	0801a08c 	.word	0x0801a08c
 8014394:	08019cec 	.word	0x08019cec
 8014398:	24024e60 	.word	0x24024e60
 801439c:	0801a0b4 	.word	0x0801a0b4
 80143a0:	2300      	movs	r3, #0
 80143a2:	442b      	add	r3, r5
 80143a4:	4423      	add	r3, r4
 80143a6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80143ac:	68bb      	ldr	r3, [r7, #8]
 80143ae:	1ad3      	subs	r3, r2, r3
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	da02      	bge.n	80143ba <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	68ba      	ldr	r2, [r7, #8]
 80143b8:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80143ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143bc:	891b      	ldrh	r3, [r3, #8]
 80143be:	461c      	mov	r4, r3
 80143c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143c2:	68db      	ldr	r3, [r3, #12]
 80143c4:	899b      	ldrh	r3, [r3, #12]
 80143c6:	b29b      	uxth	r3, r3
 80143c8:	4618      	mov	r0, r3
 80143ca:	f7fa fa7f 	bl	800e8cc <lwip_htons>
 80143ce:	4603      	mov	r3, r0
 80143d0:	f003 0303 	and.w	r3, r3, #3
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d001      	beq.n	80143dc <tcp_output+0x2d0>
 80143d8:	2301      	movs	r3, #1
 80143da:	e000      	b.n	80143de <tcp_output+0x2d2>
 80143dc:	2300      	movs	r3, #0
 80143de:	4423      	add	r3, r4
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d049      	beq.n	8014478 <tcp_output+0x36c>
      seg->next = NULL;
 80143e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143e6:	2200      	movs	r2, #0
 80143e8:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d105      	bne.n	80143fe <tcp_output+0x2f2>
        pcb->unacked = seg;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80143f6:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 80143f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143fa:	623b      	str	r3, [r7, #32]
 80143fc:	e03f      	b.n	801447e <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80143fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014400:	68db      	ldr	r3, [r3, #12]
 8014402:	685b      	ldr	r3, [r3, #4]
 8014404:	4618      	mov	r0, r3
 8014406:	f7fa fa6f 	bl	800e8e8 <lwip_htonl>
 801440a:	4604      	mov	r4, r0
 801440c:	6a3b      	ldr	r3, [r7, #32]
 801440e:	68db      	ldr	r3, [r3, #12]
 8014410:	685b      	ldr	r3, [r3, #4]
 8014412:	4618      	mov	r0, r3
 8014414:	f7fa fa68 	bl	800e8e8 <lwip_htonl>
 8014418:	4603      	mov	r3, r0
 801441a:	1ae3      	subs	r3, r4, r3
 801441c:	2b00      	cmp	r3, #0
 801441e:	da24      	bge.n	801446a <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	336c      	adds	r3, #108	; 0x6c
 8014424:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014426:	e002      	b.n	801442e <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8014428:	69fb      	ldr	r3, [r7, #28]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801442e:	69fb      	ldr	r3, [r7, #28]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d011      	beq.n	801445a <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014436:	69fb      	ldr	r3, [r7, #28]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	68db      	ldr	r3, [r3, #12]
 801443c:	685b      	ldr	r3, [r3, #4]
 801443e:	4618      	mov	r0, r3
 8014440:	f7fa fa52 	bl	800e8e8 <lwip_htonl>
 8014444:	4604      	mov	r4, r0
 8014446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014448:	68db      	ldr	r3, [r3, #12]
 801444a:	685b      	ldr	r3, [r3, #4]
 801444c:	4618      	mov	r0, r3
 801444e:	f7fa fa4b 	bl	800e8e8 <lwip_htonl>
 8014452:	4603      	mov	r3, r0
 8014454:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014456:	2b00      	cmp	r3, #0
 8014458:	dbe6      	blt.n	8014428 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 801445a:	69fb      	ldr	r3, [r7, #28]
 801445c:	681a      	ldr	r2, [r3, #0]
 801445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014460:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014462:	69fb      	ldr	r3, [r7, #28]
 8014464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014466:	601a      	str	r2, [r3, #0]
 8014468:	e009      	b.n	801447e <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801446a:	6a3b      	ldr	r3, [r7, #32]
 801446c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801446e:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8014470:	6a3b      	ldr	r3, [r7, #32]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	623b      	str	r3, [r7, #32]
 8014476:	e002      	b.n	801447e <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014478:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801447a:	f7fc fe98 	bl	80111ae <tcp_seg_free>
    }
    seg = pcb->unsent;
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014482:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014486:	2b00      	cmp	r3, #0
 8014488:	d015      	beq.n	80144b6 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801448c:	68db      	ldr	r3, [r3, #12]
 801448e:	685b      	ldr	r3, [r3, #4]
 8014490:	4618      	mov	r0, r3
 8014492:	f7fa fa29 	bl	800e8e8 <lwip_htonl>
 8014496:	4602      	mov	r2, r0
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801449c:	1ad3      	subs	r3, r2, r3
 801449e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144a0:	8912      	ldrh	r2, [r2, #8]
 80144a2:	4413      	add	r3, r2
  while (seg != NULL &&
 80144a4:	69ba      	ldr	r2, [r7, #24]
 80144a6:	429a      	cmp	r2, r3
 80144a8:	f4bf aedf 	bcs.w	801426a <tcp_output+0x15e>
  }
output_done:
 80144ac:	e003      	b.n	80144b6 <tcp_output+0x3aa>
    goto output_done;
 80144ae:	bf00      	nop
 80144b0:	e002      	b.n	80144b8 <tcp_output+0x3ac>
      break;
 80144b2:	bf00      	nop
 80144b4:	e000      	b.n	80144b8 <tcp_output+0x3ac>
output_done:
 80144b6:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d103      	bne.n	80144c8 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	2200      	movs	r2, #0
 80144c4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	7e9b      	ldrb	r3, [r3, #26]
 80144cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80144d0:	b2da      	uxtb	r2, r3
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 80144d6:	2300      	movs	r3, #0
}
 80144d8:	4618      	mov	r0, r3
 80144da:	3728      	adds	r7, #40	; 0x28
 80144dc:	46bd      	mov	sp, r7
 80144de:	bdb0      	pop	{r4, r5, r7, pc}

080144e0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80144e0:	b5b0      	push	{r4, r5, r7, lr}
 80144e2:	b08c      	sub	sp, #48	; 0x30
 80144e4:	af04      	add	r7, sp, #16
 80144e6:	60f8      	str	r0, [r7, #12]
 80144e8:	60b9      	str	r1, [r7, #8]
 80144ea:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	685b      	ldr	r3, [r3, #4]
 80144f0:	89db      	ldrh	r3, [r3, #14]
 80144f2:	2b01      	cmp	r3, #1
 80144f4:	d001      	beq.n	80144fa <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 80144f6:	2300      	movs	r3, #0
 80144f8:	e08b      	b.n	8014612 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80144fa:	68bb      	ldr	r3, [r7, #8]
 80144fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	68dc      	ldr	r4, [r3, #12]
 8014502:	4610      	mov	r0, r2
 8014504:	f7fa f9f0 	bl	800e8e8 <lwip_htonl>
 8014508:	4603      	mov	r3, r0
 801450a:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801450c:	68bb      	ldr	r3, [r7, #8]
 801450e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	68dc      	ldr	r4, [r3, #12]
 8014514:	4610      	mov	r0, r2
 8014516:	f7fa f9d9 	bl	800e8cc <lwip_htons>
 801451a:	4603      	mov	r3, r0
 801451c:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801451e:	68bb      	ldr	r3, [r7, #8]
 8014520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014522:	68ba      	ldr	r2, [r7, #8]
 8014524:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014526:	441a      	add	r2, r3
 8014528:	68bb      	ldr	r3, [r7, #8]
 801452a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	68db      	ldr	r3, [r3, #12]
 8014530:	3314      	adds	r3, #20
 8014532:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	7a9b      	ldrb	r3, [r3, #10]
 8014538:	f003 0301 	and.w	r3, r3, #1
 801453c:	2b00      	cmp	r3, #0
 801453e:	d014      	beq.n	801456a <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8014540:	68bb      	ldr	r3, [r7, #8]
 8014542:	3304      	adds	r3, #4
 8014544:	4619      	mov	r1, r3
 8014546:	f44f 7006 	mov.w	r0, #536	; 0x218
 801454a:	f7fd f8a5 	bl	8011698 <tcp_eff_send_mss_impl>
 801454e:	4603      	mov	r3, r0
 8014550:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014552:	8b7b      	ldrh	r3, [r7, #26]
 8014554:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8014558:	4618      	mov	r0, r3
 801455a:	f7fa f9c5 	bl	800e8e8 <lwip_htonl>
 801455e:	4602      	mov	r2, r0
 8014560:	69fb      	ldr	r3, [r7, #28]
 8014562:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014564:	69fb      	ldr	r3, [r7, #28]
 8014566:	3304      	adds	r3, #4
 8014568:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801456a:	68bb      	ldr	r3, [r7, #8]
 801456c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014570:	2b00      	cmp	r3, #0
 8014572:	da02      	bge.n	801457a <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8014574:	68bb      	ldr	r3, [r7, #8]
 8014576:	2200      	movs	r2, #0
 8014578:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801457a:	68bb      	ldr	r3, [r7, #8]
 801457c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801457e:	2b00      	cmp	r3, #0
 8014580:	d10c      	bne.n	801459c <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8014582:	4b26      	ldr	r3, [pc, #152]	; (801461c <tcp_output_segment+0x13c>)
 8014584:	681a      	ldr	r2, [r3, #0]
 8014586:	68bb      	ldr	r3, [r7, #8]
 8014588:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	68db      	ldr	r3, [r3, #12]
 801458e:	685b      	ldr	r3, [r3, #4]
 8014590:	4618      	mov	r0, r3
 8014592:	f7fa f9a9 	bl	800e8e8 <lwip_htonl>
 8014596:	4602      	mov	r2, r0
 8014598:	68bb      	ldr	r3, [r7, #8]
 801459a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	68db      	ldr	r3, [r3, #12]
 80145a0:	461a      	mov	r2, r3
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	685b      	ldr	r3, [r3, #4]
 80145a6:	685b      	ldr	r3, [r3, #4]
 80145a8:	1ad3      	subs	r3, r2, r3
 80145aa:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	685b      	ldr	r3, [r3, #4]
 80145b0:	8959      	ldrh	r1, [r3, #10]
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	685b      	ldr	r3, [r3, #4]
 80145b6:	8b3a      	ldrh	r2, [r7, #24]
 80145b8:	1a8a      	subs	r2, r1, r2
 80145ba:	b292      	uxth	r2, r2
 80145bc:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	685b      	ldr	r3, [r3, #4]
 80145c2:	8919      	ldrh	r1, [r3, #8]
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	685b      	ldr	r3, [r3, #4]
 80145c8:	8b3a      	ldrh	r2, [r7, #24]
 80145ca:	1a8a      	subs	r2, r1, r2
 80145cc:	b292      	uxth	r2, r2
 80145ce:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	685b      	ldr	r3, [r3, #4]
 80145d4:	68fa      	ldr	r2, [r7, #12]
 80145d6:	68d2      	ldr	r2, [r2, #12]
 80145d8:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	68db      	ldr	r3, [r3, #12]
 80145de:	2200      	movs	r2, #0
 80145e0:	741a      	strb	r2, [r3, #16]
 80145e2:	2200      	movs	r2, #0
 80145e4:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	6858      	ldr	r0, [r3, #4]
 80145ea:	68b9      	ldr	r1, [r7, #8]
 80145ec:	68bb      	ldr	r3, [r7, #8]
 80145ee:	1d1c      	adds	r4, r3, #4
 80145f0:	68bb      	ldr	r3, [r7, #8]
 80145f2:	7a9d      	ldrb	r5, [r3, #10]
 80145f4:	68bb      	ldr	r3, [r7, #8]
 80145f6:	7a5b      	ldrb	r3, [r3, #9]
 80145f8:	687a      	ldr	r2, [r7, #4]
 80145fa:	9202      	str	r2, [sp, #8]
 80145fc:	2206      	movs	r2, #6
 80145fe:	9201      	str	r2, [sp, #4]
 8014600:	9300      	str	r3, [sp, #0]
 8014602:	462b      	mov	r3, r5
 8014604:	4622      	mov	r2, r4
 8014606:	f002 f897 	bl	8016738 <ip4_output_if>
 801460a:	4603      	mov	r3, r0
 801460c:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 801460e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014612:	4618      	mov	r0, r3
 8014614:	3720      	adds	r7, #32
 8014616:	46bd      	mov	sp, r7
 8014618:	bdb0      	pop	{r4, r5, r7, pc}
 801461a:	bf00      	nop
 801461c:	24024e50 	.word	0x24024e50

08014620 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b08c      	sub	sp, #48	; 0x30
 8014624:	af04      	add	r7, sp, #16
 8014626:	60f8      	str	r0, [r7, #12]
 8014628:	60b9      	str	r1, [r7, #8]
 801462a:	607a      	str	r2, [r7, #4]
 801462c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 801462e:	2200      	movs	r2, #0
 8014630:	2114      	movs	r1, #20
 8014632:	2001      	movs	r0, #1
 8014634:	f7fb f8f0 	bl	800f818 <pbuf_alloc>
 8014638:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801463a:	69fb      	ldr	r3, [r7, #28]
 801463c:	2b00      	cmp	r3, #0
 801463e:	d05b      	beq.n	80146f8 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014640:	69fb      	ldr	r3, [r7, #28]
 8014642:	895b      	ldrh	r3, [r3, #10]
 8014644:	2b13      	cmp	r3, #19
 8014646:	d806      	bhi.n	8014656 <tcp_rst+0x36>
 8014648:	4b2d      	ldr	r3, [pc, #180]	; (8014700 <tcp_rst+0xe0>)
 801464a:	f240 524d 	movw	r2, #1357	; 0x54d
 801464e:	492d      	ldr	r1, [pc, #180]	; (8014704 <tcp_rst+0xe4>)
 8014650:	482d      	ldr	r0, [pc, #180]	; (8014708 <tcp_rst+0xe8>)
 8014652:	f003 f99f 	bl	8017994 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8014656:	69fb      	ldr	r3, [r7, #28]
 8014658:	685b      	ldr	r3, [r3, #4]
 801465a:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 801465c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801465e:	4618      	mov	r0, r3
 8014660:	f7fa f934 	bl	800e8cc <lwip_htons>
 8014664:	4603      	mov	r3, r0
 8014666:	461a      	mov	r2, r3
 8014668:	69bb      	ldr	r3, [r7, #24]
 801466a:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 801466c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801466e:	4618      	mov	r0, r3
 8014670:	f7fa f92c 	bl	800e8cc <lwip_htons>
 8014674:	4603      	mov	r3, r0
 8014676:	461a      	mov	r2, r3
 8014678:	69bb      	ldr	r3, [r7, #24]
 801467a:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 801467c:	68f8      	ldr	r0, [r7, #12]
 801467e:	f7fa f933 	bl	800e8e8 <lwip_htonl>
 8014682:	4602      	mov	r2, r0
 8014684:	69bb      	ldr	r3, [r7, #24]
 8014686:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8014688:	68b8      	ldr	r0, [r7, #8]
 801468a:	f7fa f92d 	bl	800e8e8 <lwip_htonl>
 801468e:	4602      	mov	r2, r0
 8014690:	69bb      	ldr	r3, [r7, #24]
 8014692:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8014694:	f245 0014 	movw	r0, #20500	; 0x5014
 8014698:	f7fa f918 	bl	800e8cc <lwip_htons>
 801469c:	4603      	mov	r3, r0
 801469e:	461a      	mov	r2, r3
 80146a0:	69bb      	ldr	r3, [r7, #24]
 80146a2:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 80146a4:	69bb      	ldr	r3, [r7, #24]
 80146a6:	2200      	movs	r2, #0
 80146a8:	f042 0208 	orr.w	r2, r2, #8
 80146ac:	739a      	strb	r2, [r3, #14]
 80146ae:	2200      	movs	r2, #0
 80146b0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80146b4:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 80146b6:	69bb      	ldr	r3, [r7, #24]
 80146b8:	2200      	movs	r2, #0
 80146ba:	741a      	strb	r2, [r3, #16]
 80146bc:	2200      	movs	r2, #0
 80146be:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 80146c0:	69bb      	ldr	r3, [r7, #24]
 80146c2:	2200      	movs	r2, #0
 80146c4:	749a      	strb	r2, [r3, #18]
 80146c6:	2200      	movs	r2, #0
 80146c8:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 80146ca:	6838      	ldr	r0, [r7, #0]
 80146cc:	f001 fe7c 	bl	80163c8 <ip4_route>
 80146d0:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 80146d2:	697b      	ldr	r3, [r7, #20]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d00b      	beq.n	80146f0 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 80146d8:	697b      	ldr	r3, [r7, #20]
 80146da:	9302      	str	r3, [sp, #8]
 80146dc:	2306      	movs	r3, #6
 80146de:	9301      	str	r3, [sp, #4]
 80146e0:	2300      	movs	r3, #0
 80146e2:	9300      	str	r3, [sp, #0]
 80146e4:	23ff      	movs	r3, #255	; 0xff
 80146e6:	683a      	ldr	r2, [r7, #0]
 80146e8:	6879      	ldr	r1, [r7, #4]
 80146ea:	69f8      	ldr	r0, [r7, #28]
 80146ec:	f002 f824 	bl	8016738 <ip4_output_if>
  }
  pbuf_free(p);
 80146f0:	69f8      	ldr	r0, [r7, #28]
 80146f2:	f7fb fc03 	bl	800fefc <pbuf_free>
 80146f6:	e000      	b.n	80146fa <tcp_rst+0xda>
    return;
 80146f8:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80146fa:	3720      	adds	r7, #32
 80146fc:	46bd      	mov	sp, r7
 80146fe:	bd80      	pop	{r7, pc}
 8014700:	08019c88 	.word	0x08019c88
 8014704:	08019cbc 	.word	0x08019cbc
 8014708:	08019cec 	.word	0x08019cec

0801470c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b084      	sub	sp, #16
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014718:	2b00      	cmp	r3, #0
 801471a:	d029      	beq.n	8014770 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014720:	60fb      	str	r3, [r7, #12]
 8014722:	e002      	b.n	801472a <tcp_rexmit_rto+0x1e>
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	60fb      	str	r3, [r7, #12]
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d1f8      	bne.n	8014724 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	2200      	movs	r2, #0
 8014746:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801474e:	2bff      	cmp	r3, #255	; 0xff
 8014750:	d007      	beq.n	8014762 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014758:	3301      	adds	r3, #1
 801475a:	b2da      	uxtb	r2, r3
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	2200      	movs	r2, #0
 8014766:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8014768:	6878      	ldr	r0, [r7, #4]
 801476a:	f7ff fccf 	bl	801410c <tcp_output>
 801476e:	e000      	b.n	8014772 <tcp_rexmit_rto+0x66>
    return;
 8014770:	bf00      	nop
}
 8014772:	3710      	adds	r7, #16
 8014774:	46bd      	mov	sp, r7
 8014776:	bd80      	pop	{r7, pc}

08014778 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014778:	b590      	push	{r4, r7, lr}
 801477a:	b085      	sub	sp, #20
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014784:	2b00      	cmp	r3, #0
 8014786:	d043      	beq.n	8014810 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801478c:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 801478e:	68bb      	ldr	r3, [r7, #8]
 8014790:	681a      	ldr	r2, [r3, #0]
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	3368      	adds	r3, #104	; 0x68
 801479a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801479c:	e002      	b.n	80147a4 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d011      	beq.n	80147d0 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	68db      	ldr	r3, [r3, #12]
 80147b2:	685b      	ldr	r3, [r3, #4]
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7fa f897 	bl	800e8e8 <lwip_htonl>
 80147ba:	4604      	mov	r4, r0
 80147bc:	68bb      	ldr	r3, [r7, #8]
 80147be:	68db      	ldr	r3, [r3, #12]
 80147c0:	685b      	ldr	r3, [r3, #4]
 80147c2:	4618      	mov	r0, r3
 80147c4:	f7fa f890 	bl	800e8e8 <lwip_htonl>
 80147c8:	4603      	mov	r3, r0
 80147ca:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	dbe6      	blt.n	801479e <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	681a      	ldr	r2, [r3, #0]
 80147d4:	68bb      	ldr	r3, [r7, #8]
 80147d6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	68ba      	ldr	r2, [r7, #8]
 80147dc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80147de:	68bb      	ldr	r3, [r7, #8]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d103      	bne.n	80147ee <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	2200      	movs	r2, #0
 80147ea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80147f4:	2bff      	cmp	r3, #255	; 0xff
 80147f6:	d007      	beq.n	8014808 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80147fe:	3301      	adds	r3, #1
 8014800:	b2da      	uxtb	r2, r3
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	2200      	movs	r2, #0
 801480c:	635a      	str	r2, [r3, #52]	; 0x34
 801480e:	e000      	b.n	8014812 <tcp_rexmit+0x9a>
    return;
 8014810:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8014812:	3714      	adds	r7, #20
 8014814:	46bd      	mov	sp, r7
 8014816:	bd90      	pop	{r4, r7, pc}

08014818 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b082      	sub	sp, #8
 801481c:	af00      	add	r7, sp, #0
 801481e:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014824:	2b00      	cmp	r3, #0
 8014826:	d04c      	beq.n	80148c2 <tcp_rexmit_fast+0xaa>
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	7e9b      	ldrb	r3, [r3, #26]
 801482c:	f003 0304 	and.w	r3, r3, #4
 8014830:	2b00      	cmp	r3, #0
 8014832:	d146      	bne.n	80148c2 <tcp_rexmit_fast+0xaa>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8014834:	6878      	ldr	r0, [r7, #4]
 8014836:	f7ff ff9f 	bl	8014778 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014846:	429a      	cmp	r2, r3
 8014848:	d208      	bcs.n	801485c <tcp_rexmit_fast+0x44>
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014850:	2b00      	cmp	r3, #0
 8014852:	da00      	bge.n	8014856 <tcp_rexmit_fast+0x3e>
 8014854:	3301      	adds	r3, #1
 8014856:	105b      	asrs	r3, r3, #1
 8014858:	b29b      	uxth	r3, r3
 801485a:	e007      	b.n	801486c <tcp_rexmit_fast+0x54>
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014862:	2b00      	cmp	r3, #0
 8014864:	da00      	bge.n	8014868 <tcp_rexmit_fast+0x50>
 8014866:	3301      	adds	r3, #1
 8014868:	105b      	asrs	r3, r3, #1
 801486a:	b29b      	uxth	r3, r3
 801486c:	687a      	ldr	r2, [r7, #4]
 801486e:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014878:	461a      	mov	r2, r3
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801487e:	005b      	lsls	r3, r3, #1
 8014880:	429a      	cmp	r2, r3
 8014882:	d206      	bcs.n	8014892 <tcp_rexmit_fast+0x7a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014888:	005b      	lsls	r3, r3, #1
 801488a:	b29a      	uxth	r2, r3
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801489c:	4619      	mov	r1, r3
 801489e:	0049      	lsls	r1, r1, #1
 80148a0:	440b      	add	r3, r1
 80148a2:	b29b      	uxth	r3, r3
 80148a4:	4413      	add	r3, r2
 80148a6:	b29a      	uxth	r2, r3
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	7e9b      	ldrb	r3, [r3, #26]
 80148b2:	f043 0304 	orr.w	r3, r3, #4
 80148b6:	b2da      	uxtb	r2, r3
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	2200      	movs	r2, #0
 80148c0:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 80148c2:	bf00      	nop
 80148c4:	3708      	adds	r7, #8
 80148c6:	46bd      	mov	sp, r7
 80148c8:	bd80      	pop	{r7, pc}

080148ca <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80148ca:	b580      	push	{r7, lr}
 80148cc:	b08a      	sub	sp, #40	; 0x28
 80148ce:	af04      	add	r7, sp, #16
 80148d0:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80148d6:	3b01      	subs	r3, #1
 80148d8:	4618      	mov	r0, r3
 80148da:	f7fa f805 	bl	800e8e8 <lwip_htonl>
 80148de:	4603      	mov	r3, r0
 80148e0:	2200      	movs	r2, #0
 80148e2:	2100      	movs	r1, #0
 80148e4:	6878      	ldr	r0, [r7, #4]
 80148e6:	f7ff f975 	bl	8013bd4 <tcp_output_alloc_header>
 80148ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80148ec:	693b      	ldr	r3, [r7, #16]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d102      	bne.n	80148f8 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80148f2:	f04f 33ff 	mov.w	r3, #4294967295
 80148f6:	e021      	b.n	801493c <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	3304      	adds	r3, #4
 80148fc:	4618      	mov	r0, r3
 80148fe:	f001 fd63 	bl	80163c8 <ip4_route>
 8014902:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d102      	bne.n	8014910 <tcp_keepalive+0x46>
    err = ERR_RTE;
 801490a:	23fc      	movs	r3, #252	; 0xfc
 801490c:	75fb      	strb	r3, [r7, #23]
 801490e:	e010      	b.n	8014932 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8014910:	6879      	ldr	r1, [r7, #4]
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	1d1a      	adds	r2, r3, #4
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	7a98      	ldrb	r0, [r3, #10]
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	9302      	str	r3, [sp, #8]
 801491e:	2306      	movs	r3, #6
 8014920:	9301      	str	r3, [sp, #4]
 8014922:	2300      	movs	r3, #0
 8014924:	9300      	str	r3, [sp, #0]
 8014926:	4603      	mov	r3, r0
 8014928:	6938      	ldr	r0, [r7, #16]
 801492a:	f001 ff05 	bl	8016738 <ip4_output_if>
 801492e:	4603      	mov	r3, r0
 8014930:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8014932:	6938      	ldr	r0, [r7, #16]
 8014934:	f7fb fae2 	bl	800fefc <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014938:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801493c:	4618      	mov	r0, r3
 801493e:	3718      	adds	r7, #24
 8014940:	46bd      	mov	sp, r7
 8014942:	bd80      	pop	{r7, pc}

08014944 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014944:	b590      	push	{r4, r7, lr}
 8014946:	b08f      	sub	sp, #60	; 0x3c
 8014948:	af04      	add	r7, sp, #16
 801494a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014950:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8014952:	6a3b      	ldr	r3, [r7, #32]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d102      	bne.n	801495e <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801495c:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 801495e:	6a3b      	ldr	r3, [r7, #32]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d101      	bne.n	8014968 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8014964:	2300      	movs	r3, #0
 8014966:	e085      	b.n	8014a74 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014968:	6a3b      	ldr	r3, [r7, #32]
 801496a:	68db      	ldr	r3, [r3, #12]
 801496c:	899b      	ldrh	r3, [r3, #12]
 801496e:	b29b      	uxth	r3, r3
 8014970:	4618      	mov	r0, r3
 8014972:	f7f9 ffab 	bl	800e8cc <lwip_htons>
 8014976:	4603      	mov	r3, r0
 8014978:	f003 0301 	and.w	r3, r3, #1
 801497c:	2b00      	cmp	r3, #0
 801497e:	d005      	beq.n	801498c <tcp_zero_window_probe+0x48>
 8014980:	6a3b      	ldr	r3, [r7, #32]
 8014982:	891b      	ldrh	r3, [r3, #8]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d101      	bne.n	801498c <tcp_zero_window_probe+0x48>
 8014988:	2301      	movs	r3, #1
 801498a:	e000      	b.n	801498e <tcp_zero_window_probe+0x4a>
 801498c:	2300      	movs	r3, #0
 801498e:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014990:	7ffb      	ldrb	r3, [r7, #31]
 8014992:	2b00      	cmp	r3, #0
 8014994:	bf0c      	ite	eq
 8014996:	2301      	moveq	r3, #1
 8014998:	2300      	movne	r3, #0
 801499a:	b2db      	uxtb	r3, r3
 801499c:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801499e:	6a3b      	ldr	r3, [r7, #32]
 80149a0:	68db      	ldr	r3, [r3, #12]
 80149a2:	685b      	ldr	r3, [r3, #4]
 80149a4:	8bba      	ldrh	r2, [r7, #28]
 80149a6:	2100      	movs	r1, #0
 80149a8:	6878      	ldr	r0, [r7, #4]
 80149aa:	f7ff f913 	bl	8013bd4 <tcp_output_alloc_header>
 80149ae:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80149b0:	69bb      	ldr	r3, [r7, #24]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d102      	bne.n	80149bc <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80149b6:	f04f 33ff 	mov.w	r3, #4294967295
 80149ba:	e05b      	b.n	8014a74 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80149bc:	69bb      	ldr	r3, [r7, #24]
 80149be:	685b      	ldr	r3, [r3, #4]
 80149c0:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80149c2:	7ffb      	ldrb	r3, [r7, #31]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d00e      	beq.n	80149e6 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80149c8:	697b      	ldr	r3, [r7, #20]
 80149ca:	899b      	ldrh	r3, [r3, #12]
 80149cc:	b29b      	uxth	r3, r3
 80149ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80149d2:	b29c      	uxth	r4, r3
 80149d4:	2011      	movs	r0, #17
 80149d6:	f7f9 ff79 	bl	800e8cc <lwip_htons>
 80149da:	4603      	mov	r3, r0
 80149dc:	4323      	orrs	r3, r4
 80149de:	b29a      	uxth	r2, r3
 80149e0:	697b      	ldr	r3, [r7, #20]
 80149e2:	819a      	strh	r2, [r3, #12]
 80149e4:	e010      	b.n	8014a08 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80149e6:	69bb      	ldr	r3, [r7, #24]
 80149e8:	685b      	ldr	r3, [r3, #4]
 80149ea:	3314      	adds	r3, #20
 80149ec:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80149ee:	6a3b      	ldr	r3, [r7, #32]
 80149f0:	6858      	ldr	r0, [r3, #4]
 80149f2:	6a3b      	ldr	r3, [r7, #32]
 80149f4:	685b      	ldr	r3, [r3, #4]
 80149f6:	891a      	ldrh	r2, [r3, #8]
 80149f8:	6a3b      	ldr	r3, [r7, #32]
 80149fa:	891b      	ldrh	r3, [r3, #8]
 80149fc:	1ad3      	subs	r3, r2, r3
 80149fe:	b29b      	uxth	r3, r3
 8014a00:	2201      	movs	r2, #1
 8014a02:	6939      	ldr	r1, [r7, #16]
 8014a04:	f7fb fc76 	bl	80102f4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014a08:	6a3b      	ldr	r3, [r7, #32]
 8014a0a:	68db      	ldr	r3, [r3, #12]
 8014a0c:	685b      	ldr	r3, [r3, #4]
 8014a0e:	4618      	mov	r0, r3
 8014a10:	f7f9 ff6a 	bl	800e8e8 <lwip_htonl>
 8014a14:	4603      	mov	r3, r0
 8014a16:	3301      	adds	r3, #1
 8014a18:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	1ad3      	subs	r3, r2, r3
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	da02      	bge.n	8014a2c <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	68fa      	ldr	r2, [r7, #12]
 8014a2a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	3304      	adds	r3, #4
 8014a30:	4618      	mov	r0, r3
 8014a32:	f001 fcc9 	bl	80163c8 <ip4_route>
 8014a36:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8014a38:	68bb      	ldr	r3, [r7, #8]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d103      	bne.n	8014a46 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8014a3e:	23fc      	movs	r3, #252	; 0xfc
 8014a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014a44:	e011      	b.n	8014a6a <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014a46:	6879      	ldr	r1, [r7, #4]
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	1d1a      	adds	r2, r3, #4
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	7a98      	ldrb	r0, [r3, #10]
 8014a50:	68bb      	ldr	r3, [r7, #8]
 8014a52:	9302      	str	r3, [sp, #8]
 8014a54:	2306      	movs	r3, #6
 8014a56:	9301      	str	r3, [sp, #4]
 8014a58:	2300      	movs	r3, #0
 8014a5a:	9300      	str	r3, [sp, #0]
 8014a5c:	4603      	mov	r3, r0
 8014a5e:	69b8      	ldr	r0, [r7, #24]
 8014a60:	f001 fe6a 	bl	8016738 <ip4_output_if>
 8014a64:	4603      	mov	r3, r0
 8014a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8014a6a:	69b8      	ldr	r0, [r7, #24]
 8014a6c:	f7fb fa46 	bl	800fefc <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014a70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014a74:	4618      	mov	r0, r3
 8014a76:	372c      	adds	r7, #44	; 0x2c
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	bd90      	pop	{r4, r7, pc}

08014a7c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b082      	sub	sp, #8
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014a84:	f7fb fcb8 	bl	80103f8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014a88:	4b0a      	ldr	r3, [pc, #40]	; (8014ab4 <tcpip_tcp_timer+0x38>)
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d103      	bne.n	8014a98 <tcpip_tcp_timer+0x1c>
 8014a90:	4b09      	ldr	r3, [pc, #36]	; (8014ab8 <tcpip_tcp_timer+0x3c>)
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d005      	beq.n	8014aa4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014a98:	2200      	movs	r2, #0
 8014a9a:	4908      	ldr	r1, [pc, #32]	; (8014abc <tcpip_tcp_timer+0x40>)
 8014a9c:	20fa      	movs	r0, #250	; 0xfa
 8014a9e:	f000 f86f 	bl	8014b80 <sys_timeout>
 8014aa2:	e002      	b.n	8014aaa <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014aa4:	4b06      	ldr	r3, [pc, #24]	; (8014ac0 <tcpip_tcp_timer+0x44>)
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	601a      	str	r2, [r3, #0]
  }
}
 8014aaa:	bf00      	nop
 8014aac:	3708      	adds	r7, #8
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bd80      	pop	{r7, pc}
 8014ab2:	bf00      	nop
 8014ab4:	24024e4c 	.word	0x24024e4c
 8014ab8:	24024e5c 	.word	0x24024e5c
 8014abc:	08014a7d 	.word	0x08014a7d
 8014ac0:	2402183c 	.word	0x2402183c

08014ac4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014ac8:	4b0a      	ldr	r3, [pc, #40]	; (8014af4 <tcp_timer_needed+0x30>)
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d10f      	bne.n	8014af0 <tcp_timer_needed+0x2c>
 8014ad0:	4b09      	ldr	r3, [pc, #36]	; (8014af8 <tcp_timer_needed+0x34>)
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d103      	bne.n	8014ae0 <tcp_timer_needed+0x1c>
 8014ad8:	4b08      	ldr	r3, [pc, #32]	; (8014afc <tcp_timer_needed+0x38>)
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d007      	beq.n	8014af0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014ae0:	4b04      	ldr	r3, [pc, #16]	; (8014af4 <tcp_timer_needed+0x30>)
 8014ae2:	2201      	movs	r2, #1
 8014ae4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	4905      	ldr	r1, [pc, #20]	; (8014b00 <tcp_timer_needed+0x3c>)
 8014aea:	20fa      	movs	r0, #250	; 0xfa
 8014aec:	f000 f848 	bl	8014b80 <sys_timeout>
  }
}
 8014af0:	bf00      	nop
 8014af2:	bd80      	pop	{r7, pc}
 8014af4:	2402183c 	.word	0x2402183c
 8014af8:	24024e4c 	.word	0x24024e4c
 8014afc:	24024e5c 	.word	0x24024e5c
 8014b00:	08014a7d 	.word	0x08014a7d

08014b04 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b084      	sub	sp, #16
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	685b      	ldr	r3, [r3, #4]
 8014b14:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	687a      	ldr	r2, [r7, #4]
 8014b1c:	4903      	ldr	r1, [pc, #12]	; (8014b2c <cyclic_timer+0x28>)
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f000 f82e 	bl	8014b80 <sys_timeout>
}
 8014b24:	bf00      	nop
 8014b26:	3710      	adds	r7, #16
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bd80      	pop	{r7, pc}
 8014b2c:	08014b05 	.word	0x08014b05

08014b30 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b082      	sub	sp, #8
 8014b34:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014b36:	2301      	movs	r3, #1
 8014b38:	607b      	str	r3, [r7, #4]
 8014b3a:	e00e      	b.n	8014b5a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8014b3c:	4a0d      	ldr	r2, [pc, #52]	; (8014b74 <sys_timeouts_init+0x44>)
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	00db      	lsls	r3, r3, #3
 8014b48:	4a0a      	ldr	r2, [pc, #40]	; (8014b74 <sys_timeouts_init+0x44>)
 8014b4a:	4413      	add	r3, r2
 8014b4c:	461a      	mov	r2, r3
 8014b4e:	490a      	ldr	r1, [pc, #40]	; (8014b78 <sys_timeouts_init+0x48>)
 8014b50:	f000 f816 	bl	8014b80 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	3301      	adds	r3, #1
 8014b58:	607b      	str	r3, [r7, #4]
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	2b02      	cmp	r3, #2
 8014b5e:	d9ed      	bls.n	8014b3c <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8014b60:	f7f6 f90c 	bl	800ad7c <sys_now>
 8014b64:	4602      	mov	r2, r0
 8014b66:	4b05      	ldr	r3, [pc, #20]	; (8014b7c <sys_timeouts_init+0x4c>)
 8014b68:	601a      	str	r2, [r3, #0]
}
 8014b6a:	bf00      	nop
 8014b6c:	3708      	adds	r7, #8
 8014b6e:	46bd      	mov	sp, r7
 8014b70:	bd80      	pop	{r7, pc}
 8014b72:	bf00      	nop
 8014b74:	0801a9c4 	.word	0x0801a9c4
 8014b78:	08014b05 	.word	0x08014b05
 8014b7c:	24021838 	.word	0x24021838

08014b80 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b088      	sub	sp, #32
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	60f8      	str	r0, [r7, #12]
 8014b88:	60b9      	str	r1, [r7, #8]
 8014b8a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014b8c:	200b      	movs	r0, #11
 8014b8e:	f7fa fb63 	bl	800f258 <memp_malloc>
 8014b92:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8014b94:	697b      	ldr	r3, [r7, #20]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d10a      	bne.n	8014bb0 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014b9a:	697b      	ldr	r3, [r7, #20]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	f040 8084 	bne.w	8014caa <sys_timeout+0x12a>
 8014ba2:	4b44      	ldr	r3, [pc, #272]	; (8014cb4 <sys_timeout+0x134>)
 8014ba4:	22d4      	movs	r2, #212	; 0xd4
 8014ba6:	4944      	ldr	r1, [pc, #272]	; (8014cb8 <sys_timeout+0x138>)
 8014ba8:	4844      	ldr	r0, [pc, #272]	; (8014cbc <sys_timeout+0x13c>)
 8014baa:	f002 fef3 	bl	8017994 <iprintf>
    return;
 8014bae:	e07c      	b.n	8014caa <sys_timeout+0x12a>
  }

  now = sys_now();
 8014bb0:	f7f6 f8e4 	bl	800ad7c <sys_now>
 8014bb4:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8014bb6:	4b42      	ldr	r3, [pc, #264]	; (8014cc0 <sys_timeout+0x140>)
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d105      	bne.n	8014bca <sys_timeout+0x4a>
    diff = 0;
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8014bc2:	4a40      	ldr	r2, [pc, #256]	; (8014cc4 <sys_timeout+0x144>)
 8014bc4:	693b      	ldr	r3, [r7, #16]
 8014bc6:	6013      	str	r3, [r2, #0]
 8014bc8:	e004      	b.n	8014bd4 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8014bca:	4b3e      	ldr	r3, [pc, #248]	; (8014cc4 <sys_timeout+0x144>)
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	693a      	ldr	r2, [r7, #16]
 8014bd0:	1ad3      	subs	r3, r2, r3
 8014bd2:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8014bd4:	697b      	ldr	r3, [r7, #20]
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014bda:	697b      	ldr	r3, [r7, #20]
 8014bdc:	68ba      	ldr	r2, [r7, #8]
 8014bde:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014be0:	697b      	ldr	r3, [r7, #20]
 8014be2:	687a      	ldr	r2, [r7, #4]
 8014be4:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8014be6:	68fa      	ldr	r2, [r7, #12]
 8014be8:	69bb      	ldr	r3, [r7, #24]
 8014bea:	441a      	add	r2, r3
 8014bec:	697b      	ldr	r3, [r7, #20]
 8014bee:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014bf0:	4b33      	ldr	r3, [pc, #204]	; (8014cc0 <sys_timeout+0x140>)
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d103      	bne.n	8014c00 <sys_timeout+0x80>
    next_timeout = timeout;
 8014bf8:	4a31      	ldr	r2, [pc, #196]	; (8014cc0 <sys_timeout+0x140>)
 8014bfa:	697b      	ldr	r3, [r7, #20]
 8014bfc:	6013      	str	r3, [r2, #0]
    return;
 8014bfe:	e055      	b.n	8014cac <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8014c00:	4b2f      	ldr	r3, [pc, #188]	; (8014cc0 <sys_timeout+0x140>)
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	685b      	ldr	r3, [r3, #4]
 8014c06:	68fa      	ldr	r2, [r7, #12]
 8014c08:	429a      	cmp	r2, r3
 8014c0a:	d20f      	bcs.n	8014c2c <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8014c0c:	4b2c      	ldr	r3, [pc, #176]	; (8014cc0 <sys_timeout+0x140>)
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	6859      	ldr	r1, [r3, #4]
 8014c12:	4b2b      	ldr	r3, [pc, #172]	; (8014cc0 <sys_timeout+0x140>)
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	68fa      	ldr	r2, [r7, #12]
 8014c18:	1a8a      	subs	r2, r1, r2
 8014c1a:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8014c1c:	4b28      	ldr	r3, [pc, #160]	; (8014cc0 <sys_timeout+0x140>)
 8014c1e:	681a      	ldr	r2, [r3, #0]
 8014c20:	697b      	ldr	r3, [r7, #20]
 8014c22:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014c24:	4a26      	ldr	r2, [pc, #152]	; (8014cc0 <sys_timeout+0x140>)
 8014c26:	697b      	ldr	r3, [r7, #20]
 8014c28:	6013      	str	r3, [r2, #0]
 8014c2a:	e03f      	b.n	8014cac <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014c2c:	4b24      	ldr	r3, [pc, #144]	; (8014cc0 <sys_timeout+0x140>)
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	61fb      	str	r3, [r7, #28]
 8014c32:	e036      	b.n	8014ca2 <sys_timeout+0x122>
      timeout->time -= t->time;
 8014c34:	697b      	ldr	r3, [r7, #20]
 8014c36:	685a      	ldr	r2, [r3, #4]
 8014c38:	69fb      	ldr	r3, [r7, #28]
 8014c3a:	685b      	ldr	r3, [r3, #4]
 8014c3c:	1ad2      	subs	r2, r2, r3
 8014c3e:	697b      	ldr	r3, [r7, #20]
 8014c40:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8014c42:	69fb      	ldr	r3, [r7, #28]
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d006      	beq.n	8014c58 <sys_timeout+0xd8>
 8014c4a:	69fb      	ldr	r3, [r7, #28]
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	685a      	ldr	r2, [r3, #4]
 8014c50:	697b      	ldr	r3, [r7, #20]
 8014c52:	685b      	ldr	r3, [r3, #4]
 8014c54:	429a      	cmp	r2, r3
 8014c56:	d921      	bls.n	8014c9c <sys_timeout+0x11c>
        if (t->next != NULL) {
 8014c58:	69fb      	ldr	r3, [r7, #28]
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d009      	beq.n	8014c74 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8014c60:	69fb      	ldr	r3, [r7, #28]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	6859      	ldr	r1, [r3, #4]
 8014c66:	697b      	ldr	r3, [r7, #20]
 8014c68:	685a      	ldr	r2, [r3, #4]
 8014c6a:	69fb      	ldr	r3, [r7, #28]
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	1a8a      	subs	r2, r1, r2
 8014c70:	605a      	str	r2, [r3, #4]
 8014c72:	e00b      	b.n	8014c8c <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8014c74:	697b      	ldr	r3, [r7, #20]
 8014c76:	685b      	ldr	r3, [r3, #4]
 8014c78:	68fa      	ldr	r2, [r7, #12]
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	d206      	bcs.n	8014c8c <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8014c7e:	4b10      	ldr	r3, [pc, #64]	; (8014cc0 <sys_timeout+0x140>)
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	685a      	ldr	r2, [r3, #4]
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	441a      	add	r2, r3
 8014c88:	697b      	ldr	r3, [r7, #20]
 8014c8a:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8014c8c:	69fb      	ldr	r3, [r7, #28]
 8014c8e:	681a      	ldr	r2, [r3, #0]
 8014c90:	697b      	ldr	r3, [r7, #20]
 8014c92:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014c94:	69fb      	ldr	r3, [r7, #28]
 8014c96:	697a      	ldr	r2, [r7, #20]
 8014c98:	601a      	str	r2, [r3, #0]
        break;
 8014c9a:	e007      	b.n	8014cac <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014c9c:	69fb      	ldr	r3, [r7, #28]
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	61fb      	str	r3, [r7, #28]
 8014ca2:	69fb      	ldr	r3, [r7, #28]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d1c5      	bne.n	8014c34 <sys_timeout+0xb4>
 8014ca8:	e000      	b.n	8014cac <sys_timeout+0x12c>
    return;
 8014caa:	bf00      	nop
      }
    }
  }
}
 8014cac:	3720      	adds	r7, #32
 8014cae:	46bd      	mov	sp, r7
 8014cb0:	bd80      	pop	{r7, pc}
 8014cb2:	bf00      	nop
 8014cb4:	0801a0cc 	.word	0x0801a0cc
 8014cb8:	0801a100 	.word	0x0801a100
 8014cbc:	0801a140 	.word	0x0801a140
 8014cc0:	24021834 	.word	0x24021834
 8014cc4:	24021838 	.word	0x24021838

08014cc8 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b086      	sub	sp, #24
 8014ccc:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8014cce:	4b24      	ldr	r3, [pc, #144]	; (8014d60 <sys_check_timeouts+0x98>)
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d03f      	beq.n	8014d56 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8014cd6:	f7f6 f851 	bl	800ad7c <sys_now>
 8014cda:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8014cdc:	4b21      	ldr	r3, [pc, #132]	; (8014d64 <sys_check_timeouts+0x9c>)
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	68fa      	ldr	r2, [r7, #12]
 8014ce2:	1ad3      	subs	r3, r2, r3
 8014ce4:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8014cea:	4b1d      	ldr	r3, [pc, #116]	; (8014d60 <sys_check_timeouts+0x98>)
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8014cf0:	68bb      	ldr	r3, [r7, #8]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d02c      	beq.n	8014d50 <sys_check_timeouts+0x88>
 8014cf6:	68bb      	ldr	r3, [r7, #8]
 8014cf8:	685b      	ldr	r3, [r3, #4]
 8014cfa:	697a      	ldr	r2, [r7, #20]
 8014cfc:	429a      	cmp	r2, r3
 8014cfe:	d327      	bcc.n	8014d50 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8014d00:	2301      	movs	r3, #1
 8014d02:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8014d04:	68bb      	ldr	r3, [r7, #8]
 8014d06:	685a      	ldr	r2, [r3, #4]
 8014d08:	4b16      	ldr	r3, [pc, #88]	; (8014d64 <sys_check_timeouts+0x9c>)
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	4413      	add	r3, r2
 8014d0e:	4a15      	ldr	r2, [pc, #84]	; (8014d64 <sys_check_timeouts+0x9c>)
 8014d10:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8014d12:	68bb      	ldr	r3, [r7, #8]
 8014d14:	685b      	ldr	r3, [r3, #4]
 8014d16:	697a      	ldr	r2, [r7, #20]
 8014d18:	1ad3      	subs	r3, r2, r3
 8014d1a:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8014d1c:	68bb      	ldr	r3, [r7, #8]
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	4a0f      	ldr	r2, [pc, #60]	; (8014d60 <sys_check_timeouts+0x98>)
 8014d22:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8014d24:	68bb      	ldr	r3, [r7, #8]
 8014d26:	689b      	ldr	r3, [r3, #8]
 8014d28:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8014d2a:	68bb      	ldr	r3, [r7, #8]
 8014d2c:	68db      	ldr	r3, [r3, #12]
 8014d2e:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014d30:	68b9      	ldr	r1, [r7, #8]
 8014d32:	200b      	movs	r0, #11
 8014d34:	f7fa fb06 	bl	800f344 <memp_free>
        if (handler != NULL) {
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d008      	beq.n	8014d50 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 8014d3e:	480a      	ldr	r0, [pc, #40]	; (8014d68 <sys_check_timeouts+0xa0>)
 8014d40:	f002 fd82 	bl	8017848 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	6838      	ldr	r0, [r7, #0]
 8014d48:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8014d4a:	4807      	ldr	r0, [pc, #28]	; (8014d68 <sys_check_timeouts+0xa0>)
 8014d4c:	f002 fd8b 	bl	8017866 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8014d50:	7cfb      	ldrb	r3, [r7, #19]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d1c7      	bne.n	8014ce6 <sys_check_timeouts+0x1e>
  }
}
 8014d56:	bf00      	nop
 8014d58:	3718      	adds	r7, #24
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	bd80      	pop	{r7, pc}
 8014d5e:	bf00      	nop
 8014d60:	24021834 	.word	0x24021834
 8014d64:	24021838 	.word	0x24021838
 8014d68:	24021c50 	.word	0x24021c50

08014d6c <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b082      	sub	sp, #8
 8014d70:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8014d72:	4b0f      	ldr	r3, [pc, #60]	; (8014db0 <sys_timeouts_sleeptime+0x44>)
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d102      	bne.n	8014d80 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8014d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8014d7e:	e013      	b.n	8014da8 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8014d80:	f7f5 fffc 	bl	800ad7c <sys_now>
 8014d84:	4602      	mov	r2, r0
 8014d86:	4b0b      	ldr	r3, [pc, #44]	; (8014db4 <sys_timeouts_sleeptime+0x48>)
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	1ad3      	subs	r3, r2, r3
 8014d8c:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8014d8e:	4b08      	ldr	r3, [pc, #32]	; (8014db0 <sys_timeouts_sleeptime+0x44>)
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	685b      	ldr	r3, [r3, #4]
 8014d94:	687a      	ldr	r2, [r7, #4]
 8014d96:	429a      	cmp	r2, r3
 8014d98:	d901      	bls.n	8014d9e <sys_timeouts_sleeptime+0x32>
    return 0;
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	e004      	b.n	8014da8 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 8014d9e:	4b04      	ldr	r3, [pc, #16]	; (8014db0 <sys_timeouts_sleeptime+0x44>)
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	685a      	ldr	r2, [r3, #4]
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	1ad3      	subs	r3, r2, r3
  }
}
 8014da8:	4618      	mov	r0, r3
 8014daa:	3708      	adds	r7, #8
 8014dac:	46bd      	mov	sp, r7
 8014dae:	bd80      	pop	{r7, pc}
 8014db0:	24021834 	.word	0x24021834
 8014db4:	24021838 	.word	0x24021838

08014db8 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b084      	sub	sp, #16
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	6078      	str	r0, [r7, #4]
 8014dc0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8014dc2:	4b0f      	ldr	r3, [pc, #60]	; (8014e00 <sys_timeouts_mbox_fetch+0x48>)
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d105      	bne.n	8014dd6 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8014dca:	2200      	movs	r2, #0
 8014dcc:	6839      	ldr	r1, [r7, #0]
 8014dce:	6878      	ldr	r0, [r7, #4]
 8014dd0:	f002 fcbf 	bl	8017752 <sys_arch_mbox_fetch>
    return;
 8014dd4:	e011      	b.n	8014dfa <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8014dd6:	f7ff ffc9 	bl	8014d6c <sys_timeouts_sleeptime>
 8014dda:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d008      	beq.n	8014df4 <sys_timeouts_mbox_fetch+0x3c>
 8014de2:	68fa      	ldr	r2, [r7, #12]
 8014de4:	6839      	ldr	r1, [r7, #0]
 8014de6:	6878      	ldr	r0, [r7, #4]
 8014de8:	f002 fcb3 	bl	8017752 <sys_arch_mbox_fetch>
 8014dec:	4603      	mov	r3, r0
 8014dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014df2:	d102      	bne.n	8014dfa <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8014df4:	f7ff ff68 	bl	8014cc8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8014df8:	e7e3      	b.n	8014dc2 <sys_timeouts_mbox_fetch+0xa>
  }
}
 8014dfa:	3710      	adds	r7, #16
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	bd80      	pop	{r7, pc}
 8014e00:	24021834 	.word	0x24021834

08014e04 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014e04:	b480      	push	{r7}
 8014e06:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8014e08:	bf00      	nop
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e10:	4770      	bx	lr
	...

08014e14 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014e14:	b480      	push	{r7}
 8014e16:	b085      	sub	sp, #20
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	60f8      	str	r0, [r7, #12]
 8014e1c:	60b9      	str	r1, [r7, #8]
 8014e1e:	4613      	mov	r3, r2
 8014e20:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014e22:	79fb      	ldrb	r3, [r7, #7]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d018      	beq.n	8014e5a <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d013      	beq.n	8014e56 <udp_input_local_match+0x42>
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d00f      	beq.n	8014e56 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014e36:	4b14      	ldr	r3, [pc, #80]	; (8014e88 <udp_input_local_match+0x74>)
 8014e38:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e3e:	d00a      	beq.n	8014e56 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	681a      	ldr	r2, [r3, #0]
 8014e44:	4b10      	ldr	r3, [pc, #64]	; (8014e88 <udp_input_local_match+0x74>)
 8014e46:	695b      	ldr	r3, [r3, #20]
 8014e48:	405a      	eors	r2, r3
 8014e4a:	68bb      	ldr	r3, [r7, #8]
 8014e4c:	3308      	adds	r3, #8
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d110      	bne.n	8014e78 <udp_input_local_match+0x64>
          return 1;
 8014e56:	2301      	movs	r3, #1
 8014e58:	e00f      	b.n	8014e7a <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d009      	beq.n	8014e74 <udp_input_local_match+0x60>
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d005      	beq.n	8014e74 <udp_input_local_match+0x60>
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	681a      	ldr	r2, [r3, #0]
 8014e6c:	4b06      	ldr	r3, [pc, #24]	; (8014e88 <udp_input_local_match+0x74>)
 8014e6e:	695b      	ldr	r3, [r3, #20]
 8014e70:	429a      	cmp	r2, r3
 8014e72:	d101      	bne.n	8014e78 <udp_input_local_match+0x64>
      return 1;
 8014e74:	2301      	movs	r3, #1
 8014e76:	e000      	b.n	8014e7a <udp_input_local_match+0x66>
    }
  }

  return 0;
 8014e78:	2300      	movs	r3, #0
}
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	3714      	adds	r7, #20
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e84:	4770      	bx	lr
 8014e86:	bf00      	nop
 8014e88:	24021c54 	.word	0x24021c54

08014e8c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014e8c:	b590      	push	{r4, r7, lr}
 8014e8e:	b08d      	sub	sp, #52	; 0x34
 8014e90:	af02      	add	r7, sp, #8
 8014e92:	6078      	str	r0, [r7, #4]
 8014e94:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014e96:	2300      	movs	r3, #0
 8014e98:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	895b      	ldrh	r3, [r3, #10]
 8014e9e:	2b07      	cmp	r3, #7
 8014ea0:	d803      	bhi.n	8014eaa <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014ea2:	6878      	ldr	r0, [r7, #4]
 8014ea4:	f7fb f82a 	bl	800fefc <pbuf_free>
    goto end;
 8014ea8:	e0c6      	b.n	8015038 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	685b      	ldr	r3, [r3, #4]
 8014eae:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014eb0:	4b63      	ldr	r3, [pc, #396]	; (8015040 <udp_input+0x1b4>)
 8014eb2:	695a      	ldr	r2, [r3, #20]
 8014eb4:	4b62      	ldr	r3, [pc, #392]	; (8015040 <udp_input+0x1b4>)
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	4619      	mov	r1, r3
 8014eba:	4610      	mov	r0, r2
 8014ebc:	f001 fd0e 	bl	80168dc <ip4_addr_isbroadcast_u32>
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014ec4:	697b      	ldr	r3, [r7, #20]
 8014ec6:	881b      	ldrh	r3, [r3, #0]
 8014ec8:	b29b      	uxth	r3, r3
 8014eca:	4618      	mov	r0, r3
 8014ecc:	f7f9 fcfe 	bl	800e8cc <lwip_htons>
 8014ed0:	4603      	mov	r3, r0
 8014ed2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014ed4:	697b      	ldr	r3, [r7, #20]
 8014ed6:	885b      	ldrh	r3, [r3, #2]
 8014ed8:	b29b      	uxth	r3, r3
 8014eda:	4618      	mov	r0, r3
 8014edc:	f7f9 fcf6 	bl	800e8cc <lwip_htons>
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014ee8:	2300      	movs	r3, #0
 8014eea:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014eec:	2300      	movs	r3, #0
 8014eee:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014ef0:	4b54      	ldr	r3, [pc, #336]	; (8015044 <udp_input+0x1b8>)
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8014ef6:	e03b      	b.n	8014f70 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014efa:	8a5b      	ldrh	r3, [r3, #18]
 8014efc:	89fa      	ldrh	r2, [r7, #14]
 8014efe:	429a      	cmp	r2, r3
 8014f00:	d131      	bne.n	8014f66 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014f02:	7cfb      	ldrb	r3, [r7, #19]
 8014f04:	461a      	mov	r2, r3
 8014f06:	6839      	ldr	r1, [r7, #0]
 8014f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014f0a:	f7ff ff83 	bl	8014e14 <udp_input_local_match>
 8014f0e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d028      	beq.n	8014f66 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8014f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f16:	7c1b      	ldrb	r3, [r3, #16]
 8014f18:	f003 0304 	and.w	r3, r3, #4
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d104      	bne.n	8014f2a <udp_input+0x9e>
 8014f20:	69fb      	ldr	r3, [r7, #28]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d101      	bne.n	8014f2a <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8014f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f28:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f2c:	8a9b      	ldrh	r3, [r3, #20]
 8014f2e:	8a3a      	ldrh	r2, [r7, #16]
 8014f30:	429a      	cmp	r2, r3
 8014f32:	d118      	bne.n	8014f66 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f36:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d005      	beq.n	8014f48 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f3e:	685a      	ldr	r2, [r3, #4]
 8014f40:	4b3f      	ldr	r3, [pc, #252]	; (8015040 <udp_input+0x1b4>)
 8014f42:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014f44:	429a      	cmp	r2, r3
 8014f46:	d10e      	bne.n	8014f66 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014f48:	6a3b      	ldr	r3, [r7, #32]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d014      	beq.n	8014f78 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f50:	68da      	ldr	r2, [r3, #12]
 8014f52:	6a3b      	ldr	r3, [r7, #32]
 8014f54:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014f56:	4b3b      	ldr	r3, [pc, #236]	; (8015044 <udp_input+0x1b8>)
 8014f58:	681a      	ldr	r2, [r3, #0]
 8014f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f5c:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014f5e:	4a39      	ldr	r2, [pc, #228]	; (8015044 <udp_input+0x1b8>)
 8014f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f62:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014f64:	e008      	b.n	8014f78 <udp_input+0xec>
      }
    }

    prev = pcb;
 8014f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f68:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f6c:	68db      	ldr	r3, [r3, #12]
 8014f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8014f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d1c0      	bne.n	8014ef8 <udp_input+0x6c>
 8014f76:	e000      	b.n	8014f7a <udp_input+0xee>
        break;
 8014f78:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d101      	bne.n	8014f84 <udp_input+0xf8>
    pcb = uncon_pcb;
 8014f80:	69fb      	ldr	r3, [r7, #28]
 8014f82:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d002      	beq.n	8014f90 <udp_input+0x104>
    for_us = 1;
 8014f8a:	2301      	movs	r3, #1
 8014f8c:	76fb      	strb	r3, [r7, #27]
 8014f8e:	e00a      	b.n	8014fa6 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014f90:	683b      	ldr	r3, [r7, #0]
 8014f92:	3304      	adds	r3, #4
 8014f94:	681a      	ldr	r2, [r3, #0]
 8014f96:	4b2a      	ldr	r3, [pc, #168]	; (8015040 <udp_input+0x1b4>)
 8014f98:	695b      	ldr	r3, [r3, #20]
 8014f9a:	429a      	cmp	r2, r3
 8014f9c:	bf0c      	ite	eq
 8014f9e:	2301      	moveq	r3, #1
 8014fa0:	2300      	movne	r3, #0
 8014fa2:	b2db      	uxtb	r3, r3
 8014fa4:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014fa6:	7efb      	ldrb	r3, [r7, #27]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d042      	beq.n	8015032 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8014fac:	f06f 0107 	mvn.w	r1, #7
 8014fb0:	6878      	ldr	r0, [r7, #4]
 8014fb2:	f7fa ff7f 	bl	800feb4 <pbuf_header>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d00a      	beq.n	8014fd2 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8014fbc:	4b22      	ldr	r3, [pc, #136]	; (8015048 <udp_input+0x1bc>)
 8014fbe:	f240 1255 	movw	r2, #341	; 0x155
 8014fc2:	4922      	ldr	r1, [pc, #136]	; (801504c <udp_input+0x1c0>)
 8014fc4:	4822      	ldr	r0, [pc, #136]	; (8015050 <udp_input+0x1c4>)
 8014fc6:	f002 fce5 	bl	8017994 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014fca:	6878      	ldr	r0, [r7, #4]
 8014fcc:	f7fa ff96 	bl	800fefc <pbuf_free>
      goto end;
 8014fd0:	e032      	b.n	8015038 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 8014fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d012      	beq.n	8014ffe <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fda:	6a1b      	ldr	r3, [r3, #32]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d00a      	beq.n	8014ff6 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe2:	6a1c      	ldr	r4, [r3, #32]
 8014fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014fe8:	8a3b      	ldrh	r3, [r7, #16]
 8014fea:	9300      	str	r3, [sp, #0]
 8014fec:	4b19      	ldr	r3, [pc, #100]	; (8015054 <udp_input+0x1c8>)
 8014fee:	687a      	ldr	r2, [r7, #4]
 8014ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014ff2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014ff4:	e021      	b.n	801503a <udp_input+0x1ae>
        pbuf_free(p);
 8014ff6:	6878      	ldr	r0, [r7, #4]
 8014ff8:	f7fa ff80 	bl	800fefc <pbuf_free>
        goto end;
 8014ffc:	e01c      	b.n	8015038 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014ffe:	7cfb      	ldrb	r3, [r7, #19]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d112      	bne.n	801502a <udp_input+0x19e>
 8015004:	4b0e      	ldr	r3, [pc, #56]	; (8015040 <udp_input+0x1b4>)
 8015006:	695b      	ldr	r3, [r3, #20]
 8015008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801500c:	2be0      	cmp	r3, #224	; 0xe0
 801500e:	d00c      	beq.n	801502a <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015010:	4b0b      	ldr	r3, [pc, #44]	; (8015040 <udp_input+0x1b4>)
 8015012:	899b      	ldrh	r3, [r3, #12]
 8015014:	3308      	adds	r3, #8
 8015016:	b29b      	uxth	r3, r3
 8015018:	b21b      	sxth	r3, r3
 801501a:	4619      	mov	r1, r3
 801501c:	6878      	ldr	r0, [r7, #4]
 801501e:	f7fa ff5b 	bl	800fed8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015022:	2103      	movs	r1, #3
 8015024:	6878      	ldr	r0, [r7, #4]
 8015026:	f001 f93d 	bl	80162a4 <icmp_dest_unreach>
      pbuf_free(p);
 801502a:	6878      	ldr	r0, [r7, #4]
 801502c:	f7fa ff66 	bl	800fefc <pbuf_free>
  return;
 8015030:	e003      	b.n	801503a <udp_input+0x1ae>
    pbuf_free(p);
 8015032:	6878      	ldr	r0, [r7, #4]
 8015034:	f7fa ff62 	bl	800fefc <pbuf_free>
  return;
 8015038:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801503a:	372c      	adds	r7, #44	; 0x2c
 801503c:	46bd      	mov	sp, r7
 801503e:	bd90      	pop	{r4, r7, pc}
 8015040:	24021c54 	.word	0x24021c54
 8015044:	24024e64 	.word	0x24024e64
 8015048:	0801a168 	.word	0x0801a168
 801504c:	0801a198 	.word	0x0801a198
 8015050:	0801a1ac 	.word	0x0801a1ac
 8015054:	24021c64 	.word	0x24021c64

08015058 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8015058:	b480      	push	{r7}
 801505a:	b085      	sub	sp, #20
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
 8015060:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	2b00      	cmp	r3, #0
 8015066:	d01e      	beq.n	80150a6 <udp_netif_ip_addr_changed+0x4e>
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d01a      	beq.n	80150a6 <udp_netif_ip_addr_changed+0x4e>
 8015070:	683b      	ldr	r3, [r7, #0]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d017      	beq.n	80150a6 <udp_netif_ip_addr_changed+0x4e>
 8015076:	683b      	ldr	r3, [r7, #0]
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	2b00      	cmp	r3, #0
 801507c:	d013      	beq.n	80150a6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801507e:	4b0d      	ldr	r3, [pc, #52]	; (80150b4 <udp_netif_ip_addr_changed+0x5c>)
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	60fb      	str	r3, [r7, #12]
 8015084:	e00c      	b.n	80150a0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	681a      	ldr	r2, [r3, #0]
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	429a      	cmp	r2, r3
 8015090:	d103      	bne.n	801509a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015092:	683b      	ldr	r3, [r7, #0]
 8015094:	681a      	ldr	r2, [r3, #0]
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	68db      	ldr	r3, [r3, #12]
 801509e:	60fb      	str	r3, [r7, #12]
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d1ef      	bne.n	8015086 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80150a6:	bf00      	nop
 80150a8:	3714      	adds	r7, #20
 80150aa:	46bd      	mov	sp, r7
 80150ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b0:	4770      	bx	lr
 80150b2:	bf00      	nop
 80150b4:	24024e64 	.word	0x24024e64

080150b8 <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b084      	sub	sp, #16
 80150bc:	af00      	add	r7, sp, #0
 80150be:	6078      	str	r0, [r7, #4]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d105      	bne.n	80150d2 <free_etharp_q+0x1a>
 80150c6:	4b18      	ldr	r3, [pc, #96]	; (8015128 <free_etharp_q+0x70>)
 80150c8:	2297      	movs	r2, #151	; 0x97
 80150ca:	4918      	ldr	r1, [pc, #96]	; (801512c <free_etharp_q+0x74>)
 80150cc:	4818      	ldr	r0, [pc, #96]	; (8015130 <free_etharp_q+0x78>)
 80150ce:	f002 fc61 	bl	8017994 <iprintf>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	685b      	ldr	r3, [r3, #4]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d11e      	bne.n	8015118 <free_etharp_q+0x60>
 80150da:	4b13      	ldr	r3, [pc, #76]	; (8015128 <free_etharp_q+0x70>)
 80150dc:	2298      	movs	r2, #152	; 0x98
 80150de:	4915      	ldr	r1, [pc, #84]	; (8015134 <free_etharp_q+0x7c>)
 80150e0:	4813      	ldr	r0, [pc, #76]	; (8015130 <free_etharp_q+0x78>)
 80150e2:	f002 fc57 	bl	8017994 <iprintf>
  while (q) {
 80150e6:	e017      	b.n	8015118 <free_etharp_q+0x60>
    r = q;
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	60fb      	str	r3, [r7, #12]
    q = q->next;
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	607b      	str	r3, [r7, #4]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	685b      	ldr	r3, [r3, #4]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d105      	bne.n	8015106 <free_etharp_q+0x4e>
 80150fa:	4b0b      	ldr	r3, [pc, #44]	; (8015128 <free_etharp_q+0x70>)
 80150fc:	229c      	movs	r2, #156	; 0x9c
 80150fe:	490e      	ldr	r1, [pc, #56]	; (8015138 <free_etharp_q+0x80>)
 8015100:	480b      	ldr	r0, [pc, #44]	; (8015130 <free_etharp_q+0x78>)
 8015102:	f002 fc47 	bl	8017994 <iprintf>
    pbuf_free(r->p);
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	685b      	ldr	r3, [r3, #4]
 801510a:	4618      	mov	r0, r3
 801510c:	f7fa fef6 	bl	800fefc <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8015110:	68f9      	ldr	r1, [r7, #12]
 8015112:	200a      	movs	r0, #10
 8015114:	f7fa f916 	bl	800f344 <memp_free>
  while (q) {
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d1e4      	bne.n	80150e8 <free_etharp_q+0x30>
  }
}
 801511e:	bf00      	nop
 8015120:	3710      	adds	r7, #16
 8015122:	46bd      	mov	sp, r7
 8015124:	bd80      	pop	{r7, pc}
 8015126:	bf00      	nop
 8015128:	0801a204 	.word	0x0801a204
 801512c:	0801a23c 	.word	0x0801a23c
 8015130:	0801a248 	.word	0x0801a248
 8015134:	0801a270 	.word	0x0801a270
 8015138:	0801a280 	.word	0x0801a280

0801513c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801513c:	b580      	push	{r7, lr}
 801513e:	b082      	sub	sp, #8
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015144:	4915      	ldr	r1, [pc, #84]	; (801519c <etharp_free_entry+0x60>)
 8015146:	687a      	ldr	r2, [r7, #4]
 8015148:	4613      	mov	r3, r2
 801514a:	005b      	lsls	r3, r3, #1
 801514c:	4413      	add	r3, r2
 801514e:	00db      	lsls	r3, r3, #3
 8015150:	440b      	add	r3, r1
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d013      	beq.n	8015180 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015158:	4910      	ldr	r1, [pc, #64]	; (801519c <etharp_free_entry+0x60>)
 801515a:	687a      	ldr	r2, [r7, #4]
 801515c:	4613      	mov	r3, r2
 801515e:	005b      	lsls	r3, r3, #1
 8015160:	4413      	add	r3, r2
 8015162:	00db      	lsls	r3, r3, #3
 8015164:	440b      	add	r3, r1
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	4618      	mov	r0, r3
 801516a:	f7ff ffa5 	bl	80150b8 <free_etharp_q>
    arp_table[i].q = NULL;
 801516e:	490b      	ldr	r1, [pc, #44]	; (801519c <etharp_free_entry+0x60>)
 8015170:	687a      	ldr	r2, [r7, #4]
 8015172:	4613      	mov	r3, r2
 8015174:	005b      	lsls	r3, r3, #1
 8015176:	4413      	add	r3, r2
 8015178:	00db      	lsls	r3, r3, #3
 801517a:	440b      	add	r3, r1
 801517c:	2200      	movs	r2, #0
 801517e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015180:	4906      	ldr	r1, [pc, #24]	; (801519c <etharp_free_entry+0x60>)
 8015182:	687a      	ldr	r2, [r7, #4]
 8015184:	4613      	mov	r3, r2
 8015186:	005b      	lsls	r3, r3, #1
 8015188:	4413      	add	r3, r2
 801518a:	00db      	lsls	r3, r3, #3
 801518c:	440b      	add	r3, r1
 801518e:	3314      	adds	r3, #20
 8015190:	2200      	movs	r2, #0
 8015192:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015194:	bf00      	nop
 8015196:	3708      	adds	r7, #8
 8015198:	46bd      	mov	sp, r7
 801519a:	bd80      	pop	{r7, pc}
 801519c:	24021840 	.word	0x24021840

080151a0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b082      	sub	sp, #8
 80151a4:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80151a6:	2300      	movs	r3, #0
 80151a8:	71fb      	strb	r3, [r7, #7]
 80151aa:	e09a      	b.n	80152e2 <etharp_tmr+0x142>
    u8_t state = arp_table[i].state;
 80151ac:	79fa      	ldrb	r2, [r7, #7]
 80151ae:	4951      	ldr	r1, [pc, #324]	; (80152f4 <etharp_tmr+0x154>)
 80151b0:	4613      	mov	r3, r2
 80151b2:	005b      	lsls	r3, r3, #1
 80151b4:	4413      	add	r3, r2
 80151b6:	00db      	lsls	r3, r3, #3
 80151b8:	440b      	add	r3, r1
 80151ba:	3314      	adds	r3, #20
 80151bc:	781b      	ldrb	r3, [r3, #0]
 80151be:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 80151c0:	79bb      	ldrb	r3, [r7, #6]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	f000 808a 	beq.w	80152dc <etharp_tmr+0x13c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
 80151c8:	79bb      	ldrb	r3, [r7, #6]
 80151ca:	2b05      	cmp	r3, #5
 80151cc:	f000 8086 	beq.w	80152dc <etharp_tmr+0x13c>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 80151d0:	79fa      	ldrb	r2, [r7, #7]
 80151d2:	4948      	ldr	r1, [pc, #288]	; (80152f4 <etharp_tmr+0x154>)
 80151d4:	4613      	mov	r3, r2
 80151d6:	005b      	lsls	r3, r3, #1
 80151d8:	4413      	add	r3, r2
 80151da:	00db      	lsls	r3, r3, #3
 80151dc:	440b      	add	r3, r1
 80151de:	3312      	adds	r3, #18
 80151e0:	881b      	ldrh	r3, [r3, #0]
 80151e2:	3301      	adds	r3, #1
 80151e4:	b298      	uxth	r0, r3
 80151e6:	4943      	ldr	r1, [pc, #268]	; (80152f4 <etharp_tmr+0x154>)
 80151e8:	4613      	mov	r3, r2
 80151ea:	005b      	lsls	r3, r3, #1
 80151ec:	4413      	add	r3, r2
 80151ee:	00db      	lsls	r3, r3, #3
 80151f0:	440b      	add	r3, r1
 80151f2:	3312      	adds	r3, #18
 80151f4:	4602      	mov	r2, r0
 80151f6:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80151f8:	79fa      	ldrb	r2, [r7, #7]
 80151fa:	493e      	ldr	r1, [pc, #248]	; (80152f4 <etharp_tmr+0x154>)
 80151fc:	4613      	mov	r3, r2
 80151fe:	005b      	lsls	r3, r3, #1
 8015200:	4413      	add	r3, r2
 8015202:	00db      	lsls	r3, r3, #3
 8015204:	440b      	add	r3, r1
 8015206:	3312      	adds	r3, #18
 8015208:	881b      	ldrh	r3, [r3, #0]
 801520a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801520e:	d215      	bcs.n	801523c <etharp_tmr+0x9c>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015210:	79fa      	ldrb	r2, [r7, #7]
 8015212:	4938      	ldr	r1, [pc, #224]	; (80152f4 <etharp_tmr+0x154>)
 8015214:	4613      	mov	r3, r2
 8015216:	005b      	lsls	r3, r3, #1
 8015218:	4413      	add	r3, r2
 801521a:	00db      	lsls	r3, r3, #3
 801521c:	440b      	add	r3, r1
 801521e:	3314      	adds	r3, #20
 8015220:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015222:	2b01      	cmp	r3, #1
 8015224:	d10f      	bne.n	8015246 <etharp_tmr+0xa6>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015226:	79fa      	ldrb	r2, [r7, #7]
 8015228:	4932      	ldr	r1, [pc, #200]	; (80152f4 <etharp_tmr+0x154>)
 801522a:	4613      	mov	r3, r2
 801522c:	005b      	lsls	r3, r3, #1
 801522e:	4413      	add	r3, r2
 8015230:	00db      	lsls	r3, r3, #3
 8015232:	440b      	add	r3, r1
 8015234:	3312      	adds	r3, #18
 8015236:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015238:	2b04      	cmp	r3, #4
 801523a:	d904      	bls.n	8015246 <etharp_tmr+0xa6>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801523c:	79fb      	ldrb	r3, [r7, #7]
 801523e:	4618      	mov	r0, r3
 8015240:	f7ff ff7c 	bl	801513c <etharp_free_entry>
 8015244:	e04a      	b.n	80152dc <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015246:	79fa      	ldrb	r2, [r7, #7]
 8015248:	492a      	ldr	r1, [pc, #168]	; (80152f4 <etharp_tmr+0x154>)
 801524a:	4613      	mov	r3, r2
 801524c:	005b      	lsls	r3, r3, #1
 801524e:	4413      	add	r3, r2
 8015250:	00db      	lsls	r3, r3, #3
 8015252:	440b      	add	r3, r1
 8015254:	3314      	adds	r3, #20
 8015256:	781b      	ldrb	r3, [r3, #0]
 8015258:	2b03      	cmp	r3, #3
 801525a:	d10a      	bne.n	8015272 <etharp_tmr+0xd2>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801525c:	79fa      	ldrb	r2, [r7, #7]
 801525e:	4925      	ldr	r1, [pc, #148]	; (80152f4 <etharp_tmr+0x154>)
 8015260:	4613      	mov	r3, r2
 8015262:	005b      	lsls	r3, r3, #1
 8015264:	4413      	add	r3, r2
 8015266:	00db      	lsls	r3, r3, #3
 8015268:	440b      	add	r3, r1
 801526a:	3314      	adds	r3, #20
 801526c:	2204      	movs	r2, #4
 801526e:	701a      	strb	r2, [r3, #0]
 8015270:	e034      	b.n	80152dc <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015272:	79fa      	ldrb	r2, [r7, #7]
 8015274:	491f      	ldr	r1, [pc, #124]	; (80152f4 <etharp_tmr+0x154>)
 8015276:	4613      	mov	r3, r2
 8015278:	005b      	lsls	r3, r3, #1
 801527a:	4413      	add	r3, r2
 801527c:	00db      	lsls	r3, r3, #3
 801527e:	440b      	add	r3, r1
 8015280:	3314      	adds	r3, #20
 8015282:	781b      	ldrb	r3, [r3, #0]
 8015284:	2b04      	cmp	r3, #4
 8015286:	d10a      	bne.n	801529e <etharp_tmr+0xfe>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015288:	79fa      	ldrb	r2, [r7, #7]
 801528a:	491a      	ldr	r1, [pc, #104]	; (80152f4 <etharp_tmr+0x154>)
 801528c:	4613      	mov	r3, r2
 801528e:	005b      	lsls	r3, r3, #1
 8015290:	4413      	add	r3, r2
 8015292:	00db      	lsls	r3, r3, #3
 8015294:	440b      	add	r3, r1
 8015296:	3314      	adds	r3, #20
 8015298:	2202      	movs	r2, #2
 801529a:	701a      	strb	r2, [r3, #0]
 801529c:	e01e      	b.n	80152dc <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801529e:	79fa      	ldrb	r2, [r7, #7]
 80152a0:	4914      	ldr	r1, [pc, #80]	; (80152f4 <etharp_tmr+0x154>)
 80152a2:	4613      	mov	r3, r2
 80152a4:	005b      	lsls	r3, r3, #1
 80152a6:	4413      	add	r3, r2
 80152a8:	00db      	lsls	r3, r3, #3
 80152aa:	440b      	add	r3, r1
 80152ac:	3314      	adds	r3, #20
 80152ae:	781b      	ldrb	r3, [r3, #0]
 80152b0:	2b01      	cmp	r3, #1
 80152b2:	d113      	bne.n	80152dc <etharp_tmr+0x13c>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80152b4:	79fa      	ldrb	r2, [r7, #7]
 80152b6:	490f      	ldr	r1, [pc, #60]	; (80152f4 <etharp_tmr+0x154>)
 80152b8:	4613      	mov	r3, r2
 80152ba:	005b      	lsls	r3, r3, #1
 80152bc:	4413      	add	r3, r2
 80152be:	00db      	lsls	r3, r3, #3
 80152c0:	440b      	add	r3, r1
 80152c2:	3308      	adds	r3, #8
 80152c4:	6818      	ldr	r0, [r3, #0]
 80152c6:	79fa      	ldrb	r2, [r7, #7]
 80152c8:	4613      	mov	r3, r2
 80152ca:	005b      	lsls	r3, r3, #1
 80152cc:	4413      	add	r3, r2
 80152ce:	00db      	lsls	r3, r3, #3
 80152d0:	4a08      	ldr	r2, [pc, #32]	; (80152f4 <etharp_tmr+0x154>)
 80152d2:	4413      	add	r3, r2
 80152d4:	3304      	adds	r3, #4
 80152d6:	4619      	mov	r1, r3
 80152d8:	f000 feb2 	bl	8016040 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80152dc:	79fb      	ldrb	r3, [r7, #7]
 80152de:	3301      	adds	r3, #1
 80152e0:	71fb      	strb	r3, [r7, #7]
 80152e2:	79fb      	ldrb	r3, [r7, #7]
 80152e4:	2b09      	cmp	r3, #9
 80152e6:	f67f af61 	bls.w	80151ac <etharp_tmr+0xc>
      }
    }
  }
}
 80152ea:	bf00      	nop
 80152ec:	3708      	adds	r7, #8
 80152ee:	46bd      	mov	sp, r7
 80152f0:	bd80      	pop	{r7, pc}
 80152f2:	bf00      	nop
 80152f4:	24021840 	.word	0x24021840

080152f8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b088      	sub	sp, #32
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	60f8      	str	r0, [r7, #12]
 8015300:	460b      	mov	r3, r1
 8015302:	607a      	str	r2, [r7, #4]
 8015304:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015306:	230a      	movs	r3, #10
 8015308:	77fb      	strb	r3, [r7, #31]
 801530a:	230a      	movs	r3, #10
 801530c:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 801530e:	230a      	movs	r3, #10
 8015310:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8015312:	2300      	movs	r3, #0
 8015314:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8015316:	230a      	movs	r3, #10
 8015318:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801531a:	2300      	movs	r3, #0
 801531c:	833b      	strh	r3, [r7, #24]
 801531e:	2300      	movs	r3, #0
 8015320:	82fb      	strh	r3, [r7, #22]
 8015322:	2300      	movs	r3, #0
 8015324:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015326:	2300      	movs	r3, #0
 8015328:	773b      	strb	r3, [r7, #28]
 801532a:	e096      	b.n	801545a <etharp_find_entry+0x162>
    u8_t state = arp_table[i].state;
 801532c:	7f3a      	ldrb	r2, [r7, #28]
 801532e:	4991      	ldr	r1, [pc, #580]	; (8015574 <etharp_find_entry+0x27c>)
 8015330:	4613      	mov	r3, r2
 8015332:	005b      	lsls	r3, r3, #1
 8015334:	4413      	add	r3, r2
 8015336:	00db      	lsls	r3, r3, #3
 8015338:	440b      	add	r3, r1
 801533a:	3314      	adds	r3, #20
 801533c:	781b      	ldrb	r3, [r3, #0]
 801533e:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015340:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015344:	2b0a      	cmp	r3, #10
 8015346:	d105      	bne.n	8015354 <etharp_find_entry+0x5c>
 8015348:	7cfb      	ldrb	r3, [r7, #19]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d102      	bne.n	8015354 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 801534e:	7f3b      	ldrb	r3, [r7, #28]
 8015350:	777b      	strb	r3, [r7, #29]
 8015352:	e07f      	b.n	8015454 <etharp_find_entry+0x15c>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015354:	7cfb      	ldrb	r3, [r7, #19]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d07c      	beq.n	8015454 <etharp_find_entry+0x15c>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801535a:	7cfb      	ldrb	r3, [r7, #19]
 801535c:	2b01      	cmp	r3, #1
 801535e:	d009      	beq.n	8015374 <etharp_find_entry+0x7c>
 8015360:	7cfb      	ldrb	r3, [r7, #19]
 8015362:	2b01      	cmp	r3, #1
 8015364:	d806      	bhi.n	8015374 <etharp_find_entry+0x7c>
 8015366:	4b84      	ldr	r3, [pc, #528]	; (8015578 <etharp_find_entry+0x280>)
 8015368:	f44f 7293 	mov.w	r2, #294	; 0x126
 801536c:	4983      	ldr	r1, [pc, #524]	; (801557c <etharp_find_entry+0x284>)
 801536e:	4884      	ldr	r0, [pc, #528]	; (8015580 <etharp_find_entry+0x288>)
 8015370:	f002 fb10 	bl	8017994 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d00f      	beq.n	801539a <etharp_find_entry+0xa2>
 801537a:	68fb      	ldr	r3, [r7, #12]
 801537c:	6819      	ldr	r1, [r3, #0]
 801537e:	7f3a      	ldrb	r2, [r7, #28]
 8015380:	487c      	ldr	r0, [pc, #496]	; (8015574 <etharp_find_entry+0x27c>)
 8015382:	4613      	mov	r3, r2
 8015384:	005b      	lsls	r3, r3, #1
 8015386:	4413      	add	r3, r2
 8015388:	00db      	lsls	r3, r3, #3
 801538a:	4403      	add	r3, r0
 801538c:	3304      	adds	r3, #4
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	4299      	cmp	r1, r3
 8015392:	d102      	bne.n	801539a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015394:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8015398:	e0e8      	b.n	801556c <etharp_find_entry+0x274>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801539a:	7cfb      	ldrb	r3, [r7, #19]
 801539c:	2b01      	cmp	r3, #1
 801539e:	d13b      	bne.n	8015418 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80153a0:	7f3a      	ldrb	r2, [r7, #28]
 80153a2:	4974      	ldr	r1, [pc, #464]	; (8015574 <etharp_find_entry+0x27c>)
 80153a4:	4613      	mov	r3, r2
 80153a6:	005b      	lsls	r3, r3, #1
 80153a8:	4413      	add	r3, r2
 80153aa:	00db      	lsls	r3, r3, #3
 80153ac:	440b      	add	r3, r1
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d018      	beq.n	80153e6 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 80153b4:	7f3a      	ldrb	r2, [r7, #28]
 80153b6:	496f      	ldr	r1, [pc, #444]	; (8015574 <etharp_find_entry+0x27c>)
 80153b8:	4613      	mov	r3, r2
 80153ba:	005b      	lsls	r3, r3, #1
 80153bc:	4413      	add	r3, r2
 80153be:	00db      	lsls	r3, r3, #3
 80153c0:	440b      	add	r3, r1
 80153c2:	3312      	adds	r3, #18
 80153c4:	881b      	ldrh	r3, [r3, #0]
 80153c6:	8b3a      	ldrh	r2, [r7, #24]
 80153c8:	429a      	cmp	r2, r3
 80153ca:	d843      	bhi.n	8015454 <etharp_find_entry+0x15c>
            old_queue = i;
 80153cc:	7f3b      	ldrb	r3, [r7, #28]
 80153ce:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 80153d0:	7f3a      	ldrb	r2, [r7, #28]
 80153d2:	4968      	ldr	r1, [pc, #416]	; (8015574 <etharp_find_entry+0x27c>)
 80153d4:	4613      	mov	r3, r2
 80153d6:	005b      	lsls	r3, r3, #1
 80153d8:	4413      	add	r3, r2
 80153da:	00db      	lsls	r3, r3, #3
 80153dc:	440b      	add	r3, r1
 80153de:	3312      	adds	r3, #18
 80153e0:	881b      	ldrh	r3, [r3, #0]
 80153e2:	833b      	strh	r3, [r7, #24]
 80153e4:	e036      	b.n	8015454 <etharp_find_entry+0x15c>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80153e6:	7f3a      	ldrb	r2, [r7, #28]
 80153e8:	4962      	ldr	r1, [pc, #392]	; (8015574 <etharp_find_entry+0x27c>)
 80153ea:	4613      	mov	r3, r2
 80153ec:	005b      	lsls	r3, r3, #1
 80153ee:	4413      	add	r3, r2
 80153f0:	00db      	lsls	r3, r3, #3
 80153f2:	440b      	add	r3, r1
 80153f4:	3312      	adds	r3, #18
 80153f6:	881b      	ldrh	r3, [r3, #0]
 80153f8:	8afa      	ldrh	r2, [r7, #22]
 80153fa:	429a      	cmp	r2, r3
 80153fc:	d82a      	bhi.n	8015454 <etharp_find_entry+0x15c>
            old_pending = i;
 80153fe:	7f3b      	ldrb	r3, [r7, #28]
 8015400:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8015402:	7f3a      	ldrb	r2, [r7, #28]
 8015404:	495b      	ldr	r1, [pc, #364]	; (8015574 <etharp_find_entry+0x27c>)
 8015406:	4613      	mov	r3, r2
 8015408:	005b      	lsls	r3, r3, #1
 801540a:	4413      	add	r3, r2
 801540c:	00db      	lsls	r3, r3, #3
 801540e:	440b      	add	r3, r1
 8015410:	3312      	adds	r3, #18
 8015412:	881b      	ldrh	r3, [r3, #0]
 8015414:	82fb      	strh	r3, [r7, #22]
 8015416:	e01d      	b.n	8015454 <etharp_find_entry+0x15c>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015418:	7cfb      	ldrb	r3, [r7, #19]
 801541a:	2b01      	cmp	r3, #1
 801541c:	d91a      	bls.n	8015454 <etharp_find_entry+0x15c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 801541e:	7cfb      	ldrb	r3, [r7, #19]
 8015420:	2b04      	cmp	r3, #4
 8015422:	d817      	bhi.n	8015454 <etharp_find_entry+0x15c>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015424:	7f3a      	ldrb	r2, [r7, #28]
 8015426:	4953      	ldr	r1, [pc, #332]	; (8015574 <etharp_find_entry+0x27c>)
 8015428:	4613      	mov	r3, r2
 801542a:	005b      	lsls	r3, r3, #1
 801542c:	4413      	add	r3, r2
 801542e:	00db      	lsls	r3, r3, #3
 8015430:	440b      	add	r3, r1
 8015432:	3312      	adds	r3, #18
 8015434:	881b      	ldrh	r3, [r3, #0]
 8015436:	8aba      	ldrh	r2, [r7, #20]
 8015438:	429a      	cmp	r2, r3
 801543a:	d80b      	bhi.n	8015454 <etharp_find_entry+0x15c>
            old_stable = i;
 801543c:	7f3b      	ldrb	r3, [r7, #28]
 801543e:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8015440:	7f3a      	ldrb	r2, [r7, #28]
 8015442:	494c      	ldr	r1, [pc, #304]	; (8015574 <etharp_find_entry+0x27c>)
 8015444:	4613      	mov	r3, r2
 8015446:	005b      	lsls	r3, r3, #1
 8015448:	4413      	add	r3, r2
 801544a:	00db      	lsls	r3, r3, #3
 801544c:	440b      	add	r3, r1
 801544e:	3312      	adds	r3, #18
 8015450:	881b      	ldrh	r3, [r3, #0]
 8015452:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015454:	7f3b      	ldrb	r3, [r7, #28]
 8015456:	3301      	adds	r3, #1
 8015458:	773b      	strb	r3, [r7, #28]
 801545a:	7f3b      	ldrb	r3, [r7, #28]
 801545c:	2b09      	cmp	r3, #9
 801545e:	f67f af65 	bls.w	801532c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015462:	7afb      	ldrb	r3, [r7, #11]
 8015464:	f003 0302 	and.w	r3, r3, #2
 8015468:	2b00      	cmp	r3, #0
 801546a:	d108      	bne.n	801547e <etharp_find_entry+0x186>
 801546c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015470:	2b0a      	cmp	r3, #10
 8015472:	d107      	bne.n	8015484 <etharp_find_entry+0x18c>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015474:	7afb      	ldrb	r3, [r7, #11]
 8015476:	f003 0301 	and.w	r3, r3, #1
 801547a:	2b00      	cmp	r3, #0
 801547c:	d102      	bne.n	8015484 <etharp_find_entry+0x18c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 801547e:	f04f 33ff 	mov.w	r3, #4294967295
 8015482:	e073      	b.n	801556c <etharp_find_entry+0x274>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015484:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015488:	2b09      	cmp	r3, #9
 801548a:	dc02      	bgt.n	8015492 <etharp_find_entry+0x19a>
    i = empty;
 801548c:	7f7b      	ldrb	r3, [r7, #29]
 801548e:	773b      	strb	r3, [r7, #28]
 8015490:	e036      	b.n	8015500 <etharp_find_entry+0x208>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015492:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015496:	2b09      	cmp	r3, #9
 8015498:	dc13      	bgt.n	80154c2 <etharp_find_entry+0x1ca>
      /* recycle oldest stable*/
      i = old_stable;
 801549a:	7fbb      	ldrb	r3, [r7, #30]
 801549c:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801549e:	7f3a      	ldrb	r2, [r7, #28]
 80154a0:	4934      	ldr	r1, [pc, #208]	; (8015574 <etharp_find_entry+0x27c>)
 80154a2:	4613      	mov	r3, r2
 80154a4:	005b      	lsls	r3, r3, #1
 80154a6:	4413      	add	r3, r2
 80154a8:	00db      	lsls	r3, r3, #3
 80154aa:	440b      	add	r3, r1
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d018      	beq.n	80154e4 <etharp_find_entry+0x1ec>
 80154b2:	4b31      	ldr	r3, [pc, #196]	; (8015578 <etharp_find_entry+0x280>)
 80154b4:	f240 126f 	movw	r2, #367	; 0x16f
 80154b8:	4932      	ldr	r1, [pc, #200]	; (8015584 <etharp_find_entry+0x28c>)
 80154ba:	4831      	ldr	r0, [pc, #196]	; (8015580 <etharp_find_entry+0x288>)
 80154bc:	f002 fa6a 	bl	8017994 <iprintf>
 80154c0:	e010      	b.n	80154e4 <etharp_find_entry+0x1ec>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80154c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80154c6:	2b09      	cmp	r3, #9
 80154c8:	dc02      	bgt.n	80154d0 <etharp_find_entry+0x1d8>
      /* recycle oldest pending */
      i = old_pending;
 80154ca:	7ffb      	ldrb	r3, [r7, #31]
 80154cc:	773b      	strb	r3, [r7, #28]
 80154ce:	e009      	b.n	80154e4 <etharp_find_entry+0x1ec>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80154d0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80154d4:	2b09      	cmp	r3, #9
 80154d6:	dc02      	bgt.n	80154de <etharp_find_entry+0x1e6>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80154d8:	7efb      	ldrb	r3, [r7, #27]
 80154da:	773b      	strb	r3, [r7, #28]
 80154dc:	e002      	b.n	80154e4 <etharp_find_entry+0x1ec>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 80154de:	f04f 33ff 	mov.w	r3, #4294967295
 80154e2:	e043      	b.n	801556c <etharp_find_entry+0x274>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80154e4:	7f3b      	ldrb	r3, [r7, #28]
 80154e6:	2b09      	cmp	r3, #9
 80154e8:	d906      	bls.n	80154f8 <etharp_find_entry+0x200>
 80154ea:	4b23      	ldr	r3, [pc, #140]	; (8015578 <etharp_find_entry+0x280>)
 80154ec:	f240 1281 	movw	r2, #385	; 0x181
 80154f0:	4925      	ldr	r1, [pc, #148]	; (8015588 <etharp_find_entry+0x290>)
 80154f2:	4823      	ldr	r0, [pc, #140]	; (8015580 <etharp_find_entry+0x288>)
 80154f4:	f002 fa4e 	bl	8017994 <iprintf>
    etharp_free_entry(i);
 80154f8:	7f3b      	ldrb	r3, [r7, #28]
 80154fa:	4618      	mov	r0, r3
 80154fc:	f7ff fe1e 	bl	801513c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015500:	7f3b      	ldrb	r3, [r7, #28]
 8015502:	2b09      	cmp	r3, #9
 8015504:	d906      	bls.n	8015514 <etharp_find_entry+0x21c>
 8015506:	4b1c      	ldr	r3, [pc, #112]	; (8015578 <etharp_find_entry+0x280>)
 8015508:	f240 1285 	movw	r2, #389	; 0x185
 801550c:	491e      	ldr	r1, [pc, #120]	; (8015588 <etharp_find_entry+0x290>)
 801550e:	481c      	ldr	r0, [pc, #112]	; (8015580 <etharp_find_entry+0x288>)
 8015510:	f002 fa40 	bl	8017994 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015514:	7f3a      	ldrb	r2, [r7, #28]
 8015516:	4917      	ldr	r1, [pc, #92]	; (8015574 <etharp_find_entry+0x27c>)
 8015518:	4613      	mov	r3, r2
 801551a:	005b      	lsls	r3, r3, #1
 801551c:	4413      	add	r3, r2
 801551e:	00db      	lsls	r3, r3, #3
 8015520:	440b      	add	r3, r1
 8015522:	3314      	adds	r3, #20
 8015524:	781b      	ldrb	r3, [r3, #0]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d006      	beq.n	8015538 <etharp_find_entry+0x240>
 801552a:	4b13      	ldr	r3, [pc, #76]	; (8015578 <etharp_find_entry+0x280>)
 801552c:	f240 1287 	movw	r2, #391	; 0x187
 8015530:	4916      	ldr	r1, [pc, #88]	; (801558c <etharp_find_entry+0x294>)
 8015532:	4813      	ldr	r0, [pc, #76]	; (8015580 <etharp_find_entry+0x288>)
 8015534:	f002 fa2e 	bl	8017994 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d00a      	beq.n	8015554 <etharp_find_entry+0x25c>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801553e:	7f3a      	ldrb	r2, [r7, #28]
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	6819      	ldr	r1, [r3, #0]
 8015544:	480b      	ldr	r0, [pc, #44]	; (8015574 <etharp_find_entry+0x27c>)
 8015546:	4613      	mov	r3, r2
 8015548:	005b      	lsls	r3, r3, #1
 801554a:	4413      	add	r3, r2
 801554c:	00db      	lsls	r3, r3, #3
 801554e:	4403      	add	r3, r0
 8015550:	3304      	adds	r3, #4
 8015552:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015554:	7f3a      	ldrb	r2, [r7, #28]
 8015556:	4907      	ldr	r1, [pc, #28]	; (8015574 <etharp_find_entry+0x27c>)
 8015558:	4613      	mov	r3, r2
 801555a:	005b      	lsls	r3, r3, #1
 801555c:	4413      	add	r3, r2
 801555e:	00db      	lsls	r3, r3, #3
 8015560:	440b      	add	r3, r1
 8015562:	3312      	adds	r3, #18
 8015564:	2200      	movs	r2, #0
 8015566:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8015568:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 801556c:	4618      	mov	r0, r3
 801556e:	3720      	adds	r7, #32
 8015570:	46bd      	mov	sp, r7
 8015572:	bd80      	pop	{r7, pc}
 8015574:	24021840 	.word	0x24021840
 8015578:	0801a204 	.word	0x0801a204
 801557c:	0801a290 	.word	0x0801a290
 8015580:	0801a248 	.word	0x0801a248
 8015584:	0801a2d0 	.word	0x0801a2d0
 8015588:	0801a2e8 	.word	0x0801a2e8
 801558c:	0801a2fc 	.word	0x0801a2fc

08015590 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015590:	b580      	push	{r7, lr}
 8015592:	b08a      	sub	sp, #40	; 0x28
 8015594:	af02      	add	r7, sp, #8
 8015596:	60f8      	str	r0, [r7, #12]
 8015598:	60b9      	str	r1, [r7, #8]
 801559a:	607a      	str	r2, [r7, #4]
 801559c:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80155a4:	2b06      	cmp	r3, #6
 80155a6:	d006      	beq.n	80155b6 <etharp_update_arp_entry+0x26>
 80155a8:	4b5c      	ldr	r3, [pc, #368]	; (801571c <etharp_update_arp_entry+0x18c>)
 80155aa:	f240 12ab 	movw	r2, #427	; 0x1ab
 80155ae:	495c      	ldr	r1, [pc, #368]	; (8015720 <etharp_update_arp_entry+0x190>)
 80155b0:	485c      	ldr	r0, [pc, #368]	; (8015724 <etharp_update_arp_entry+0x194>)
 80155b2:	f002 f9ef 	bl	8017994 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80155b6:	68bb      	ldr	r3, [r7, #8]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d012      	beq.n	80155e2 <etharp_update_arp_entry+0x52>
 80155bc:	68bb      	ldr	r3, [r7, #8]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d00e      	beq.n	80155e2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80155c4:	68bb      	ldr	r3, [r7, #8]
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	68f9      	ldr	r1, [r7, #12]
 80155ca:	4618      	mov	r0, r3
 80155cc:	f001 f986 	bl	80168dc <ip4_addr_isbroadcast_u32>
 80155d0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d105      	bne.n	80155e2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80155d6:	68bb      	ldr	r3, [r7, #8]
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80155de:	2be0      	cmp	r3, #224	; 0xe0
 80155e0:	d102      	bne.n	80155e8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80155e2:	f06f 030f 	mvn.w	r3, #15
 80155e6:	e095      	b.n	8015714 <etharp_update_arp_entry+0x184>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80155e8:	78fb      	ldrb	r3, [r7, #3]
 80155ea:	68fa      	ldr	r2, [r7, #12]
 80155ec:	4619      	mov	r1, r3
 80155ee:	68b8      	ldr	r0, [r7, #8]
 80155f0:	f7ff fe82 	bl	80152f8 <etharp_find_entry>
 80155f4:	4603      	mov	r3, r0
 80155f6:	77fb      	strb	r3, [r7, #31]
  /* bail out if no entry could be found */
  if (i < 0) {
 80155f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	da02      	bge.n	8015606 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015600:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015604:	e086      	b.n	8015714 <etharp_update_arp_entry+0x184>
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 8015606:	78fb      	ldrb	r3, [r7, #3]
 8015608:	f003 0304 	and.w	r3, r3, #4
 801560c:	2b00      	cmp	r3, #0
 801560e:	d00b      	beq.n	8015628 <etharp_update_arp_entry+0x98>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 8015610:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8015614:	4944      	ldr	r1, [pc, #272]	; (8015728 <etharp_update_arp_entry+0x198>)
 8015616:	4613      	mov	r3, r2
 8015618:	005b      	lsls	r3, r3, #1
 801561a:	4413      	add	r3, r2
 801561c:	00db      	lsls	r3, r3, #3
 801561e:	440b      	add	r3, r1
 8015620:	3314      	adds	r3, #20
 8015622:	2205      	movs	r2, #5
 8015624:	701a      	strb	r2, [r3, #0]
 8015626:	e019      	b.n	801565c <etharp_update_arp_entry+0xcc>
  } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
 8015628:	f997 201f 	ldrsb.w	r2, [r7, #31]
 801562c:	493e      	ldr	r1, [pc, #248]	; (8015728 <etharp_update_arp_entry+0x198>)
 801562e:	4613      	mov	r3, r2
 8015630:	005b      	lsls	r3, r3, #1
 8015632:	4413      	add	r3, r2
 8015634:	00db      	lsls	r3, r3, #3
 8015636:	440b      	add	r3, r1
 8015638:	3314      	adds	r3, #20
 801563a:	781b      	ldrb	r3, [r3, #0]
 801563c:	2b05      	cmp	r3, #5
 801563e:	d102      	bne.n	8015646 <etharp_update_arp_entry+0xb6>
    /* found entry is a static type, don't overwrite it */
    return ERR_VAL;
 8015640:	f06f 0305 	mvn.w	r3, #5
 8015644:	e066      	b.n	8015714 <etharp_update_arp_entry+0x184>
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015646:	f997 201f 	ldrsb.w	r2, [r7, #31]
 801564a:	4937      	ldr	r1, [pc, #220]	; (8015728 <etharp_update_arp_entry+0x198>)
 801564c:	4613      	mov	r3, r2
 801564e:	005b      	lsls	r3, r3, #1
 8015650:	4413      	add	r3, r2
 8015652:	00db      	lsls	r3, r3, #3
 8015654:	440b      	add	r3, r1
 8015656:	3314      	adds	r3, #20
 8015658:	2202      	movs	r2, #2
 801565a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801565c:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8015660:	4931      	ldr	r1, [pc, #196]	; (8015728 <etharp_update_arp_entry+0x198>)
 8015662:	4613      	mov	r3, r2
 8015664:	005b      	lsls	r3, r3, #1
 8015666:	4413      	add	r3, r2
 8015668:	00db      	lsls	r3, r3, #3
 801566a:	440b      	add	r3, r1
 801566c:	3308      	adds	r3, #8
 801566e:	68fa      	ldr	r2, [r7, #12]
 8015670:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8015672:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8015676:	4613      	mov	r3, r2
 8015678:	005b      	lsls	r3, r3, #1
 801567a:	4413      	add	r3, r2
 801567c:	00db      	lsls	r3, r3, #3
 801567e:	3308      	adds	r3, #8
 8015680:	4a29      	ldr	r2, [pc, #164]	; (8015728 <etharp_update_arp_entry+0x198>)
 8015682:	4413      	add	r3, r2
 8015684:	3304      	adds	r3, #4
 8015686:	2206      	movs	r2, #6
 8015688:	6879      	ldr	r1, [r7, #4]
 801568a:	4618      	mov	r0, r3
 801568c:	f002 f96f 	bl	801796e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015690:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8015694:	4924      	ldr	r1, [pc, #144]	; (8015728 <etharp_update_arp_entry+0x198>)
 8015696:	4613      	mov	r3, r2
 8015698:	005b      	lsls	r3, r3, #1
 801569a:	4413      	add	r3, r2
 801569c:	00db      	lsls	r3, r3, #3
 801569e:	440b      	add	r3, r1
 80156a0:	3312      	adds	r3, #18
 80156a2:	2200      	movs	r2, #0
 80156a4:	801a      	strh	r2, [r3, #0]
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
 80156a6:	e029      	b.n	80156fc <etharp_update_arp_entry+0x16c>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
 80156a8:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80156ac:	491e      	ldr	r1, [pc, #120]	; (8015728 <etharp_update_arp_entry+0x198>)
 80156ae:	4613      	mov	r3, r2
 80156b0:	005b      	lsls	r3, r3, #1
 80156b2:	4413      	add	r3, r2
 80156b4:	00db      	lsls	r3, r3, #3
 80156b6:	440b      	add	r3, r1
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	61bb      	str	r3, [r7, #24]
    /* pop first item off the queue */
    arp_table[i].q = q->next;
 80156bc:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80156c0:	69bb      	ldr	r3, [r7, #24]
 80156c2:	6819      	ldr	r1, [r3, #0]
 80156c4:	4818      	ldr	r0, [pc, #96]	; (8015728 <etharp_update_arp_entry+0x198>)
 80156c6:	4613      	mov	r3, r2
 80156c8:	005b      	lsls	r3, r3, #1
 80156ca:	4413      	add	r3, r2
 80156cc:	00db      	lsls	r3, r3, #3
 80156ce:	4403      	add	r3, r0
 80156d0:	6019      	str	r1, [r3, #0]
    /* get the packet pointer */
    p = q->p;
 80156d2:	69bb      	ldr	r3, [r7, #24]
 80156d4:	685b      	ldr	r3, [r3, #4]
 80156d6:	617b      	str	r3, [r7, #20]
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
 80156d8:	69b9      	ldr	r1, [r7, #24]
 80156da:	200a      	movs	r0, #10
 80156dc:	f7f9 fe32 	bl	800f344 <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	f103 0231 	add.w	r2, r3, #49	; 0x31
 80156e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80156ea:	9300      	str	r3, [sp, #0]
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	6979      	ldr	r1, [r7, #20]
 80156f0:	68f8      	ldr	r0, [r7, #12]
 80156f2:	f001 ff95 	bl	8017620 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80156f6:	6978      	ldr	r0, [r7, #20]
 80156f8:	f7fa fc00 	bl	800fefc <pbuf_free>
  while (arp_table[i].q != NULL) {
 80156fc:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8015700:	4909      	ldr	r1, [pc, #36]	; (8015728 <etharp_update_arp_entry+0x198>)
 8015702:	4613      	mov	r3, r2
 8015704:	005b      	lsls	r3, r3, #1
 8015706:	4413      	add	r3, r2
 8015708:	00db      	lsls	r3, r3, #3
 801570a:	440b      	add	r3, r1
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d1ca      	bne.n	80156a8 <etharp_update_arp_entry+0x118>
  }
  return ERR_OK;
 8015712:	2300      	movs	r3, #0
}
 8015714:	4618      	mov	r0, r3
 8015716:	3720      	adds	r7, #32
 8015718:	46bd      	mov	sp, r7
 801571a:	bd80      	pop	{r7, pc}
 801571c:	0801a204 	.word	0x0801a204
 8015720:	0801a328 	.word	0x0801a328
 8015724:	0801a248 	.word	0x0801a248
 8015728:	24021840 	.word	0x24021840

0801572c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b084      	sub	sp, #16
 8015730:	af00      	add	r7, sp, #0
 8015732:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015734:	2300      	movs	r3, #0
 8015736:	73fb      	strb	r3, [r7, #15]
 8015738:	e01f      	b.n	801577a <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 801573a:	7bfa      	ldrb	r2, [r7, #15]
 801573c:	4912      	ldr	r1, [pc, #72]	; (8015788 <etharp_cleanup_netif+0x5c>)
 801573e:	4613      	mov	r3, r2
 8015740:	005b      	lsls	r3, r3, #1
 8015742:	4413      	add	r3, r2
 8015744:	00db      	lsls	r3, r3, #3
 8015746:	440b      	add	r3, r1
 8015748:	3314      	adds	r3, #20
 801574a:	781b      	ldrb	r3, [r3, #0]
 801574c:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801574e:	7bbb      	ldrb	r3, [r7, #14]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d00f      	beq.n	8015774 <etharp_cleanup_netif+0x48>
 8015754:	7bfa      	ldrb	r2, [r7, #15]
 8015756:	490c      	ldr	r1, [pc, #48]	; (8015788 <etharp_cleanup_netif+0x5c>)
 8015758:	4613      	mov	r3, r2
 801575a:	005b      	lsls	r3, r3, #1
 801575c:	4413      	add	r3, r2
 801575e:	00db      	lsls	r3, r3, #3
 8015760:	440b      	add	r3, r1
 8015762:	3308      	adds	r3, #8
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	687a      	ldr	r2, [r7, #4]
 8015768:	429a      	cmp	r2, r3
 801576a:	d103      	bne.n	8015774 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 801576c:	7bfb      	ldrb	r3, [r7, #15]
 801576e:	4618      	mov	r0, r3
 8015770:	f7ff fce4 	bl	801513c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015774:	7bfb      	ldrb	r3, [r7, #15]
 8015776:	3301      	adds	r3, #1
 8015778:	73fb      	strb	r3, [r7, #15]
 801577a:	7bfb      	ldrb	r3, [r7, #15]
 801577c:	2b09      	cmp	r3, #9
 801577e:	d9dc      	bls.n	801573a <etharp_cleanup_netif+0xe>
    }
  }
}
 8015780:	bf00      	nop
 8015782:	3710      	adds	r7, #16
 8015784:	46bd      	mov	sp, r7
 8015786:	bd80      	pop	{r7, pc}
 8015788:	24021840 	.word	0x24021840

0801578c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801578c:	b5b0      	push	{r4, r5, r7, lr}
 801578e:	b08a      	sub	sp, #40	; 0x28
 8015790:	af04      	add	r7, sp, #16
 8015792:	6078      	str	r0, [r7, #4]
 8015794:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015796:	683b      	ldr	r3, [r7, #0]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d107      	bne.n	80157ac <etharp_input+0x20>
 801579c:	4b3d      	ldr	r3, [pc, #244]	; (8015894 <etharp_input+0x108>)
 801579e:	f44f 7222 	mov.w	r2, #648	; 0x288
 80157a2:	493d      	ldr	r1, [pc, #244]	; (8015898 <etharp_input+0x10c>)
 80157a4:	483d      	ldr	r0, [pc, #244]	; (801589c <etharp_input+0x110>)
 80157a6:	f002 f8f5 	bl	8017994 <iprintf>
 80157aa:	e06f      	b.n	801588c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	685b      	ldr	r3, [r3, #4]
 80157b0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80157b2:	693b      	ldr	r3, [r7, #16]
 80157b4:	881b      	ldrh	r3, [r3, #0]
 80157b6:	b29b      	uxth	r3, r3
 80157b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80157bc:	d10c      	bne.n	80157d8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80157be:	693b      	ldr	r3, [r7, #16]
 80157c0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80157c2:	2b06      	cmp	r3, #6
 80157c4:	d108      	bne.n	80157d8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80157c6:	693b      	ldr	r3, [r7, #16]
 80157c8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80157ca:	2b04      	cmp	r3, #4
 80157cc:	d104      	bne.n	80157d8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80157ce:	693b      	ldr	r3, [r7, #16]
 80157d0:	885b      	ldrh	r3, [r3, #2]
 80157d2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80157d4:	2b08      	cmp	r3, #8
 80157d6:	d003      	beq.n	80157e0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80157d8:	6878      	ldr	r0, [r7, #4]
 80157da:	f7fa fb8f 	bl	800fefc <pbuf_free>
    return;
 80157de:	e055      	b.n	801588c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 80157e0:	693b      	ldr	r3, [r7, #16]
 80157e2:	330e      	adds	r3, #14
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 80157e8:	693b      	ldr	r3, [r7, #16]
 80157ea:	3318      	adds	r3, #24
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80157f0:	683b      	ldr	r3, [r7, #0]
 80157f2:	3304      	adds	r3, #4
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d102      	bne.n	8015800 <etharp_input+0x74>
    for_us = 0;
 80157fa:	2300      	movs	r3, #0
 80157fc:	75fb      	strb	r3, [r7, #23]
 80157fe:	e009      	b.n	8015814 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015800:	68ba      	ldr	r2, [r7, #8]
 8015802:	683b      	ldr	r3, [r7, #0]
 8015804:	3304      	adds	r3, #4
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	429a      	cmp	r2, r3
 801580a:	bf0c      	ite	eq
 801580c:	2301      	moveq	r3, #1
 801580e:	2300      	movne	r3, #0
 8015810:	b2db      	uxtb	r3, r3
 8015812:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015814:	693b      	ldr	r3, [r7, #16]
 8015816:	f103 0208 	add.w	r2, r3, #8
 801581a:	7dfb      	ldrb	r3, [r7, #23]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d001      	beq.n	8015824 <etharp_input+0x98>
 8015820:	2301      	movs	r3, #1
 8015822:	e000      	b.n	8015826 <etharp_input+0x9a>
 8015824:	2302      	movs	r3, #2
 8015826:	f107 010c 	add.w	r1, r7, #12
 801582a:	6838      	ldr	r0, [r7, #0]
 801582c:	f7ff feb0 	bl	8015590 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015830:	693b      	ldr	r3, [r7, #16]
 8015832:	88db      	ldrh	r3, [r3, #6]
 8015834:	b29b      	uxth	r3, r3
 8015836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801583a:	d003      	beq.n	8015844 <etharp_input+0xb8>
 801583c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015840:	d01e      	beq.n	8015880 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8015842:	e020      	b.n	8015886 <etharp_input+0xfa>
    if (for_us) {
 8015844:	7dfb      	ldrb	r3, [r7, #23]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d01c      	beq.n	8015884 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	f103 0031 	add.w	r0, r3, #49	; 0x31
 8015850:	693b      	ldr	r3, [r7, #16]
 8015852:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015856:	683b      	ldr	r3, [r7, #0]
 8015858:	f103 0531 	add.w	r5, r3, #49	; 0x31
 801585c:	683b      	ldr	r3, [r7, #0]
 801585e:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8015860:	693a      	ldr	r2, [r7, #16]
 8015862:	3208      	adds	r2, #8
      etharp_raw(netif,
 8015864:	2102      	movs	r1, #2
 8015866:	9103      	str	r1, [sp, #12]
 8015868:	f107 010c 	add.w	r1, r7, #12
 801586c:	9102      	str	r1, [sp, #8]
 801586e:	9201      	str	r2, [sp, #4]
 8015870:	9300      	str	r3, [sp, #0]
 8015872:	462b      	mov	r3, r5
 8015874:	4622      	mov	r2, r4
 8015876:	4601      	mov	r1, r0
 8015878:	6838      	ldr	r0, [r7, #0]
 801587a:	f000 fb33 	bl	8015ee4 <etharp_raw>
    break;
 801587e:	e001      	b.n	8015884 <etharp_input+0xf8>
    break;
 8015880:	bf00      	nop
 8015882:	e000      	b.n	8015886 <etharp_input+0xfa>
    break;
 8015884:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015886:	6878      	ldr	r0, [r7, #4]
 8015888:	f7fa fb38 	bl	800fefc <pbuf_free>
}
 801588c:	3718      	adds	r7, #24
 801588e:	46bd      	mov	sp, r7
 8015890:	bdb0      	pop	{r4, r5, r7, pc}
 8015892:	bf00      	nop
 8015894:	0801a204 	.word	0x0801a204
 8015898:	0801a380 	.word	0x0801a380
 801589c:	0801a248 	.word	0x0801a248

080158a0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b086      	sub	sp, #24
 80158a4:	af02      	add	r7, sp, #8
 80158a6:	60f8      	str	r0, [r7, #12]
 80158a8:	60b9      	str	r1, [r7, #8]
 80158aa:	4613      	mov	r3, r2
 80158ac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80158ae:	79fa      	ldrb	r2, [r7, #7]
 80158b0:	4944      	ldr	r1, [pc, #272]	; (80159c4 <etharp_output_to_arp_index+0x124>)
 80158b2:	4613      	mov	r3, r2
 80158b4:	005b      	lsls	r3, r3, #1
 80158b6:	4413      	add	r3, r2
 80158b8:	00db      	lsls	r3, r3, #3
 80158ba:	440b      	add	r3, r1
 80158bc:	3314      	adds	r3, #20
 80158be:	781b      	ldrb	r3, [r3, #0]
 80158c0:	2b01      	cmp	r3, #1
 80158c2:	d806      	bhi.n	80158d2 <etharp_output_to_arp_index+0x32>
 80158c4:	4b40      	ldr	r3, [pc, #256]	; (80159c8 <etharp_output_to_arp_index+0x128>)
 80158c6:	f240 22ed 	movw	r2, #749	; 0x2ed
 80158ca:	4940      	ldr	r1, [pc, #256]	; (80159cc <etharp_output_to_arp_index+0x12c>)
 80158cc:	4840      	ldr	r0, [pc, #256]	; (80159d0 <etharp_output_to_arp_index+0x130>)
 80158ce:	f002 f861 	bl	8017994 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80158d2:	79fa      	ldrb	r2, [r7, #7]
 80158d4:	493b      	ldr	r1, [pc, #236]	; (80159c4 <etharp_output_to_arp_index+0x124>)
 80158d6:	4613      	mov	r3, r2
 80158d8:	005b      	lsls	r3, r3, #1
 80158da:	4413      	add	r3, r2
 80158dc:	00db      	lsls	r3, r3, #3
 80158de:	440b      	add	r3, r1
 80158e0:	3314      	adds	r3, #20
 80158e2:	781b      	ldrb	r3, [r3, #0]
 80158e4:	2b02      	cmp	r3, #2
 80158e6:	d153      	bne.n	8015990 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80158e8:	79fa      	ldrb	r2, [r7, #7]
 80158ea:	4936      	ldr	r1, [pc, #216]	; (80159c4 <etharp_output_to_arp_index+0x124>)
 80158ec:	4613      	mov	r3, r2
 80158ee:	005b      	lsls	r3, r3, #1
 80158f0:	4413      	add	r3, r2
 80158f2:	00db      	lsls	r3, r3, #3
 80158f4:	440b      	add	r3, r1
 80158f6:	3312      	adds	r3, #18
 80158f8:	881b      	ldrh	r3, [r3, #0]
 80158fa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80158fe:	d919      	bls.n	8015934 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015900:	79fa      	ldrb	r2, [r7, #7]
 8015902:	4613      	mov	r3, r2
 8015904:	005b      	lsls	r3, r3, #1
 8015906:	4413      	add	r3, r2
 8015908:	00db      	lsls	r3, r3, #3
 801590a:	4a2e      	ldr	r2, [pc, #184]	; (80159c4 <etharp_output_to_arp_index+0x124>)
 801590c:	4413      	add	r3, r2
 801590e:	3304      	adds	r3, #4
 8015910:	4619      	mov	r1, r3
 8015912:	68f8      	ldr	r0, [r7, #12]
 8015914:	f000 fb94 	bl	8016040 <etharp_request>
 8015918:	4603      	mov	r3, r0
 801591a:	2b00      	cmp	r3, #0
 801591c:	d138      	bne.n	8015990 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801591e:	79fa      	ldrb	r2, [r7, #7]
 8015920:	4928      	ldr	r1, [pc, #160]	; (80159c4 <etharp_output_to_arp_index+0x124>)
 8015922:	4613      	mov	r3, r2
 8015924:	005b      	lsls	r3, r3, #1
 8015926:	4413      	add	r3, r2
 8015928:	00db      	lsls	r3, r3, #3
 801592a:	440b      	add	r3, r1
 801592c:	3314      	adds	r3, #20
 801592e:	2203      	movs	r2, #3
 8015930:	701a      	strb	r2, [r3, #0]
 8015932:	e02d      	b.n	8015990 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015934:	79fa      	ldrb	r2, [r7, #7]
 8015936:	4923      	ldr	r1, [pc, #140]	; (80159c4 <etharp_output_to_arp_index+0x124>)
 8015938:	4613      	mov	r3, r2
 801593a:	005b      	lsls	r3, r3, #1
 801593c:	4413      	add	r3, r2
 801593e:	00db      	lsls	r3, r3, #3
 8015940:	440b      	add	r3, r1
 8015942:	3312      	adds	r3, #18
 8015944:	881b      	ldrh	r3, [r3, #0]
 8015946:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801594a:	d321      	bcc.n	8015990 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801594c:	79fa      	ldrb	r2, [r7, #7]
 801594e:	4613      	mov	r3, r2
 8015950:	005b      	lsls	r3, r3, #1
 8015952:	4413      	add	r3, r2
 8015954:	00db      	lsls	r3, r3, #3
 8015956:	4a1b      	ldr	r2, [pc, #108]	; (80159c4 <etharp_output_to_arp_index+0x124>)
 8015958:	4413      	add	r3, r2
 801595a:	1d19      	adds	r1, r3, #4
 801595c:	79fa      	ldrb	r2, [r7, #7]
 801595e:	4613      	mov	r3, r2
 8015960:	005b      	lsls	r3, r3, #1
 8015962:	4413      	add	r3, r2
 8015964:	00db      	lsls	r3, r3, #3
 8015966:	3308      	adds	r3, #8
 8015968:	4a16      	ldr	r2, [pc, #88]	; (80159c4 <etharp_output_to_arp_index+0x124>)
 801596a:	4413      	add	r3, r2
 801596c:	3304      	adds	r3, #4
 801596e:	461a      	mov	r2, r3
 8015970:	68f8      	ldr	r0, [r7, #12]
 8015972:	f000 fb43 	bl	8015ffc <etharp_request_dst>
 8015976:	4603      	mov	r3, r0
 8015978:	2b00      	cmp	r3, #0
 801597a:	d109      	bne.n	8015990 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801597c:	79fa      	ldrb	r2, [r7, #7]
 801597e:	4911      	ldr	r1, [pc, #68]	; (80159c4 <etharp_output_to_arp_index+0x124>)
 8015980:	4613      	mov	r3, r2
 8015982:	005b      	lsls	r3, r3, #1
 8015984:	4413      	add	r3, r2
 8015986:	00db      	lsls	r3, r3, #3
 8015988:	440b      	add	r3, r1
 801598a:	3314      	adds	r3, #20
 801598c:	2203      	movs	r2, #3
 801598e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	f103 0131 	add.w	r1, r3, #49	; 0x31
 8015996:	79fa      	ldrb	r2, [r7, #7]
 8015998:	4613      	mov	r3, r2
 801599a:	005b      	lsls	r3, r3, #1
 801599c:	4413      	add	r3, r2
 801599e:	00db      	lsls	r3, r3, #3
 80159a0:	3308      	adds	r3, #8
 80159a2:	4a08      	ldr	r2, [pc, #32]	; (80159c4 <etharp_output_to_arp_index+0x124>)
 80159a4:	4413      	add	r3, r2
 80159a6:	1d1a      	adds	r2, r3, #4
 80159a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80159ac:	9300      	str	r3, [sp, #0]
 80159ae:	4613      	mov	r3, r2
 80159b0:	460a      	mov	r2, r1
 80159b2:	68b9      	ldr	r1, [r7, #8]
 80159b4:	68f8      	ldr	r0, [r7, #12]
 80159b6:	f001 fe33 	bl	8017620 <ethernet_output>
 80159ba:	4603      	mov	r3, r0
}
 80159bc:	4618      	mov	r0, r3
 80159be:	3710      	adds	r7, #16
 80159c0:	46bd      	mov	sp, r7
 80159c2:	bd80      	pop	{r7, pc}
 80159c4:	24021840 	.word	0x24021840
 80159c8:	0801a204 	.word	0x0801a204
 80159cc:	0801a3a0 	.word	0x0801a3a0
 80159d0:	0801a248 	.word	0x0801a248

080159d4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b08a      	sub	sp, #40	; 0x28
 80159d8:	af02      	add	r7, sp, #8
 80159da:	60f8      	str	r0, [r7, #12]
 80159dc:	60b9      	str	r1, [r7, #8]
 80159de:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d106      	bne.n	80159f8 <etharp_output+0x24>
 80159ea:	4b69      	ldr	r3, [pc, #420]	; (8015b90 <etharp_output+0x1bc>)
 80159ec:	f240 321b 	movw	r2, #795	; 0x31b
 80159f0:	4968      	ldr	r1, [pc, #416]	; (8015b94 <etharp_output+0x1c0>)
 80159f2:	4869      	ldr	r0, [pc, #420]	; (8015b98 <etharp_output+0x1c4>)
 80159f4:	f001 ffce 	bl	8017994 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80159f8:	68bb      	ldr	r3, [r7, #8]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d106      	bne.n	8015a0c <etharp_output+0x38>
 80159fe:	4b64      	ldr	r3, [pc, #400]	; (8015b90 <etharp_output+0x1bc>)
 8015a00:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015a04:	4965      	ldr	r1, [pc, #404]	; (8015b9c <etharp_output+0x1c8>)
 8015a06:	4864      	ldr	r0, [pc, #400]	; (8015b98 <etharp_output+0x1c4>)
 8015a08:	f001 ffc4 	bl	8017994 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d106      	bne.n	8015a20 <etharp_output+0x4c>
 8015a12:	4b5f      	ldr	r3, [pc, #380]	; (8015b90 <etharp_output+0x1bc>)
 8015a14:	f240 321d 	movw	r2, #797	; 0x31d
 8015a18:	4961      	ldr	r1, [pc, #388]	; (8015ba0 <etharp_output+0x1cc>)
 8015a1a:	485f      	ldr	r0, [pc, #380]	; (8015b98 <etharp_output+0x1c4>)
 8015a1c:	f001 ffba 	bl	8017994 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	68f9      	ldr	r1, [r7, #12]
 8015a26:	4618      	mov	r0, r3
 8015a28:	f000 ff58 	bl	80168dc <ip4_addr_isbroadcast_u32>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d002      	beq.n	8015a38 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015a32:	4b5c      	ldr	r3, [pc, #368]	; (8015ba4 <etharp_output+0x1d0>)
 8015a34:	61fb      	str	r3, [r7, #28]
 8015a36:	e09b      	b.n	8015b70 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015a40:	2be0      	cmp	r3, #224	; 0xe0
 8015a42:	d118      	bne.n	8015a76 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015a44:	2301      	movs	r3, #1
 8015a46:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015a48:	2300      	movs	r3, #0
 8015a4a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015a4c:	235e      	movs	r3, #94	; 0x5e
 8015a4e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	3301      	adds	r3, #1
 8015a54:	781b      	ldrb	r3, [r3, #0]
 8015a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a5a:	b2db      	uxtb	r3, r3
 8015a5c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	3302      	adds	r3, #2
 8015a62:	781b      	ldrb	r3, [r3, #0]
 8015a64:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	3303      	adds	r3, #3
 8015a6a:	781b      	ldrb	r3, [r3, #0]
 8015a6c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015a6e:	f107 0310 	add.w	r3, r7, #16
 8015a72:	61fb      	str	r3, [r7, #28]
 8015a74:	e07c      	b.n	8015b70 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	681a      	ldr	r2, [r3, #0]
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	3304      	adds	r3, #4
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	405a      	eors	r2, r3
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	3308      	adds	r3, #8
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	4013      	ands	r3, r2
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d012      	beq.n	8015ab4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015a94:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015a98:	4293      	cmp	r3, r2
 8015a9a:	d00b      	beq.n	8015ab4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	330c      	adds	r3, #12
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d003      	beq.n	8015aae <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	330c      	adds	r3, #12
 8015aaa:	61bb      	str	r3, [r7, #24]
 8015aac:	e002      	b.n	8015ab4 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015aae:	f06f 0303 	mvn.w	r3, #3
 8015ab2:	e069      	b.n	8015b88 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015ab4:	4b3c      	ldr	r3, [pc, #240]	; (8015ba8 <etharp_output+0x1d4>)
 8015ab6:	781b      	ldrb	r3, [r3, #0]
 8015ab8:	4619      	mov	r1, r3
 8015aba:	4a3c      	ldr	r2, [pc, #240]	; (8015bac <etharp_output+0x1d8>)
 8015abc:	460b      	mov	r3, r1
 8015abe:	005b      	lsls	r3, r3, #1
 8015ac0:	440b      	add	r3, r1
 8015ac2:	00db      	lsls	r3, r3, #3
 8015ac4:	4413      	add	r3, r2
 8015ac6:	3314      	adds	r3, #20
 8015ac8:	781b      	ldrb	r3, [r3, #0]
 8015aca:	2b01      	cmp	r3, #1
 8015acc:	d917      	bls.n	8015afe <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015ace:	69bb      	ldr	r3, [r7, #24]
 8015ad0:	681a      	ldr	r2, [r3, #0]
 8015ad2:	4b35      	ldr	r3, [pc, #212]	; (8015ba8 <etharp_output+0x1d4>)
 8015ad4:	781b      	ldrb	r3, [r3, #0]
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	4934      	ldr	r1, [pc, #208]	; (8015bac <etharp_output+0x1d8>)
 8015ada:	4603      	mov	r3, r0
 8015adc:	005b      	lsls	r3, r3, #1
 8015ade:	4403      	add	r3, r0
 8015ae0:	00db      	lsls	r3, r3, #3
 8015ae2:	440b      	add	r3, r1
 8015ae4:	3304      	adds	r3, #4
 8015ae6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015ae8:	429a      	cmp	r2, r3
 8015aea:	d108      	bne.n	8015afe <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015aec:	4b2e      	ldr	r3, [pc, #184]	; (8015ba8 <etharp_output+0x1d4>)
 8015aee:	781b      	ldrb	r3, [r3, #0]
 8015af0:	461a      	mov	r2, r3
 8015af2:	68b9      	ldr	r1, [r7, #8]
 8015af4:	68f8      	ldr	r0, [r7, #12]
 8015af6:	f7ff fed3 	bl	80158a0 <etharp_output_to_arp_index>
 8015afa:	4603      	mov	r3, r0
 8015afc:	e044      	b.n	8015b88 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015afe:	2300      	movs	r3, #0
 8015b00:	75fb      	strb	r3, [r7, #23]
 8015b02:	e02a      	b.n	8015b5a <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015b04:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015b08:	4928      	ldr	r1, [pc, #160]	; (8015bac <etharp_output+0x1d8>)
 8015b0a:	4613      	mov	r3, r2
 8015b0c:	005b      	lsls	r3, r3, #1
 8015b0e:	4413      	add	r3, r2
 8015b10:	00db      	lsls	r3, r3, #3
 8015b12:	440b      	add	r3, r1
 8015b14:	3314      	adds	r3, #20
 8015b16:	781b      	ldrb	r3, [r3, #0]
 8015b18:	2b01      	cmp	r3, #1
 8015b1a:	d918      	bls.n	8015b4e <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015b1c:	69bb      	ldr	r3, [r7, #24]
 8015b1e:	6819      	ldr	r1, [r3, #0]
 8015b20:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015b24:	4821      	ldr	r0, [pc, #132]	; (8015bac <etharp_output+0x1d8>)
 8015b26:	4613      	mov	r3, r2
 8015b28:	005b      	lsls	r3, r3, #1
 8015b2a:	4413      	add	r3, r2
 8015b2c:	00db      	lsls	r3, r3, #3
 8015b2e:	4403      	add	r3, r0
 8015b30:	3304      	adds	r3, #4
 8015b32:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015b34:	4299      	cmp	r1, r3
 8015b36:	d10a      	bne.n	8015b4e <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8015b38:	7dfa      	ldrb	r2, [r7, #23]
 8015b3a:	4b1b      	ldr	r3, [pc, #108]	; (8015ba8 <etharp_output+0x1d4>)
 8015b3c:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015b3e:	7dfb      	ldrb	r3, [r7, #23]
 8015b40:	461a      	mov	r2, r3
 8015b42:	68b9      	ldr	r1, [r7, #8]
 8015b44:	68f8      	ldr	r0, [r7, #12]
 8015b46:	f7ff feab 	bl	80158a0 <etharp_output_to_arp_index>
 8015b4a:	4603      	mov	r3, r0
 8015b4c:	e01c      	b.n	8015b88 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015b4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015b52:	b2db      	uxtb	r3, r3
 8015b54:	3301      	adds	r3, #1
 8015b56:	b2db      	uxtb	r3, r3
 8015b58:	75fb      	strb	r3, [r7, #23]
 8015b5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015b5e:	2b09      	cmp	r3, #9
 8015b60:	ddd0      	ble.n	8015b04 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015b62:	68ba      	ldr	r2, [r7, #8]
 8015b64:	69b9      	ldr	r1, [r7, #24]
 8015b66:	68f8      	ldr	r0, [r7, #12]
 8015b68:	f000 f822 	bl	8015bb0 <etharp_query>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	e00b      	b.n	8015b88 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	f103 0231 	add.w	r2, r3, #49	; 0x31
 8015b76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015b7a:	9300      	str	r3, [sp, #0]
 8015b7c:	69fb      	ldr	r3, [r7, #28]
 8015b7e:	68b9      	ldr	r1, [r7, #8]
 8015b80:	68f8      	ldr	r0, [r7, #12]
 8015b82:	f001 fd4d 	bl	8017620 <ethernet_output>
 8015b86:	4603      	mov	r3, r0
}
 8015b88:	4618      	mov	r0, r3
 8015b8a:	3720      	adds	r7, #32
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	bd80      	pop	{r7, pc}
 8015b90:	0801a204 	.word	0x0801a204
 8015b94:	0801a380 	.word	0x0801a380
 8015b98:	0801a248 	.word	0x0801a248
 8015b9c:	0801a23c 	.word	0x0801a23c
 8015ba0:	0801a370 	.word	0x0801a370
 8015ba4:	0801a9e0 	.word	0x0801a9e0
 8015ba8:	24021930 	.word	0x24021930
 8015bac:	24021840 	.word	0x24021840

08015bb0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b090      	sub	sp, #64	; 0x40
 8015bb4:	af02      	add	r7, sp, #8
 8015bb6:	60f8      	str	r0, [r7, #12]
 8015bb8:	60b9      	str	r1, [r7, #8]
 8015bba:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	3331      	adds	r3, #49	; 0x31
 8015bc0:	61fb      	str	r3, [r7, #28]
  err_t result = ERR_MEM;
 8015bc2:	23ff      	movs	r3, #255	; 0xff
 8015bc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  int is_new_entry = 0;
 8015bc8:	2300      	movs	r3, #0
 8015bca:	633b      	str	r3, [r7, #48]	; 0x30
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015bcc:	68bb      	ldr	r3, [r7, #8]
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	68f9      	ldr	r1, [r7, #12]
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f000 fe82 	bl	80168dc <ip4_addr_isbroadcast_u32>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d10c      	bne.n	8015bf8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015bde:	68bb      	ldr	r3, [r7, #8]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015be6:	2be0      	cmp	r3, #224	; 0xe0
 8015be8:	d006      	beq.n	8015bf8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015bea:	68bb      	ldr	r3, [r7, #8]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d003      	beq.n	8015bf8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015bf0:	68bb      	ldr	r3, [r7, #8]
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d102      	bne.n	8015bfe <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015bf8:	f06f 030f 	mvn.w	r3, #15
 8015bfc:	e15f      	b.n	8015ebe <etharp_query+0x30e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015bfe:	68fa      	ldr	r2, [r7, #12]
 8015c00:	2101      	movs	r1, #1
 8015c02:	68b8      	ldr	r0, [r7, #8]
 8015c04:	f7ff fb78 	bl	80152f8 <etharp_find_entry>
 8015c08:	4603      	mov	r3, r0
 8015c0a:	76fb      	strb	r3, [r7, #27]

  /* could not find or create entry? */
  if (i < 0) {
 8015c0c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	da02      	bge.n	8015c1a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8015c14:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015c18:	e151      	b.n	8015ebe <etharp_query+0x30e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015c1a:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015c1e:	49aa      	ldr	r1, [pc, #680]	; (8015ec8 <etharp_query+0x318>)
 8015c20:	4613      	mov	r3, r2
 8015c22:	005b      	lsls	r3, r3, #1
 8015c24:	4413      	add	r3, r2
 8015c26:	00db      	lsls	r3, r3, #3
 8015c28:	440b      	add	r3, r1
 8015c2a:	3314      	adds	r3, #20
 8015c2c:	781b      	ldrb	r3, [r3, #0]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d117      	bne.n	8015c62 <etharp_query+0xb2>
    is_new_entry = 1;
 8015c32:	2301      	movs	r3, #1
 8015c34:	633b      	str	r3, [r7, #48]	; 0x30
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015c36:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015c3a:	49a3      	ldr	r1, [pc, #652]	; (8015ec8 <etharp_query+0x318>)
 8015c3c:	4613      	mov	r3, r2
 8015c3e:	005b      	lsls	r3, r3, #1
 8015c40:	4413      	add	r3, r2
 8015c42:	00db      	lsls	r3, r3, #3
 8015c44:	440b      	add	r3, r1
 8015c46:	3314      	adds	r3, #20
 8015c48:	2201      	movs	r2, #1
 8015c4a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015c4c:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015c50:	499d      	ldr	r1, [pc, #628]	; (8015ec8 <etharp_query+0x318>)
 8015c52:	4613      	mov	r3, r2
 8015c54:	005b      	lsls	r3, r3, #1
 8015c56:	4413      	add	r3, r2
 8015c58:	00db      	lsls	r3, r3, #3
 8015c5a:	440b      	add	r3, r1
 8015c5c:	3308      	adds	r3, #8
 8015c5e:	68fa      	ldr	r2, [r7, #12]
 8015c60:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015c62:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015c66:	4998      	ldr	r1, [pc, #608]	; (8015ec8 <etharp_query+0x318>)
 8015c68:	4613      	mov	r3, r2
 8015c6a:	005b      	lsls	r3, r3, #1
 8015c6c:	4413      	add	r3, r2
 8015c6e:	00db      	lsls	r3, r3, #3
 8015c70:	440b      	add	r3, r1
 8015c72:	3314      	adds	r3, #20
 8015c74:	781b      	ldrb	r3, [r3, #0]
 8015c76:	2b01      	cmp	r3, #1
 8015c78:	d012      	beq.n	8015ca0 <etharp_query+0xf0>
 8015c7a:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015c7e:	4992      	ldr	r1, [pc, #584]	; (8015ec8 <etharp_query+0x318>)
 8015c80:	4613      	mov	r3, r2
 8015c82:	005b      	lsls	r3, r3, #1
 8015c84:	4413      	add	r3, r2
 8015c86:	00db      	lsls	r3, r3, #3
 8015c88:	440b      	add	r3, r1
 8015c8a:	3314      	adds	r3, #20
 8015c8c:	781b      	ldrb	r3, [r3, #0]
 8015c8e:	2b01      	cmp	r3, #1
 8015c90:	d806      	bhi.n	8015ca0 <etharp_query+0xf0>
 8015c92:	4b8e      	ldr	r3, [pc, #568]	; (8015ecc <etharp_query+0x31c>)
 8015c94:	f240 32c9 	movw	r2, #969	; 0x3c9
 8015c98:	498d      	ldr	r1, [pc, #564]	; (8015ed0 <etharp_query+0x320>)
 8015c9a:	488e      	ldr	r0, [pc, #568]	; (8015ed4 <etharp_query+0x324>)
 8015c9c:	f001 fe7a 	bl	8017994 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d102      	bne.n	8015cac <etharp_query+0xfc>
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d10c      	bne.n	8015cc6 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015cac:	68b9      	ldr	r1, [r7, #8]
 8015cae:	68f8      	ldr	r0, [r7, #12]
 8015cb0:	f000 f9c6 	bl	8016040 <etharp_request>
 8015cb4:	4603      	mov	r3, r0
 8015cb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d102      	bne.n	8015cc6 <etharp_query+0x116>
      return result;
 8015cc0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8015cc4:	e0fb      	b.n	8015ebe <etharp_query+0x30e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d106      	bne.n	8015cda <etharp_query+0x12a>
 8015ccc:	4b7f      	ldr	r3, [pc, #508]	; (8015ecc <etharp_query+0x31c>)
 8015cce:	f240 32db 	movw	r2, #987	; 0x3db
 8015cd2:	4981      	ldr	r1, [pc, #516]	; (8015ed8 <etharp_query+0x328>)
 8015cd4:	487f      	ldr	r0, [pc, #508]	; (8015ed4 <etharp_query+0x324>)
 8015cd6:	f001 fe5d 	bl	8017994 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015cda:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015cde:	497a      	ldr	r1, [pc, #488]	; (8015ec8 <etharp_query+0x318>)
 8015ce0:	4613      	mov	r3, r2
 8015ce2:	005b      	lsls	r3, r3, #1
 8015ce4:	4413      	add	r3, r2
 8015ce6:	00db      	lsls	r3, r3, #3
 8015ce8:	440b      	add	r3, r1
 8015cea:	3314      	adds	r3, #20
 8015cec:	781b      	ldrb	r3, [r3, #0]
 8015cee:	2b01      	cmp	r3, #1
 8015cf0:	d919      	bls.n	8015d26 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8015cf2:	7efa      	ldrb	r2, [r7, #27]
 8015cf4:	4b79      	ldr	r3, [pc, #484]	; (8015edc <etharp_query+0x32c>)
 8015cf6:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015cf8:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015cfc:	4613      	mov	r3, r2
 8015cfe:	005b      	lsls	r3, r3, #1
 8015d00:	4413      	add	r3, r2
 8015d02:	00db      	lsls	r3, r3, #3
 8015d04:	3308      	adds	r3, #8
 8015d06:	4a70      	ldr	r2, [pc, #448]	; (8015ec8 <etharp_query+0x318>)
 8015d08:	4413      	add	r3, r2
 8015d0a:	1d1a      	adds	r2, r3, #4
 8015d0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015d10:	9300      	str	r3, [sp, #0]
 8015d12:	4613      	mov	r3, r2
 8015d14:	69fa      	ldr	r2, [r7, #28]
 8015d16:	6879      	ldr	r1, [r7, #4]
 8015d18:	68f8      	ldr	r0, [r7, #12]
 8015d1a:	f001 fc81 	bl	8017620 <ethernet_output>
 8015d1e:	4603      	mov	r3, r0
 8015d20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015d24:	e0c9      	b.n	8015eba <etharp_query+0x30a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015d26:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015d2a:	4967      	ldr	r1, [pc, #412]	; (8015ec8 <etharp_query+0x318>)
 8015d2c:	4613      	mov	r3, r2
 8015d2e:	005b      	lsls	r3, r3, #1
 8015d30:	4413      	add	r3, r2
 8015d32:	00db      	lsls	r3, r3, #3
 8015d34:	440b      	add	r3, r1
 8015d36:	3314      	adds	r3, #20
 8015d38:	781b      	ldrb	r3, [r3, #0]
 8015d3a:	2b01      	cmp	r3, #1
 8015d3c:	f040 80bd 	bne.w	8015eba <etharp_query+0x30a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015d40:	2300      	movs	r3, #0
 8015d42:	62bb      	str	r3, [r7, #40]	; 0x28
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (p) {
 8015d48:	e01a      	b.n	8015d80 <etharp_query+0x1d0>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d4c:	895a      	ldrh	r2, [r3, #10]
 8015d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d50:	891b      	ldrh	r3, [r3, #8]
 8015d52:	429a      	cmp	r2, r3
 8015d54:	d10a      	bne.n	8015d6c <etharp_query+0x1bc>
 8015d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d006      	beq.n	8015d6c <etharp_query+0x1bc>
 8015d5e:	4b5b      	ldr	r3, [pc, #364]	; (8015ecc <etharp_query+0x31c>)
 8015d60:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8015d64:	495e      	ldr	r1, [pc, #376]	; (8015ee0 <etharp_query+0x330>)
 8015d66:	485b      	ldr	r0, [pc, #364]	; (8015ed4 <etharp_query+0x324>)
 8015d68:	f001 fe14 	bl	8017994 <iprintf>
      if (p->type != PBUF_ROM) {
 8015d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d6e:	7b1b      	ldrb	r3, [r3, #12]
 8015d70:	2b01      	cmp	r3, #1
 8015d72:	d002      	beq.n	8015d7a <etharp_query+0x1ca>
        copy_needed = 1;
 8015d74:	2301      	movs	r3, #1
 8015d76:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 8015d78:	e005      	b.n	8015d86 <etharp_query+0x1d6>
      }
      p = p->next;
 8015d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (p) {
 8015d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d1e1      	bne.n	8015d4a <etharp_query+0x19a>
    }
    if (copy_needed) {
 8015d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d017      	beq.n	8015dbc <etharp_query+0x20c>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8015d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d8e:	891b      	ldrh	r3, [r3, #8]
 8015d90:	2200      	movs	r2, #0
 8015d92:	4619      	mov	r1, r3
 8015d94:	2002      	movs	r0, #2
 8015d96:	f7f9 fd3f 	bl	800f818 <pbuf_alloc>
 8015d9a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if (p != NULL) {
 8015d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d011      	beq.n	8015dc6 <etharp_query+0x216>
        if (pbuf_copy(p, q) != ERR_OK) {
 8015da2:	6879      	ldr	r1, [r7, #4]
 8015da4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015da6:	f7fa f9d9 	bl	801015c <pbuf_copy>
 8015daa:	4603      	mov	r3, r0
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d00a      	beq.n	8015dc6 <etharp_query+0x216>
          pbuf_free(p);
 8015db0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015db2:	f7fa f8a3 	bl	800fefc <pbuf_free>
          p = NULL;
 8015db6:	2300      	movs	r3, #0
 8015db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015dba:	e004      	b.n	8015dc6 <etharp_query+0x216>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pbuf_ref(p);
 8015dc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015dc2:	f7fa f94d 	bl	8010060 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d073      	beq.n	8015eb4 <etharp_query+0x304>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 8015dcc:	200a      	movs	r0, #10
 8015dce:	f7f9 fa43 	bl	800f258 <memp_malloc>
 8015dd2:	6178      	str	r0, [r7, #20]
      if (new_entry != NULL) {
 8015dd4:	697b      	ldr	r3, [r7, #20]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d065      	beq.n	8015ea6 <etharp_query+0x2f6>
        unsigned int qlen = 0;
 8015dda:	2300      	movs	r3, #0
 8015ddc:	627b      	str	r3, [r7, #36]	; 0x24
        new_entry->next = 0;
 8015dde:	697b      	ldr	r3, [r7, #20]
 8015de0:	2200      	movs	r2, #0
 8015de2:	601a      	str	r2, [r3, #0]
        new_entry->p = p;
 8015de4:	697b      	ldr	r3, [r7, #20]
 8015de6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015de8:	605a      	str	r2, [r3, #4]
        if (arp_table[i].q != NULL) {
 8015dea:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015dee:	4936      	ldr	r1, [pc, #216]	; (8015ec8 <etharp_query+0x318>)
 8015df0:	4613      	mov	r3, r2
 8015df2:	005b      	lsls	r3, r3, #1
 8015df4:	4413      	add	r3, r2
 8015df6:	00db      	lsls	r3, r3, #3
 8015df8:	440b      	add	r3, r1
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d01b      	beq.n	8015e38 <etharp_query+0x288>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
 8015e00:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015e04:	4930      	ldr	r1, [pc, #192]	; (8015ec8 <etharp_query+0x318>)
 8015e06:	4613      	mov	r3, r2
 8015e08:	005b      	lsls	r3, r3, #1
 8015e0a:	4413      	add	r3, r2
 8015e0c:	00db      	lsls	r3, r3, #3
 8015e0e:	440b      	add	r3, r1
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	623b      	str	r3, [r7, #32]
          qlen++;
 8015e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e16:	3301      	adds	r3, #1
 8015e18:	627b      	str	r3, [r7, #36]	; 0x24
          while (r->next != NULL) {
 8015e1a:	e005      	b.n	8015e28 <etharp_query+0x278>
            r = r->next;
 8015e1c:	6a3b      	ldr	r3, [r7, #32]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	623b      	str	r3, [r7, #32]
            qlen++;
 8015e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e24:	3301      	adds	r3, #1
 8015e26:	627b      	str	r3, [r7, #36]	; 0x24
          while (r->next != NULL) {
 8015e28:	6a3b      	ldr	r3, [r7, #32]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d1f5      	bne.n	8015e1c <etharp_query+0x26c>
          }
          r->next = new_entry;
 8015e30:	6a3b      	ldr	r3, [r7, #32]
 8015e32:	697a      	ldr	r2, [r7, #20]
 8015e34:	601a      	str	r2, [r3, #0]
 8015e36:	e009      	b.n	8015e4c <etharp_query+0x29c>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
 8015e38:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015e3c:	4922      	ldr	r1, [pc, #136]	; (8015ec8 <etharp_query+0x318>)
 8015e3e:	4613      	mov	r3, r2
 8015e40:	005b      	lsls	r3, r3, #1
 8015e42:	4413      	add	r3, r2
 8015e44:	00db      	lsls	r3, r3, #3
 8015e46:	440b      	add	r3, r1
 8015e48:	697a      	ldr	r2, [r7, #20]
 8015e4a:	601a      	str	r2, [r3, #0]
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
 8015e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e4e:	2b02      	cmp	r3, #2
 8015e50:	d925      	bls.n	8015e9e <etharp_query+0x2ee>
          struct etharp_q_entry *old;
          old = arp_table[i].q;
 8015e52:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015e56:	491c      	ldr	r1, [pc, #112]	; (8015ec8 <etharp_query+0x318>)
 8015e58:	4613      	mov	r3, r2
 8015e5a:	005b      	lsls	r3, r3, #1
 8015e5c:	4413      	add	r3, r2
 8015e5e:	00db      	lsls	r3, r3, #3
 8015e60:	440b      	add	r3, r1
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	613b      	str	r3, [r7, #16]
          arp_table[i].q = arp_table[i].q->next;
 8015e66:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015e6a:	4917      	ldr	r1, [pc, #92]	; (8015ec8 <etharp_query+0x318>)
 8015e6c:	4613      	mov	r3, r2
 8015e6e:	005b      	lsls	r3, r3, #1
 8015e70:	4413      	add	r3, r2
 8015e72:	00db      	lsls	r3, r3, #3
 8015e74:	440b      	add	r3, r1
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015e7c:	6819      	ldr	r1, [r3, #0]
 8015e7e:	4812      	ldr	r0, [pc, #72]	; (8015ec8 <etharp_query+0x318>)
 8015e80:	4613      	mov	r3, r2
 8015e82:	005b      	lsls	r3, r3, #1
 8015e84:	4413      	add	r3, r2
 8015e86:	00db      	lsls	r3, r3, #3
 8015e88:	4403      	add	r3, r0
 8015e8a:	6019      	str	r1, [r3, #0]
          pbuf_free(old->p);
 8015e8c:	693b      	ldr	r3, [r7, #16]
 8015e8e:	685b      	ldr	r3, [r3, #4]
 8015e90:	4618      	mov	r0, r3
 8015e92:	f7fa f833 	bl	800fefc <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 8015e96:	6939      	ldr	r1, [r7, #16]
 8015e98:	200a      	movs	r0, #10
 8015e9a:	f7f9 fa53 	bl	800f344 <memp_free>
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        result = ERR_OK;
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015ea4:	e009      	b.n	8015eba <etharp_query+0x30a>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
 8015ea6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015ea8:	f7fa f828 	bl	800fefc <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
 8015eac:	23ff      	movs	r3, #255	; 0xff
 8015eae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015eb2:	e002      	b.n	8015eba <etharp_query+0x30a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015eb4:	23ff      	movs	r3, #255	; 0xff
 8015eb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }
  }
  return result;
 8015eba:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	3738      	adds	r7, #56	; 0x38
 8015ec2:	46bd      	mov	sp, r7
 8015ec4:	bd80      	pop	{r7, pc}
 8015ec6:	bf00      	nop
 8015ec8:	24021840 	.word	0x24021840
 8015ecc:	0801a204 	.word	0x0801a204
 8015ed0:	0801a3d0 	.word	0x0801a3d0
 8015ed4:	0801a248 	.word	0x0801a248
 8015ed8:	0801a23c 	.word	0x0801a23c
 8015edc:	24021930 	.word	0x24021930
 8015ee0:	0801a3f8 	.word	0x0801a3f8

08015ee4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b08a      	sub	sp, #40	; 0x28
 8015ee8:	af02      	add	r7, sp, #8
 8015eea:	60f8      	str	r0, [r7, #12]
 8015eec:	60b9      	str	r1, [r7, #8]
 8015eee:	607a      	str	r2, [r7, #4]
 8015ef0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d106      	bne.n	8015f0a <etharp_raw+0x26>
 8015efc:	4b3a      	ldr	r3, [pc, #232]	; (8015fe8 <etharp_raw+0x104>)
 8015efe:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8015f02:	493a      	ldr	r1, [pc, #232]	; (8015fec <etharp_raw+0x108>)
 8015f04:	483a      	ldr	r0, [pc, #232]	; (8015ff0 <etharp_raw+0x10c>)
 8015f06:	f001 fd45 	bl	8017994 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015f0a:	2200      	movs	r2, #0
 8015f0c:	211c      	movs	r1, #28
 8015f0e:	2002      	movs	r0, #2
 8015f10:	f7f9 fc82 	bl	800f818 <pbuf_alloc>
 8015f14:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015f16:	69bb      	ldr	r3, [r7, #24]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d102      	bne.n	8015f22 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8015f20:	e05d      	b.n	8015fde <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015f22:	69bb      	ldr	r3, [r7, #24]
 8015f24:	895b      	ldrh	r3, [r3, #10]
 8015f26:	2b1b      	cmp	r3, #27
 8015f28:	d806      	bhi.n	8015f38 <etharp_raw+0x54>
 8015f2a:	4b2f      	ldr	r3, [pc, #188]	; (8015fe8 <etharp_raw+0x104>)
 8015f2c:	f240 4264 	movw	r2, #1124	; 0x464
 8015f30:	4930      	ldr	r1, [pc, #192]	; (8015ff4 <etharp_raw+0x110>)
 8015f32:	482f      	ldr	r0, [pc, #188]	; (8015ff0 <etharp_raw+0x10c>)
 8015f34:	f001 fd2e 	bl	8017994 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015f38:	69bb      	ldr	r3, [r7, #24]
 8015f3a:	685b      	ldr	r3, [r3, #4]
 8015f3c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015f3e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015f40:	4618      	mov	r0, r3
 8015f42:	f7f8 fcc3 	bl	800e8cc <lwip_htons>
 8015f46:	4603      	mov	r3, r0
 8015f48:	461a      	mov	r2, r3
 8015f4a:	697b      	ldr	r3, [r7, #20]
 8015f4c:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015f54:	2b06      	cmp	r3, #6
 8015f56:	d006      	beq.n	8015f66 <etharp_raw+0x82>
 8015f58:	4b23      	ldr	r3, [pc, #140]	; (8015fe8 <etharp_raw+0x104>)
 8015f5a:	f240 426b 	movw	r2, #1131	; 0x46b
 8015f5e:	4926      	ldr	r1, [pc, #152]	; (8015ff8 <etharp_raw+0x114>)
 8015f60:	4823      	ldr	r0, [pc, #140]	; (8015ff0 <etharp_raw+0x10c>)
 8015f62:	f001 fd17 	bl	8017994 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8015f66:	697b      	ldr	r3, [r7, #20]
 8015f68:	3308      	adds	r3, #8
 8015f6a:	2206      	movs	r2, #6
 8015f6c:	6839      	ldr	r1, [r7, #0]
 8015f6e:	4618      	mov	r0, r3
 8015f70:	f001 fcfd 	bl	801796e <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8015f74:	697b      	ldr	r3, [r7, #20]
 8015f76:	3312      	adds	r3, #18
 8015f78:	2206      	movs	r2, #6
 8015f7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	f001 fcf6 	bl	801796e <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8015f82:	697b      	ldr	r3, [r7, #20]
 8015f84:	330e      	adds	r3, #14
 8015f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015f88:	6812      	ldr	r2, [r2, #0]
 8015f8a:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8015f8c:	697b      	ldr	r3, [r7, #20]
 8015f8e:	3318      	adds	r3, #24
 8015f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f92:	6812      	ldr	r2, [r2, #0]
 8015f94:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8015f96:	697b      	ldr	r3, [r7, #20]
 8015f98:	2200      	movs	r2, #0
 8015f9a:	701a      	strb	r2, [r3, #0]
 8015f9c:	2200      	movs	r2, #0
 8015f9e:	f042 0201 	orr.w	r2, r2, #1
 8015fa2:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015fa4:	697b      	ldr	r3, [r7, #20]
 8015fa6:	2200      	movs	r2, #0
 8015fa8:	f042 0208 	orr.w	r2, r2, #8
 8015fac:	709a      	strb	r2, [r3, #2]
 8015fae:	2200      	movs	r2, #0
 8015fb0:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015fb2:	697b      	ldr	r3, [r7, #20]
 8015fb4:	2206      	movs	r2, #6
 8015fb6:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015fb8:	697b      	ldr	r3, [r7, #20]
 8015fba:	2204      	movs	r2, #4
 8015fbc:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015fbe:	f640 0306 	movw	r3, #2054	; 0x806
 8015fc2:	9300      	str	r3, [sp, #0]
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	68ba      	ldr	r2, [r7, #8]
 8015fc8:	69b9      	ldr	r1, [r7, #24]
 8015fca:	68f8      	ldr	r0, [r7, #12]
 8015fcc:	f001 fb28 	bl	8017620 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015fd0:	69b8      	ldr	r0, [r7, #24]
 8015fd2:	f7f9 ff93 	bl	800fefc <pbuf_free>
  p = NULL;
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015fda:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015fde:	4618      	mov	r0, r3
 8015fe0:	3720      	adds	r7, #32
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	bd80      	pop	{r7, pc}
 8015fe6:	bf00      	nop
 8015fe8:	0801a204 	.word	0x0801a204
 8015fec:	0801a380 	.word	0x0801a380
 8015ff0:	0801a248 	.word	0x0801a248
 8015ff4:	0801a414 	.word	0x0801a414
 8015ff8:	0801a448 	.word	0x0801a448

08015ffc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	b088      	sub	sp, #32
 8016000:	af04      	add	r7, sp, #16
 8016002:	60f8      	str	r0, [r7, #12]
 8016004:	60b9      	str	r1, [r7, #8]
 8016006:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	f103 0131 	add.w	r1, r3, #49	; 0x31
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	f103 0031 	add.w	r0, r3, #49	; 0x31
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016018:	2201      	movs	r2, #1
 801601a:	9203      	str	r2, [sp, #12]
 801601c:	68ba      	ldr	r2, [r7, #8]
 801601e:	9202      	str	r2, [sp, #8]
 8016020:	4a06      	ldr	r2, [pc, #24]	; (801603c <etharp_request_dst+0x40>)
 8016022:	9201      	str	r2, [sp, #4]
 8016024:	9300      	str	r3, [sp, #0]
 8016026:	4603      	mov	r3, r0
 8016028:	687a      	ldr	r2, [r7, #4]
 801602a:	68f8      	ldr	r0, [r7, #12]
 801602c:	f7ff ff5a 	bl	8015ee4 <etharp_raw>
 8016030:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016032:	4618      	mov	r0, r3
 8016034:	3710      	adds	r7, #16
 8016036:	46bd      	mov	sp, r7
 8016038:	bd80      	pop	{r7, pc}
 801603a:	bf00      	nop
 801603c:	0801a9e8 	.word	0x0801a9e8

08016040 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016040:	b580      	push	{r7, lr}
 8016042:	b082      	sub	sp, #8
 8016044:	af00      	add	r7, sp, #0
 8016046:	6078      	str	r0, [r7, #4]
 8016048:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801604a:	4a05      	ldr	r2, [pc, #20]	; (8016060 <etharp_request+0x20>)
 801604c:	6839      	ldr	r1, [r7, #0]
 801604e:	6878      	ldr	r0, [r7, #4]
 8016050:	f7ff ffd4 	bl	8015ffc <etharp_request_dst>
 8016054:	4603      	mov	r3, r0
}
 8016056:	4618      	mov	r0, r3
 8016058:	3708      	adds	r7, #8
 801605a:	46bd      	mov	sp, r7
 801605c:	bd80      	pop	{r7, pc}
 801605e:	bf00      	nop
 8016060:	0801a9e0 	.word	0x0801a9e0

08016064 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b08e      	sub	sp, #56	; 0x38
 8016068:	af04      	add	r7, sp, #16
 801606a:	6078      	str	r0, [r7, #4]
 801606c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801606e:	4b87      	ldr	r3, [pc, #540]	; (801628c <icmp_input+0x228>)
 8016070:	689b      	ldr	r3, [r3, #8]
 8016072:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL(iphdr_in) * 4;
 8016074:	6a3b      	ldr	r3, [r7, #32]
 8016076:	781b      	ldrb	r3, [r3, #0]
 8016078:	b29b      	uxth	r3, r3
 801607a:	f003 030f 	and.w	r3, r3, #15
 801607e:	b29b      	uxth	r3, r3
 8016080:	009b      	lsls	r3, r3, #2
 8016082:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 8016084:	8bfb      	ldrh	r3, [r7, #30]
 8016086:	2b13      	cmp	r3, #19
 8016088:	f240 80ee 	bls.w	8016268 <icmp_input+0x204>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	895b      	ldrh	r3, [r3, #10]
 8016090:	2b03      	cmp	r3, #3
 8016092:	f240 80eb 	bls.w	801626c <icmp_input+0x208>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	685b      	ldr	r3, [r3, #4]
 801609a:	781b      	ldrb	r3, [r3, #0]
 801609c:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 801609e:	7f7b      	ldrb	r3, [r7, #29]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	f000 80da 	beq.w	801625a <icmp_input+0x1f6>
 80160a6:	2b08      	cmp	r3, #8
 80160a8:	f040 80da 	bne.w	8016260 <icmp_input+0x1fc>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 80160ac:	4b78      	ldr	r3, [pc, #480]	; (8016290 <icmp_input+0x22c>)
 80160ae:	627b      	str	r3, [r7, #36]	; 0x24
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80160b0:	4b76      	ldr	r3, [pc, #472]	; (801628c <icmp_input+0x228>)
 80160b2:	695b      	ldr	r3, [r3, #20]
 80160b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80160b8:	2be0      	cmp	r3, #224	; 0xe0
 80160ba:	d102      	bne.n	80160c2 <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
      /* For multicast, use address of receiving interface as source address */
      src = netif_ip4_addr(inp);
 80160bc:	683b      	ldr	r3, [r7, #0]
 80160be:	3304      	adds	r3, #4
 80160c0:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80160c2:	4b72      	ldr	r3, [pc, #456]	; (801628c <icmp_input+0x228>)
 80160c4:	695a      	ldr	r2, [r3, #20]
 80160c6:	4b71      	ldr	r3, [pc, #452]	; (801628c <icmp_input+0x228>)
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	4619      	mov	r1, r3
 80160cc:	4610      	mov	r0, r2
 80160ce:	f000 fc05 	bl	80168dc <ip4_addr_isbroadcast_u32>
 80160d2:	4603      	mov	r3, r0
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d002      	beq.n	80160de <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
      /* For broadcast, use address of receiving interface as source address */
      src = netif_ip4_addr(inp);
 80160d8:	683b      	ldr	r3, [r7, #0]
 80160da:	3304      	adds	r3, #4
 80160dc:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	891b      	ldrh	r3, [r3, #8]
 80160e2:	2b07      	cmp	r3, #7
 80160e4:	f240 80c4 	bls.w	8016270 <icmp_input+0x20c>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
#if CHECKSUM_CHECK_ICMP
    IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
      if (inet_chksum_pbuf(p) != 0) {
 80160e8:	6878      	ldr	r0, [r7, #4]
 80160ea:	f7f8 fc85 	bl	800e9f8 <inet_chksum_pbuf>
 80160ee:	4603      	mov	r3, r0
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d003      	beq.n	80160fc <icmp_input+0x98>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
        pbuf_free(p);
 80160f4:	6878      	ldr	r0, [r7, #4]
 80160f6:	f7f9 ff01 	bl	800fefc <pbuf_free>
        ICMP_STATS_INC(icmp.chkerr);
        MIB2_STATS_INC(mib2.icmpinerrors);
        return;
 80160fa:	e0c3      	b.n	8016284 <icmp_input+0x220>
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80160fc:	8bfb      	ldrh	r3, [r7, #30]
 80160fe:	330e      	adds	r3, #14
 8016100:	b29b      	uxth	r3, r3
 8016102:	b21b      	sxth	r3, r3
 8016104:	4619      	mov	r1, r3
 8016106:	6878      	ldr	r0, [r7, #4]
 8016108:	f7f9 fed4 	bl	800feb4 <pbuf_header>
 801610c:	4603      	mov	r3, r0
 801610e:	2b00      	cmp	r3, #0
 8016110:	d046      	beq.n	80161a0 <icmp_input+0x13c>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	891a      	ldrh	r2, [r3, #8]
 8016116:	8bfb      	ldrh	r3, [r7, #30]
 8016118:	4413      	add	r3, r2
 801611a:	b29b      	uxth	r3, r3
 801611c:	2200      	movs	r2, #0
 801611e:	4619      	mov	r1, r3
 8016120:	2002      	movs	r0, #2
 8016122:	f7f9 fb79 	bl	800f818 <pbuf_alloc>
 8016126:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8016128:	69bb      	ldr	r3, [r7, #24]
 801612a:	2b00      	cmp	r3, #0
 801612c:	f000 80a5 	beq.w	801627a <icmp_input+0x216>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016130:	69bb      	ldr	r3, [r7, #24]
 8016132:	895b      	ldrh	r3, [r3, #10]
 8016134:	461a      	mov	r2, r3
 8016136:	8bfb      	ldrh	r3, [r7, #30]
 8016138:	3308      	adds	r3, #8
 801613a:	429a      	cmp	r2, r3
 801613c:	d203      	bcs.n	8016146 <icmp_input+0xe2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 801613e:	69b8      	ldr	r0, [r7, #24]
 8016140:	f7f9 fedc 	bl	800fefc <pbuf_free>
        goto icmperr;
 8016144:	e09a      	b.n	801627c <icmp_input+0x218>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8016146:	69bb      	ldr	r3, [r7, #24]
 8016148:	685b      	ldr	r3, [r3, #4]
 801614a:	8bfa      	ldrh	r2, [r7, #30]
 801614c:	6a39      	ldr	r1, [r7, #32]
 801614e:	4618      	mov	r0, r3
 8016150:	f001 fc0d 	bl	801796e <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8016154:	8bfb      	ldrh	r3, [r7, #30]
 8016156:	425b      	negs	r3, r3
 8016158:	b29b      	uxth	r3, r3
 801615a:	b21b      	sxth	r3, r3
 801615c:	4619      	mov	r1, r3
 801615e:	69b8      	ldr	r0, [r7, #24]
 8016160:	f7f9 fea8 	bl	800feb4 <pbuf_header>
 8016164:	4603      	mov	r3, r0
 8016166:	2b00      	cmp	r3, #0
 8016168:	d009      	beq.n	801617e <icmp_input+0x11a>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801616a:	4b4a      	ldr	r3, [pc, #296]	; (8016294 <icmp_input+0x230>)
 801616c:	22af      	movs	r2, #175	; 0xaf
 801616e:	494a      	ldr	r1, [pc, #296]	; (8016298 <icmp_input+0x234>)
 8016170:	484a      	ldr	r0, [pc, #296]	; (801629c <icmp_input+0x238>)
 8016172:	f001 fc0f 	bl	8017994 <iprintf>
        pbuf_free(r);
 8016176:	69b8      	ldr	r0, [r7, #24]
 8016178:	f7f9 fec0 	bl	800fefc <pbuf_free>
        goto icmperr;
 801617c:	e07e      	b.n	801627c <icmp_input+0x218>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 801617e:	6879      	ldr	r1, [r7, #4]
 8016180:	69b8      	ldr	r0, [r7, #24]
 8016182:	f7f9 ffeb 	bl	801015c <pbuf_copy>
 8016186:	4603      	mov	r3, r0
 8016188:	2b00      	cmp	r3, #0
 801618a:	d003      	beq.n	8016194 <icmp_input+0x130>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 801618c:	69b8      	ldr	r0, [r7, #24]
 801618e:	f7f9 feb5 	bl	800fefc <pbuf_free>
        goto icmperr;
 8016192:	e073      	b.n	801627c <icmp_input+0x218>
      }
      /* free the original p */
      pbuf_free(p);
 8016194:	6878      	ldr	r0, [r7, #4]
 8016196:	f7f9 feb1 	bl	800fefc <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801619a:	69bb      	ldr	r3, [r7, #24]
 801619c:	607b      	str	r3, [r7, #4]
 801619e:	e015      	b.n	80161cc <icmp_input+0x168>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80161a0:	8bfb      	ldrh	r3, [r7, #30]
 80161a2:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 80161a6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80161aa:	33f2      	adds	r3, #242	; 0xf2
 80161ac:	b29b      	uxth	r3, r3
 80161ae:	b21b      	sxth	r3, r3
 80161b0:	4619      	mov	r1, r3
 80161b2:	6878      	ldr	r0, [r7, #4]
 80161b4:	f7f9 fe7e 	bl	800feb4 <pbuf_header>
 80161b8:	4603      	mov	r3, r0
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d006      	beq.n	80161cc <icmp_input+0x168>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80161be:	4b35      	ldr	r3, [pc, #212]	; (8016294 <icmp_input+0x230>)
 80161c0:	22c0      	movs	r2, #192	; 0xc0
 80161c2:	4937      	ldr	r1, [pc, #220]	; (80162a0 <icmp_input+0x23c>)
 80161c4:	4835      	ldr	r0, [pc, #212]	; (801629c <icmp_input+0x238>)
 80161c6:	f001 fbe5 	bl	8017994 <iprintf>
        goto icmperr;
 80161ca:	e057      	b.n	801627c <icmp_input+0x218>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	685b      	ldr	r3, [r3, #4]
 80161d0:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 80161d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80161d6:	4619      	mov	r1, r3
 80161d8:	6878      	ldr	r0, [r7, #4]
 80161da:	f7f9 fe6b 	bl	800feb4 <pbuf_header>
 80161de:	4603      	mov	r3, r0
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d13c      	bne.n	801625e <icmp_input+0x1fa>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	685b      	ldr	r3, [r3, #4]
 80161e8:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 80161ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161ec:	681a      	ldr	r2, [r3, #0]
 80161ee:	693b      	ldr	r3, [r7, #16]
 80161f0:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80161f2:	4b26      	ldr	r3, [pc, #152]	; (801628c <icmp_input+0x228>)
 80161f4:	691a      	ldr	r2, [r3, #16]
 80161f6:	693b      	ldr	r3, [r7, #16]
 80161f8:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 80161fa:	697b      	ldr	r3, [r7, #20]
 80161fc:	2200      	movs	r2, #0
 80161fe:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
        /* adjust the checksum */
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8016200:	697b      	ldr	r3, [r7, #20]
 8016202:	885b      	ldrh	r3, [r3, #2]
 8016204:	b29b      	uxth	r3, r3
 8016206:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801620a:	4293      	cmp	r3, r2
 801620c:	d907      	bls.n	801621e <icmp_input+0x1ba>
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
 801620e:	697b      	ldr	r3, [r7, #20]
 8016210:	885b      	ldrh	r3, [r3, #2]
 8016212:	b29b      	uxth	r3, r3
 8016214:	3309      	adds	r3, #9
 8016216:	b29a      	uxth	r2, r3
 8016218:	697b      	ldr	r3, [r7, #20]
 801621a:	805a      	strh	r2, [r3, #2]
 801621c:	e006      	b.n	801622c <icmp_input+0x1c8>
        } else {
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
 801621e:	697b      	ldr	r3, [r7, #20]
 8016220:	885b      	ldrh	r3, [r3, #2]
 8016222:	b29b      	uxth	r3, r3
 8016224:	3308      	adds	r3, #8
 8016226:	b29a      	uxth	r2, r3
 8016228:	697b      	ldr	r3, [r7, #20]
 801622a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801622c:	693b      	ldr	r3, [r7, #16]
 801622e:	22ff      	movs	r2, #255	; 0xff
 8016230:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8016232:	693b      	ldr	r3, [r7, #16]
 8016234:	2200      	movs	r2, #0
 8016236:	729a      	strb	r2, [r3, #10]
 8016238:	2200      	movs	r2, #0
 801623a:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801623c:	683b      	ldr	r3, [r7, #0]
 801623e:	9302      	str	r3, [sp, #8]
 8016240:	2301      	movs	r3, #1
 8016242:	9301      	str	r3, [sp, #4]
 8016244:	2300      	movs	r3, #0
 8016246:	9300      	str	r3, [sp, #0]
 8016248:	23ff      	movs	r3, #255	; 0xff
 801624a:	2200      	movs	r2, #0
 801624c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801624e:	6878      	ldr	r0, [r7, #4]
 8016250:	f000 fa72 	bl	8016738 <ip4_output_if>
 8016254:	4603      	mov	r3, r0
 8016256:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8016258:	e001      	b.n	801625e <icmp_input+0x1fa>
    break;
 801625a:	bf00      	nop
 801625c:	e000      	b.n	8016260 <icmp_input+0x1fc>
    break;
 801625e:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016260:	6878      	ldr	r0, [r7, #4]
 8016262:	f7f9 fe4b 	bl	800fefc <pbuf_free>
  return;
 8016266:	e00d      	b.n	8016284 <icmp_input+0x220>
    goto lenerr;
 8016268:	bf00      	nop
 801626a:	e002      	b.n	8016272 <icmp_input+0x20e>
    goto lenerr;
 801626c:	bf00      	nop
 801626e:	e000      	b.n	8016272 <icmp_input+0x20e>
      goto lenerr;
 8016270:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016272:	6878      	ldr	r0, [r7, #4]
 8016274:	f7f9 fe42 	bl	800fefc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016278:	e004      	b.n	8016284 <icmp_input+0x220>
        goto icmperr;
 801627a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801627c:	6878      	ldr	r0, [r7, #4]
 801627e:	f7f9 fe3d 	bl	800fefc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016282:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016284:	3728      	adds	r7, #40	; 0x28
 8016286:	46bd      	mov	sp, r7
 8016288:	bd80      	pop	{r7, pc}
 801628a:	bf00      	nop
 801628c:	24021c54 	.word	0x24021c54
 8016290:	24021c68 	.word	0x24021c68
 8016294:	0801a48c 	.word	0x0801a48c
 8016298:	0801a4c4 	.word	0x0801a4c4
 801629c:	0801a4fc 	.word	0x0801a4fc
 80162a0:	0801a524 	.word	0x0801a524

080162a4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80162a4:	b580      	push	{r7, lr}
 80162a6:	b082      	sub	sp, #8
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	6078      	str	r0, [r7, #4]
 80162ac:	460b      	mov	r3, r1
 80162ae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80162b0:	78fb      	ldrb	r3, [r7, #3]
 80162b2:	461a      	mov	r2, r3
 80162b4:	2103      	movs	r1, #3
 80162b6:	6878      	ldr	r0, [r7, #4]
 80162b8:	f000 f814 	bl	80162e4 <icmp_send_response>
}
 80162bc:	bf00      	nop
 80162be:	3708      	adds	r7, #8
 80162c0:	46bd      	mov	sp, r7
 80162c2:	bd80      	pop	{r7, pc}

080162c4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80162c4:	b580      	push	{r7, lr}
 80162c6:	b082      	sub	sp, #8
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	6078      	str	r0, [r7, #4]
 80162cc:	460b      	mov	r3, r1
 80162ce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80162d0:	78fb      	ldrb	r3, [r7, #3]
 80162d2:	461a      	mov	r2, r3
 80162d4:	210b      	movs	r1, #11
 80162d6:	6878      	ldr	r0, [r7, #4]
 80162d8:	f000 f804 	bl	80162e4 <icmp_send_response>
}
 80162dc:	bf00      	nop
 80162de:	3708      	adds	r7, #8
 80162e0:	46bd      	mov	sp, r7
 80162e2:	bd80      	pop	{r7, pc}

080162e4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80162e4:	b580      	push	{r7, lr}
 80162e6:	b08c      	sub	sp, #48	; 0x30
 80162e8:	af04      	add	r7, sp, #16
 80162ea:	6078      	str	r0, [r7, #4]
 80162ec:	460b      	mov	r3, r1
 80162ee:	70fb      	strb	r3, [r7, #3]
 80162f0:	4613      	mov	r3, r2
 80162f2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80162f4:	2200      	movs	r2, #0
 80162f6:	2124      	movs	r1, #36	; 0x24
 80162f8:	2001      	movs	r0, #1
 80162fa:	f7f9 fa8d 	bl	800f818 <pbuf_alloc>
 80162fe:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016300:	69fb      	ldr	r3, [r7, #28]
 8016302:	2b00      	cmp	r3, #0
 8016304:	d056      	beq.n	80163b4 <icmp_send_response+0xd0>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016306:	69fb      	ldr	r3, [r7, #28]
 8016308:	895b      	ldrh	r3, [r3, #10]
 801630a:	2b23      	cmp	r3, #35	; 0x23
 801630c:	d806      	bhi.n	801631c <icmp_send_response+0x38>
 801630e:	4b2b      	ldr	r3, [pc, #172]	; (80163bc <icmp_send_response+0xd8>)
 8016310:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8016314:	492a      	ldr	r1, [pc, #168]	; (80163c0 <icmp_send_response+0xdc>)
 8016316:	482b      	ldr	r0, [pc, #172]	; (80163c4 <icmp_send_response+0xe0>)
 8016318:	f001 fb3c 	bl	8017994 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	685b      	ldr	r3, [r3, #4]
 8016320:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016322:	69fb      	ldr	r3, [r7, #28]
 8016324:	685b      	ldr	r3, [r3, #4]
 8016326:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016328:	697b      	ldr	r3, [r7, #20]
 801632a:	78fa      	ldrb	r2, [r7, #3]
 801632c:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801632e:	697b      	ldr	r3, [r7, #20]
 8016330:	78ba      	ldrb	r2, [r7, #2]
 8016332:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016334:	697b      	ldr	r3, [r7, #20]
 8016336:	2200      	movs	r2, #0
 8016338:	711a      	strb	r2, [r3, #4]
 801633a:	2200      	movs	r2, #0
 801633c:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801633e:	697b      	ldr	r3, [r7, #20]
 8016340:	2200      	movs	r2, #0
 8016342:	719a      	strb	r2, [r3, #6]
 8016344:	2200      	movs	r2, #0
 8016346:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016348:	69fb      	ldr	r3, [r7, #28]
 801634a:	685b      	ldr	r3, [r3, #4]
 801634c:	f103 0008 	add.w	r0, r3, #8
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	685b      	ldr	r3, [r3, #4]
 8016354:	221c      	movs	r2, #28
 8016356:	4619      	mov	r1, r3
 8016358:	f001 fb09 	bl	801796e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801635c:	69bb      	ldr	r3, [r7, #24]
 801635e:	68db      	ldr	r3, [r3, #12]
 8016360:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016362:	f107 030c 	add.w	r3, r7, #12
 8016366:	4618      	mov	r0, r3
 8016368:	f000 f82e 	bl	80163c8 <ip4_route>
 801636c:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801636e:	693b      	ldr	r3, [r7, #16]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d01b      	beq.n	80163ac <icmp_send_response+0xc8>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016374:	697b      	ldr	r3, [r7, #20]
 8016376:	2200      	movs	r2, #0
 8016378:	709a      	strb	r2, [r3, #2]
 801637a:	2200      	movs	r2, #0
 801637c:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801637e:	69fb      	ldr	r3, [r7, #28]
 8016380:	895b      	ldrh	r3, [r3, #10]
 8016382:	4619      	mov	r1, r3
 8016384:	6978      	ldr	r0, [r7, #20]
 8016386:	f7f8 fb25 	bl	800e9d4 <inet_chksum>
 801638a:	4603      	mov	r3, r0
 801638c:	461a      	mov	r2, r3
 801638e:	697b      	ldr	r3, [r7, #20]
 8016390:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016392:	f107 020c 	add.w	r2, r7, #12
 8016396:	693b      	ldr	r3, [r7, #16]
 8016398:	9302      	str	r3, [sp, #8]
 801639a:	2301      	movs	r3, #1
 801639c:	9301      	str	r3, [sp, #4]
 801639e:	2300      	movs	r3, #0
 80163a0:	9300      	str	r3, [sp, #0]
 80163a2:	23ff      	movs	r3, #255	; 0xff
 80163a4:	2100      	movs	r1, #0
 80163a6:	69f8      	ldr	r0, [r7, #28]
 80163a8:	f000 f9c6 	bl	8016738 <ip4_output_if>
  }
  pbuf_free(q);
 80163ac:	69f8      	ldr	r0, [r7, #28]
 80163ae:	f7f9 fda5 	bl	800fefc <pbuf_free>
 80163b2:	e000      	b.n	80163b6 <icmp_send_response+0xd2>
    return;
 80163b4:	bf00      	nop
}
 80163b6:	3720      	adds	r7, #32
 80163b8:	46bd      	mov	sp, r7
 80163ba:	bd80      	pop	{r7, pc}
 80163bc:	0801a48c 	.word	0x0801a48c
 80163c0:	0801a558 	.word	0x0801a558
 80163c4:	0801a4fc 	.word	0x0801a4fc

080163c8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80163c8:	b480      	push	{r7}
 80163ca:	b085      	sub	sp, #20
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	6078      	str	r0, [r7, #4]
  struct netif *netif;

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80163d8:	2be0      	cmp	r3, #224	; 0xe0
 80163da:	d106      	bne.n	80163ea <ip4_route+0x22>
 80163dc:	4b34      	ldr	r3, [pc, #208]	; (80164b0 <ip4_route+0xe8>)
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d002      	beq.n	80163ea <ip4_route+0x22>
    return ip4_default_multicast_netif;
 80163e4:	4b32      	ldr	r3, [pc, #200]	; (80164b0 <ip4_route+0xe8>)
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	e05b      	b.n	80164a2 <ip4_route+0xda>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80163ea:	4b32      	ldr	r3, [pc, #200]	; (80164b4 <ip4_route+0xec>)
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	60fb      	str	r3, [r7, #12]
 80163f0:	e036      	b.n	8016460 <ip4_route+0x98>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80163f8:	f003 0301 	and.w	r3, r3, #1
 80163fc:	b2db      	uxtb	r3, r3
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d02b      	beq.n	801645a <ip4_route+0x92>
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8016408:	089b      	lsrs	r3, r3, #2
 801640a:	f003 0301 	and.w	r3, r3, #1
 801640e:	b2db      	uxtb	r3, r3
 8016410:	2b00      	cmp	r3, #0
 8016412:	d022      	beq.n	801645a <ip4_route+0x92>
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	3304      	adds	r3, #4
 8016418:	681b      	ldr	r3, [r3, #0]
 801641a:	2b00      	cmp	r3, #0
 801641c:	d01d      	beq.n	801645a <ip4_route+0x92>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	681a      	ldr	r2, [r3, #0]
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	3304      	adds	r3, #4
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	405a      	eors	r2, r3
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	3308      	adds	r3, #8
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	4013      	ands	r3, r2
 8016432:	2b00      	cmp	r3, #0
 8016434:	d101      	bne.n	801643a <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	e033      	b.n	80164a2 <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8016440:	f003 0302 	and.w	r3, r3, #2
 8016444:	2b00      	cmp	r3, #0
 8016446:	d108      	bne.n	801645a <ip4_route+0x92>
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	681a      	ldr	r2, [r3, #0]
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	330c      	adds	r3, #12
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	429a      	cmp	r2, r3
 8016454:	d101      	bne.n	801645a <ip4_route+0x92>
        /* return netif on which to forward IP packet */
        return netif;
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	e023      	b.n	80164a2 <ip4_route+0xda>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	60fb      	str	r3, [r7, #12]
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d1c5      	bne.n	80163f2 <ip4_route+0x2a>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016466:	4b14      	ldr	r3, [pc, #80]	; (80164b8 <ip4_route+0xf0>)
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d015      	beq.n	801649a <ip4_route+0xd2>
 801646e:	4b12      	ldr	r3, [pc, #72]	; (80164b8 <ip4_route+0xf0>)
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8016476:	f003 0301 	and.w	r3, r3, #1
 801647a:	2b00      	cmp	r3, #0
 801647c:	d00d      	beq.n	801649a <ip4_route+0xd2>
 801647e:	4b0e      	ldr	r3, [pc, #56]	; (80164b8 <ip4_route+0xf0>)
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8016486:	f003 0304 	and.w	r3, r3, #4
 801648a:	2b00      	cmp	r3, #0
 801648c:	d005      	beq.n	801649a <ip4_route+0xd2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 801648e:	4b0a      	ldr	r3, [pc, #40]	; (80164b8 <ip4_route+0xf0>)
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	3304      	adds	r3, #4
 8016494:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016496:	2b00      	cmp	r3, #0
 8016498:	d101      	bne.n	801649e <ip4_route+0xd6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801649a:	2300      	movs	r3, #0
 801649c:	e001      	b.n	80164a2 <ip4_route+0xda>
  }

  return netif_default;
 801649e:	4b06      	ldr	r3, [pc, #24]	; (80164b8 <ip4_route+0xf0>)
 80164a0:	681b      	ldr	r3, [r3, #0]
}
 80164a2:	4618      	mov	r0, r3
 80164a4:	3714      	adds	r7, #20
 80164a6:	46bd      	mov	sp, r7
 80164a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ac:	4770      	bx	lr
 80164ae:	bf00      	nop
 80164b0:	24021934 	.word	0x24021934
 80164b4:	24024e3c 	.word	0x24024e3c
 80164b8:	24024e40 	.word	0x24024e40

080164bc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80164bc:	b580      	push	{r7, lr}
 80164be:	b086      	sub	sp, #24
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	6078      	str	r0, [r7, #4]
 80164c4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	685b      	ldr	r3, [r3, #4]
 80164ca:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80164cc:	697b      	ldr	r3, [r7, #20]
 80164ce:	781b      	ldrb	r3, [r3, #0]
 80164d0:	091b      	lsrs	r3, r3, #4
 80164d2:	b2db      	uxtb	r3, r3
 80164d4:	2b04      	cmp	r3, #4
 80164d6:	d004      	beq.n	80164e2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80164d8:	6878      	ldr	r0, [r7, #4]
 80164da:	f7f9 fd0f 	bl	800fefc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80164de:	2300      	movs	r3, #0
 80164e0:	e122      	b.n	8016728 <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 80164e2:	697b      	ldr	r3, [r7, #20]
 80164e4:	781b      	ldrb	r3, [r3, #0]
 80164e6:	b29b      	uxth	r3, r3
 80164e8:	f003 030f 	and.w	r3, r3, #15
 80164ec:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 80164ee:	897b      	ldrh	r3, [r7, #10]
 80164f0:	009b      	lsls	r3, r3, #2
 80164f2:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80164f4:	697b      	ldr	r3, [r7, #20]
 80164f6:	885b      	ldrh	r3, [r3, #2]
 80164f8:	b29b      	uxth	r3, r3
 80164fa:	4618      	mov	r0, r3
 80164fc:	f7f8 f9e6 	bl	800e8cc <lwip_htons>
 8016500:	4603      	mov	r3, r0
 8016502:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	891b      	ldrh	r3, [r3, #8]
 8016508:	893a      	ldrh	r2, [r7, #8]
 801650a:	429a      	cmp	r2, r3
 801650c:	d204      	bcs.n	8016518 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 801650e:	893b      	ldrh	r3, [r7, #8]
 8016510:	4619      	mov	r1, r3
 8016512:	6878      	ldr	r0, [r7, #4]
 8016514:	f7f9 fb7e 	bl	800fc14 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	895b      	ldrh	r3, [r3, #10]
 801651c:	897a      	ldrh	r2, [r7, #10]
 801651e:	429a      	cmp	r2, r3
 8016520:	d807      	bhi.n	8016532 <ip4_input+0x76>
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	891b      	ldrh	r3, [r3, #8]
 8016526:	893a      	ldrh	r2, [r7, #8]
 8016528:	429a      	cmp	r2, r3
 801652a:	d802      	bhi.n	8016532 <ip4_input+0x76>
 801652c:	897b      	ldrh	r3, [r7, #10]
 801652e:	2b13      	cmp	r3, #19
 8016530:	d804      	bhi.n	801653c <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016532:	6878      	ldr	r0, [r7, #4]
 8016534:	f7f9 fce2 	bl	800fefc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016538:	2300      	movs	r3, #0
 801653a:	e0f5      	b.n	8016728 <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801653c:	697b      	ldr	r3, [r7, #20]
 801653e:	691b      	ldr	r3, [r3, #16]
 8016540:	4a7b      	ldr	r2, [pc, #492]	; (8016730 <ip4_input+0x274>)
 8016542:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016544:	697b      	ldr	r3, [r7, #20]
 8016546:	68db      	ldr	r3, [r3, #12]
 8016548:	4a79      	ldr	r2, [pc, #484]	; (8016730 <ip4_input+0x274>)
 801654a:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801654c:	4b78      	ldr	r3, [pc, #480]	; (8016730 <ip4_input+0x274>)
 801654e:	695b      	ldr	r3, [r3, #20]
 8016550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016554:	2be0      	cmp	r3, #224	; 0xe0
 8016556:	d112      	bne.n	801657e <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016558:	683b      	ldr	r3, [r7, #0]
 801655a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 801655e:	f003 0301 	and.w	r3, r3, #1
 8016562:	b2db      	uxtb	r3, r3
 8016564:	2b00      	cmp	r3, #0
 8016566:	d007      	beq.n	8016578 <ip4_input+0xbc>
 8016568:	683b      	ldr	r3, [r7, #0]
 801656a:	3304      	adds	r3, #4
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	2b00      	cmp	r3, #0
 8016570:	d002      	beq.n	8016578 <ip4_input+0xbc>
      netif = inp;
 8016572:	683b      	ldr	r3, [r7, #0]
 8016574:	613b      	str	r3, [r7, #16]
 8016576:	e041      	b.n	80165fc <ip4_input+0x140>
    } else {
      netif = NULL;
 8016578:	2300      	movs	r3, #0
 801657a:	613b      	str	r3, [r7, #16]
 801657c:	e03e      	b.n	80165fc <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 801657e:	2301      	movs	r3, #1
 8016580:	60fb      	str	r3, [r7, #12]
    netif = inp;
 8016582:	683b      	ldr	r3, [r7, #0]
 8016584:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016586:	693b      	ldr	r3, [r7, #16]
 8016588:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 801658c:	f003 0301 	and.w	r3, r3, #1
 8016590:	b2db      	uxtb	r3, r3
 8016592:	2b00      	cmp	r3, #0
 8016594:	d014      	beq.n	80165c0 <ip4_input+0x104>
 8016596:	693b      	ldr	r3, [r7, #16]
 8016598:	3304      	adds	r3, #4
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	2b00      	cmp	r3, #0
 801659e:	d00f      	beq.n	80165c0 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80165a0:	4b63      	ldr	r3, [pc, #396]	; (8016730 <ip4_input+0x274>)
 80165a2:	695a      	ldr	r2, [r3, #20]
 80165a4:	693b      	ldr	r3, [r7, #16]
 80165a6:	3304      	adds	r3, #4
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	429a      	cmp	r2, r3
 80165ac:	d026      	beq.n	80165fc <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80165ae:	4b60      	ldr	r3, [pc, #384]	; (8016730 <ip4_input+0x274>)
 80165b0:	695b      	ldr	r3, [r3, #20]
 80165b2:	6939      	ldr	r1, [r7, #16]
 80165b4:	4618      	mov	r0, r3
 80165b6:	f000 f991 	bl	80168dc <ip4_addr_isbroadcast_u32>
 80165ba:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d11d      	bne.n	80165fc <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d00d      	beq.n	80165e2 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 80165c6:	4b5a      	ldr	r3, [pc, #360]	; (8016730 <ip4_input+0x274>)
 80165c8:	695b      	ldr	r3, [r3, #20]
 80165ca:	b2db      	uxtb	r3, r3
 80165cc:	2b7f      	cmp	r3, #127	; 0x7f
 80165ce:	d102      	bne.n	80165d6 <ip4_input+0x11a>
          netif = NULL;
 80165d0:	2300      	movs	r3, #0
 80165d2:	613b      	str	r3, [r7, #16]
          break;
 80165d4:	e012      	b.n	80165fc <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 80165d6:	2300      	movs	r3, #0
 80165d8:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 80165da:	4b56      	ldr	r3, [pc, #344]	; (8016734 <ip4_input+0x278>)
 80165dc:	681b      	ldr	r3, [r3, #0]
 80165de:	613b      	str	r3, [r7, #16]
 80165e0:	e002      	b.n	80165e8 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 80165e2:	693b      	ldr	r3, [r7, #16]
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 80165e8:	693a      	ldr	r2, [r7, #16]
 80165ea:	683b      	ldr	r3, [r7, #0]
 80165ec:	429a      	cmp	r2, r3
 80165ee:	d102      	bne.n	80165f6 <ip4_input+0x13a>
        netif = netif->next;
 80165f0:	693b      	ldr	r3, [r7, #16]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 80165f6:	693b      	ldr	r3, [r7, #16]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d1c4      	bne.n	8016586 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80165fc:	4b4c      	ldr	r3, [pc, #304]	; (8016730 <ip4_input+0x274>)
 80165fe:	691b      	ldr	r3, [r3, #16]
 8016600:	6839      	ldr	r1, [r7, #0]
 8016602:	4618      	mov	r0, r3
 8016604:	f000 f96a 	bl	80168dc <ip4_addr_isbroadcast_u32>
 8016608:	4603      	mov	r3, r0
 801660a:	2b00      	cmp	r3, #0
 801660c:	d105      	bne.n	801661a <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801660e:	4b48      	ldr	r3, [pc, #288]	; (8016730 <ip4_input+0x274>)
 8016610:	691b      	ldr	r3, [r3, #16]
 8016612:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016616:	2be0      	cmp	r3, #224	; 0xe0
 8016618:	d104      	bne.n	8016624 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801661a:	6878      	ldr	r0, [r7, #4]
 801661c:	f7f9 fc6e 	bl	800fefc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016620:	2300      	movs	r3, #0
 8016622:	e081      	b.n	8016728 <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016624:	693b      	ldr	r3, [r7, #16]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d104      	bne.n	8016634 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801662a:	6878      	ldr	r0, [r7, #4]
 801662c:	f7f9 fc66 	bl	800fefc <pbuf_free>
    return ERR_OK;
 8016630:	2300      	movs	r3, #0
 8016632:	e079      	b.n	8016728 <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016634:	697b      	ldr	r3, [r7, #20]
 8016636:	88db      	ldrh	r3, [r3, #6]
 8016638:	b29b      	uxth	r3, r3
 801663a:	461a      	mov	r2, r3
 801663c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016640:	4013      	ands	r3, r2
 8016642:	2b00      	cmp	r3, #0
 8016644:	d00b      	beq.n	801665e <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016646:	6878      	ldr	r0, [r7, #4]
 8016648:	f000 fc8e 	bl	8016f68 <ip4_reass>
 801664c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d101      	bne.n	8016658 <ip4_input+0x19c>
      return ERR_OK;
 8016654:	2300      	movs	r3, #0
 8016656:	e067      	b.n	8016728 <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	685b      	ldr	r3, [r3, #4]
 801665c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801665e:	4a34      	ldr	r2, [pc, #208]	; (8016730 <ip4_input+0x274>)
 8016660:	693b      	ldr	r3, [r7, #16]
 8016662:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016664:	4a32      	ldr	r2, [pc, #200]	; (8016730 <ip4_input+0x274>)
 8016666:	683b      	ldr	r3, [r7, #0]
 8016668:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801666a:	4a31      	ldr	r2, [pc, #196]	; (8016730 <ip4_input+0x274>)
 801666c:	697b      	ldr	r3, [r7, #20]
 801666e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8016670:	697b      	ldr	r3, [r7, #20]
 8016672:	781b      	ldrb	r3, [r3, #0]
 8016674:	b29b      	uxth	r3, r3
 8016676:	f003 030f 	and.w	r3, r3, #15
 801667a:	b29b      	uxth	r3, r3
 801667c:	009b      	lsls	r3, r3, #2
 801667e:	b29a      	uxth	r2, r3
 8016680:	4b2b      	ldr	r3, [pc, #172]	; (8016730 <ip4_input+0x274>)
 8016682:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8016684:	897b      	ldrh	r3, [r7, #10]
 8016686:	425b      	negs	r3, r3
 8016688:	b29b      	uxth	r3, r3
 801668a:	b21b      	sxth	r3, r3
 801668c:	4619      	mov	r1, r3
 801668e:	6878      	ldr	r0, [r7, #4]
 8016690:	f7f9 fc10 	bl	800feb4 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8016694:	697b      	ldr	r3, [r7, #20]
 8016696:	7a5b      	ldrb	r3, [r3, #9]
 8016698:	2b06      	cmp	r3, #6
 801669a:	d009      	beq.n	80166b0 <ip4_input+0x1f4>
 801669c:	2b11      	cmp	r3, #17
 801669e:	d002      	beq.n	80166a6 <ip4_input+0x1ea>
 80166a0:	2b01      	cmp	r3, #1
 80166a2:	d00a      	beq.n	80166ba <ip4_input+0x1fe>
 80166a4:	e00e      	b.n	80166c4 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 80166a6:	6839      	ldr	r1, [r7, #0]
 80166a8:	6878      	ldr	r0, [r7, #4]
 80166aa:	f7fe fbef 	bl	8014e8c <udp_input>
      break;
 80166ae:	e028      	b.n	8016702 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 80166b0:	6839      	ldr	r1, [r7, #0]
 80166b2:	6878      	ldr	r0, [r7, #4]
 80166b4:	f7fb f876 	bl	80117a4 <tcp_input>
      break;
 80166b8:	e023      	b.n	8016702 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 80166ba:	6839      	ldr	r1, [r7, #0]
 80166bc:	6878      	ldr	r0, [r7, #4]
 80166be:	f7ff fcd1 	bl	8016064 <icmp_input>
      break;
 80166c2:	e01e      	b.n	8016702 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80166c4:	4b1a      	ldr	r3, [pc, #104]	; (8016730 <ip4_input+0x274>)
 80166c6:	695b      	ldr	r3, [r3, #20]
 80166c8:	6939      	ldr	r1, [r7, #16]
 80166ca:	4618      	mov	r0, r3
 80166cc:	f000 f906 	bl	80168dc <ip4_addr_isbroadcast_u32>
 80166d0:	4603      	mov	r3, r0
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d112      	bne.n	80166fc <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80166d6:	4b16      	ldr	r3, [pc, #88]	; (8016730 <ip4_input+0x274>)
 80166d8:	695b      	ldr	r3, [r3, #20]
 80166da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80166de:	2be0      	cmp	r3, #224	; 0xe0
 80166e0:	d00c      	beq.n	80166fc <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 80166e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80166e6:	4619      	mov	r1, r3
 80166e8:	6878      	ldr	r0, [r7, #4]
 80166ea:	f7f9 fbf5 	bl	800fed8 <pbuf_header_force>
        p->payload = iphdr;
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	697a      	ldr	r2, [r7, #20]
 80166f2:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80166f4:	2102      	movs	r1, #2
 80166f6:	6878      	ldr	r0, [r7, #4]
 80166f8:	f7ff fdd4 	bl	80162a4 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 80166fc:	6878      	ldr	r0, [r7, #4]
 80166fe:	f7f9 fbfd 	bl	800fefc <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016702:	4b0b      	ldr	r3, [pc, #44]	; (8016730 <ip4_input+0x274>)
 8016704:	2200      	movs	r2, #0
 8016706:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016708:	4b09      	ldr	r3, [pc, #36]	; (8016730 <ip4_input+0x274>)
 801670a:	2200      	movs	r2, #0
 801670c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801670e:	4b08      	ldr	r3, [pc, #32]	; (8016730 <ip4_input+0x274>)
 8016710:	2200      	movs	r2, #0
 8016712:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016714:	4b06      	ldr	r3, [pc, #24]	; (8016730 <ip4_input+0x274>)
 8016716:	2200      	movs	r2, #0
 8016718:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801671a:	4b05      	ldr	r3, [pc, #20]	; (8016730 <ip4_input+0x274>)
 801671c:	2200      	movs	r2, #0
 801671e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016720:	4b03      	ldr	r3, [pc, #12]	; (8016730 <ip4_input+0x274>)
 8016722:	2200      	movs	r2, #0
 8016724:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016726:	2300      	movs	r3, #0
}
 8016728:	4618      	mov	r0, r3
 801672a:	3718      	adds	r7, #24
 801672c:	46bd      	mov	sp, r7
 801672e:	bd80      	pop	{r7, pc}
 8016730:	24021c54 	.word	0x24021c54
 8016734:	24024e3c 	.word	0x24024e3c

08016738 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b08a      	sub	sp, #40	; 0x28
 801673c:	af04      	add	r7, sp, #16
 801673e:	60f8      	str	r0, [r7, #12]
 8016740:	60b9      	str	r1, [r7, #8]
 8016742:	607a      	str	r2, [r7, #4]
 8016744:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016746:	68bb      	ldr	r3, [r7, #8]
 8016748:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	2b00      	cmp	r3, #0
 801674e:	d009      	beq.n	8016764 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016750:	68bb      	ldr	r3, [r7, #8]
 8016752:	2b00      	cmp	r3, #0
 8016754:	d003      	beq.n	801675e <ip4_output_if+0x26>
 8016756:	68bb      	ldr	r3, [r7, #8]
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	2b00      	cmp	r3, #0
 801675c:	d102      	bne.n	8016764 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801675e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016760:	3304      	adds	r3, #4
 8016762:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016764:	78fa      	ldrb	r2, [r7, #3]
 8016766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016768:	9302      	str	r3, [sp, #8]
 801676a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801676e:	9301      	str	r3, [sp, #4]
 8016770:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016774:	9300      	str	r3, [sp, #0]
 8016776:	4613      	mov	r3, r2
 8016778:	687a      	ldr	r2, [r7, #4]
 801677a:	6979      	ldr	r1, [r7, #20]
 801677c:	68f8      	ldr	r0, [r7, #12]
 801677e:	f000 f805 	bl	801678c <ip4_output_if_src>
 8016782:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016784:	4618      	mov	r0, r3
 8016786:	3718      	adds	r7, #24
 8016788:	46bd      	mov	sp, r7
 801678a:	bd80      	pop	{r7, pc}

0801678c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b088      	sub	sp, #32
 8016790:	af00      	add	r7, sp, #0
 8016792:	60f8      	str	r0, [r7, #12]
 8016794:	60b9      	str	r1, [r7, #8]
 8016796:	607a      	str	r2, [r7, #4]
 8016798:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	89db      	ldrh	r3, [r3, #14]
 801679e:	2b01      	cmp	r3, #1
 80167a0:	d006      	beq.n	80167b0 <ip4_output_if_src+0x24>
 80167a2:	4b48      	ldr	r3, [pc, #288]	; (80168c4 <ip4_output_if_src+0x138>)
 80167a4:	f240 3233 	movw	r2, #819	; 0x333
 80167a8:	4947      	ldr	r1, [pc, #284]	; (80168c8 <ip4_output_if_src+0x13c>)
 80167aa:	4848      	ldr	r0, [pc, #288]	; (80168cc <ip4_output_if_src+0x140>)
 80167ac:	f001 f8f2 	bl	8017994 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d060      	beq.n	8016878 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80167b6:	2314      	movs	r3, #20
 80167b8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 80167ba:	2114      	movs	r1, #20
 80167bc:	68f8      	ldr	r0, [r7, #12]
 80167be:	f7f9 fb79 	bl	800feb4 <pbuf_header>
 80167c2:	4603      	mov	r3, r0
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d002      	beq.n	80167ce <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80167c8:	f06f 0301 	mvn.w	r3, #1
 80167cc:	e075      	b.n	80168ba <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	685b      	ldr	r3, [r3, #4]
 80167d2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	895b      	ldrh	r3, [r3, #10]
 80167d8:	2b13      	cmp	r3, #19
 80167da:	d806      	bhi.n	80167ea <ip4_output_if_src+0x5e>
 80167dc:	4b39      	ldr	r3, [pc, #228]	; (80168c4 <ip4_output_if_src+0x138>)
 80167de:	f240 3261 	movw	r2, #865	; 0x361
 80167e2:	493b      	ldr	r1, [pc, #236]	; (80168d0 <ip4_output_if_src+0x144>)
 80167e4:	4839      	ldr	r0, [pc, #228]	; (80168cc <ip4_output_if_src+0x140>)
 80167e6:	f001 f8d5 	bl	8017994 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80167ea:	69fb      	ldr	r3, [r7, #28]
 80167ec:	78fa      	ldrb	r2, [r7, #3]
 80167ee:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80167f0:	69fb      	ldr	r3, [r7, #28]
 80167f2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80167f6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	681a      	ldr	r2, [r3, #0]
 80167fc:	69fb      	ldr	r3, [r7, #28]
 80167fe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016800:	8b7b      	ldrh	r3, [r7, #26]
 8016802:	089b      	lsrs	r3, r3, #2
 8016804:	b29b      	uxth	r3, r3
 8016806:	b2db      	uxtb	r3, r3
 8016808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801680c:	b2da      	uxtb	r2, r3
 801680e:	69fb      	ldr	r3, [r7, #28]
 8016810:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016812:	69fb      	ldr	r3, [r7, #28]
 8016814:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016818:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	891b      	ldrh	r3, [r3, #8]
 801681e:	4618      	mov	r0, r3
 8016820:	f7f8 f854 	bl	800e8cc <lwip_htons>
 8016824:	4603      	mov	r3, r0
 8016826:	461a      	mov	r2, r3
 8016828:	69fb      	ldr	r3, [r7, #28]
 801682a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801682c:	69fb      	ldr	r3, [r7, #28]
 801682e:	2200      	movs	r2, #0
 8016830:	719a      	strb	r2, [r3, #6]
 8016832:	2200      	movs	r2, #0
 8016834:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016836:	4b27      	ldr	r3, [pc, #156]	; (80168d4 <ip4_output_if_src+0x148>)
 8016838:	881b      	ldrh	r3, [r3, #0]
 801683a:	4618      	mov	r0, r3
 801683c:	f7f8 f846 	bl	800e8cc <lwip_htons>
 8016840:	4603      	mov	r3, r0
 8016842:	461a      	mov	r2, r3
 8016844:	69fb      	ldr	r3, [r7, #28]
 8016846:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016848:	4b22      	ldr	r3, [pc, #136]	; (80168d4 <ip4_output_if_src+0x148>)
 801684a:	881b      	ldrh	r3, [r3, #0]
 801684c:	3301      	adds	r3, #1
 801684e:	b29a      	uxth	r2, r3
 8016850:	4b20      	ldr	r3, [pc, #128]	; (80168d4 <ip4_output_if_src+0x148>)
 8016852:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016854:	68bb      	ldr	r3, [r7, #8]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d104      	bne.n	8016864 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801685a:	4b1f      	ldr	r3, [pc, #124]	; (80168d8 <ip4_output_if_src+0x14c>)
 801685c:	681a      	ldr	r2, [r3, #0]
 801685e:	69fb      	ldr	r3, [r7, #28]
 8016860:	60da      	str	r2, [r3, #12]
 8016862:	e003      	b.n	801686c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016864:	68bb      	ldr	r3, [r7, #8]
 8016866:	681a      	ldr	r2, [r3, #0]
 8016868:	69fb      	ldr	r3, [r7, #28]
 801686a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801686c:	69fb      	ldr	r3, [r7, #28]
 801686e:	2200      	movs	r2, #0
 8016870:	729a      	strb	r2, [r3, #10]
 8016872:	2200      	movs	r2, #0
 8016874:	72da      	strb	r2, [r3, #11]
 8016876:	e008      	b.n	801688a <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	685b      	ldr	r3, [r3, #4]
 801687c:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801687e:	69fb      	ldr	r3, [r7, #28]
 8016880:	691b      	ldr	r3, [r3, #16]
 8016882:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016884:	f107 0314 	add.w	r3, r7, #20
 8016888:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801688a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801688c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801688e:	2b00      	cmp	r3, #0
 8016890:	d00c      	beq.n	80168ac <ip4_output_if_src+0x120>
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	891a      	ldrh	r2, [r3, #8]
 8016896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016898:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801689a:	429a      	cmp	r2, r3
 801689c:	d906      	bls.n	80168ac <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 801689e:	687a      	ldr	r2, [r7, #4]
 80168a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80168a2:	68f8      	ldr	r0, [r7, #12]
 80168a4:	f000 fd0a 	bl	80172bc <ip4_frag>
 80168a8:	4603      	mov	r3, r0
 80168aa:	e006      	b.n	80168ba <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80168ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ae:	695b      	ldr	r3, [r3, #20]
 80168b0:	687a      	ldr	r2, [r7, #4]
 80168b2:	68f9      	ldr	r1, [r7, #12]
 80168b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80168b6:	4798      	blx	r3
 80168b8:	4603      	mov	r3, r0
}
 80168ba:	4618      	mov	r0, r3
 80168bc:	3720      	adds	r7, #32
 80168be:	46bd      	mov	sp, r7
 80168c0:	bd80      	pop	{r7, pc}
 80168c2:	bf00      	nop
 80168c4:	0801a584 	.word	0x0801a584
 80168c8:	0801a5b8 	.word	0x0801a5b8
 80168cc:	0801a5c4 	.word	0x0801a5c4
 80168d0:	0801a5ec 	.word	0x0801a5ec
 80168d4:	24021932 	.word	0x24021932
 80168d8:	0801a9dc 	.word	0x0801a9dc

080168dc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80168dc:	b480      	push	{r7}
 80168de:	b085      	sub	sp, #20
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]
 80168e4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168f0:	d002      	beq.n	80168f8 <ip4_addr_isbroadcast_u32+0x1c>
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d101      	bne.n	80168fc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80168f8:	2301      	movs	r3, #1
 80168fa:	e02a      	b.n	8016952 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80168fc:	683b      	ldr	r3, [r7, #0]
 80168fe:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8016902:	f003 0302 	and.w	r3, r3, #2
 8016906:	2b00      	cmp	r3, #0
 8016908:	d101      	bne.n	801690e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801690a:	2300      	movs	r3, #0
 801690c:	e021      	b.n	8016952 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801690e:	683b      	ldr	r3, [r7, #0]
 8016910:	3304      	adds	r3, #4
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	687a      	ldr	r2, [r7, #4]
 8016916:	429a      	cmp	r2, r3
 8016918:	d101      	bne.n	801691e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801691a:	2300      	movs	r3, #0
 801691c:	e019      	b.n	8016952 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801691e:	68fa      	ldr	r2, [r7, #12]
 8016920:	683b      	ldr	r3, [r7, #0]
 8016922:	3304      	adds	r3, #4
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	405a      	eors	r2, r3
 8016928:	683b      	ldr	r3, [r7, #0]
 801692a:	3308      	adds	r3, #8
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	4013      	ands	r3, r2
 8016930:	2b00      	cmp	r3, #0
 8016932:	d10d      	bne.n	8016950 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016934:	683b      	ldr	r3, [r7, #0]
 8016936:	3308      	adds	r3, #8
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	43da      	mvns	r2, r3
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016940:	683b      	ldr	r3, [r7, #0]
 8016942:	3308      	adds	r3, #8
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016948:	429a      	cmp	r2, r3
 801694a:	d101      	bne.n	8016950 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801694c:	2301      	movs	r3, #1
 801694e:	e000      	b.n	8016952 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016950:	2300      	movs	r3, #0
  }
}
 8016952:	4618      	mov	r0, r3
 8016954:	3714      	adds	r7, #20
 8016956:	46bd      	mov	sp, r7
 8016958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801695c:	4770      	bx	lr
	...

08016960 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016960:	b580      	push	{r7, lr}
 8016962:	b084      	sub	sp, #16
 8016964:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016966:	2300      	movs	r3, #0
 8016968:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801696a:	4b12      	ldr	r3, [pc, #72]	; (80169b4 <ip_reass_tmr+0x54>)
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016970:	e018      	b.n	80169a4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	7fdb      	ldrb	r3, [r3, #31]
 8016976:	2b00      	cmp	r3, #0
 8016978:	d00b      	beq.n	8016992 <ip_reass_tmr+0x32>
      r->timer--;
 801697a:	68fb      	ldr	r3, [r7, #12]
 801697c:	7fdb      	ldrb	r3, [r3, #31]
 801697e:	3b01      	subs	r3, #1
 8016980:	b2da      	uxtb	r2, r3
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	60fb      	str	r3, [r7, #12]
 8016990:	e008      	b.n	80169a4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801699c:	68b9      	ldr	r1, [r7, #8]
 801699e:	6878      	ldr	r0, [r7, #4]
 80169a0:	f000 f80a 	bl	80169b8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d1e3      	bne.n	8016972 <ip_reass_tmr+0x12>
     }
   }
}
 80169aa:	bf00      	nop
 80169ac:	3710      	adds	r7, #16
 80169ae:	46bd      	mov	sp, r7
 80169b0:	bd80      	pop	{r7, pc}
 80169b2:	bf00      	nop
 80169b4:	24021938 	.word	0x24021938

080169b8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80169b8:	b580      	push	{r7, lr}
 80169ba:	b088      	sub	sp, #32
 80169bc:	af00      	add	r7, sp, #0
 80169be:	6078      	str	r0, [r7, #4]
 80169c0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80169c2:	2300      	movs	r3, #0
 80169c4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80169c6:	683a      	ldr	r2, [r7, #0]
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	429a      	cmp	r2, r3
 80169cc:	d105      	bne.n	80169da <ip_reass_free_complete_datagram+0x22>
 80169ce:	4b45      	ldr	r3, [pc, #276]	; (8016ae4 <ip_reass_free_complete_datagram+0x12c>)
 80169d0:	22ab      	movs	r2, #171	; 0xab
 80169d2:	4945      	ldr	r1, [pc, #276]	; (8016ae8 <ip_reass_free_complete_datagram+0x130>)
 80169d4:	4845      	ldr	r0, [pc, #276]	; (8016aec <ip_reass_free_complete_datagram+0x134>)
 80169d6:	f000 ffdd 	bl	8017994 <iprintf>
  if (prev != NULL) {
 80169da:	683b      	ldr	r3, [r7, #0]
 80169dc:	2b00      	cmp	r3, #0
 80169de:	d00a      	beq.n	80169f6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80169e0:	683b      	ldr	r3, [r7, #0]
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	687a      	ldr	r2, [r7, #4]
 80169e6:	429a      	cmp	r2, r3
 80169e8:	d005      	beq.n	80169f6 <ip_reass_free_complete_datagram+0x3e>
 80169ea:	4b3e      	ldr	r3, [pc, #248]	; (8016ae4 <ip_reass_free_complete_datagram+0x12c>)
 80169ec:	22ad      	movs	r2, #173	; 0xad
 80169ee:	4940      	ldr	r1, [pc, #256]	; (8016af0 <ip_reass_free_complete_datagram+0x138>)
 80169f0:	483e      	ldr	r0, [pc, #248]	; (8016aec <ip_reass_free_complete_datagram+0x134>)
 80169f2:	f000 ffcf 	bl	8017994 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	685b      	ldr	r3, [r3, #4]
 80169fa:	685b      	ldr	r3, [r3, #4]
 80169fc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80169fe:	697b      	ldr	r3, [r7, #20]
 8016a00:	889b      	ldrh	r3, [r3, #4]
 8016a02:	b29b      	uxth	r3, r3
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d12a      	bne.n	8016a5e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	685b      	ldr	r3, [r3, #4]
 8016a0c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016a0e:	697b      	ldr	r3, [r7, #20]
 8016a10:	681a      	ldr	r2, [r3, #0]
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016a16:	69bb      	ldr	r3, [r7, #24]
 8016a18:	6858      	ldr	r0, [r3, #4]
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	3308      	adds	r3, #8
 8016a1e:	2214      	movs	r2, #20
 8016a20:	4619      	mov	r1, r3
 8016a22:	f000 ffa4 	bl	801796e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016a26:	2101      	movs	r1, #1
 8016a28:	69b8      	ldr	r0, [r7, #24]
 8016a2a:	f7ff fc4b 	bl	80162c4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016a2e:	69b8      	ldr	r0, [r7, #24]
 8016a30:	f7f9 fafe 	bl	8010030 <pbuf_clen>
 8016a34:	4603      	mov	r3, r0
 8016a36:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016a38:	8bfa      	ldrh	r2, [r7, #30]
 8016a3a:	8a7b      	ldrh	r3, [r7, #18]
 8016a3c:	4413      	add	r3, r2
 8016a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016a42:	db05      	blt.n	8016a50 <ip_reass_free_complete_datagram+0x98>
 8016a44:	4b27      	ldr	r3, [pc, #156]	; (8016ae4 <ip_reass_free_complete_datagram+0x12c>)
 8016a46:	22bc      	movs	r2, #188	; 0xbc
 8016a48:	492a      	ldr	r1, [pc, #168]	; (8016af4 <ip_reass_free_complete_datagram+0x13c>)
 8016a4a:	4828      	ldr	r0, [pc, #160]	; (8016aec <ip_reass_free_complete_datagram+0x134>)
 8016a4c:	f000 ffa2 	bl	8017994 <iprintf>
    pbufs_freed += clen;
 8016a50:	8bfa      	ldrh	r2, [r7, #30]
 8016a52:	8a7b      	ldrh	r3, [r7, #18]
 8016a54:	4413      	add	r3, r2
 8016a56:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016a58:	69b8      	ldr	r0, [r7, #24]
 8016a5a:	f7f9 fa4f 	bl	800fefc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	685b      	ldr	r3, [r3, #4]
 8016a62:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016a64:	e01f      	b.n	8016aa6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016a66:	69bb      	ldr	r3, [r7, #24]
 8016a68:	685b      	ldr	r3, [r3, #4]
 8016a6a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016a6c:	69bb      	ldr	r3, [r7, #24]
 8016a6e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016a70:	697b      	ldr	r3, [r7, #20]
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016a76:	68f8      	ldr	r0, [r7, #12]
 8016a78:	f7f9 fada 	bl	8010030 <pbuf_clen>
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016a80:	8bfa      	ldrh	r2, [r7, #30]
 8016a82:	8a7b      	ldrh	r3, [r7, #18]
 8016a84:	4413      	add	r3, r2
 8016a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016a8a:	db05      	blt.n	8016a98 <ip_reass_free_complete_datagram+0xe0>
 8016a8c:	4b15      	ldr	r3, [pc, #84]	; (8016ae4 <ip_reass_free_complete_datagram+0x12c>)
 8016a8e:	22cc      	movs	r2, #204	; 0xcc
 8016a90:	4918      	ldr	r1, [pc, #96]	; (8016af4 <ip_reass_free_complete_datagram+0x13c>)
 8016a92:	4816      	ldr	r0, [pc, #88]	; (8016aec <ip_reass_free_complete_datagram+0x134>)
 8016a94:	f000 ff7e 	bl	8017994 <iprintf>
    pbufs_freed += clen;
 8016a98:	8bfa      	ldrh	r2, [r7, #30]
 8016a9a:	8a7b      	ldrh	r3, [r7, #18]
 8016a9c:	4413      	add	r3, r2
 8016a9e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016aa0:	68f8      	ldr	r0, [r7, #12]
 8016aa2:	f7f9 fa2b 	bl	800fefc <pbuf_free>
  while (p != NULL) {
 8016aa6:	69bb      	ldr	r3, [r7, #24]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d1dc      	bne.n	8016a66 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016aac:	6839      	ldr	r1, [r7, #0]
 8016aae:	6878      	ldr	r0, [r7, #4]
 8016ab0:	f000 f8c2 	bl	8016c38 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8016ab4:	4b10      	ldr	r3, [pc, #64]	; (8016af8 <ip_reass_free_complete_datagram+0x140>)
 8016ab6:	881b      	ldrh	r3, [r3, #0]
 8016ab8:	8bfa      	ldrh	r2, [r7, #30]
 8016aba:	429a      	cmp	r2, r3
 8016abc:	d905      	bls.n	8016aca <ip_reass_free_complete_datagram+0x112>
 8016abe:	4b09      	ldr	r3, [pc, #36]	; (8016ae4 <ip_reass_free_complete_datagram+0x12c>)
 8016ac0:	22d2      	movs	r2, #210	; 0xd2
 8016ac2:	490e      	ldr	r1, [pc, #56]	; (8016afc <ip_reass_free_complete_datagram+0x144>)
 8016ac4:	4809      	ldr	r0, [pc, #36]	; (8016aec <ip_reass_free_complete_datagram+0x134>)
 8016ac6:	f000 ff65 	bl	8017994 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8016aca:	4b0b      	ldr	r3, [pc, #44]	; (8016af8 <ip_reass_free_complete_datagram+0x140>)
 8016acc:	881a      	ldrh	r2, [r3, #0]
 8016ace:	8bfb      	ldrh	r3, [r7, #30]
 8016ad0:	1ad3      	subs	r3, r2, r3
 8016ad2:	b29a      	uxth	r2, r3
 8016ad4:	4b08      	ldr	r3, [pc, #32]	; (8016af8 <ip_reass_free_complete_datagram+0x140>)
 8016ad6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016ad8:	8bfb      	ldrh	r3, [r7, #30]
}
 8016ada:	4618      	mov	r0, r3
 8016adc:	3720      	adds	r7, #32
 8016ade:	46bd      	mov	sp, r7
 8016ae0:	bd80      	pop	{r7, pc}
 8016ae2:	bf00      	nop
 8016ae4:	0801a61c 	.word	0x0801a61c
 8016ae8:	0801a658 	.word	0x0801a658
 8016aec:	0801a664 	.word	0x0801a664
 8016af0:	0801a68c 	.word	0x0801a68c
 8016af4:	0801a6a0 	.word	0x0801a6a0
 8016af8:	2402193c 	.word	0x2402193c
 8016afc:	0801a6c0 	.word	0x0801a6c0

08016b00 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016b00:	b580      	push	{r7, lr}
 8016b02:	b08a      	sub	sp, #40	; 0x28
 8016b04:	af00      	add	r7, sp, #0
 8016b06:	6078      	str	r0, [r7, #4]
 8016b08:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016b0e:	2300      	movs	r3, #0
 8016b10:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016b12:	2300      	movs	r3, #0
 8016b14:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016b16:	2300      	movs	r3, #0
 8016b18:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016b1e:	4b28      	ldr	r3, [pc, #160]	; (8016bc0 <ip_reass_remove_oldest_datagram+0xc0>)
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016b24:	e030      	b.n	8016b88 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b28:	695a      	ldr	r2, [r3, #20]
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	68db      	ldr	r3, [r3, #12]
 8016b2e:	429a      	cmp	r2, r3
 8016b30:	d10c      	bne.n	8016b4c <ip_reass_remove_oldest_datagram+0x4c>
 8016b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b34:	699a      	ldr	r2, [r3, #24]
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	691b      	ldr	r3, [r3, #16]
 8016b3a:	429a      	cmp	r2, r3
 8016b3c:	d106      	bne.n	8016b4c <ip_reass_remove_oldest_datagram+0x4c>
 8016b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b40:	899a      	ldrh	r2, [r3, #12]
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	889b      	ldrh	r3, [r3, #4]
 8016b46:	b29b      	uxth	r3, r3
 8016b48:	429a      	cmp	r2, r3
 8016b4a:	d014      	beq.n	8016b76 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016b4c:	693b      	ldr	r3, [r7, #16]
 8016b4e:	3301      	adds	r3, #1
 8016b50:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016b52:	6a3b      	ldr	r3, [r7, #32]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d104      	bne.n	8016b62 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b5a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016b5c:	69fb      	ldr	r3, [r7, #28]
 8016b5e:	61bb      	str	r3, [r7, #24]
 8016b60:	e009      	b.n	8016b76 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b64:	7fda      	ldrb	r2, [r3, #31]
 8016b66:	6a3b      	ldr	r3, [r7, #32]
 8016b68:	7fdb      	ldrb	r3, [r3, #31]
 8016b6a:	429a      	cmp	r2, r3
 8016b6c:	d803      	bhi.n	8016b76 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b70:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016b72:	69fb      	ldr	r3, [r7, #28]
 8016b74:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d001      	beq.n	8016b82 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b80:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d1cb      	bne.n	8016b26 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016b8e:	6a3b      	ldr	r3, [r7, #32]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d008      	beq.n	8016ba6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016b94:	69b9      	ldr	r1, [r7, #24]
 8016b96:	6a38      	ldr	r0, [r7, #32]
 8016b98:	f7ff ff0e 	bl	80169b8 <ip_reass_free_complete_datagram>
 8016b9c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016b9e:	697a      	ldr	r2, [r7, #20]
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	4413      	add	r3, r2
 8016ba4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016ba6:	697a      	ldr	r2, [r7, #20]
 8016ba8:	683b      	ldr	r3, [r7, #0]
 8016baa:	429a      	cmp	r2, r3
 8016bac:	da02      	bge.n	8016bb4 <ip_reass_remove_oldest_datagram+0xb4>
 8016bae:	693b      	ldr	r3, [r7, #16]
 8016bb0:	2b01      	cmp	r3, #1
 8016bb2:	dcac      	bgt.n	8016b0e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016bb4:	697b      	ldr	r3, [r7, #20]
}
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	3728      	adds	r7, #40	; 0x28
 8016bba:	46bd      	mov	sp, r7
 8016bbc:	bd80      	pop	{r7, pc}
 8016bbe:	bf00      	nop
 8016bc0:	24021938 	.word	0x24021938

08016bc4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b084      	sub	sp, #16
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	6078      	str	r0, [r7, #4]
 8016bcc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016bce:	2004      	movs	r0, #4
 8016bd0:	f7f8 fb42 	bl	800f258 <memp_malloc>
 8016bd4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d110      	bne.n	8016bfe <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016bdc:	6839      	ldr	r1, [r7, #0]
 8016bde:	6878      	ldr	r0, [r7, #4]
 8016be0:	f7ff ff8e 	bl	8016b00 <ip_reass_remove_oldest_datagram>
 8016be4:	4602      	mov	r2, r0
 8016be6:	683b      	ldr	r3, [r7, #0]
 8016be8:	4293      	cmp	r3, r2
 8016bea:	dc03      	bgt.n	8016bf4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016bec:	2004      	movs	r0, #4
 8016bee:	f7f8 fb33 	bl	800f258 <memp_malloc>
 8016bf2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d101      	bne.n	8016bfe <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	e016      	b.n	8016c2c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016bfe:	2220      	movs	r2, #32
 8016c00:	2100      	movs	r1, #0
 8016c02:	68f8      	ldr	r0, [r7, #12]
 8016c04:	f000 febe 	bl	8017984 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	2203      	movs	r2, #3
 8016c0c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016c0e:	4b09      	ldr	r3, [pc, #36]	; (8016c34 <ip_reass_enqueue_new_datagram+0x70>)
 8016c10:	681a      	ldr	r2, [r3, #0]
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016c16:	4a07      	ldr	r2, [pc, #28]	; (8016c34 <ip_reass_enqueue_new_datagram+0x70>)
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	3308      	adds	r3, #8
 8016c20:	2214      	movs	r2, #20
 8016c22:	6879      	ldr	r1, [r7, #4]
 8016c24:	4618      	mov	r0, r3
 8016c26:	f000 fea2 	bl	801796e <memcpy>
  return ipr;
 8016c2a:	68fb      	ldr	r3, [r7, #12]
}
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	3710      	adds	r7, #16
 8016c30:	46bd      	mov	sp, r7
 8016c32:	bd80      	pop	{r7, pc}
 8016c34:	24021938 	.word	0x24021938

08016c38 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	b082      	sub	sp, #8
 8016c3c:	af00      	add	r7, sp, #0
 8016c3e:	6078      	str	r0, [r7, #4]
 8016c40:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016c42:	4b10      	ldr	r3, [pc, #64]	; (8016c84 <ip_reass_dequeue_datagram+0x4c>)
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	687a      	ldr	r2, [r7, #4]
 8016c48:	429a      	cmp	r2, r3
 8016c4a:	d104      	bne.n	8016c56 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	4a0c      	ldr	r2, [pc, #48]	; (8016c84 <ip_reass_dequeue_datagram+0x4c>)
 8016c52:	6013      	str	r3, [r2, #0]
 8016c54:	e00d      	b.n	8016c72 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016c56:	683b      	ldr	r3, [r7, #0]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d106      	bne.n	8016c6a <ip_reass_dequeue_datagram+0x32>
 8016c5c:	4b0a      	ldr	r3, [pc, #40]	; (8016c88 <ip_reass_dequeue_datagram+0x50>)
 8016c5e:	f240 1245 	movw	r2, #325	; 0x145
 8016c62:	490a      	ldr	r1, [pc, #40]	; (8016c8c <ip_reass_dequeue_datagram+0x54>)
 8016c64:	480a      	ldr	r0, [pc, #40]	; (8016c90 <ip_reass_dequeue_datagram+0x58>)
 8016c66:	f000 fe95 	bl	8017994 <iprintf>
    prev->next = ipr->next;
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	681a      	ldr	r2, [r3, #0]
 8016c6e:	683b      	ldr	r3, [r7, #0]
 8016c70:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016c72:	6879      	ldr	r1, [r7, #4]
 8016c74:	2004      	movs	r0, #4
 8016c76:	f7f8 fb65 	bl	800f344 <memp_free>
}
 8016c7a:	bf00      	nop
 8016c7c:	3708      	adds	r7, #8
 8016c7e:	46bd      	mov	sp, r7
 8016c80:	bd80      	pop	{r7, pc}
 8016c82:	bf00      	nop
 8016c84:	24021938 	.word	0x24021938
 8016c88:	0801a61c 	.word	0x0801a61c
 8016c8c:	0801a6dc 	.word	0x0801a6dc
 8016c90:	0801a664 	.word	0x0801a664

08016c94 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b08c      	sub	sp, #48	; 0x30
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	60f8      	str	r0, [r7, #12]
 8016c9c:	60b9      	str	r1, [r7, #8]
 8016c9e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016ca4:	2301      	movs	r3, #1
 8016ca6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8016ca8:	68bb      	ldr	r3, [r7, #8]
 8016caa:	685b      	ldr	r3, [r3, #4]
 8016cac:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8016cae:	69fb      	ldr	r3, [r7, #28]
 8016cb0:	885b      	ldrh	r3, [r3, #2]
 8016cb2:	b29b      	uxth	r3, r3
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	f7f7 fe09 	bl	800e8cc <lwip_htons>
 8016cba:	4603      	mov	r3, r0
 8016cbc:	461a      	mov	r2, r3
 8016cbe:	69fb      	ldr	r3, [r7, #28]
 8016cc0:	781b      	ldrb	r3, [r3, #0]
 8016cc2:	b29b      	uxth	r3, r3
 8016cc4:	f003 030f 	and.w	r3, r3, #15
 8016cc8:	b29b      	uxth	r3, r3
 8016cca:	009b      	lsls	r3, r3, #2
 8016ccc:	b29b      	uxth	r3, r3
 8016cce:	1ad3      	subs	r3, r2, r3
 8016cd0:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8016cd2:	69fb      	ldr	r3, [r7, #28]
 8016cd4:	88db      	ldrh	r3, [r3, #6]
 8016cd6:	b29b      	uxth	r3, r3
 8016cd8:	4618      	mov	r0, r3
 8016cda:	f7f7 fdf7 	bl	800e8cc <lwip_htons>
 8016cde:	4603      	mov	r3, r0
 8016ce0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016ce4:	b29b      	uxth	r3, r3
 8016ce6:	00db      	lsls	r3, r3, #3
 8016ce8:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8016cea:	68bb      	ldr	r3, [r7, #8]
 8016cec:	685b      	ldr	r3, [r3, #4]
 8016cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cf2:	2200      	movs	r2, #0
 8016cf4:	701a      	strb	r2, [r3, #0]
 8016cf6:	2200      	movs	r2, #0
 8016cf8:	705a      	strb	r2, [r3, #1]
 8016cfa:	2200      	movs	r2, #0
 8016cfc:	709a      	strb	r2, [r3, #2]
 8016cfe:	2200      	movs	r2, #0
 8016d00:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d04:	8b3a      	ldrh	r2, [r7, #24]
 8016d06:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8016d08:	8b3a      	ldrh	r2, [r7, #24]
 8016d0a:	8b7b      	ldrh	r3, [r7, #26]
 8016d0c:	4413      	add	r3, r2
 8016d0e:	b29a      	uxth	r2, r3
 8016d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d12:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	685b      	ldr	r3, [r3, #4]
 8016d18:	627b      	str	r3, [r7, #36]	; 0x24
 8016d1a:	e061      	b.n	8016de0 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8016d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d1e:	685b      	ldr	r3, [r3, #4]
 8016d20:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8016d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d24:	889b      	ldrh	r3, [r3, #4]
 8016d26:	b29a      	uxth	r2, r3
 8016d28:	697b      	ldr	r3, [r7, #20]
 8016d2a:	889b      	ldrh	r3, [r3, #4]
 8016d2c:	b29b      	uxth	r3, r3
 8016d2e:	429a      	cmp	r2, r3
 8016d30:	d232      	bcs.n	8016d98 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d36:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d01f      	beq.n	8016d7e <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d40:	889b      	ldrh	r3, [r3, #4]
 8016d42:	b29a      	uxth	r2, r3
 8016d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d46:	88db      	ldrh	r3, [r3, #6]
 8016d48:	b29b      	uxth	r3, r3
 8016d4a:	429a      	cmp	r2, r3
 8016d4c:	f0c0 80e3 	bcc.w	8016f16 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8016d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d52:	88db      	ldrh	r3, [r3, #6]
 8016d54:	b29a      	uxth	r2, r3
 8016d56:	697b      	ldr	r3, [r7, #20]
 8016d58:	889b      	ldrh	r3, [r3, #4]
 8016d5a:	b29b      	uxth	r3, r3
 8016d5c:	429a      	cmp	r2, r3
 8016d5e:	f200 80da 	bhi.w	8016f16 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d64:	68ba      	ldr	r2, [r7, #8]
 8016d66:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d6a:	88db      	ldrh	r3, [r3, #6]
 8016d6c:	b29a      	uxth	r2, r3
 8016d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d70:	889b      	ldrh	r3, [r3, #4]
 8016d72:	b29b      	uxth	r3, r3
 8016d74:	429a      	cmp	r2, r3
 8016d76:	d037      	beq.n	8016de8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016d78:	2300      	movs	r3, #0
 8016d7a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016d7c:	e034      	b.n	8016de8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8016d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d80:	88db      	ldrh	r3, [r3, #6]
 8016d82:	b29a      	uxth	r2, r3
 8016d84:	697b      	ldr	r3, [r7, #20]
 8016d86:	889b      	ldrh	r3, [r3, #4]
 8016d88:	b29b      	uxth	r3, r3
 8016d8a:	429a      	cmp	r2, r3
 8016d8c:	f200 80c5 	bhi.w	8016f1a <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	68ba      	ldr	r2, [r7, #8]
 8016d94:	605a      	str	r2, [r3, #4]
      break;
 8016d96:	e027      	b.n	8016de8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8016d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d9a:	889b      	ldrh	r3, [r3, #4]
 8016d9c:	b29a      	uxth	r2, r3
 8016d9e:	697b      	ldr	r3, [r7, #20]
 8016da0:	889b      	ldrh	r3, [r3, #4]
 8016da2:	b29b      	uxth	r3, r3
 8016da4:	429a      	cmp	r2, r3
 8016da6:	f000 80ba 	beq.w	8016f1e <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dac:	889b      	ldrh	r3, [r3, #4]
 8016dae:	b29a      	uxth	r2, r3
 8016db0:	697b      	ldr	r3, [r7, #20]
 8016db2:	88db      	ldrh	r3, [r3, #6]
 8016db4:	b29b      	uxth	r3, r3
 8016db6:	429a      	cmp	r2, r3
 8016db8:	f0c0 80b3 	bcc.w	8016f22 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d009      	beq.n	8016dd6 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8016dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dc4:	88db      	ldrh	r3, [r3, #6]
 8016dc6:	b29a      	uxth	r2, r3
 8016dc8:	697b      	ldr	r3, [r7, #20]
 8016dca:	889b      	ldrh	r3, [r3, #4]
 8016dcc:	b29b      	uxth	r3, r3
 8016dce:	429a      	cmp	r2, r3
 8016dd0:	d001      	beq.n	8016dd6 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016dd6:	697b      	ldr	r3, [r7, #20]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016ddc:	697b      	ldr	r3, [r7, #20]
 8016dde:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d19a      	bne.n	8016d1c <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8016de6:	e000      	b.n	8016dea <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8016de8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d12d      	bne.n	8016e4c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8016df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d01c      	beq.n	8016e30 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016df8:	88db      	ldrh	r3, [r3, #6]
 8016dfa:	b29a      	uxth	r2, r3
 8016dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dfe:	889b      	ldrh	r3, [r3, #4]
 8016e00:	b29b      	uxth	r3, r3
 8016e02:	429a      	cmp	r2, r3
 8016e04:	d906      	bls.n	8016e14 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8016e06:	4b51      	ldr	r3, [pc, #324]	; (8016f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016e08:	f240 12ab 	movw	r2, #427	; 0x1ab
 8016e0c:	4950      	ldr	r1, [pc, #320]	; (8016f50 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016e0e:	4851      	ldr	r0, [pc, #324]	; (8016f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016e10:	f000 fdc0 	bl	8017994 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e16:	68ba      	ldr	r2, [r7, #8]
 8016e18:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e1c:	88db      	ldrh	r3, [r3, #6]
 8016e1e:	b29a      	uxth	r2, r3
 8016e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e22:	889b      	ldrh	r3, [r3, #4]
 8016e24:	b29b      	uxth	r3, r3
 8016e26:	429a      	cmp	r2, r3
 8016e28:	d010      	beq.n	8016e4c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8016e2a:	2300      	movs	r3, #0
 8016e2c:	623b      	str	r3, [r7, #32]
 8016e2e:	e00d      	b.n	8016e4c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	685b      	ldr	r3, [r3, #4]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d006      	beq.n	8016e46 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8016e38:	4b44      	ldr	r3, [pc, #272]	; (8016f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016e3a:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8016e3e:	4946      	ldr	r1, [pc, #280]	; (8016f58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016e40:	4844      	ldr	r0, [pc, #272]	; (8016f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016e42:	f000 fda7 	bl	8017994 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	68ba      	ldr	r2, [r7, #8]
 8016e4a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d105      	bne.n	8016e5e <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	7f9b      	ldrb	r3, [r3, #30]
 8016e56:	f003 0301 	and.w	r3, r3, #1
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d059      	beq.n	8016f12 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8016e5e:	6a3b      	ldr	r3, [r7, #32]
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d04f      	beq.n	8016f04 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	685b      	ldr	r3, [r3, #4]
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d006      	beq.n	8016e7a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	685b      	ldr	r3, [r3, #4]
 8016e70:	685b      	ldr	r3, [r3, #4]
 8016e72:	889b      	ldrh	r3, [r3, #4]
 8016e74:	b29b      	uxth	r3, r3
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d002      	beq.n	8016e80 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	623b      	str	r3, [r7, #32]
 8016e7e:	e041      	b.n	8016f04 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e82:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016e8a:	e012      	b.n	8016eb2 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8016e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e8e:	685b      	ldr	r3, [r3, #4]
 8016e90:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e94:	88db      	ldrh	r3, [r3, #6]
 8016e96:	b29a      	uxth	r2, r3
 8016e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e9a:	889b      	ldrh	r3, [r3, #4]
 8016e9c:	b29b      	uxth	r3, r3
 8016e9e:	429a      	cmp	r2, r3
 8016ea0:	d002      	beq.n	8016ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	623b      	str	r3, [r7, #32]
            break;
 8016ea6:	e007      	b.n	8016eb8 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8016ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eaa:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d1e9      	bne.n	8016e8c <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016eb8:	6a3b      	ldr	r3, [r7, #32]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d022      	beq.n	8016f04 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	685b      	ldr	r3, [r3, #4]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d106      	bne.n	8016ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8016ec6:	4b21      	ldr	r3, [pc, #132]	; (8016f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016ec8:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8016ecc:	4923      	ldr	r1, [pc, #140]	; (8016f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016ece:	4821      	ldr	r0, [pc, #132]	; (8016f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016ed0:	f000 fd60 	bl	8017994 <iprintf>
          LWIP_ASSERT("sanity check",
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	685b      	ldr	r3, [r3, #4]
 8016ed8:	685b      	ldr	r3, [r3, #4]
 8016eda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016edc:	429a      	cmp	r2, r3
 8016ede:	d106      	bne.n	8016eee <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8016ee0:	4b1a      	ldr	r3, [pc, #104]	; (8016f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016ee2:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8016ee6:	491d      	ldr	r1, [pc, #116]	; (8016f5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016ee8:	481a      	ldr	r0, [pc, #104]	; (8016f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016eea:	f000 fd53 	bl	8017994 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d006      	beq.n	8016f04 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8016ef6:	4b15      	ldr	r3, [pc, #84]	; (8016f4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016ef8:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8016efc:	4918      	ldr	r1, [pc, #96]	; (8016f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016efe:	4815      	ldr	r0, [pc, #84]	; (8016f54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016f00:	f000 fd48 	bl	8017994 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016f04:	6a3b      	ldr	r3, [r7, #32]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	bf14      	ite	ne
 8016f0a:	2301      	movne	r3, #1
 8016f0c:	2300      	moveq	r3, #0
 8016f0e:	b2db      	uxtb	r3, r3
 8016f10:	e018      	b.n	8016f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016f12:	2300      	movs	r3, #0
 8016f14:	e016      	b.n	8016f44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 8016f16:	bf00      	nop
 8016f18:	e004      	b.n	8016f24 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8016f1a:	bf00      	nop
 8016f1c:	e002      	b.n	8016f24 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8016f1e:	bf00      	nop
 8016f20:	e000      	b.n	8016f24 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8016f22:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8016f24:	68b8      	ldr	r0, [r7, #8]
 8016f26:	f7f9 f883 	bl	8010030 <pbuf_clen>
 8016f2a:	4603      	mov	r3, r0
 8016f2c:	461a      	mov	r2, r3
 8016f2e:	4b0d      	ldr	r3, [pc, #52]	; (8016f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016f30:	881b      	ldrh	r3, [r3, #0]
 8016f32:	1a9b      	subs	r3, r3, r2
 8016f34:	b29a      	uxth	r2, r3
 8016f36:	4b0b      	ldr	r3, [pc, #44]	; (8016f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016f38:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8016f3a:	68b8      	ldr	r0, [r7, #8]
 8016f3c:	f7f8 ffde 	bl	800fefc <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016f40:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8016f44:	4618      	mov	r0, r3
 8016f46:	3730      	adds	r7, #48	; 0x30
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	bd80      	pop	{r7, pc}
 8016f4c:	0801a61c 	.word	0x0801a61c
 8016f50:	0801a6f8 	.word	0x0801a6f8
 8016f54:	0801a664 	.word	0x0801a664
 8016f58:	0801a718 	.word	0x0801a718
 8016f5c:	0801a750 	.word	0x0801a750
 8016f60:	0801a760 	.word	0x0801a760
 8016f64:	2402193c 	.word	0x2402193c

08016f68 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b08e      	sub	sp, #56	; 0x38
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	685b      	ldr	r3, [r3, #4]
 8016f74:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8016f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f78:	781b      	ldrb	r3, [r3, #0]
 8016f7a:	f003 030f 	and.w	r3, r3, #15
 8016f7e:	009b      	lsls	r3, r3, #2
 8016f80:	2b14      	cmp	r3, #20
 8016f82:	f040 8131 	bne.w	80171e8 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8016f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f88:	88db      	ldrh	r3, [r3, #6]
 8016f8a:	b29b      	uxth	r3, r3
 8016f8c:	4618      	mov	r0, r3
 8016f8e:	f7f7 fc9d 	bl	800e8cc <lwip_htons>
 8016f92:	4603      	mov	r3, r0
 8016f94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016f98:	b29b      	uxth	r3, r3
 8016f9a:	00db      	lsls	r3, r3, #3
 8016f9c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8016f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fa0:	885b      	ldrh	r3, [r3, #2]
 8016fa2:	b29b      	uxth	r3, r3
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	f7f7 fc91 	bl	800e8cc <lwip_htons>
 8016faa:	4603      	mov	r3, r0
 8016fac:	461a      	mov	r2, r3
 8016fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fb0:	781b      	ldrb	r3, [r3, #0]
 8016fb2:	b29b      	uxth	r3, r3
 8016fb4:	f003 030f 	and.w	r3, r3, #15
 8016fb8:	b29b      	uxth	r3, r3
 8016fba:	009b      	lsls	r3, r3, #2
 8016fbc:	b29b      	uxth	r3, r3
 8016fbe:	1ad3      	subs	r3, r2, r3
 8016fc0:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016fc2:	6878      	ldr	r0, [r7, #4]
 8016fc4:	f7f9 f834 	bl	8010030 <pbuf_clen>
 8016fc8:	4603      	mov	r3, r0
 8016fca:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016fcc:	4b8d      	ldr	r3, [pc, #564]	; (8017204 <ip4_reass+0x29c>)
 8016fce:	881b      	ldrh	r3, [r3, #0]
 8016fd0:	461a      	mov	r2, r3
 8016fd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016fd4:	4413      	add	r3, r2
 8016fd6:	2b0a      	cmp	r3, #10
 8016fd8:	dd10      	ble.n	8016ffc <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016fda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016fdc:	4619      	mov	r1, r3
 8016fde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016fe0:	f7ff fd8e 	bl	8016b00 <ip_reass_remove_oldest_datagram>
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	f000 8100 	beq.w	80171ec <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016fec:	4b85      	ldr	r3, [pc, #532]	; (8017204 <ip4_reass+0x29c>)
 8016fee:	881b      	ldrh	r3, [r3, #0]
 8016ff0:	461a      	mov	r2, r3
 8016ff2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016ff4:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016ff6:	2b0a      	cmp	r3, #10
 8016ff8:	f300 80f8 	bgt.w	80171ec <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016ffc:	4b82      	ldr	r3, [pc, #520]	; (8017208 <ip4_reass+0x2a0>)
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	633b      	str	r3, [r7, #48]	; 0x30
 8017002:	e015      	b.n	8017030 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017006:	695a      	ldr	r2, [r3, #20]
 8017008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801700a:	68db      	ldr	r3, [r3, #12]
 801700c:	429a      	cmp	r2, r3
 801700e:	d10c      	bne.n	801702a <ip4_reass+0xc2>
 8017010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017012:	699a      	ldr	r2, [r3, #24]
 8017014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017016:	691b      	ldr	r3, [r3, #16]
 8017018:	429a      	cmp	r2, r3
 801701a:	d106      	bne.n	801702a <ip4_reass+0xc2>
 801701c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801701e:	899a      	ldrh	r2, [r3, #12]
 8017020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017022:	889b      	ldrh	r3, [r3, #4]
 8017024:	b29b      	uxth	r3, r3
 8017026:	429a      	cmp	r2, r3
 8017028:	d006      	beq.n	8017038 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801702a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801702c:	681b      	ldr	r3, [r3, #0]
 801702e:	633b      	str	r3, [r7, #48]	; 0x30
 8017030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017032:	2b00      	cmp	r3, #0
 8017034:	d1e6      	bne.n	8017004 <ip4_reass+0x9c>
 8017036:	e000      	b.n	801703a <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017038:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801703c:	2b00      	cmp	r3, #0
 801703e:	d109      	bne.n	8017054 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017040:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017042:	4619      	mov	r1, r3
 8017044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017046:	f7ff fdbd 	bl	8016bc4 <ip_reass_enqueue_new_datagram>
 801704a:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801704e:	2b00      	cmp	r3, #0
 8017050:	d11c      	bne.n	801708c <ip4_reass+0x124>
      goto nullreturn;
 8017052:	e0ce      	b.n	80171f2 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017056:	88db      	ldrh	r3, [r3, #6]
 8017058:	b29b      	uxth	r3, r3
 801705a:	4618      	mov	r0, r3
 801705c:	f7f7 fc36 	bl	800e8cc <lwip_htons>
 8017060:	4603      	mov	r3, r0
 8017062:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017066:	2b00      	cmp	r3, #0
 8017068:	d110      	bne.n	801708c <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801706c:	89db      	ldrh	r3, [r3, #14]
 801706e:	4618      	mov	r0, r3
 8017070:	f7f7 fc2c 	bl	800e8cc <lwip_htons>
 8017074:	4603      	mov	r3, r0
 8017076:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801707a:	2b00      	cmp	r3, #0
 801707c:	d006      	beq.n	801708c <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801707e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017080:	3308      	adds	r3, #8
 8017082:	2214      	movs	r2, #20
 8017084:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017086:	4618      	mov	r0, r3
 8017088:	f000 fc71 	bl	801796e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801708e:	88db      	ldrh	r3, [r3, #6]
 8017090:	b29b      	uxth	r3, r3
 8017092:	f003 0320 	and.w	r3, r3, #32
 8017096:	2b00      	cmp	r3, #0
 8017098:	bf0c      	ite	eq
 801709a:	2301      	moveq	r3, #1
 801709c:	2300      	movne	r3, #0
 801709e:	b2db      	uxtb	r3, r3
 80170a0:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80170a2:	69fb      	ldr	r3, [r7, #28]
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d00e      	beq.n	80170c6 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 80170a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80170aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80170ac:	4413      	add	r3, r2
 80170ae:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80170b0:	8b7a      	ldrh	r2, [r7, #26]
 80170b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80170b4:	429a      	cmp	r2, r3
 80170b6:	f0c0 8099 	bcc.w	80171ec <ip4_reass+0x284>
 80170ba:	8b7b      	ldrh	r3, [r7, #26]
 80170bc:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80170c0:	4293      	cmp	r3, r2
 80170c2:	f200 8093 	bhi.w	80171ec <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80170c6:	69fa      	ldr	r2, [r7, #28]
 80170c8:	6879      	ldr	r1, [r7, #4]
 80170ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80170cc:	f7ff fde2 	bl	8016c94 <ip_reass_chain_frag_into_datagram_and_validate>
 80170d0:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80170d2:	697b      	ldr	r3, [r7, #20]
 80170d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170d8:	f000 808a 	beq.w	80171f0 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80170dc:	4b49      	ldr	r3, [pc, #292]	; (8017204 <ip4_reass+0x29c>)
 80170de:	881a      	ldrh	r2, [r3, #0]
 80170e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80170e2:	4413      	add	r3, r2
 80170e4:	b29a      	uxth	r2, r3
 80170e6:	4b47      	ldr	r3, [pc, #284]	; (8017204 <ip4_reass+0x29c>)
 80170e8:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80170ea:	69fb      	ldr	r3, [r7, #28]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d00d      	beq.n	801710c <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 80170f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80170f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80170f4:	4413      	add	r3, r2
 80170f6:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80170f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170fa:	8a7a      	ldrh	r2, [r7, #18]
 80170fc:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80170fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017100:	7f9b      	ldrb	r3, [r3, #30]
 8017102:	f043 0301 	orr.w	r3, r3, #1
 8017106:	b2da      	uxtb	r2, r3
 8017108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801710a:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801710c:	697b      	ldr	r3, [r7, #20]
 801710e:	2b01      	cmp	r3, #1
 8017110:	d168      	bne.n	80171e4 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8017112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017114:	8b9b      	ldrh	r3, [r3, #28]
 8017116:	3314      	adds	r3, #20
 8017118:	b29a      	uxth	r2, r3
 801711a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801711c:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017120:	685b      	ldr	r3, [r3, #4]
 8017122:	685b      	ldr	r3, [r3, #4]
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8017128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801712a:	685b      	ldr	r3, [r3, #4]
 801712c:	685b      	ldr	r3, [r3, #4]
 801712e:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017132:	3308      	adds	r3, #8
 8017134:	2214      	movs	r2, #20
 8017136:	4619      	mov	r1, r3
 8017138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801713a:	f000 fc18 	bl	801796e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 801713e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017140:	8b9b      	ldrh	r3, [r3, #28]
 8017142:	4618      	mov	r0, r3
 8017144:	f7f7 fbc2 	bl	800e8cc <lwip_htons>
 8017148:	4603      	mov	r3, r0
 801714a:	461a      	mov	r2, r3
 801714c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801714e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017152:	2200      	movs	r2, #0
 8017154:	719a      	strb	r2, [r3, #6]
 8017156:	2200      	movs	r2, #0
 8017158:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801715a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801715c:	2200      	movs	r2, #0
 801715e:	729a      	strb	r2, [r3, #10]
 8017160:	2200      	movs	r2, #0
 8017162:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017166:	685b      	ldr	r3, [r3, #4]
 8017168:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801716a:	e00e      	b.n	801718a <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 801716c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801716e:	685b      	ldr	r3, [r3, #4]
 8017170:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8017172:	f06f 0113 	mvn.w	r1, #19
 8017176:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017178:	f7f8 fe9c 	bl	800feb4 <pbuf_header>
      pbuf_cat(p, r);
 801717c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801717e:	6878      	ldr	r0, [r7, #4]
 8017180:	f7f8 ff96 	bl	80100b0 <pbuf_cat>
      r = iprh->next_pbuf;
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801718a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801718c:	2b00      	cmp	r3, #0
 801718e:	d1ed      	bne.n	801716c <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017190:	4b1d      	ldr	r3, [pc, #116]	; (8017208 <ip4_reass+0x2a0>)
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017196:	429a      	cmp	r2, r3
 8017198:	d102      	bne.n	80171a0 <ip4_reass+0x238>
      ipr_prev = NULL;
 801719a:	2300      	movs	r3, #0
 801719c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801719e:	e010      	b.n	80171c2 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80171a0:	4b19      	ldr	r3, [pc, #100]	; (8017208 <ip4_reass+0x2a0>)
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80171a6:	e007      	b.n	80171b8 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 80171a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80171ae:	429a      	cmp	r2, r3
 80171b0:	d006      	beq.n	80171c0 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80171b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80171b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d1f4      	bne.n	80171a8 <ip4_reass+0x240>
 80171be:	e000      	b.n	80171c2 <ip4_reass+0x25a>
          break;
 80171c0:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80171c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80171c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80171c6:	f7ff fd37 	bl	8016c38 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 80171ca:	6878      	ldr	r0, [r7, #4]
 80171cc:	f7f8 ff30 	bl	8010030 <pbuf_clen>
 80171d0:	4603      	mov	r3, r0
 80171d2:	461a      	mov	r2, r3
 80171d4:	4b0b      	ldr	r3, [pc, #44]	; (8017204 <ip4_reass+0x29c>)
 80171d6:	881b      	ldrh	r3, [r3, #0]
 80171d8:	1a9b      	subs	r3, r3, r2
 80171da:	b29a      	uxth	r2, r3
 80171dc:	4b09      	ldr	r3, [pc, #36]	; (8017204 <ip4_reass+0x29c>)
 80171de:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	e00a      	b.n	80171fa <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80171e4:	2300      	movs	r3, #0
 80171e6:	e008      	b.n	80171fa <ip4_reass+0x292>
    goto nullreturn;
 80171e8:	bf00      	nop
 80171ea:	e002      	b.n	80171f2 <ip4_reass+0x28a>

nullreturn:
 80171ec:	bf00      	nop
 80171ee:	e000      	b.n	80171f2 <ip4_reass+0x28a>
    goto nullreturn;
 80171f0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80171f2:	6878      	ldr	r0, [r7, #4]
 80171f4:	f7f8 fe82 	bl	800fefc <pbuf_free>
  return NULL;
 80171f8:	2300      	movs	r3, #0
}
 80171fa:	4618      	mov	r0, r3
 80171fc:	3738      	adds	r7, #56	; 0x38
 80171fe:	46bd      	mov	sp, r7
 8017200:	bd80      	pop	{r7, pc}
 8017202:	bf00      	nop
 8017204:	2402193c 	.word	0x2402193c
 8017208:	24021938 	.word	0x24021938

0801720c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 801720c:	b580      	push	{r7, lr}
 801720e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8017210:	2005      	movs	r0, #5
 8017212:	f7f8 f821 	bl	800f258 <memp_malloc>
 8017216:	4603      	mov	r3, r0
}
 8017218:	4618      	mov	r0, r3
 801721a:	bd80      	pop	{r7, pc}

0801721c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 801721c:	b580      	push	{r7, lr}
 801721e:	b082      	sub	sp, #8
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	2b00      	cmp	r3, #0
 8017228:	d106      	bne.n	8017238 <ip_frag_free_pbuf_custom_ref+0x1c>
 801722a:	4b07      	ldr	r3, [pc, #28]	; (8017248 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801722c:	f240 22ae 	movw	r2, #686	; 0x2ae
 8017230:	4906      	ldr	r1, [pc, #24]	; (801724c <ip_frag_free_pbuf_custom_ref+0x30>)
 8017232:	4807      	ldr	r0, [pc, #28]	; (8017250 <ip_frag_free_pbuf_custom_ref+0x34>)
 8017234:	f000 fbae 	bl	8017994 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017238:	6879      	ldr	r1, [r7, #4]
 801723a:	2005      	movs	r0, #5
 801723c:	f7f8 f882 	bl	800f344 <memp_free>
}
 8017240:	bf00      	nop
 8017242:	3708      	adds	r7, #8
 8017244:	46bd      	mov	sp, r7
 8017246:	bd80      	pop	{r7, pc}
 8017248:	0801a61c 	.word	0x0801a61c
 801724c:	0801a784 	.word	0x0801a784
 8017250:	0801a664 	.word	0x0801a664

08017254 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017254:	b580      	push	{r7, lr}
 8017256:	b084      	sub	sp, #16
 8017258:	af00      	add	r7, sp, #0
 801725a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	2b00      	cmp	r3, #0
 8017264:	d106      	bne.n	8017274 <ipfrag_free_pbuf_custom+0x20>
 8017266:	4b11      	ldr	r3, [pc, #68]	; (80172ac <ipfrag_free_pbuf_custom+0x58>)
 8017268:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 801726c:	4910      	ldr	r1, [pc, #64]	; (80172b0 <ipfrag_free_pbuf_custom+0x5c>)
 801726e:	4811      	ldr	r0, [pc, #68]	; (80172b4 <ipfrag_free_pbuf_custom+0x60>)
 8017270:	f000 fb90 	bl	8017994 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8017274:	68fa      	ldr	r2, [r7, #12]
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	429a      	cmp	r2, r3
 801727a:	d006      	beq.n	801728a <ipfrag_free_pbuf_custom+0x36>
 801727c:	4b0b      	ldr	r3, [pc, #44]	; (80172ac <ipfrag_free_pbuf_custom+0x58>)
 801727e:	f240 22b9 	movw	r2, #697	; 0x2b9
 8017282:	490d      	ldr	r1, [pc, #52]	; (80172b8 <ipfrag_free_pbuf_custom+0x64>)
 8017284:	480b      	ldr	r0, [pc, #44]	; (80172b4 <ipfrag_free_pbuf_custom+0x60>)
 8017286:	f000 fb85 	bl	8017994 <iprintf>
  if (pcr->original != NULL) {
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	695b      	ldr	r3, [r3, #20]
 801728e:	2b00      	cmp	r3, #0
 8017290:	d004      	beq.n	801729c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	695b      	ldr	r3, [r3, #20]
 8017296:	4618      	mov	r0, r3
 8017298:	f7f8 fe30 	bl	800fefc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801729c:	68f8      	ldr	r0, [r7, #12]
 801729e:	f7ff ffbd 	bl	801721c <ip_frag_free_pbuf_custom_ref>
}
 80172a2:	bf00      	nop
 80172a4:	3710      	adds	r7, #16
 80172a6:	46bd      	mov	sp, r7
 80172a8:	bd80      	pop	{r7, pc}
 80172aa:	bf00      	nop
 80172ac:	0801a61c 	.word	0x0801a61c
 80172b0:	0801a790 	.word	0x0801a790
 80172b4:	0801a664 	.word	0x0801a664
 80172b8:	0801a79c 	.word	0x0801a79c

080172bc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80172bc:	b580      	push	{r7, lr}
 80172be:	b092      	sub	sp, #72	; 0x48
 80172c0:	af02      	add	r7, sp, #8
 80172c2:	60f8      	str	r0, [r7, #12]
 80172c4:	60b9      	str	r1, [r7, #8]
 80172c6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80172c8:	2300      	movs	r3, #0
 80172ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80172cc:	68bb      	ldr	r3, [r7, #8]
 80172ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80172d0:	3b14      	subs	r3, #20
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	da00      	bge.n	80172d8 <ip4_frag+0x1c>
 80172d6:	3307      	adds	r3, #7
 80172d8:	10db      	asrs	r3, r3, #3
 80172da:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80172dc:	2314      	movs	r3, #20
 80172de:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	685b      	ldr	r3, [r3, #4]
 80172e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 80172e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172e8:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80172ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172ec:	781b      	ldrb	r3, [r3, #0]
 80172ee:	f003 030f 	and.w	r3, r3, #15
 80172f2:	009b      	lsls	r3, r3, #2
 80172f4:	2b14      	cmp	r3, #20
 80172f6:	d009      	beq.n	801730c <ip4_frag+0x50>
 80172f8:	4b79      	ldr	r3, [pc, #484]	; (80174e0 <ip4_frag+0x224>)
 80172fa:	f240 22e1 	movw	r2, #737	; 0x2e1
 80172fe:	4979      	ldr	r1, [pc, #484]	; (80174e4 <ip4_frag+0x228>)
 8017300:	4879      	ldr	r0, [pc, #484]	; (80174e8 <ip4_frag+0x22c>)
 8017302:	f000 fb47 	bl	8017994 <iprintf>
 8017306:	f06f 0305 	mvn.w	r3, #5
 801730a:	e0e5      	b.n	80174d8 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801730e:	88db      	ldrh	r3, [r3, #6]
 8017310:	b29b      	uxth	r3, r3
 8017312:	4618      	mov	r0, r3
 8017314:	f7f7 fada 	bl	800e8cc <lwip_htons>
 8017318:	4603      	mov	r3, r0
 801731a:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 801731c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801731e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017322:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8017324:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017326:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801732a:	2b00      	cmp	r3, #0
 801732c:	d009      	beq.n	8017342 <ip4_frag+0x86>
 801732e:	4b6c      	ldr	r3, [pc, #432]	; (80174e0 <ip4_frag+0x224>)
 8017330:	f240 22e6 	movw	r2, #742	; 0x2e6
 8017334:	496d      	ldr	r1, [pc, #436]	; (80174ec <ip4_frag+0x230>)
 8017336:	486c      	ldr	r0, [pc, #432]	; (80174e8 <ip4_frag+0x22c>)
 8017338:	f000 fb2c 	bl	8017994 <iprintf>
 801733c:	f06f 0305 	mvn.w	r3, #5
 8017340:	e0ca      	b.n	80174d8 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	891b      	ldrh	r3, [r3, #8]
 8017346:	3b14      	subs	r3, #20
 8017348:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 801734a:	e0bc      	b.n	80174c6 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 801734c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801734e:	00da      	lsls	r2, r3, #3
 8017350:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017352:	4293      	cmp	r3, r2
 8017354:	bfa8      	it	ge
 8017356:	4613      	movge	r3, r2
 8017358:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801735a:	2200      	movs	r2, #0
 801735c:	2114      	movs	r1, #20
 801735e:	2002      	movs	r0, #2
 8017360:	f7f8 fa5a 	bl	800f818 <pbuf_alloc>
 8017364:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8017366:	6a3b      	ldr	r3, [r7, #32]
 8017368:	2b00      	cmp	r3, #0
 801736a:	f000 80b2 	beq.w	80174d2 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	895b      	ldrh	r3, [r3, #10]
 8017372:	2b13      	cmp	r3, #19
 8017374:	d806      	bhi.n	8017384 <ip4_frag+0xc8>
 8017376:	4b5a      	ldr	r3, [pc, #360]	; (80174e0 <ip4_frag+0x224>)
 8017378:	f240 3209 	movw	r2, #777	; 0x309
 801737c:	495c      	ldr	r1, [pc, #368]	; (80174f0 <ip4_frag+0x234>)
 801737e:	485a      	ldr	r0, [pc, #360]	; (80174e8 <ip4_frag+0x22c>)
 8017380:	f000 fb08 	bl	8017994 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017384:	6a3b      	ldr	r3, [r7, #32]
 8017386:	685b      	ldr	r3, [r3, #4]
 8017388:	2214      	movs	r2, #20
 801738a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801738c:	4618      	mov	r0, r3
 801738e:	f000 faee 	bl	801796e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017392:	6a3b      	ldr	r3, [r7, #32]
 8017394:	685b      	ldr	r3, [r3, #4]
 8017396:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8017398:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801739a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 801739c:	e04f      	b.n	801743e <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	895a      	ldrh	r2, [r3, #10]
 80173a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80173a4:	1ad3      	subs	r3, r2, r3
 80173a6:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80173a8:	8b7a      	ldrh	r2, [r7, #26]
 80173aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80173ac:	4293      	cmp	r3, r2
 80173ae:	bf28      	it	cs
 80173b0:	4613      	movcs	r3, r2
 80173b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80173b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d105      	bne.n	80173c6 <ip4_frag+0x10a>
        poff = 0;
 80173ba:	2300      	movs	r3, #0
 80173bc:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	60fb      	str	r3, [r7, #12]
        continue;
 80173c4:	e03b      	b.n	801743e <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80173c6:	f7ff ff21 	bl	801720c <ip_frag_alloc_pbuf_custom_ref>
 80173ca:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 80173cc:	697b      	ldr	r3, [r7, #20]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d103      	bne.n	80173da <ip4_frag+0x11e>
        pbuf_free(rambuf);
 80173d2:	6a38      	ldr	r0, [r7, #32]
 80173d4:	f7f8 fd92 	bl	800fefc <pbuf_free>
        goto memerr;
 80173d8:	e07c      	b.n	80174d4 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80173da:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80173e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80173e2:	4413      	add	r3, r2
 80173e4:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 80173e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80173e8:	9201      	str	r2, [sp, #4]
 80173ea:	9300      	str	r3, [sp, #0]
 80173ec:	4603      	mov	r3, r0
 80173ee:	2202      	movs	r2, #2
 80173f0:	2004      	movs	r0, #4
 80173f2:	f7f8 fba5 	bl	800fb40 <pbuf_alloced_custom>
 80173f6:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 80173f8:	693b      	ldr	r3, [r7, #16]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d106      	bne.n	801740c <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 80173fe:	6978      	ldr	r0, [r7, #20]
 8017400:	f7ff ff0c 	bl	801721c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017404:	6a38      	ldr	r0, [r7, #32]
 8017406:	f7f8 fd79 	bl	800fefc <pbuf_free>
        goto memerr;
 801740a:	e063      	b.n	80174d4 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 801740c:	68f8      	ldr	r0, [r7, #12]
 801740e:	f7f8 fe27 	bl	8010060 <pbuf_ref>
      pcr->original = p;
 8017412:	697b      	ldr	r3, [r7, #20]
 8017414:	68fa      	ldr	r2, [r7, #12]
 8017416:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017418:	697b      	ldr	r3, [r7, #20]
 801741a:	4a36      	ldr	r2, [pc, #216]	; (80174f4 <ip4_frag+0x238>)
 801741c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801741e:	6939      	ldr	r1, [r7, #16]
 8017420:	6a38      	ldr	r0, [r7, #32]
 8017422:	f7f8 fe45 	bl	80100b0 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8017426:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8017428:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801742a:	1ad3      	subs	r3, r2, r3
 801742c:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 801742e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017430:	2b00      	cmp	r3, #0
 8017432:	d004      	beq.n	801743e <ip4_frag+0x182>
        poff = 0;
 8017434:	2300      	movs	r3, #0
 8017436:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801743e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017440:	2b00      	cmp	r3, #0
 8017442:	d1ac      	bne.n	801739e <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8017444:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8017446:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017448:	4413      	add	r3, r2
 801744a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801744c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801744e:	68bb      	ldr	r3, [r7, #8]
 8017450:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017452:	3b14      	subs	r3, #20
 8017454:	429a      	cmp	r2, r3
 8017456:	bfd4      	ite	le
 8017458:	2301      	movle	r3, #1
 801745a:	2300      	movgt	r3, #0
 801745c:	b2db      	uxtb	r3, r3
 801745e:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017460:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8017462:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017466:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8017468:	69fb      	ldr	r3, [r7, #28]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d103      	bne.n	8017476 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 801746e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017470:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017474:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017476:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017478:	4618      	mov	r0, r3
 801747a:	f7f7 fa27 	bl	800e8cc <lwip_htons>
 801747e:	4603      	mov	r3, r0
 8017480:	461a      	mov	r2, r3
 8017482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017484:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8017486:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017488:	3314      	adds	r3, #20
 801748a:	b29b      	uxth	r3, r3
 801748c:	4618      	mov	r0, r3
 801748e:	f7f7 fa1d 	bl	800e8cc <lwip_htons>
 8017492:	4603      	mov	r3, r0
 8017494:	461a      	mov	r2, r3
 8017496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017498:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801749a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801749c:	2200      	movs	r2, #0
 801749e:	729a      	strb	r2, [r3, #10]
 80174a0:	2200      	movs	r2, #0
 80174a2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80174a4:	68bb      	ldr	r3, [r7, #8]
 80174a6:	695b      	ldr	r3, [r3, #20]
 80174a8:	687a      	ldr	r2, [r7, #4]
 80174aa:	6a39      	ldr	r1, [r7, #32]
 80174ac:	68b8      	ldr	r0, [r7, #8]
 80174ae:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80174b0:	6a38      	ldr	r0, [r7, #32]
 80174b2:	f7f8 fd23 	bl	800fefc <pbuf_free>
    left -= fragsize;
 80174b6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80174b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80174ba:	1ad3      	subs	r3, r2, r3
 80174bc:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 80174be:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80174c0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80174c2:	4413      	add	r3, r2
 80174c4:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 80174c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	f47f af3f 	bne.w	801734c <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80174ce:	2300      	movs	r3, #0
 80174d0:	e002      	b.n	80174d8 <ip4_frag+0x21c>
      goto memerr;
 80174d2:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80174d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80174d8:	4618      	mov	r0, r3
 80174da:	3740      	adds	r7, #64	; 0x40
 80174dc:	46bd      	mov	sp, r7
 80174de:	bd80      	pop	{r7, pc}
 80174e0:	0801a61c 	.word	0x0801a61c
 80174e4:	0801a7a8 	.word	0x0801a7a8
 80174e8:	0801a664 	.word	0x0801a664
 80174ec:	0801a7d0 	.word	0x0801a7d0
 80174f0:	0801a7ec 	.word	0x0801a7ec
 80174f4:	08017255 	.word	0x08017255

080174f8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80174f8:	b580      	push	{r7, lr}
 80174fa:	b086      	sub	sp, #24
 80174fc:	af00      	add	r7, sp, #0
 80174fe:	6078      	str	r0, [r7, #4]
 8017500:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8017502:	230e      	movs	r3, #14
 8017504:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	895b      	ldrh	r3, [r3, #10]
 801750a:	2b0e      	cmp	r3, #14
 801750c:	d977      	bls.n	80175fe <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	685b      	ldr	r3, [r3, #4]
 8017512:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017514:	693b      	ldr	r3, [r7, #16]
 8017516:	7b1a      	ldrb	r2, [r3, #12]
 8017518:	7b5b      	ldrb	r3, [r3, #13]
 801751a:	021b      	lsls	r3, r3, #8
 801751c:	4313      	orrs	r3, r2
 801751e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017520:	693b      	ldr	r3, [r7, #16]
 8017522:	781b      	ldrb	r3, [r3, #0]
 8017524:	f003 0301 	and.w	r3, r3, #1
 8017528:	2b00      	cmp	r3, #0
 801752a:	d023      	beq.n	8017574 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801752c:	693b      	ldr	r3, [r7, #16]
 801752e:	781b      	ldrb	r3, [r3, #0]
 8017530:	2b01      	cmp	r3, #1
 8017532:	d10f      	bne.n	8017554 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017534:	693b      	ldr	r3, [r7, #16]
 8017536:	785b      	ldrb	r3, [r3, #1]
 8017538:	2b00      	cmp	r3, #0
 801753a:	d11b      	bne.n	8017574 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801753c:	693b      	ldr	r3, [r7, #16]
 801753e:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017540:	2b5e      	cmp	r3, #94	; 0x5e
 8017542:	d117      	bne.n	8017574 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	7b5b      	ldrb	r3, [r3, #13]
 8017548:	f043 0310 	orr.w	r3, r3, #16
 801754c:	b2da      	uxtb	r2, r3
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	735a      	strb	r2, [r3, #13]
 8017552:	e00f      	b.n	8017574 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017554:	693b      	ldr	r3, [r7, #16]
 8017556:	2206      	movs	r2, #6
 8017558:	4930      	ldr	r1, [pc, #192]	; (801761c <ethernet_input+0x124>)
 801755a:	4618      	mov	r0, r3
 801755c:	f000 f9f8 	bl	8017950 <memcmp>
 8017560:	4603      	mov	r3, r0
 8017562:	2b00      	cmp	r3, #0
 8017564:	d106      	bne.n	8017574 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	7b5b      	ldrb	r3, [r3, #13]
 801756a:	f043 0308 	orr.w	r3, r3, #8
 801756e:	b2da      	uxtb	r2, r3
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017574:	89fb      	ldrh	r3, [r7, #14]
 8017576:	2b08      	cmp	r3, #8
 8017578:	d003      	beq.n	8017582 <ethernet_input+0x8a>
 801757a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801757e:	d01e      	beq.n	80175be <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017580:	e044      	b.n	801760c <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017582:	683b      	ldr	r3, [r7, #0]
 8017584:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8017588:	f003 0308 	and.w	r3, r3, #8
 801758c:	2b00      	cmp	r3, #0
 801758e:	d038      	beq.n	8017602 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	895b      	ldrh	r3, [r3, #10]
 8017594:	461a      	mov	r2, r3
 8017596:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801759a:	429a      	cmp	r2, r3
 801759c:	db33      	blt.n	8017606 <ethernet_input+0x10e>
 801759e:	8afb      	ldrh	r3, [r7, #22]
 80175a0:	425b      	negs	r3, r3
 80175a2:	b29b      	uxth	r3, r3
 80175a4:	b21b      	sxth	r3, r3
 80175a6:	4619      	mov	r1, r3
 80175a8:	6878      	ldr	r0, [r7, #4]
 80175aa:	f7f8 fc83 	bl	800feb4 <pbuf_header>
 80175ae:	4603      	mov	r3, r0
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d128      	bne.n	8017606 <ethernet_input+0x10e>
        ip4_input(p, netif);
 80175b4:	6839      	ldr	r1, [r7, #0]
 80175b6:	6878      	ldr	r0, [r7, #4]
 80175b8:	f7fe ff80 	bl	80164bc <ip4_input>
      break;
 80175bc:	e01d      	b.n	80175fa <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80175be:	683b      	ldr	r3, [r7, #0]
 80175c0:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80175c4:	f003 0308 	and.w	r3, r3, #8
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d01e      	beq.n	801760a <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	895b      	ldrh	r3, [r3, #10]
 80175d0:	461a      	mov	r2, r3
 80175d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80175d6:	429a      	cmp	r2, r3
 80175d8:	db15      	blt.n	8017606 <ethernet_input+0x10e>
 80175da:	8afb      	ldrh	r3, [r7, #22]
 80175dc:	425b      	negs	r3, r3
 80175de:	b29b      	uxth	r3, r3
 80175e0:	b21b      	sxth	r3, r3
 80175e2:	4619      	mov	r1, r3
 80175e4:	6878      	ldr	r0, [r7, #4]
 80175e6:	f7f8 fc65 	bl	800feb4 <pbuf_header>
 80175ea:	4603      	mov	r3, r0
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d10a      	bne.n	8017606 <ethernet_input+0x10e>
        etharp_input(p, netif);
 80175f0:	6839      	ldr	r1, [r7, #0]
 80175f2:	6878      	ldr	r0, [r7, #4]
 80175f4:	f7fe f8ca 	bl	801578c <etharp_input>
      break;
 80175f8:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80175fa:	2300      	movs	r3, #0
 80175fc:	e00a      	b.n	8017614 <ethernet_input+0x11c>
    goto free_and_return;
 80175fe:	bf00      	nop
 8017600:	e004      	b.n	801760c <ethernet_input+0x114>
        goto free_and_return;
 8017602:	bf00      	nop
 8017604:	e002      	b.n	801760c <ethernet_input+0x114>

free_and_return:
 8017606:	bf00      	nop
 8017608:	e000      	b.n	801760c <ethernet_input+0x114>
        goto free_and_return;
 801760a:	bf00      	nop
  pbuf_free(p);
 801760c:	6878      	ldr	r0, [r7, #4]
 801760e:	f7f8 fc75 	bl	800fefc <pbuf_free>
  return ERR_OK;
 8017612:	2300      	movs	r3, #0
}
 8017614:	4618      	mov	r0, r3
 8017616:	3718      	adds	r7, #24
 8017618:	46bd      	mov	sp, r7
 801761a:	bd80      	pop	{r7, pc}
 801761c:	0801a9e0 	.word	0x0801a9e0

08017620 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8017620:	b580      	push	{r7, lr}
 8017622:	b086      	sub	sp, #24
 8017624:	af00      	add	r7, sp, #0
 8017626:	60f8      	str	r0, [r7, #12]
 8017628:	60b9      	str	r1, [r7, #8]
 801762a:	607a      	str	r2, [r7, #4]
 801762c:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801762e:	8c3b      	ldrh	r3, [r7, #32]
 8017630:	4618      	mov	r0, r3
 8017632:	f7f7 f94b 	bl	800e8cc <lwip_htons>
 8017636:	4603      	mov	r3, r0
 8017638:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801763a:	210e      	movs	r1, #14
 801763c:	68b8      	ldr	r0, [r7, #8]
 801763e:	f7f8 fc39 	bl	800feb4 <pbuf_header>
 8017642:	4603      	mov	r3, r0
 8017644:	2b00      	cmp	r3, #0
 8017646:	d125      	bne.n	8017694 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8017648:	68bb      	ldr	r3, [r7, #8]
 801764a:	685b      	ldr	r3, [r3, #4]
 801764c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801764e:	693b      	ldr	r3, [r7, #16]
 8017650:	8afa      	ldrh	r2, [r7, #22]
 8017652:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8017654:	693b      	ldr	r3, [r7, #16]
 8017656:	2206      	movs	r2, #6
 8017658:	6839      	ldr	r1, [r7, #0]
 801765a:	4618      	mov	r0, r3
 801765c:	f000 f987 	bl	801796e <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8017660:	693b      	ldr	r3, [r7, #16]
 8017662:	3306      	adds	r3, #6
 8017664:	2206      	movs	r2, #6
 8017666:	6879      	ldr	r1, [r7, #4]
 8017668:	4618      	mov	r0, r3
 801766a:	f000 f980 	bl	801796e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017674:	2b06      	cmp	r3, #6
 8017676:	d006      	beq.n	8017686 <ethernet_output+0x66>
 8017678:	4b0a      	ldr	r3, [pc, #40]	; (80176a4 <ethernet_output+0x84>)
 801767a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801767e:	490a      	ldr	r1, [pc, #40]	; (80176a8 <ethernet_output+0x88>)
 8017680:	480a      	ldr	r0, [pc, #40]	; (80176ac <ethernet_output+0x8c>)
 8017682:	f000 f987 	bl	8017994 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	699b      	ldr	r3, [r3, #24]
 801768a:	68b9      	ldr	r1, [r7, #8]
 801768c:	68f8      	ldr	r0, [r7, #12]
 801768e:	4798      	blx	r3
 8017690:	4603      	mov	r3, r0
 8017692:	e002      	b.n	801769a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017694:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017696:	f06f 0301 	mvn.w	r3, #1
}
 801769a:	4618      	mov	r0, r3
 801769c:	3718      	adds	r7, #24
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd80      	pop	{r7, pc}
 80176a2:	bf00      	nop
 80176a4:	0801a80c 	.word	0x0801a80c
 80176a8:	0801a844 	.word	0x0801a844
 80176ac:	0801a878 	.word	0x0801a878

080176b0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b086      	sub	sp, #24
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
 80176b8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80176ba:	683b      	ldr	r3, [r7, #0]
 80176bc:	60bb      	str	r3, [r7, #8]
 80176be:	2304      	movs	r3, #4
 80176c0:	60fb      	str	r3, [r7, #12]
 80176c2:	2300      	movs	r3, #0
 80176c4:	613b      	str	r3, [r7, #16]
 80176c6:	2300      	movs	r3, #0
 80176c8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80176ca:	f107 0308 	add.w	r3, r7, #8
 80176ce:	2100      	movs	r1, #0
 80176d0:	4618      	mov	r0, r3
 80176d2:	f7f3 fe09 	bl	800b2e8 <osMessageCreate>
 80176d6:	4602      	mov	r2, r0
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d102      	bne.n	80176ea <sys_mbox_new+0x3a>
    return ERR_MEM;
 80176e4:	f04f 33ff 	mov.w	r3, #4294967295
 80176e8:	e000      	b.n	80176ec <sys_mbox_new+0x3c>

  return ERR_OK;
 80176ea:	2300      	movs	r3, #0
}
 80176ec:	4618      	mov	r0, r3
 80176ee:	3718      	adds	r7, #24
 80176f0:	46bd      	mov	sp, r7
 80176f2:	bd80      	pop	{r7, pc}

080176f4 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 80176f4:	b580      	push	{r7, lr}
 80176f6:	b082      	sub	sp, #8
 80176f8:	af00      	add	r7, sp, #0
 80176fa:	6078      	str	r0, [r7, #4]
 80176fc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 80176fe:	bf00      	nop
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	6839      	ldr	r1, [r7, #0]
 8017706:	f04f 32ff 	mov.w	r2, #4294967295
 801770a:	4618      	mov	r0, r3
 801770c:	f7f3 fe16 	bl	800b33c <osMessagePut>
 8017710:	4603      	mov	r3, r0
 8017712:	2b00      	cmp	r3, #0
 8017714:	d1f4      	bne.n	8017700 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 8017716:	bf00      	nop
 8017718:	3708      	adds	r7, #8
 801771a:	46bd      	mov	sp, r7
 801771c:	bd80      	pop	{r7, pc}

0801771e <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801771e:	b580      	push	{r7, lr}
 8017720:	b084      	sub	sp, #16
 8017722:	af00      	add	r7, sp, #0
 8017724:	6078      	str	r0, [r7, #4]
 8017726:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	6839      	ldr	r1, [r7, #0]
 801772e:	2200      	movs	r2, #0
 8017730:	4618      	mov	r0, r3
 8017732:	f7f3 fe03 	bl	800b33c <osMessagePut>
 8017736:	4603      	mov	r3, r0
 8017738:	2b00      	cmp	r3, #0
 801773a:	d102      	bne.n	8017742 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801773c:	2300      	movs	r3, #0
 801773e:	73fb      	strb	r3, [r7, #15]
 8017740:	e001      	b.n	8017746 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017742:	23ff      	movs	r3, #255	; 0xff
 8017744:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017746:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801774a:	4618      	mov	r0, r3
 801774c:	3710      	adds	r7, #16
 801774e:	46bd      	mov	sp, r7
 8017750:	bd80      	pop	{r7, pc}

08017752 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017752:	b580      	push	{r7, lr}
 8017754:	b08c      	sub	sp, #48	; 0x30
 8017756:	af00      	add	r7, sp, #0
 8017758:	61f8      	str	r0, [r7, #28]
 801775a:	61b9      	str	r1, [r7, #24]
 801775c:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801775e:	f7f3 fc1c 	bl	800af9a <osKernelSysTick>
 8017762:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017764:	697b      	ldr	r3, [r7, #20]
 8017766:	2b00      	cmp	r3, #0
 8017768:	d017      	beq.n	801779a <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801776a:	69fb      	ldr	r3, [r7, #28]
 801776c:	6819      	ldr	r1, [r3, #0]
 801776e:	f107 0320 	add.w	r3, r7, #32
 8017772:	697a      	ldr	r2, [r7, #20]
 8017774:	4618      	mov	r0, r3
 8017776:	f7f3 fe21 	bl	800b3bc <osMessageGet>

    if(event.status == osEventMessage)
 801777a:	6a3b      	ldr	r3, [r7, #32]
 801777c:	2b10      	cmp	r3, #16
 801777e:	d109      	bne.n	8017794 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017782:	461a      	mov	r2, r3
 8017784:	69bb      	ldr	r3, [r7, #24]
 8017786:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017788:	f7f3 fc07 	bl	800af9a <osKernelSysTick>
 801778c:	4602      	mov	r2, r0
 801778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017790:	1ad3      	subs	r3, r2, r3
 8017792:	e019      	b.n	80177c8 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017794:	f04f 33ff 	mov.w	r3, #4294967295
 8017798:	e016      	b.n	80177c8 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801779a:	69fb      	ldr	r3, [r7, #28]
 801779c:	6819      	ldr	r1, [r3, #0]
 801779e:	463b      	mov	r3, r7
 80177a0:	f04f 32ff 	mov.w	r2, #4294967295
 80177a4:	4618      	mov	r0, r3
 80177a6:	f7f3 fe09 	bl	800b3bc <osMessageGet>
 80177aa:	f107 0320 	add.w	r3, r7, #32
 80177ae:	463a      	mov	r2, r7
 80177b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80177b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80177b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177b8:	461a      	mov	r2, r3
 80177ba:	69bb      	ldr	r3, [r7, #24]
 80177bc:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80177be:	f7f3 fbec 	bl	800af9a <osKernelSysTick>
 80177c2:	4602      	mov	r2, r0
 80177c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177c6:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80177c8:	4618      	mov	r0, r3
 80177ca:	3730      	adds	r7, #48	; 0x30
 80177cc:	46bd      	mov	sp, r7
 80177ce:	bd80      	pop	{r7, pc}

080177d0 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80177d0:	b480      	push	{r7}
 80177d2:	b083      	sub	sp, #12
 80177d4:	af00      	add	r7, sp, #0
 80177d6:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d101      	bne.n	80177e4 <sys_mbox_valid+0x14>
    return 0;
 80177e0:	2300      	movs	r3, #0
 80177e2:	e000      	b.n	80177e6 <sys_mbox_valid+0x16>
  else
    return 1;
 80177e4:	2301      	movs	r3, #1
}
 80177e6:	4618      	mov	r0, r3
 80177e8:	370c      	adds	r7, #12
 80177ea:	46bd      	mov	sp, r7
 80177ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177f0:	4770      	bx	lr
	...

080177f4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80177f4:	b580      	push	{r7, lr}
 80177f6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80177f8:	4803      	ldr	r0, [pc, #12]	; (8017808 <sys_init+0x14>)
 80177fa:	f7f3 fc4a 	bl	800b092 <osMutexCreate>
 80177fe:	4602      	mov	r2, r0
 8017800:	4b02      	ldr	r3, [pc, #8]	; (801780c <sys_init+0x18>)
 8017802:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017804:	bf00      	nop
 8017806:	bd80      	pop	{r7, pc}
 8017808:	0801a9f0 	.word	0x0801a9f0
 801780c:	24024e6c 	.word	0x24024e6c

08017810 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017810:	b580      	push	{r7, lr}
 8017812:	b084      	sub	sp, #16
 8017814:	af00      	add	r7, sp, #0
 8017816:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8017818:	2300      	movs	r3, #0
 801781a:	60bb      	str	r3, [r7, #8]
 801781c:	2300      	movs	r3, #0
 801781e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017820:	f107 0308 	add.w	r3, r7, #8
 8017824:	4618      	mov	r0, r3
 8017826:	f7f3 fc34 	bl	800b092 <osMutexCreate>
 801782a:	4602      	mov	r2, r0
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	2b00      	cmp	r3, #0
 8017836:	d102      	bne.n	801783e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017838:	f04f 33ff 	mov.w	r3, #4294967295
 801783c:	e000      	b.n	8017840 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801783e:	2300      	movs	r3, #0
}
 8017840:	4618      	mov	r0, r3
 8017842:	3710      	adds	r7, #16
 8017844:	46bd      	mov	sp, r7
 8017846:	bd80      	pop	{r7, pc}

08017848 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017848:	b580      	push	{r7, lr}
 801784a:	b082      	sub	sp, #8
 801784c:	af00      	add	r7, sp, #0
 801784e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	f04f 31ff 	mov.w	r1, #4294967295
 8017858:	4618      	mov	r0, r3
 801785a:	f7f3 fc33 	bl	800b0c4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801785e:	bf00      	nop
 8017860:	3708      	adds	r7, #8
 8017862:	46bd      	mov	sp, r7
 8017864:	bd80      	pop	{r7, pc}

08017866 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017866:	b580      	push	{r7, lr}
 8017868:	b082      	sub	sp, #8
 801786a:	af00      	add	r7, sp, #0
 801786c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	681b      	ldr	r3, [r3, #0]
 8017872:	4618      	mov	r0, r3
 8017874:	f7f3 fc74 	bl	800b160 <osMutexRelease>
}
 8017878:	bf00      	nop
 801787a:	3708      	adds	r7, #8
 801787c:	46bd      	mov	sp, r7
 801787e:	bd80      	pop	{r7, pc}

08017880 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017880:	b580      	push	{r7, lr}
 8017882:	b08c      	sub	sp, #48	; 0x30
 8017884:	af00      	add	r7, sp, #0
 8017886:	60f8      	str	r0, [r7, #12]
 8017888:	60b9      	str	r1, [r7, #8]
 801788a:	607a      	str	r2, [r7, #4]
 801788c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801788e:	f107 0314 	add.w	r3, r7, #20
 8017892:	2200      	movs	r2, #0
 8017894:	601a      	str	r2, [r3, #0]
 8017896:	605a      	str	r2, [r3, #4]
 8017898:	609a      	str	r2, [r3, #8]
 801789a:	60da      	str	r2, [r3, #12]
 801789c:	611a      	str	r2, [r3, #16]
 801789e:	615a      	str	r2, [r3, #20]
 80178a0:	619a      	str	r2, [r3, #24]
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	617b      	str	r3, [r7, #20]
 80178a6:	68bb      	ldr	r3, [r7, #8]
 80178a8:	61bb      	str	r3, [r7, #24]
 80178aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80178ac:	b21b      	sxth	r3, r3
 80178ae:	83bb      	strh	r3, [r7, #28]
 80178b0:	683b      	ldr	r3, [r7, #0]
 80178b2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80178b4:	f107 0314 	add.w	r3, r7, #20
 80178b8:	6879      	ldr	r1, [r7, #4]
 80178ba:	4618      	mov	r0, r3
 80178bc:	f7f3 fb7d 	bl	800afba <osThreadCreate>
 80178c0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80178c2:	4618      	mov	r0, r3
 80178c4:	3730      	adds	r7, #48	; 0x30
 80178c6:	46bd      	mov	sp, r7
 80178c8:	bd80      	pop	{r7, pc}
	...

080178cc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80178cc:	b580      	push	{r7, lr}
 80178ce:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80178d0:	4b04      	ldr	r3, [pc, #16]	; (80178e4 <sys_arch_protect+0x18>)
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	f04f 31ff 	mov.w	r1, #4294967295
 80178d8:	4618      	mov	r0, r3
 80178da:	f7f3 fbf3 	bl	800b0c4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80178de:	2301      	movs	r3, #1
}
 80178e0:	4618      	mov	r0, r3
 80178e2:	bd80      	pop	{r7, pc}
 80178e4:	24024e6c 	.word	0x24024e6c

080178e8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80178e8:	b580      	push	{r7, lr}
 80178ea:	b082      	sub	sp, #8
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80178f0:	4b04      	ldr	r3, [pc, #16]	; (8017904 <sys_arch_unprotect+0x1c>)
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	4618      	mov	r0, r3
 80178f6:	f7f3 fc33 	bl	800b160 <osMutexRelease>
}
 80178fa:	bf00      	nop
 80178fc:	3708      	adds	r7, #8
 80178fe:	46bd      	mov	sp, r7
 8017900:	bd80      	pop	{r7, pc}
 8017902:	bf00      	nop
 8017904:	24024e6c 	.word	0x24024e6c

08017908 <__libc_init_array>:
 8017908:	b570      	push	{r4, r5, r6, lr}
 801790a:	4e0d      	ldr	r6, [pc, #52]	; (8017940 <__libc_init_array+0x38>)
 801790c:	4c0d      	ldr	r4, [pc, #52]	; (8017944 <__libc_init_array+0x3c>)
 801790e:	1ba4      	subs	r4, r4, r6
 8017910:	10a4      	asrs	r4, r4, #2
 8017912:	2500      	movs	r5, #0
 8017914:	42a5      	cmp	r5, r4
 8017916:	d109      	bne.n	801792c <__libc_init_array+0x24>
 8017918:	4e0b      	ldr	r6, [pc, #44]	; (8017948 <__libc_init_array+0x40>)
 801791a:	4c0c      	ldr	r4, [pc, #48]	; (801794c <__libc_init_array+0x44>)
 801791c:	f000 ff1e 	bl	801875c <_init>
 8017920:	1ba4      	subs	r4, r4, r6
 8017922:	10a4      	asrs	r4, r4, #2
 8017924:	2500      	movs	r5, #0
 8017926:	42a5      	cmp	r5, r4
 8017928:	d105      	bne.n	8017936 <__libc_init_array+0x2e>
 801792a:	bd70      	pop	{r4, r5, r6, pc}
 801792c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017930:	4798      	blx	r3
 8017932:	3501      	adds	r5, #1
 8017934:	e7ee      	b.n	8017914 <__libc_init_array+0xc>
 8017936:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801793a:	4798      	blx	r3
 801793c:	3501      	adds	r5, #1
 801793e:	e7f2      	b.n	8017926 <__libc_init_array+0x1e>
 8017940:	0801aa98 	.word	0x0801aa98
 8017944:	0801aa98 	.word	0x0801aa98
 8017948:	0801aa98 	.word	0x0801aa98
 801794c:	0801aa9c 	.word	0x0801aa9c

08017950 <memcmp>:
 8017950:	b530      	push	{r4, r5, lr}
 8017952:	2400      	movs	r4, #0
 8017954:	42a2      	cmp	r2, r4
 8017956:	d101      	bne.n	801795c <memcmp+0xc>
 8017958:	2000      	movs	r0, #0
 801795a:	e007      	b.n	801796c <memcmp+0x1c>
 801795c:	5d03      	ldrb	r3, [r0, r4]
 801795e:	3401      	adds	r4, #1
 8017960:	190d      	adds	r5, r1, r4
 8017962:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8017966:	42ab      	cmp	r3, r5
 8017968:	d0f4      	beq.n	8017954 <memcmp+0x4>
 801796a:	1b58      	subs	r0, r3, r5
 801796c:	bd30      	pop	{r4, r5, pc}

0801796e <memcpy>:
 801796e:	b510      	push	{r4, lr}
 8017970:	1e43      	subs	r3, r0, #1
 8017972:	440a      	add	r2, r1
 8017974:	4291      	cmp	r1, r2
 8017976:	d100      	bne.n	801797a <memcpy+0xc>
 8017978:	bd10      	pop	{r4, pc}
 801797a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801797e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017982:	e7f7      	b.n	8017974 <memcpy+0x6>

08017984 <memset>:
 8017984:	4402      	add	r2, r0
 8017986:	4603      	mov	r3, r0
 8017988:	4293      	cmp	r3, r2
 801798a:	d100      	bne.n	801798e <memset+0xa>
 801798c:	4770      	bx	lr
 801798e:	f803 1b01 	strb.w	r1, [r3], #1
 8017992:	e7f9      	b.n	8017988 <memset+0x4>

08017994 <iprintf>:
 8017994:	b40f      	push	{r0, r1, r2, r3}
 8017996:	4b0a      	ldr	r3, [pc, #40]	; (80179c0 <iprintf+0x2c>)
 8017998:	b513      	push	{r0, r1, r4, lr}
 801799a:	681c      	ldr	r4, [r3, #0]
 801799c:	b124      	cbz	r4, 80179a8 <iprintf+0x14>
 801799e:	69a3      	ldr	r3, [r4, #24]
 80179a0:	b913      	cbnz	r3, 80179a8 <iprintf+0x14>
 80179a2:	4620      	mov	r0, r4
 80179a4:	f000 f84e 	bl	8017a44 <__sinit>
 80179a8:	ab05      	add	r3, sp, #20
 80179aa:	9a04      	ldr	r2, [sp, #16]
 80179ac:	68a1      	ldr	r1, [r4, #8]
 80179ae:	9301      	str	r3, [sp, #4]
 80179b0:	4620      	mov	r0, r4
 80179b2:	f000 f955 	bl	8017c60 <_vfiprintf_r>
 80179b6:	b002      	add	sp, #8
 80179b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179bc:	b004      	add	sp, #16
 80179be:	4770      	bx	lr
 80179c0:	2400002c 	.word	0x2400002c

080179c4 <std>:
 80179c4:	2300      	movs	r3, #0
 80179c6:	b510      	push	{r4, lr}
 80179c8:	4604      	mov	r4, r0
 80179ca:	e9c0 3300 	strd	r3, r3, [r0]
 80179ce:	6083      	str	r3, [r0, #8]
 80179d0:	8181      	strh	r1, [r0, #12]
 80179d2:	6643      	str	r3, [r0, #100]	; 0x64
 80179d4:	81c2      	strh	r2, [r0, #14]
 80179d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80179da:	6183      	str	r3, [r0, #24]
 80179dc:	4619      	mov	r1, r3
 80179de:	2208      	movs	r2, #8
 80179e0:	305c      	adds	r0, #92	; 0x5c
 80179e2:	f7ff ffcf 	bl	8017984 <memset>
 80179e6:	4b05      	ldr	r3, [pc, #20]	; (80179fc <std+0x38>)
 80179e8:	6263      	str	r3, [r4, #36]	; 0x24
 80179ea:	4b05      	ldr	r3, [pc, #20]	; (8017a00 <std+0x3c>)
 80179ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80179ee:	4b05      	ldr	r3, [pc, #20]	; (8017a04 <std+0x40>)
 80179f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80179f2:	4b05      	ldr	r3, [pc, #20]	; (8017a08 <std+0x44>)
 80179f4:	6224      	str	r4, [r4, #32]
 80179f6:	6323      	str	r3, [r4, #48]	; 0x30
 80179f8:	bd10      	pop	{r4, pc}
 80179fa:	bf00      	nop
 80179fc:	080181bd 	.word	0x080181bd
 8017a00:	080181df 	.word	0x080181df
 8017a04:	08018217 	.word	0x08018217
 8017a08:	0801823b 	.word	0x0801823b

08017a0c <_cleanup_r>:
 8017a0c:	4901      	ldr	r1, [pc, #4]	; (8017a14 <_cleanup_r+0x8>)
 8017a0e:	f000 b885 	b.w	8017b1c <_fwalk_reent>
 8017a12:	bf00      	nop
 8017a14:	08018515 	.word	0x08018515

08017a18 <__sfmoreglue>:
 8017a18:	b570      	push	{r4, r5, r6, lr}
 8017a1a:	1e4a      	subs	r2, r1, #1
 8017a1c:	2568      	movs	r5, #104	; 0x68
 8017a1e:	4355      	muls	r5, r2
 8017a20:	460e      	mov	r6, r1
 8017a22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017a26:	f000 f897 	bl	8017b58 <_malloc_r>
 8017a2a:	4604      	mov	r4, r0
 8017a2c:	b140      	cbz	r0, 8017a40 <__sfmoreglue+0x28>
 8017a2e:	2100      	movs	r1, #0
 8017a30:	e9c0 1600 	strd	r1, r6, [r0]
 8017a34:	300c      	adds	r0, #12
 8017a36:	60a0      	str	r0, [r4, #8]
 8017a38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017a3c:	f7ff ffa2 	bl	8017984 <memset>
 8017a40:	4620      	mov	r0, r4
 8017a42:	bd70      	pop	{r4, r5, r6, pc}

08017a44 <__sinit>:
 8017a44:	6983      	ldr	r3, [r0, #24]
 8017a46:	b510      	push	{r4, lr}
 8017a48:	4604      	mov	r4, r0
 8017a4a:	bb33      	cbnz	r3, 8017a9a <__sinit+0x56>
 8017a4c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017a50:	6503      	str	r3, [r0, #80]	; 0x50
 8017a52:	4b12      	ldr	r3, [pc, #72]	; (8017a9c <__sinit+0x58>)
 8017a54:	4a12      	ldr	r2, [pc, #72]	; (8017aa0 <__sinit+0x5c>)
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	6282      	str	r2, [r0, #40]	; 0x28
 8017a5a:	4298      	cmp	r0, r3
 8017a5c:	bf04      	itt	eq
 8017a5e:	2301      	moveq	r3, #1
 8017a60:	6183      	streq	r3, [r0, #24]
 8017a62:	f000 f81f 	bl	8017aa4 <__sfp>
 8017a66:	6060      	str	r0, [r4, #4]
 8017a68:	4620      	mov	r0, r4
 8017a6a:	f000 f81b 	bl	8017aa4 <__sfp>
 8017a6e:	60a0      	str	r0, [r4, #8]
 8017a70:	4620      	mov	r0, r4
 8017a72:	f000 f817 	bl	8017aa4 <__sfp>
 8017a76:	2200      	movs	r2, #0
 8017a78:	60e0      	str	r0, [r4, #12]
 8017a7a:	2104      	movs	r1, #4
 8017a7c:	6860      	ldr	r0, [r4, #4]
 8017a7e:	f7ff ffa1 	bl	80179c4 <std>
 8017a82:	2201      	movs	r2, #1
 8017a84:	2109      	movs	r1, #9
 8017a86:	68a0      	ldr	r0, [r4, #8]
 8017a88:	f7ff ff9c 	bl	80179c4 <std>
 8017a8c:	2202      	movs	r2, #2
 8017a8e:	2112      	movs	r1, #18
 8017a90:	68e0      	ldr	r0, [r4, #12]
 8017a92:	f7ff ff97 	bl	80179c4 <std>
 8017a96:	2301      	movs	r3, #1
 8017a98:	61a3      	str	r3, [r4, #24]
 8017a9a:	bd10      	pop	{r4, pc}
 8017a9c:	0801a9f8 	.word	0x0801a9f8
 8017aa0:	08017a0d 	.word	0x08017a0d

08017aa4 <__sfp>:
 8017aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017aa6:	4b1b      	ldr	r3, [pc, #108]	; (8017b14 <__sfp+0x70>)
 8017aa8:	681e      	ldr	r6, [r3, #0]
 8017aaa:	69b3      	ldr	r3, [r6, #24]
 8017aac:	4607      	mov	r7, r0
 8017aae:	b913      	cbnz	r3, 8017ab6 <__sfp+0x12>
 8017ab0:	4630      	mov	r0, r6
 8017ab2:	f7ff ffc7 	bl	8017a44 <__sinit>
 8017ab6:	3648      	adds	r6, #72	; 0x48
 8017ab8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017abc:	3b01      	subs	r3, #1
 8017abe:	d503      	bpl.n	8017ac8 <__sfp+0x24>
 8017ac0:	6833      	ldr	r3, [r6, #0]
 8017ac2:	b133      	cbz	r3, 8017ad2 <__sfp+0x2e>
 8017ac4:	6836      	ldr	r6, [r6, #0]
 8017ac6:	e7f7      	b.n	8017ab8 <__sfp+0x14>
 8017ac8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017acc:	b16d      	cbz	r5, 8017aea <__sfp+0x46>
 8017ace:	3468      	adds	r4, #104	; 0x68
 8017ad0:	e7f4      	b.n	8017abc <__sfp+0x18>
 8017ad2:	2104      	movs	r1, #4
 8017ad4:	4638      	mov	r0, r7
 8017ad6:	f7ff ff9f 	bl	8017a18 <__sfmoreglue>
 8017ada:	6030      	str	r0, [r6, #0]
 8017adc:	2800      	cmp	r0, #0
 8017ade:	d1f1      	bne.n	8017ac4 <__sfp+0x20>
 8017ae0:	230c      	movs	r3, #12
 8017ae2:	603b      	str	r3, [r7, #0]
 8017ae4:	4604      	mov	r4, r0
 8017ae6:	4620      	mov	r0, r4
 8017ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017aea:	4b0b      	ldr	r3, [pc, #44]	; (8017b18 <__sfp+0x74>)
 8017aec:	6665      	str	r5, [r4, #100]	; 0x64
 8017aee:	e9c4 5500 	strd	r5, r5, [r4]
 8017af2:	60a5      	str	r5, [r4, #8]
 8017af4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017af8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017afc:	2208      	movs	r2, #8
 8017afe:	4629      	mov	r1, r5
 8017b00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017b04:	f7ff ff3e 	bl	8017984 <memset>
 8017b08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017b0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017b10:	e7e9      	b.n	8017ae6 <__sfp+0x42>
 8017b12:	bf00      	nop
 8017b14:	0801a9f8 	.word	0x0801a9f8
 8017b18:	ffff0001 	.word	0xffff0001

08017b1c <_fwalk_reent>:
 8017b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b20:	4680      	mov	r8, r0
 8017b22:	4689      	mov	r9, r1
 8017b24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017b28:	2600      	movs	r6, #0
 8017b2a:	b914      	cbnz	r4, 8017b32 <_fwalk_reent+0x16>
 8017b2c:	4630      	mov	r0, r6
 8017b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b32:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8017b36:	3f01      	subs	r7, #1
 8017b38:	d501      	bpl.n	8017b3e <_fwalk_reent+0x22>
 8017b3a:	6824      	ldr	r4, [r4, #0]
 8017b3c:	e7f5      	b.n	8017b2a <_fwalk_reent+0xe>
 8017b3e:	89ab      	ldrh	r3, [r5, #12]
 8017b40:	2b01      	cmp	r3, #1
 8017b42:	d907      	bls.n	8017b54 <_fwalk_reent+0x38>
 8017b44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017b48:	3301      	adds	r3, #1
 8017b4a:	d003      	beq.n	8017b54 <_fwalk_reent+0x38>
 8017b4c:	4629      	mov	r1, r5
 8017b4e:	4640      	mov	r0, r8
 8017b50:	47c8      	blx	r9
 8017b52:	4306      	orrs	r6, r0
 8017b54:	3568      	adds	r5, #104	; 0x68
 8017b56:	e7ee      	b.n	8017b36 <_fwalk_reent+0x1a>

08017b58 <_malloc_r>:
 8017b58:	b570      	push	{r4, r5, r6, lr}
 8017b5a:	1ccd      	adds	r5, r1, #3
 8017b5c:	f025 0503 	bic.w	r5, r5, #3
 8017b60:	3508      	adds	r5, #8
 8017b62:	2d0c      	cmp	r5, #12
 8017b64:	bf38      	it	cc
 8017b66:	250c      	movcc	r5, #12
 8017b68:	2d00      	cmp	r5, #0
 8017b6a:	4606      	mov	r6, r0
 8017b6c:	db01      	blt.n	8017b72 <_malloc_r+0x1a>
 8017b6e:	42a9      	cmp	r1, r5
 8017b70:	d903      	bls.n	8017b7a <_malloc_r+0x22>
 8017b72:	230c      	movs	r3, #12
 8017b74:	6033      	str	r3, [r6, #0]
 8017b76:	2000      	movs	r0, #0
 8017b78:	bd70      	pop	{r4, r5, r6, pc}
 8017b7a:	f000 fd6b 	bl	8018654 <__malloc_lock>
 8017b7e:	4a21      	ldr	r2, [pc, #132]	; (8017c04 <_malloc_r+0xac>)
 8017b80:	6814      	ldr	r4, [r2, #0]
 8017b82:	4621      	mov	r1, r4
 8017b84:	b991      	cbnz	r1, 8017bac <_malloc_r+0x54>
 8017b86:	4c20      	ldr	r4, [pc, #128]	; (8017c08 <_malloc_r+0xb0>)
 8017b88:	6823      	ldr	r3, [r4, #0]
 8017b8a:	b91b      	cbnz	r3, 8017b94 <_malloc_r+0x3c>
 8017b8c:	4630      	mov	r0, r6
 8017b8e:	f000 fb05 	bl	801819c <_sbrk_r>
 8017b92:	6020      	str	r0, [r4, #0]
 8017b94:	4629      	mov	r1, r5
 8017b96:	4630      	mov	r0, r6
 8017b98:	f000 fb00 	bl	801819c <_sbrk_r>
 8017b9c:	1c43      	adds	r3, r0, #1
 8017b9e:	d124      	bne.n	8017bea <_malloc_r+0x92>
 8017ba0:	230c      	movs	r3, #12
 8017ba2:	6033      	str	r3, [r6, #0]
 8017ba4:	4630      	mov	r0, r6
 8017ba6:	f000 fd56 	bl	8018656 <__malloc_unlock>
 8017baa:	e7e4      	b.n	8017b76 <_malloc_r+0x1e>
 8017bac:	680b      	ldr	r3, [r1, #0]
 8017bae:	1b5b      	subs	r3, r3, r5
 8017bb0:	d418      	bmi.n	8017be4 <_malloc_r+0x8c>
 8017bb2:	2b0b      	cmp	r3, #11
 8017bb4:	d90f      	bls.n	8017bd6 <_malloc_r+0x7e>
 8017bb6:	600b      	str	r3, [r1, #0]
 8017bb8:	50cd      	str	r5, [r1, r3]
 8017bba:	18cc      	adds	r4, r1, r3
 8017bbc:	4630      	mov	r0, r6
 8017bbe:	f000 fd4a 	bl	8018656 <__malloc_unlock>
 8017bc2:	f104 000b 	add.w	r0, r4, #11
 8017bc6:	1d23      	adds	r3, r4, #4
 8017bc8:	f020 0007 	bic.w	r0, r0, #7
 8017bcc:	1ac3      	subs	r3, r0, r3
 8017bce:	d0d3      	beq.n	8017b78 <_malloc_r+0x20>
 8017bd0:	425a      	negs	r2, r3
 8017bd2:	50e2      	str	r2, [r4, r3]
 8017bd4:	e7d0      	b.n	8017b78 <_malloc_r+0x20>
 8017bd6:	428c      	cmp	r4, r1
 8017bd8:	684b      	ldr	r3, [r1, #4]
 8017bda:	bf16      	itet	ne
 8017bdc:	6063      	strne	r3, [r4, #4]
 8017bde:	6013      	streq	r3, [r2, #0]
 8017be0:	460c      	movne	r4, r1
 8017be2:	e7eb      	b.n	8017bbc <_malloc_r+0x64>
 8017be4:	460c      	mov	r4, r1
 8017be6:	6849      	ldr	r1, [r1, #4]
 8017be8:	e7cc      	b.n	8017b84 <_malloc_r+0x2c>
 8017bea:	1cc4      	adds	r4, r0, #3
 8017bec:	f024 0403 	bic.w	r4, r4, #3
 8017bf0:	42a0      	cmp	r0, r4
 8017bf2:	d005      	beq.n	8017c00 <_malloc_r+0xa8>
 8017bf4:	1a21      	subs	r1, r4, r0
 8017bf6:	4630      	mov	r0, r6
 8017bf8:	f000 fad0 	bl	801819c <_sbrk_r>
 8017bfc:	3001      	adds	r0, #1
 8017bfe:	d0cf      	beq.n	8017ba0 <_malloc_r+0x48>
 8017c00:	6025      	str	r5, [r4, #0]
 8017c02:	e7db      	b.n	8017bbc <_malloc_r+0x64>
 8017c04:	24021940 	.word	0x24021940
 8017c08:	24021944 	.word	0x24021944

08017c0c <__sfputc_r>:
 8017c0c:	6893      	ldr	r3, [r2, #8]
 8017c0e:	3b01      	subs	r3, #1
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	b410      	push	{r4}
 8017c14:	6093      	str	r3, [r2, #8]
 8017c16:	da08      	bge.n	8017c2a <__sfputc_r+0x1e>
 8017c18:	6994      	ldr	r4, [r2, #24]
 8017c1a:	42a3      	cmp	r3, r4
 8017c1c:	db01      	blt.n	8017c22 <__sfputc_r+0x16>
 8017c1e:	290a      	cmp	r1, #10
 8017c20:	d103      	bne.n	8017c2a <__sfputc_r+0x1e>
 8017c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c26:	f000 bb0d 	b.w	8018244 <__swbuf_r>
 8017c2a:	6813      	ldr	r3, [r2, #0]
 8017c2c:	1c58      	adds	r0, r3, #1
 8017c2e:	6010      	str	r0, [r2, #0]
 8017c30:	7019      	strb	r1, [r3, #0]
 8017c32:	4608      	mov	r0, r1
 8017c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c38:	4770      	bx	lr

08017c3a <__sfputs_r>:
 8017c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c3c:	4606      	mov	r6, r0
 8017c3e:	460f      	mov	r7, r1
 8017c40:	4614      	mov	r4, r2
 8017c42:	18d5      	adds	r5, r2, r3
 8017c44:	42ac      	cmp	r4, r5
 8017c46:	d101      	bne.n	8017c4c <__sfputs_r+0x12>
 8017c48:	2000      	movs	r0, #0
 8017c4a:	e007      	b.n	8017c5c <__sfputs_r+0x22>
 8017c4c:	463a      	mov	r2, r7
 8017c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c52:	4630      	mov	r0, r6
 8017c54:	f7ff ffda 	bl	8017c0c <__sfputc_r>
 8017c58:	1c43      	adds	r3, r0, #1
 8017c5a:	d1f3      	bne.n	8017c44 <__sfputs_r+0xa>
 8017c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017c60 <_vfiprintf_r>:
 8017c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c64:	460c      	mov	r4, r1
 8017c66:	b09d      	sub	sp, #116	; 0x74
 8017c68:	4617      	mov	r7, r2
 8017c6a:	461d      	mov	r5, r3
 8017c6c:	4606      	mov	r6, r0
 8017c6e:	b118      	cbz	r0, 8017c78 <_vfiprintf_r+0x18>
 8017c70:	6983      	ldr	r3, [r0, #24]
 8017c72:	b90b      	cbnz	r3, 8017c78 <_vfiprintf_r+0x18>
 8017c74:	f7ff fee6 	bl	8017a44 <__sinit>
 8017c78:	4b7c      	ldr	r3, [pc, #496]	; (8017e6c <_vfiprintf_r+0x20c>)
 8017c7a:	429c      	cmp	r4, r3
 8017c7c:	d158      	bne.n	8017d30 <_vfiprintf_r+0xd0>
 8017c7e:	6874      	ldr	r4, [r6, #4]
 8017c80:	89a3      	ldrh	r3, [r4, #12]
 8017c82:	0718      	lsls	r0, r3, #28
 8017c84:	d55e      	bpl.n	8017d44 <_vfiprintf_r+0xe4>
 8017c86:	6923      	ldr	r3, [r4, #16]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d05b      	beq.n	8017d44 <_vfiprintf_r+0xe4>
 8017c8c:	2300      	movs	r3, #0
 8017c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8017c90:	2320      	movs	r3, #32
 8017c92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017c96:	2330      	movs	r3, #48	; 0x30
 8017c98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017c9c:	9503      	str	r5, [sp, #12]
 8017c9e:	f04f 0b01 	mov.w	fp, #1
 8017ca2:	46b8      	mov	r8, r7
 8017ca4:	4645      	mov	r5, r8
 8017ca6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017caa:	b10b      	cbz	r3, 8017cb0 <_vfiprintf_r+0x50>
 8017cac:	2b25      	cmp	r3, #37	; 0x25
 8017cae:	d154      	bne.n	8017d5a <_vfiprintf_r+0xfa>
 8017cb0:	ebb8 0a07 	subs.w	sl, r8, r7
 8017cb4:	d00b      	beq.n	8017cce <_vfiprintf_r+0x6e>
 8017cb6:	4653      	mov	r3, sl
 8017cb8:	463a      	mov	r2, r7
 8017cba:	4621      	mov	r1, r4
 8017cbc:	4630      	mov	r0, r6
 8017cbe:	f7ff ffbc 	bl	8017c3a <__sfputs_r>
 8017cc2:	3001      	adds	r0, #1
 8017cc4:	f000 80c2 	beq.w	8017e4c <_vfiprintf_r+0x1ec>
 8017cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cca:	4453      	add	r3, sl
 8017ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8017cce:	f898 3000 	ldrb.w	r3, [r8]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	f000 80ba 	beq.w	8017e4c <_vfiprintf_r+0x1ec>
 8017cd8:	2300      	movs	r3, #0
 8017cda:	f04f 32ff 	mov.w	r2, #4294967295
 8017cde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ce2:	9304      	str	r3, [sp, #16]
 8017ce4:	9307      	str	r3, [sp, #28]
 8017ce6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017cea:	931a      	str	r3, [sp, #104]	; 0x68
 8017cec:	46a8      	mov	r8, r5
 8017cee:	2205      	movs	r2, #5
 8017cf0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8017cf4:	485e      	ldr	r0, [pc, #376]	; (8017e70 <_vfiprintf_r+0x210>)
 8017cf6:	f7e8 faf3 	bl	80002e0 <memchr>
 8017cfa:	9b04      	ldr	r3, [sp, #16]
 8017cfc:	bb78      	cbnz	r0, 8017d5e <_vfiprintf_r+0xfe>
 8017cfe:	06d9      	lsls	r1, r3, #27
 8017d00:	bf44      	itt	mi
 8017d02:	2220      	movmi	r2, #32
 8017d04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017d08:	071a      	lsls	r2, r3, #28
 8017d0a:	bf44      	itt	mi
 8017d0c:	222b      	movmi	r2, #43	; 0x2b
 8017d0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017d12:	782a      	ldrb	r2, [r5, #0]
 8017d14:	2a2a      	cmp	r2, #42	; 0x2a
 8017d16:	d02a      	beq.n	8017d6e <_vfiprintf_r+0x10e>
 8017d18:	9a07      	ldr	r2, [sp, #28]
 8017d1a:	46a8      	mov	r8, r5
 8017d1c:	2000      	movs	r0, #0
 8017d1e:	250a      	movs	r5, #10
 8017d20:	4641      	mov	r1, r8
 8017d22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d26:	3b30      	subs	r3, #48	; 0x30
 8017d28:	2b09      	cmp	r3, #9
 8017d2a:	d969      	bls.n	8017e00 <_vfiprintf_r+0x1a0>
 8017d2c:	b360      	cbz	r0, 8017d88 <_vfiprintf_r+0x128>
 8017d2e:	e024      	b.n	8017d7a <_vfiprintf_r+0x11a>
 8017d30:	4b50      	ldr	r3, [pc, #320]	; (8017e74 <_vfiprintf_r+0x214>)
 8017d32:	429c      	cmp	r4, r3
 8017d34:	d101      	bne.n	8017d3a <_vfiprintf_r+0xda>
 8017d36:	68b4      	ldr	r4, [r6, #8]
 8017d38:	e7a2      	b.n	8017c80 <_vfiprintf_r+0x20>
 8017d3a:	4b4f      	ldr	r3, [pc, #316]	; (8017e78 <_vfiprintf_r+0x218>)
 8017d3c:	429c      	cmp	r4, r3
 8017d3e:	bf08      	it	eq
 8017d40:	68f4      	ldreq	r4, [r6, #12]
 8017d42:	e79d      	b.n	8017c80 <_vfiprintf_r+0x20>
 8017d44:	4621      	mov	r1, r4
 8017d46:	4630      	mov	r0, r6
 8017d48:	f000 fae0 	bl	801830c <__swsetup_r>
 8017d4c:	2800      	cmp	r0, #0
 8017d4e:	d09d      	beq.n	8017c8c <_vfiprintf_r+0x2c>
 8017d50:	f04f 30ff 	mov.w	r0, #4294967295
 8017d54:	b01d      	add	sp, #116	; 0x74
 8017d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d5a:	46a8      	mov	r8, r5
 8017d5c:	e7a2      	b.n	8017ca4 <_vfiprintf_r+0x44>
 8017d5e:	4a44      	ldr	r2, [pc, #272]	; (8017e70 <_vfiprintf_r+0x210>)
 8017d60:	1a80      	subs	r0, r0, r2
 8017d62:	fa0b f000 	lsl.w	r0, fp, r0
 8017d66:	4318      	orrs	r0, r3
 8017d68:	9004      	str	r0, [sp, #16]
 8017d6a:	4645      	mov	r5, r8
 8017d6c:	e7be      	b.n	8017cec <_vfiprintf_r+0x8c>
 8017d6e:	9a03      	ldr	r2, [sp, #12]
 8017d70:	1d11      	adds	r1, r2, #4
 8017d72:	6812      	ldr	r2, [r2, #0]
 8017d74:	9103      	str	r1, [sp, #12]
 8017d76:	2a00      	cmp	r2, #0
 8017d78:	db01      	blt.n	8017d7e <_vfiprintf_r+0x11e>
 8017d7a:	9207      	str	r2, [sp, #28]
 8017d7c:	e004      	b.n	8017d88 <_vfiprintf_r+0x128>
 8017d7e:	4252      	negs	r2, r2
 8017d80:	f043 0302 	orr.w	r3, r3, #2
 8017d84:	9207      	str	r2, [sp, #28]
 8017d86:	9304      	str	r3, [sp, #16]
 8017d88:	f898 3000 	ldrb.w	r3, [r8]
 8017d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8017d8e:	d10e      	bne.n	8017dae <_vfiprintf_r+0x14e>
 8017d90:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017d94:	2b2a      	cmp	r3, #42	; 0x2a
 8017d96:	d138      	bne.n	8017e0a <_vfiprintf_r+0x1aa>
 8017d98:	9b03      	ldr	r3, [sp, #12]
 8017d9a:	1d1a      	adds	r2, r3, #4
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	9203      	str	r2, [sp, #12]
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	bfb8      	it	lt
 8017da4:	f04f 33ff 	movlt.w	r3, #4294967295
 8017da8:	f108 0802 	add.w	r8, r8, #2
 8017dac:	9305      	str	r3, [sp, #20]
 8017dae:	4d33      	ldr	r5, [pc, #204]	; (8017e7c <_vfiprintf_r+0x21c>)
 8017db0:	f898 1000 	ldrb.w	r1, [r8]
 8017db4:	2203      	movs	r2, #3
 8017db6:	4628      	mov	r0, r5
 8017db8:	f7e8 fa92 	bl	80002e0 <memchr>
 8017dbc:	b140      	cbz	r0, 8017dd0 <_vfiprintf_r+0x170>
 8017dbe:	2340      	movs	r3, #64	; 0x40
 8017dc0:	1b40      	subs	r0, r0, r5
 8017dc2:	fa03 f000 	lsl.w	r0, r3, r0
 8017dc6:	9b04      	ldr	r3, [sp, #16]
 8017dc8:	4303      	orrs	r3, r0
 8017dca:	f108 0801 	add.w	r8, r8, #1
 8017dce:	9304      	str	r3, [sp, #16]
 8017dd0:	f898 1000 	ldrb.w	r1, [r8]
 8017dd4:	482a      	ldr	r0, [pc, #168]	; (8017e80 <_vfiprintf_r+0x220>)
 8017dd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017dda:	2206      	movs	r2, #6
 8017ddc:	f108 0701 	add.w	r7, r8, #1
 8017de0:	f7e8 fa7e 	bl	80002e0 <memchr>
 8017de4:	2800      	cmp	r0, #0
 8017de6:	d037      	beq.n	8017e58 <_vfiprintf_r+0x1f8>
 8017de8:	4b26      	ldr	r3, [pc, #152]	; (8017e84 <_vfiprintf_r+0x224>)
 8017dea:	bb1b      	cbnz	r3, 8017e34 <_vfiprintf_r+0x1d4>
 8017dec:	9b03      	ldr	r3, [sp, #12]
 8017dee:	3307      	adds	r3, #7
 8017df0:	f023 0307 	bic.w	r3, r3, #7
 8017df4:	3308      	adds	r3, #8
 8017df6:	9303      	str	r3, [sp, #12]
 8017df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017dfa:	444b      	add	r3, r9
 8017dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8017dfe:	e750      	b.n	8017ca2 <_vfiprintf_r+0x42>
 8017e00:	fb05 3202 	mla	r2, r5, r2, r3
 8017e04:	2001      	movs	r0, #1
 8017e06:	4688      	mov	r8, r1
 8017e08:	e78a      	b.n	8017d20 <_vfiprintf_r+0xc0>
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	f108 0801 	add.w	r8, r8, #1
 8017e10:	9305      	str	r3, [sp, #20]
 8017e12:	4619      	mov	r1, r3
 8017e14:	250a      	movs	r5, #10
 8017e16:	4640      	mov	r0, r8
 8017e18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e1c:	3a30      	subs	r2, #48	; 0x30
 8017e1e:	2a09      	cmp	r2, #9
 8017e20:	d903      	bls.n	8017e2a <_vfiprintf_r+0x1ca>
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d0c3      	beq.n	8017dae <_vfiprintf_r+0x14e>
 8017e26:	9105      	str	r1, [sp, #20]
 8017e28:	e7c1      	b.n	8017dae <_vfiprintf_r+0x14e>
 8017e2a:	fb05 2101 	mla	r1, r5, r1, r2
 8017e2e:	2301      	movs	r3, #1
 8017e30:	4680      	mov	r8, r0
 8017e32:	e7f0      	b.n	8017e16 <_vfiprintf_r+0x1b6>
 8017e34:	ab03      	add	r3, sp, #12
 8017e36:	9300      	str	r3, [sp, #0]
 8017e38:	4622      	mov	r2, r4
 8017e3a:	4b13      	ldr	r3, [pc, #76]	; (8017e88 <_vfiprintf_r+0x228>)
 8017e3c:	a904      	add	r1, sp, #16
 8017e3e:	4630      	mov	r0, r6
 8017e40:	f3af 8000 	nop.w
 8017e44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017e48:	4681      	mov	r9, r0
 8017e4a:	d1d5      	bne.n	8017df8 <_vfiprintf_r+0x198>
 8017e4c:	89a3      	ldrh	r3, [r4, #12]
 8017e4e:	065b      	lsls	r3, r3, #25
 8017e50:	f53f af7e 	bmi.w	8017d50 <_vfiprintf_r+0xf0>
 8017e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e56:	e77d      	b.n	8017d54 <_vfiprintf_r+0xf4>
 8017e58:	ab03      	add	r3, sp, #12
 8017e5a:	9300      	str	r3, [sp, #0]
 8017e5c:	4622      	mov	r2, r4
 8017e5e:	4b0a      	ldr	r3, [pc, #40]	; (8017e88 <_vfiprintf_r+0x228>)
 8017e60:	a904      	add	r1, sp, #16
 8017e62:	4630      	mov	r0, r6
 8017e64:	f000 f888 	bl	8017f78 <_printf_i>
 8017e68:	e7ec      	b.n	8017e44 <_vfiprintf_r+0x1e4>
 8017e6a:	bf00      	nop
 8017e6c:	0801aa1c 	.word	0x0801aa1c
 8017e70:	0801aa5c 	.word	0x0801aa5c
 8017e74:	0801aa3c 	.word	0x0801aa3c
 8017e78:	0801a9fc 	.word	0x0801a9fc
 8017e7c:	0801aa62 	.word	0x0801aa62
 8017e80:	0801aa66 	.word	0x0801aa66
 8017e84:	00000000 	.word	0x00000000
 8017e88:	08017c3b 	.word	0x08017c3b

08017e8c <_printf_common>:
 8017e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e90:	4691      	mov	r9, r2
 8017e92:	461f      	mov	r7, r3
 8017e94:	688a      	ldr	r2, [r1, #8]
 8017e96:	690b      	ldr	r3, [r1, #16]
 8017e98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017e9c:	4293      	cmp	r3, r2
 8017e9e:	bfb8      	it	lt
 8017ea0:	4613      	movlt	r3, r2
 8017ea2:	f8c9 3000 	str.w	r3, [r9]
 8017ea6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017eaa:	4606      	mov	r6, r0
 8017eac:	460c      	mov	r4, r1
 8017eae:	b112      	cbz	r2, 8017eb6 <_printf_common+0x2a>
 8017eb0:	3301      	adds	r3, #1
 8017eb2:	f8c9 3000 	str.w	r3, [r9]
 8017eb6:	6823      	ldr	r3, [r4, #0]
 8017eb8:	0699      	lsls	r1, r3, #26
 8017eba:	bf42      	ittt	mi
 8017ebc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8017ec0:	3302      	addmi	r3, #2
 8017ec2:	f8c9 3000 	strmi.w	r3, [r9]
 8017ec6:	6825      	ldr	r5, [r4, #0]
 8017ec8:	f015 0506 	ands.w	r5, r5, #6
 8017ecc:	d107      	bne.n	8017ede <_printf_common+0x52>
 8017ece:	f104 0a19 	add.w	sl, r4, #25
 8017ed2:	68e3      	ldr	r3, [r4, #12]
 8017ed4:	f8d9 2000 	ldr.w	r2, [r9]
 8017ed8:	1a9b      	subs	r3, r3, r2
 8017eda:	42ab      	cmp	r3, r5
 8017edc:	dc28      	bgt.n	8017f30 <_printf_common+0xa4>
 8017ede:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8017ee2:	6822      	ldr	r2, [r4, #0]
 8017ee4:	3300      	adds	r3, #0
 8017ee6:	bf18      	it	ne
 8017ee8:	2301      	movne	r3, #1
 8017eea:	0692      	lsls	r2, r2, #26
 8017eec:	d42d      	bmi.n	8017f4a <_printf_common+0xbe>
 8017eee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017ef2:	4639      	mov	r1, r7
 8017ef4:	4630      	mov	r0, r6
 8017ef6:	47c0      	blx	r8
 8017ef8:	3001      	adds	r0, #1
 8017efa:	d020      	beq.n	8017f3e <_printf_common+0xb2>
 8017efc:	6823      	ldr	r3, [r4, #0]
 8017efe:	68e5      	ldr	r5, [r4, #12]
 8017f00:	f8d9 2000 	ldr.w	r2, [r9]
 8017f04:	f003 0306 	and.w	r3, r3, #6
 8017f08:	2b04      	cmp	r3, #4
 8017f0a:	bf08      	it	eq
 8017f0c:	1aad      	subeq	r5, r5, r2
 8017f0e:	68a3      	ldr	r3, [r4, #8]
 8017f10:	6922      	ldr	r2, [r4, #16]
 8017f12:	bf0c      	ite	eq
 8017f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017f18:	2500      	movne	r5, #0
 8017f1a:	4293      	cmp	r3, r2
 8017f1c:	bfc4      	itt	gt
 8017f1e:	1a9b      	subgt	r3, r3, r2
 8017f20:	18ed      	addgt	r5, r5, r3
 8017f22:	f04f 0900 	mov.w	r9, #0
 8017f26:	341a      	adds	r4, #26
 8017f28:	454d      	cmp	r5, r9
 8017f2a:	d11a      	bne.n	8017f62 <_printf_common+0xd6>
 8017f2c:	2000      	movs	r0, #0
 8017f2e:	e008      	b.n	8017f42 <_printf_common+0xb6>
 8017f30:	2301      	movs	r3, #1
 8017f32:	4652      	mov	r2, sl
 8017f34:	4639      	mov	r1, r7
 8017f36:	4630      	mov	r0, r6
 8017f38:	47c0      	blx	r8
 8017f3a:	3001      	adds	r0, #1
 8017f3c:	d103      	bne.n	8017f46 <_printf_common+0xba>
 8017f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8017f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f46:	3501      	adds	r5, #1
 8017f48:	e7c3      	b.n	8017ed2 <_printf_common+0x46>
 8017f4a:	18e1      	adds	r1, r4, r3
 8017f4c:	1c5a      	adds	r2, r3, #1
 8017f4e:	2030      	movs	r0, #48	; 0x30
 8017f50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017f54:	4422      	add	r2, r4
 8017f56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017f5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017f5e:	3302      	adds	r3, #2
 8017f60:	e7c5      	b.n	8017eee <_printf_common+0x62>
 8017f62:	2301      	movs	r3, #1
 8017f64:	4622      	mov	r2, r4
 8017f66:	4639      	mov	r1, r7
 8017f68:	4630      	mov	r0, r6
 8017f6a:	47c0      	blx	r8
 8017f6c:	3001      	adds	r0, #1
 8017f6e:	d0e6      	beq.n	8017f3e <_printf_common+0xb2>
 8017f70:	f109 0901 	add.w	r9, r9, #1
 8017f74:	e7d8      	b.n	8017f28 <_printf_common+0x9c>
	...

08017f78 <_printf_i>:
 8017f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017f80:	460c      	mov	r4, r1
 8017f82:	7e09      	ldrb	r1, [r1, #24]
 8017f84:	b085      	sub	sp, #20
 8017f86:	296e      	cmp	r1, #110	; 0x6e
 8017f88:	4617      	mov	r7, r2
 8017f8a:	4606      	mov	r6, r0
 8017f8c:	4698      	mov	r8, r3
 8017f8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017f90:	f000 80b3 	beq.w	80180fa <_printf_i+0x182>
 8017f94:	d822      	bhi.n	8017fdc <_printf_i+0x64>
 8017f96:	2963      	cmp	r1, #99	; 0x63
 8017f98:	d036      	beq.n	8018008 <_printf_i+0x90>
 8017f9a:	d80a      	bhi.n	8017fb2 <_printf_i+0x3a>
 8017f9c:	2900      	cmp	r1, #0
 8017f9e:	f000 80b9 	beq.w	8018114 <_printf_i+0x19c>
 8017fa2:	2958      	cmp	r1, #88	; 0x58
 8017fa4:	f000 8083 	beq.w	80180ae <_printf_i+0x136>
 8017fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017fac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017fb0:	e032      	b.n	8018018 <_printf_i+0xa0>
 8017fb2:	2964      	cmp	r1, #100	; 0x64
 8017fb4:	d001      	beq.n	8017fba <_printf_i+0x42>
 8017fb6:	2969      	cmp	r1, #105	; 0x69
 8017fb8:	d1f6      	bne.n	8017fa8 <_printf_i+0x30>
 8017fba:	6820      	ldr	r0, [r4, #0]
 8017fbc:	6813      	ldr	r3, [r2, #0]
 8017fbe:	0605      	lsls	r5, r0, #24
 8017fc0:	f103 0104 	add.w	r1, r3, #4
 8017fc4:	d52a      	bpl.n	801801c <_printf_i+0xa4>
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	6011      	str	r1, [r2, #0]
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	da03      	bge.n	8017fd6 <_printf_i+0x5e>
 8017fce:	222d      	movs	r2, #45	; 0x2d
 8017fd0:	425b      	negs	r3, r3
 8017fd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017fd6:	486f      	ldr	r0, [pc, #444]	; (8018194 <_printf_i+0x21c>)
 8017fd8:	220a      	movs	r2, #10
 8017fda:	e039      	b.n	8018050 <_printf_i+0xd8>
 8017fdc:	2973      	cmp	r1, #115	; 0x73
 8017fde:	f000 809d 	beq.w	801811c <_printf_i+0x1a4>
 8017fe2:	d808      	bhi.n	8017ff6 <_printf_i+0x7e>
 8017fe4:	296f      	cmp	r1, #111	; 0x6f
 8017fe6:	d020      	beq.n	801802a <_printf_i+0xb2>
 8017fe8:	2970      	cmp	r1, #112	; 0x70
 8017fea:	d1dd      	bne.n	8017fa8 <_printf_i+0x30>
 8017fec:	6823      	ldr	r3, [r4, #0]
 8017fee:	f043 0320 	orr.w	r3, r3, #32
 8017ff2:	6023      	str	r3, [r4, #0]
 8017ff4:	e003      	b.n	8017ffe <_printf_i+0x86>
 8017ff6:	2975      	cmp	r1, #117	; 0x75
 8017ff8:	d017      	beq.n	801802a <_printf_i+0xb2>
 8017ffa:	2978      	cmp	r1, #120	; 0x78
 8017ffc:	d1d4      	bne.n	8017fa8 <_printf_i+0x30>
 8017ffe:	2378      	movs	r3, #120	; 0x78
 8018000:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018004:	4864      	ldr	r0, [pc, #400]	; (8018198 <_printf_i+0x220>)
 8018006:	e055      	b.n	80180b4 <_printf_i+0x13c>
 8018008:	6813      	ldr	r3, [r2, #0]
 801800a:	1d19      	adds	r1, r3, #4
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	6011      	str	r1, [r2, #0]
 8018010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018018:	2301      	movs	r3, #1
 801801a:	e08c      	b.n	8018136 <_printf_i+0x1be>
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	6011      	str	r1, [r2, #0]
 8018020:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018024:	bf18      	it	ne
 8018026:	b21b      	sxthne	r3, r3
 8018028:	e7cf      	b.n	8017fca <_printf_i+0x52>
 801802a:	6813      	ldr	r3, [r2, #0]
 801802c:	6825      	ldr	r5, [r4, #0]
 801802e:	1d18      	adds	r0, r3, #4
 8018030:	6010      	str	r0, [r2, #0]
 8018032:	0628      	lsls	r0, r5, #24
 8018034:	d501      	bpl.n	801803a <_printf_i+0xc2>
 8018036:	681b      	ldr	r3, [r3, #0]
 8018038:	e002      	b.n	8018040 <_printf_i+0xc8>
 801803a:	0668      	lsls	r0, r5, #25
 801803c:	d5fb      	bpl.n	8018036 <_printf_i+0xbe>
 801803e:	881b      	ldrh	r3, [r3, #0]
 8018040:	4854      	ldr	r0, [pc, #336]	; (8018194 <_printf_i+0x21c>)
 8018042:	296f      	cmp	r1, #111	; 0x6f
 8018044:	bf14      	ite	ne
 8018046:	220a      	movne	r2, #10
 8018048:	2208      	moveq	r2, #8
 801804a:	2100      	movs	r1, #0
 801804c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018050:	6865      	ldr	r5, [r4, #4]
 8018052:	60a5      	str	r5, [r4, #8]
 8018054:	2d00      	cmp	r5, #0
 8018056:	f2c0 8095 	blt.w	8018184 <_printf_i+0x20c>
 801805a:	6821      	ldr	r1, [r4, #0]
 801805c:	f021 0104 	bic.w	r1, r1, #4
 8018060:	6021      	str	r1, [r4, #0]
 8018062:	2b00      	cmp	r3, #0
 8018064:	d13d      	bne.n	80180e2 <_printf_i+0x16a>
 8018066:	2d00      	cmp	r5, #0
 8018068:	f040 808e 	bne.w	8018188 <_printf_i+0x210>
 801806c:	4665      	mov	r5, ip
 801806e:	2a08      	cmp	r2, #8
 8018070:	d10b      	bne.n	801808a <_printf_i+0x112>
 8018072:	6823      	ldr	r3, [r4, #0]
 8018074:	07db      	lsls	r3, r3, #31
 8018076:	d508      	bpl.n	801808a <_printf_i+0x112>
 8018078:	6923      	ldr	r3, [r4, #16]
 801807a:	6862      	ldr	r2, [r4, #4]
 801807c:	429a      	cmp	r2, r3
 801807e:	bfde      	ittt	le
 8018080:	2330      	movle	r3, #48	; 0x30
 8018082:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018086:	f105 35ff 	addle.w	r5, r5, #4294967295
 801808a:	ebac 0305 	sub.w	r3, ip, r5
 801808e:	6123      	str	r3, [r4, #16]
 8018090:	f8cd 8000 	str.w	r8, [sp]
 8018094:	463b      	mov	r3, r7
 8018096:	aa03      	add	r2, sp, #12
 8018098:	4621      	mov	r1, r4
 801809a:	4630      	mov	r0, r6
 801809c:	f7ff fef6 	bl	8017e8c <_printf_common>
 80180a0:	3001      	adds	r0, #1
 80180a2:	d14d      	bne.n	8018140 <_printf_i+0x1c8>
 80180a4:	f04f 30ff 	mov.w	r0, #4294967295
 80180a8:	b005      	add	sp, #20
 80180aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80180ae:	4839      	ldr	r0, [pc, #228]	; (8018194 <_printf_i+0x21c>)
 80180b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80180b4:	6813      	ldr	r3, [r2, #0]
 80180b6:	6821      	ldr	r1, [r4, #0]
 80180b8:	1d1d      	adds	r5, r3, #4
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	6015      	str	r5, [r2, #0]
 80180be:	060a      	lsls	r2, r1, #24
 80180c0:	d50b      	bpl.n	80180da <_printf_i+0x162>
 80180c2:	07ca      	lsls	r2, r1, #31
 80180c4:	bf44      	itt	mi
 80180c6:	f041 0120 	orrmi.w	r1, r1, #32
 80180ca:	6021      	strmi	r1, [r4, #0]
 80180cc:	b91b      	cbnz	r3, 80180d6 <_printf_i+0x15e>
 80180ce:	6822      	ldr	r2, [r4, #0]
 80180d0:	f022 0220 	bic.w	r2, r2, #32
 80180d4:	6022      	str	r2, [r4, #0]
 80180d6:	2210      	movs	r2, #16
 80180d8:	e7b7      	b.n	801804a <_printf_i+0xd2>
 80180da:	064d      	lsls	r5, r1, #25
 80180dc:	bf48      	it	mi
 80180de:	b29b      	uxthmi	r3, r3
 80180e0:	e7ef      	b.n	80180c2 <_printf_i+0x14a>
 80180e2:	4665      	mov	r5, ip
 80180e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80180e8:	fb02 3311 	mls	r3, r2, r1, r3
 80180ec:	5cc3      	ldrb	r3, [r0, r3]
 80180ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80180f2:	460b      	mov	r3, r1
 80180f4:	2900      	cmp	r1, #0
 80180f6:	d1f5      	bne.n	80180e4 <_printf_i+0x16c>
 80180f8:	e7b9      	b.n	801806e <_printf_i+0xf6>
 80180fa:	6813      	ldr	r3, [r2, #0]
 80180fc:	6825      	ldr	r5, [r4, #0]
 80180fe:	6961      	ldr	r1, [r4, #20]
 8018100:	1d18      	adds	r0, r3, #4
 8018102:	6010      	str	r0, [r2, #0]
 8018104:	0628      	lsls	r0, r5, #24
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	d501      	bpl.n	801810e <_printf_i+0x196>
 801810a:	6019      	str	r1, [r3, #0]
 801810c:	e002      	b.n	8018114 <_printf_i+0x19c>
 801810e:	066a      	lsls	r2, r5, #25
 8018110:	d5fb      	bpl.n	801810a <_printf_i+0x192>
 8018112:	8019      	strh	r1, [r3, #0]
 8018114:	2300      	movs	r3, #0
 8018116:	6123      	str	r3, [r4, #16]
 8018118:	4665      	mov	r5, ip
 801811a:	e7b9      	b.n	8018090 <_printf_i+0x118>
 801811c:	6813      	ldr	r3, [r2, #0]
 801811e:	1d19      	adds	r1, r3, #4
 8018120:	6011      	str	r1, [r2, #0]
 8018122:	681d      	ldr	r5, [r3, #0]
 8018124:	6862      	ldr	r2, [r4, #4]
 8018126:	2100      	movs	r1, #0
 8018128:	4628      	mov	r0, r5
 801812a:	f7e8 f8d9 	bl	80002e0 <memchr>
 801812e:	b108      	cbz	r0, 8018134 <_printf_i+0x1bc>
 8018130:	1b40      	subs	r0, r0, r5
 8018132:	6060      	str	r0, [r4, #4]
 8018134:	6863      	ldr	r3, [r4, #4]
 8018136:	6123      	str	r3, [r4, #16]
 8018138:	2300      	movs	r3, #0
 801813a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801813e:	e7a7      	b.n	8018090 <_printf_i+0x118>
 8018140:	6923      	ldr	r3, [r4, #16]
 8018142:	462a      	mov	r2, r5
 8018144:	4639      	mov	r1, r7
 8018146:	4630      	mov	r0, r6
 8018148:	47c0      	blx	r8
 801814a:	3001      	adds	r0, #1
 801814c:	d0aa      	beq.n	80180a4 <_printf_i+0x12c>
 801814e:	6823      	ldr	r3, [r4, #0]
 8018150:	079b      	lsls	r3, r3, #30
 8018152:	d413      	bmi.n	801817c <_printf_i+0x204>
 8018154:	68e0      	ldr	r0, [r4, #12]
 8018156:	9b03      	ldr	r3, [sp, #12]
 8018158:	4298      	cmp	r0, r3
 801815a:	bfb8      	it	lt
 801815c:	4618      	movlt	r0, r3
 801815e:	e7a3      	b.n	80180a8 <_printf_i+0x130>
 8018160:	2301      	movs	r3, #1
 8018162:	464a      	mov	r2, r9
 8018164:	4639      	mov	r1, r7
 8018166:	4630      	mov	r0, r6
 8018168:	47c0      	blx	r8
 801816a:	3001      	adds	r0, #1
 801816c:	d09a      	beq.n	80180a4 <_printf_i+0x12c>
 801816e:	3501      	adds	r5, #1
 8018170:	68e3      	ldr	r3, [r4, #12]
 8018172:	9a03      	ldr	r2, [sp, #12]
 8018174:	1a9b      	subs	r3, r3, r2
 8018176:	42ab      	cmp	r3, r5
 8018178:	dcf2      	bgt.n	8018160 <_printf_i+0x1e8>
 801817a:	e7eb      	b.n	8018154 <_printf_i+0x1dc>
 801817c:	2500      	movs	r5, #0
 801817e:	f104 0919 	add.w	r9, r4, #25
 8018182:	e7f5      	b.n	8018170 <_printf_i+0x1f8>
 8018184:	2b00      	cmp	r3, #0
 8018186:	d1ac      	bne.n	80180e2 <_printf_i+0x16a>
 8018188:	7803      	ldrb	r3, [r0, #0]
 801818a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801818e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018192:	e76c      	b.n	801806e <_printf_i+0xf6>
 8018194:	0801aa6d 	.word	0x0801aa6d
 8018198:	0801aa7e 	.word	0x0801aa7e

0801819c <_sbrk_r>:
 801819c:	b538      	push	{r3, r4, r5, lr}
 801819e:	4c06      	ldr	r4, [pc, #24]	; (80181b8 <_sbrk_r+0x1c>)
 80181a0:	2300      	movs	r3, #0
 80181a2:	4605      	mov	r5, r0
 80181a4:	4608      	mov	r0, r1
 80181a6:	6023      	str	r3, [r4, #0]
 80181a8:	f7e8 fea4 	bl	8000ef4 <_sbrk>
 80181ac:	1c43      	adds	r3, r0, #1
 80181ae:	d102      	bne.n	80181b6 <_sbrk_r+0x1a>
 80181b0:	6823      	ldr	r3, [r4, #0]
 80181b2:	b103      	cbz	r3, 80181b6 <_sbrk_r+0x1a>
 80181b4:	602b      	str	r3, [r5, #0]
 80181b6:	bd38      	pop	{r3, r4, r5, pc}
 80181b8:	24024e68 	.word	0x24024e68

080181bc <__sread>:
 80181bc:	b510      	push	{r4, lr}
 80181be:	460c      	mov	r4, r1
 80181c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181c4:	f000 fa96 	bl	80186f4 <_read_r>
 80181c8:	2800      	cmp	r0, #0
 80181ca:	bfab      	itete	ge
 80181cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80181ce:	89a3      	ldrhlt	r3, [r4, #12]
 80181d0:	181b      	addge	r3, r3, r0
 80181d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80181d6:	bfac      	ite	ge
 80181d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80181da:	81a3      	strhlt	r3, [r4, #12]
 80181dc:	bd10      	pop	{r4, pc}

080181de <__swrite>:
 80181de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181e2:	461f      	mov	r7, r3
 80181e4:	898b      	ldrh	r3, [r1, #12]
 80181e6:	05db      	lsls	r3, r3, #23
 80181e8:	4605      	mov	r5, r0
 80181ea:	460c      	mov	r4, r1
 80181ec:	4616      	mov	r6, r2
 80181ee:	d505      	bpl.n	80181fc <__swrite+0x1e>
 80181f0:	2302      	movs	r3, #2
 80181f2:	2200      	movs	r2, #0
 80181f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181f8:	f000 f9b6 	bl	8018568 <_lseek_r>
 80181fc:	89a3      	ldrh	r3, [r4, #12]
 80181fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018202:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018206:	81a3      	strh	r3, [r4, #12]
 8018208:	4632      	mov	r2, r6
 801820a:	463b      	mov	r3, r7
 801820c:	4628      	mov	r0, r5
 801820e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018212:	f000 b869 	b.w	80182e8 <_write_r>

08018216 <__sseek>:
 8018216:	b510      	push	{r4, lr}
 8018218:	460c      	mov	r4, r1
 801821a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801821e:	f000 f9a3 	bl	8018568 <_lseek_r>
 8018222:	1c43      	adds	r3, r0, #1
 8018224:	89a3      	ldrh	r3, [r4, #12]
 8018226:	bf15      	itete	ne
 8018228:	6560      	strne	r0, [r4, #84]	; 0x54
 801822a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801822e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018232:	81a3      	strheq	r3, [r4, #12]
 8018234:	bf18      	it	ne
 8018236:	81a3      	strhne	r3, [r4, #12]
 8018238:	bd10      	pop	{r4, pc}

0801823a <__sclose>:
 801823a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801823e:	f000 b8d3 	b.w	80183e8 <_close_r>
	...

08018244 <__swbuf_r>:
 8018244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018246:	460e      	mov	r6, r1
 8018248:	4614      	mov	r4, r2
 801824a:	4605      	mov	r5, r0
 801824c:	b118      	cbz	r0, 8018256 <__swbuf_r+0x12>
 801824e:	6983      	ldr	r3, [r0, #24]
 8018250:	b90b      	cbnz	r3, 8018256 <__swbuf_r+0x12>
 8018252:	f7ff fbf7 	bl	8017a44 <__sinit>
 8018256:	4b21      	ldr	r3, [pc, #132]	; (80182dc <__swbuf_r+0x98>)
 8018258:	429c      	cmp	r4, r3
 801825a:	d12a      	bne.n	80182b2 <__swbuf_r+0x6e>
 801825c:	686c      	ldr	r4, [r5, #4]
 801825e:	69a3      	ldr	r3, [r4, #24]
 8018260:	60a3      	str	r3, [r4, #8]
 8018262:	89a3      	ldrh	r3, [r4, #12]
 8018264:	071a      	lsls	r2, r3, #28
 8018266:	d52e      	bpl.n	80182c6 <__swbuf_r+0x82>
 8018268:	6923      	ldr	r3, [r4, #16]
 801826a:	b363      	cbz	r3, 80182c6 <__swbuf_r+0x82>
 801826c:	6923      	ldr	r3, [r4, #16]
 801826e:	6820      	ldr	r0, [r4, #0]
 8018270:	1ac0      	subs	r0, r0, r3
 8018272:	6963      	ldr	r3, [r4, #20]
 8018274:	b2f6      	uxtb	r6, r6
 8018276:	4283      	cmp	r3, r0
 8018278:	4637      	mov	r7, r6
 801827a:	dc04      	bgt.n	8018286 <__swbuf_r+0x42>
 801827c:	4621      	mov	r1, r4
 801827e:	4628      	mov	r0, r5
 8018280:	f000 f948 	bl	8018514 <_fflush_r>
 8018284:	bb28      	cbnz	r0, 80182d2 <__swbuf_r+0x8e>
 8018286:	68a3      	ldr	r3, [r4, #8]
 8018288:	3b01      	subs	r3, #1
 801828a:	60a3      	str	r3, [r4, #8]
 801828c:	6823      	ldr	r3, [r4, #0]
 801828e:	1c5a      	adds	r2, r3, #1
 8018290:	6022      	str	r2, [r4, #0]
 8018292:	701e      	strb	r6, [r3, #0]
 8018294:	6963      	ldr	r3, [r4, #20]
 8018296:	3001      	adds	r0, #1
 8018298:	4283      	cmp	r3, r0
 801829a:	d004      	beq.n	80182a6 <__swbuf_r+0x62>
 801829c:	89a3      	ldrh	r3, [r4, #12]
 801829e:	07db      	lsls	r3, r3, #31
 80182a0:	d519      	bpl.n	80182d6 <__swbuf_r+0x92>
 80182a2:	2e0a      	cmp	r6, #10
 80182a4:	d117      	bne.n	80182d6 <__swbuf_r+0x92>
 80182a6:	4621      	mov	r1, r4
 80182a8:	4628      	mov	r0, r5
 80182aa:	f000 f933 	bl	8018514 <_fflush_r>
 80182ae:	b190      	cbz	r0, 80182d6 <__swbuf_r+0x92>
 80182b0:	e00f      	b.n	80182d2 <__swbuf_r+0x8e>
 80182b2:	4b0b      	ldr	r3, [pc, #44]	; (80182e0 <__swbuf_r+0x9c>)
 80182b4:	429c      	cmp	r4, r3
 80182b6:	d101      	bne.n	80182bc <__swbuf_r+0x78>
 80182b8:	68ac      	ldr	r4, [r5, #8]
 80182ba:	e7d0      	b.n	801825e <__swbuf_r+0x1a>
 80182bc:	4b09      	ldr	r3, [pc, #36]	; (80182e4 <__swbuf_r+0xa0>)
 80182be:	429c      	cmp	r4, r3
 80182c0:	bf08      	it	eq
 80182c2:	68ec      	ldreq	r4, [r5, #12]
 80182c4:	e7cb      	b.n	801825e <__swbuf_r+0x1a>
 80182c6:	4621      	mov	r1, r4
 80182c8:	4628      	mov	r0, r5
 80182ca:	f000 f81f 	bl	801830c <__swsetup_r>
 80182ce:	2800      	cmp	r0, #0
 80182d0:	d0cc      	beq.n	801826c <__swbuf_r+0x28>
 80182d2:	f04f 37ff 	mov.w	r7, #4294967295
 80182d6:	4638      	mov	r0, r7
 80182d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80182da:	bf00      	nop
 80182dc:	0801aa1c 	.word	0x0801aa1c
 80182e0:	0801aa3c 	.word	0x0801aa3c
 80182e4:	0801a9fc 	.word	0x0801a9fc

080182e8 <_write_r>:
 80182e8:	b538      	push	{r3, r4, r5, lr}
 80182ea:	4c07      	ldr	r4, [pc, #28]	; (8018308 <_write_r+0x20>)
 80182ec:	4605      	mov	r5, r0
 80182ee:	4608      	mov	r0, r1
 80182f0:	4611      	mov	r1, r2
 80182f2:	2200      	movs	r2, #0
 80182f4:	6022      	str	r2, [r4, #0]
 80182f6:	461a      	mov	r2, r3
 80182f8:	f7e8 fdab 	bl	8000e52 <_write>
 80182fc:	1c43      	adds	r3, r0, #1
 80182fe:	d102      	bne.n	8018306 <_write_r+0x1e>
 8018300:	6823      	ldr	r3, [r4, #0]
 8018302:	b103      	cbz	r3, 8018306 <_write_r+0x1e>
 8018304:	602b      	str	r3, [r5, #0]
 8018306:	bd38      	pop	{r3, r4, r5, pc}
 8018308:	24024e68 	.word	0x24024e68

0801830c <__swsetup_r>:
 801830c:	4b32      	ldr	r3, [pc, #200]	; (80183d8 <__swsetup_r+0xcc>)
 801830e:	b570      	push	{r4, r5, r6, lr}
 8018310:	681d      	ldr	r5, [r3, #0]
 8018312:	4606      	mov	r6, r0
 8018314:	460c      	mov	r4, r1
 8018316:	b125      	cbz	r5, 8018322 <__swsetup_r+0x16>
 8018318:	69ab      	ldr	r3, [r5, #24]
 801831a:	b913      	cbnz	r3, 8018322 <__swsetup_r+0x16>
 801831c:	4628      	mov	r0, r5
 801831e:	f7ff fb91 	bl	8017a44 <__sinit>
 8018322:	4b2e      	ldr	r3, [pc, #184]	; (80183dc <__swsetup_r+0xd0>)
 8018324:	429c      	cmp	r4, r3
 8018326:	d10f      	bne.n	8018348 <__swsetup_r+0x3c>
 8018328:	686c      	ldr	r4, [r5, #4]
 801832a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801832e:	b29a      	uxth	r2, r3
 8018330:	0715      	lsls	r5, r2, #28
 8018332:	d42c      	bmi.n	801838e <__swsetup_r+0x82>
 8018334:	06d0      	lsls	r0, r2, #27
 8018336:	d411      	bmi.n	801835c <__swsetup_r+0x50>
 8018338:	2209      	movs	r2, #9
 801833a:	6032      	str	r2, [r6, #0]
 801833c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018340:	81a3      	strh	r3, [r4, #12]
 8018342:	f04f 30ff 	mov.w	r0, #4294967295
 8018346:	e03e      	b.n	80183c6 <__swsetup_r+0xba>
 8018348:	4b25      	ldr	r3, [pc, #148]	; (80183e0 <__swsetup_r+0xd4>)
 801834a:	429c      	cmp	r4, r3
 801834c:	d101      	bne.n	8018352 <__swsetup_r+0x46>
 801834e:	68ac      	ldr	r4, [r5, #8]
 8018350:	e7eb      	b.n	801832a <__swsetup_r+0x1e>
 8018352:	4b24      	ldr	r3, [pc, #144]	; (80183e4 <__swsetup_r+0xd8>)
 8018354:	429c      	cmp	r4, r3
 8018356:	bf08      	it	eq
 8018358:	68ec      	ldreq	r4, [r5, #12]
 801835a:	e7e6      	b.n	801832a <__swsetup_r+0x1e>
 801835c:	0751      	lsls	r1, r2, #29
 801835e:	d512      	bpl.n	8018386 <__swsetup_r+0x7a>
 8018360:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018362:	b141      	cbz	r1, 8018376 <__swsetup_r+0x6a>
 8018364:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018368:	4299      	cmp	r1, r3
 801836a:	d002      	beq.n	8018372 <__swsetup_r+0x66>
 801836c:	4630      	mov	r0, r6
 801836e:	f000 f973 	bl	8018658 <_free_r>
 8018372:	2300      	movs	r3, #0
 8018374:	6363      	str	r3, [r4, #52]	; 0x34
 8018376:	89a3      	ldrh	r3, [r4, #12]
 8018378:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801837c:	81a3      	strh	r3, [r4, #12]
 801837e:	2300      	movs	r3, #0
 8018380:	6063      	str	r3, [r4, #4]
 8018382:	6923      	ldr	r3, [r4, #16]
 8018384:	6023      	str	r3, [r4, #0]
 8018386:	89a3      	ldrh	r3, [r4, #12]
 8018388:	f043 0308 	orr.w	r3, r3, #8
 801838c:	81a3      	strh	r3, [r4, #12]
 801838e:	6923      	ldr	r3, [r4, #16]
 8018390:	b94b      	cbnz	r3, 80183a6 <__swsetup_r+0x9a>
 8018392:	89a3      	ldrh	r3, [r4, #12]
 8018394:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801839c:	d003      	beq.n	80183a6 <__swsetup_r+0x9a>
 801839e:	4621      	mov	r1, r4
 80183a0:	4630      	mov	r0, r6
 80183a2:	f000 f917 	bl	80185d4 <__smakebuf_r>
 80183a6:	89a2      	ldrh	r2, [r4, #12]
 80183a8:	f012 0301 	ands.w	r3, r2, #1
 80183ac:	d00c      	beq.n	80183c8 <__swsetup_r+0xbc>
 80183ae:	2300      	movs	r3, #0
 80183b0:	60a3      	str	r3, [r4, #8]
 80183b2:	6963      	ldr	r3, [r4, #20]
 80183b4:	425b      	negs	r3, r3
 80183b6:	61a3      	str	r3, [r4, #24]
 80183b8:	6923      	ldr	r3, [r4, #16]
 80183ba:	b953      	cbnz	r3, 80183d2 <__swsetup_r+0xc6>
 80183bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183c0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80183c4:	d1ba      	bne.n	801833c <__swsetup_r+0x30>
 80183c6:	bd70      	pop	{r4, r5, r6, pc}
 80183c8:	0792      	lsls	r2, r2, #30
 80183ca:	bf58      	it	pl
 80183cc:	6963      	ldrpl	r3, [r4, #20]
 80183ce:	60a3      	str	r3, [r4, #8]
 80183d0:	e7f2      	b.n	80183b8 <__swsetup_r+0xac>
 80183d2:	2000      	movs	r0, #0
 80183d4:	e7f7      	b.n	80183c6 <__swsetup_r+0xba>
 80183d6:	bf00      	nop
 80183d8:	2400002c 	.word	0x2400002c
 80183dc:	0801aa1c 	.word	0x0801aa1c
 80183e0:	0801aa3c 	.word	0x0801aa3c
 80183e4:	0801a9fc 	.word	0x0801a9fc

080183e8 <_close_r>:
 80183e8:	b538      	push	{r3, r4, r5, lr}
 80183ea:	4c06      	ldr	r4, [pc, #24]	; (8018404 <_close_r+0x1c>)
 80183ec:	2300      	movs	r3, #0
 80183ee:	4605      	mov	r5, r0
 80183f0:	4608      	mov	r0, r1
 80183f2:	6023      	str	r3, [r4, #0]
 80183f4:	f7e8 fd49 	bl	8000e8a <_close>
 80183f8:	1c43      	adds	r3, r0, #1
 80183fa:	d102      	bne.n	8018402 <_close_r+0x1a>
 80183fc:	6823      	ldr	r3, [r4, #0]
 80183fe:	b103      	cbz	r3, 8018402 <_close_r+0x1a>
 8018400:	602b      	str	r3, [r5, #0]
 8018402:	bd38      	pop	{r3, r4, r5, pc}
 8018404:	24024e68 	.word	0x24024e68

08018408 <__sflush_r>:
 8018408:	898a      	ldrh	r2, [r1, #12]
 801840a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801840e:	4605      	mov	r5, r0
 8018410:	0710      	lsls	r0, r2, #28
 8018412:	460c      	mov	r4, r1
 8018414:	d458      	bmi.n	80184c8 <__sflush_r+0xc0>
 8018416:	684b      	ldr	r3, [r1, #4]
 8018418:	2b00      	cmp	r3, #0
 801841a:	dc05      	bgt.n	8018428 <__sflush_r+0x20>
 801841c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801841e:	2b00      	cmp	r3, #0
 8018420:	dc02      	bgt.n	8018428 <__sflush_r+0x20>
 8018422:	2000      	movs	r0, #0
 8018424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801842a:	2e00      	cmp	r6, #0
 801842c:	d0f9      	beq.n	8018422 <__sflush_r+0x1a>
 801842e:	2300      	movs	r3, #0
 8018430:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018434:	682f      	ldr	r7, [r5, #0]
 8018436:	6a21      	ldr	r1, [r4, #32]
 8018438:	602b      	str	r3, [r5, #0]
 801843a:	d032      	beq.n	80184a2 <__sflush_r+0x9a>
 801843c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801843e:	89a3      	ldrh	r3, [r4, #12]
 8018440:	075a      	lsls	r2, r3, #29
 8018442:	d505      	bpl.n	8018450 <__sflush_r+0x48>
 8018444:	6863      	ldr	r3, [r4, #4]
 8018446:	1ac0      	subs	r0, r0, r3
 8018448:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801844a:	b10b      	cbz	r3, 8018450 <__sflush_r+0x48>
 801844c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801844e:	1ac0      	subs	r0, r0, r3
 8018450:	2300      	movs	r3, #0
 8018452:	4602      	mov	r2, r0
 8018454:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018456:	6a21      	ldr	r1, [r4, #32]
 8018458:	4628      	mov	r0, r5
 801845a:	47b0      	blx	r6
 801845c:	1c43      	adds	r3, r0, #1
 801845e:	89a3      	ldrh	r3, [r4, #12]
 8018460:	d106      	bne.n	8018470 <__sflush_r+0x68>
 8018462:	6829      	ldr	r1, [r5, #0]
 8018464:	291d      	cmp	r1, #29
 8018466:	d848      	bhi.n	80184fa <__sflush_r+0xf2>
 8018468:	4a29      	ldr	r2, [pc, #164]	; (8018510 <__sflush_r+0x108>)
 801846a:	40ca      	lsrs	r2, r1
 801846c:	07d6      	lsls	r6, r2, #31
 801846e:	d544      	bpl.n	80184fa <__sflush_r+0xf2>
 8018470:	2200      	movs	r2, #0
 8018472:	6062      	str	r2, [r4, #4]
 8018474:	04d9      	lsls	r1, r3, #19
 8018476:	6922      	ldr	r2, [r4, #16]
 8018478:	6022      	str	r2, [r4, #0]
 801847a:	d504      	bpl.n	8018486 <__sflush_r+0x7e>
 801847c:	1c42      	adds	r2, r0, #1
 801847e:	d101      	bne.n	8018484 <__sflush_r+0x7c>
 8018480:	682b      	ldr	r3, [r5, #0]
 8018482:	b903      	cbnz	r3, 8018486 <__sflush_r+0x7e>
 8018484:	6560      	str	r0, [r4, #84]	; 0x54
 8018486:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018488:	602f      	str	r7, [r5, #0]
 801848a:	2900      	cmp	r1, #0
 801848c:	d0c9      	beq.n	8018422 <__sflush_r+0x1a>
 801848e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018492:	4299      	cmp	r1, r3
 8018494:	d002      	beq.n	801849c <__sflush_r+0x94>
 8018496:	4628      	mov	r0, r5
 8018498:	f000 f8de 	bl	8018658 <_free_r>
 801849c:	2000      	movs	r0, #0
 801849e:	6360      	str	r0, [r4, #52]	; 0x34
 80184a0:	e7c0      	b.n	8018424 <__sflush_r+0x1c>
 80184a2:	2301      	movs	r3, #1
 80184a4:	4628      	mov	r0, r5
 80184a6:	47b0      	blx	r6
 80184a8:	1c41      	adds	r1, r0, #1
 80184aa:	d1c8      	bne.n	801843e <__sflush_r+0x36>
 80184ac:	682b      	ldr	r3, [r5, #0]
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	d0c5      	beq.n	801843e <__sflush_r+0x36>
 80184b2:	2b1d      	cmp	r3, #29
 80184b4:	d001      	beq.n	80184ba <__sflush_r+0xb2>
 80184b6:	2b16      	cmp	r3, #22
 80184b8:	d101      	bne.n	80184be <__sflush_r+0xb6>
 80184ba:	602f      	str	r7, [r5, #0]
 80184bc:	e7b1      	b.n	8018422 <__sflush_r+0x1a>
 80184be:	89a3      	ldrh	r3, [r4, #12]
 80184c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80184c4:	81a3      	strh	r3, [r4, #12]
 80184c6:	e7ad      	b.n	8018424 <__sflush_r+0x1c>
 80184c8:	690f      	ldr	r7, [r1, #16]
 80184ca:	2f00      	cmp	r7, #0
 80184cc:	d0a9      	beq.n	8018422 <__sflush_r+0x1a>
 80184ce:	0793      	lsls	r3, r2, #30
 80184d0:	680e      	ldr	r6, [r1, #0]
 80184d2:	bf08      	it	eq
 80184d4:	694b      	ldreq	r3, [r1, #20]
 80184d6:	600f      	str	r7, [r1, #0]
 80184d8:	bf18      	it	ne
 80184da:	2300      	movne	r3, #0
 80184dc:	eba6 0807 	sub.w	r8, r6, r7
 80184e0:	608b      	str	r3, [r1, #8]
 80184e2:	f1b8 0f00 	cmp.w	r8, #0
 80184e6:	dd9c      	ble.n	8018422 <__sflush_r+0x1a>
 80184e8:	4643      	mov	r3, r8
 80184ea:	463a      	mov	r2, r7
 80184ec:	6a21      	ldr	r1, [r4, #32]
 80184ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80184f0:	4628      	mov	r0, r5
 80184f2:	47b0      	blx	r6
 80184f4:	2800      	cmp	r0, #0
 80184f6:	dc06      	bgt.n	8018506 <__sflush_r+0xfe>
 80184f8:	89a3      	ldrh	r3, [r4, #12]
 80184fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80184fe:	81a3      	strh	r3, [r4, #12]
 8018500:	f04f 30ff 	mov.w	r0, #4294967295
 8018504:	e78e      	b.n	8018424 <__sflush_r+0x1c>
 8018506:	4407      	add	r7, r0
 8018508:	eba8 0800 	sub.w	r8, r8, r0
 801850c:	e7e9      	b.n	80184e2 <__sflush_r+0xda>
 801850e:	bf00      	nop
 8018510:	20400001 	.word	0x20400001

08018514 <_fflush_r>:
 8018514:	b538      	push	{r3, r4, r5, lr}
 8018516:	690b      	ldr	r3, [r1, #16]
 8018518:	4605      	mov	r5, r0
 801851a:	460c      	mov	r4, r1
 801851c:	b1db      	cbz	r3, 8018556 <_fflush_r+0x42>
 801851e:	b118      	cbz	r0, 8018528 <_fflush_r+0x14>
 8018520:	6983      	ldr	r3, [r0, #24]
 8018522:	b90b      	cbnz	r3, 8018528 <_fflush_r+0x14>
 8018524:	f7ff fa8e 	bl	8017a44 <__sinit>
 8018528:	4b0c      	ldr	r3, [pc, #48]	; (801855c <_fflush_r+0x48>)
 801852a:	429c      	cmp	r4, r3
 801852c:	d109      	bne.n	8018542 <_fflush_r+0x2e>
 801852e:	686c      	ldr	r4, [r5, #4]
 8018530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018534:	b17b      	cbz	r3, 8018556 <_fflush_r+0x42>
 8018536:	4621      	mov	r1, r4
 8018538:	4628      	mov	r0, r5
 801853a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801853e:	f7ff bf63 	b.w	8018408 <__sflush_r>
 8018542:	4b07      	ldr	r3, [pc, #28]	; (8018560 <_fflush_r+0x4c>)
 8018544:	429c      	cmp	r4, r3
 8018546:	d101      	bne.n	801854c <_fflush_r+0x38>
 8018548:	68ac      	ldr	r4, [r5, #8]
 801854a:	e7f1      	b.n	8018530 <_fflush_r+0x1c>
 801854c:	4b05      	ldr	r3, [pc, #20]	; (8018564 <_fflush_r+0x50>)
 801854e:	429c      	cmp	r4, r3
 8018550:	bf08      	it	eq
 8018552:	68ec      	ldreq	r4, [r5, #12]
 8018554:	e7ec      	b.n	8018530 <_fflush_r+0x1c>
 8018556:	2000      	movs	r0, #0
 8018558:	bd38      	pop	{r3, r4, r5, pc}
 801855a:	bf00      	nop
 801855c:	0801aa1c 	.word	0x0801aa1c
 8018560:	0801aa3c 	.word	0x0801aa3c
 8018564:	0801a9fc 	.word	0x0801a9fc

08018568 <_lseek_r>:
 8018568:	b538      	push	{r3, r4, r5, lr}
 801856a:	4c07      	ldr	r4, [pc, #28]	; (8018588 <_lseek_r+0x20>)
 801856c:	4605      	mov	r5, r0
 801856e:	4608      	mov	r0, r1
 8018570:	4611      	mov	r1, r2
 8018572:	2200      	movs	r2, #0
 8018574:	6022      	str	r2, [r4, #0]
 8018576:	461a      	mov	r2, r3
 8018578:	f7e8 fcae 	bl	8000ed8 <_lseek>
 801857c:	1c43      	adds	r3, r0, #1
 801857e:	d102      	bne.n	8018586 <_lseek_r+0x1e>
 8018580:	6823      	ldr	r3, [r4, #0]
 8018582:	b103      	cbz	r3, 8018586 <_lseek_r+0x1e>
 8018584:	602b      	str	r3, [r5, #0]
 8018586:	bd38      	pop	{r3, r4, r5, pc}
 8018588:	24024e68 	.word	0x24024e68

0801858c <__swhatbuf_r>:
 801858c:	b570      	push	{r4, r5, r6, lr}
 801858e:	460e      	mov	r6, r1
 8018590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018594:	2900      	cmp	r1, #0
 8018596:	b096      	sub	sp, #88	; 0x58
 8018598:	4614      	mov	r4, r2
 801859a:	461d      	mov	r5, r3
 801859c:	da07      	bge.n	80185ae <__swhatbuf_r+0x22>
 801859e:	2300      	movs	r3, #0
 80185a0:	602b      	str	r3, [r5, #0]
 80185a2:	89b3      	ldrh	r3, [r6, #12]
 80185a4:	061a      	lsls	r2, r3, #24
 80185a6:	d410      	bmi.n	80185ca <__swhatbuf_r+0x3e>
 80185a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80185ac:	e00e      	b.n	80185cc <__swhatbuf_r+0x40>
 80185ae:	466a      	mov	r2, sp
 80185b0:	f000 f8b2 	bl	8018718 <_fstat_r>
 80185b4:	2800      	cmp	r0, #0
 80185b6:	dbf2      	blt.n	801859e <__swhatbuf_r+0x12>
 80185b8:	9a01      	ldr	r2, [sp, #4]
 80185ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80185be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80185c2:	425a      	negs	r2, r3
 80185c4:	415a      	adcs	r2, r3
 80185c6:	602a      	str	r2, [r5, #0]
 80185c8:	e7ee      	b.n	80185a8 <__swhatbuf_r+0x1c>
 80185ca:	2340      	movs	r3, #64	; 0x40
 80185cc:	2000      	movs	r0, #0
 80185ce:	6023      	str	r3, [r4, #0]
 80185d0:	b016      	add	sp, #88	; 0x58
 80185d2:	bd70      	pop	{r4, r5, r6, pc}

080185d4 <__smakebuf_r>:
 80185d4:	898b      	ldrh	r3, [r1, #12]
 80185d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80185d8:	079d      	lsls	r5, r3, #30
 80185da:	4606      	mov	r6, r0
 80185dc:	460c      	mov	r4, r1
 80185de:	d507      	bpl.n	80185f0 <__smakebuf_r+0x1c>
 80185e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80185e4:	6023      	str	r3, [r4, #0]
 80185e6:	6123      	str	r3, [r4, #16]
 80185e8:	2301      	movs	r3, #1
 80185ea:	6163      	str	r3, [r4, #20]
 80185ec:	b002      	add	sp, #8
 80185ee:	bd70      	pop	{r4, r5, r6, pc}
 80185f0:	ab01      	add	r3, sp, #4
 80185f2:	466a      	mov	r2, sp
 80185f4:	f7ff ffca 	bl	801858c <__swhatbuf_r>
 80185f8:	9900      	ldr	r1, [sp, #0]
 80185fa:	4605      	mov	r5, r0
 80185fc:	4630      	mov	r0, r6
 80185fe:	f7ff faab 	bl	8017b58 <_malloc_r>
 8018602:	b948      	cbnz	r0, 8018618 <__smakebuf_r+0x44>
 8018604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018608:	059a      	lsls	r2, r3, #22
 801860a:	d4ef      	bmi.n	80185ec <__smakebuf_r+0x18>
 801860c:	f023 0303 	bic.w	r3, r3, #3
 8018610:	f043 0302 	orr.w	r3, r3, #2
 8018614:	81a3      	strh	r3, [r4, #12]
 8018616:	e7e3      	b.n	80185e0 <__smakebuf_r+0xc>
 8018618:	4b0d      	ldr	r3, [pc, #52]	; (8018650 <__smakebuf_r+0x7c>)
 801861a:	62b3      	str	r3, [r6, #40]	; 0x28
 801861c:	89a3      	ldrh	r3, [r4, #12]
 801861e:	6020      	str	r0, [r4, #0]
 8018620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018624:	81a3      	strh	r3, [r4, #12]
 8018626:	9b00      	ldr	r3, [sp, #0]
 8018628:	6163      	str	r3, [r4, #20]
 801862a:	9b01      	ldr	r3, [sp, #4]
 801862c:	6120      	str	r0, [r4, #16]
 801862e:	b15b      	cbz	r3, 8018648 <__smakebuf_r+0x74>
 8018630:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018634:	4630      	mov	r0, r6
 8018636:	f000 f881 	bl	801873c <_isatty_r>
 801863a:	b128      	cbz	r0, 8018648 <__smakebuf_r+0x74>
 801863c:	89a3      	ldrh	r3, [r4, #12]
 801863e:	f023 0303 	bic.w	r3, r3, #3
 8018642:	f043 0301 	orr.w	r3, r3, #1
 8018646:	81a3      	strh	r3, [r4, #12]
 8018648:	89a3      	ldrh	r3, [r4, #12]
 801864a:	431d      	orrs	r5, r3
 801864c:	81a5      	strh	r5, [r4, #12]
 801864e:	e7cd      	b.n	80185ec <__smakebuf_r+0x18>
 8018650:	08017a0d 	.word	0x08017a0d

08018654 <__malloc_lock>:
 8018654:	4770      	bx	lr

08018656 <__malloc_unlock>:
 8018656:	4770      	bx	lr

08018658 <_free_r>:
 8018658:	b538      	push	{r3, r4, r5, lr}
 801865a:	4605      	mov	r5, r0
 801865c:	2900      	cmp	r1, #0
 801865e:	d045      	beq.n	80186ec <_free_r+0x94>
 8018660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018664:	1f0c      	subs	r4, r1, #4
 8018666:	2b00      	cmp	r3, #0
 8018668:	bfb8      	it	lt
 801866a:	18e4      	addlt	r4, r4, r3
 801866c:	f7ff fff2 	bl	8018654 <__malloc_lock>
 8018670:	4a1f      	ldr	r2, [pc, #124]	; (80186f0 <_free_r+0x98>)
 8018672:	6813      	ldr	r3, [r2, #0]
 8018674:	4610      	mov	r0, r2
 8018676:	b933      	cbnz	r3, 8018686 <_free_r+0x2e>
 8018678:	6063      	str	r3, [r4, #4]
 801867a:	6014      	str	r4, [r2, #0]
 801867c:	4628      	mov	r0, r5
 801867e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018682:	f7ff bfe8 	b.w	8018656 <__malloc_unlock>
 8018686:	42a3      	cmp	r3, r4
 8018688:	d90c      	bls.n	80186a4 <_free_r+0x4c>
 801868a:	6821      	ldr	r1, [r4, #0]
 801868c:	1862      	adds	r2, r4, r1
 801868e:	4293      	cmp	r3, r2
 8018690:	bf04      	itt	eq
 8018692:	681a      	ldreq	r2, [r3, #0]
 8018694:	685b      	ldreq	r3, [r3, #4]
 8018696:	6063      	str	r3, [r4, #4]
 8018698:	bf04      	itt	eq
 801869a:	1852      	addeq	r2, r2, r1
 801869c:	6022      	streq	r2, [r4, #0]
 801869e:	6004      	str	r4, [r0, #0]
 80186a0:	e7ec      	b.n	801867c <_free_r+0x24>
 80186a2:	4613      	mov	r3, r2
 80186a4:	685a      	ldr	r2, [r3, #4]
 80186a6:	b10a      	cbz	r2, 80186ac <_free_r+0x54>
 80186a8:	42a2      	cmp	r2, r4
 80186aa:	d9fa      	bls.n	80186a2 <_free_r+0x4a>
 80186ac:	6819      	ldr	r1, [r3, #0]
 80186ae:	1858      	adds	r0, r3, r1
 80186b0:	42a0      	cmp	r0, r4
 80186b2:	d10b      	bne.n	80186cc <_free_r+0x74>
 80186b4:	6820      	ldr	r0, [r4, #0]
 80186b6:	4401      	add	r1, r0
 80186b8:	1858      	adds	r0, r3, r1
 80186ba:	4282      	cmp	r2, r0
 80186bc:	6019      	str	r1, [r3, #0]
 80186be:	d1dd      	bne.n	801867c <_free_r+0x24>
 80186c0:	6810      	ldr	r0, [r2, #0]
 80186c2:	6852      	ldr	r2, [r2, #4]
 80186c4:	605a      	str	r2, [r3, #4]
 80186c6:	4401      	add	r1, r0
 80186c8:	6019      	str	r1, [r3, #0]
 80186ca:	e7d7      	b.n	801867c <_free_r+0x24>
 80186cc:	d902      	bls.n	80186d4 <_free_r+0x7c>
 80186ce:	230c      	movs	r3, #12
 80186d0:	602b      	str	r3, [r5, #0]
 80186d2:	e7d3      	b.n	801867c <_free_r+0x24>
 80186d4:	6820      	ldr	r0, [r4, #0]
 80186d6:	1821      	adds	r1, r4, r0
 80186d8:	428a      	cmp	r2, r1
 80186da:	bf04      	itt	eq
 80186dc:	6811      	ldreq	r1, [r2, #0]
 80186de:	6852      	ldreq	r2, [r2, #4]
 80186e0:	6062      	str	r2, [r4, #4]
 80186e2:	bf04      	itt	eq
 80186e4:	1809      	addeq	r1, r1, r0
 80186e6:	6021      	streq	r1, [r4, #0]
 80186e8:	605c      	str	r4, [r3, #4]
 80186ea:	e7c7      	b.n	801867c <_free_r+0x24>
 80186ec:	bd38      	pop	{r3, r4, r5, pc}
 80186ee:	bf00      	nop
 80186f0:	24021940 	.word	0x24021940

080186f4 <_read_r>:
 80186f4:	b538      	push	{r3, r4, r5, lr}
 80186f6:	4c07      	ldr	r4, [pc, #28]	; (8018714 <_read_r+0x20>)
 80186f8:	4605      	mov	r5, r0
 80186fa:	4608      	mov	r0, r1
 80186fc:	4611      	mov	r1, r2
 80186fe:	2200      	movs	r2, #0
 8018700:	6022      	str	r2, [r4, #0]
 8018702:	461a      	mov	r2, r3
 8018704:	f7e8 fb88 	bl	8000e18 <_read>
 8018708:	1c43      	adds	r3, r0, #1
 801870a:	d102      	bne.n	8018712 <_read_r+0x1e>
 801870c:	6823      	ldr	r3, [r4, #0]
 801870e:	b103      	cbz	r3, 8018712 <_read_r+0x1e>
 8018710:	602b      	str	r3, [r5, #0]
 8018712:	bd38      	pop	{r3, r4, r5, pc}
 8018714:	24024e68 	.word	0x24024e68

08018718 <_fstat_r>:
 8018718:	b538      	push	{r3, r4, r5, lr}
 801871a:	4c07      	ldr	r4, [pc, #28]	; (8018738 <_fstat_r+0x20>)
 801871c:	2300      	movs	r3, #0
 801871e:	4605      	mov	r5, r0
 8018720:	4608      	mov	r0, r1
 8018722:	4611      	mov	r1, r2
 8018724:	6023      	str	r3, [r4, #0]
 8018726:	f7e8 fbbc 	bl	8000ea2 <_fstat>
 801872a:	1c43      	adds	r3, r0, #1
 801872c:	d102      	bne.n	8018734 <_fstat_r+0x1c>
 801872e:	6823      	ldr	r3, [r4, #0]
 8018730:	b103      	cbz	r3, 8018734 <_fstat_r+0x1c>
 8018732:	602b      	str	r3, [r5, #0]
 8018734:	bd38      	pop	{r3, r4, r5, pc}
 8018736:	bf00      	nop
 8018738:	24024e68 	.word	0x24024e68

0801873c <_isatty_r>:
 801873c:	b538      	push	{r3, r4, r5, lr}
 801873e:	4c06      	ldr	r4, [pc, #24]	; (8018758 <_isatty_r+0x1c>)
 8018740:	2300      	movs	r3, #0
 8018742:	4605      	mov	r5, r0
 8018744:	4608      	mov	r0, r1
 8018746:	6023      	str	r3, [r4, #0]
 8018748:	f7e8 fbbb 	bl	8000ec2 <_isatty>
 801874c:	1c43      	adds	r3, r0, #1
 801874e:	d102      	bne.n	8018756 <_isatty_r+0x1a>
 8018750:	6823      	ldr	r3, [r4, #0]
 8018752:	b103      	cbz	r3, 8018756 <_isatty_r+0x1a>
 8018754:	602b      	str	r3, [r5, #0]
 8018756:	bd38      	pop	{r3, r4, r5, pc}
 8018758:	24024e68 	.word	0x24024e68

0801875c <_init>:
 801875c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801875e:	bf00      	nop
 8018760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018762:	bc08      	pop	{r3}
 8018764:	469e      	mov	lr, r3
 8018766:	4770      	bx	lr

08018768 <_fini>:
 8018768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801876a:	bf00      	nop
 801876c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801876e:	bc08      	pop	{r3}
 8018770:	469e      	mov	lr, r3
 8018772:	4770      	bx	lr
