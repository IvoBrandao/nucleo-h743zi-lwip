
Nucleo_H743ZI_UDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017f70  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002240  08018210  08018210  00028210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a450  0801a450  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  0801a450  0801a450  0002a450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a458  0801a458  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a458  0801a458  0002a458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a45c  0801a45c  0002a45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  24000000  0801a460  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d884  24000090  0801a4f0  00030090  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2400d914  0801a4f0  0003d914  2**0
                  ALLOC
 11 .lwip_sec     00041a00  30000000  0801a4f0  00040000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004f950  00000000  00000000  000300be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000087d4  00000000  00000000  0007fa0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000023f0  00000000  00000000  000881e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002178  00000000  00000000  0008a5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00046cf8  00000000  00000000  0008c750  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00033291  00000000  00000000  000d3448  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00181700  00000000  00000000  001066d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00287dd9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000980c  00000000  00000000  00287e54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000090 	.word	0x24000090
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080181f8 	.word	0x080181f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000094 	.word	0x24000094
 80002dc:	080181f8 	.word	0x080181f8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
	...

08000690 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4a07      	ldr	r2, [pc, #28]	; (80006bc <vApplicationGetIdleTaskMemory+0x2c>)
 80006a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <vApplicationGetIdleTaskMemory+0x30>)
 80006a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ae:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	240000ac 	.word	0x240000ac
 80006c0:	24000100 	.word	0x24000100

080006c4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80006d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	4a06      	ldr	r2, [pc, #24]	; (80006f4 <vApplicationGetTimerTaskMemory+0x30>)
 80006da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006e2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	24001100 	.word	0x24001100
 80006f4:	24001154 	.word	0x24001154

080006f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006f8:	b5b0      	push	{r4, r5, r7, lr}
 80006fa:	b08e      	sub	sp, #56	; 0x38
 80006fc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of StartupTask */
  osThreadDef(StartupTask, Task_Startup, osPriorityNormal, 0, 2048);
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_FREERTOS_Init+0x58>)
 8000700:	f107 041c 	add.w	r4, r7, #28
 8000704:	461d      	mov	r5, r3
 8000706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800070e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StartupTaskHandle = osThreadCreate(osThread(StartupTask), NULL);
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f00a fabf 	bl	800ac9c <osThreadCreate>
 800071e:	4602      	mov	r2, r0
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_FREERTOS_Init+0x5c>)
 8000722:	601a      	str	r2, [r3, #0]

  /* definition and creation of HeartBeat_Task */
  osThreadDef(HeartBeat_Task, Task_HeartBeat, osPriorityNormal, 0, 2048);
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_FREERTOS_Init+0x60>)
 8000726:	463c      	mov	r4, r7
 8000728:	461d      	mov	r5, r3
 800072a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000732:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HeartBeat_TaskHandle = osThreadCreate(osThread(HeartBeat_Task), NULL);
 8000736:	463b      	mov	r3, r7
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f00a faae 	bl	800ac9c <osThreadCreate>
 8000740:	4602      	mov	r2, r0
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_FREERTOS_Init+0x64>)
 8000744:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000746:	bf00      	nop
 8000748:	3738      	adds	r7, #56	; 0x38
 800074a:	46bd      	mov	sp, r7
 800074c:	bdb0      	pop	{r4, r5, r7, pc}
 800074e:	bf00      	nop
 8000750:	0801821c 	.word	0x0801821c
 8000754:	2400a540 	.word	0x2400a540
 8000758:	08018248 	.word	0x08018248
 800075c:	2400a544 	.word	0x2400a544

08000760 <Task_Startup>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_Task_Startup */
void Task_Startup(void const * argument)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000768:	f009 fd64 	bl	800a234 <MX_LWIP_Init>
  /* Infinite loop */
  for(;;)
  {

	  // Terminate the current thread
 	osThreadTerminate(NULL);
 800076c:	2000      	movs	r0, #0
 800076e:	f00a fae1 	bl	800ad34 <osThreadTerminate>
 8000772:	e7fb      	b.n	800076c <Task_Startup+0xc>

08000774 <Task_HeartBeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_HeartBeat */
void Task_HeartBeat(void const * argument)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_HeartBeat */
  /* Infinite loop */
  for(;;)
  {

	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800077c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000780:	4803      	ldr	r0, [pc, #12]	; (8000790 <Task_HeartBeat+0x1c>)
 8000782:	f003 f911 	bl	80039a8 <HAL_GPIO_TogglePin>
    osDelay(100);
 8000786:	2064      	movs	r0, #100	; 0x64
 8000788:	f00a fae0 	bl	800ad4c <osDelay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800078c:	e7f6      	b.n	800077c <Task_HeartBeat+0x8>
 800078e:	bf00      	nop
 8000790:	58020400 	.word	0x58020400

08000794 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	; 0x30
 8000798:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	4b4f      	ldr	r3, [pc, #316]	; (80008e8 <MX_GPIO_Init+0x154>)
 80007ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b0:	4a4d      	ldr	r2, [pc, #308]	; (80008e8 <MX_GPIO_Init+0x154>)
 80007b2:	f043 0304 	orr.w	r3, r3, #4
 80007b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ba:	4b4b      	ldr	r3, [pc, #300]	; (80008e8 <MX_GPIO_Init+0x154>)
 80007bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c0:	f003 0304 	and.w	r3, r3, #4
 80007c4:	61bb      	str	r3, [r7, #24]
 80007c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c8:	4b47      	ldr	r3, [pc, #284]	; (80008e8 <MX_GPIO_Init+0x154>)
 80007ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ce:	4a46      	ldr	r2, [pc, #280]	; (80008e8 <MX_GPIO_Init+0x154>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007d8:	4b43      	ldr	r3, [pc, #268]	; (80008e8 <MX_GPIO_Init+0x154>)
 80007da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b40      	ldr	r3, [pc, #256]	; (80008e8 <MX_GPIO_Init+0x154>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	4a3e      	ldr	r2, [pc, #248]	; (80008e8 <MX_GPIO_Init+0x154>)
 80007ee:	f043 0301 	orr.w	r3, r3, #1
 80007f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f6:	4b3c      	ldr	r3, [pc, #240]	; (80008e8 <MX_GPIO_Init+0x154>)
 80007f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fc:	f003 0301 	and.w	r3, r3, #1
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000804:	4b38      	ldr	r3, [pc, #224]	; (80008e8 <MX_GPIO_Init+0x154>)
 8000806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080a:	4a37      	ldr	r2, [pc, #220]	; (80008e8 <MX_GPIO_Init+0x154>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000814:	4b34      	ldr	r3, [pc, #208]	; (80008e8 <MX_GPIO_Init+0x154>)
 8000816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000822:	4b31      	ldr	r3, [pc, #196]	; (80008e8 <MX_GPIO_Init+0x154>)
 8000824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000828:	4a2f      	ldr	r2, [pc, #188]	; (80008e8 <MX_GPIO_Init+0x154>)
 800082a:	f043 0308 	orr.w	r3, r3, #8
 800082e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000832:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <MX_GPIO_Init+0x154>)
 8000834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000838:	f003 0308 	and.w	r3, r3, #8
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000840:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <MX_GPIO_Init+0x154>)
 8000842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000846:	4a28      	ldr	r2, [pc, #160]	; (80008e8 <MX_GPIO_Init+0x154>)
 8000848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800084c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000850:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <MX_GPIO_Init+0x154>)
 8000852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000864:	4821      	ldr	r0, [pc, #132]	; (80008ec <MX_GPIO_Init+0x158>)
 8000866:	f003 f86b 	bl	8003940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2140      	movs	r1, #64	; 0x40
 800086e:	4820      	ldr	r0, [pc, #128]	; (80008f0 <MX_GPIO_Init+0x15c>)
 8000870:	f003 f866 	bl	8003940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087a:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <MX_GPIO_Init+0x160>)
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	481b      	ldr	r0, [pc, #108]	; (80008f8 <MX_GPIO_Init+0x164>)
 800088a:	f002 fda9 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800088e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	4811      	ldr	r0, [pc, #68]	; (80008ec <MX_GPIO_Init+0x158>)
 80008a8:	f002 fd9a 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ac:	2340      	movs	r3, #64	; 0x40
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	480b      	ldr	r0, [pc, #44]	; (80008f0 <MX_GPIO_Init+0x15c>)
 80008c4:	f002 fd8c 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_GPIO_Init+0x15c>)
 80008dc:	f002 fd80 	bl	80033e0 <HAL_GPIO_Init>

}
 80008e0:	bf00      	nop
 80008e2:	3730      	adds	r7, #48	; 0x30
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	58024400 	.word	0x58024400
 80008ec:	58020400 	.word	0x58020400
 80008f0:	58021800 	.word	0x58021800
 80008f4:	11110000 	.word	0x11110000
 80008f8:	58020800 	.word	0x58020800

080008fc <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000900:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000904:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000908:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <SCB_EnableICache+0x3c>)
 800090a:	2200      	movs	r2, #0
 800090c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000910:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000914:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <SCB_EnableICache+0x3c>)
 800091a:	695b      	ldr	r3, [r3, #20]
 800091c:	4a06      	ldr	r2, [pc, #24]	; (8000938 <SCB_EnableICache+0x3c>)
 800091e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000922:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000924:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000928:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000942:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <SCB_EnableDCache+0x7c>)
 8000944:	2200      	movs	r2, #0
 8000946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800094a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <SCB_EnableDCache+0x7c>)
 8000950:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000954:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	0b5b      	lsrs	r3, r3, #13
 800095a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800095e:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	08db      	lsrs	r3, r3, #3
 8000964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000968:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	015a      	lsls	r2, r3, #5
 800096e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000972:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000974:	68ba      	ldr	r2, [r7, #8]
 8000976:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000978:	490f      	ldr	r1, [pc, #60]	; (80009b8 <SCB_EnableDCache+0x7c>)
 800097a:	4313      	orrs	r3, r2
 800097c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	1e5a      	subs	r2, r3, #1
 8000984:	60ba      	str	r2, [r7, #8]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d1ef      	bne.n	800096a <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	1e5a      	subs	r2, r3, #1
 800098e:	60fa      	str	r2, [r7, #12]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1e5      	bne.n	8000960 <SCB_EnableDCache+0x24>
 8000994:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <SCB_EnableDCache+0x7c>)
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	4a06      	ldr	r2, [pc, #24]	; (80009b8 <SCB_EnableDCache+0x7c>)
 800099e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009a2:	6153      	str	r3, [r2, #20]
 80009a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009a8:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009c0:	f000 f8c2 	bl	8000b48 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80009c4:	f7ff ff9a 	bl	80008fc <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80009c8:	f7ff ffb8 	bl	800093c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009cc:	f000 fce6 	bl	800139c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d0:	f000 f80a 	bl	80009e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d4:	f7ff fede 	bl	8000794 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009d8:	f000 fac0 	bl	8000f5c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80009dc:	f7ff fe8c 	bl	80006f8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80009e0:	f00a f945 	bl	800ac6e <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <main+0x28>
	...

080009e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b0cc      	sub	sp, #304	; 0x130
 80009ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009f2:	224c      	movs	r2, #76	; 0x4c
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f016 fd12 	bl	8017420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a00:	2220      	movs	r2, #32
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f016 fd0b 	bl	8017420 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	4618      	mov	r0, r3
 8000a10:	23bc      	movs	r3, #188	; 0xbc
 8000a12:	461a      	mov	r2, r3
 8000a14:	2100      	movs	r1, #0
 8000a16:	f016 fd03 	bl	8017420 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	f002 ffee 	bl	80039fc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	4b46      	ldr	r3, [pc, #280]	; (8000b40 <SystemClock_Config+0x158>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	4a45      	ldr	r2, [pc, #276]	; (8000b40 <SystemClock_Config+0x158>)
 8000a2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a30:	6193      	str	r3, [r2, #24]
 8000a32:	4b43      	ldr	r3, [pc, #268]	; (8000b40 <SystemClock_Config+0x158>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	4b41      	ldr	r3, [pc, #260]	; (8000b44 <SystemClock_Config+0x15c>)
 8000a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a42:	4a40      	ldr	r2, [pc, #256]	; (8000b44 <SystemClock_Config+0x15c>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a4a:	4b3e      	ldr	r3, [pc, #248]	; (8000b44 <SystemClock_Config+0x15c>)
 8000a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a4e:	f003 0201 	and.w	r2, r3, #1
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a5a:	bf00      	nop
 8000a5c:	4b38      	ldr	r3, [pc, #224]	; (8000b40 <SystemClock_Config+0x158>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a68:	d1f8      	bne.n	8000a5c <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000a8a:	2378      	movs	r3, #120	; 0x78
 8000a8c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a96:	2304      	movs	r3, #4
 8000a98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000aa2:	230c      	movs	r3, #12
 8000aa4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f002 ffe5 	bl	8003a88 <HAL_RCC_OscConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000ac4:	f000 f89c 	bl	8000c00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac8:	233f      	movs	r3, #63	; 0x3f
 8000aca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ada:	2308      	movs	r3, #8
 8000adc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ae0:	2340      	movs	r3, #64	; 0x40
 8000ae2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ae6:	2340      	movs	r3, #64	; 0x40
 8000ae8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000af4:	2340      	movs	r3, #64	; 0x40
 8000af6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000afa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000afe:	2104      	movs	r1, #4
 8000b00:	4618      	mov	r0, r3
 8000b02:	f003 fcbf 	bl	8004484 <HAL_RCC_ClockConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000b0c:	f000 f878 	bl	8000c00 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	2202      	movs	r2, #2
 8000b16:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b18:	f107 0308 	add.w	r3, r7, #8
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	4618      	mov	r0, r3
 8000b26:	f004 fa2d 	bl	8004f84 <HAL_RCCEx_PeriphCLKConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 8000b30:	f000 f866 	bl	8000c00 <Error_Handler>
  }
}
 8000b34:	bf00      	nop
 8000b36:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	58024800 	.word	0x58024800
 8000b44:	58000400 	.word	0x58000400

08000b48 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b4e:	463b      	mov	r3, r7
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b5a:	f000 fdb7 	bl	80016cc <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000b66:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <MPU_Config+0x8c>)
 8000b68:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000b6a:	2307      	movs	r3, #7
 8000b6c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b76:	2303      	movs	r3, #3
 8000b78:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000b86:	2301      	movs	r3, #1
 8000b88:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 fdd1 	bl	8001734 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b92:	2301      	movs	r3, #1
 8000b94:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000b96:	2301      	movs	r3, #1
 8000b98:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MPU_Config+0x90>)
 8000b9c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000b9e:	230d      	movs	r3, #13
 8000ba0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000baa:	2303      	movs	r3, #3
 8000bac:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 fdb7 	bl	8001734 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bc6:	2004      	movs	r0, #4
 8000bc8:	f000 fd96 	bl	80016f8 <HAL_MPU_Enable>

}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	30040000 	.word	0x30040000
 8000bd8:	30044000 	.word	0x30044000

08000bdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d101      	bne.n	8000bf2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bee:	f000 fc11 	bl	8001414 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40010000 	.word	0x40010000

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8000c0e:	b480      	push	{r7}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
 8000c16:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <HAL_MspInit+0x38>)
 8000c2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c30:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <HAL_MspInit+0x38>)
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <HAL_MspInit+0x38>)
 8000c3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c40:	f003 0302 	and.w	r3, r3, #2
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	f06f 0001 	mvn.w	r0, #1
 8000c50:	f000 fcfa 	bl	8001648 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	58024400 	.word	0x58024400

08000c60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08e      	sub	sp, #56	; 0x38
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8000c70:	2200      	movs	r2, #0
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	2019      	movs	r0, #25
 8000c76:	f000 fce7 	bl	8001648 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8000c7a:	2019      	movs	r0, #25
 8000c7c:	f000 fd0e 	bl	800169c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c80:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <HAL_InitTick+0xa8>)
 8000c82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c86:	4a20      	ldr	r2, [pc, #128]	; (8000d08 <HAL_InitTick+0xa8>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000c90:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <HAL_InitTick+0xa8>)
 8000c92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c9e:	f107 020c 	add.w	r2, r7, #12
 8000ca2:	f107 0310 	add.w	r3, r7, #16
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f004 f929 	bl	8004f00 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000cae:	f004 f911 	bl	8004ed4 <HAL_RCC_GetPCLK2Freq>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	637b      	str	r3, [r7, #52]	; 0x34
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cba:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <HAL_InitTick+0xac>)
 8000cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc0:	0c9b      	lsrs	r3, r3, #18
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0xb0>)
 8000cc8:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <HAL_InitTick+0xb4>)
 8000cca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000ccc:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_InitTick+0xb0>)
 8000cce:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cd2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cd4:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <HAL_InitTick+0xb0>)
 8000cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cd8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cda:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <HAL_InitTick+0xb0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_InitTick+0xb0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ce6:	480a      	ldr	r0, [pc, #40]	; (8000d10 <HAL_InitTick+0xb0>)
 8000ce8:	f005 ffc2 	bl	8006c70 <HAL_TIM_Base_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d104      	bne.n	8000cfc <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000cf2:	4807      	ldr	r0, [pc, #28]	; (8000d10 <HAL_InitTick+0xb0>)
 8000cf4:	f006 f892 	bl	8006e1c <HAL_TIM_Base_Start_IT>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	e000      	b.n	8000cfe <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3738      	adds	r7, #56	; 0x38
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	58024400 	.word	0x58024400
 8000d0c:	431bde83 	.word	0x431bde83
 8000d10:	2400a548 	.word	0x2400a548
 8000d14:	40010000 	.word	0x40010000

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <MemManage_Handler+0x4>

08000d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <TIM1_UP_IRQHandler+0x10>)
 8000d52:	f006 f8f3 	bl	8006f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2400a548 	.word	0x2400a548

08000d60 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	e00a      	b.n	8000d88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d72:	f3af 8000 	nop.w
 8000d76:	4601      	mov	r1, r0
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	1c5a      	adds	r2, r3, #1
 8000d7c:	60ba      	str	r2, [r7, #8]
 8000d7e:	b2ca      	uxtb	r2, r1
 8000d80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3301      	adds	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697a      	ldr	r2, [r7, #20]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	dbf0      	blt.n	8000d72 <_read+0x12>
	}

return len;
 8000d90:	687b      	ldr	r3, [r7, #4]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	60f8      	str	r0, [r7, #12]
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	e009      	b.n	8000dc0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	1c5a      	adds	r2, r3, #1
 8000db0:	60ba      	str	r2, [r7, #8]
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	dbf1      	blt.n	8000dac <_write+0x12>
	}
	return len;
 8000dc8:	687b      	ldr	r3, [r7, #4]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <_close>:

int _close(int file)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
	return -1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dfa:	605a      	str	r2, [r3, #4]
	return 0;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <_isatty>:

int _isatty(int file)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
	return 1;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
	return 0;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <_sbrk+0x50>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d102      	bne.n	8000e52 <_sbrk+0x16>
		heap_end = &end;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <_sbrk+0x50>)
 8000e4e:	4a10      	ldr	r2, [pc, #64]	; (8000e90 <_sbrk+0x54>)
 8000e50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <_sbrk+0x50>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <_sbrk+0x50>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	466a      	mov	r2, sp
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d905      	bls.n	8000e72 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <_sbrk+0x58>)
 8000e68:	220c      	movs	r2, #12
 8000e6a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e70:	e006      	b.n	8000e80 <_sbrk+0x44>
	}

	heap_end += incr;
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <_sbrk+0x50>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <_sbrk+0x50>)
 8000e7c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	24002154 	.word	0x24002154
 8000e90:	2400d918 	.word	0x2400d918
 8000e94:	2400d90c 	.word	0x2400d90c

08000e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <SystemInit+0xac>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea2:	4a28      	ldr	r2, [pc, #160]	; (8000f44 <SystemInit+0xac>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000eac:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <SystemInit+0xb0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a25      	ldr	r2, [pc, #148]	; (8000f48 <SystemInit+0xb0>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000eb8:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <SystemInit+0xb0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ebe:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <SystemInit+0xb0>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4921      	ldr	r1, [pc, #132]	; (8000f48 <SystemInit+0xb0>)
 8000ec4:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <SystemInit+0xb4>)
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000eca:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <SystemInit+0xb0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <SystemInit+0xb0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <SystemInit+0xb0>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <SystemInit+0xb0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <SystemInit+0xb0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000ee8:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <SystemInit+0xb0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eee:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <SystemInit+0xb0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <SystemInit+0xb0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <SystemInit+0xb0>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <SystemInit+0xb0>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <SystemInit+0xb0>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <SystemInit+0xb0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0d      	ldr	r2, [pc, #52]	; (8000f48 <SystemInit+0xb0>)
 8000f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <SystemInit+0xb0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <SystemInit+0xb8>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <SystemInit+0xbc>)
 8000f24:	4013      	ands	r3, r2
 8000f26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f2a:	d202      	bcs.n	8000f32 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <SystemInit+0xc0>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <SystemInit+0xac>)
 8000f34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f38:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00
 8000f48:	58024400 	.word	0x58024400
 8000f4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f50:	5c001000 	.word	0x5c001000
 8000f54:	ffff0000 	.word	0xffff0000
 8000f58:	51008108 	.word	0x51008108

08000f5c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000f60:	4b22      	ldr	r3, [pc, #136]	; (8000fec <MX_USART3_UART_Init+0x90>)
 8000f62:	4a23      	ldr	r2, [pc, #140]	; (8000ff0 <MX_USART3_UART_Init+0x94>)
 8000f64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f66:	4b21      	ldr	r3, [pc, #132]	; (8000fec <MX_USART3_UART_Init+0x90>)
 8000f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <MX_USART3_UART_Init+0x90>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <MX_USART3_UART_Init+0x90>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <MX_USART3_UART_Init+0x90>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f80:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_USART3_UART_Init+0x90>)
 8000f82:	220c      	movs	r2, #12
 8000f84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <MX_USART3_UART_Init+0x90>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <MX_USART3_UART_Init+0x90>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <MX_USART3_UART_Init+0x90>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_USART3_UART_Init+0x90>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_USART3_UART_Init+0x90>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fa4:	4811      	ldr	r0, [pc, #68]	; (8000fec <MX_USART3_UART_Init+0x90>)
 8000fa6:	f006 f9c9 	bl	800733c <HAL_UART_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000fb0:	f7ff fe26 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	480d      	ldr	r0, [pc, #52]	; (8000fec <MX_USART3_UART_Init+0x90>)
 8000fb8:	f008 ffa0 	bl	8009efc <HAL_UARTEx_SetTxFifoThreshold>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000fc2:	f7ff fe1d 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4808      	ldr	r0, [pc, #32]	; (8000fec <MX_USART3_UART_Init+0x90>)
 8000fca:	f009 f831 	bl	800a030 <HAL_UARTEx_SetRxFifoThreshold>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000fd4:	f7ff fe14 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <MX_USART3_UART_Init+0x90>)
 8000fda:	f008 ff19 	bl	8009e10 <HAL_UARTEx_DisableFifoMode>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000fe4:	f7ff fe0c 	bl	8000c00 <Error_Handler>
  }

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	2400a588 	.word	0x2400a588
 8000ff0:	40004800 	.word	0x40004800

08000ff4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a1a      	ldr	r2, [pc, #104]	; (800107c <HAL_UART_MspInit+0x88>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d12e      	bne.n	8001074 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <HAL_UART_MspInit+0x8c>)
 8001018:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800101c:	4a18      	ldr	r2, [pc, #96]	; (8001080 <HAL_UART_MspInit+0x8c>)
 800101e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001022:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <HAL_UART_MspInit+0x8c>)
 8001028:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800102c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_UART_MspInit+0x8c>)
 8001036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103a:	4a11      	ldr	r2, [pc, #68]	; (8001080 <HAL_UART_MspInit+0x8c>)
 800103c:	f043 0308 	orr.w	r3, r3, #8
 8001040:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_UART_MspInit+0x8c>)
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001052:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001064:	2307      	movs	r3, #7
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <HAL_UART_MspInit+0x90>)
 8001070:	f002 f9b6 	bl	80033e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001074:	bf00      	nop
 8001076:	3728      	adds	r7, #40	; 0x28
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40004800 	.word	0x40004800
 8001080:	58024400 	.word	0x58024400
 8001084:	58020c00 	.word	0x58020c00

08001088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800108c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800108e:	e003      	b.n	8001098 <LoopCopyDataInit>

08001090 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001092:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001094:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001096:	3104      	adds	r1, #4

08001098 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001098:	480b      	ldr	r0, [pc, #44]	; (80010c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800109c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800109e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010a0:	d3f6      	bcc.n	8001090 <CopyDataInit>
  ldr  r2, =_sbss
 80010a2:	4a0b      	ldr	r2, [pc, #44]	; (80010d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010a4:	e002      	b.n	80010ac <LoopFillZerobss>

080010a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010a8:	f842 3b04 	str.w	r3, [r2], #4

080010ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010b0:	d3f9      	bcc.n	80010a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010b2:	f7ff fef1 	bl	8000e98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010b6:	f016 f975 	bl	80173a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ba:	f7ff fc7f 	bl	80009bc <main>
  bx  lr    
 80010be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010c0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80010c4:	0801a460 	.word	0x0801a460
  ldr  r0, =_sdata
 80010c8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80010cc:	24000090 	.word	0x24000090
  ldr  r2, =_sbss
 80010d0:	24000090 	.word	0x24000090
  ldr  r3, = _ebss
 80010d4:	2400d914 	.word	0x2400d914

080010d8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d8:	e7fe      	b.n	80010d8 <ADC3_IRQHandler>

080010da <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d00b      	beq.n	8001102 <LAN8742_RegisterBusIO+0x28>
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d007      	beq.n	8001102 <LAN8742_RegisterBusIO+0x28>
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <LAN8742_RegisterBusIO+0x28>
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d102      	bne.n	8001108 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001102:	f04f 33ff 	mov.w	r3, #4294967295
 8001106:	e014      	b.n	8001132 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	691a      	ldr	r2, [r3, #16]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d17c      	bne.n	8001258 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2220      	movs	r2, #32
 8001170:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	e01c      	b.n	80011b2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	f107 0208 	add.w	r2, r7, #8
 8001180:	2112      	movs	r1, #18
 8001182:	6978      	ldr	r0, [r7, #20]
 8001184:	4798      	blx	r3
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	da03      	bge.n	8001194 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800118c:	f06f 0304 	mvn.w	r3, #4
 8001190:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001192:	e00b      	b.n	80011ac <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	f003 031f 	and.w	r3, r3, #31
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	429a      	cmp	r2, r3
 800119e:	d105      	bne.n	80011ac <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
         break;
 80011aa:	e005      	b.n	80011b8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	3301      	adds	r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	2b1f      	cmp	r3, #31
 80011b6:	d9df      	bls.n	8001178 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b1f      	cmp	r3, #31
 80011be:	d902      	bls.n	80011c6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80011c0:	f06f 0302 	mvn.w	r3, #2
 80011c4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d145      	bne.n	8001258 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6810      	ldr	r0, [r2, #0]
 80011d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011d8:	2100      	movs	r1, #0
 80011da:	4798      	blx	r3
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db37      	blt.n	8001252 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	6810      	ldr	r0, [r2, #0]
 80011ea:	f107 0208 	add.w	r2, r7, #8
 80011ee:	2100      	movs	r1, #0
 80011f0:	4798      	blx	r3
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db28      	blt.n	800124a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4798      	blx	r3
 80011fe:	4603      	mov	r3, r0
 8001200:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001202:	e01c      	b.n	800123e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4798      	blx	r3
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001216:	d80e      	bhi.n	8001236 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	6810      	ldr	r0, [r2, #0]
 8001220:	f107 0208 	add.w	r2, r7, #8
 8001224:	2100      	movs	r1, #0
 8001226:	4798      	blx	r3
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	da07      	bge.n	800123e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800122e:	f06f 0304 	mvn.w	r3, #4
 8001232:	613b      	str	r3, [r7, #16]
                 break;
 8001234:	e010      	b.n	8001258 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001236:	f06f 0301 	mvn.w	r3, #1
 800123a:	613b      	str	r3, [r7, #16]
               break;
 800123c:	e00c      	b.n	8001258 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1dd      	bne.n	8001204 <LAN8742_Init+0xc6>
 8001248:	e006      	b.n	8001258 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800124a:	f06f 0304 	mvn.w	r3, #4
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	e002      	b.n	8001258 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001252:	f06f 0303 	mvn.w	r3, #3
 8001256:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d112      	bne.n	8001284 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	4798      	blx	r3
 8001264:	4603      	mov	r3, r0
 8001266:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001268:	bf00      	nop
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	4798      	blx	r3
 8001270:	4603      	mov	r3, r0
 8001272:	461a      	mov	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800127c:	d9f5      	bls.n	800126a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001284:	693b      	ldr	r3, [r7, #16]
 }
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6810      	ldr	r0, [r2, #0]
 80012a2:	f107 020c 	add.w	r2, r7, #12
 80012a6:	2101      	movs	r1, #1
 80012a8:	4798      	blx	r3
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	da02      	bge.n	80012b6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012b0:	f06f 0304 	mvn.w	r3, #4
 80012b4:	e06e      	b.n	8001394 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6810      	ldr	r0, [r2, #0]
 80012be:	f107 020c 	add.w	r2, r7, #12
 80012c2:	2101      	movs	r1, #1
 80012c4:	4798      	blx	r3
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	da02      	bge.n	80012d2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012cc:	f06f 0304 	mvn.w	r3, #4
 80012d0:	e060      	b.n	8001394 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80012dc:	2301      	movs	r3, #1
 80012de:	e059      	b.n	8001394 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	6810      	ldr	r0, [r2, #0]
 80012e8:	f107 020c 	add.w	r2, r7, #12
 80012ec:	2100      	movs	r1, #0
 80012ee:	4798      	blx	r3
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	da02      	bge.n	80012fc <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012f6:	f06f 0304 	mvn.w	r3, #4
 80012fa:	e04b      	b.n	8001394 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d11b      	bne.n	800133e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d006      	beq.n	800131e <LAN8742_GetLinkState+0x90>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800131a:	2302      	movs	r3, #2
 800131c:	e03a      	b.n	8001394 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001328:	2303      	movs	r3, #3
 800132a:	e033      	b.n	8001394 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001336:	2304      	movs	r3, #4
 8001338:	e02c      	b.n	8001394 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800133a:	2305      	movs	r3, #5
 800133c:	e02a      	b.n	8001394 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6810      	ldr	r0, [r2, #0]
 8001346:	f107 020c 	add.w	r2, r7, #12
 800134a:	211f      	movs	r1, #31
 800134c:	4798      	blx	r3
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	da02      	bge.n	800135a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001354:	f06f 0304 	mvn.w	r3, #4
 8001358:	e01c      	b.n	8001394 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001364:	2306      	movs	r3, #6
 8001366:	e015      	b.n	8001394 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 031c 	and.w	r3, r3, #28
 800136e:	2b18      	cmp	r3, #24
 8001370:	d101      	bne.n	8001376 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001372:	2302      	movs	r3, #2
 8001374:	e00e      	b.n	8001394 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f003 031c 	and.w	r3, r3, #28
 800137c:	2b08      	cmp	r3, #8
 800137e:	d101      	bne.n	8001384 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001380:	2303      	movs	r3, #3
 8001382:	e007      	b.n	8001394 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 031c 	and.w	r3, r3, #28
 800138a:	2b14      	cmp	r3, #20
 800138c:	d101      	bne.n	8001392 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800138e:	2304      	movs	r3, #4
 8001390:	e000      	b.n	8001394 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001392:	2305      	movs	r3, #5
    }				
  }
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a2:	2003      	movs	r0, #3
 80013a4:	f000 f930 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013a8:	f003 fbdc 	bl	8004b64 <HAL_RCC_GetSysClockFreq>
 80013ac:	4601      	mov	r1, r0
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_Init+0x68>)
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	0a1b      	lsrs	r3, r3, #8
 80013b4:	f003 030f 	and.w	r3, r3, #15
 80013b8:	4a13      	ldr	r2, [pc, #76]	; (8001408 <HAL_Init+0x6c>)
 80013ba:	5cd3      	ldrb	r3, [r2, r3]
 80013bc:	f003 031f 	and.w	r3, r3, #31
 80013c0:	fa21 f303 	lsr.w	r3, r1, r3
 80013c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_Init+0x68>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <HAL_Init+0x6c>)
 80013d0:	5cd3      	ldrb	r3, [r2, r3]
 80013d2:	f003 031f 	and.w	r3, r3, #31
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	fa22 f303 	lsr.w	r3, r2, r3
 80013dc:	4a0b      	ldr	r2, [pc, #44]	; (800140c <HAL_Init+0x70>)
 80013de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013e0:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <HAL_Init+0x74>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013e6:	2000      	movs	r0, #0
 80013e8:	f7ff fc3a 	bl	8000c60 <HAL_InitTick>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e002      	b.n	80013fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013f6:	f7ff fc15 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	58024400 	.word	0x58024400
 8001408:	0801a270 	.word	0x0801a270
 800140c:	24000004 	.word	0x24000004
 8001410:	24000000 	.word	0x24000000

08001414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_IncTick+0x20>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_IncTick+0x24>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4413      	add	r3, r2
 8001424:	4a04      	ldr	r2, [pc, #16]	; (8001438 <HAL_IncTick+0x24>)
 8001426:	6013      	str	r3, [r2, #0]
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	2400000c 	.word	0x2400000c
 8001438:	2400a614 	.word	0x2400a614

0800143c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return uwTick;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <HAL_GetTick+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	2400a614 	.word	0x2400a614

08001454 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001458:	4b03      	ldr	r3, [pc, #12]	; (8001468 <HAL_GetREVID+0x14>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	0c1b      	lsrs	r3, r3, #16
}
 800145e:	4618      	mov	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	5c001000 	.word	0x5c001000

0800146c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d008      	beq.n	800148c <HAL_SYSCFG_ETHInterfaceSelect+0x20>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001480:	d004      	beq.n	800148c <HAL_SYSCFG_ETHInterfaceSelect+0x20>
 8001482:	f240 215b 	movw	r1, #603	; 0x25b
 8001486:	4807      	ldr	r0, [pc, #28]	; (80014a4 <HAL_SYSCFG_ETHInterfaceSelect+0x38>)
 8001488:	f7ff fbc1 	bl	8000c0e <assert_failed>

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_SYSCFG_ETHInterfaceSelect+0x3c>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001494:	4904      	ldr	r1, [pc, #16]	; (80014a8 <HAL_SYSCFG_ETHInterfaceSelect+0x3c>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	08018264 	.word	0x08018264
 80014a8:	58000400 	.word	0x58000400

080014ac <__NVIC_SetPriorityGrouping>:
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <__NVIC_SetPriorityGrouping+0x40>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c8:	4013      	ands	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <__NVIC_SetPriorityGrouping+0x40>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00
 80014f0:	05fa0000 	.word	0x05fa0000

080014f4 <__NVIC_GetPriorityGrouping>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <__NVIC_GetPriorityGrouping+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	f003 0307 	and.w	r3, r3, #7
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_EnableIRQ>:
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800151a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800151e:	2b00      	cmp	r3, #0
 8001520:	db0b      	blt.n	800153a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	f003 021f 	and.w	r2, r3, #31
 8001528:	4907      	ldr	r1, [pc, #28]	; (8001548 <__NVIC_EnableIRQ+0x38>)
 800152a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800152e:	095b      	lsrs	r3, r3, #5
 8001530:	2001      	movs	r0, #1
 8001532:	fa00 f202 	lsl.w	r2, r0, r2
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000e100 	.word	0xe000e100

0800154c <__NVIC_SetPriority>:
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001558:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155c:	2b00      	cmp	r3, #0
 800155e:	db0a      	blt.n	8001576 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	490c      	ldr	r1, [pc, #48]	; (8001598 <__NVIC_SetPriority+0x4c>)
 8001566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156a:	0112      	lsls	r2, r2, #4
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	440b      	add	r3, r1
 8001570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001574:	e00a      	b.n	800158c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4908      	ldr	r1, [pc, #32]	; (800159c <__NVIC_SetPriority+0x50>)
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	3b04      	subs	r3, #4
 8001584:	0112      	lsls	r2, r2, #4
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	440b      	add	r3, r1
 800158a:	761a      	strb	r2, [r3, #24]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000e100 	.word	0xe000e100
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <NVIC_EncodePriority>:
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	; 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f1c3 0307 	rsb	r3, r3, #7
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	bf28      	it	cs
 80015be:	2304      	movcs	r3, #4
 80015c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3304      	adds	r3, #4
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d902      	bls.n	80015d0 <NVIC_EncodePriority+0x30>
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3b03      	subs	r3, #3
 80015ce:	e000      	b.n	80015d2 <NVIC_EncodePriority+0x32>
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43da      	mvns	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	401a      	ands	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	43d9      	mvns	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	4313      	orrs	r3, r2
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3724      	adds	r7, #36	; 0x24
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b07      	cmp	r3, #7
 8001614:	d00f      	beq.n	8001636 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b06      	cmp	r3, #6
 800161a:	d00c      	beq.n	8001636 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b05      	cmp	r3, #5
 8001620:	d009      	beq.n	8001636 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b04      	cmp	r3, #4
 8001626:	d006      	beq.n	8001636 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b03      	cmp	r3, #3
 800162c:	d003      	beq.n	8001636 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800162e:	2192      	movs	r1, #146	; 0x92
 8001630:	4804      	ldr	r0, [pc, #16]	; (8001644 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001632:	f7ff faec 	bl	8000c0e <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ff38 	bl	80014ac <__NVIC_SetPriorityGrouping>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	08018298 	.word	0x08018298

08001648 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
 8001654:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b0f      	cmp	r3, #15
 800165a:	d903      	bls.n	8001664 <HAL_NVIC_SetPriority+0x1c>
 800165c:	21aa      	movs	r1, #170	; 0xaa
 800165e:	480e      	ldr	r0, [pc, #56]	; (8001698 <HAL_NVIC_SetPriority+0x50>)
 8001660:	f7ff fad5 	bl	8000c0e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	2b0f      	cmp	r3, #15
 8001668:	d903      	bls.n	8001672 <HAL_NVIC_SetPriority+0x2a>
 800166a:	21ab      	movs	r1, #171	; 0xab
 800166c:	480a      	ldr	r0, [pc, #40]	; (8001698 <HAL_NVIC_SetPriority+0x50>)
 800166e:	f7ff face 	bl	8000c0e <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8001672:	f7ff ff3f 	bl	80014f4 <__NVIC_GetPriorityGrouping>
 8001676:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	68b9      	ldr	r1, [r7, #8]
 800167c:	6978      	ldr	r0, [r7, #20]
 800167e:	f7ff ff8f 	bl	80015a0 <NVIC_EncodePriority>
 8001682:	4602      	mov	r2, r0
 8001684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff5e 	bl	800154c <__NVIC_SetPriority>
}
 8001690:	bf00      	nop
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	08018298 	.word	0x08018298

0800169c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80016a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	da03      	bge.n	80016b6 <HAL_NVIC_EnableIRQ+0x1a>
 80016ae:	21be      	movs	r1, #190	; 0xbe
 80016b0:	4805      	ldr	r0, [pc, #20]	; (80016c8 <HAL_NVIC_EnableIRQ+0x2c>)
 80016b2:	f7ff faac 	bl	8000c0e <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ff28 	bl	8001510 <__NVIC_EnableIRQ>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	08018298 	.word	0x08018298

080016cc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80016d0:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_MPU_Disable+0x24>)
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <HAL_MPU_Disable+0x24>)
 80016da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016de:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <HAL_MPU_Disable+0x28>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	605a      	str	r2, [r3, #4]
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000ed00 	.word	0xe000ed00
 80016f4:	e000ed90 	.word	0xe000ed90

080016f8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001700:	4a0a      	ldr	r2, [pc, #40]	; (800172c <HAL_MPU_Enable+0x34>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_MPU_Enable+0x38>)
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	4a08      	ldr	r2, [pc, #32]	; (8001730 <HAL_MPU_Enable+0x38>)
 8001710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001714:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001716:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800171a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000ed90 	.word	0xe000ed90
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	785b      	ldrb	r3, [r3, #1]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d040      	beq.n	80017c6 <HAL_MPU_ConfigRegion+0x92>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	785b      	ldrb	r3, [r3, #1]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d03c      	beq.n	80017c6 <HAL_MPU_ConfigRegion+0x92>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	785b      	ldrb	r3, [r3, #1]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d038      	beq.n	80017c6 <HAL_MPU_ConfigRegion+0x92>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	785b      	ldrb	r3, [r3, #1]
 8001758:	2b03      	cmp	r3, #3
 800175a:	d034      	beq.n	80017c6 <HAL_MPU_ConfigRegion+0x92>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	785b      	ldrb	r3, [r3, #1]
 8001760:	2b04      	cmp	r3, #4
 8001762:	d030      	beq.n	80017c6 <HAL_MPU_ConfigRegion+0x92>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	785b      	ldrb	r3, [r3, #1]
 8001768:	2b05      	cmp	r3, #5
 800176a:	d02c      	beq.n	80017c6 <HAL_MPU_ConfigRegion+0x92>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	785b      	ldrb	r3, [r3, #1]
 8001770:	2b06      	cmp	r3, #6
 8001772:	d028      	beq.n	80017c6 <HAL_MPU_ConfigRegion+0x92>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	785b      	ldrb	r3, [r3, #1]
 8001778:	2b07      	cmp	r3, #7
 800177a:	d024      	beq.n	80017c6 <HAL_MPU_ConfigRegion+0x92>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	785b      	ldrb	r3, [r3, #1]
 8001780:	2b08      	cmp	r3, #8
 8001782:	d020      	beq.n	80017c6 <HAL_MPU_ConfigRegion+0x92>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	785b      	ldrb	r3, [r3, #1]
 8001788:	2b09      	cmp	r3, #9
 800178a:	d01c      	beq.n	80017c6 <HAL_MPU_ConfigRegion+0x92>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	785b      	ldrb	r3, [r3, #1]
 8001790:	2b0a      	cmp	r3, #10
 8001792:	d018      	beq.n	80017c6 <HAL_MPU_ConfigRegion+0x92>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	785b      	ldrb	r3, [r3, #1]
 8001798:	2b0b      	cmp	r3, #11
 800179a:	d014      	beq.n	80017c6 <HAL_MPU_ConfigRegion+0x92>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	785b      	ldrb	r3, [r3, #1]
 80017a0:	2b0c      	cmp	r3, #12
 80017a2:	d010      	beq.n	80017c6 <HAL_MPU_ConfigRegion+0x92>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	785b      	ldrb	r3, [r3, #1]
 80017a8:	2b0d      	cmp	r3, #13
 80017aa:	d00c      	beq.n	80017c6 <HAL_MPU_ConfigRegion+0x92>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	785b      	ldrb	r3, [r3, #1]
 80017b0:	2b0e      	cmp	r3, #14
 80017b2:	d008      	beq.n	80017c6 <HAL_MPU_ConfigRegion+0x92>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	785b      	ldrb	r3, [r3, #1]
 80017b8:	2b0f      	cmp	r3, #15
 80017ba:	d004      	beq.n	80017c6 <HAL_MPU_ConfigRegion+0x92>
 80017bc:	f240 112d 	movw	r1, #301	; 0x12d
 80017c0:	4896      	ldr	r0, [pc, #600]	; (8001a1c <HAL_MPU_ConfigRegion+0x2e8>)
 80017c2:	f7ff fa24 	bl	8000c0e <assert_failed>
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d008      	beq.n	80017e0 <HAL_MPU_ConfigRegion+0xac>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d004      	beq.n	80017e0 <HAL_MPU_ConfigRegion+0xac>
 80017d6:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80017da:	4890      	ldr	r0, [pc, #576]	; (8001a1c <HAL_MPU_ConfigRegion+0x2e8>)
 80017dc:	f7ff fa17 	bl	8000c0e <assert_failed>

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	785a      	ldrb	r2, [r3, #1]
 80017e4:	4b8e      	ldr	r3, [pc, #568]	; (8001a20 <HAL_MPU_ConfigRegion+0x2ec>)
 80017e6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 810a 	beq.w	8001a06 <HAL_MPU_ConfigRegion+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7b1b      	ldrb	r3, [r3, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d008      	beq.n	800180c <HAL_MPU_ConfigRegion+0xd8>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	7b1b      	ldrb	r3, [r3, #12]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d004      	beq.n	800180c <HAL_MPU_ConfigRegion+0xd8>
 8001802:	f44f 719b 	mov.w	r1, #310	; 0x136
 8001806:	4885      	ldr	r0, [pc, #532]	; (8001a1c <HAL_MPU_ConfigRegion+0x2e8>)
 8001808:	f7ff fa01 	bl	8000c0e <assert_failed>
    assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	7adb      	ldrb	r3, [r3, #11]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d018      	beq.n	8001846 <HAL_MPU_ConfigRegion+0x112>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	7adb      	ldrb	r3, [r3, #11]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d014      	beq.n	8001846 <HAL_MPU_ConfigRegion+0x112>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	7adb      	ldrb	r3, [r3, #11]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d010      	beq.n	8001846 <HAL_MPU_ConfigRegion+0x112>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7adb      	ldrb	r3, [r3, #11]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d00c      	beq.n	8001846 <HAL_MPU_ConfigRegion+0x112>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	7adb      	ldrb	r3, [r3, #11]
 8001830:	2b05      	cmp	r3, #5
 8001832:	d008      	beq.n	8001846 <HAL_MPU_ConfigRegion+0x112>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7adb      	ldrb	r3, [r3, #11]
 8001838:	2b06      	cmp	r3, #6
 800183a:	d004      	beq.n	8001846 <HAL_MPU_ConfigRegion+0x112>
 800183c:	f240 1137 	movw	r1, #311	; 0x137
 8001840:	4876      	ldr	r0, [pc, #472]	; (8001a1c <HAL_MPU_ConfigRegion+0x2e8>)
 8001842:	f7ff f9e4 	bl	8000c0e <assert_failed>
    assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	7a9b      	ldrb	r3, [r3, #10]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00c      	beq.n	8001868 <HAL_MPU_ConfigRegion+0x134>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	7a9b      	ldrb	r3, [r3, #10]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d008      	beq.n	8001868 <HAL_MPU_ConfigRegion+0x134>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	7a9b      	ldrb	r3, [r3, #10]
 800185a:	2b02      	cmp	r3, #2
 800185c:	d004      	beq.n	8001868 <HAL_MPU_ConfigRegion+0x134>
 800185e:	f44f 719c 	mov.w	r1, #312	; 0x138
 8001862:	486e      	ldr	r0, [pc, #440]	; (8001a1c <HAL_MPU_ConfigRegion+0x2e8>)
 8001864:	f7ff f9d3 	bl	8000c0e <assert_failed>
    assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	7b5b      	ldrb	r3, [r3, #13]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d008      	beq.n	8001882 <HAL_MPU_ConfigRegion+0x14e>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7b5b      	ldrb	r3, [r3, #13]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d004      	beq.n	8001882 <HAL_MPU_ConfigRegion+0x14e>
 8001878:	f240 1139 	movw	r1, #313	; 0x139
 800187c:	4867      	ldr	r0, [pc, #412]	; (8001a1c <HAL_MPU_ConfigRegion+0x2e8>)
 800187e:	f7ff f9c6 	bl	8000c0e <assert_failed>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	7b9b      	ldrb	r3, [r3, #14]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d008      	beq.n	800189c <HAL_MPU_ConfigRegion+0x168>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	7b9b      	ldrb	r3, [r3, #14]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d004      	beq.n	800189c <HAL_MPU_ConfigRegion+0x168>
 8001892:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8001896:	4861      	ldr	r0, [pc, #388]	; (8001a1c <HAL_MPU_ConfigRegion+0x2e8>)
 8001898:	f7ff f9b9 	bl	8000c0e <assert_failed>
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7bdb      	ldrb	r3, [r3, #15]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d008      	beq.n	80018b6 <HAL_MPU_ConfigRegion+0x182>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	7bdb      	ldrb	r3, [r3, #15]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d004      	beq.n	80018b6 <HAL_MPU_ConfigRegion+0x182>
 80018ac:	f240 113b 	movw	r1, #315	; 0x13b
 80018b0:	485a      	ldr	r0, [pc, #360]	; (8001a1c <HAL_MPU_ConfigRegion+0x2e8>)
 80018b2:	f7ff f9ac 	bl	8000c0e <assert_failed>
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	7a5b      	ldrb	r3, [r3, #9]
 80018ba:	2bff      	cmp	r3, #255	; 0xff
 80018bc:	d104      	bne.n	80018c8 <HAL_MPU_ConfigRegion+0x194>
 80018be:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80018c2:	4856      	ldr	r0, [pc, #344]	; (8001a1c <HAL_MPU_ConfigRegion+0x2e8>)
 80018c4:	f7ff f9a3 	bl	8000c0e <assert_failed>
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7a1b      	ldrb	r3, [r3, #8]
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d070      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	7a1b      	ldrb	r3, [r3, #8]
 80018d4:	2b05      	cmp	r3, #5
 80018d6:	d06c      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7a1b      	ldrb	r3, [r3, #8]
 80018dc:	2b06      	cmp	r3, #6
 80018de:	d068      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	7a1b      	ldrb	r3, [r3, #8]
 80018e4:	2b07      	cmp	r3, #7
 80018e6:	d064      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7a1b      	ldrb	r3, [r3, #8]
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d060      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7a1b      	ldrb	r3, [r3, #8]
 80018f4:	2b09      	cmp	r3, #9
 80018f6:	d05c      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	7a1b      	ldrb	r3, [r3, #8]
 80018fc:	2b0a      	cmp	r3, #10
 80018fe:	d058      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7a1b      	ldrb	r3, [r3, #8]
 8001904:	2b0b      	cmp	r3, #11
 8001906:	d054      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7a1b      	ldrb	r3, [r3, #8]
 800190c:	2b0c      	cmp	r3, #12
 800190e:	d050      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7a1b      	ldrb	r3, [r3, #8]
 8001914:	2b0d      	cmp	r3, #13
 8001916:	d04c      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7a1b      	ldrb	r3, [r3, #8]
 800191c:	2b0e      	cmp	r3, #14
 800191e:	d048      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	7a1b      	ldrb	r3, [r3, #8]
 8001924:	2b0f      	cmp	r3, #15
 8001926:	d044      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7a1b      	ldrb	r3, [r3, #8]
 800192c:	2b10      	cmp	r3, #16
 800192e:	d040      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	7a1b      	ldrb	r3, [r3, #8]
 8001934:	2b11      	cmp	r3, #17
 8001936:	d03c      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7a1b      	ldrb	r3, [r3, #8]
 800193c:	2b12      	cmp	r3, #18
 800193e:	d038      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7a1b      	ldrb	r3, [r3, #8]
 8001944:	2b13      	cmp	r3, #19
 8001946:	d034      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	7a1b      	ldrb	r3, [r3, #8]
 800194c:	2b14      	cmp	r3, #20
 800194e:	d030      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7a1b      	ldrb	r3, [r3, #8]
 8001954:	2b15      	cmp	r3, #21
 8001956:	d02c      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	7a1b      	ldrb	r3, [r3, #8]
 800195c:	2b16      	cmp	r3, #22
 800195e:	d028      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	7a1b      	ldrb	r3, [r3, #8]
 8001964:	2b17      	cmp	r3, #23
 8001966:	d024      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7a1b      	ldrb	r3, [r3, #8]
 800196c:	2b18      	cmp	r3, #24
 800196e:	d020      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	7a1b      	ldrb	r3, [r3, #8]
 8001974:	2b19      	cmp	r3, #25
 8001976:	d01c      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7a1b      	ldrb	r3, [r3, #8]
 800197c:	2b1a      	cmp	r3, #26
 800197e:	d018      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	7a1b      	ldrb	r3, [r3, #8]
 8001984:	2b1b      	cmp	r3, #27
 8001986:	d014      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	7a1b      	ldrb	r3, [r3, #8]
 800198c:	2b1c      	cmp	r3, #28
 800198e:	d010      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7a1b      	ldrb	r3, [r3, #8]
 8001994:	2b1d      	cmp	r3, #29
 8001996:	d00c      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	7a1b      	ldrb	r3, [r3, #8]
 800199c:	2b1e      	cmp	r3, #30
 800199e:	d008      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7a1b      	ldrb	r3, [r3, #8]
 80019a4:	2b1f      	cmp	r3, #31
 80019a6:	d004      	beq.n	80019b2 <HAL_MPU_ConfigRegion+0x27e>
 80019a8:	f240 113d 	movw	r1, #317	; 0x13d
 80019ac:	481b      	ldr	r0, [pc, #108]	; (8001a1c <HAL_MPU_ConfigRegion+0x2e8>)
 80019ae:	f7ff f92e 	bl	8000c0e <assert_failed>

    MPU->RBAR = MPU_Init->BaseAddress;
 80019b2:	4a1b      	ldr	r2, [pc, #108]	; (8001a20 <HAL_MPU_ConfigRegion+0x2ec>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7b1b      	ldrb	r3, [r3, #12]
 80019be:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	7adb      	ldrb	r3, [r3, #11]
 80019c4:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019c6:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7a9b      	ldrb	r3, [r3, #10]
 80019cc:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80019ce:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7b5b      	ldrb	r3, [r3, #13]
 80019d4:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80019d6:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7b9b      	ldrb	r3, [r3, #14]
 80019dc:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80019de:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	7bdb      	ldrb	r3, [r3, #15]
 80019e4:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80019e6:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7a5b      	ldrb	r3, [r3, #9]
 80019ec:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80019ee:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7a1b      	ldrb	r3, [r3, #8]
 80019f4:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80019f6:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	7812      	ldrb	r2, [r2, #0]
 80019fc:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_MPU_ConfigRegion+0x2ec>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a00:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a02:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001a04:	e005      	b.n	8001a12 <HAL_MPU_ConfigRegion+0x2de>
    MPU->RBAR = 0x00;
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_MPU_ConfigRegion+0x2ec>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <HAL_MPU_ConfigRegion+0x2ec>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	08018298 	.word	0x08018298
 8001a20:	e000ed90 	.word	0xe000ed90

08001a24 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e0c6      	b.n	8001bc4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f008 fd50 	bl	800a4e4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2223      	movs	r2, #35	; 0x23
 8001a48:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	4b60      	ldr	r3, [pc, #384]	; (8001bcc <HAL_ETH_Init+0x1a8>)
 8001a4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a50:	4a5e      	ldr	r2, [pc, #376]	; (8001bcc <HAL_ETH_Init+0x1a8>)
 8001a52:	f043 0302 	orr.w	r3, r3, #2
 8001a56:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a5a:	4b5c      	ldr	r3, [pc, #368]	; (8001bcc <HAL_ETH_Init+0x1a8>)
 8001a5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	7a1b      	ldrb	r3, [r3, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d103      	bne.n	8001a78 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff fcfb 	bl	800146c <HAL_SYSCFG_ETHInterfaceSelect>
 8001a76:	e003      	b.n	8001a80 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a78:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001a7c:	f7ff fcf6 	bl	800146c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 0201 	orr.w	r2, r2, #1
 8001a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a98:	f7ff fcd0 	bl	800143c <HAL_GetTick>
 8001a9c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a9e:	e00f      	b.n	8001ac0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001aa0:	f7ff fccc 	bl	800143c <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001aae:	d907      	bls.n	8001ac0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	22e0      	movs	r2, #224	; 0xe0
 8001aba:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e081      	b.n	8001bc4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1e6      	bne.n	8001aa0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f001 f934 	bl	8002d40 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001ad8:	f003 f9b6 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b3c      	ldr	r3, [pc, #240]	; (8001bd0 <HAL_ETH_Init+0x1ac>)
 8001ae0:	fba3 2302 	umull	r2, r3, r3, r2
 8001ae4:	0c9a      	lsrs	r2, r3, #18
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	3a01      	subs	r2, #1
 8001aec:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f001 f887 	bl	8002c04 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001b0c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001b10:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	f003 0303 	and.w	r3, r3, #3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d007      	beq.n	8001b2e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	22e0      	movs	r2, #224	; 0xe0
 8001b28:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e04a      	b.n	8001bc4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b36:	4413      	add	r3, r2
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <HAL_ETH_Init+0x1b0>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6952      	ldr	r2, [r2, #20]
 8001b42:	0052      	lsls	r2, r2, #1
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	6809      	ldr	r1, [r1, #0]
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b4e:	440b      	add	r3, r1
 8001b50:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f001 f94c 	bl	8002df0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f001 f990 	bl	8002e7e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	3305      	adds	r3, #5
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	021a      	lsls	r2, r3, #8
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	3303      	adds	r3, #3
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	061a      	lsls	r2, r3, #24
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	041b      	lsls	r3, r3, #16
 8001b90:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	3301      	adds	r3, #1
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b9c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001baa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001bac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2210      	movs	r2, #16
 8001bba:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2210      	movs	r2, #16
 8001bc0:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	58024400 	.word	0x58024400
 8001bd0:	431bde83 	.word	0x431bde83
 8001bd4:	ffff8001 	.word	0xffff8001

08001bd8 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	330a      	adds	r3, #10
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d002      	beq.n	8001c00 <HAL_ETH_DescAssignMemory+0x28>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d904      	bls.n	8001c0a <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2201      	movs	r2, #1
 8001c04:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e021      	b.n	8001c4e <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00b      	beq.n	8001c40 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	371c      	adds	r7, #28
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b087      	sub	sp, #28
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  uint32_t descindex = 0, counter;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	330a      	adds	r3, #10
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	60fb      	str	r3, [r7, #12]

  if(heth->gState == HAL_ETH_STATE_READY)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c78:	2b10      	cmp	r3, #16
 8001c7a:	d17d      	bne.n	8001d78 <HAL_ETH_Start_IT+0x11e>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2223      	movs	r2, #35	; 0x23
 8001c80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	e018      	b.n	8001cba <HAL_ETH_Start_IT+0x60>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	60da      	str	r2, [r3, #12]
      INCR_RX_DESC_INDEX(descindex, 1U);
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	3301      	adds	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d902      	bls.n	8001ca6 <HAL_ETH_Start_IT+0x4c>
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	3b04      	subs	r3, #4
 8001ca4:	617b      	str	r3, [r7, #20]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	330a      	adds	r3, #10
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	60fb      	str	r3, [r7, #12]
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d9e3      	bls.n	8001c88 <HAL_ETH_Start_IT+0x2e>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0202 	orr.w	r2, r2, #2
 8001cd4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0201 	orr.w	r2, r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d02:	4413      	add	r3, r2
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6811      	ldr	r1, [r2, #0]
 8001d0a:	f043 0201 	orr.w	r2, r3, #1
 8001d0e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d12:	440b      	add	r3, r1
 8001d14:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001d1e:	4413      	add	r3, r2
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6811      	ldr	r1, [r2, #0]
 8001d26:	f043 0201 	orr.w	r2, r3, #1
 8001d2a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001d2e:	440b      	add	r3, r1
 8001d30:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001d44:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001d48:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2210      	movs	r2, #16
 8001d4e:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2222      	movs	r2, #34	; 0x22
 8001d54:	659a      	str	r2, [r3, #88]	; 0x58
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	f241 1334 	movw	r3, #4404	; 0x1134
 8001d5e:	4413      	add	r3, r2
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6811      	ldr	r1, [r2, #0]
 8001d66:	f24d 0241 	movw	r2, #53313	; 0xd041
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	f241 1334 	movw	r3, #4404	; 0x1134
 8001d70:	440b      	add	r3, r1
 8001d72:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    return HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	e000      	b.n	8001d7a <HAL_ETH_Start_IT+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
  }
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	371c      	adds	r7, #28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d107      	bne.n	8001da8 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	f043 0201 	orr.w	r2, r3, #1
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e076      	b.n	8001e96 <HAL_ETH_Transmit+0x110>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dac:	2b10      	cmp	r3, #16
 8001dae:	d171      	bne.n	8001e94 <HAL_ETH_Transmit+0x10e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001db0:	2200      	movs	r2, #0
 8001db2:	68b9      	ldr	r1, [r7, #8]
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f001 f8bf 	bl	8002f38 <ETH_Prepare_Tx_Descriptors>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d007      	beq.n	8001dd0 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc4:	f043 0202 	orr.w	r2, r3, #2
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e062      	b.n	8001e96 <HAL_ETH_Transmit+0x110>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3206      	adds	r2, #6
 8001dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ddc:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	629a      	str	r2, [r3, #40]	; 0x28
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	d904      	bls.n	8001dfa <HAL_ETH_Transmit+0x74>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df4:	1f1a      	subs	r2, r3, #4
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	3106      	adds	r1, #6
 8001e06:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001e0a:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001e0e:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8001e10:	f7ff fb14 	bl	800143c <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001e16:	e034      	b.n	8001e82 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d011      	beq.n	8001e4e <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e2e:	f043 0208 	orr.w	r2, r3, #8
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	22e0      	movs	r2, #224	; 0xe0
 8001e48:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e023      	b.n	8001e96 <HAL_ETH_Transmit+0x110>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e54:	d015      	beq.n	8001e82 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8001e56:	f7ff faf1 	bl	800143c <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d302      	bcc.n	8001e6c <HAL_ETH_Transmit+0xe6>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d10a      	bne.n	8001e82 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	f043 0204 	orr.w	r2, r3, #4
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2210      	movs	r2, #16
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e009      	b.n	8001e96 <HAL_ETH_Transmit+0x110>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	dbc6      	blt.n	8001e18 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Set ETH HAL State to Ready */
    heth->gState = HAL_ETH_STATE_READY;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2210      	movs	r2, #16
 8001e8e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	e000      	b.n	8001e96 <HAL_ETH_Transmit+0x110>
  }
  else
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
  }
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b089      	sub	sp, #36	; 0x24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	332c      	adds	r3, #44	; 0x2c
 8001eaa:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eba:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d06b      	beq.n	8001fa8 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e0bc      	b.n	800204e <HAL_ETH_IsRxDataAvailable+0x1b0>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d036      	beq.n	8001f54 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	61fb      	str	r3, [r7, #28]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d902      	bls.n	8001f08 <HAL_ETH_IsRxDataAvailable+0x6a>
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3b04      	subs	r3, #4
 8001f06:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f10:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	db11      	blt.n	8001f3e <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00b      	beq.n	8001f3e <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d902      	bls.n	8001f3e <HAL_ETH_IsRxDataAvailable+0xa0>
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	3b04      	subs	r3, #4
 8001f3c:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e07c      	b.n	800204e <HAL_ETH_IsRxDataAvailable+0x1b0>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d012      	beq.n	8001f86 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8001f64:	2301      	movs	r3, #1
 8001f66:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d902      	bls.n	8001f7a <HAL_ETH_IsRxDataAvailable+0xdc>
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	3b04      	subs	r3, #4
 8001f78:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	69fa      	ldr	r2, [r7, #28]
 8001f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f82:	61bb      	str	r3, [r7, #24]
 8001f84:	e010      	b.n	8001fa8 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d902      	bls.n	8001f9e <HAL_ETH_IsRxDataAvailable+0x100>
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	3b04      	subs	r3, #4
 8001f9c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa6:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	db02      	blt.n	8001fb6 <HAL_ETH_IsRxDataAvailable+0x118>
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d98e      	bls.n	8001ed4 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d044      	beq.n	8002046 <HAL_ETH_IsRxDataAvailable+0x1a8>
  {
    descidx = firstappdescidx;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc8:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	e036      	b.n	800203e <HAL_ETH_IsRxDataAvailable+0x1a0>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fde:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d009      	beq.n	8001ffc <HAL_ETH_IsRxDataAvailable+0x15e>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	695a      	ldr	r2, [r3, #20]
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d005      	beq.n	800201c <HAL_ETH_IsRxDataAvailable+0x17e>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	60da      	str	r2, [r3, #12]
      }

      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	3301      	adds	r3, #1
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d902      	bls.n	800202e <HAL_ETH_IsRxDataAvailable+0x190>
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	3b04      	subs	r3, #4
 800202c:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002036:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	3301      	adds	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	429a      	cmp	r2, r3
 8002044:	d3c4      	bcc.n	8001fd0 <HAL_ETH_IsRxDataAvailable+0x132>
    }
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]

  return 0;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3724      	adds	r7, #36	; 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b08a      	sub	sp, #40	; 0x28
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	332c      	adds	r3, #44	; 0x2c
 8002068:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800207c:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d104      	bne.n	8002092 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e07d      	b.n	800218e <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10f      	bne.n	80020ba <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff feff 	bl	8001e9e <HAL_ETH_IsRxDataAvailable>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e071      	b.n	800218e <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
 80020be:	e031      	b.n	8002124 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	461a      	mov	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	461a      	mov	r2, r3
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695a      	ldr	r2, [r3, #20]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80020fa:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	3301      	adds	r3, #1
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	2b03      	cmp	r3, #3
 8002106:	d902      	bls.n	800210e <HAL_ETH_GetRxDataBuffer+0xb4>
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	3b04      	subs	r3, #4
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002116:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	3301      	adds	r3, #1
 8002122:	623b      	str	r3, [r7, #32]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	3b01      	subs	r3, #1
 800212a:	6a3a      	ldr	r2, [r7, #32]
 800212c:	429a      	cmp	r2, r3
 800212e:	d3c7      	bcc.n	80020c0 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	461a      	mov	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	429a      	cmp	r2, r3
 8002150:	d803      	bhi.n	800215a <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	e018      	b.n	800218c <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d012      	beq.n	8002188 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	461a      	mov	r2, r3
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	1ad2      	subs	r2, r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	e001      	b.n	800218c <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3728      	adds	r7, #40	; 0x28
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	332c      	adds	r3, #44	; 0x2c
 80021a4:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d107      	bne.n	80021c4 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff fe72 	bl	8001e9e <HAL_ETH_IsRxDataAvailable>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e017      	b.n	80021f4 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	699a      	ldr	r2, [r3, #24]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	4413      	add	r3, r2
 80021cc:	3b01      	subs	r3, #1
 80021ce:	617b      	str	r3, [r7, #20]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d902      	bls.n	80021dc <HAL_ETH_GetRxDataLength+0x46>
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	3b04      	subs	r3, #4
 80021da:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e4:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	332c      	adds	r3, #44	; 0x2c
 8002208:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002218:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e055      	b.n	80022d8 <HAL_ETH_BuildRxDescriptors+0xdc>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d002      	beq.n	800223a <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	3301      	adds	r3, #1
 8002238:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	e03c      	b.n	80022ba <HAL_ETH_BuildRxDescriptors+0xbe>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800224e:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d009      	beq.n	800226c <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (dmarxdesclist->AppDescNbr - 1U))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	3b01      	subs	r3, #1
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	429a      	cmp	r2, r3
 8002296:	d20d      	bcs.n	80022b4 <HAL_ETH_BuildRxDescriptors+0xb8>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	3301      	adds	r3, #1
 800229c:	61fb      	str	r3, [r7, #28]
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d902      	bls.n	80022aa <HAL_ETH_BuildRxDescriptors+0xae>
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	3b04      	subs	r3, #4
 80022a8:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b2:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	3301      	adds	r3, #1
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d3be      	bcc.n	8002240 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6819      	ldr	r1, [r3, #0]
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	f241 1328 	movw	r3, #4392	; 0x1128
 80022cc:	440b      	add	r3, r1
 80022ce:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3724      	adds	r7, #36	; 0x24
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e03e      	b.n	8002384 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800230e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	055b      	lsls	r3, r3, #21
 800231a:	4313      	orrs	r3, r2
 800231c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	041b      	lsls	r3, r3, #16
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f043 030c 	orr.w	r3, r3, #12
 8002332:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002346:	f7ff f879 	bl	800143c <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800234c:	e009      	b.n	8002362 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800234e:	f7ff f875 	bl	800143c <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800235c:	d901      	bls.n	8002362 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e010      	b.n	8002384 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1ed      	bne.n	800234e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800237a:	b29b      	uxth	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e03c      	b.n	8002428 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023b6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	055b      	lsls	r3, r3, #21
 80023c2:	4313      	orrs	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	041b      	lsls	r3, r3, #16
 80023d0:	4313      	orrs	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f023 030c 	bic.w	r3, r3, #12
 80023da:	f043 0304 	orr.w	r3, r3, #4
 80023de:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	4b10      	ldr	r3, [pc, #64]	; (8002430 <HAL_ETH_WritePHYRegister+0xa4>)
 80023ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80023f2:	4a0f      	ldr	r2, [pc, #60]	; (8002430 <HAL_ETH_WritePHYRegister+0xa4>)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80023fa:	f7ff f81f 	bl	800143c <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002400:	e009      	b.n	8002416 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002402:	f7ff f81b 	bl	800143c <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002410:	d901      	bls.n	8002416 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e008      	b.n	8002428 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1ed      	bne.n	8002402 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40028000 	.word	0x40028000

08002434 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e1c3      	b.n	80027d0 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 020c 	and.w	r2, r3, #12
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	bf0c      	ite	eq
 800248e:	2301      	moveq	r3, #1
 8002490:	2300      	movne	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	bf14      	ite	ne
 80024aa:	2301      	movne	r3, #1
 80024ac:	2300      	moveq	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	461a      	mov	r2, r3
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf0c      	ite	eq
 80024c4:	2301      	moveq	r3, #1
 80024c6:	2300      	movne	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024da:	2b00      	cmp	r3, #0
 80024dc:	bf14      	ite	ne
 80024de:	2301      	movne	r3, #1
 80024e0:	2300      	moveq	r3, #0
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	461a      	mov	r2, r3
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	bf14      	ite	ne
 80024f8:	2301      	movne	r3, #1
 80024fa:	2300      	moveq	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252a:	2b00      	cmp	r3, #0
 800252c:	bf14      	ite	ne
 800252e:	2301      	movne	r3, #1
 8002530:	2300      	moveq	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002544:	2b00      	cmp	r3, #0
 8002546:	bf0c      	ite	eq
 8002548:	2301      	moveq	r3, #1
 800254a:	2300      	movne	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800255e:	2b00      	cmp	r3, #0
 8002560:	bf0c      	ite	eq
 8002562:	2301      	moveq	r3, #1
 8002564:	2300      	movne	r3, #0
 8002566:	b2db      	uxtb	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002578:	2b00      	cmp	r3, #0
 800257a:	bf14      	ite	ne
 800257c:	2301      	movne	r3, #1
 800257e:	2300      	moveq	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	461a      	mov	r2, r3
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf14      	ite	ne
 8002596:	2301      	movne	r3, #1
 8002598:	2300      	moveq	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf14      	ite	ne
 80025b0:	2301      	movne	r3, #1
 80025b2:	2300      	moveq	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	bf14      	ite	ne
 80025ca:	2301      	movne	r3, #1
 80025cc:	2300      	moveq	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	bf14      	ite	ne
 80025f2:	2301      	movne	r3, #1
 80025f4:	2300      	moveq	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf0c      	ite	eq
 8002628:	2301      	moveq	r3, #1
 800262a:	2300      	movne	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf14      	ite	ne
 8002644:	2301      	movne	r3, #1
 8002646:	2300      	moveq	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf14      	ite	ne
 8002660:	2301      	movne	r3, #1
 8002662:	2300      	moveq	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	bf14      	ite	ne
 800267c:	2301      	movne	r3, #1
 800267e:	2300      	moveq	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	461a      	mov	r2, r3
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	0e5b      	lsrs	r3, r3, #25
 8002692:	f003 021f 	and.w	r2, r3, #31
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	bf14      	ite	ne
 80026a8:	2301      	movne	r3, #1
 80026aa:	2300      	moveq	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	461a      	mov	r2, r3
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 020f 	and.w	r2, r3, #15
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	bf14      	ite	ne
 80026d2:	2301      	movne	r3, #1
 80026d4:	2300      	moveq	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	461a      	mov	r2, r3
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	bf0c      	ite	eq
 80026ee:	2301      	moveq	r3, #1
 80026f0:	2300      	movne	r3, #0
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	461a      	mov	r2, r3
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002702:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	0c1b      	lsrs	r3, r3, #16
 8002712:	b29a      	uxth	r2, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	bf14      	ite	ne
 8002728:	2301      	movne	r3, #1
 800272a:	2300      	moveq	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	bf14      	ite	ne
 8002746:	2301      	movne	r3, #1
 8002748:	2300      	moveq	r3, #0
 800274a:	b2db      	uxtb	r3, r3
 800274c:	461a      	mov	r2, r3
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800275c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800276c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf14      	ite	ne
 8002784:	2301      	movne	r3, #1
 8002786:	2300      	moveq	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	2b00      	cmp	r3, #0
 80027a0:	bf14      	ite	ne
 80027a2:	2301      	movne	r3, #1
 80027a4:	2300      	moveq	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80027b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e00a      	b.n	8002806 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f4:	2b10      	cmp	r3, #16
 80027f6:	d105      	bne.n	8002804 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 80027f8:	6839      	ldr	r1, [r7, #0]
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f860 	bl	80028c0 <ETH_SetMACConfig>

    return HAL_OK;
 8002800:	2300      	movs	r3, #0
 8002802:	e000      	b.n	8002806 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
  }
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002820:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002828:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800282a:	f002 fb0d 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 800282e:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4a1e      	ldr	r2, [pc, #120]	; (80028ac <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d908      	bls.n	800284a <HAL_ETH_SetMDIOClockRange+0x3a>
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4a1d      	ldr	r2, [pc, #116]	; (80028b0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d804      	bhi.n	800284a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	e027      	b.n	800289a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	4a18      	ldr	r2, [pc, #96]	; (80028b0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d908      	bls.n	8002864 <HAL_ETH_SetMDIOClockRange+0x54>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	4a17      	ldr	r2, [pc, #92]	; (80028b4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d804      	bhi.n	8002864 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	e01a      	b.n	800289a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4a13      	ldr	r2, [pc, #76]	; (80028b4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d903      	bls.n	8002874 <HAL_ETH_SetMDIOClockRange+0x64>
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d911      	bls.n	8002898 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d908      	bls.n	800288e <HAL_ETH_SetMDIOClockRange+0x7e>
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4a0f      	ldr	r2, [pc, #60]	; (80028bc <HAL_ETH_SetMDIOClockRange+0xac>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d804      	bhi.n	800288e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	e005      	b.n	800289a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	e000      	b.n	800289a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002898:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	01312cff 	.word	0x01312cff
 80028b0:	02160ebf 	.word	0x02160ebf
 80028b4:	039386ff 	.word	0x039386ff
 80028b8:	05f5e0ff 	.word	0x05f5e0ff
 80028bc:	08f0d17f 	.word	0x08f0d17f

080028c0 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80028d2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	791b      	ldrb	r3, [r3, #4]
 80028d8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80028da:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	7b1b      	ldrb	r3, [r3, #12]
 80028e0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80028e2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	7b5b      	ldrb	r3, [r3, #13]
 80028e8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80028ea:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	7b9b      	ldrb	r3, [r3, #14]
 80028f0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80028f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	7bdb      	ldrb	r3, [r3, #15]
 80028f8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80028fa:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	7c12      	ldrb	r2, [r2, #16]
 8002900:	2a00      	cmp	r2, #0
 8002902:	d102      	bne.n	800290a <ETH_SetMACConfig+0x4a>
 8002904:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002908:	e000      	b.n	800290c <ETH_SetMACConfig+0x4c>
 800290a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800290c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	7c52      	ldrb	r2, [r2, #17]
 8002912:	2a00      	cmp	r2, #0
 8002914:	d102      	bne.n	800291c <ETH_SetMACConfig+0x5c>
 8002916:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800291a:	e000      	b.n	800291e <ETH_SetMACConfig+0x5e>
 800291c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800291e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	7c9b      	ldrb	r3, [r3, #18]
 8002924:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002926:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800292c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002932:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	7f1b      	ldrb	r3, [r3, #28]
 8002938:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800293a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	7f5b      	ldrb	r3, [r3, #29]
 8002940:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002942:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	7f92      	ldrb	r2, [r2, #30]
 8002948:	2a00      	cmp	r2, #0
 800294a:	d102      	bne.n	8002952 <ETH_SetMACConfig+0x92>
 800294c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002950:	e000      	b.n	8002954 <ETH_SetMACConfig+0x94>
 8002952:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002954:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	7fdb      	ldrb	r3, [r3, #31]
 800295a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800295c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002964:	2a00      	cmp	r2, #0
 8002966:	d102      	bne.n	800296e <ETH_SetMACConfig+0xae>
 8002968:	f44f 7280 	mov.w	r2, #256	; 0x100
 800296c:	e000      	b.n	8002970 <ETH_SetMACConfig+0xb0>
 800296e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002970:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002976:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800297e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002980:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002986:	4313      	orrs	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b56      	ldr	r3, [pc, #344]	; (8002aec <ETH_SetMACConfig+0x22c>)
 8002992:	4013      	ands	r3, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	68f9      	ldr	r1, [r7, #12]
 800299a:	430b      	orrs	r3, r1
 800299c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029aa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80029ac:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029b4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80029b6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80029be:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80029c0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80029c8:	2a00      	cmp	r2, #0
 80029ca:	d102      	bne.n	80029d2 <ETH_SetMACConfig+0x112>
 80029cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029d0:	e000      	b.n	80029d4 <ETH_SetMACConfig+0x114>
 80029d2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80029d4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	4b42      	ldr	r3, [pc, #264]	; (8002af0 <ETH_SetMACConfig+0x230>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	68f9      	ldr	r1, [r7, #12]
 80029ee:	430b      	orrs	r3, r1
 80029f0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029f8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	4b3a      	ldr	r3, [pc, #232]	; (8002af4 <ETH_SetMACConfig+0x234>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6812      	ldr	r2, [r2, #0]
 8002a10:	68f9      	ldr	r1, [r7, #12]
 8002a12:	430b      	orrs	r3, r1
 8002a14:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002a1c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002a22:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002a2a:	2a00      	cmp	r2, #0
 8002a2c:	d101      	bne.n	8002a32 <ETH_SetMACConfig+0x172>
 8002a2e:	2280      	movs	r2, #128	; 0x80
 8002a30:	e000      	b.n	8002a34 <ETH_SetMACConfig+0x174>
 8002a32:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002a34:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a3a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a46:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6812      	ldr	r2, [r2, #0]
 8002a50:	68f9      	ldr	r1, [r7, #12]
 8002a52:	430b      	orrs	r3, r1
 8002a54:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002a5c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002a64:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a72:	f023 0103 	bic.w	r1, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002a8a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002aa6:	2a00      	cmp	r2, #0
 8002aa8:	d101      	bne.n	8002aae <ETH_SetMACConfig+0x1ee>
 8002aaa:	2240      	movs	r2, #64	; 0x40
 8002aac:	e000      	b.n	8002ab0 <ETH_SetMACConfig+0x1f0>
 8002aae:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002ab0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002ab8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002aba:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002ac2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002ad0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	00048083 	.word	0x00048083
 8002af0:	c0f88000 	.word	0xc0f88000
 8002af4:	fffffef0 	.word	0xfffffef0

08002af8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	4b38      	ldr	r3, [pc, #224]	; (8002bf0 <ETH_SetDMAConfig+0xf8>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	6809      	ldr	r1, [r1, #0]
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002b1e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	791b      	ldrb	r3, [r3, #4]
 8002b24:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002b2a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	7b1b      	ldrb	r3, [r3, #12]
 8002b30:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	f241 0304 	movw	r3, #4100	; 0x1004
 8002b3e:	4413      	add	r3, r2
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4b2c      	ldr	r3, [pc, #176]	; (8002bf4 <ETH_SetDMAConfig+0xfc>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6811      	ldr	r1, [r2, #0]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	f241 0304 	movw	r3, #4100	; 0x1004
 8002b52:	440b      	add	r3, r1
 8002b54:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	7b5b      	ldrb	r3, [r3, #13]
 8002b5a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <ETH_SetDMAConfig+0x100>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6811      	ldr	r1, [r2, #0]
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002b7e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	7d1b      	ldrb	r3, [r3, #20]
 8002b88:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002b8a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	7f5b      	ldrb	r3, [r3, #29]
 8002b90:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	f241 1304 	movw	r3, #4356	; 0x1104
 8002b9e:	4413      	add	r3, r2
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <ETH_SetDMAConfig+0x104>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6811      	ldr	r1, [r2, #0]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	431a      	orrs	r2, r3
 8002bae:	f241 1304 	movw	r3, #4356	; 0x1104
 8002bb2:	440b      	add	r3, r1
 8002bb4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	7f1b      	ldrb	r3, [r3, #28]
 8002bba:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	f241 1308 	movw	r3, #4360	; 0x1108
 8002bcc:	4413      	add	r3, r2
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <ETH_SetDMAConfig+0x108>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6811      	ldr	r1, [r2, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	f241 1308 	movw	r3, #4360	; 0x1108
 8002be0:	440b      	add	r3, r1
 8002be2:	601a      	str	r2, [r3, #0]
}
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	ffff87fd 	.word	0xffff87fd
 8002bf4:	ffff2ffe 	.word	0xffff2ffe
 8002bf8:	fffec000 	.word	0xfffec000
 8002bfc:	ffc0efef 	.word	0xffc0efef
 8002c00:	7fc0ffff 	.word	0x7fc0ffff

08002c04 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b0a4      	sub	sp, #144	; 0x90
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002c12:	2300      	movs	r3, #0
 8002c14:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002c22:	2301      	movs	r3, #1
 8002c24:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c44:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002c5c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002c60:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002c72:	2300      	movs	r3, #0
 8002c74:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002c86:	2300      	movs	r3, #0
 8002c88:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002c9c:	2320      	movs	r3, #32
 8002c9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002cae:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002cb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cb8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cec:	4619      	mov	r1, r3
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff fde6 	bl	80028c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d0e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d12:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002d14:	2300      	movs	r3, #0
 8002d16:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d1c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002d24:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002d28:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002d2a:	f107 0308 	add.w	r3, r7, #8
 8002d2e:	4619      	mov	r1, r3
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff fee1 	bl	8002af8 <ETH_SetDMAConfig>
}
 8002d36:	bf00      	nop
 8002d38:	3790      	adds	r7, #144	; 0x90
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002d5a:	f002 f875 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 8002d5e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4a1e      	ldr	r2, [pc, #120]	; (8002ddc <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d908      	bls.n	8002d7a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4a1d      	ldr	r2, [pc, #116]	; (8002de0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d804      	bhi.n	8002d7a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	e027      	b.n	8002dca <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4a18      	ldr	r2, [pc, #96]	; (8002de0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d908      	bls.n	8002d94 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4a17      	ldr	r2, [pc, #92]	; (8002de4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d804      	bhi.n	8002d94 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	e01a      	b.n	8002dca <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4a13      	ldr	r2, [pc, #76]	; (8002de4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d903      	bls.n	8002da4 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4a12      	ldr	r2, [pc, #72]	; (8002de8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d911      	bls.n	8002dc8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4a10      	ldr	r2, [pc, #64]	; (8002de8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d908      	bls.n	8002dbe <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4a0f      	ldr	r2, [pc, #60]	; (8002dec <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d804      	bhi.n	8002dbe <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	e005      	b.n	8002dca <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	e000      	b.n	8002dca <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002dc8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002dd4:	bf00      	nop
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	01312cff 	.word	0x01312cff
 8002de0:	02160ebf 	.word	0x02160ebf
 8002de4:	039386ff 	.word	0x039386ff
 8002de8:	05f5e0ff 	.word	0x05f5e0ff
 8002dec:	08f0d17f 	.word	0x08f0d17f

08002df0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	e01d      	b.n	8002e3a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68d9      	ldr	r1, [r3, #12]
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4613      	mov	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	440b      	add	r3, r1
 8002e0e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2200      	movs	r2, #0
 8002e26:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e28:	68b9      	ldr	r1, [r7, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	3206      	adds	r2, #6
 8002e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3301      	adds	r3, #1
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d9de      	bls.n	8002dfe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	f241 132c 	movw	r3, #4396	; 0x112c
 8002e4e:	4413      	add	r3, r2
 8002e50:	2203      	movs	r2, #3
 8002e52:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68d9      	ldr	r1, [r3, #12]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	f241 1314 	movw	r3, #4372	; 0x1114
 8002e60:	4413      	add	r3, r2
 8002e62:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002e70:	601a      	str	r2, [r3, #0]
}
 8002e72:	bf00      	nop
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b085      	sub	sp, #20
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	e024      	b.n	8002ed6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6919      	ldr	r1, [r3, #16]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4613      	mov	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4413      	add	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	440b      	add	r3, r1
 8002e9c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2200      	movs	r2, #0
 8002eae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	330a      	adds	r3, #10
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d9d7      	bls.n	8002e8c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	f241 1330 	movw	r3, #4400	; 0x1130
 8002f02:	4413      	add	r3, r2
 8002f04:	2203      	movs	r2, #3
 8002f06:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6919      	ldr	r1, [r3, #16]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	f241 131c 	movw	r3, #4380	; 0x111c
 8002f14:	4413      	add	r3, r2
 8002f16:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	f241 1328 	movw	r3, #4392	; 0x1128
 8002f28:	4413      	add	r3, r2
 8002f2a:	6019      	str	r1, [r3, #0]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b08d      	sub	sp, #52	; 0x34
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3318      	adds	r3, #24
 8002f48:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 8002f56:	2300      	movs	r3, #0
 8002f58:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f62:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f76:	d101      	bne.n	8002f7c <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e223      	b.n	80033c4 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d044      	beq.n	8003012 <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	4b72      	ldr	r3, [pc, #456]	; (8003158 <ETH_Prepare_Tx_Descriptors+0x220>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f94:	431a      	orrs	r2, r3
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002fb4:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d027      	beq.n	8003012 <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	041b      	lsls	r3, r3, #16
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	431a      	orrs	r2, r3
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003000:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003010:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00e      	beq.n	800303c <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	4b4e      	ldr	r3, [pc, #312]	; (800315c <ETH_Prepare_Tx_Descriptors+0x224>)
 8003024:	4013      	ands	r3, r2
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	6992      	ldr	r2, [r2, #24]
 800302a:	431a      	orrs	r2, r3
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d105      	bne.n	8003054 <ETH_Prepare_Tx_Descriptors+0x11c>
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	2b00      	cmp	r3, #0
 8003052:	d030      	beq.n	80030b6 <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306e:	3301      	adds	r3, #1
 8003070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003074:	2b03      	cmp	r3, #3
 8003076:	d902      	bls.n	800307e <ETH_Prepare_Tx_Descriptors+0x146>
 8003078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307a:	3b04      	subs	r3, #4
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003086:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308a:	3301      	adds	r3, #1
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003096:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800309a:	d10c      	bne.n	80030b6 <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a4:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80030b2:	2302      	movs	r3, #2
 80030b4:	e186      	b.n	80033c4 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80030b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b8:	3301      	adds	r3, #1
 80030ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	4b24      	ldr	r3, [pc, #144]	; (800315c <ETH_Prepare_Tx_Descriptors+0x224>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	69fa      	ldr	r2, [r7, #28]
 80030d0:	6852      	ldr	r2, [r2, #4]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d012      	beq.n	8003106 <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	4b1a      	ldr	r3, [pc, #104]	; (8003160 <ETH_Prepare_Tx_Descriptors+0x228>)
 80030f6:	4013      	ands	r3, r2
 80030f8:	69fa      	ldr	r2, [r7, #28]
 80030fa:	6852      	ldr	r2, [r2, #4]
 80030fc:	0412      	lsls	r2, r2, #16
 80030fe:	431a      	orrs	r2, r3
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	609a      	str	r2, [r3, #8]
 8003104:	e008      	b.n	8003118 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	2200      	movs	r2, #0
 800310a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	4b13      	ldr	r3, [pc, #76]	; (8003160 <ETH_Prepare_Tx_Descriptors+0x228>)
 8003112:	4013      	ands	r3, r2
 8003114:	6a3a      	ldr	r2, [r7, #32]
 8003116:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b00      	cmp	r3, #0
 8003122:	d021      	beq.n	8003168 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	04db      	lsls	r3, r3, #19
 8003132:	431a      	orrs	r2, r3
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	4b09      	ldr	r3, [pc, #36]	; (8003164 <ETH_Prepare_Tx_Descriptors+0x22c>)
 800313e:	4013      	ands	r3, r2
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	69d2      	ldr	r2, [r2, #28]
 8003144:	431a      	orrs	r2, r3
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	60da      	str	r2, [r3, #12]
 8003156:	e02e      	b.n	80031b6 <ETH_Prepare_Tx_Descriptors+0x27e>
 8003158:	ffff0000 	.word	0xffff0000
 800315c:	ffffc000 	.word	0xffffc000
 8003160:	c000ffff 	.word	0xc000ffff
 8003164:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	4b98      	ldr	r3, [pc, #608]	; (80033d0 <ETH_Prepare_Tx_Descriptors+0x498>)
 800316e:	4013      	ands	r3, r2
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	6852      	ldr	r2, [r2, #4]
 8003174:	431a      	orrs	r2, r3
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d008      	beq.n	8003198 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	431a      	orrs	r2, r3
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0320 	and.w	r3, r3, #32
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d008      	beq.n	80031b6 <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0304 	and.w	r3, r3, #4
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d008      	beq.n	80031d4 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ce:	431a      	orrs	r2, r3
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 80c0 	beq.w	8003386 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	431a      	orrs	r2, r3
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003218:	e0b5      	b.n	8003386 <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003228:	3301      	adds	r3, #1
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800322c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322e:	2b03      	cmp	r3, #3
 8003230:	d902      	bls.n	8003238 <ETH_Prepare_Tx_Descriptors+0x300>
 8003232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003234:	3b04      	subs	r3, #4
 8003236:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800323c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003240:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800325a:	d126      	bne.n	80032aa <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003268:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 800326a:	2300      	movs	r3, #0
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
 800326e:	e016      	b.n	800329e <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327e:	3301      	adds	r3, #1
 8003280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003284:	2b03      	cmp	r3, #3
 8003286:	d902      	bls.n	800328e <ETH_Prepare_Tx_Descriptors+0x356>
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328a:	3b04      	subs	r3, #4
 800328c:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003296:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	3301      	adds	r3, #1
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
 800329e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d3e4      	bcc.n	8003270 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 80032a6:	2302      	movs	r3, #2
 80032a8:	e08c      	b.n	80033c4 <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 80032aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ac:	3301      	adds	r3, #1
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	461a      	mov	r2, r3
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	4b43      	ldr	r3, [pc, #268]	; (80033d4 <ETH_Prepare_Tx_Descriptors+0x49c>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	6852      	ldr	r2, [r2, #4]
 80032cc:	431a      	orrs	r2, r3
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d012      	beq.n	8003300 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	461a      	mov	r2, r3
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	4b3a      	ldr	r3, [pc, #232]	; (80033d8 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	6852      	ldr	r2, [r2, #4]
 80032f6:	0412      	lsls	r2, r2, #16
 80032f8:	431a      	orrs	r2, r3
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	609a      	str	r2, [r3, #8]
 80032fe:	e008      	b.n	8003312 <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	2200      	movs	r2, #0
 8003304:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	4b33      	ldr	r3, [pc, #204]	; (80033d8 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 800330c:	4013      	ands	r3, r2
 800330e:	6a3a      	ldr	r2, [r7, #32]
 8003310:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00f      	beq.n	800333e <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	4b2e      	ldr	r3, [pc, #184]	; (80033dc <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8003324:	4013      	ands	r3, r2
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	69d2      	ldr	r2, [r2, #28]
 800332a:	431a      	orrs	r2, r3
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	60da      	str	r2, [r3, #12]
 800333c:	e017      	b.n	800336e <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	4b23      	ldr	r3, [pc, #140]	; (80033d0 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003344:	4013      	ands	r3, r2
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	6852      	ldr	r2, [r2, #4]
 800334a:	431a      	orrs	r2, r3
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d008      	beq.n	800336e <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	431a      	orrs	r2, r3
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	f47f af45 	bne.w	800321a <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d006      	beq.n	80033a4 <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003396:	6a3b      	ldr	r3, [r7, #32]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	609a      	str	r2, [r3, #8]
 80033a2:	e005      	b.n	80033b0 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033c0:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3734      	adds	r7, #52	; 0x34
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	ffff8000 	.word	0xffff8000
 80033d4:	ffffc000 	.word	0xffffc000
 80033d8:	c000ffff 	.word	0xc000ffff
 80033dc:	fffc0000 	.word	0xfffc0000

080033e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80033ee:	4b47      	ldr	r3, [pc, #284]	; (800350c <HAL_GPIO_Init+0x12c>)
 80033f0:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a46      	ldr	r2, [pc, #280]	; (8003510 <HAL_GPIO_Init+0x130>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d02b      	beq.n	8003452 <HAL_GPIO_Init+0x72>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a45      	ldr	r2, [pc, #276]	; (8003514 <HAL_GPIO_Init+0x134>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d027      	beq.n	8003452 <HAL_GPIO_Init+0x72>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a44      	ldr	r2, [pc, #272]	; (8003518 <HAL_GPIO_Init+0x138>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d023      	beq.n	8003452 <HAL_GPIO_Init+0x72>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a43      	ldr	r2, [pc, #268]	; (800351c <HAL_GPIO_Init+0x13c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d01f      	beq.n	8003452 <HAL_GPIO_Init+0x72>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a42      	ldr	r2, [pc, #264]	; (8003520 <HAL_GPIO_Init+0x140>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d01b      	beq.n	8003452 <HAL_GPIO_Init+0x72>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a41      	ldr	r2, [pc, #260]	; (8003524 <HAL_GPIO_Init+0x144>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d017      	beq.n	8003452 <HAL_GPIO_Init+0x72>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a40      	ldr	r2, [pc, #256]	; (8003528 <HAL_GPIO_Init+0x148>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d013      	beq.n	8003452 <HAL_GPIO_Init+0x72>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a3f      	ldr	r2, [pc, #252]	; (800352c <HAL_GPIO_Init+0x14c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d00f      	beq.n	8003452 <HAL_GPIO_Init+0x72>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a3e      	ldr	r2, [pc, #248]	; (8003530 <HAL_GPIO_Init+0x150>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d00b      	beq.n	8003452 <HAL_GPIO_Init+0x72>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a3d      	ldr	r2, [pc, #244]	; (8003534 <HAL_GPIO_Init+0x154>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d007      	beq.n	8003452 <HAL_GPIO_Init+0x72>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a3c      	ldr	r2, [pc, #240]	; (8003538 <HAL_GPIO_Init+0x158>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d003      	beq.n	8003452 <HAL_GPIO_Init+0x72>
 800344a:	21bb      	movs	r1, #187	; 0xbb
 800344c:	483b      	ldr	r0, [pc, #236]	; (800353c <HAL_GPIO_Init+0x15c>)
 800344e:	f7fd fbde 	bl	8000c0e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_GPIO_Init+0x88>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4b37      	ldr	r3, [pc, #220]	; (8003540 <HAL_GPIO_Init+0x160>)
 8003462:	4013      	ands	r3, r2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_GPIO_Init+0x90>
 8003468:	21bc      	movs	r1, #188	; 0xbc
 800346a:	4834      	ldr	r0, [pc, #208]	; (800353c <HAL_GPIO_Init+0x15c>)
 800346c:	f7fd fbcf 	bl	8000c0e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d035      	beq.n	80034e4 <HAL_GPIO_Init+0x104>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d031      	beq.n	80034e4 <HAL_GPIO_Init+0x104>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b11      	cmp	r3, #17
 8003486:	d02d      	beq.n	80034e4 <HAL_GPIO_Init+0x104>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b02      	cmp	r3, #2
 800348e:	d029      	beq.n	80034e4 <HAL_GPIO_Init+0x104>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b12      	cmp	r3, #18
 8003496:	d025      	beq.n	80034e4 <HAL_GPIO_Init+0x104>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	4a29      	ldr	r2, [pc, #164]	; (8003544 <HAL_GPIO_Init+0x164>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d020      	beq.n	80034e4 <HAL_GPIO_Init+0x104>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4a28      	ldr	r2, [pc, #160]	; (8003548 <HAL_GPIO_Init+0x168>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d01b      	beq.n	80034e4 <HAL_GPIO_Init+0x104>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	4a26      	ldr	r2, [pc, #152]	; (800354c <HAL_GPIO_Init+0x16c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d016      	beq.n	80034e4 <HAL_GPIO_Init+0x104>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4a25      	ldr	r2, [pc, #148]	; (8003550 <HAL_GPIO_Init+0x170>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d011      	beq.n	80034e4 <HAL_GPIO_Init+0x104>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	4a23      	ldr	r2, [pc, #140]	; (8003554 <HAL_GPIO_Init+0x174>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00c      	beq.n	80034e4 <HAL_GPIO_Init+0x104>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	4a22      	ldr	r2, [pc, #136]	; (8003558 <HAL_GPIO_Init+0x178>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d007      	beq.n	80034e4 <HAL_GPIO_Init+0x104>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d003      	beq.n	80034e4 <HAL_GPIO_Init+0x104>
 80034dc:	21bd      	movs	r1, #189	; 0xbd
 80034de:	4817      	ldr	r0, [pc, #92]	; (800353c <HAL_GPIO_Init+0x15c>)
 80034e0:	f7fd fb95 	bl	8000c0e <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 821a 	beq.w	8003922 <HAL_GPIO_Init+0x542>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	f000 8215 	beq.w	8003922 <HAL_GPIO_Init+0x542>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	f000 8210 	beq.w	8003922 <HAL_GPIO_Init+0x542>
 8003502:	21be      	movs	r1, #190	; 0xbe
 8003504:	480d      	ldr	r0, [pc, #52]	; (800353c <HAL_GPIO_Init+0x15c>)
 8003506:	f7fd fb82 	bl	8000c0e <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800350a:	e20a      	b.n	8003922 <HAL_GPIO_Init+0x542>
 800350c:	58000080 	.word	0x58000080
 8003510:	58020000 	.word	0x58020000
 8003514:	58020400 	.word	0x58020400
 8003518:	58020800 	.word	0x58020800
 800351c:	58020c00 	.word	0x58020c00
 8003520:	58021000 	.word	0x58021000
 8003524:	58021400 	.word	0x58021400
 8003528:	58021800 	.word	0x58021800
 800352c:	58021c00 	.word	0x58021c00
 8003530:	58022000 	.word	0x58022000
 8003534:	58022400 	.word	0x58022400
 8003538:	58022800 	.word	0x58022800
 800353c:	080182d4 	.word	0x080182d4
 8003540:	ffff0000 	.word	0xffff0000
 8003544:	11110000 	.word	0x11110000
 8003548:	11210000 	.word	0x11210000
 800354c:	11310000 	.word	0x11310000
 8003550:	11120000 	.word	0x11120000
 8003554:	11220000 	.word	0x11220000
 8003558:	11320000 	.word	0x11320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	2101      	movs	r1, #1
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	fa01 f303 	lsl.w	r3, r1, r3
 8003568:	4013      	ands	r3, r2
 800356a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 81d4 	beq.w	800391c <HAL_GPIO_Init+0x53c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d00b      	beq.n	8003594 <HAL_GPIO_Init+0x1b4>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b02      	cmp	r3, #2
 8003582:	d007      	beq.n	8003594 <HAL_GPIO_Init+0x1b4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003588:	2b11      	cmp	r3, #17
 800358a:	d003      	beq.n	8003594 <HAL_GPIO_Init+0x1b4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b12      	cmp	r3, #18
 8003592:	d144      	bne.n	800361e <HAL_GPIO_Init+0x23e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00f      	beq.n	80035bc <HAL_GPIO_Init+0x1dc>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d00b      	beq.n	80035bc <HAL_GPIO_Init+0x1dc>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d007      	beq.n	80035bc <HAL_GPIO_Init+0x1dc>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d003      	beq.n	80035bc <HAL_GPIO_Init+0x1dc>
 80035b4:	21ce      	movs	r1, #206	; 0xce
 80035b6:	4897      	ldr	r0, [pc, #604]	; (8003814 <HAL_GPIO_Init+0x434>)
 80035b8:	f7fd fb29 	bl	8000c0e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	2203      	movs	r2, #3
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	43db      	mvns	r3, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035f2:	2201      	movs	r2, #1
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	091b      	lsrs	r3, r3, #4
 8003608:	f003 0201 	and.w	r2, r3, #1
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4313      	orrs	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	2203      	movs	r2, #3
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4013      	ands	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4313      	orrs	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d003      	beq.n	800365e <HAL_GPIO_Init+0x27e>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b12      	cmp	r3, #18
 800365c:	d15b      	bne.n	8003716 <HAL_GPIO_Init+0x336>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a6d      	ldr	r2, [pc, #436]	; (8003818 <HAL_GPIO_Init+0x438>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d02b      	beq.n	80036be <HAL_GPIO_Init+0x2de>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a6c      	ldr	r2, [pc, #432]	; (800381c <HAL_GPIO_Init+0x43c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d027      	beq.n	80036be <HAL_GPIO_Init+0x2de>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a6b      	ldr	r2, [pc, #428]	; (8003820 <HAL_GPIO_Init+0x440>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d023      	beq.n	80036be <HAL_GPIO_Init+0x2de>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a6a      	ldr	r2, [pc, #424]	; (8003824 <HAL_GPIO_Init+0x444>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d01f      	beq.n	80036be <HAL_GPIO_Init+0x2de>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a69      	ldr	r2, [pc, #420]	; (8003828 <HAL_GPIO_Init+0x448>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d01b      	beq.n	80036be <HAL_GPIO_Init+0x2de>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a68      	ldr	r2, [pc, #416]	; (800382c <HAL_GPIO_Init+0x44c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d017      	beq.n	80036be <HAL_GPIO_Init+0x2de>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a67      	ldr	r2, [pc, #412]	; (8003830 <HAL_GPIO_Init+0x450>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_GPIO_Init+0x2de>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a66      	ldr	r2, [pc, #408]	; (8003834 <HAL_GPIO_Init+0x454>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00f      	beq.n	80036be <HAL_GPIO_Init+0x2de>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a65      	ldr	r2, [pc, #404]	; (8003838 <HAL_GPIO_Init+0x458>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00b      	beq.n	80036be <HAL_GPIO_Init+0x2de>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a64      	ldr	r2, [pc, #400]	; (800383c <HAL_GPIO_Init+0x45c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d007      	beq.n	80036be <HAL_GPIO_Init+0x2de>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a63      	ldr	r2, [pc, #396]	; (8003840 <HAL_GPIO_Init+0x460>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d003      	beq.n	80036be <HAL_GPIO_Init+0x2de>
 80036b6:	21e6      	movs	r1, #230	; 0xe6
 80036b8:	4856      	ldr	r0, [pc, #344]	; (8003814 <HAL_GPIO_Init+0x434>)
 80036ba:	f7fd faa8 	bl	8000c0e <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b0f      	cmp	r3, #15
 80036c4:	d903      	bls.n	80036ce <HAL_GPIO_Init+0x2ee>
 80036c6:	21e7      	movs	r1, #231	; 0xe7
 80036c8:	4852      	ldr	r0, [pc, #328]	; (8003814 <HAL_GPIO_Init+0x434>)
 80036ca:	f7fd faa0 	bl	8000c0e <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	08da      	lsrs	r2, r3, #3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3208      	adds	r2, #8
 80036d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	220f      	movs	r2, #15
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	43db      	mvns	r3, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4013      	ands	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	691a      	ldr	r2, [r3, #16]
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4313      	orrs	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	08da      	lsrs	r2, r3, #3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3208      	adds	r2, #8
 8003710:	69b9      	ldr	r1, [r7, #24]
 8003712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	2203      	movs	r2, #3
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4013      	ands	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f003 0203 	and.w	r2, r3, #3
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4313      	orrs	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 80e2 	beq.w	800391c <HAL_GPIO_Init+0x53c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003758:	4b3a      	ldr	r3, [pc, #232]	; (8003844 <HAL_GPIO_Init+0x464>)
 800375a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800375e:	4a39      	ldr	r2, [pc, #228]	; (8003844 <HAL_GPIO_Init+0x464>)
 8003760:	f043 0302 	orr.w	r3, r3, #2
 8003764:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003768:	4b36      	ldr	r3, [pc, #216]	; (8003844 <HAL_GPIO_Init+0x464>)
 800376a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003776:	4a34      	ldr	r2, [pc, #208]	; (8003848 <HAL_GPIO_Init+0x468>)
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	089b      	lsrs	r3, r3, #2
 800377c:	3302      	adds	r3, #2
 800377e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	220f      	movs	r2, #15
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4013      	ands	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a1e      	ldr	r2, [pc, #120]	; (8003818 <HAL_GPIO_Init+0x438>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d054      	beq.n	800384c <HAL_GPIO_Init+0x46c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a1d      	ldr	r2, [pc, #116]	; (800381c <HAL_GPIO_Init+0x43c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d031      	beq.n	800380e <HAL_GPIO_Init+0x42e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a1c      	ldr	r2, [pc, #112]	; (8003820 <HAL_GPIO_Init+0x440>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d02b      	beq.n	800380a <HAL_GPIO_Init+0x42a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a1b      	ldr	r2, [pc, #108]	; (8003824 <HAL_GPIO_Init+0x444>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d025      	beq.n	8003806 <HAL_GPIO_Init+0x426>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a1a      	ldr	r2, [pc, #104]	; (8003828 <HAL_GPIO_Init+0x448>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d01f      	beq.n	8003802 <HAL_GPIO_Init+0x422>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a19      	ldr	r2, [pc, #100]	; (800382c <HAL_GPIO_Init+0x44c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d019      	beq.n	80037fe <HAL_GPIO_Init+0x41e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a18      	ldr	r2, [pc, #96]	; (8003830 <HAL_GPIO_Init+0x450>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <HAL_GPIO_Init+0x41a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a17      	ldr	r2, [pc, #92]	; (8003834 <HAL_GPIO_Init+0x454>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00d      	beq.n	80037f6 <HAL_GPIO_Init+0x416>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a16      	ldr	r2, [pc, #88]	; (8003838 <HAL_GPIO_Init+0x458>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d007      	beq.n	80037f2 <HAL_GPIO_Init+0x412>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a15      	ldr	r2, [pc, #84]	; (800383c <HAL_GPIO_Init+0x45c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d101      	bne.n	80037ee <HAL_GPIO_Init+0x40e>
 80037ea:	2309      	movs	r3, #9
 80037ec:	e02f      	b.n	800384e <HAL_GPIO_Init+0x46e>
 80037ee:	230a      	movs	r3, #10
 80037f0:	e02d      	b.n	800384e <HAL_GPIO_Init+0x46e>
 80037f2:	2308      	movs	r3, #8
 80037f4:	e02b      	b.n	800384e <HAL_GPIO_Init+0x46e>
 80037f6:	2307      	movs	r3, #7
 80037f8:	e029      	b.n	800384e <HAL_GPIO_Init+0x46e>
 80037fa:	2306      	movs	r3, #6
 80037fc:	e027      	b.n	800384e <HAL_GPIO_Init+0x46e>
 80037fe:	2305      	movs	r3, #5
 8003800:	e025      	b.n	800384e <HAL_GPIO_Init+0x46e>
 8003802:	2304      	movs	r3, #4
 8003804:	e023      	b.n	800384e <HAL_GPIO_Init+0x46e>
 8003806:	2303      	movs	r3, #3
 8003808:	e021      	b.n	800384e <HAL_GPIO_Init+0x46e>
 800380a:	2302      	movs	r3, #2
 800380c:	e01f      	b.n	800384e <HAL_GPIO_Init+0x46e>
 800380e:	2301      	movs	r3, #1
 8003810:	e01d      	b.n	800384e <HAL_GPIO_Init+0x46e>
 8003812:	bf00      	nop
 8003814:	080182d4 	.word	0x080182d4
 8003818:	58020000 	.word	0x58020000
 800381c:	58020400 	.word	0x58020400
 8003820:	58020800 	.word	0x58020800
 8003824:	58020c00 	.word	0x58020c00
 8003828:	58021000 	.word	0x58021000
 800382c:	58021400 	.word	0x58021400
 8003830:	58021800 	.word	0x58021800
 8003834:	58021c00 	.word	0x58021c00
 8003838:	58022000 	.word	0x58022000
 800383c:	58022400 	.word	0x58022400
 8003840:	58022800 	.word	0x58022800
 8003844:	58024400 	.word	0x58024400
 8003848:	58000400 	.word	0x58000400
 800384c:	2300      	movs	r3, #0
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	f002 0203 	and.w	r2, r2, #3
 8003854:	0092      	lsls	r2, r2, #2
 8003856:	4093      	lsls	r3, r2
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800385e:	4937      	ldr	r1, [pc, #220]	; (800393c <HAL_GPIO_Init+0x55c>)
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	089b      	lsrs	r3, r3, #2
 8003864:	3302      	adds	r3, #2
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	43db      	mvns	r3, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4013      	ands	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_GPIO_Init+0x4b0>
        {
          temp |= iocurrent;
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_GPIO_Init+0x4da>
        {
          temp |= iocurrent;
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_GPIO_Init+0x506>
        {
          temp |= iocurrent;
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80038e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80038ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_GPIO_Init+0x534>
        {
          temp |= iocurrent;
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003914:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	3301      	adds	r3, #1
 8003920:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	fa22 f303 	lsr.w	r3, r2, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	f47f ae15 	bne.w	800355c <HAL_GPIO_Init+0x17c>
  }
}
 8003932:	bf00      	nop
 8003934:	3720      	adds	r7, #32
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	58000400 	.word	0x58000400

08003940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	807b      	strh	r3, [r7, #2]
 800394c:	4613      	mov	r3, r2
 800394e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003950:	887b      	ldrh	r3, [r7, #2]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d004      	beq.n	8003960 <HAL_GPIO_WritePin+0x20>
 8003956:	887a      	ldrh	r2, [r7, #2]
 8003958:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <HAL_GPIO_WritePin+0x60>)
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d004      	beq.n	800396a <HAL_GPIO_WritePin+0x2a>
 8003960:	f240 11ad 	movw	r1, #429	; 0x1ad
 8003964:	480f      	ldr	r0, [pc, #60]	; (80039a4 <HAL_GPIO_WritePin+0x64>)
 8003966:	f7fd f952 	bl	8000c0e <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800396a:	787b      	ldrb	r3, [r7, #1]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d007      	beq.n	8003980 <HAL_GPIO_WritePin+0x40>
 8003970:	787b      	ldrb	r3, [r7, #1]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d004      	beq.n	8003980 <HAL_GPIO_WritePin+0x40>
 8003976:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800397a:	480a      	ldr	r0, [pc, #40]	; (80039a4 <HAL_GPIO_WritePin+0x64>)
 800397c:	f7fd f947 	bl	8000c0e <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003980:	787b      	ldrb	r3, [r7, #1]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003986:	887a      	ldrh	r2, [r7, #2]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800398c:	e003      	b.n	8003996 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800398e:	887b      	ldrh	r3, [r7, #2]
 8003990:	041a      	lsls	r2, r3, #16
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	619a      	str	r2, [r3, #24]
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	ffff0000 	.word	0xffff0000
 80039a4:	080182d4 	.word	0x080182d4

080039a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80039b4:	887b      	ldrh	r3, [r7, #2]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d004      	beq.n	80039c4 <HAL_GPIO_TogglePin+0x1c>
 80039ba:	887a      	ldrh	r2, [r7, #2]
 80039bc:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <HAL_GPIO_TogglePin+0x4c>)
 80039be:	4013      	ands	r3, r2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d004      	beq.n	80039ce <HAL_GPIO_TogglePin+0x26>
 80039c4:	f240 11c3 	movw	r1, #451	; 0x1c3
 80039c8:	480b      	ldr	r0, [pc, #44]	; (80039f8 <HAL_GPIO_TogglePin+0x50>)
 80039ca:	f7fd f920 	bl	8000c0e <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	887b      	ldrh	r3, [r7, #2]
 80039d4:	401a      	ands	r2, r3
 80039d6:	887b      	ldrh	r3, [r7, #2]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d104      	bne.n	80039e6 <HAL_GPIO_TogglePin+0x3e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80039dc:	887b      	ldrh	r3, [r7, #2]
 80039de:	041a      	lsls	r2, r3, #16
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80039e4:	e002      	b.n	80039ec <HAL_GPIO_TogglePin+0x44>
    GPIOx->BSRR = GPIO_Pin;
 80039e6:	887a      	ldrh	r2, [r7, #2]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	619a      	str	r2, [r3, #24]
}
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	ffff0000 	.word	0xffff0000
 80039f8:	080182d4 	.word	0x080182d4

080039fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d007      	beq.n	8003a1a <HAL_PWREx_ConfigSupply+0x1e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d004      	beq.n	8003a1a <HAL_PWREx_ConfigSupply+0x1e>
 8003a10:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8003a14:	481a      	ldr	r0, [pc, #104]	; (8003a80 <HAL_PWREx_ConfigSupply+0x84>)
 8003a16:	f7fd f8fa 	bl	8000c0e <assert_failed>

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003a1a:	4b1a      	ldr	r3, [pc, #104]	; (8003a84 <HAL_PWREx_ConfigSupply+0x88>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d00a      	beq.n	8003a3c <HAL_PWREx_ConfigSupply+0x40>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003a26:	4b17      	ldr	r3, [pc, #92]	; (8003a84 <HAL_PWREx_ConfigSupply+0x88>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_PWREx_ConfigSupply+0x3c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e01f      	b.n	8003a78 <HAL_PWREx_ConfigSupply+0x7c>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e01d      	b.n	8003a78 <HAL_PWREx_ConfigSupply+0x7c>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003a3c:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <HAL_PWREx_ConfigSupply+0x88>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f023 0207 	bic.w	r2, r3, #7
 8003a44:	490f      	ldr	r1, [pc, #60]	; (8003a84 <HAL_PWREx_ConfigSupply+0x88>)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a4c:	f7fd fcf6 	bl	800143c <HAL_GetTick>
 8003a50:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a52:	e009      	b.n	8003a68 <HAL_PWREx_ConfigSupply+0x6c>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a54:	f7fd fcf2 	bl	800143c <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a62:	d901      	bls.n	8003a68 <HAL_PWREx_ConfigSupply+0x6c>
    {
      return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e007      	b.n	8003a78 <HAL_PWREx_ConfigSupply+0x7c>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <HAL_PWREx_ConfigSupply+0x88>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a74:	d1ee      	bne.n	8003a54 <HAL_PWREx_ConfigSupply+0x58>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	08018310 	.word	0x08018310
 8003a84:	58024800 	.word	0x58024800

08003a88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08c      	sub	sp, #48	; 0x30
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d102      	bne.n	8003a9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	f000 bce9 	b.w	800446e <HAL_RCC_OscConfig+0x9e6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d028      	beq.n	8003af6 <HAL_RCC_OscConfig+0x6e>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d122      	bne.n	8003af6 <HAL_RCC_OscConfig+0x6e>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d11c      	bne.n	8003af6 <HAL_RCC_OscConfig+0x6e>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0310 	and.w	r3, r3, #16
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d116      	bne.n	8003af6 <HAL_RCC_OscConfig+0x6e>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d110      	bne.n	8003af6 <HAL_RCC_OscConfig+0x6e>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10a      	bne.n	8003af6 <HAL_RCC_OscConfig+0x6e>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d104      	bne.n	8003af6 <HAL_RCC_OscConfig+0x6e>
 8003aec:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8003af0:	48a0      	ldr	r0, [pc, #640]	; (8003d74 <HAL_RCC_OscConfig+0x2ec>)
 8003af2:	f7fd f88c 	bl	8000c0e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 809d 	beq.w	8003c3e <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00e      	beq.n	8003b2a <HAL_RCC_OscConfig+0xa2>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b14:	d009      	beq.n	8003b2a <HAL_RCC_OscConfig+0xa2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b1e:	d004      	beq.n	8003b2a <HAL_RCC_OscConfig+0xa2>
 8003b20:	f240 11a3 	movw	r1, #419	; 0x1a3
 8003b24:	4893      	ldr	r0, [pc, #588]	; (8003d74 <HAL_RCC_OscConfig+0x2ec>)
 8003b26:	f7fd f872 	bl	8000c0e <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b2a:	4b93      	ldr	r3, [pc, #588]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b34:	4b90      	ldr	r3, [pc, #576]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b38:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3c:	2b10      	cmp	r3, #16
 8003b3e:	d007      	beq.n	8003b50 <HAL_RCC_OscConfig+0xc8>
 8003b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b42:	2b18      	cmp	r3, #24
 8003b44:	d111      	bne.n	8003b6a <HAL_RCC_OscConfig+0xe2>
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d10c      	bne.n	8003b6a <HAL_RCC_OscConfig+0xe2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b50:	4b89      	ldr	r3, [pc, #548]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d06f      	beq.n	8003c3c <HAL_RCC_OscConfig+0x1b4>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d16b      	bne.n	8003c3c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	f000 bc82 	b.w	800446e <HAL_RCC_OscConfig+0x9e6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b72:	d106      	bne.n	8003b82 <HAL_RCC_OscConfig+0xfa>
 8003b74:	4b80      	ldr	r3, [pc, #512]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a7f      	ldr	r2, [pc, #508]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	e02e      	b.n	8003be0 <HAL_RCC_OscConfig+0x158>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x11c>
 8003b8a:	4b7b      	ldr	r3, [pc, #492]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a7a      	ldr	r2, [pc, #488]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	4b78      	ldr	r3, [pc, #480]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a77      	ldr	r2, [pc, #476]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003b9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	e01d      	b.n	8003be0 <HAL_RCC_OscConfig+0x158>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x140>
 8003bae:	4b72      	ldr	r3, [pc, #456]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a71      	ldr	r2, [pc, #452]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	4b6f      	ldr	r3, [pc, #444]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a6e      	ldr	r2, [pc, #440]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	e00b      	b.n	8003be0 <HAL_RCC_OscConfig+0x158>
 8003bc8:	4b6b      	ldr	r3, [pc, #428]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a6a      	ldr	r2, [pc, #424]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	4b68      	ldr	r3, [pc, #416]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a67      	ldr	r2, [pc, #412]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d014      	beq.n	8003c12 <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be8:	f7fd fc28 	bl	800143c <HAL_GetTick>
 8003bec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003bee:	e009      	b.n	8003c04 <HAL_RCC_OscConfig+0x17c>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf0:	f7fd fc24 	bl	800143c <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	; 0x64
 8003bfc:	d902      	bls.n	8003c04 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	f000 bc35 	b.w	800446e <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c04:	4b5c      	ldr	r3, [pc, #368]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0ef      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x168>
 8003c10:	e015      	b.n	8003c3e <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c12:	f7fd fc13 	bl	800143c <HAL_GetTick>
 8003c16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c18:	e009      	b.n	8003c2e <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c1a:	f7fd fc0f 	bl	800143c <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b64      	cmp	r3, #100	; 0x64
 8003c26:	d902      	bls.n	8003c2e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	f000 bc20 	b.w	800446e <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003c2e:	4b52      	ldr	r3, [pc, #328]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1ef      	bne.n	8003c1a <HAL_RCC_OscConfig+0x192>
 8003c3a:	e000      	b.n	8003c3e <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	f000 80bc 	beq.w	8003dc4 <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d018      	beq.n	8003c86 <HAL_RCC_OscConfig+0x1fe>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d014      	beq.n	8003c86 <HAL_RCC_OscConfig+0x1fe>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d010      	beq.n	8003c86 <HAL_RCC_OscConfig+0x1fe>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b09      	cmp	r3, #9
 8003c6a:	d00c      	beq.n	8003c86 <HAL_RCC_OscConfig+0x1fe>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	2b11      	cmp	r3, #17
 8003c72:	d008      	beq.n	8003c86 <HAL_RCC_OscConfig+0x1fe>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	2b19      	cmp	r3, #25
 8003c7a:	d004      	beq.n	8003c86 <HAL_RCC_OscConfig+0x1fe>
 8003c7c:	f240 11d7 	movw	r1, #471	; 0x1d7
 8003c80:	483c      	ldr	r0, [pc, #240]	; (8003d74 <HAL_RCC_OscConfig+0x2ec>)
 8003c82:	f7fc ffc4 	bl	8000c0e <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8003c8c:	d904      	bls.n	8003c98 <HAL_RCC_OscConfig+0x210>
 8003c8e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8003c92:	4838      	ldr	r0, [pc, #224]	; (8003d74 <HAL_RCC_OscConfig+0x2ec>)
 8003c94:	f7fc ffbb 	bl	8000c0e <assert_failed>

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c98:	4b37      	ldr	r3, [pc, #220]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ca0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ca2:	4b35      	ldr	r3, [pc, #212]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d007      	beq.n	8003cbe <HAL_RCC_OscConfig+0x236>
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	2b18      	cmp	r3, #24
 8003cb2:	d12d      	bne.n	8003d10 <HAL_RCC_OscConfig+0x288>
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d128      	bne.n	8003d10 <HAL_RCC_OscConfig+0x288>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cbe:	4b2e      	ldr	r3, [pc, #184]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x24e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x24e>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e3cb      	b.n	800446e <HAL_RCC_OscConfig+0x9e6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd6:	f7fd fbbd 	bl	8001454 <HAL_GetREVID>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	f241 0303 	movw	r3, #4099	; 0x1003
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d80a      	bhi.n	8003cfa <HAL_RCC_OscConfig+0x272>
 8003ce4:	4b24      	ldr	r3, [pc, #144]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	031b      	lsls	r3, r3, #12
 8003cf2:	4921      	ldr	r1, [pc, #132]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cf8:	e064      	b.n	8003dc4 <HAL_RCC_OscConfig+0x33c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cfa:	4b1f      	ldr	r3, [pc, #124]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	061b      	lsls	r3, r3, #24
 8003d08:	491b      	ldr	r1, [pc, #108]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d0e:	e059      	b.n	8003dc4 <HAL_RCC_OscConfig+0x33c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d03c      	beq.n	8003d92 <HAL_RCC_OscConfig+0x30a>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003d18:	4b17      	ldr	r3, [pc, #92]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f023 0219 	bic.w	r2, r3, #25
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4914      	ldr	r1, [pc, #80]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2a:	f7fd fb87 	bl	800143c <HAL_GetTick>
 8003d2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x2bc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d32:	f7fd fb83 	bl	800143c <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x2bc>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e394      	b.n	800446e <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d44:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x2aa>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d50:	f7fd fb80 	bl	8001454 <HAL_GetREVID>
 8003d54:	4602      	mov	r2, r0
 8003d56:	f241 0303 	movw	r3, #4099	; 0x1003
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d80e      	bhi.n	8003d7c <HAL_RCC_OscConfig+0x2f4>
 8003d5e:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	031b      	lsls	r3, r3, #12
 8003d6c:	4902      	ldr	r1, [pc, #8]	; (8003d78 <HAL_RCC_OscConfig+0x2f0>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	604b      	str	r3, [r1, #4]
 8003d72:	e027      	b.n	8003dc4 <HAL_RCC_OscConfig+0x33c>
 8003d74:	0801834c 	.word	0x0801834c
 8003d78:	58024400 	.word	0x58024400
 8003d7c:	4ba5      	ldr	r3, [pc, #660]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	061b      	lsls	r3, r3, #24
 8003d8a:	49a2      	ldr	r1, [pc, #648]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	604b      	str	r3, [r1, #4]
 8003d90:	e018      	b.n	8003dc4 <HAL_RCC_OscConfig+0x33c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d92:	4ba0      	ldr	r3, [pc, #640]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a9f      	ldr	r2, [pc, #636]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9e:	f7fd fb4d 	bl	800143c <HAL_GetTick>
 8003da2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x330>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003da6:	f7fd fb49 	bl	800143c <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e35a      	b.n	800446e <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003db8:	4b96      	ldr	r3, [pc, #600]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1f0      	bne.n	8003da6 <HAL_RCC_OscConfig+0x31e>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80a5 	beq.w	8003f1c <HAL_RCC_OscConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d008      	beq.n	8003dec <HAL_RCC_OscConfig+0x364>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	2b80      	cmp	r3, #128	; 0x80
 8003de0:	d004      	beq.n	8003dec <HAL_RCC_OscConfig+0x364>
 8003de2:	f240 211a 	movw	r1, #538	; 0x21a
 8003de6:	488c      	ldr	r0, [pc, #560]	; (8004018 <HAL_RCC_OscConfig+0x590>)
 8003de8:	f7fc ff11 	bl	8000c0e <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	2b3f      	cmp	r3, #63	; 0x3f
 8003df2:	d904      	bls.n	8003dfe <HAL_RCC_OscConfig+0x376>
 8003df4:	f240 211b 	movw	r1, #539	; 0x21b
 8003df8:	4887      	ldr	r0, [pc, #540]	; (8004018 <HAL_RCC_OscConfig+0x590>)
 8003dfa:	f7fc ff08 	bl	8000c0e <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dfe:	4b85      	ldr	r3, [pc, #532]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e08:	4b82      	ldr	r3, [pc, #520]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d007      	beq.n	8003e24 <HAL_RCC_OscConfig+0x39c>
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2b18      	cmp	r3, #24
 8003e18:	d12d      	bne.n	8003e76 <HAL_RCC_OscConfig+0x3ee>
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d128      	bne.n	8003e76 <HAL_RCC_OscConfig+0x3ee>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e24:	4b7b      	ldr	r3, [pc, #492]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_RCC_OscConfig+0x3b4>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	2b80      	cmp	r3, #128	; 0x80
 8003e36:	d001      	beq.n	8003e3c <HAL_RCC_OscConfig+0x3b4>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e318      	b.n	800446e <HAL_RCC_OscConfig+0x9e6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e3c:	f7fd fb0a 	bl	8001454 <HAL_GetREVID>
 8003e40:	4602      	mov	r2, r0
 8003e42:	f241 0303 	movw	r3, #4099	; 0x1003
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d80a      	bhi.n	8003e60 <HAL_RCC_OscConfig+0x3d8>
 8003e4a:	4b72      	ldr	r3, [pc, #456]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	069b      	lsls	r3, r3, #26
 8003e58:	496e      	ldr	r1, [pc, #440]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e5e:	e05d      	b.n	8003f1c <HAL_RCC_OscConfig+0x494>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e60:	4b6c      	ldr	r3, [pc, #432]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	061b      	lsls	r3, r3, #24
 8003e6e:	4969      	ldr	r1, [pc, #420]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e74:	e052      	b.n	8003f1c <HAL_RCC_OscConfig+0x494>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d035      	beq.n	8003eea <HAL_RCC_OscConfig+0x462>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003e7e:	4b65      	ldr	r3, [pc, #404]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a64      	ldr	r2, [pc, #400]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8a:	f7fd fad7 	bl	800143c <HAL_GetTick>
 8003e8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x41c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003e92:	f7fd fad3 	bl	800143c <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e2e4      	b.n	800446e <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ea4:	4b5b      	ldr	r3, [pc, #364]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f0      	beq.n	8003e92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003eb0:	f7fd fad0 	bl	8001454 <HAL_GetREVID>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	f241 0303 	movw	r3, #4099	; 0x1003
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d80a      	bhi.n	8003ed4 <HAL_RCC_OscConfig+0x44c>
 8003ebe:	4b55      	ldr	r3, [pc, #340]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	069b      	lsls	r3, r3, #26
 8003ecc:	4951      	ldr	r1, [pc, #324]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	604b      	str	r3, [r1, #4]
 8003ed2:	e023      	b.n	8003f1c <HAL_RCC_OscConfig+0x494>
 8003ed4:	4b4f      	ldr	r3, [pc, #316]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	494c      	ldr	r1, [pc, #304]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60cb      	str	r3, [r1, #12]
 8003ee8:	e018      	b.n	8003f1c <HAL_RCC_OscConfig+0x494>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003eea:	4b4a      	ldr	r3, [pc, #296]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a49      	ldr	r2, [pc, #292]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003ef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef6:	f7fd faa1 	bl	800143c <HAL_GetTick>
 8003efa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003efe:	f7fd fa9d 	bl	800143c <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e2ae      	b.n	800446e <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003f10:	4b40      	ldr	r3, [pc, #256]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1f0      	bne.n	8003efe <HAL_RCC_OscConfig+0x476>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d043      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_RCC_OscConfig+0x4ba>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d004      	beq.n	8003f42 <HAL_RCC_OscConfig+0x4ba>
 8003f38:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8003f3c:	4836      	ldr	r0, [pc, #216]	; (8004018 <HAL_RCC_OscConfig+0x590>)
 8003f3e:	f7fc fe66 	bl	8000c0e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d019      	beq.n	8003f7e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f4a:	4b32      	ldr	r3, [pc, #200]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4e:	4a31      	ldr	r2, [pc, #196]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f56:	f7fd fa71 	bl	800143c <HAL_GetTick>
 8003f5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f5e:	f7fd fa6d 	bl	800143c <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e27e      	b.n	800446e <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f70:	4b28      	ldr	r3, [pc, #160]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCC_OscConfig+0x4d6>
 8003f7c:	e018      	b.n	8003fb0 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f7e:	4b25      	ldr	r3, [pc, #148]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f82:	4a24      	ldr	r2, [pc, #144]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8a:	f7fd fa57 	bl	800143c <HAL_GetTick>
 8003f8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x51c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f92:	f7fd fa53 	bl	800143c <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x51c>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e264      	b.n	800446e <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fa4:	4b1b      	ldr	r3, [pc, #108]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f0      	bne.n	8003f92 <HAL_RCC_OscConfig+0x50a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0320 	and.w	r3, r3, #32
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d048      	beq.n	800404e <HAL_RCC_OscConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d004      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x54e>
 8003fcc:	f240 2187 	movw	r1, #647	; 0x287
 8003fd0:	4811      	ldr	r0, [pc, #68]	; (8004018 <HAL_RCC_OscConfig+0x590>)
 8003fd2:	f7fc fe1c 	bl	8000c0e <assert_failed>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d01e      	beq.n	800401c <HAL_RCC_OscConfig+0x594>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fde:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a0c      	ldr	r2, [pc, #48]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8003fe4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fe8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003fea:	f7fd fa27 	bl	800143c <HAL_GetTick>
 8003fee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003ff2:	f7fd fa23 	bl	800143c <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e234      	b.n	800446e <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004004:	4b03      	ldr	r3, [pc, #12]	; (8004014 <HAL_RCC_OscConfig+0x58c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d0f0      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x56a>
 8004010:	e01d      	b.n	800404e <HAL_RCC_OscConfig+0x5c6>
 8004012:	bf00      	nop
 8004014:	58024400 	.word	0x58024400
 8004018:	0801834c 	.word	0x0801834c
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800401c:	4ba3      	ldr	r3, [pc, #652]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4aa2      	ldr	r2, [pc, #648]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 8004022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004026:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004028:	f7fd fa08 	bl	800143c <HAL_GetTick>
 800402c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x5ba>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004030:	f7fd fa04 	bl	800143c <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x5ba>
        {
          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e215      	b.n	800446e <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004042:	4b9a      	ldr	r3, [pc, #616]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x5a8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 8092 	beq.w	8004180 <HAL_RCC_OscConfig+0x6f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00c      	beq.n	800407e <HAL_RCC_OscConfig+0x5f6>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d008      	beq.n	800407e <HAL_RCC_OscConfig+0x5f6>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	2b05      	cmp	r3, #5
 8004072:	d004      	beq.n	800407e <HAL_RCC_OscConfig+0x5f6>
 8004074:	f240 21b1 	movw	r1, #689	; 0x2b1
 8004078:	488d      	ldr	r0, [pc, #564]	; (80042b0 <HAL_RCC_OscConfig+0x828>)
 800407a:	f7fc fdc8 	bl	8000c0e <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800407e:	4b8d      	ldr	r3, [pc, #564]	; (80042b4 <HAL_RCC_OscConfig+0x82c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a8c      	ldr	r2, [pc, #560]	; (80042b4 <HAL_RCC_OscConfig+0x82c>)
 8004084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004088:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800408a:	f7fd f9d7 	bl	800143c <HAL_GetTick>
 800408e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x61c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004092:	f7fd f9d3 	bl	800143c <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b64      	cmp	r3, #100	; 0x64
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x61c>
      {
        return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e1e4      	b.n	800446e <HAL_RCC_OscConfig+0x9e6>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040a4:	4b83      	ldr	r3, [pc, #524]	; (80042b4 <HAL_RCC_OscConfig+0x82c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x60a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d106      	bne.n	80040c6 <HAL_RCC_OscConfig+0x63e>
 80040b8:	4b7c      	ldr	r3, [pc, #496]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 80040ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040bc:	4a7b      	ldr	r2, [pc, #492]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6713      	str	r3, [r2, #112]	; 0x70
 80040c4:	e02d      	b.n	8004122 <HAL_RCC_OscConfig+0x69a>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x660>
 80040ce:	4b77      	ldr	r3, [pc, #476]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	4a76      	ldr	r2, [pc, #472]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 80040d4:	f023 0301 	bic.w	r3, r3, #1
 80040d8:	6713      	str	r3, [r2, #112]	; 0x70
 80040da:	4b74      	ldr	r3, [pc, #464]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	4a73      	ldr	r2, [pc, #460]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 80040e0:	f023 0304 	bic.w	r3, r3, #4
 80040e4:	6713      	str	r3, [r2, #112]	; 0x70
 80040e6:	e01c      	b.n	8004122 <HAL_RCC_OscConfig+0x69a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b05      	cmp	r3, #5
 80040ee:	d10c      	bne.n	800410a <HAL_RCC_OscConfig+0x682>
 80040f0:	4b6e      	ldr	r3, [pc, #440]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 80040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f4:	4a6d      	ldr	r2, [pc, #436]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 80040f6:	f043 0304 	orr.w	r3, r3, #4
 80040fa:	6713      	str	r3, [r2, #112]	; 0x70
 80040fc:	4b6b      	ldr	r3, [pc, #428]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	4a6a      	ldr	r2, [pc, #424]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	6713      	str	r3, [r2, #112]	; 0x70
 8004108:	e00b      	b.n	8004122 <HAL_RCC_OscConfig+0x69a>
 800410a:	4b68      	ldr	r3, [pc, #416]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410e:	4a67      	ldr	r2, [pc, #412]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 8004110:	f023 0301 	bic.w	r3, r3, #1
 8004114:	6713      	str	r3, [r2, #112]	; 0x70
 8004116:	4b65      	ldr	r3, [pc, #404]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 8004118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411a:	4a64      	ldr	r2, [pc, #400]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 800411c:	f023 0304 	bic.w	r3, r3, #4
 8004120:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d015      	beq.n	8004156 <HAL_RCC_OscConfig+0x6ce>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412a:	f7fd f987 	bl	800143c <HAL_GetTick>
 800412e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004130:	e00a      	b.n	8004148 <HAL_RCC_OscConfig+0x6c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004132:	f7fd f983 	bl	800143c <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004140:	4293      	cmp	r3, r2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x6c0>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e192      	b.n	800446e <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004148:	4b58      	ldr	r3, [pc, #352]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0ee      	beq.n	8004132 <HAL_RCC_OscConfig+0x6aa>
 8004154:	e014      	b.n	8004180 <HAL_RCC_OscConfig+0x6f8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004156:	f7fd f971 	bl	800143c <HAL_GetTick>
 800415a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800415c:	e00a      	b.n	8004174 <HAL_RCC_OscConfig+0x6ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800415e:	f7fd f96d 	bl	800143c <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	f241 3288 	movw	r2, #5000	; 0x1388
 800416c:	4293      	cmp	r3, r2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x6ec>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e17c      	b.n	800446e <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004174:	4b4d      	ldr	r3, [pc, #308]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1ee      	bne.n	800415e <HAL_RCC_OscConfig+0x6d6>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00c      	beq.n	80041a2 <HAL_RCC_OscConfig+0x71a>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	2b01      	cmp	r3, #1
 800418e:	d008      	beq.n	80041a2 <HAL_RCC_OscConfig+0x71a>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	2b02      	cmp	r3, #2
 8004196:	d004      	beq.n	80041a2 <HAL_RCC_OscConfig+0x71a>
 8004198:	f240 21e3 	movw	r1, #739	; 0x2e3
 800419c:	4844      	ldr	r0, [pc, #272]	; (80042b0 <HAL_RCC_OscConfig+0x828>)
 800419e:	f7fc fd36 	bl	8000c0e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 8160 	beq.w	800446c <HAL_RCC_OscConfig+0x9e4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80041ac:	4b3f      	ldr	r3, [pc, #252]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041b4:	2b18      	cmp	r3, #24
 80041b6:	f000 811b 	beq.w	80043f0 <HAL_RCC_OscConfig+0x968>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	2b02      	cmp	r3, #2
 80041c0:	f040 80fc 	bne.w	80043bc <HAL_RCC_OscConfig+0x934>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d010      	beq.n	80041ee <HAL_RCC_OscConfig+0x766>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00c      	beq.n	80041ee <HAL_RCC_OscConfig+0x766>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d008      	beq.n	80041ee <HAL_RCC_OscConfig+0x766>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d004      	beq.n	80041ee <HAL_RCC_OscConfig+0x766>
 80041e4:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 80041e8:	4831      	ldr	r0, [pc, #196]	; (80042b0 <HAL_RCC_OscConfig+0x828>)
 80041ea:	f7fc fd10 	bl	8000c0e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_RCC_OscConfig+0x776>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fa:	2b3f      	cmp	r3, #63	; 0x3f
 80041fc:	d904      	bls.n	8004208 <HAL_RCC_OscConfig+0x780>
 80041fe:	f240 21ed 	movw	r1, #749	; 0x2ed
 8004202:	482b      	ldr	r0, [pc, #172]	; (80042b0 <HAL_RCC_OscConfig+0x828>)
 8004204:	f7fc fd03 	bl	8000c0e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	2b03      	cmp	r3, #3
 800420e:	d904      	bls.n	800421a <HAL_RCC_OscConfig+0x792>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004218:	d904      	bls.n	8004224 <HAL_RCC_OscConfig+0x79c>
 800421a:	f240 21ee 	movw	r1, #750	; 0x2ee
 800421e:	4824      	ldr	r0, [pc, #144]	; (80042b0 <HAL_RCC_OscConfig+0x828>)
 8004220:	f7fc fcf5 	bl	8000c0e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_RCC_OscConfig+0x7ac>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004230:	2b80      	cmp	r3, #128	; 0x80
 8004232:	d904      	bls.n	800423e <HAL_RCC_OscConfig+0x7b6>
 8004234:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004238:	481d      	ldr	r0, [pc, #116]	; (80042b0 <HAL_RCC_OscConfig+0x828>)
 800423a:	f7fc fce8 	bl	8000c0e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_RCC_OscConfig+0x7c6>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	2b80      	cmp	r3, #128	; 0x80
 800424c:	d904      	bls.n	8004258 <HAL_RCC_OscConfig+0x7d0>
 800424e:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8004252:	4817      	ldr	r0, [pc, #92]	; (80042b0 <HAL_RCC_OscConfig+0x828>)
 8004254:	f7fc fcdb 	bl	8000c0e <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_RCC_OscConfig+0x7e0>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004264:	2b80      	cmp	r3, #128	; 0x80
 8004266:	d904      	bls.n	8004272 <HAL_RCC_OscConfig+0x7ea>
 8004268:	f240 21f1 	movw	r1, #753	; 0x2f1
 800426c:	4810      	ldr	r0, [pc, #64]	; (80042b0 <HAL_RCC_OscConfig+0x828>)
 800426e:	f7fc fcce 	bl	8000c0e <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427a:	d304      	bcc.n	8004286 <HAL_RCC_OscConfig+0x7fe>
 800427c:	f240 21f2 	movw	r1, #754	; 0x2f2
 8004280:	480b      	ldr	r0, [pc, #44]	; (80042b0 <HAL_RCC_OscConfig+0x828>)
 8004282:	f7fc fcc4 	bl	8000c0e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004286:	4b09      	ldr	r3, [pc, #36]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a08      	ldr	r2, [pc, #32]	; (80042ac <HAL_RCC_OscConfig+0x824>)
 800428c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004292:	f7fd f8d3 	bl	800143c <HAL_GetTick>
 8004296:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004298:	e00e      	b.n	80042b8 <HAL_RCC_OscConfig+0x830>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800429a:	f7fd f8cf 	bl	800143c <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d907      	bls.n	80042b8 <HAL_RCC_OscConfig+0x830>
          {
            return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e0e0      	b.n	800446e <HAL_RCC_OscConfig+0x9e6>
 80042ac:	58024400 	.word	0x58024400
 80042b0:	0801834c 	.word	0x0801834c
 80042b4:	58024800 	.word	0x58024800
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042b8:	4b6f      	ldr	r3, [pc, #444]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1ea      	bne.n	800429a <HAL_RCC_OscConfig+0x812>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042c4:	4b6c      	ldr	r3, [pc, #432]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 80042c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042c8:	4b6c      	ldr	r3, [pc, #432]	; (800447c <HAL_RCC_OscConfig+0x9f4>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80042d4:	0112      	lsls	r2, r2, #4
 80042d6:	430a      	orrs	r2, r1
 80042d8:	4967      	ldr	r1, [pc, #412]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	628b      	str	r3, [r1, #40]	; 0x28
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	3b01      	subs	r3, #1
 80042e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ec:	3b01      	subs	r3, #1
 80042ee:	025b      	lsls	r3, r3, #9
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f8:	3b01      	subs	r3, #1
 80042fa:	041b      	lsls	r3, r3, #16
 80042fc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004306:	3b01      	subs	r3, #1
 8004308:	061b      	lsls	r3, r3, #24
 800430a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800430e:	495a      	ldr	r1, [pc, #360]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 8004310:	4313      	orrs	r3, r2
 8004312:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004314:	4b58      	ldr	r3, [pc, #352]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	4a57      	ldr	r2, [pc, #348]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 800431a:	f023 0301 	bic.w	r3, r3, #1
 800431e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004320:	4b55      	ldr	r3, [pc, #340]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 8004322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004324:	4b56      	ldr	r3, [pc, #344]	; (8004480 <HAL_RCC_OscConfig+0x9f8>)
 8004326:	4013      	ands	r3, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800432c:	00d2      	lsls	r2, r2, #3
 800432e:	4952      	ldr	r1, [pc, #328]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 8004330:	4313      	orrs	r3, r2
 8004332:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004334:	4b50      	ldr	r3, [pc, #320]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	f023 020c 	bic.w	r2, r3, #12
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	494d      	ldr	r1, [pc, #308]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 8004342:	4313      	orrs	r3, r2
 8004344:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004346:	4b4c      	ldr	r3, [pc, #304]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 8004348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434a:	f023 0202 	bic.w	r2, r3, #2
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004352:	4949      	ldr	r1, [pc, #292]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 8004354:	4313      	orrs	r3, r2
 8004356:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004358:	4b47      	ldr	r3, [pc, #284]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	4a46      	ldr	r2, [pc, #280]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 800435e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004362:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004364:	4b44      	ldr	r3, [pc, #272]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	4a43      	ldr	r2, [pc, #268]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 800436a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800436e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004370:	4b41      	ldr	r3, [pc, #260]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	4a40      	ldr	r2, [pc, #256]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 8004376:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800437a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800437c:	4b3e      	ldr	r3, [pc, #248]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	4a3d      	ldr	r2, [pc, #244]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004388:	4b3b      	ldr	r3, [pc, #236]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a3a      	ldr	r2, [pc, #232]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 800438e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004394:	f7fd f852 	bl	800143c <HAL_GetTick>
 8004398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x926>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800439c:	f7fd f84e 	bl	800143c <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x926>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e05f      	b.n	800446e <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043ae:	4b32      	ldr	r3, [pc, #200]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f0      	beq.n	800439c <HAL_RCC_OscConfig+0x914>
 80043ba:	e057      	b.n	800446c <HAL_RCC_OscConfig+0x9e4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043bc:	4b2e      	ldr	r3, [pc, #184]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a2d      	ldr	r2, [pc, #180]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 80043c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c8:	f7fd f838 	bl	800143c <HAL_GetTick>
 80043cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x95a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d0:	f7fd f834 	bl	800143c <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x95a>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e045      	b.n	800446e <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043e2:	4b25      	ldr	r3, [pc, #148]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f0      	bne.n	80043d0 <HAL_RCC_OscConfig+0x948>
 80043ee:	e03d      	b.n	800446c <HAL_RCC_OscConfig+0x9e4>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80043f0:	4b21      	ldr	r3, [pc, #132]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 80043f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80043f6:	4b20      	ldr	r3, [pc, #128]	; (8004478 <HAL_RCC_OscConfig+0x9f0>)
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	2b01      	cmp	r3, #1
 8004402:	d031      	beq.n	8004468 <HAL_RCC_OscConfig+0x9e0>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f003 0203 	and.w	r2, r3, #3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800440e:	429a      	cmp	r2, r3
 8004410:	d12a      	bne.n	8004468 <HAL_RCC_OscConfig+0x9e0>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800441e:	429a      	cmp	r2, r3
 8004420:	d122      	bne.n	8004468 <HAL_RCC_OscConfig+0x9e0>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800442e:	429a      	cmp	r2, r3
 8004430:	d11a      	bne.n	8004468 <HAL_RCC_OscConfig+0x9e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	0a5b      	lsrs	r3, r3, #9
 8004436:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004440:	429a      	cmp	r2, r3
 8004442:	d111      	bne.n	8004468 <HAL_RCC_OscConfig+0x9e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	0c1b      	lsrs	r3, r3, #16
 8004448:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004452:	429a      	cmp	r2, r3
 8004454:	d108      	bne.n	8004468 <HAL_RCC_OscConfig+0x9e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	0e1b      	lsrs	r3, r3, #24
 800445a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004462:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004464:	429a      	cmp	r2, r3
 8004466:	d001      	beq.n	800446c <HAL_RCC_OscConfig+0x9e4>
      {
        return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <HAL_RCC_OscConfig+0x9e6>
      }
    }
  }
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3730      	adds	r7, #48	; 0x30
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	58024400 	.word	0x58024400
 800447c:	fffffc0c 	.word	0xfffffc0c
 8004480:	ffff0007 	.word	0xffff0007

08004484 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e354      	b.n	8004b42 <HAL_RCC_ClockConfig+0x6be>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x24>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b3f      	cmp	r3, #63	; 0x3f
 80044a6:	d904      	bls.n	80044b2 <HAL_RCC_ClockConfig+0x2e>
 80044a8:	f240 317f 	movw	r1, #895	; 0x37f
 80044ac:	4827      	ldr	r0, [pc, #156]	; (800454c <HAL_RCC_ClockConfig+0xc8>)
 80044ae:	f7fc fbae 	bl	8000c0e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d031      	beq.n	800451c <HAL_RCC_ClockConfig+0x98>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d02e      	beq.n	800451c <HAL_RCC_ClockConfig+0x98>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d02b      	beq.n	800451c <HAL_RCC_ClockConfig+0x98>
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b03      	cmp	r3, #3
 80044c8:	d028      	beq.n	800451c <HAL_RCC_ClockConfig+0x98>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d025      	beq.n	800451c <HAL_RCC_ClockConfig+0x98>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b05      	cmp	r3, #5
 80044d4:	d022      	beq.n	800451c <HAL_RCC_ClockConfig+0x98>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b06      	cmp	r3, #6
 80044da:	d01f      	beq.n	800451c <HAL_RCC_ClockConfig+0x98>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b07      	cmp	r3, #7
 80044e0:	d01c      	beq.n	800451c <HAL_RCC_ClockConfig+0x98>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d019      	beq.n	800451c <HAL_RCC_ClockConfig+0x98>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b09      	cmp	r3, #9
 80044ec:	d016      	beq.n	800451c <HAL_RCC_ClockConfig+0x98>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b0a      	cmp	r3, #10
 80044f2:	d013      	beq.n	800451c <HAL_RCC_ClockConfig+0x98>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b0b      	cmp	r3, #11
 80044f8:	d010      	beq.n	800451c <HAL_RCC_ClockConfig+0x98>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b0c      	cmp	r3, #12
 80044fe:	d00d      	beq.n	800451c <HAL_RCC_ClockConfig+0x98>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2b0d      	cmp	r3, #13
 8004504:	d00a      	beq.n	800451c <HAL_RCC_ClockConfig+0x98>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b0e      	cmp	r3, #14
 800450a:	d007      	beq.n	800451c <HAL_RCC_ClockConfig+0x98>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b0f      	cmp	r3, #15
 8004510:	d004      	beq.n	800451c <HAL_RCC_ClockConfig+0x98>
 8004512:	f44f 7160 	mov.w	r1, #896	; 0x380
 8004516:	480d      	ldr	r0, [pc, #52]	; (800454c <HAL_RCC_ClockConfig+0xc8>)
 8004518:	f7fc fb79 	bl	8000c0e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800451c:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <HAL_RCC_ClockConfig+0xcc>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 030f 	and.w	r3, r3, #15
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d914      	bls.n	8004554 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452a:	4b09      	ldr	r3, [pc, #36]	; (8004550 <HAL_RCC_ClockConfig+0xcc>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f023 020f 	bic.w	r2, r3, #15
 8004532:	4907      	ldr	r1, [pc, #28]	; (8004550 <HAL_RCC_ClockConfig+0xcc>)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	4313      	orrs	r3, r2
 8004538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800453a:	4b05      	ldr	r3, [pc, #20]	; (8004550 <HAL_RCC_ClockConfig+0xcc>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	429a      	cmp	r2, r3
 8004546:	d005      	beq.n	8004554 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e2fa      	b.n	8004b42 <HAL_RCC_ClockConfig+0x6be>
 800454c:	0801834c 	.word	0x0801834c
 8004550:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b00      	cmp	r3, #0
 800455e:	d029      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x130>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	4b9a      	ldr	r3, [pc, #616]	; (80047d0 <HAL_RCC_ClockConfig+0x34c>)
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800456c:	429a      	cmp	r2, r3
 800456e:	d921      	bls.n	80045b4 <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d014      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x11e>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	2b40      	cmp	r3, #64	; 0x40
 800457e:	d010      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x11e>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	2b50      	cmp	r3, #80	; 0x50
 8004586:	d00c      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x11e>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	2b60      	cmp	r3, #96	; 0x60
 800458e:	d008      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x11e>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	2b70      	cmp	r3, #112	; 0x70
 8004596:	d004      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x11e>
 8004598:	f44f 7167 	mov.w	r1, #924	; 0x39c
 800459c:	488d      	ldr	r0, [pc, #564]	; (80047d4 <HAL_RCC_ClockConfig+0x350>)
 800459e:	f7fc fb36 	bl	8000c0e <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045a2:	4b8b      	ldr	r3, [pc, #556]	; (80047d0 <HAL_RCC_ClockConfig+0x34c>)
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	4988      	ldr	r1, [pc, #544]	; (80047d0 <HAL_RCC_ClockConfig+0x34c>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0308 	and.w	r3, r3, #8
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d029      	beq.n	8004614 <HAL_RCC_ClockConfig+0x190>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	695a      	ldr	r2, [r3, #20]
 80045c4:	4b82      	ldr	r3, [pc, #520]	; (80047d0 <HAL_RCC_ClockConfig+0x34c>)
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d921      	bls.n	8004614 <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d014      	beq.n	8004602 <HAL_RCC_ClockConfig+0x17e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	d010      	beq.n	8004602 <HAL_RCC_ClockConfig+0x17e>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	2b50      	cmp	r3, #80	; 0x50
 80045e6:	d00c      	beq.n	8004602 <HAL_RCC_ClockConfig+0x17e>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	2b60      	cmp	r3, #96	; 0x60
 80045ee:	d008      	beq.n	8004602 <HAL_RCC_ClockConfig+0x17e>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	2b70      	cmp	r3, #112	; 0x70
 80045f6:	d004      	beq.n	8004602 <HAL_RCC_ClockConfig+0x17e>
 80045f8:	f240 31ae 	movw	r1, #942	; 0x3ae
 80045fc:	4875      	ldr	r0, [pc, #468]	; (80047d4 <HAL_RCC_ClockConfig+0x350>)
 80045fe:	f7fc fb06 	bl	8000c0e <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004602:	4b73      	ldr	r3, [pc, #460]	; (80047d0 <HAL_RCC_ClockConfig+0x34c>)
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	4970      	ldr	r1, [pc, #448]	; (80047d0 <HAL_RCC_ClockConfig+0x34c>)
 8004610:	4313      	orrs	r3, r2
 8004612:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0310 	and.w	r3, r3, #16
 800461c:	2b00      	cmp	r3, #0
 800461e:	d02d      	beq.n	800467c <HAL_RCC_ClockConfig+0x1f8>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699a      	ldr	r2, [r3, #24]
 8004624:	4b6a      	ldr	r3, [pc, #424]	; (80047d0 <HAL_RCC_ClockConfig+0x34c>)
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800462c:	429a      	cmp	r2, r3
 800462e:	d925      	bls.n	800467c <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d018      	beq.n	800466a <HAL_RCC_ClockConfig+0x1e6>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004640:	d013      	beq.n	800466a <HAL_RCC_ClockConfig+0x1e6>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800464a:	d00e      	beq.n	800466a <HAL_RCC_ClockConfig+0x1e6>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004654:	d009      	beq.n	800466a <HAL_RCC_ClockConfig+0x1e6>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800465e:	d004      	beq.n	800466a <HAL_RCC_ClockConfig+0x1e6>
 8004660:	f240 31bf 	movw	r1, #959	; 0x3bf
 8004664:	485b      	ldr	r0, [pc, #364]	; (80047d4 <HAL_RCC_ClockConfig+0x350>)
 8004666:	f7fc fad2 	bl	8000c0e <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800466a:	4b59      	ldr	r3, [pc, #356]	; (80047d0 <HAL_RCC_ClockConfig+0x34c>)
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	4956      	ldr	r1, [pc, #344]	; (80047d0 <HAL_RCC_ClockConfig+0x34c>)
 8004678:	4313      	orrs	r3, r2
 800467a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	2b00      	cmp	r3, #0
 8004686:	d029      	beq.n	80046dc <HAL_RCC_ClockConfig+0x258>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	69da      	ldr	r2, [r3, #28]
 800468c:	4b50      	ldr	r3, [pc, #320]	; (80047d0 <HAL_RCC_ClockConfig+0x34c>)
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004694:	429a      	cmp	r2, r3
 8004696:	d921      	bls.n	80046dc <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d014      	beq.n	80046ca <HAL_RCC_ClockConfig+0x246>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	2b40      	cmp	r3, #64	; 0x40
 80046a6:	d010      	beq.n	80046ca <HAL_RCC_ClockConfig+0x246>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	2b50      	cmp	r3, #80	; 0x50
 80046ae:	d00c      	beq.n	80046ca <HAL_RCC_ClockConfig+0x246>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	2b60      	cmp	r3, #96	; 0x60
 80046b6:	d008      	beq.n	80046ca <HAL_RCC_ClockConfig+0x246>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	2b70      	cmp	r3, #112	; 0x70
 80046be:	d004      	beq.n	80046ca <HAL_RCC_ClockConfig+0x246>
 80046c0:	f240 31d1 	movw	r1, #977	; 0x3d1
 80046c4:	4843      	ldr	r0, [pc, #268]	; (80047d4 <HAL_RCC_ClockConfig+0x350>)
 80046c6:	f7fc faa2 	bl	8000c0e <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80046ca:	4b41      	ldr	r3, [pc, #260]	; (80047d0 <HAL_RCC_ClockConfig+0x34c>)
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	493e      	ldr	r1, [pc, #248]	; (80047d0 <HAL_RCC_ClockConfig+0x34c>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d039      	beq.n	800475c <HAL_RCC_ClockConfig+0x2d8>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	4b38      	ldr	r3, [pc, #224]	; (80047d0 <HAL_RCC_ClockConfig+0x34c>)
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	f003 030f 	and.w	r3, r3, #15
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d931      	bls.n	800475c <HAL_RCC_ClockConfig+0x2d8>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d024      	beq.n	800474a <HAL_RCC_ClockConfig+0x2c6>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	2b08      	cmp	r3, #8
 8004706:	d020      	beq.n	800474a <HAL_RCC_ClockConfig+0x2c6>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	2b09      	cmp	r3, #9
 800470e:	d01c      	beq.n	800474a <HAL_RCC_ClockConfig+0x2c6>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	2b0a      	cmp	r3, #10
 8004716:	d018      	beq.n	800474a <HAL_RCC_ClockConfig+0x2c6>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	2b0b      	cmp	r3, #11
 800471e:	d014      	beq.n	800474a <HAL_RCC_ClockConfig+0x2c6>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	2b0c      	cmp	r3, #12
 8004726:	d010      	beq.n	800474a <HAL_RCC_ClockConfig+0x2c6>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	2b0d      	cmp	r3, #13
 800472e:	d00c      	beq.n	800474a <HAL_RCC_ClockConfig+0x2c6>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	2b0e      	cmp	r3, #14
 8004736:	d008      	beq.n	800474a <HAL_RCC_ClockConfig+0x2c6>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	2b0f      	cmp	r3, #15
 800473e:	d004      	beq.n	800474a <HAL_RCC_ClockConfig+0x2c6>
 8004740:	f44f 7179 	mov.w	r1, #996	; 0x3e4
 8004744:	4823      	ldr	r0, [pc, #140]	; (80047d4 <HAL_RCC_ClockConfig+0x350>)
 8004746:	f7fc fa62 	bl	8000c0e <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800474a:	4b21      	ldr	r3, [pc, #132]	; (80047d0 <HAL_RCC_ClockConfig+0x34c>)
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f023 020f 	bic.w	r2, r3, #15
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	491e      	ldr	r1, [pc, #120]	; (80047d0 <HAL_RCC_ClockConfig+0x34c>)
 8004758:	4313      	orrs	r3, r2
 800475a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 80a2 	beq.w	80048ae <HAL_RCC_ClockConfig+0x42a>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d032      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x354>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800477a:	d02d      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x354>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004784:	d028      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x354>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800478e:	d023      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x354>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004798:	d01e      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x354>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047a2:	d019      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x354>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80047ac:	d014      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x354>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80047b6:	d00f      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x354>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80047c0:	d00a      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x354>
 80047c2:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 80047c6:	4803      	ldr	r0, [pc, #12]	; (80047d4 <HAL_RCC_ClockConfig+0x350>)
 80047c8:	f7fc fa21 	bl	8000c0e <assert_failed>
 80047cc:	e004      	b.n	80047d8 <HAL_RCC_ClockConfig+0x354>
 80047ce:	bf00      	nop
 80047d0:	58024400 	.word	0x58024400
 80047d4:	0801834c 	.word	0x0801834c
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d010      	beq.n	8004802 <HAL_RCC_ClockConfig+0x37e>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00c      	beq.n	8004802 <HAL_RCC_ClockConfig+0x37e>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d008      	beq.n	8004802 <HAL_RCC_ClockConfig+0x37e>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b03      	cmp	r3, #3
 80047f6:	d004      	beq.n	8004802 <HAL_RCC_ClockConfig+0x37e>
 80047f8:	f240 31f5 	movw	r1, #1013	; 0x3f5
 80047fc:	4858      	ldr	r0, [pc, #352]	; (8004960 <HAL_RCC_ClockConfig+0x4dc>)
 80047fe:	f7fc fa06 	bl	8000c0e <assert_failed>
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004802:	4b58      	ldr	r3, [pc, #352]	; (8004964 <HAL_RCC_ClockConfig+0x4e0>)
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	4955      	ldr	r1, [pc, #340]	; (8004964 <HAL_RCC_ClockConfig+0x4e0>)
 8004810:	4313      	orrs	r3, r2
 8004812:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2b02      	cmp	r3, #2
 800481a:	d107      	bne.n	800482c <HAL_RCC_ClockConfig+0x3a8>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800481c:	4b51      	ldr	r3, [pc, #324]	; (8004964 <HAL_RCC_ClockConfig+0x4e0>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d121      	bne.n	800486c <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e18a      	b.n	8004b42 <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2b03      	cmp	r3, #3
 8004832:	d107      	bne.n	8004844 <HAL_RCC_ClockConfig+0x3c0>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004834:	4b4b      	ldr	r3, [pc, #300]	; (8004964 <HAL_RCC_ClockConfig+0x4e0>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d115      	bne.n	800486c <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e17e      	b.n	8004b42 <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d107      	bne.n	800485c <HAL_RCC_ClockConfig+0x3d8>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800484c:	4b45      	ldr	r3, [pc, #276]	; (8004964 <HAL_RCC_ClockConfig+0x4e0>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004854:	2b00      	cmp	r3, #0
 8004856:	d109      	bne.n	800486c <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e172      	b.n	8004b42 <HAL_RCC_ClockConfig+0x6be>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800485c:	4b41      	ldr	r3, [pc, #260]	; (8004964 <HAL_RCC_ClockConfig+0x4e0>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e16a      	b.n	8004b42 <HAL_RCC_ClockConfig+0x6be>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800486c:	4b3d      	ldr	r3, [pc, #244]	; (8004964 <HAL_RCC_ClockConfig+0x4e0>)
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	f023 0207 	bic.w	r2, r3, #7
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	493a      	ldr	r1, [pc, #232]	; (8004964 <HAL_RCC_ClockConfig+0x4e0>)
 800487a:	4313      	orrs	r3, r2
 800487c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487e:	f7fc fddd 	bl	800143c <HAL_GetTick>
 8004882:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004884:	e00a      	b.n	800489c <HAL_RCC_ClockConfig+0x418>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004886:	f7fc fdd9 	bl	800143c <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	f241 3288 	movw	r2, #5000	; 0x1388
 8004894:	4293      	cmp	r3, r2
 8004896:	d901      	bls.n	800489c <HAL_RCC_ClockConfig+0x418>
          {
            return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e152      	b.n	8004b42 <HAL_RCC_ClockConfig+0x6be>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489c:	4b31      	ldr	r3, [pc, #196]	; (8004964 <HAL_RCC_ClockConfig+0x4e0>)
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d1eb      	bne.n	8004886 <HAL_RCC_ClockConfig+0x402>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d039      	beq.n	800492e <HAL_RCC_ClockConfig+0x4aa>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	4b29      	ldr	r3, [pc, #164]	; (8004964 <HAL_RCC_ClockConfig+0x4e0>)
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d231      	bcs.n	800492e <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d024      	beq.n	800491c <HAL_RCC_ClockConfig+0x498>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d020      	beq.n	800491c <HAL_RCC_ClockConfig+0x498>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	2b09      	cmp	r3, #9
 80048e0:	d01c      	beq.n	800491c <HAL_RCC_ClockConfig+0x498>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	2b0a      	cmp	r3, #10
 80048e8:	d018      	beq.n	800491c <HAL_RCC_ClockConfig+0x498>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	2b0b      	cmp	r3, #11
 80048f0:	d014      	beq.n	800491c <HAL_RCC_ClockConfig+0x498>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	2b0c      	cmp	r3, #12
 80048f8:	d010      	beq.n	800491c <HAL_RCC_ClockConfig+0x498>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	2b0d      	cmp	r3, #13
 8004900:	d00c      	beq.n	800491c <HAL_RCC_ClockConfig+0x498>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	2b0e      	cmp	r3, #14
 8004908:	d008      	beq.n	800491c <HAL_RCC_ClockConfig+0x498>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	2b0f      	cmp	r3, #15
 8004910:	d004      	beq.n	800491c <HAL_RCC_ClockConfig+0x498>
 8004912:	f240 4136 	movw	r1, #1078	; 0x436
 8004916:	4812      	ldr	r0, [pc, #72]	; (8004960 <HAL_RCC_ClockConfig+0x4dc>)
 8004918:	f7fc f979 	bl	8000c0e <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800491c:	4b11      	ldr	r3, [pc, #68]	; (8004964 <HAL_RCC_ClockConfig+0x4e0>)
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	f023 020f 	bic.w	r2, r3, #15
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	490e      	ldr	r1, [pc, #56]	; (8004964 <HAL_RCC_ClockConfig+0x4e0>)
 800492a:	4313      	orrs	r3, r2
 800492c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800492e:	4b0e      	ldr	r3, [pc, #56]	; (8004968 <HAL_RCC_ClockConfig+0x4e4>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d217      	bcs.n	800496c <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <HAL_RCC_ClockConfig+0x4e4>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f023 020f 	bic.w	r2, r3, #15
 8004944:	4908      	ldr	r1, [pc, #32]	; (8004968 <HAL_RCC_ClockConfig+0x4e4>)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	4313      	orrs	r3, r2
 800494a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800494c:	4b06      	ldr	r3, [pc, #24]	; (8004968 <HAL_RCC_ClockConfig+0x4e4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d008      	beq.n	800496c <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e0f1      	b.n	8004b42 <HAL_RCC_ClockConfig+0x6be>
 800495e:	bf00      	nop
 8004960:	0801834c 	.word	0x0801834c
 8004964:	58024400 	.word	0x58024400
 8004968:	52002000 	.word	0x52002000
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d029      	beq.n	80049cc <HAL_RCC_ClockConfig+0x548>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	4b73      	ldr	r3, [pc, #460]	; (8004b4c <HAL_RCC_ClockConfig+0x6c8>)
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004984:	429a      	cmp	r2, r3
 8004986:	d221      	bcs.n	80049cc <HAL_RCC_ClockConfig+0x548>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d014      	beq.n	80049ba <HAL_RCC_ClockConfig+0x536>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	2b40      	cmp	r3, #64	; 0x40
 8004996:	d010      	beq.n	80049ba <HAL_RCC_ClockConfig+0x536>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	2b50      	cmp	r3, #80	; 0x50
 800499e:	d00c      	beq.n	80049ba <HAL_RCC_ClockConfig+0x536>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	2b60      	cmp	r3, #96	; 0x60
 80049a6:	d008      	beq.n	80049ba <HAL_RCC_ClockConfig+0x536>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	2b70      	cmp	r3, #112	; 0x70
 80049ae:	d004      	beq.n	80049ba <HAL_RCC_ClockConfig+0x536>
 80049b0:	f240 4157 	movw	r1, #1111	; 0x457
 80049b4:	4866      	ldr	r0, [pc, #408]	; (8004b50 <HAL_RCC_ClockConfig+0x6cc>)
 80049b6:	f7fc f92a 	bl	8000c0e <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049ba:	4b64      	ldr	r3, [pc, #400]	; (8004b4c <HAL_RCC_ClockConfig+0x6c8>)
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	4961      	ldr	r1, [pc, #388]	; (8004b4c <HAL_RCC_ClockConfig+0x6c8>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d029      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x5a8>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	695a      	ldr	r2, [r3, #20]
 80049dc:	4b5b      	ldr	r3, [pc, #364]	; (8004b4c <HAL_RCC_ClockConfig+0x6c8>)
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d221      	bcs.n	8004a2c <HAL_RCC_ClockConfig+0x5a8>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d014      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x596>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	2b40      	cmp	r3, #64	; 0x40
 80049f6:	d010      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x596>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	2b50      	cmp	r3, #80	; 0x50
 80049fe:	d00c      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x596>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	2b60      	cmp	r3, #96	; 0x60
 8004a06:	d008      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x596>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	2b70      	cmp	r3, #112	; 0x70
 8004a0e:	d004      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x596>
 8004a10:	f240 4169 	movw	r1, #1129	; 0x469
 8004a14:	484e      	ldr	r0, [pc, #312]	; (8004b50 <HAL_RCC_ClockConfig+0x6cc>)
 8004a16:	f7fc f8fa 	bl	8000c0e <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a1a:	4b4c      	ldr	r3, [pc, #304]	; (8004b4c <HAL_RCC_ClockConfig+0x6c8>)
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	4949      	ldr	r1, [pc, #292]	; (8004b4c <HAL_RCC_ClockConfig+0x6c8>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d02d      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x610>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699a      	ldr	r2, [r3, #24]
 8004a3c:	4b43      	ldr	r3, [pc, #268]	; (8004b4c <HAL_RCC_ClockConfig+0x6c8>)
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d225      	bcs.n	8004a94 <HAL_RCC_ClockConfig+0x610>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d018      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x5fe>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a58:	d013      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x5fe>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004a62:	d00e      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x5fe>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a6c:	d009      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x5fe>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a76:	d004      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x5fe>
 8004a78:	f240 417b 	movw	r1, #1147	; 0x47b
 8004a7c:	4834      	ldr	r0, [pc, #208]	; (8004b50 <HAL_RCC_ClockConfig+0x6cc>)
 8004a7e:	f7fc f8c6 	bl	8000c0e <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a82:	4b32      	ldr	r3, [pc, #200]	; (8004b4c <HAL_RCC_ClockConfig+0x6c8>)
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	492f      	ldr	r1, [pc, #188]	; (8004b4c <HAL_RCC_ClockConfig+0x6c8>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d029      	beq.n	8004af4 <HAL_RCC_ClockConfig+0x670>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69da      	ldr	r2, [r3, #28]
 8004aa4:	4b29      	ldr	r3, [pc, #164]	; (8004b4c <HAL_RCC_ClockConfig+0x6c8>)
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d221      	bcs.n	8004af4 <HAL_RCC_ClockConfig+0x670>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d014      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x65e>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	2b40      	cmp	r3, #64	; 0x40
 8004abe:	d010      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x65e>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	2b50      	cmp	r3, #80	; 0x50
 8004ac6:	d00c      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x65e>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	69db      	ldr	r3, [r3, #28]
 8004acc:	2b60      	cmp	r3, #96	; 0x60
 8004ace:	d008      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x65e>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	2b70      	cmp	r3, #112	; 0x70
 8004ad6:	d004      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x65e>
 8004ad8:	f240 418d 	movw	r1, #1165	; 0x48d
 8004adc:	481c      	ldr	r0, [pc, #112]	; (8004b50 <HAL_RCC_ClockConfig+0x6cc>)
 8004ade:	f7fc f896 	bl	8000c0e <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004ae2:	4b1a      	ldr	r3, [pc, #104]	; (8004b4c <HAL_RCC_ClockConfig+0x6c8>)
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	4917      	ldr	r1, [pc, #92]	; (8004b4c <HAL_RCC_ClockConfig+0x6c8>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004af4:	f000 f836 	bl	8004b64 <HAL_RCC_GetSysClockFreq>
 8004af8:	4601      	mov	r1, r0
 8004afa:	4b14      	ldr	r3, [pc, #80]	; (8004b4c <HAL_RCC_ClockConfig+0x6c8>)
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	0a1b      	lsrs	r3, r3, #8
 8004b00:	f003 030f 	and.w	r3, r3, #15
 8004b04:	4a13      	ldr	r2, [pc, #76]	; (8004b54 <HAL_RCC_ClockConfig+0x6d0>)
 8004b06:	5cd3      	ldrb	r3, [r2, r3]
 8004b08:	f003 031f 	and.w	r3, r3, #31
 8004b0c:	fa21 f303 	lsr.w	r3, r1, r3
 8004b10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b12:	4b0e      	ldr	r3, [pc, #56]	; (8004b4c <HAL_RCC_ClockConfig+0x6c8>)
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	4a0e      	ldr	r2, [pc, #56]	; (8004b54 <HAL_RCC_ClockConfig+0x6d0>)
 8004b1c:	5cd3      	ldrb	r3, [r2, r3]
 8004b1e:	f003 031f 	and.w	r3, r3, #31
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	fa22 f303 	lsr.w	r3, r2, r3
 8004b28:	4a0b      	ldr	r2, [pc, #44]	; (8004b58 <HAL_RCC_ClockConfig+0x6d4>)
 8004b2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b2c:	4a0b      	ldr	r2, [pc, #44]	; (8004b5c <HAL_RCC_ClockConfig+0x6d8>)
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004b32:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <HAL_RCC_ClockConfig+0x6dc>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fc f892 	bl	8000c60 <HAL_InitTick>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	58024400 	.word	0x58024400
 8004b50:	0801834c 	.word	0x0801834c
 8004b54:	0801a270 	.word	0x0801a270
 8004b58:	24000004 	.word	0x24000004
 8004b5c:	24000000 	.word	0x24000000
 8004b60:	24000008 	.word	0x24000008

08004b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b089      	sub	sp, #36	; 0x24
 8004b68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b6a:	4baf      	ldr	r3, [pc, #700]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b72:	2b18      	cmp	r3, #24
 8004b74:	f200 814e 	bhi.w	8004e14 <HAL_RCC_GetSysClockFreq+0x2b0>
 8004b78:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7e:	bf00      	nop
 8004b80:	08004be5 	.word	0x08004be5
 8004b84:	08004e15 	.word	0x08004e15
 8004b88:	08004e15 	.word	0x08004e15
 8004b8c:	08004e15 	.word	0x08004e15
 8004b90:	08004e15 	.word	0x08004e15
 8004b94:	08004e15 	.word	0x08004e15
 8004b98:	08004e15 	.word	0x08004e15
 8004b9c:	08004e15 	.word	0x08004e15
 8004ba0:	08004c0b 	.word	0x08004c0b
 8004ba4:	08004e15 	.word	0x08004e15
 8004ba8:	08004e15 	.word	0x08004e15
 8004bac:	08004e15 	.word	0x08004e15
 8004bb0:	08004e15 	.word	0x08004e15
 8004bb4:	08004e15 	.word	0x08004e15
 8004bb8:	08004e15 	.word	0x08004e15
 8004bbc:	08004e15 	.word	0x08004e15
 8004bc0:	08004c11 	.word	0x08004c11
 8004bc4:	08004e15 	.word	0x08004e15
 8004bc8:	08004e15 	.word	0x08004e15
 8004bcc:	08004e15 	.word	0x08004e15
 8004bd0:	08004e15 	.word	0x08004e15
 8004bd4:	08004e15 	.word	0x08004e15
 8004bd8:	08004e15 	.word	0x08004e15
 8004bdc:	08004e15 	.word	0x08004e15
 8004be0:	08004c17 	.word	0x08004c17
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004be4:	4b90      	ldr	r3, [pc, #576]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0320 	and.w	r3, r3, #32
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d009      	beq.n	8004c04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bf0:	4b8d      	ldr	r3, [pc, #564]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	08db      	lsrs	r3, r3, #3
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	4a8c      	ldr	r2, [pc, #560]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004c00:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004c02:	e10a      	b.n	8004e1a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004c04:	4b89      	ldr	r3, [pc, #548]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004c06:	61bb      	str	r3, [r7, #24]
    break;
 8004c08:	e107      	b.n	8004e1a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004c0a:	4b89      	ldr	r3, [pc, #548]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004c0c:	61bb      	str	r3, [r7, #24]
    break;
 8004c0e:	e104      	b.n	8004e1a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004c10:	4b88      	ldr	r3, [pc, #544]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004c12:	61bb      	str	r3, [r7, #24]
    break;
 8004c14:	e101      	b.n	8004e1a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c16:	4b84      	ldr	r3, [pc, #528]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004c20:	4b81      	ldr	r3, [pc, #516]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c24:	091b      	lsrs	r3, r3, #4
 8004c26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c2a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004c2c:	4b7e      	ldr	r3, [pc, #504]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004c36:	4b7c      	ldr	r3, [pc, #496]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3a:	08db      	lsrs	r3, r3, #3
 8004c3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	fb02 f303 	mul.w	r3, r2, r3
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80da 	beq.w	8004e0e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d05a      	beq.n	8004d16 <HAL_RCC_GetSysClockFreq+0x1b2>
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d302      	bcc.n	8004c6a <HAL_RCC_GetSysClockFreq+0x106>
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d078      	beq.n	8004d5a <HAL_RCC_GetSysClockFreq+0x1f6>
 8004c68:	e099      	b.n	8004d9e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c6a:	4b6f      	ldr	r3, [pc, #444]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d02d      	beq.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c76:	4b6c      	ldr	r3, [pc, #432]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	08db      	lsrs	r3, r3, #3
 8004c7c:	f003 0303 	and.w	r3, r3, #3
 8004c80:	4a6a      	ldr	r2, [pc, #424]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004c82:	fa22 f303 	lsr.w	r3, r2, r3
 8004c86:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	ee07 3a90 	vmov	s15, r3
 8004c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	ee07 3a90 	vmov	s15, r3
 8004c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ca0:	4b61      	ldr	r3, [pc, #388]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca8:	ee07 3a90 	vmov	s15, r3
 8004cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cb4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004e38 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004cb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ccc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004cd0:	e087      	b.n	8004de2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	ee07 3a90 	vmov	s15, r3
 8004cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cdc:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004e3c <HAL_RCC_GetSysClockFreq+0x2d8>
 8004ce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ce4:	4b50      	ldr	r3, [pc, #320]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cec:	ee07 3a90 	vmov	s15, r3
 8004cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cf4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cf8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004e38 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004cfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d14:	e065      	b.n	8004de2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	ee07 3a90 	vmov	s15, r3
 8004d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d20:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004e40 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004d24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d28:	4b3f      	ldr	r3, [pc, #252]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d30:	ee07 3a90 	vmov	s15, r3
 8004d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d38:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d3c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004e38 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004d40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d58:	e043      	b.n	8004de2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	ee07 3a90 	vmov	s15, r3
 8004d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d64:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004e44 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004d68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d6c:	4b2e      	ldr	r3, [pc, #184]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d74:	ee07 3a90 	vmov	s15, r3
 8004d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d80:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004e38 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004d84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d9c:	e021      	b.n	8004de2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	ee07 3a90 	vmov	s15, r3
 8004da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004e40 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004db0:	4b1d      	ldr	r3, [pc, #116]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db8:	ee07 3a90 	vmov	s15, r3
 8004dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dc4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004e38 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ddc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004de0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004de2:	4b11      	ldr	r3, [pc, #68]	; (8004e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de6:	0a5b      	lsrs	r3, r3, #9
 8004de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dec:	3301      	adds	r3, #1
 8004dee:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	ee07 3a90 	vmov	s15, r3
 8004df6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004dfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e06:	ee17 3a90 	vmov	r3, s15
 8004e0a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004e0c:	e005      	b.n	8004e1a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61bb      	str	r3, [r7, #24]
    break;
 8004e12:	e002      	b.n	8004e1a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004e14:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004e16:	61bb      	str	r3, [r7, #24]
    break;
 8004e18:	bf00      	nop
  }

  return sysclockfreq;
 8004e1a:	69bb      	ldr	r3, [r7, #24]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3724      	adds	r7, #36	; 0x24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	58024400 	.word	0x58024400
 8004e2c:	03d09000 	.word	0x03d09000
 8004e30:	003d0900 	.word	0x003d0900
 8004e34:	007a1200 	.word	0x007a1200
 8004e38:	46000000 	.word	0x46000000
 8004e3c:	4c742400 	.word	0x4c742400
 8004e40:	4a742400 	.word	0x4a742400
 8004e44:	4af42400 	.word	0x4af42400

08004e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004e4e:	f7ff fe89 	bl	8004b64 <HAL_RCC_GetSysClockFreq>
 8004e52:	4601      	mov	r1, r0
 8004e54:	4b10      	ldr	r3, [pc, #64]	; (8004e98 <HAL_RCC_GetHCLKFreq+0x50>)
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	0a1b      	lsrs	r3, r3, #8
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	4a0f      	ldr	r2, [pc, #60]	; (8004e9c <HAL_RCC_GetHCLKFreq+0x54>)
 8004e60:	5cd3      	ldrb	r3, [r2, r3]
 8004e62:	f003 031f 	and.w	r3, r3, #31
 8004e66:	fa21 f303 	lsr.w	r3, r1, r3
 8004e6a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <HAL_RCC_GetHCLKFreq+0x50>)
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	f003 030f 	and.w	r3, r3, #15
 8004e74:	4a09      	ldr	r2, [pc, #36]	; (8004e9c <HAL_RCC_GetHCLKFreq+0x54>)
 8004e76:	5cd3      	ldrb	r3, [r2, r3]
 8004e78:	f003 031f 	and.w	r3, r3, #31
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e82:	4a07      	ldr	r2, [pc, #28]	; (8004ea0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004e84:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e86:	4a07      	ldr	r2, [pc, #28]	; (8004ea4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004e8c:	4b04      	ldr	r3, [pc, #16]	; (8004ea0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	58024400 	.word	0x58024400
 8004e9c:	0801a270 	.word	0x0801a270
 8004ea0:	24000004 	.word	0x24000004
 8004ea4:	24000000 	.word	0x24000000

08004ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004eac:	f7ff ffcc 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 8004eb0:	4601      	mov	r1, r0
 8004eb2:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	091b      	lsrs	r3, r3, #4
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	4a04      	ldr	r2, [pc, #16]	; (8004ed0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ebe:	5cd3      	ldrb	r3, [r2, r3]
 8004ec0:	f003 031f 	and.w	r3, r3, #31
 8004ec4:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	58024400 	.word	0x58024400
 8004ed0:	0801a270 	.word	0x0801a270

08004ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004ed8:	f7ff ffb6 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 8004edc:	4601      	mov	r1, r0
 8004ede:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	0a1b      	lsrs	r3, r3, #8
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	4a04      	ldr	r2, [pc, #16]	; (8004efc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004eea:	5cd3      	ldrb	r3, [r2, r3]
 8004eec:	f003 031f 	and.w	r3, r3, #31
 8004ef0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	58024400 	.word	0x58024400
 8004efc:	0801a270 	.word	0x0801a270

08004f00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	223f      	movs	r2, #63	; 0x3f
 8004f0e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f10:	4b1a      	ldr	r3, [pc, #104]	; (8004f7c <HAL_RCC_GetClockConfig+0x7c>)
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	f003 0207 	and.w	r2, r3, #7
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004f1c:	4b17      	ldr	r3, [pc, #92]	; (8004f7c <HAL_RCC_GetClockConfig+0x7c>)
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004f28:	4b14      	ldr	r3, [pc, #80]	; (8004f7c <HAL_RCC_GetClockConfig+0x7c>)
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	f003 020f 	and.w	r2, r3, #15
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004f34:	4b11      	ldr	r3, [pc, #68]	; (8004f7c <HAL_RCC_GetClockConfig+0x7c>)
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004f40:	4b0e      	ldr	r3, [pc, #56]	; (8004f7c <HAL_RCC_GetClockConfig+0x7c>)
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	; (8004f7c <HAL_RCC_GetClockConfig+0x7c>)
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004f58:	4b08      	ldr	r3, [pc, #32]	; (8004f7c <HAL_RCC_GetClockConfig+0x7c>)
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f64:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <HAL_RCC_GetClockConfig+0x80>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 020f 	and.w	r2, r3, #15
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	601a      	str	r2, [r3, #0]
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	58024400 	.word	0x58024400
 8004f80:	52002000 	.word	0x52002000

08004f84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f90:	2300      	movs	r3, #0
 8004f92:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d03d      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fa8:	d013      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004faa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fae:	d802      	bhi.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d007      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004fb4:	e01f      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004fb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fba:	d013      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004fbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004fc0:	d01c      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004fc2:	e018      	b.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fc4:	4baf      	ldr	r3, [pc, #700]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	4aae      	ldr	r2, [pc, #696]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004fd0:	e015      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	2102      	movs	r1, #2
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f001 fc01 	bl	80067e0 <RCCEx_PLL2_Config>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004fe2:	e00c      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3324      	adds	r3, #36	; 0x24
 8004fe8:	2102      	movs	r1, #2
 8004fea:	4618      	mov	r0, r3
 8004fec:	f001 fd1a 	bl	8006a24 <RCCEx_PLL3_Config>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004ff4:	e003      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	75fb      	strb	r3, [r7, #23]
      break;
 8004ffa:	e000      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ffe:	7dfb      	ldrb	r3, [r7, #23]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d109      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005004:	4b9f      	ldr	r3, [pc, #636]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005008:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005010:	499c      	ldr	r1, [pc, #624]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005012:	4313      	orrs	r3, r2
 8005014:	650b      	str	r3, [r1, #80]	; 0x50
 8005016:	e001      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005018:	7dfb      	ldrb	r3, [r7, #23]
 800501a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005024:	2b00      	cmp	r3, #0
 8005026:	d03d      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502c:	2b04      	cmp	r3, #4
 800502e:	d826      	bhi.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8005030:	a201      	add	r2, pc, #4	; (adr r2, 8005038 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8005032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005036:	bf00      	nop
 8005038:	0800504d 	.word	0x0800504d
 800503c:	0800505b 	.word	0x0800505b
 8005040:	0800506d 	.word	0x0800506d
 8005044:	08005085 	.word	0x08005085
 8005048:	08005085 	.word	0x08005085
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800504c:	4b8d      	ldr	r3, [pc, #564]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800504e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005050:	4a8c      	ldr	r2, [pc, #560]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005056:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005058:	e015      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3304      	adds	r3, #4
 800505e:	2100      	movs	r1, #0
 8005060:	4618      	mov	r0, r3
 8005062:	f001 fbbd 	bl	80067e0 <RCCEx_PLL2_Config>
 8005066:	4603      	mov	r3, r0
 8005068:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800506a:	e00c      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3324      	adds	r3, #36	; 0x24
 8005070:	2100      	movs	r1, #0
 8005072:	4618      	mov	r0, r3
 8005074:	f001 fcd6 	bl	8006a24 <RCCEx_PLL3_Config>
 8005078:	4603      	mov	r3, r0
 800507a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800507c:	e003      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	75fb      	strb	r3, [r7, #23]
      break;
 8005082:	e000      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8005084:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005086:	7dfb      	ldrb	r3, [r7, #23]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d109      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800508c:	4b7d      	ldr	r3, [pc, #500]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800508e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005090:	f023 0207 	bic.w	r2, r3, #7
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005098:	497a      	ldr	r1, [pc, #488]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800509a:	4313      	orrs	r3, r2
 800509c:	650b      	str	r3, [r1, #80]	; 0x50
 800509e:	e001      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
 80050a2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d03e      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b4:	2b80      	cmp	r3, #128	; 0x80
 80050b6:	d01c      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80050b8:	2b80      	cmp	r3, #128	; 0x80
 80050ba:	d804      	bhi.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d008      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80050c0:	2b40      	cmp	r3, #64	; 0x40
 80050c2:	d00d      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80050c4:	e01e      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80050c6:	2bc0      	cmp	r3, #192	; 0xc0
 80050c8:	d01f      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80050ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ce:	d01e      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80050d0:	e018      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050d2:	4b6c      	ldr	r3, [pc, #432]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d6:	4a6b      	ldr	r2, [pc, #428]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80050de:	e017      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3304      	adds	r3, #4
 80050e4:	2100      	movs	r1, #0
 80050e6:	4618      	mov	r0, r3
 80050e8:	f001 fb7a 	bl	80067e0 <RCCEx_PLL2_Config>
 80050ec:	4603      	mov	r3, r0
 80050ee:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80050f0:	e00e      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	3324      	adds	r3, #36	; 0x24
 80050f6:	2100      	movs	r1, #0
 80050f8:	4618      	mov	r0, r3
 80050fa:	f001 fc93 	bl	8006a24 <RCCEx_PLL3_Config>
 80050fe:	4603      	mov	r3, r0
 8005100:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005102:	e005      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	75fb      	strb	r3, [r7, #23]
      break;
 8005108:	e002      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800510a:	bf00      	nop
 800510c:	e000      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800510e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005110:	7dfb      	ldrb	r3, [r7, #23]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d109      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005116:	4b5b      	ldr	r3, [pc, #364]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800511a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005122:	4958      	ldr	r1, [pc, #352]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005124:	4313      	orrs	r3, r2
 8005126:	650b      	str	r3, [r1, #80]	; 0x50
 8005128:	e001      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512a:	7dfb      	ldrb	r3, [r7, #23]
 800512c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005136:	2b00      	cmp	r3, #0
 8005138:	d044      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005144:	d01f      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005146:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800514a:	d805      	bhi.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00a      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005150:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005154:	d00e      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8005156:	e01f      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8005158:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800515c:	d01f      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800515e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005162:	d01e      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005164:	e018      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005166:	4b47      	ldr	r3, [pc, #284]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516a:	4a46      	ldr	r2, [pc, #280]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800516c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005170:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005172:	e017      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3304      	adds	r3, #4
 8005178:	2100      	movs	r1, #0
 800517a:	4618      	mov	r0, r3
 800517c:	f001 fb30 	bl	80067e0 <RCCEx_PLL2_Config>
 8005180:	4603      	mov	r3, r0
 8005182:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005184:	e00e      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3324      	adds	r3, #36	; 0x24
 800518a:	2100      	movs	r1, #0
 800518c:	4618      	mov	r0, r3
 800518e:	f001 fc49 	bl	8006a24 <RCCEx_PLL3_Config>
 8005192:	4603      	mov	r3, r0
 8005194:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005196:	e005      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	75fb      	strb	r3, [r7, #23]
      break;
 800519c:	e002      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800519e:	bf00      	nop
 80051a0:	e000      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80051a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051a4:	7dfb      	ldrb	r3, [r7, #23]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10a      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80051aa:	4b36      	ldr	r3, [pc, #216]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ae:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80051b8:	4932      	ldr	r1, [pc, #200]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	658b      	str	r3, [r1, #88]	; 0x58
 80051be:	e001      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c0:	7dfb      	ldrb	r3, [r7, #23]
 80051c2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d044      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80051d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051da:	d01f      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x298>
 80051dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051e0:	d805      	bhi.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x278>
 80051e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051ea:	d00e      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80051ec:	e01f      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80051ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051f2:	d01f      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80051f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051f8:	d01e      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80051fa:	e018      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051fc:	4b21      	ldr	r3, [pc, #132]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80051fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005200:	4a20      	ldr	r2, [pc, #128]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005206:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005208:	e017      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	3304      	adds	r3, #4
 800520e:	2100      	movs	r1, #0
 8005210:	4618      	mov	r0, r3
 8005212:	f001 fae5 	bl	80067e0 <RCCEx_PLL2_Config>
 8005216:	4603      	mov	r3, r0
 8005218:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800521a:	e00e      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3324      	adds	r3, #36	; 0x24
 8005220:	2100      	movs	r1, #0
 8005222:	4618      	mov	r0, r3
 8005224:	f001 fbfe 	bl	8006a24 <RCCEx_PLL3_Config>
 8005228:	4603      	mov	r3, r0
 800522a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800522c:	e005      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	75fb      	strb	r3, [r7, #23]
      break;
 8005232:	e002      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005234:	bf00      	nop
 8005236:	e000      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800523a:	7dfb      	ldrb	r3, [r7, #23]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005240:	4b10      	ldr	r3, [pc, #64]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005244:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800524e:	490d      	ldr	r1, [pc, #52]	; (8005284 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005250:	4313      	orrs	r3, r2
 8005252:	658b      	str	r3, [r1, #88]	; 0x58
 8005254:	e001      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005256:	7dfb      	ldrb	r3, [r7, #23]
 8005258:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d035      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800526a:	2b10      	cmp	r3, #16
 800526c:	d00c      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800526e:	2b10      	cmp	r3, #16
 8005270:	d802      	bhi.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8005272:	2b00      	cmp	r3, #0
 8005274:	d01b      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005276:	e017      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005278:	2b20      	cmp	r3, #32
 800527a:	d00c      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800527c:	2b30      	cmp	r3, #48	; 0x30
 800527e:	d018      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005280:	e012      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005282:	bf00      	nop
 8005284:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005288:	4baf      	ldr	r3, [pc, #700]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	4aae      	ldr	r2, [pc, #696]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800528e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005292:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005294:	e00e      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3304      	adds	r3, #4
 800529a:	2102      	movs	r1, #2
 800529c:	4618      	mov	r0, r3
 800529e:	f001 fa9f 	bl	80067e0 <RCCEx_PLL2_Config>
 80052a2:	4603      	mov	r3, r0
 80052a4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80052a6:	e005      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	75fb      	strb	r3, [r7, #23]
      break;
 80052ac:	e002      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80052ae:	bf00      	nop
 80052b0:	e000      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80052b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052b4:	7dfb      	ldrb	r3, [r7, #23]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d109      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80052ba:	4ba3      	ldr	r3, [pc, #652]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c6:	49a0      	ldr	r1, [pc, #640]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80052cc:	e001      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ce:	7dfb      	ldrb	r3, [r7, #23]
 80052d0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d042      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e6:	d01f      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80052e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ec:	d805      	bhi.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80052f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f6:	d00e      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80052f8:	e01f      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80052fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80052fe:	d01f      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005304:	d01e      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005306:	e018      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005308:	4b8f      	ldr	r3, [pc, #572]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	4a8e      	ldr	r2, [pc, #568]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800530e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005312:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005314:	e017      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3304      	adds	r3, #4
 800531a:	2100      	movs	r1, #0
 800531c:	4618      	mov	r0, r3
 800531e:	f001 fa5f 	bl	80067e0 <RCCEx_PLL2_Config>
 8005322:	4603      	mov	r3, r0
 8005324:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005326:	e00e      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3324      	adds	r3, #36	; 0x24
 800532c:	2100      	movs	r1, #0
 800532e:	4618      	mov	r0, r3
 8005330:	f001 fb78 	bl	8006a24 <RCCEx_PLL3_Config>
 8005334:	4603      	mov	r3, r0
 8005336:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005338:	e005      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	75fb      	strb	r3, [r7, #23]
      break;
 800533e:	e002      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005340:	bf00      	nop
 8005342:	e000      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005344:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005346:	7dfb      	ldrb	r3, [r7, #23]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d109      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800534c:	4b7e      	ldr	r3, [pc, #504]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800534e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005350:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005358:	497b      	ldr	r1, [pc, #492]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800535a:	4313      	orrs	r3, r2
 800535c:	650b      	str	r3, [r1, #80]	; 0x50
 800535e:	e001      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005360:	7dfb      	ldrb	r3, [r7, #23]
 8005362:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d042      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005374:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005378:	d01b      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800537a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800537e:	d805      	bhi.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005380:	2b00      	cmp	r3, #0
 8005382:	d022      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005388:	d00a      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800538a:	e01b      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800538c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005390:	d01d      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8005392:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005396:	d01c      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005398:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800539c:	d01b      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800539e:	e011      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3304      	adds	r3, #4
 80053a4:	2101      	movs	r1, #1
 80053a6:	4618      	mov	r0, r3
 80053a8:	f001 fa1a 	bl	80067e0 <RCCEx_PLL2_Config>
 80053ac:	4603      	mov	r3, r0
 80053ae:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80053b0:	e012      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	3324      	adds	r3, #36	; 0x24
 80053b6:	2101      	movs	r1, #1
 80053b8:	4618      	mov	r0, r3
 80053ba:	f001 fb33 	bl	8006a24 <RCCEx_PLL3_Config>
 80053be:	4603      	mov	r3, r0
 80053c0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80053c2:	e009      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	75fb      	strb	r3, [r7, #23]
      break;
 80053c8:	e006      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80053ca:	bf00      	nop
 80053cc:	e004      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80053ce:	bf00      	nop
 80053d0:	e002      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80053d2:	bf00      	nop
 80053d4:	e000      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80053d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053d8:	7dfb      	ldrb	r3, [r7, #23]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d109      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80053de:	4b5a      	ldr	r3, [pc, #360]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ea:	4957      	ldr	r1, [pc, #348]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	650b      	str	r3, [r1, #80]	; 0x50
 80053f0:	e001      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f2:	7dfb      	ldrb	r3, [r7, #23]
 80053f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d044      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800540c:	d01b      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800540e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005412:	d805      	bhi.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005414:	2b00      	cmp	r3, #0
 8005416:	d022      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005418:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800541c:	d00a      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800541e:	e01b      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005424:	d01d      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005426:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800542a:	d01c      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800542c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005430:	d01b      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005432:	e011      	b.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	3304      	adds	r3, #4
 8005438:	2101      	movs	r1, #1
 800543a:	4618      	mov	r0, r3
 800543c:	f001 f9d0 	bl	80067e0 <RCCEx_PLL2_Config>
 8005440:	4603      	mov	r3, r0
 8005442:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005444:	e012      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3324      	adds	r3, #36	; 0x24
 800544a:	2101      	movs	r1, #1
 800544c:	4618      	mov	r0, r3
 800544e:	f001 fae9 	bl	8006a24 <RCCEx_PLL3_Config>
 8005452:	4603      	mov	r3, r0
 8005454:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005456:	e009      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	75fb      	strb	r3, [r7, #23]
      break;
 800545c:	e006      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800545e:	bf00      	nop
 8005460:	e004      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005462:	bf00      	nop
 8005464:	e002      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005466:	bf00      	nop
 8005468:	e000      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800546a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800546c:	7dfb      	ldrb	r3, [r7, #23]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10a      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005472:	4b35      	ldr	r3, [pc, #212]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005476:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005480:	4931      	ldr	r1, [pc, #196]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005482:	4313      	orrs	r3, r2
 8005484:	658b      	str	r3, [r1, #88]	; 0x58
 8005486:	e001      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005488:	7dfb      	ldrb	r3, [r7, #23]
 800548a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d02d      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800549c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054a0:	d005      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80054a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054a6:	d009      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x538>
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d013      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80054ac:	e00f      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ae:	4b26      	ldr	r3, [pc, #152]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b2:	4a25      	ldr	r2, [pc, #148]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80054ba:	e00c      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3304      	adds	r3, #4
 80054c0:	2101      	movs	r1, #1
 80054c2:	4618      	mov	r0, r3
 80054c4:	f001 f98c 	bl	80067e0 <RCCEx_PLL2_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80054cc:	e003      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	75fb      	strb	r3, [r7, #23]
      break;
 80054d2:	e000      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80054d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054d6:	7dfb      	ldrb	r3, [r7, #23]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d109      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80054dc:	4b1a      	ldr	r3, [pc, #104]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054e8:	4917      	ldr	r1, [pc, #92]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	650b      	str	r3, [r1, #80]	; 0x50
 80054ee:	e001      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f0:	7dfb      	ldrb	r3, [r7, #23]
 80054f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d037      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005504:	2b03      	cmp	r3, #3
 8005506:	d81b      	bhi.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005508:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800550a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550e:	bf00      	nop
 8005510:	0800554d 	.word	0x0800554d
 8005514:	08005521 	.word	0x08005521
 8005518:	0800552f 	.word	0x0800552f
 800551c:	0800554d 	.word	0x0800554d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005520:	4b09      	ldr	r3, [pc, #36]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	4a08      	ldr	r2, [pc, #32]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800552a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800552c:	e00f      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	3304      	adds	r3, #4
 8005532:	2102      	movs	r1, #2
 8005534:	4618      	mov	r0, r3
 8005536:	f001 f953 	bl	80067e0 <RCCEx_PLL2_Config>
 800553a:	4603      	mov	r3, r0
 800553c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800553e:	e006      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	75fb      	strb	r3, [r7, #23]
      break;
 8005544:	e003      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005546:	bf00      	nop
 8005548:	58024400 	.word	0x58024400
      break;
 800554c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800554e:	7dfb      	ldrb	r3, [r7, #23]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10b      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005554:	4b04      	ldr	r3, [pc, #16]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005558:	f023 0203 	bic.w	r2, r3, #3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005560:	4901      	ldr	r1, [pc, #4]	; (8005568 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005562:	4313      	orrs	r3, r2
 8005564:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005566:	e003      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8005568:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800556c:	7dfb      	ldrb	r3, [r7, #23]
 800556e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 829b 	beq.w	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005588:	f000 81a9 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005596:	f000 81a2 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055a0:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 80055a4:	f000 819b 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055ae:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 80055b2:	f000 8194 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055bc:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 80055c0:	f000 818d 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055ca:	f5b3 4fa6 	cmp.w	r3, #21248	; 0x5300
 80055ce:	f000 8186 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055d8:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 80055dc:	f000 817f 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055e6:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 80055ea:	f000 8178 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80055f4:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 80055f8:	f000 8171 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005602:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8005606:	f000 816a 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005610:	f5b3 4f23 	cmp.w	r3, #41728	; 0xa300
 8005614:	f000 8163 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800561e:	f5b3 4f33 	cmp.w	r3, #45824	; 0xb300
 8005622:	f000 815c 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800562c:	f5b3 4f43 	cmp.w	r3, #49920	; 0xc300
 8005630:	f000 8155 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800563a:	f5b3 4f53 	cmp.w	r3, #54016	; 0xd300
 800563e:	f000 814e 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005648:	f5b3 4f63 	cmp.w	r3, #58112	; 0xe300
 800564c:	f000 8147 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005656:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 800565a:	f000 8140 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005664:	4aa8      	ldr	r2, [pc, #672]	; (8005908 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005666:	4293      	cmp	r3, r2
 8005668:	f000 8139 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005672:	4aa6      	ldr	r2, [pc, #664]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8005674:	4293      	cmp	r3, r2
 8005676:	f000 8132 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005680:	4aa3      	ldr	r2, [pc, #652]	; (8005910 <HAL_RCCEx_PeriphCLKConfig+0x98c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	f000 812b 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800568e:	4aa1      	ldr	r2, [pc, #644]	; (8005914 <HAL_RCCEx_PeriphCLKConfig+0x990>)
 8005690:	4293      	cmp	r3, r2
 8005692:	f000 8124 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800569c:	4a9e      	ldr	r2, [pc, #632]	; (8005918 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	f000 811d 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056aa:	4a9c      	ldr	r2, [pc, #624]	; (800591c <HAL_RCCEx_PeriphCLKConfig+0x998>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	f000 8116 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056b8:	4a99      	ldr	r2, [pc, #612]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	f000 810f 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056c6:	4a97      	ldr	r2, [pc, #604]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	f000 8108 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056d4:	4a94      	ldr	r2, [pc, #592]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	f000 8101 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056e2:	4a92      	ldr	r2, [pc, #584]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	f000 80fa 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056f0:	4a8f      	ldr	r2, [pc, #572]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	f000 80f3 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056fe:	4a8d      	ldr	r2, [pc, #564]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x9b0>)
 8005700:	4293      	cmp	r3, r2
 8005702:	f000 80ec 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800570c:	4a8a      	ldr	r2, [pc, #552]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	f000 80e5 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800571a:	4a88      	ldr	r2, [pc, #544]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	f000 80de 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005728:	4a85      	ldr	r2, [pc, #532]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 800572a:	4293      	cmp	r3, r2
 800572c:	f000 80d7 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005736:	4a83      	ldr	r2, [pc, #524]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	f000 80d0 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005744:	4a80      	ldr	r2, [pc, #512]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8005746:	4293      	cmp	r3, r2
 8005748:	f000 80c9 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005752:	4a7e      	ldr	r2, [pc, #504]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	f000 80c2 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005760:	4a7b      	ldr	r2, [pc, #492]	; (8005950 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8005762:	4293      	cmp	r3, r2
 8005764:	f000 80bb 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800576e:	4a79      	ldr	r2, [pc, #484]	; (8005954 <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 8005770:	4293      	cmp	r3, r2
 8005772:	f000 80b4 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800577c:	4a76      	ldr	r2, [pc, #472]	; (8005958 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 800577e:	4293      	cmp	r3, r2
 8005780:	f000 80ad 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800578a:	4a74      	ldr	r2, [pc, #464]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 800578c:	4293      	cmp	r3, r2
 800578e:	f000 80a6 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005798:	4a71      	ldr	r2, [pc, #452]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 800579a:	4293      	cmp	r3, r2
 800579c:	f000 809f 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057a6:	4a6f      	ldr	r2, [pc, #444]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	f000 8098 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057b4:	4a6c      	ldr	r2, [pc, #432]	; (8005968 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	f000 8091 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057c2:	4a6a      	ldr	r2, [pc, #424]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	f000 808a 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057d0:	4a67      	ldr	r2, [pc, #412]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	f000 8083 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057de:	4a65      	ldr	r2, [pc, #404]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d07c      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057ea:	4a63      	ldr	r2, [pc, #396]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x9f4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d076      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057f6:	4a61      	ldr	r2, [pc, #388]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x9f8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d070      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005802:	4a5f      	ldr	r2, [pc, #380]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x9fc>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d06a      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800580e:	4a5d      	ldr	r2, [pc, #372]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0xa00>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d064      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800581a:	4a5b      	ldr	r2, [pc, #364]	; (8005988 <HAL_RCCEx_PeriphCLKConfig+0xa04>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d05e      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005826:	4a59      	ldr	r2, [pc, #356]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d058      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005832:	4a57      	ldr	r2, [pc, #348]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d052      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800583e:	4a55      	ldr	r2, [pc, #340]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d04c      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800584a:	4a53      	ldr	r2, [pc, #332]	; (8005998 <HAL_RCCEx_PeriphCLKConfig+0xa14>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d046      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005856:	4a51      	ldr	r2, [pc, #324]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d040      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005862:	4a4f      	ldr	r2, [pc, #316]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d03a      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800586e:	4a4d      	ldr	r2, [pc, #308]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0xa20>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d034      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800587a:	4a4b      	ldr	r2, [pc, #300]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d02e      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005886:	4a49      	ldr	r2, [pc, #292]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d028      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005892:	4a47      	ldr	r2, [pc, #284]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d022      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800589e:	4a45      	ldr	r2, [pc, #276]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d01c      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058aa:	4a43      	ldr	r2, [pc, #268]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d016      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058b6:	4a41      	ldr	r2, [pc, #260]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d010      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058c2:	4a3f      	ldr	r2, [pc, #252]	; (80059c0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00a      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058ce:	4a3d      	ldr	r2, [pc, #244]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d004      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80058d4:	f44f 715a 	mov.w	r1, #872	; 0x368
 80058d8:	483b      	ldr	r0, [pc, #236]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 80058da:	f7fb f998 	bl	8000c0e <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058de:	4b3b      	ldr	r3, [pc, #236]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a3a      	ldr	r2, [pc, #232]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 80058e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058ea:	f7fb fda7 	bl	800143c <HAL_GetTick>
 80058ee:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058f0:	e06e      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058f2:	f7fb fda3 	bl	800143c <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b64      	cmp	r3, #100	; 0x64
 80058fe:	d967      	bls.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
      {
        ret = HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	75fb      	strb	r3, [r7, #23]
        break;
 8005904:	e06a      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8005906:	bf00      	nop
 8005908:	00010300 	.word	0x00010300
 800590c:	00011300 	.word	0x00011300
 8005910:	00012300 	.word	0x00012300
 8005914:	00013300 	.word	0x00013300
 8005918:	00014300 	.word	0x00014300
 800591c:	00015300 	.word	0x00015300
 8005920:	00016300 	.word	0x00016300
 8005924:	00017300 	.word	0x00017300
 8005928:	00018300 	.word	0x00018300
 800592c:	00019300 	.word	0x00019300
 8005930:	0001a300 	.word	0x0001a300
 8005934:	0001b300 	.word	0x0001b300
 8005938:	0001c300 	.word	0x0001c300
 800593c:	0001d300 	.word	0x0001d300
 8005940:	0001e300 	.word	0x0001e300
 8005944:	0001f300 	.word	0x0001f300
 8005948:	00020300 	.word	0x00020300
 800594c:	00021300 	.word	0x00021300
 8005950:	00022300 	.word	0x00022300
 8005954:	00023300 	.word	0x00023300
 8005958:	00024300 	.word	0x00024300
 800595c:	00025300 	.word	0x00025300
 8005960:	00026300 	.word	0x00026300
 8005964:	00027300 	.word	0x00027300
 8005968:	00028300 	.word	0x00028300
 800596c:	00029300 	.word	0x00029300
 8005970:	0002a300 	.word	0x0002a300
 8005974:	0002b300 	.word	0x0002b300
 8005978:	0002c300 	.word	0x0002c300
 800597c:	0002d300 	.word	0x0002d300
 8005980:	0002e300 	.word	0x0002e300
 8005984:	0002f300 	.word	0x0002f300
 8005988:	00030300 	.word	0x00030300
 800598c:	00031300 	.word	0x00031300
 8005990:	00032300 	.word	0x00032300
 8005994:	00033300 	.word	0x00033300
 8005998:	00034300 	.word	0x00034300
 800599c:	00035300 	.word	0x00035300
 80059a0:	00036300 	.word	0x00036300
 80059a4:	00037300 	.word	0x00037300
 80059a8:	00038300 	.word	0x00038300
 80059ac:	00039300 	.word	0x00039300
 80059b0:	0003a300 	.word	0x0003a300
 80059b4:	0003b300 	.word	0x0003b300
 80059b8:	0003c300 	.word	0x0003c300
 80059bc:	0003d300 	.word	0x0003d300
 80059c0:	0003e300 	.word	0x0003e300
 80059c4:	0003f300 	.word	0x0003f300
 80059c8:	08018384 	.word	0x08018384
 80059cc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059d0:	4bb9      	ldr	r3, [pc, #740]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d08a      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
      }
    }

    if(ret == HAL_OK)
 80059dc:	7dfb      	ldrb	r3, [r7, #23]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d166      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xb2c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80059e2:	4bb6      	ldr	r3, [pc, #728]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059ec:	4053      	eors	r3, r2
 80059ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d013      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059f6:	4bb1      	ldr	r3, [pc, #708]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80059f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059fe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a00:	4bae      	ldr	r3, [pc, #696]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a04:	4aad      	ldr	r2, [pc, #692]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a0a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a0c:	4bab      	ldr	r3, [pc, #684]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a10:	4aaa      	ldr	r2, [pc, #680]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a16:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005a18:	4aa8      	ldr	r2, [pc, #672]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a28:	d115      	bne.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2a:	f7fb fd07 	bl	800143c <HAL_GetTick>
 8005a2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a30:	e00b      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xac6>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a32:	f7fb fd03 	bl	800143c <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d902      	bls.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xac6>
          {
            ret = HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	75fb      	strb	r3, [r7, #23]
            break;
 8005a48:	e005      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a4a:	4b9c      	ldr	r3, [pc, #624]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0ed      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xaae>
          }
        }
      }

      if(ret == HAL_OK)
 8005a56:	7dfb      	ldrb	r3, [r7, #23]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d126      	bne.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0xb26>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a6a:	d10d      	bne.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8005a6c:	4b93      	ldr	r3, [pc, #588]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a7a:	0919      	lsrs	r1, r3, #4
 8005a7c:	4b90      	ldr	r3, [pc, #576]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005a7e:	400b      	ands	r3, r1
 8005a80:	498e      	ldr	r1, [pc, #568]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	610b      	str	r3, [r1, #16]
 8005a86:	e005      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0xb10>
 8005a88:	4b8c      	ldr	r3, [pc, #560]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	4a8b      	ldr	r2, [pc, #556]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a8e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a92:	6113      	str	r3, [r2, #16]
 8005a94:	4b89      	ldr	r3, [pc, #548]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aa2:	4986      	ldr	r1, [pc, #536]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	670b      	str	r3, [r1, #112]	; 0x70
 8005aa8:	e004      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005aaa:	7dfb      	ldrb	r3, [r7, #23]
 8005aac:	75bb      	strb	r3, [r7, #22]
 8005aae:	e001      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab0:	7dfb      	ldrb	r3, [r7, #23]
 8005ab2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d07e      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xc3a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ac4:	2b28      	cmp	r3, #40	; 0x28
 8005ac6:	d867      	bhi.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xc14>
 8005ac8:	a201      	add	r2, pc, #4	; (adr r2, 8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
 8005aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ace:	bf00      	nop
 8005ad0:	08005b9f 	.word	0x08005b9f
 8005ad4:	08005b99 	.word	0x08005b99
 8005ad8:	08005b99 	.word	0x08005b99
 8005adc:	08005b99 	.word	0x08005b99
 8005ae0:	08005b99 	.word	0x08005b99
 8005ae4:	08005b99 	.word	0x08005b99
 8005ae8:	08005b99 	.word	0x08005b99
 8005aec:	08005b99 	.word	0x08005b99
 8005af0:	08005b75 	.word	0x08005b75
 8005af4:	08005b99 	.word	0x08005b99
 8005af8:	08005b99 	.word	0x08005b99
 8005afc:	08005b99 	.word	0x08005b99
 8005b00:	08005b99 	.word	0x08005b99
 8005b04:	08005b99 	.word	0x08005b99
 8005b08:	08005b99 	.word	0x08005b99
 8005b0c:	08005b99 	.word	0x08005b99
 8005b10:	08005b87 	.word	0x08005b87
 8005b14:	08005b99 	.word	0x08005b99
 8005b18:	08005b99 	.word	0x08005b99
 8005b1c:	08005b99 	.word	0x08005b99
 8005b20:	08005b99 	.word	0x08005b99
 8005b24:	08005b99 	.word	0x08005b99
 8005b28:	08005b99 	.word	0x08005b99
 8005b2c:	08005b99 	.word	0x08005b99
 8005b30:	08005b9f 	.word	0x08005b9f
 8005b34:	08005b99 	.word	0x08005b99
 8005b38:	08005b99 	.word	0x08005b99
 8005b3c:	08005b99 	.word	0x08005b99
 8005b40:	08005b99 	.word	0x08005b99
 8005b44:	08005b99 	.word	0x08005b99
 8005b48:	08005b99 	.word	0x08005b99
 8005b4c:	08005b99 	.word	0x08005b99
 8005b50:	08005b9f 	.word	0x08005b9f
 8005b54:	08005b99 	.word	0x08005b99
 8005b58:	08005b99 	.word	0x08005b99
 8005b5c:	08005b99 	.word	0x08005b99
 8005b60:	08005b99 	.word	0x08005b99
 8005b64:	08005b99 	.word	0x08005b99
 8005b68:	08005b99 	.word	0x08005b99
 8005b6c:	08005b99 	.word	0x08005b99
 8005b70:	08005b9f 	.word	0x08005b9f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3304      	adds	r3, #4
 8005b78:	2101      	movs	r1, #1
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 fe30 	bl	80067e0 <RCCEx_PLL2_Config>
 8005b80:	4603      	mov	r3, r0
 8005b82:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005b84:	e00c      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	3324      	adds	r3, #36	; 0x24
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 ff49 	bl	8006a24 <RCCEx_PLL3_Config>
 8005b92:	4603      	mov	r3, r0
 8005b94:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005b96:	e003      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b9c:	e000      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8005b9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d109      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0xc36>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ba6:	4b45      	ldr	r3, [pc, #276]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005baa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bb2:	4942      	ldr	r1, [pc, #264]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	654b      	str	r3, [r1, #84]	; 0x54
 8005bb8:	e001      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xc3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bba:	7dfb      	ldrb	r3, [r7, #23]
 8005bbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d037      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bce:	2b05      	cmp	r3, #5
 8005bd0:	d820      	bhi.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xc90>
 8005bd2:	a201      	add	r2, pc, #4	; (adr r2, 8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8005bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd8:	08005c1b 	.word	0x08005c1b
 8005bdc:	08005bf1 	.word	0x08005bf1
 8005be0:	08005c03 	.word	0x08005c03
 8005be4:	08005c1b 	.word	0x08005c1b
 8005be8:	08005c1b 	.word	0x08005c1b
 8005bec:	08005c1b 	.word	0x08005c1b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fdf2 	bl	80067e0 <RCCEx_PLL2_Config>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005c00:	e00c      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xc98>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	3324      	adds	r3, #36	; 0x24
 8005c06:	2101      	movs	r1, #1
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 ff0b 	bl	8006a24 <RCCEx_PLL3_Config>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005c12:	e003      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xc98>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	75fb      	strb	r3, [r7, #23]
      break;
 8005c18:	e000      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xc98>
      break;
 8005c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d109      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005c22:	4b26      	ldr	r3, [pc, #152]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c26:	f023 0207 	bic.w	r2, r3, #7
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c2e:	4923      	ldr	r1, [pc, #140]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	654b      	str	r3, [r1, #84]	; 0x54
 8005c34:	e001      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c36:	7dfb      	ldrb	r3, [r7, #23]
 8005c38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d040      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4c:	2b05      	cmp	r3, #5
 8005c4e:	d821      	bhi.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005c50:	a201      	add	r2, pc, #4	; (adr r2, 8005c58 <HAL_RCCEx_PeriphCLKConfig+0xcd4>)
 8005c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c56:	bf00      	nop
 8005c58:	08005c9b 	.word	0x08005c9b
 8005c5c:	08005c71 	.word	0x08005c71
 8005c60:	08005c83 	.word	0x08005c83
 8005c64:	08005c9b 	.word	0x08005c9b
 8005c68:	08005c9b 	.word	0x08005c9b
 8005c6c:	08005c9b 	.word	0x08005c9b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	3304      	adds	r3, #4
 8005c74:	2101      	movs	r1, #1
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 fdb2 	bl	80067e0 <RCCEx_PLL2_Config>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005c80:	e00c      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xd18>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	3324      	adds	r3, #36	; 0x24
 8005c86:	2101      	movs	r1, #1
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 fecb 	bl	8006a24 <RCCEx_PLL3_Config>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005c92:	e003      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	75fb      	strb	r3, [r7, #23]
      break;
 8005c98:	e000      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8005c9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d110      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ca2:	4b06      	ldr	r3, [pc, #24]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca6:	f023 0207 	bic.w	r2, r3, #7
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb0:	4902      	ldr	r1, [pc, #8]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	658b      	str	r3, [r1, #88]	; 0x58
 8005cb6:	e007      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005cb8:	58024800 	.word	0x58024800
 8005cbc:	58024400 	.word	0x58024400
 8005cc0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
 8005cc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d044      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cde:	d01b      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005ce0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ce4:	d805      	bhi.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d022      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8005cea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cee:	d00a      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005cf0:	e01b      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xda6>
 8005cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf6:	d01d      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8005cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cfc:	d01c      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005cfe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d02:	d01b      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xdb8>
 8005d04:	e011      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xda6>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	3304      	adds	r3, #4
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 fd67 	bl	80067e0 <RCCEx_PLL2_Config>
 8005d12:	4603      	mov	r3, r0
 8005d14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005d16:	e012      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xdba>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3324      	adds	r3, #36	; 0x24
 8005d1c:	2102      	movs	r1, #2
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fe80 	bl	8006a24 <RCCEx_PLL3_Config>
 8005d24:	4603      	mov	r3, r0
 8005d26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005d28:	e009      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xdba>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	75fb      	strb	r3, [r7, #23]
      break;
 8005d2e:	e006      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8005d30:	bf00      	nop
 8005d32:	e004      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8005d34:	bf00      	nop
 8005d36:	e002      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8005d38:	bf00      	nop
 8005d3a:	e000      	b.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8005d3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d3e:	7dfb      	ldrb	r3, [r7, #23]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10a      	bne.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d44:	4bb6      	ldr	r3, [pc, #728]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d48:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d52:	49b3      	ldr	r1, [pc, #716]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	654b      	str	r3, [r1, #84]	; 0x54
 8005d58:	e001      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xdda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d5a:	7dfb      	ldrb	r3, [r7, #23]
 8005d5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d044      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xe70>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d74:	d01b      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xe2a>
 8005d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d7a:	d805      	bhi.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xe04>
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d022      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xe42>
 8005d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d84:	d00a      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8005d86:	e01b      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 8005d88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d8c:	d01d      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xe46>
 8005d8e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d92:	d01c      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0xe4a>
 8005d94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d98:	d01b      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xe4e>
 8005d9a:	e011      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3304      	adds	r3, #4
 8005da0:	2100      	movs	r1, #0
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fd1c 	bl	80067e0 <RCCEx_PLL2_Config>
 8005da8:	4603      	mov	r3, r0
 8005daa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005dac:	e012      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xe50>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	3324      	adds	r3, #36	; 0x24
 8005db2:	2102      	movs	r1, #2
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 fe35 	bl	8006a24 <RCCEx_PLL3_Config>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005dbe:	e009      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8005dc4:	e006      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8005dc6:	bf00      	nop
 8005dc8:	e004      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8005dca:	bf00      	nop
 8005dcc:	e002      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8005dce:	bf00      	nop
 8005dd0:	e000      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8005dd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dd4:	7dfb      	ldrb	r3, [r7, #23]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10a      	bne.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005dda:	4b91      	ldr	r3, [pc, #580]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dde:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005de8:	498d      	ldr	r1, [pc, #564]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	658b      	str	r3, [r1, #88]	; 0x58
 8005dee:	e001      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xe70>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df0:	7dfb      	ldrb	r3, [r7, #23]
 8005df2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d044      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xf06>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e0a:	d01b      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xec0>
 8005e0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e10:	d805      	bhi.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xe9a>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d022      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xed8>
 8005e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e1a:	d00a      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0xeae>
 8005e1c:	e01b      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xed2>
 8005e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e22:	d01d      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 8005e24:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005e28:	d01c      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xee0>
 8005e2a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005e2e:	d01b      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xee4>
 8005e30:	e011      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	3304      	adds	r3, #4
 8005e36:	2100      	movs	r1, #0
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 fcd1 	bl	80067e0 <RCCEx_PLL2_Config>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005e42:	e012      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xee6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3324      	adds	r3, #36	; 0x24
 8005e48:	2102      	movs	r1, #2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fdea 	bl	8006a24 <RCCEx_PLL3_Config>
 8005e50:	4603      	mov	r3, r0
 8005e52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005e54:	e009      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xee6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	75fb      	strb	r3, [r7, #23]
      break;
 8005e5a:	e006      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8005e5c:	bf00      	nop
 8005e5e:	e004      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8005e60:	bf00      	nop
 8005e62:	e002      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8005e64:	bf00      	nop
 8005e66:	e000      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8005e68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e6a:	7dfb      	ldrb	r3, [r7, #23]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10a      	bne.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xf02>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005e70:	4b6b      	ldr	r3, [pc, #428]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e74:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e7e:	4968      	ldr	r1, [pc, #416]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	658b      	str	r3, [r1, #88]	; 0x58
 8005e84:	e001      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xf06>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e86:	7dfb      	ldrb	r3, [r7, #23]
 8005e88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d036      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xf80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea0:	d015      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eac:	d00f      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00a      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ebe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ec2:	d004      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8005ec4:	f240 41e6 	movw	r1, #1254	; 0x4e6
 8005ec8:	4856      	ldr	r0, [pc, #344]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8005eca:	f7fa fea0 	bl	8000c0e <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed8:	d10a      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	3324      	adds	r3, #36	; 0x24
 8005ede:	2102      	movs	r1, #2
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f000 fd9f 	bl	8006a24 <RCCEx_PLL3_Config>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
        {
          status = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005ef0:	4b4b      	ldr	r3, [pc, #300]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005efe:	4948      	ldr	r1, [pc, #288]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0310 	and.w	r3, r3, #16
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d036      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xffa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f1a:	d015      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f26:	d00f      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00a      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f3c:	d004      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 8005f3e:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 8005f42:	4838      	ldr	r0, [pc, #224]	; (8006024 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8005f44:	f7fa fe63 	bl	8000c0e <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f52:	d10a      	bne.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xfe6>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3324      	adds	r3, #36	; 0x24
 8005f58:	2102      	movs	r1, #2
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 fd62 	bl	8006a24 <RCCEx_PLL3_Config>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xfe6>
      {
        status = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f6a:	4b2d      	ldr	r3, [pc, #180]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f78:	4929      	ldr	r1, [pc, #164]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d030      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x1068>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f94:	d00d      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x102e>
 8005f96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f9a:	d016      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x1046>
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d111      	bne.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1040>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 fc1a 	bl	80067e0 <RCCEx_PLL2_Config>
 8005fac:	4603      	mov	r3, r0
 8005fae:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005fb0:	e00c      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1048>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	3324      	adds	r3, #36	; 0x24
 8005fb6:	2102      	movs	r1, #2
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 fd33 	bl	8006a24 <RCCEx_PLL3_Config>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005fc2:	e003      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1048>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8005fc8:	e000      	b.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x1048>
      break;
 8005fca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fcc:	7dfb      	ldrb	r3, [r7, #23]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10a      	bne.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x1064>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fd2:	4b13      	ldr	r3, [pc, #76]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005fe0:	490f      	ldr	r1, [pc, #60]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	658b      	str	r3, [r1, #88]	; 0x58
 8005fe6:	e001      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x1068>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe8:	7dfb      	ldrb	r3, [r7, #23]
 8005fea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d034      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x10de>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ffe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006002:	d011      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
 8006004:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006008:	d01a      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800600a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800600e:	d114      	bne.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006010:	4b03      	ldr	r3, [pc, #12]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8006012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006014:	4a02      	ldr	r2, [pc, #8]	; (8006020 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8006016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800601a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800601c:	e011      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x10be>
 800601e:	bf00      	nop
 8006020:	58024400 	.word	0x58024400
 8006024:	08018384 	.word	0x08018384

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3324      	adds	r3, #36	; 0x24
 800602c:	2101      	movs	r1, #1
 800602e:	4618      	mov	r0, r3
 8006030:	f000 fcf8 	bl	8006a24 <RCCEx_PLL3_Config>
 8006034:	4603      	mov	r3, r0
 8006036:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006038:	e003      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x10be>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	75fb      	strb	r3, [r7, #23]
      break;
 800603e:	e000      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x10be>
      break;
 8006040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006042:	7dfb      	ldrb	r3, [r7, #23]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d10a      	bne.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x10da>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006048:	4b8c      	ldr	r3, [pc, #560]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800604a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006056:	4989      	ldr	r1, [pc, #548]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006058:	4313      	orrs	r3, r2
 800605a:	654b      	str	r3, [r1, #84]	; 0x54
 800605c:	e001      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x10de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800605e:	7dfb      	ldrb	r3, [r7, #23]
 8006060:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d037      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x115a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006072:	2b00      	cmp	r3, #0
 8006074:	d009      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x1106>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800607e:	d004      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0x1106>
 8006080:	f240 515e 	movw	r1, #1374	; 0x55e
 8006084:	487e      	ldr	r0, [pc, #504]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 8006086:	f7fa fdc2 	bl	8000c0e <assert_failed>

    switch(PeriphClkInit->SdmmcClockSelection)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006096:	d007      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x1124>
 8006098:	e00f      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800609a:	4b78      	ldr	r3, [pc, #480]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800609c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609e:	4a77      	ldr	r2, [pc, #476]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80060a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80060a6:	e00b      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x113c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3304      	adds	r3, #4
 80060ac:	2102      	movs	r1, #2
 80060ae:	4618      	mov	r0, r3
 80060b0:	f000 fb96 	bl	80067e0 <RCCEx_PLL2_Config>
 80060b4:	4603      	mov	r3, r0
 80060b6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80060b8:	e002      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x113c>

    default:
      ret = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	75fb      	strb	r3, [r7, #23]
      break;
 80060be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060c0:	7dfb      	ldrb	r3, [r7, #23]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d109      	bne.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x1156>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80060c6:	4b6d      	ldr	r3, [pc, #436]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80060c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060d2:	496a      	ldr	r1, [pc, #424]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80060d8:	e001      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x115a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060da:	7dfb      	ldrb	r3, [r7, #23]
 80060dc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x117c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	3324      	adds	r3, #36	; 0x24
 80060ee:	2102      	movs	r1, #2
 80060f0:	4618      	mov	r0, r3
 80060f2:	f000 fc97 	bl	8006a24 <RCCEx_PLL3_Config>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x117c>
    {
      status=HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d02f      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
  {

    switch(PeriphClkInit->RngClockSelection)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006114:	d00c      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x11ac>
 8006116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800611a:	d802      	bhi.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x119e>
 800611c:	2b00      	cmp	r3, #0
 800611e:	d011      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
 8006120:	e00d      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
 8006122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006126:	d00f      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x11c4>
 8006128:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800612c:	d00e      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 800612e:	e006      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006130:	4b52      	ldr	r3, [pc, #328]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006134:	4a51      	ldr	r2, [pc, #324]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800613a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800613c:	e007      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	75fb      	strb	r3, [r7, #23]
      break;
 8006142:	e004      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      break;
 8006144:	bf00      	nop
 8006146:	e002      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      break;
 8006148:	bf00      	nop
 800614a:	e000      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      break;
 800614c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800614e:	7dfb      	ldrb	r3, [r7, #23]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d109      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x11e4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006154:	4b49      	ldr	r3, [pc, #292]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006158:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006160:	4946      	ldr	r1, [pc, #280]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006162:	4313      	orrs	r3, r2
 8006164:	654b      	str	r3, [r1, #84]	; 0x54
 8006166:	e001      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006168:	7dfb      	ldrb	r3, [r7, #23]
 800616a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d016      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x1222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617c:	2b00      	cmp	r3, #0
 800617e:	d009      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x1210>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006188:	d004      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x1210>
 800618a:	f240 51bd 	movw	r1, #1469	; 0x5bd
 800618e:	483c      	ldr	r0, [pc, #240]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 8006190:	f7fa fd3d 	bl	8000c0e <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006194:	4b39      	ldr	r3, [pc, #228]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006198:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a0:	4936      	ldr	r1, [pc, #216]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d016      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d009      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x124a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061c2:	d004      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x124a>
 80061c4:	f240 51d1 	movw	r1, #1489	; 0x5d1
 80061c8:	482d      	ldr	r0, [pc, #180]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 80061ca:	f7fa fd20 	bl	8000c0e <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80061ce:	4b2b      	ldr	r3, [pc, #172]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80061d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061da:	4928      	ldr	r1, [pc, #160]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d01d      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x12a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x1288>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80061fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006200:	d004      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x1288>
 8006202:	f240 51e7 	movw	r1, #1511	; 0x5e7
 8006206:	481e      	ldr	r0, [pc, #120]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 8006208:	f7fa fd01 	bl	8000c0e <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800620c:	4b1b      	ldr	r3, [pc, #108]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	4a1a      	ldr	r2, [pc, #104]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006212:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006216:	6113      	str	r3, [r2, #16]
 8006218:	4b18      	ldr	r3, [pc, #96]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800621a:	691a      	ldr	r2, [r3, #16]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006222:	4916      	ldr	r1, [pc, #88]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006224:	4313      	orrs	r3, r2
 8006226:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	da1b      	bge.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x12e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00e      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x12d2>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800623c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006240:	d009      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x12d2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006246:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800624a:	d004      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x12d2>
 800624c:	f240 51f1 	movw	r1, #1521	; 0x5f1
 8006250:	480b      	ldr	r0, [pc, #44]	; (8006280 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 8006252:	f7fa fcdc 	bl	8000c0e <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006256:	4b09      	ldr	r3, [pc, #36]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800625a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006262:	4906      	ldr	r1, [pc, #24]	; (800627c <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006264:	4313      	orrs	r3, r2
 8006266:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006268:	7dbb      	ldrb	r3, [r7, #22]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x12ee>
  {
    return HAL_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	e000      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x12f0>
  }
  return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
}
 8006274:	4618      	mov	r0, r3
 8006276:	3718      	adds	r7, #24
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	58024400 	.word	0x58024400
 8006280:	08018384 	.word	0x08018384

08006284 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006288:	f7fe fdde 	bl	8004e48 <HAL_RCC_GetHCLKFreq>
 800628c:	4601      	mov	r1, r0
 800628e:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	091b      	lsrs	r3, r3, #4
 8006294:	f003 0307 	and.w	r3, r3, #7
 8006298:	4a04      	ldr	r2, [pc, #16]	; (80062ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800629a:	5cd3      	ldrb	r3, [r2, r3]
 800629c:	f003 031f 	and.w	r3, r3, #31
 80062a0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	58024400 	.word	0x58024400
 80062ac:	0801a270 	.word	0x0801a270

080062b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b089      	sub	sp, #36	; 0x24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062b8:	4b9d      	ldr	r3, [pc, #628]	; (8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80062ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062bc:	f003 0303 	and.w	r3, r3, #3
 80062c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80062c2:	4b9b      	ldr	r3, [pc, #620]	; (8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80062c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c6:	0b1b      	lsrs	r3, r3, #12
 80062c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80062ce:	4b98      	ldr	r3, [pc, #608]	; (8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80062d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d2:	091b      	lsrs	r3, r3, #4
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80062da:	4b95      	ldr	r3, [pc, #596]	; (8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80062dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062de:	08db      	lsrs	r3, r3, #3
 80062e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	fb02 f303 	mul.w	r3, r2, r3
 80062ea:	ee07 3a90 	vmov	s15, r3
 80062ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 810a 	beq.w	8006512 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d05a      	beq.n	80063ba <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8006304:	2b01      	cmp	r3, #1
 8006306:	d302      	bcc.n	800630e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8006308:	2b02      	cmp	r3, #2
 800630a:	d078      	beq.n	80063fe <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800630c:	e099      	b.n	8006442 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800630e:	4b88      	ldr	r3, [pc, #544]	; (8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0320 	and.w	r3, r3, #32
 8006316:	2b00      	cmp	r3, #0
 8006318:	d02d      	beq.n	8006376 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800631a:	4b85      	ldr	r3, [pc, #532]	; (8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	08db      	lsrs	r3, r3, #3
 8006320:	f003 0303 	and.w	r3, r3, #3
 8006324:	4a83      	ldr	r2, [pc, #524]	; (8006534 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8006326:	fa22 f303 	lsr.w	r3, r2, r3
 800632a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	ee07 3a90 	vmov	s15, r3
 8006332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	ee07 3a90 	vmov	s15, r3
 800633c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006344:	4b7a      	ldr	r3, [pc, #488]	; (8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800634c:	ee07 3a90 	vmov	s15, r3
 8006350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006354:	ed97 6a03 	vldr	s12, [r7, #12]
 8006358:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006538 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800635c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006360:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006364:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006368:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800636c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006370:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006374:	e087      	b.n	8006486 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	ee07 3a90 	vmov	s15, r3
 800637c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006380:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800653c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8006384:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006388:	4b69      	ldr	r3, [pc, #420]	; (8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006390:	ee07 3a90 	vmov	s15, r3
 8006394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006398:	ed97 6a03 	vldr	s12, [r7, #12]
 800639c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006538 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80063a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063b8:	e065      	b.n	8006486 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	ee07 3a90 	vmov	s15, r3
 80063c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80063c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063cc:	4b58      	ldr	r3, [pc, #352]	; (8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80063ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d4:	ee07 3a90 	vmov	s15, r3
 80063d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80063e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006538 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80063e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063fc:	e043      	b.n	8006486 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	ee07 3a90 	vmov	s15, r3
 8006404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006408:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006544 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800640c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006410:	4b47      	ldr	r3, [pc, #284]	; (8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006418:	ee07 3a90 	vmov	s15, r3
 800641c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006420:	ed97 6a03 	vldr	s12, [r7, #12]
 8006424:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006538 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006428:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800642c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006430:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006434:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800643c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006440:	e021      	b.n	8006486 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	ee07 3a90 	vmov	s15, r3
 8006448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800644c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006540 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006450:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006454:	4b36      	ldr	r3, [pc, #216]	; (8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800645c:	ee07 3a90 	vmov	s15, r3
 8006460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006464:	ed97 6a03 	vldr	s12, [r7, #12]
 8006468:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006538 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800646c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006470:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006474:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006478:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800647c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006480:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006484:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006486:	4b2a      	ldr	r3, [pc, #168]	; (8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648a:	0a5b      	lsrs	r3, r3, #9
 800648c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006490:	ee07 3a90 	vmov	s15, r3
 8006494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006498:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800649c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80064a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ac:	ee17 2a90 	vmov	r2, s15
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80064b4:	4b1e      	ldr	r3, [pc, #120]	; (8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80064b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b8:	0c1b      	lsrs	r3, r3, #16
 80064ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064be:	ee07 3a90 	vmov	s15, r3
 80064c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80064d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064da:	ee17 2a90 	vmov	r2, s15
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80064e2:	4b13      	ldr	r3, [pc, #76]	; (8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80064e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e6:	0e1b      	lsrs	r3, r3, #24
 80064e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ec:	ee07 3a90 	vmov	s15, r3
 80064f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006508:	ee17 2a90 	vmov	r2, s15
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006510:	e008      	b.n	8006524 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	609a      	str	r2, [r3, #8]
}
 8006524:	bf00      	nop
 8006526:	3724      	adds	r7, #36	; 0x24
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	58024400 	.word	0x58024400
 8006534:	03d09000 	.word	0x03d09000
 8006538:	46000000 	.word	0x46000000
 800653c:	4c742400 	.word	0x4c742400
 8006540:	4a742400 	.word	0x4a742400
 8006544:	4af42400 	.word	0x4af42400

08006548 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006548:	b480      	push	{r7}
 800654a:	b089      	sub	sp, #36	; 0x24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006550:	4b9d      	ldr	r3, [pc, #628]	; (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006554:	f003 0303 	and.w	r3, r3, #3
 8006558:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800655a:	4b9b      	ldr	r3, [pc, #620]	; (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800655c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655e:	0d1b      	lsrs	r3, r3, #20
 8006560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006564:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006566:	4b98      	ldr	r3, [pc, #608]	; (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656a:	0a1b      	lsrs	r3, r3, #8
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006572:	4b95      	ldr	r3, [pc, #596]	; (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006576:	08db      	lsrs	r3, r3, #3
 8006578:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	fb02 f303 	mul.w	r3, r2, r3
 8006582:	ee07 3a90 	vmov	s15, r3
 8006586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800658a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 810a 	beq.w	80067aa <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d05a      	beq.n	8006652 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800659c:	2b01      	cmp	r3, #1
 800659e:	d302      	bcc.n	80065a6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d078      	beq.n	8006696 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80065a4:	e099      	b.n	80066da <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065a6:	4b88      	ldr	r3, [pc, #544]	; (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0320 	and.w	r3, r3, #32
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d02d      	beq.n	800660e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80065b2:	4b85      	ldr	r3, [pc, #532]	; (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	08db      	lsrs	r3, r3, #3
 80065b8:	f003 0303 	and.w	r3, r3, #3
 80065bc:	4a83      	ldr	r2, [pc, #524]	; (80067cc <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80065be:	fa22 f303 	lsr.w	r3, r2, r3
 80065c2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	ee07 3a90 	vmov	s15, r3
 80065ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	ee07 3a90 	vmov	s15, r3
 80065d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065dc:	4b7a      	ldr	r3, [pc, #488]	; (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80065de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065e4:	ee07 3a90 	vmov	s15, r3
 80065e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80065f0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80065f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006600:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006608:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800660c:	e087      	b.n	800671e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	ee07 3a90 	vmov	s15, r3
 8006614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006618:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80067d4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800661c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006620:	4b69      	ldr	r3, [pc, #420]	; (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006628:	ee07 3a90 	vmov	s15, r3
 800662c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006630:	ed97 6a03 	vldr	s12, [r7, #12]
 8006634:	eddf 5a66 	vldr	s11, [pc, #408]	; 80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006638:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800663c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006640:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006644:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800664c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006650:	e065      	b.n	800671e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	ee07 3a90 	vmov	s15, r3
 8006658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800665c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80067d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006660:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006664:	4b58      	ldr	r3, [pc, #352]	; (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800666c:	ee07 3a90 	vmov	s15, r3
 8006670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006674:	ed97 6a03 	vldr	s12, [r7, #12]
 8006678:	eddf 5a55 	vldr	s11, [pc, #340]	; 80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800667c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006680:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006684:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006688:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800668c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006690:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006694:	e043      	b.n	800671e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	ee07 3a90 	vmov	s15, r3
 800669c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80067dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80066a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066a8:	4b47      	ldr	r3, [pc, #284]	; (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80066aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066b0:	ee07 3a90 	vmov	s15, r3
 80066b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80066bc:	eddf 5a44 	vldr	s11, [pc, #272]	; 80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80066c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066d8:	e021      	b.n	800671e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	ee07 3a90 	vmov	s15, r3
 80066e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066e4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80067d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80066e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066ec:	4b36      	ldr	r3, [pc, #216]	; (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80066ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066f4:	ee07 3a90 	vmov	s15, r3
 80066f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006700:	eddf 5a33 	vldr	s11, [pc, #204]	; 80067d0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006704:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006708:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800670c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006710:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006718:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800671c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800671e:	4b2a      	ldr	r3, [pc, #168]	; (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	0a5b      	lsrs	r3, r3, #9
 8006724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006728:	ee07 3a90 	vmov	s15, r3
 800672c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006730:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006734:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006738:	edd7 6a07 	vldr	s13, [r7, #28]
 800673c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006744:	ee17 2a90 	vmov	r2, s15
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800674c:	4b1e      	ldr	r3, [pc, #120]	; (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800674e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006750:	0c1b      	lsrs	r3, r3, #16
 8006752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006766:	edd7 6a07 	vldr	s13, [r7, #28]
 800676a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800676e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006772:	ee17 2a90 	vmov	r2, s15
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800677a:	4b13      	ldr	r3, [pc, #76]	; (80067c8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	0e1b      	lsrs	r3, r3, #24
 8006780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006784:	ee07 3a90 	vmov	s15, r3
 8006788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800678c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006790:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006794:	edd7 6a07 	vldr	s13, [r7, #28]
 8006798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800679c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067a0:	ee17 2a90 	vmov	r2, s15
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80067a8:	e008      	b.n	80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	609a      	str	r2, [r3, #8]
}
 80067bc:	bf00      	nop
 80067be:	3724      	adds	r7, #36	; 0x24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	58024400 	.word	0x58024400
 80067cc:	03d09000 	.word	0x03d09000
 80067d0:	46000000 	.word	0x46000000
 80067d4:	4c742400 	.word	0x4c742400
 80067d8:	4a742400 	.word	0x4a742400
 80067dc:	4af42400 	.word	0x4af42400

080067e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d003      	beq.n	80067fe <RCCEx_PLL2_Config+0x1e>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b3f      	cmp	r3, #63	; 0x3f
 80067fc:	d904      	bls.n	8006808 <RCCEx_PLL2_Config+0x28>
 80067fe:	f640 417f 	movw	r1, #3199	; 0xc7f
 8006802:	4885      	ldr	r0, [pc, #532]	; (8006a18 <RCCEx_PLL2_Config+0x238>)
 8006804:	f7fa fa03 	bl	8000c0e <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	2b03      	cmp	r3, #3
 800680e:	d904      	bls.n	800681a <RCCEx_PLL2_Config+0x3a>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006818:	d904      	bls.n	8006824 <RCCEx_PLL2_Config+0x44>
 800681a:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 800681e:	487e      	ldr	r0, [pc, #504]	; (8006a18 <RCCEx_PLL2_Config+0x238>)
 8006820:	f7fa f9f5 	bl	8000c0e <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <RCCEx_PLL2_Config+0x54>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	2b80      	cmp	r3, #128	; 0x80
 8006832:	d904      	bls.n	800683e <RCCEx_PLL2_Config+0x5e>
 8006834:	f640 4181 	movw	r1, #3201	; 0xc81
 8006838:	4877      	ldr	r0, [pc, #476]	; (8006a18 <RCCEx_PLL2_Config+0x238>)
 800683a:	f7fa f9e8 	bl	8000c0e <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <RCCEx_PLL2_Config+0x6e>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	2b80      	cmp	r3, #128	; 0x80
 800684c:	d904      	bls.n	8006858 <RCCEx_PLL2_Config+0x78>
 800684e:	f640 4182 	movw	r1, #3202	; 0xc82
 8006852:	4871      	ldr	r0, [pc, #452]	; (8006a18 <RCCEx_PLL2_Config+0x238>)
 8006854:	f7fa f9db 	bl	8000c0e <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d003      	beq.n	8006868 <RCCEx_PLL2_Config+0x88>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	2b80      	cmp	r3, #128	; 0x80
 8006866:	d904      	bls.n	8006872 <RCCEx_PLL2_Config+0x92>
 8006868:	f640 4183 	movw	r1, #3203	; 0xc83
 800686c:	486a      	ldr	r0, [pc, #424]	; (8006a18 <RCCEx_PLL2_Config+0x238>)
 800686e:	f7fa f9ce 	bl	8000c0e <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d010      	beq.n	800689c <RCCEx_PLL2_Config+0xbc>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	2b40      	cmp	r3, #64	; 0x40
 8006880:	d00c      	beq.n	800689c <RCCEx_PLL2_Config+0xbc>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	2b80      	cmp	r3, #128	; 0x80
 8006888:	d008      	beq.n	800689c <RCCEx_PLL2_Config+0xbc>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	2bc0      	cmp	r3, #192	; 0xc0
 8006890:	d004      	beq.n	800689c <RCCEx_PLL2_Config+0xbc>
 8006892:	f640 4184 	movw	r1, #3204	; 0xc84
 8006896:	4860      	ldr	r0, [pc, #384]	; (8006a18 <RCCEx_PLL2_Config+0x238>)
 8006898:	f7fa f9b9 	bl	8000c0e <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d008      	beq.n	80068b6 <RCCEx_PLL2_Config+0xd6>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	2b20      	cmp	r3, #32
 80068aa:	d004      	beq.n	80068b6 <RCCEx_PLL2_Config+0xd6>
 80068ac:	f640 4185 	movw	r1, #3205	; 0xc85
 80068b0:	4859      	ldr	r0, [pc, #356]	; (8006a18 <RCCEx_PLL2_Config+0x238>)
 80068b2:	f7fa f9ac 	bl	8000c0e <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068be:	d304      	bcc.n	80068ca <RCCEx_PLL2_Config+0xea>
 80068c0:	f640 4186 	movw	r1, #3206	; 0xc86
 80068c4:	4854      	ldr	r0, [pc, #336]	; (8006a18 <RCCEx_PLL2_Config+0x238>)
 80068c6:	f7fa f9a2 	bl	8000c0e <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80068ca:	4b54      	ldr	r3, [pc, #336]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	2b03      	cmp	r3, #3
 80068d4:	d101      	bne.n	80068da <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e099      	b.n	8006a0e <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80068da:	4b50      	ldr	r3, [pc, #320]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a4f      	ldr	r2, [pc, #316]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 80068e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068e6:	f7fa fda9 	bl	800143c <HAL_GetTick>
 80068ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068ec:	e008      	b.n	8006900 <RCCEx_PLL2_Config+0x120>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80068ee:	f7fa fda5 	bl	800143c <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	d901      	bls.n	8006900 <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e086      	b.n	8006a0e <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006900:	4b46      	ldr	r3, [pc, #280]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1f0      	bne.n	80068ee <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800690c:	4b43      	ldr	r3, [pc, #268]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 800690e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006910:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	031b      	lsls	r3, r3, #12
 800691a:	4940      	ldr	r1, [pc, #256]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 800691c:	4313      	orrs	r3, r2
 800691e:	628b      	str	r3, [r1, #40]	; 0x28
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	3b01      	subs	r3, #1
 8006926:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	3b01      	subs	r3, #1
 8006930:	025b      	lsls	r3, r3, #9
 8006932:	b29b      	uxth	r3, r3
 8006934:	431a      	orrs	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	3b01      	subs	r3, #1
 800693c:	041b      	lsls	r3, r3, #16
 800693e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006942:	431a      	orrs	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	3b01      	subs	r3, #1
 800694a:	061b      	lsls	r3, r3, #24
 800694c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006950:	4932      	ldr	r1, [pc, #200]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 8006952:	4313      	orrs	r3, r2
 8006954:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006956:	4b31      	ldr	r3, [pc, #196]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 8006958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	492e      	ldr	r1, [pc, #184]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 8006964:	4313      	orrs	r3, r2
 8006966:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006968:	4b2c      	ldr	r3, [pc, #176]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 800696a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696c:	f023 0220 	bic.w	r2, r3, #32
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	4929      	ldr	r1, [pc, #164]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 8006976:	4313      	orrs	r3, r2
 8006978:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800697a:	4b28      	ldr	r3, [pc, #160]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 800697c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697e:	4a27      	ldr	r2, [pc, #156]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 8006980:	f023 0310 	bic.w	r3, r3, #16
 8006984:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006986:	4b25      	ldr	r3, [pc, #148]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 8006988:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800698a:	4b25      	ldr	r3, [pc, #148]	; (8006a20 <RCCEx_PLL2_Config+0x240>)
 800698c:	4013      	ands	r3, r2
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	69d2      	ldr	r2, [r2, #28]
 8006992:	00d2      	lsls	r2, r2, #3
 8006994:	4921      	ldr	r1, [pc, #132]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 8006996:	4313      	orrs	r3, r2
 8006998:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800699a:	4b20      	ldr	r3, [pc, #128]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 800699c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699e:	4a1f      	ldr	r2, [pc, #124]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 80069a0:	f043 0310 	orr.w	r3, r3, #16
 80069a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d106      	bne.n	80069ba <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80069ac:	4b1b      	ldr	r3, [pc, #108]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 80069ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b0:	4a1a      	ldr	r2, [pc, #104]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 80069b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069b8:	e00f      	b.n	80069da <RCCEx_PLL2_Config+0x1fa>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d106      	bne.n	80069ce <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80069c0:	4b16      	ldr	r3, [pc, #88]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 80069c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c4:	4a15      	ldr	r2, [pc, #84]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 80069c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069cc:	e005      	b.n	80069da <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80069ce:	4b13      	ldr	r3, [pc, #76]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 80069d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d2:	4a12      	ldr	r2, [pc, #72]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 80069d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80069da:	4b10      	ldr	r3, [pc, #64]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a0f      	ldr	r2, [pc, #60]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 80069e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069e6:	f7fa fd29 	bl	800143c <HAL_GetTick>
 80069ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80069ec:	e008      	b.n	8006a00 <RCCEx_PLL2_Config+0x220>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80069ee:	f7fa fd25 	bl	800143c <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d901      	bls.n	8006a00 <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e006      	b.n	8006a0e <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a00:	4b06      	ldr	r3, [pc, #24]	; (8006a1c <RCCEx_PLL2_Config+0x23c>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d0f0      	beq.n	80069ee <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	08018384 	.word	0x08018384
 8006a1c:	58024400 	.word	0x58024400
 8006a20:	ffff0007 	.word	0xffff0007

08006a24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <RCCEx_PLL3_Config+0x1e>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b3f      	cmp	r3, #63	; 0x3f
 8006a40:	d904      	bls.n	8006a4c <RCCEx_PLL3_Config+0x28>
 8006a42:	f640 41e7 	movw	r1, #3303	; 0xce7
 8006a46:	4887      	ldr	r0, [pc, #540]	; (8006c64 <RCCEx_PLL3_Config+0x240>)
 8006a48:	f7fa f8e1 	bl	8000c0e <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	2b03      	cmp	r3, #3
 8006a52:	d904      	bls.n	8006a5e <RCCEx_PLL3_Config+0x3a>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a5c:	d904      	bls.n	8006a68 <RCCEx_PLL3_Config+0x44>
 8006a5e:	f640 41e8 	movw	r1, #3304	; 0xce8
 8006a62:	4880      	ldr	r0, [pc, #512]	; (8006c64 <RCCEx_PLL3_Config+0x240>)
 8006a64:	f7fa f8d3 	bl	8000c0e <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <RCCEx_PLL3_Config+0x54>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	2b80      	cmp	r3, #128	; 0x80
 8006a76:	d904      	bls.n	8006a82 <RCCEx_PLL3_Config+0x5e>
 8006a78:	f640 41e9 	movw	r1, #3305	; 0xce9
 8006a7c:	4879      	ldr	r0, [pc, #484]	; (8006c64 <RCCEx_PLL3_Config+0x240>)
 8006a7e:	f7fa f8c6 	bl	8000c0e <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d003      	beq.n	8006a92 <RCCEx_PLL3_Config+0x6e>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	2b80      	cmp	r3, #128	; 0x80
 8006a90:	d904      	bls.n	8006a9c <RCCEx_PLL3_Config+0x78>
 8006a92:	f640 41ea 	movw	r1, #3306	; 0xcea
 8006a96:	4873      	ldr	r0, [pc, #460]	; (8006c64 <RCCEx_PLL3_Config+0x240>)
 8006a98:	f7fa f8b9 	bl	8000c0e <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <RCCEx_PLL3_Config+0x88>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	2b80      	cmp	r3, #128	; 0x80
 8006aaa:	d904      	bls.n	8006ab6 <RCCEx_PLL3_Config+0x92>
 8006aac:	f640 41eb 	movw	r1, #3307	; 0xceb
 8006ab0:	486c      	ldr	r0, [pc, #432]	; (8006c64 <RCCEx_PLL3_Config+0x240>)
 8006ab2:	f7fa f8ac 	bl	8000c0e <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d013      	beq.n	8006ae6 <RCCEx_PLL3_Config+0xc2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ac6:	d00e      	beq.n	8006ae6 <RCCEx_PLL3_Config+0xc2>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ad0:	d009      	beq.n	8006ae6 <RCCEx_PLL3_Config+0xc2>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ada:	d004      	beq.n	8006ae6 <RCCEx_PLL3_Config+0xc2>
 8006adc:	f640 41ec 	movw	r1, #3308	; 0xcec
 8006ae0:	4860      	ldr	r0, [pc, #384]	; (8006c64 <RCCEx_PLL3_Config+0x240>)
 8006ae2:	f7fa f894 	bl	8000c0e <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d009      	beq.n	8006b02 <RCCEx_PLL3_Config+0xde>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006af6:	d004      	beq.n	8006b02 <RCCEx_PLL3_Config+0xde>
 8006af8:	f640 41ed 	movw	r1, #3309	; 0xced
 8006afc:	4859      	ldr	r0, [pc, #356]	; (8006c64 <RCCEx_PLL3_Config+0x240>)
 8006afe:	f7fa f886 	bl	8000c0e <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	69db      	ldr	r3, [r3, #28]
 8006b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b0a:	d304      	bcc.n	8006b16 <RCCEx_PLL3_Config+0xf2>
 8006b0c:	f640 41ee 	movw	r1, #3310	; 0xcee
 8006b10:	4854      	ldr	r0, [pc, #336]	; (8006c64 <RCCEx_PLL3_Config+0x240>)
 8006b12:	f7fa f87c 	bl	8000c0e <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b16:	4b54      	ldr	r3, [pc, #336]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1a:	f003 0303 	and.w	r3, r3, #3
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	d101      	bne.n	8006b26 <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e099      	b.n	8006c5a <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006b26:	4b50      	ldr	r3, [pc, #320]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a4f      	ldr	r2, [pc, #316]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b32:	f7fa fc83 	bl	800143c <HAL_GetTick>
 8006b36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b38:	e008      	b.n	8006b4c <RCCEx_PLL3_Config+0x128>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006b3a:	f7fa fc7f 	bl	800143c <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d901      	bls.n	8006b4c <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e086      	b.n	8006c5a <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b4c:	4b46      	ldr	r3, [pc, #280]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1f0      	bne.n	8006b3a <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006b58:	4b43      	ldr	r3, [pc, #268]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	051b      	lsls	r3, r3, #20
 8006b66:	4940      	ldr	r1, [pc, #256]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	628b      	str	r3, [r1, #40]	; 0x28
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	3b01      	subs	r3, #1
 8006b72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	025b      	lsls	r3, r3, #9
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	431a      	orrs	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	3b01      	subs	r3, #1
 8006b88:	041b      	lsls	r3, r3, #16
 8006b8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	3b01      	subs	r3, #1
 8006b96:	061b      	lsls	r3, r3, #24
 8006b98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b9c:	4932      	ldr	r1, [pc, #200]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006ba2:	4b31      	ldr	r3, [pc, #196]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	492e      	ldr	r1, [pc, #184]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006bb4:	4b2c      	ldr	r3, [pc, #176]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	4929      	ldr	r1, [pc, #164]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006bc6:	4b28      	ldr	r3, [pc, #160]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bca:	4a27      	ldr	r2, [pc, #156]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006bd2:	4b25      	ldr	r3, [pc, #148]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bd6:	4b25      	ldr	r3, [pc, #148]	; (8006c6c <RCCEx_PLL3_Config+0x248>)
 8006bd8:	4013      	ands	r3, r2
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	69d2      	ldr	r2, [r2, #28]
 8006bde:	00d2      	lsls	r2, r2, #3
 8006be0:	4921      	ldr	r1, [pc, #132]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006be6:	4b20      	ldr	r3, [pc, #128]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bea:	4a1f      	ldr	r2, [pc, #124]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d106      	bne.n	8006c06 <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006bf8:	4b1b      	ldr	r3, [pc, #108]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfc:	4a1a      	ldr	r2, [pc, #104]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006bfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c04:	e00f      	b.n	8006c26 <RCCEx_PLL3_Config+0x202>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d106      	bne.n	8006c1a <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006c0c:	4b16      	ldr	r3, [pc, #88]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c10:	4a15      	ldr	r2, [pc, #84]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006c12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006c16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c18:	e005      	b.n	8006c26 <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006c1a:	4b13      	ldr	r3, [pc, #76]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1e:	4a12      	ldr	r2, [pc, #72]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006c20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006c26:	4b10      	ldr	r3, [pc, #64]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a0f      	ldr	r2, [pc, #60]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c32:	f7fa fc03 	bl	800143c <HAL_GetTick>
 8006c36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c38:	e008      	b.n	8006c4c <RCCEx_PLL3_Config+0x228>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006c3a:	f7fa fbff 	bl	800143c <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d901      	bls.n	8006c4c <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e006      	b.n	8006c5a <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c4c:	4b06      	ldr	r3, [pc, #24]	; (8006c68 <RCCEx_PLL3_Config+0x244>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0f0      	beq.n	8006c3a <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	08018384 	.word	0x08018384
 8006c68:	58024400 	.word	0x58024400
 8006c6c:	ffff0007 	.word	0xffff0007

08006c70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e0a1      	b.n	8006dc6 <HAL_TIM_Base_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a52      	ldr	r2, [pc, #328]	; (8006dd0 <HAL_TIM_Base_Init+0x160>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d045      	beq.n	8006d18 <HAL_TIM_Base_Init+0xa8>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c94:	d040      	beq.n	8006d18 <HAL_TIM_Base_Init+0xa8>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a4e      	ldr	r2, [pc, #312]	; (8006dd4 <HAL_TIM_Base_Init+0x164>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d03b      	beq.n	8006d18 <HAL_TIM_Base_Init+0xa8>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a4c      	ldr	r2, [pc, #304]	; (8006dd8 <HAL_TIM_Base_Init+0x168>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d036      	beq.n	8006d18 <HAL_TIM_Base_Init+0xa8>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a4b      	ldr	r2, [pc, #300]	; (8006ddc <HAL_TIM_Base_Init+0x16c>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d031      	beq.n	8006d18 <HAL_TIM_Base_Init+0xa8>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a49      	ldr	r2, [pc, #292]	; (8006de0 <HAL_TIM_Base_Init+0x170>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d02c      	beq.n	8006d18 <HAL_TIM_Base_Init+0xa8>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a48      	ldr	r2, [pc, #288]	; (8006de4 <HAL_TIM_Base_Init+0x174>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d027      	beq.n	8006d18 <HAL_TIM_Base_Init+0xa8>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a46      	ldr	r2, [pc, #280]	; (8006de8 <HAL_TIM_Base_Init+0x178>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d022      	beq.n	8006d18 <HAL_TIM_Base_Init+0xa8>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a45      	ldr	r2, [pc, #276]	; (8006dec <HAL_TIM_Base_Init+0x17c>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d01d      	beq.n	8006d18 <HAL_TIM_Base_Init+0xa8>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a43      	ldr	r2, [pc, #268]	; (8006df0 <HAL_TIM_Base_Init+0x180>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d018      	beq.n	8006d18 <HAL_TIM_Base_Init+0xa8>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a42      	ldr	r2, [pc, #264]	; (8006df4 <HAL_TIM_Base_Init+0x184>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d013      	beq.n	8006d18 <HAL_TIM_Base_Init+0xa8>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a40      	ldr	r2, [pc, #256]	; (8006df8 <HAL_TIM_Base_Init+0x188>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00e      	beq.n	8006d18 <HAL_TIM_Base_Init+0xa8>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a3f      	ldr	r2, [pc, #252]	; (8006dfc <HAL_TIM_Base_Init+0x18c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d009      	beq.n	8006d18 <HAL_TIM_Base_Init+0xa8>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a3d      	ldr	r2, [pc, #244]	; (8006e00 <HAL_TIM_Base_Init+0x190>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d004      	beq.n	8006d18 <HAL_TIM_Base_Init+0xa8>
 8006d0e:	f240 1115 	movw	r1, #277	; 0x115
 8006d12:	483c      	ldr	r0, [pc, #240]	; (8006e04 <HAL_TIM_Base_Init+0x194>)
 8006d14:	f7f9 ff7b 	bl	8000c0e <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d014      	beq.n	8006d4a <HAL_TIM_Base_Init+0xda>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	2b10      	cmp	r3, #16
 8006d26:	d010      	beq.n	8006d4a <HAL_TIM_Base_Init+0xda>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	2b20      	cmp	r3, #32
 8006d2e:	d00c      	beq.n	8006d4a <HAL_TIM_Base_Init+0xda>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	2b40      	cmp	r3, #64	; 0x40
 8006d36:	d008      	beq.n	8006d4a <HAL_TIM_Base_Init+0xda>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	2b60      	cmp	r3, #96	; 0x60
 8006d3e:	d004      	beq.n	8006d4a <HAL_TIM_Base_Init+0xda>
 8006d40:	f44f 718b 	mov.w	r1, #278	; 0x116
 8006d44:	482f      	ldr	r0, [pc, #188]	; (8006e04 <HAL_TIM_Base_Init+0x194>)
 8006d46:	f7f9 ff62 	bl	8000c0e <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00e      	beq.n	8006d70 <HAL_TIM_Base_Init+0x100>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d5a:	d009      	beq.n	8006d70 <HAL_TIM_Base_Init+0x100>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d64:	d004      	beq.n	8006d70 <HAL_TIM_Base_Init+0x100>
 8006d66:	f240 1117 	movw	r1, #279	; 0x117
 8006d6a:	4826      	ldr	r0, [pc, #152]	; (8006e04 <HAL_TIM_Base_Init+0x194>)
 8006d6c:	f7f9 ff4f 	bl	8000c0e <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d008      	beq.n	8006d8a <HAL_TIM_Base_Init+0x11a>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	2b80      	cmp	r3, #128	; 0x80
 8006d7e:	d004      	beq.n	8006d8a <HAL_TIM_Base_Init+0x11a>
 8006d80:	f44f 718c 	mov.w	r1, #280	; 0x118
 8006d84:	481f      	ldr	r0, [pc, #124]	; (8006e04 <HAL_TIM_Base_Init+0x194>)
 8006d86:	f7f9 ff42 	bl	8000c0e <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d106      	bne.n	8006da4 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f832 	bl	8006e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	3304      	adds	r3, #4
 8006db4:	4619      	mov	r1, r3
 8006db6:	4610      	mov	r0, r2
 8006db8:	f000 fa08 	bl	80071cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	40010000 	.word	0x40010000
 8006dd4:	40000400 	.word	0x40000400
 8006dd8:	40000800 	.word	0x40000800
 8006ddc:	40000c00 	.word	0x40000c00
 8006de0:	40001000 	.word	0x40001000
 8006de4:	40001400 	.word	0x40001400
 8006de8:	40010400 	.word	0x40010400
 8006dec:	40001800 	.word	0x40001800
 8006df0:	40001c00 	.word	0x40001c00
 8006df4:	40002000 	.word	0x40002000
 8006df8:	40014000 	.word	0x40014000
 8006dfc:	40014400 	.word	0x40014400
 8006e00:	40014800 	.word	0x40014800
 8006e04:	080183c0 	.word	0x080183c0

08006e08 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a35      	ldr	r2, [pc, #212]	; (8006f00 <HAL_TIM_Base_Start_IT+0xe4>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d045      	beq.n	8006eba <HAL_TIM_Base_Start_IT+0x9e>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e36:	d040      	beq.n	8006eba <HAL_TIM_Base_Start_IT+0x9e>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a31      	ldr	r2, [pc, #196]	; (8006f04 <HAL_TIM_Base_Start_IT+0xe8>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d03b      	beq.n	8006eba <HAL_TIM_Base_Start_IT+0x9e>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a30      	ldr	r2, [pc, #192]	; (8006f08 <HAL_TIM_Base_Start_IT+0xec>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d036      	beq.n	8006eba <HAL_TIM_Base_Start_IT+0x9e>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a2e      	ldr	r2, [pc, #184]	; (8006f0c <HAL_TIM_Base_Start_IT+0xf0>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d031      	beq.n	8006eba <HAL_TIM_Base_Start_IT+0x9e>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a2d      	ldr	r2, [pc, #180]	; (8006f10 <HAL_TIM_Base_Start_IT+0xf4>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d02c      	beq.n	8006eba <HAL_TIM_Base_Start_IT+0x9e>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a2b      	ldr	r2, [pc, #172]	; (8006f14 <HAL_TIM_Base_Start_IT+0xf8>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d027      	beq.n	8006eba <HAL_TIM_Base_Start_IT+0x9e>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a2a      	ldr	r2, [pc, #168]	; (8006f18 <HAL_TIM_Base_Start_IT+0xfc>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d022      	beq.n	8006eba <HAL_TIM_Base_Start_IT+0x9e>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a28      	ldr	r2, [pc, #160]	; (8006f1c <HAL_TIM_Base_Start_IT+0x100>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d01d      	beq.n	8006eba <HAL_TIM_Base_Start_IT+0x9e>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a27      	ldr	r2, [pc, #156]	; (8006f20 <HAL_TIM_Base_Start_IT+0x104>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d018      	beq.n	8006eba <HAL_TIM_Base_Start_IT+0x9e>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a25      	ldr	r2, [pc, #148]	; (8006f24 <HAL_TIM_Base_Start_IT+0x108>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d013      	beq.n	8006eba <HAL_TIM_Base_Start_IT+0x9e>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a24      	ldr	r2, [pc, #144]	; (8006f28 <HAL_TIM_Base_Start_IT+0x10c>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d00e      	beq.n	8006eba <HAL_TIM_Base_Start_IT+0x9e>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a22      	ldr	r2, [pc, #136]	; (8006f2c <HAL_TIM_Base_Start_IT+0x110>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d009      	beq.n	8006eba <HAL_TIM_Base_Start_IT+0x9e>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a21      	ldr	r2, [pc, #132]	; (8006f30 <HAL_TIM_Base_Start_IT+0x114>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d004      	beq.n	8006eba <HAL_TIM_Base_Start_IT+0x9e>
 8006eb0:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8006eb4:	481f      	ldr	r0, [pc, #124]	; (8006f34 <HAL_TIM_Base_Start_IT+0x118>)
 8006eb6:	f7f9 feaa 	bl	8000c0e <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68da      	ldr	r2, [r3, #12]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f042 0201 	orr.w	r2, r2, #1
 8006ec8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689a      	ldr	r2, [r3, #8]
 8006ed0:	4b19      	ldr	r3, [pc, #100]	; (8006f38 <HAL_TIM_Base_Start_IT+0x11c>)
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b06      	cmp	r3, #6
 8006eda:	d00b      	beq.n	8006ef4 <HAL_TIM_Base_Start_IT+0xd8>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee2:	d007      	beq.n	8006ef4 <HAL_TIM_Base_Start_IT+0xd8>
  {
    __HAL_TIM_ENABLE(htim);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0201 	orr.w	r2, r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	40010000 	.word	0x40010000
 8006f04:	40000400 	.word	0x40000400
 8006f08:	40000800 	.word	0x40000800
 8006f0c:	40000c00 	.word	0x40000c00
 8006f10:	40001000 	.word	0x40001000
 8006f14:	40001400 	.word	0x40001400
 8006f18:	40010400 	.word	0x40010400
 8006f1c:	40001800 	.word	0x40001800
 8006f20:	40001c00 	.word	0x40001c00
 8006f24:	40002000 	.word	0x40002000
 8006f28:	40014000 	.word	0x40014000
 8006f2c:	40014400 	.word	0x40014400
 8006f30:	40014800 	.word	0x40014800
 8006f34:	080183c0 	.word	0x080183c0
 8006f38:	00010007 	.word	0x00010007

08006f3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d122      	bne.n	8006f98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	f003 0302 	and.w	r3, r3, #2
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d11b      	bne.n	8006f98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f06f 0202 	mvn.w	r2, #2
 8006f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	f003 0303 	and.w	r3, r3, #3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d003      	beq.n	8006f86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f905 	bl	800718e <HAL_TIM_IC_CaptureCallback>
 8006f84:	e005      	b.n	8006f92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f8f7 	bl	800717a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f908 	bl	80071a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f003 0304 	and.w	r3, r3, #4
 8006fa2:	2b04      	cmp	r3, #4
 8006fa4:	d122      	bne.n	8006fec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f003 0304 	and.w	r3, r3, #4
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	d11b      	bne.n	8006fec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f06f 0204 	mvn.w	r2, #4
 8006fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f8db 	bl	800718e <HAL_TIM_IC_CaptureCallback>
 8006fd8:	e005      	b.n	8006fe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f8cd 	bl	800717a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 f8de 	bl	80071a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	f003 0308 	and.w	r3, r3, #8
 8006ff6:	2b08      	cmp	r3, #8
 8006ff8:	d122      	bne.n	8007040 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f003 0308 	and.w	r3, r3, #8
 8007004:	2b08      	cmp	r3, #8
 8007006:	d11b      	bne.n	8007040 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f06f 0208 	mvn.w	r2, #8
 8007010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2204      	movs	r2, #4
 8007016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	f003 0303 	and.w	r3, r3, #3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f8b1 	bl	800718e <HAL_TIM_IC_CaptureCallback>
 800702c:	e005      	b.n	800703a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f8a3 	bl	800717a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f8b4 	bl	80071a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	f003 0310 	and.w	r3, r3, #16
 800704a:	2b10      	cmp	r3, #16
 800704c:	d122      	bne.n	8007094 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f003 0310 	and.w	r3, r3, #16
 8007058:	2b10      	cmp	r3, #16
 800705a:	d11b      	bne.n	8007094 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f06f 0210 	mvn.w	r2, #16
 8007064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2208      	movs	r2, #8
 800706a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007076:	2b00      	cmp	r3, #0
 8007078:	d003      	beq.n	8007082 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f887 	bl	800718e <HAL_TIM_IC_CaptureCallback>
 8007080:	e005      	b.n	800708e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f879 	bl	800717a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f88a 	bl	80071a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d10e      	bne.n	80070c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d107      	bne.n	80070c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f06f 0201 	mvn.w	r2, #1
 80070b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7f9 fd8e 	bl	8000bdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ca:	2b80      	cmp	r3, #128	; 0x80
 80070cc:	d10e      	bne.n	80070ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d8:	2b80      	cmp	r3, #128	; 0x80
 80070da:	d107      	bne.n	80070ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f914 	bl	8007314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070fa:	d10e      	bne.n	800711a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007106:	2b80      	cmp	r3, #128	; 0x80
 8007108:	d107      	bne.n	800711a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 f907 	bl	8007328 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007124:	2b40      	cmp	r3, #64	; 0x40
 8007126:	d10e      	bne.n	8007146 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007132:	2b40      	cmp	r3, #64	; 0x40
 8007134:	d107      	bne.n	8007146 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800713e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f838 	bl	80071b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	f003 0320 	and.w	r3, r3, #32
 8007150:	2b20      	cmp	r3, #32
 8007152:	d10e      	bne.n	8007172 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f003 0320 	and.w	r3, r3, #32
 800715e:	2b20      	cmp	r3, #32
 8007160:	d107      	bne.n	8007172 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f06f 0220 	mvn.w	r2, #32
 800716a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f8c7 	bl	8007300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007172:	bf00      	nop
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800717a:	b480      	push	{r7}
 800717c:	b083      	sub	sp, #12
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007182:	bf00      	nop
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800718e:	b480      	push	{r7}
 8007190:	b083      	sub	sp, #12
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007196:	bf00      	nop
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b083      	sub	sp, #12
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071aa:	bf00      	nop
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b083      	sub	sp, #12
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071be:	bf00      	nop
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
	...

080071cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a40      	ldr	r2, [pc, #256]	; (80072e0 <TIM_Base_SetConfig+0x114>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d013      	beq.n	800720c <TIM_Base_SetConfig+0x40>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ea:	d00f      	beq.n	800720c <TIM_Base_SetConfig+0x40>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a3d      	ldr	r2, [pc, #244]	; (80072e4 <TIM_Base_SetConfig+0x118>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d00b      	beq.n	800720c <TIM_Base_SetConfig+0x40>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a3c      	ldr	r2, [pc, #240]	; (80072e8 <TIM_Base_SetConfig+0x11c>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d007      	beq.n	800720c <TIM_Base_SetConfig+0x40>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a3b      	ldr	r2, [pc, #236]	; (80072ec <TIM_Base_SetConfig+0x120>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d003      	beq.n	800720c <TIM_Base_SetConfig+0x40>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a3a      	ldr	r2, [pc, #232]	; (80072f0 <TIM_Base_SetConfig+0x124>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d108      	bne.n	800721e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007212:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	4313      	orrs	r3, r2
 800721c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a2f      	ldr	r2, [pc, #188]	; (80072e0 <TIM_Base_SetConfig+0x114>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d01f      	beq.n	8007266 <TIM_Base_SetConfig+0x9a>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800722c:	d01b      	beq.n	8007266 <TIM_Base_SetConfig+0x9a>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a2c      	ldr	r2, [pc, #176]	; (80072e4 <TIM_Base_SetConfig+0x118>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d017      	beq.n	8007266 <TIM_Base_SetConfig+0x9a>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a2b      	ldr	r2, [pc, #172]	; (80072e8 <TIM_Base_SetConfig+0x11c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d013      	beq.n	8007266 <TIM_Base_SetConfig+0x9a>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a2a      	ldr	r2, [pc, #168]	; (80072ec <TIM_Base_SetConfig+0x120>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d00f      	beq.n	8007266 <TIM_Base_SetConfig+0x9a>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a29      	ldr	r2, [pc, #164]	; (80072f0 <TIM_Base_SetConfig+0x124>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d00b      	beq.n	8007266 <TIM_Base_SetConfig+0x9a>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a28      	ldr	r2, [pc, #160]	; (80072f4 <TIM_Base_SetConfig+0x128>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d007      	beq.n	8007266 <TIM_Base_SetConfig+0x9a>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a27      	ldr	r2, [pc, #156]	; (80072f8 <TIM_Base_SetConfig+0x12c>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d003      	beq.n	8007266 <TIM_Base_SetConfig+0x9a>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a26      	ldr	r2, [pc, #152]	; (80072fc <TIM_Base_SetConfig+0x130>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d108      	bne.n	8007278 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800726c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	4313      	orrs	r3, r2
 8007276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	4313      	orrs	r3, r2
 8007284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	689a      	ldr	r2, [r3, #8]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a10      	ldr	r2, [pc, #64]	; (80072e0 <TIM_Base_SetConfig+0x114>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d00f      	beq.n	80072c4 <TIM_Base_SetConfig+0xf8>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a12      	ldr	r2, [pc, #72]	; (80072f0 <TIM_Base_SetConfig+0x124>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d00b      	beq.n	80072c4 <TIM_Base_SetConfig+0xf8>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a11      	ldr	r2, [pc, #68]	; (80072f4 <TIM_Base_SetConfig+0x128>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d007      	beq.n	80072c4 <TIM_Base_SetConfig+0xf8>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a10      	ldr	r2, [pc, #64]	; (80072f8 <TIM_Base_SetConfig+0x12c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d003      	beq.n	80072c4 <TIM_Base_SetConfig+0xf8>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a0f      	ldr	r2, [pc, #60]	; (80072fc <TIM_Base_SetConfig+0x130>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d103      	bne.n	80072cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	691a      	ldr	r2, [r3, #16]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	615a      	str	r2, [r3, #20]
}
 80072d2:	bf00      	nop
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	40010000 	.word	0x40010000
 80072e4:	40000400 	.word	0x40000400
 80072e8:	40000800 	.word	0x40000800
 80072ec:	40000c00 	.word	0x40000c00
 80072f0:	40010400 	.word	0x40010400
 80072f4:	40014000 	.word	0x40014000
 80072f8:	40014400 	.word	0x40014400
 80072fc:	40014800 	.word	0x40014800

08007300 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800731c:	bf00      	nop
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e0ab      	b.n	80074a6 <HAL_UART_Init+0x16a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d032      	beq.n	80073bc <HAL_UART_Init+0x80>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a55      	ldr	r2, [pc, #340]	; (80074b0 <HAL_UART_Init+0x174>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d05f      	beq.n	8007420 <HAL_UART_Init+0xe4>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a53      	ldr	r2, [pc, #332]	; (80074b4 <HAL_UART_Init+0x178>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d05a      	beq.n	8007420 <HAL_UART_Init+0xe4>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a52      	ldr	r2, [pc, #328]	; (80074b8 <HAL_UART_Init+0x17c>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d055      	beq.n	8007420 <HAL_UART_Init+0xe4>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a50      	ldr	r2, [pc, #320]	; (80074bc <HAL_UART_Init+0x180>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d050      	beq.n	8007420 <HAL_UART_Init+0xe4>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a4f      	ldr	r2, [pc, #316]	; (80074c0 <HAL_UART_Init+0x184>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d04b      	beq.n	8007420 <HAL_UART_Init+0xe4>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a4d      	ldr	r2, [pc, #308]	; (80074c4 <HAL_UART_Init+0x188>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d046      	beq.n	8007420 <HAL_UART_Init+0xe4>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a4c      	ldr	r2, [pc, #304]	; (80074c8 <HAL_UART_Init+0x18c>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d041      	beq.n	8007420 <HAL_UART_Init+0xe4>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a4a      	ldr	r2, [pc, #296]	; (80074cc <HAL_UART_Init+0x190>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d03c      	beq.n	8007420 <HAL_UART_Init+0xe4>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a49      	ldr	r2, [pc, #292]	; (80074d0 <HAL_UART_Init+0x194>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d037      	beq.n	8007420 <HAL_UART_Init+0xe4>
 80073b0:	f44f 7199 	mov.w	r1, #306	; 0x132
 80073b4:	4847      	ldr	r0, [pc, #284]	; (80074d4 <HAL_UART_Init+0x198>)
 80073b6:	f7f9 fc2a 	bl	8000c0e <assert_failed>
 80073ba:	e031      	b.n	8007420 <HAL_UART_Init+0xe4>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a3b      	ldr	r2, [pc, #236]	; (80074b0 <HAL_UART_Init+0x174>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d02c      	beq.n	8007420 <HAL_UART_Init+0xe4>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a3a      	ldr	r2, [pc, #232]	; (80074b4 <HAL_UART_Init+0x178>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d027      	beq.n	8007420 <HAL_UART_Init+0xe4>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a38      	ldr	r2, [pc, #224]	; (80074b8 <HAL_UART_Init+0x17c>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d022      	beq.n	8007420 <HAL_UART_Init+0xe4>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a37      	ldr	r2, [pc, #220]	; (80074bc <HAL_UART_Init+0x180>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d01d      	beq.n	8007420 <HAL_UART_Init+0xe4>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a35      	ldr	r2, [pc, #212]	; (80074c0 <HAL_UART_Init+0x184>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d018      	beq.n	8007420 <HAL_UART_Init+0xe4>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a34      	ldr	r2, [pc, #208]	; (80074c4 <HAL_UART_Init+0x188>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d013      	beq.n	8007420 <HAL_UART_Init+0xe4>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a32      	ldr	r2, [pc, #200]	; (80074c8 <HAL_UART_Init+0x18c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d00e      	beq.n	8007420 <HAL_UART_Init+0xe4>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a31      	ldr	r2, [pc, #196]	; (80074cc <HAL_UART_Init+0x190>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d009      	beq.n	8007420 <HAL_UART_Init+0xe4>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a2f      	ldr	r2, [pc, #188]	; (80074d0 <HAL_UART_Init+0x194>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d004      	beq.n	8007420 <HAL_UART_Init+0xe4>
 8007416:	f240 1137 	movw	r1, #311	; 0x137
 800741a:	482e      	ldr	r0, [pc, #184]	; (80074d4 <HAL_UART_Init+0x198>)
 800741c:	f7f9 fbf7 	bl	8000c0e <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007426:	2b00      	cmp	r3, #0
 8007428:	d106      	bne.n	8007438 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7f9 fdde 	bl	8000ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2224      	movs	r2, #36	; 0x24
 800743c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 0201 	bic.w	r2, r2, #1
 800744e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f841 	bl	80074d8 <UART_SetConfig>
 8007456:	4603      	mov	r3, r0
 8007458:	2b01      	cmp	r3, #1
 800745a:	d101      	bne.n	8007460 <HAL_UART_Init+0x124>
  {
    return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e022      	b.n	80074a6 <HAL_UART_Init+0x16a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <HAL_UART_Init+0x132>
  {
    UART_AdvFeatureConfig(huart);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f002 fa93 	bl	8009994 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800747c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800748c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f042 0201 	orr.w	r2, r2, #1
 800749c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f002 fbee 	bl	8009c80 <UART_CheckIdleState>
 80074a4:	4603      	mov	r3, r0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	40011000 	.word	0x40011000
 80074b4:	40004400 	.word	0x40004400
 80074b8:	40004800 	.word	0x40004800
 80074bc:	40004c00 	.word	0x40004c00
 80074c0:	40005000 	.word	0x40005000
 80074c4:	40011400 	.word	0x40011400
 80074c8:	40007800 	.word	0x40007800
 80074cc:	40007c00 	.word	0x40007c00
 80074d0:	58000c00 	.word	0x58000c00
 80074d4:	080183f8 	.word	0x080183f8

080074d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074d8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80074dc:	b090      	sub	sp, #64	; 0x40
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 80074e6:	2300      	movs	r3, #0
 80074e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80074ec:	2300      	movs	r3, #0
 80074ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	4a17      	ldr	r2, [pc, #92]	; (8007554 <UART_SetConfig+0x7c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d904      	bls.n	8007504 <UART_SetConfig+0x2c>
 80074fa:	f640 3134 	movw	r1, #2868	; 0xb34
 80074fe:	4816      	ldr	r0, [pc, #88]	; (8007558 <UART_SetConfig+0x80>)
 8007500:	f7f9 fb85 	bl	8000c0e <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800750c:	d00d      	beq.n	800752a <UART_SetConfig+0x52>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d009      	beq.n	800752a <UART_SetConfig+0x52>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800751e:	d004      	beq.n	800752a <UART_SetConfig+0x52>
 8007520:	f640 3135 	movw	r1, #2869	; 0xb35
 8007524:	480c      	ldr	r0, [pc, #48]	; (8007558 <UART_SetConfig+0x80>)
 8007526:	f7f9 fb72 	bl	8000c0e <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a0b      	ldr	r2, [pc, #44]	; (800755c <UART_SetConfig+0x84>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d115      	bne.n	8007560 <UART_SetConfig+0x88>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d037      	beq.n	80075ac <UART_SetConfig+0xd4>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007544:	d032      	beq.n	80075ac <UART_SetConfig+0xd4>
 8007546:	f640 3138 	movw	r1, #2872	; 0xb38
 800754a:	4803      	ldr	r0, [pc, #12]	; (8007558 <UART_SetConfig+0x80>)
 800754c:	f7f9 fb5f 	bl	8000c0e <assert_failed>
 8007550:	e02c      	b.n	80075ac <UART_SetConfig+0xd4>
 8007552:	bf00      	nop
 8007554:	00bebc20 	.word	0x00bebc20
 8007558:	080183f8 	.word	0x080183f8
 800755c:	58000c00 	.word	0x58000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007568:	d012      	beq.n	8007590 <UART_SetConfig+0xb8>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00e      	beq.n	8007590 <UART_SetConfig+0xb8>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800757a:	d009      	beq.n	8007590 <UART_SetConfig+0xb8>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007584:	d004      	beq.n	8007590 <UART_SetConfig+0xb8>
 8007586:	f640 313c 	movw	r1, #2876	; 0xb3c
 800758a:	48aa      	ldr	r0, [pc, #680]	; (8007834 <UART_SetConfig+0x35c>)
 800758c:	f7f9 fb3f 	bl	8000c0e <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d009      	beq.n	80075ac <UART_SetConfig+0xd4>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a1b      	ldr	r3, [r3, #32]
 800759c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075a0:	d004      	beq.n	80075ac <UART_SetConfig+0xd4>
 80075a2:	f640 313d 	movw	r1, #2877	; 0xb3d
 80075a6:	48a3      	ldr	r0, [pc, #652]	; (8007834 <UART_SetConfig+0x35c>)
 80075a8:	f7f9 fb31 	bl	8000c0e <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00e      	beq.n	80075d2 <UART_SetConfig+0xfa>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075bc:	d009      	beq.n	80075d2 <UART_SetConfig+0xfa>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80075c6:	d004      	beq.n	80075d2 <UART_SetConfig+0xfa>
 80075c8:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 80075cc:	4899      	ldr	r0, [pc, #612]	; (8007834 <UART_SetConfig+0x35c>)
 80075ce:	f7f9 fb1e 	bl	8000c0e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	f023 030c 	bic.w	r3, r3, #12
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d103      	bne.n	80075e6 <UART_SetConfig+0x10e>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d104      	bne.n	80075f0 <UART_SetConfig+0x118>
 80075e6:	f640 3141 	movw	r1, #2881	; 0xb41
 80075ea:	4892      	ldr	r0, [pc, #584]	; (8007834 <UART_SetConfig+0x35c>)
 80075ec:	f7f9 fb0f 	bl	8000c0e <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d013      	beq.n	8007620 <UART_SetConfig+0x148>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007600:	d00e      	beq.n	8007620 <UART_SetConfig+0x148>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800760a:	d009      	beq.n	8007620 <UART_SetConfig+0x148>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007614:	d004      	beq.n	8007620 <UART_SetConfig+0x148>
 8007616:	f640 3142 	movw	r1, #2882	; 0xb42
 800761a:	4886      	ldr	r0, [pc, #536]	; (8007834 <UART_SetConfig+0x35c>)
 800761c:	f7f9 faf7 	bl	8000c0e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d009      	beq.n	800763c <UART_SetConfig+0x164>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	69db      	ldr	r3, [r3, #28]
 800762c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007630:	d004      	beq.n	800763c <UART_SetConfig+0x164>
 8007632:	f640 3143 	movw	r1, #2883	; 0xb43
 8007636:	487f      	ldr	r0, [pc, #508]	; (8007834 <UART_SetConfig+0x35c>)
 8007638:	f7f9 fae9 	bl	8000c0e <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007640:	2b00      	cmp	r3, #0
 8007642:	d030      	beq.n	80076a6 <UART_SetConfig+0x1ce>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007648:	2b01      	cmp	r3, #1
 800764a:	d02c      	beq.n	80076a6 <UART_SetConfig+0x1ce>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007650:	2b02      	cmp	r3, #2
 8007652:	d028      	beq.n	80076a6 <UART_SetConfig+0x1ce>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	2b03      	cmp	r3, #3
 800765a:	d024      	beq.n	80076a6 <UART_SetConfig+0x1ce>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007660:	2b04      	cmp	r3, #4
 8007662:	d020      	beq.n	80076a6 <UART_SetConfig+0x1ce>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007668:	2b05      	cmp	r3, #5
 800766a:	d01c      	beq.n	80076a6 <UART_SetConfig+0x1ce>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	2b06      	cmp	r3, #6
 8007672:	d018      	beq.n	80076a6 <UART_SetConfig+0x1ce>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	2b07      	cmp	r3, #7
 800767a:	d014      	beq.n	80076a6 <UART_SetConfig+0x1ce>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	2b08      	cmp	r3, #8
 8007682:	d010      	beq.n	80076a6 <UART_SetConfig+0x1ce>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007688:	2b09      	cmp	r3, #9
 800768a:	d00c      	beq.n	80076a6 <UART_SetConfig+0x1ce>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007690:	2b0a      	cmp	r3, #10
 8007692:	d008      	beq.n	80076a6 <UART_SetConfig+0x1ce>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007698:	2b0b      	cmp	r3, #11
 800769a:	d004      	beq.n	80076a6 <UART_SetConfig+0x1ce>
 800769c:	f640 3144 	movw	r1, #2884	; 0xb44
 80076a0:	4864      	ldr	r0, [pc, #400]	; (8007834 <UART_SetConfig+0x35c>)
 80076a2:	f7f9 fab4 	bl	8000c0e <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	689a      	ldr	r2, [r3, #8]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	431a      	orrs	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	431a      	orrs	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	69db      	ldr	r3, [r3, #28]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80076c4:	4313      	orrs	r3, r2
 80076c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	4b5a      	ldr	r3, [pc, #360]	; (8007838 <UART_SetConfig+0x360>)
 80076d0:	4013      	ands	r3, r2
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	6812      	ldr	r2, [r2, #0]
 80076d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076d8:	430b      	orrs	r3, r1
 80076da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	68da      	ldr	r2, [r3, #12]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	430a      	orrs	r2, r1
 80076f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a4f      	ldr	r2, [pc, #316]	; (800783c <UART_SetConfig+0x364>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d004      	beq.n	800770c <UART_SetConfig+0x234>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007708:	4313      	orrs	r3, r2
 800770a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689a      	ldr	r2, [r3, #8]
 8007712:	4b4b      	ldr	r3, [pc, #300]	; (8007840 <UART_SetConfig+0x368>)
 8007714:	4013      	ands	r3, r2
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	6812      	ldr	r2, [r2, #0]
 800771a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800771c:	430b      	orrs	r3, r1
 800771e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007726:	f023 010f 	bic.w	r1, r3, #15
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	430a      	orrs	r2, r1
 8007734:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a42      	ldr	r2, [pc, #264]	; (8007844 <UART_SetConfig+0x36c>)
 800773c:	4293      	cmp	r3, r2
 800773e:	f040 8085 	bne.w	800784c <UART_SetConfig+0x374>
 8007742:	4b41      	ldr	r3, [pc, #260]	; (8007848 <UART_SetConfig+0x370>)
 8007744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800774a:	2b28      	cmp	r3, #40	; 0x28
 800774c:	d86c      	bhi.n	8007828 <UART_SetConfig+0x350>
 800774e:	a201      	add	r2, pc, #4	; (adr r2, 8007754 <UART_SetConfig+0x27c>)
 8007750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007754:	080077f9 	.word	0x080077f9
 8007758:	08007829 	.word	0x08007829
 800775c:	08007829 	.word	0x08007829
 8007760:	08007829 	.word	0x08007829
 8007764:	08007829 	.word	0x08007829
 8007768:	08007829 	.word	0x08007829
 800776c:	08007829 	.word	0x08007829
 8007770:	08007829 	.word	0x08007829
 8007774:	08007801 	.word	0x08007801
 8007778:	08007829 	.word	0x08007829
 800777c:	08007829 	.word	0x08007829
 8007780:	08007829 	.word	0x08007829
 8007784:	08007829 	.word	0x08007829
 8007788:	08007829 	.word	0x08007829
 800778c:	08007829 	.word	0x08007829
 8007790:	08007829 	.word	0x08007829
 8007794:	08007809 	.word	0x08007809
 8007798:	08007829 	.word	0x08007829
 800779c:	08007829 	.word	0x08007829
 80077a0:	08007829 	.word	0x08007829
 80077a4:	08007829 	.word	0x08007829
 80077a8:	08007829 	.word	0x08007829
 80077ac:	08007829 	.word	0x08007829
 80077b0:	08007829 	.word	0x08007829
 80077b4:	08007811 	.word	0x08007811
 80077b8:	08007829 	.word	0x08007829
 80077bc:	08007829 	.word	0x08007829
 80077c0:	08007829 	.word	0x08007829
 80077c4:	08007829 	.word	0x08007829
 80077c8:	08007829 	.word	0x08007829
 80077cc:	08007829 	.word	0x08007829
 80077d0:	08007829 	.word	0x08007829
 80077d4:	08007819 	.word	0x08007819
 80077d8:	08007829 	.word	0x08007829
 80077dc:	08007829 	.word	0x08007829
 80077e0:	08007829 	.word	0x08007829
 80077e4:	08007829 	.word	0x08007829
 80077e8:	08007829 	.word	0x08007829
 80077ec:	08007829 	.word	0x08007829
 80077f0:	08007829 	.word	0x08007829
 80077f4:	08007821 	.word	0x08007821
 80077f8:	2301      	movs	r3, #1
 80077fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80077fe:	e23b      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007800:	2304      	movs	r3, #4
 8007802:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007806:	e237      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007808:	2308      	movs	r3, #8
 800780a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800780e:	e233      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007810:	2310      	movs	r3, #16
 8007812:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007816:	e22f      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007818:	2320      	movs	r3, #32
 800781a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800781e:	e22b      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007820:	2340      	movs	r3, #64	; 0x40
 8007822:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007826:	e227      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007828:	2380      	movs	r3, #128	; 0x80
 800782a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800782e:	bf00      	nop
 8007830:	e222      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007832:	bf00      	nop
 8007834:	080183f8 	.word	0x080183f8
 8007838:	cfff69f3 	.word	0xcfff69f3
 800783c:	58000c00 	.word	0x58000c00
 8007840:	11fff4ff 	.word	0x11fff4ff
 8007844:	40011000 	.word	0x40011000
 8007848:	58024400 	.word	0x58024400
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4ac9      	ldr	r2, [pc, #804]	; (8007b78 <UART_SetConfig+0x6a0>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d131      	bne.n	80078ba <UART_SetConfig+0x3e2>
 8007856:	4bc9      	ldr	r3, [pc, #804]	; (8007b7c <UART_SetConfig+0x6a4>)
 8007858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785a:	f003 0307 	and.w	r3, r3, #7
 800785e:	2b05      	cmp	r3, #5
 8007860:	d826      	bhi.n	80078b0 <UART_SetConfig+0x3d8>
 8007862:	a201      	add	r2, pc, #4	; (adr r2, 8007868 <UART_SetConfig+0x390>)
 8007864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007868:	08007881 	.word	0x08007881
 800786c:	08007889 	.word	0x08007889
 8007870:	08007891 	.word	0x08007891
 8007874:	08007899 	.word	0x08007899
 8007878:	080078a1 	.word	0x080078a1
 800787c:	080078a9 	.word	0x080078a9
 8007880:	2300      	movs	r3, #0
 8007882:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007886:	e1f7      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007888:	2304      	movs	r3, #4
 800788a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800788e:	e1f3      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007890:	2308      	movs	r3, #8
 8007892:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007896:	e1ef      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007898:	2310      	movs	r3, #16
 800789a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800789e:	e1eb      	b.n	8007c78 <UART_SetConfig+0x7a0>
 80078a0:	2320      	movs	r3, #32
 80078a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078a6:	e1e7      	b.n	8007c78 <UART_SetConfig+0x7a0>
 80078a8:	2340      	movs	r3, #64	; 0x40
 80078aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078ae:	e1e3      	b.n	8007c78 <UART_SetConfig+0x7a0>
 80078b0:	2380      	movs	r3, #128	; 0x80
 80078b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078b6:	bf00      	nop
 80078b8:	e1de      	b.n	8007c78 <UART_SetConfig+0x7a0>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4ab0      	ldr	r2, [pc, #704]	; (8007b80 <UART_SetConfig+0x6a8>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d132      	bne.n	800792a <UART_SetConfig+0x452>
 80078c4:	4bad      	ldr	r3, [pc, #692]	; (8007b7c <UART_SetConfig+0x6a4>)
 80078c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c8:	f003 0307 	and.w	r3, r3, #7
 80078cc:	2b05      	cmp	r3, #5
 80078ce:	d827      	bhi.n	8007920 <UART_SetConfig+0x448>
 80078d0:	a201      	add	r2, pc, #4	; (adr r2, 80078d8 <UART_SetConfig+0x400>)
 80078d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d6:	bf00      	nop
 80078d8:	080078f1 	.word	0x080078f1
 80078dc:	080078f9 	.word	0x080078f9
 80078e0:	08007901 	.word	0x08007901
 80078e4:	08007909 	.word	0x08007909
 80078e8:	08007911 	.word	0x08007911
 80078ec:	08007919 	.word	0x08007919
 80078f0:	2300      	movs	r3, #0
 80078f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078f6:	e1bf      	b.n	8007c78 <UART_SetConfig+0x7a0>
 80078f8:	2304      	movs	r3, #4
 80078fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078fe:	e1bb      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007900:	2308      	movs	r3, #8
 8007902:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007906:	e1b7      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007908:	2310      	movs	r3, #16
 800790a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800790e:	e1b3      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007910:	2320      	movs	r3, #32
 8007912:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007916:	e1af      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007918:	2340      	movs	r3, #64	; 0x40
 800791a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800791e:	e1ab      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007920:	2380      	movs	r3, #128	; 0x80
 8007922:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007926:	bf00      	nop
 8007928:	e1a6      	b.n	8007c78 <UART_SetConfig+0x7a0>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a95      	ldr	r2, [pc, #596]	; (8007b84 <UART_SetConfig+0x6ac>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d132      	bne.n	800799a <UART_SetConfig+0x4c2>
 8007934:	4b91      	ldr	r3, [pc, #580]	; (8007b7c <UART_SetConfig+0x6a4>)
 8007936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007938:	f003 0307 	and.w	r3, r3, #7
 800793c:	2b05      	cmp	r3, #5
 800793e:	d827      	bhi.n	8007990 <UART_SetConfig+0x4b8>
 8007940:	a201      	add	r2, pc, #4	; (adr r2, 8007948 <UART_SetConfig+0x470>)
 8007942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007946:	bf00      	nop
 8007948:	08007961 	.word	0x08007961
 800794c:	08007969 	.word	0x08007969
 8007950:	08007971 	.word	0x08007971
 8007954:	08007979 	.word	0x08007979
 8007958:	08007981 	.word	0x08007981
 800795c:	08007989 	.word	0x08007989
 8007960:	2300      	movs	r3, #0
 8007962:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007966:	e187      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007968:	2304      	movs	r3, #4
 800796a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800796e:	e183      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007970:	2308      	movs	r3, #8
 8007972:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007976:	e17f      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007978:	2310      	movs	r3, #16
 800797a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800797e:	e17b      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007980:	2320      	movs	r3, #32
 8007982:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007986:	e177      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007988:	2340      	movs	r3, #64	; 0x40
 800798a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800798e:	e173      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007990:	2380      	movs	r3, #128	; 0x80
 8007992:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007996:	bf00      	nop
 8007998:	e16e      	b.n	8007c78 <UART_SetConfig+0x7a0>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a7a      	ldr	r2, [pc, #488]	; (8007b88 <UART_SetConfig+0x6b0>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d132      	bne.n	8007a0a <UART_SetConfig+0x532>
 80079a4:	4b75      	ldr	r3, [pc, #468]	; (8007b7c <UART_SetConfig+0x6a4>)
 80079a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a8:	f003 0307 	and.w	r3, r3, #7
 80079ac:	2b05      	cmp	r3, #5
 80079ae:	d827      	bhi.n	8007a00 <UART_SetConfig+0x528>
 80079b0:	a201      	add	r2, pc, #4	; (adr r2, 80079b8 <UART_SetConfig+0x4e0>)
 80079b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b6:	bf00      	nop
 80079b8:	080079d1 	.word	0x080079d1
 80079bc:	080079d9 	.word	0x080079d9
 80079c0:	080079e1 	.word	0x080079e1
 80079c4:	080079e9 	.word	0x080079e9
 80079c8:	080079f1 	.word	0x080079f1
 80079cc:	080079f9 	.word	0x080079f9
 80079d0:	2300      	movs	r3, #0
 80079d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079d6:	e14f      	b.n	8007c78 <UART_SetConfig+0x7a0>
 80079d8:	2304      	movs	r3, #4
 80079da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079de:	e14b      	b.n	8007c78 <UART_SetConfig+0x7a0>
 80079e0:	2308      	movs	r3, #8
 80079e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079e6:	e147      	b.n	8007c78 <UART_SetConfig+0x7a0>
 80079e8:	2310      	movs	r3, #16
 80079ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079ee:	e143      	b.n	8007c78 <UART_SetConfig+0x7a0>
 80079f0:	2320      	movs	r3, #32
 80079f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079f6:	e13f      	b.n	8007c78 <UART_SetConfig+0x7a0>
 80079f8:	2340      	movs	r3, #64	; 0x40
 80079fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079fe:	e13b      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007a00:	2380      	movs	r3, #128	; 0x80
 8007a02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a06:	bf00      	nop
 8007a08:	e136      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a5f      	ldr	r2, [pc, #380]	; (8007b8c <UART_SetConfig+0x6b4>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d178      	bne.n	8007b06 <UART_SetConfig+0x62e>
 8007a14:	4b59      	ldr	r3, [pc, #356]	; (8007b7c <UART_SetConfig+0x6a4>)
 8007a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a1c:	2b28      	cmp	r3, #40	; 0x28
 8007a1e:	d86d      	bhi.n	8007afc <UART_SetConfig+0x624>
 8007a20:	a201      	add	r2, pc, #4	; (adr r2, 8007a28 <UART_SetConfig+0x550>)
 8007a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a26:	bf00      	nop
 8007a28:	08007acd 	.word	0x08007acd
 8007a2c:	08007afd 	.word	0x08007afd
 8007a30:	08007afd 	.word	0x08007afd
 8007a34:	08007afd 	.word	0x08007afd
 8007a38:	08007afd 	.word	0x08007afd
 8007a3c:	08007afd 	.word	0x08007afd
 8007a40:	08007afd 	.word	0x08007afd
 8007a44:	08007afd 	.word	0x08007afd
 8007a48:	08007ad5 	.word	0x08007ad5
 8007a4c:	08007afd 	.word	0x08007afd
 8007a50:	08007afd 	.word	0x08007afd
 8007a54:	08007afd 	.word	0x08007afd
 8007a58:	08007afd 	.word	0x08007afd
 8007a5c:	08007afd 	.word	0x08007afd
 8007a60:	08007afd 	.word	0x08007afd
 8007a64:	08007afd 	.word	0x08007afd
 8007a68:	08007add 	.word	0x08007add
 8007a6c:	08007afd 	.word	0x08007afd
 8007a70:	08007afd 	.word	0x08007afd
 8007a74:	08007afd 	.word	0x08007afd
 8007a78:	08007afd 	.word	0x08007afd
 8007a7c:	08007afd 	.word	0x08007afd
 8007a80:	08007afd 	.word	0x08007afd
 8007a84:	08007afd 	.word	0x08007afd
 8007a88:	08007ae5 	.word	0x08007ae5
 8007a8c:	08007afd 	.word	0x08007afd
 8007a90:	08007afd 	.word	0x08007afd
 8007a94:	08007afd 	.word	0x08007afd
 8007a98:	08007afd 	.word	0x08007afd
 8007a9c:	08007afd 	.word	0x08007afd
 8007aa0:	08007afd 	.word	0x08007afd
 8007aa4:	08007afd 	.word	0x08007afd
 8007aa8:	08007aed 	.word	0x08007aed
 8007aac:	08007afd 	.word	0x08007afd
 8007ab0:	08007afd 	.word	0x08007afd
 8007ab4:	08007afd 	.word	0x08007afd
 8007ab8:	08007afd 	.word	0x08007afd
 8007abc:	08007afd 	.word	0x08007afd
 8007ac0:	08007afd 	.word	0x08007afd
 8007ac4:	08007afd 	.word	0x08007afd
 8007ac8:	08007af5 	.word	0x08007af5
 8007acc:	2301      	movs	r3, #1
 8007ace:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ad2:	e0d1      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007ad4:	2304      	movs	r3, #4
 8007ad6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ada:	e0cd      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007adc:	2308      	movs	r3, #8
 8007ade:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ae2:	e0c9      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007ae4:	2310      	movs	r3, #16
 8007ae6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007aea:	e0c5      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007aec:	2320      	movs	r3, #32
 8007aee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007af2:	e0c1      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007af4:	2340      	movs	r3, #64	; 0x40
 8007af6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007afa:	e0bd      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007afc:	2380      	movs	r3, #128	; 0x80
 8007afe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b02:	bf00      	nop
 8007b04:	e0b8      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a21      	ldr	r2, [pc, #132]	; (8007b90 <UART_SetConfig+0x6b8>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d141      	bne.n	8007b94 <UART_SetConfig+0x6bc>
 8007b10:	4b1a      	ldr	r3, [pc, #104]	; (8007b7c <UART_SetConfig+0x6a4>)
 8007b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b14:	f003 0307 	and.w	r3, r3, #7
 8007b18:	2b05      	cmp	r3, #5
 8007b1a:	d827      	bhi.n	8007b6c <UART_SetConfig+0x694>
 8007b1c:	a201      	add	r2, pc, #4	; (adr r2, 8007b24 <UART_SetConfig+0x64c>)
 8007b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b22:	bf00      	nop
 8007b24:	08007b3d 	.word	0x08007b3d
 8007b28:	08007b45 	.word	0x08007b45
 8007b2c:	08007b4d 	.word	0x08007b4d
 8007b30:	08007b55 	.word	0x08007b55
 8007b34:	08007b5d 	.word	0x08007b5d
 8007b38:	08007b65 	.word	0x08007b65
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b42:	e099      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007b44:	2304      	movs	r3, #4
 8007b46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b4a:	e095      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007b4c:	2308      	movs	r3, #8
 8007b4e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b52:	e091      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007b54:	2310      	movs	r3, #16
 8007b56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b5a:	e08d      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007b5c:	2320      	movs	r3, #32
 8007b5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b62:	e089      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007b64:	2340      	movs	r3, #64	; 0x40
 8007b66:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b6a:	e085      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007b6c:	2380      	movs	r3, #128	; 0x80
 8007b6e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007b72:	bf00      	nop
 8007b74:	e080      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007b76:	bf00      	nop
 8007b78:	40004400 	.word	0x40004400
 8007b7c:	58024400 	.word	0x58024400
 8007b80:	40004800 	.word	0x40004800
 8007b84:	40004c00 	.word	0x40004c00
 8007b88:	40005000 	.word	0x40005000
 8007b8c:	40011400 	.word	0x40011400
 8007b90:	40007800 	.word	0x40007800
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a98      	ldr	r2, [pc, #608]	; (8007dfc <UART_SetConfig+0x924>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d131      	bne.n	8007c02 <UART_SetConfig+0x72a>
 8007b9e:	4b98      	ldr	r3, [pc, #608]	; (8007e00 <UART_SetConfig+0x928>)
 8007ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba2:	f003 0307 	and.w	r3, r3, #7
 8007ba6:	2b05      	cmp	r3, #5
 8007ba8:	d826      	bhi.n	8007bf8 <UART_SetConfig+0x720>
 8007baa:	a201      	add	r2, pc, #4	; (adr r2, 8007bb0 <UART_SetConfig+0x6d8>)
 8007bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb0:	08007bc9 	.word	0x08007bc9
 8007bb4:	08007bd1 	.word	0x08007bd1
 8007bb8:	08007bd9 	.word	0x08007bd9
 8007bbc:	08007be1 	.word	0x08007be1
 8007bc0:	08007be9 	.word	0x08007be9
 8007bc4:	08007bf1 	.word	0x08007bf1
 8007bc8:	2300      	movs	r3, #0
 8007bca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bce:	e053      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007bd0:	2304      	movs	r3, #4
 8007bd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bd6:	e04f      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007bd8:	2308      	movs	r3, #8
 8007bda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bde:	e04b      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007be0:	2310      	movs	r3, #16
 8007be2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007be6:	e047      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007be8:	2320      	movs	r3, #32
 8007bea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bee:	e043      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007bf0:	2340      	movs	r3, #64	; 0x40
 8007bf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bf6:	e03f      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007bf8:	2380      	movs	r3, #128	; 0x80
 8007bfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bfe:	bf00      	nop
 8007c00:	e03a      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a7f      	ldr	r2, [pc, #508]	; (8007e04 <UART_SetConfig+0x92c>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d132      	bne.n	8007c72 <UART_SetConfig+0x79a>
 8007c0c:	4b7c      	ldr	r3, [pc, #496]	; (8007e00 <UART_SetConfig+0x928>)
 8007c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c10:	f003 0307 	and.w	r3, r3, #7
 8007c14:	2b05      	cmp	r3, #5
 8007c16:	d827      	bhi.n	8007c68 <UART_SetConfig+0x790>
 8007c18:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <UART_SetConfig+0x748>)
 8007c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1e:	bf00      	nop
 8007c20:	08007c39 	.word	0x08007c39
 8007c24:	08007c41 	.word	0x08007c41
 8007c28:	08007c49 	.word	0x08007c49
 8007c2c:	08007c51 	.word	0x08007c51
 8007c30:	08007c59 	.word	0x08007c59
 8007c34:	08007c61 	.word	0x08007c61
 8007c38:	2302      	movs	r3, #2
 8007c3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c3e:	e01b      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007c40:	2304      	movs	r3, #4
 8007c42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c46:	e017      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007c48:	2308      	movs	r3, #8
 8007c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c4e:	e013      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007c50:	2310      	movs	r3, #16
 8007c52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c56:	e00f      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007c58:	2320      	movs	r3, #32
 8007c5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c5e:	e00b      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007c60:	2340      	movs	r3, #64	; 0x40
 8007c62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c66:	e007      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007c68:	2380      	movs	r3, #128	; 0x80
 8007c6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c6e:	bf00      	nop
 8007c70:	e002      	b.n	8007c78 <UART_SetConfig+0x7a0>
 8007c72:	2380      	movs	r3, #128	; 0x80
 8007c74:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a61      	ldr	r2, [pc, #388]	; (8007e04 <UART_SetConfig+0x92c>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	f040 86f3 	bne.w	8008a6a <UART_SetConfig+0x1592>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c84:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007c88:	2b08      	cmp	r3, #8
 8007c8a:	f000 80bd 	beq.w	8007e08 <UART_SetConfig+0x930>
 8007c8e:	2b08      	cmp	r3, #8
 8007c90:	dc04      	bgt.n	8007c9c <UART_SetConfig+0x7c4>
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d00c      	beq.n	8007cb0 <UART_SetConfig+0x7d8>
 8007c96:	2b04      	cmp	r3, #4
 8007c98:	d05b      	beq.n	8007d52 <UART_SetConfig+0x87a>
 8007c9a:	e276      	b.n	800818a <UART_SetConfig+0xcb2>
 8007c9c:	2b20      	cmp	r3, #32
 8007c9e:	f000 81ad 	beq.w	8007ffc <UART_SetConfig+0xb24>
 8007ca2:	2b40      	cmp	r3, #64	; 0x40
 8007ca4:	f000 821a 	beq.w	80080dc <UART_SetConfig+0xc04>
 8007ca8:	2b10      	cmp	r3, #16
 8007caa:	f000 8101 	beq.w	8007eb0 <UART_SetConfig+0x9d8>
 8007cae:	e26c      	b.n	800818a <UART_SetConfig+0xcb2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007cb0:	f7fe fae8 	bl	8006284 <HAL_RCCEx_GetD3PCLK1Freq>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d044      	beq.n	8007d48 <UART_SetConfig+0x870>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d03e      	beq.n	8007d44 <UART_SetConfig+0x86c>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d038      	beq.n	8007d40 <UART_SetConfig+0x868>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d032      	beq.n	8007d3c <UART_SetConfig+0x864>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cda:	2b04      	cmp	r3, #4
 8007cdc:	d02c      	beq.n	8007d38 <UART_SetConfig+0x860>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce2:	2b05      	cmp	r3, #5
 8007ce4:	d026      	beq.n	8007d34 <UART_SetConfig+0x85c>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cea:	2b06      	cmp	r3, #6
 8007cec:	d020      	beq.n	8007d30 <UART_SetConfig+0x858>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf2:	2b07      	cmp	r3, #7
 8007cf4:	d01a      	beq.n	8007d2c <UART_SetConfig+0x854>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfa:	2b08      	cmp	r3, #8
 8007cfc:	d014      	beq.n	8007d28 <UART_SetConfig+0x850>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d02:	2b09      	cmp	r3, #9
 8007d04:	d00e      	beq.n	8007d24 <UART_SetConfig+0x84c>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0a:	2b0a      	cmp	r3, #10
 8007d0c:	d008      	beq.n	8007d20 <UART_SetConfig+0x848>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d12:	2b0b      	cmp	r3, #11
 8007d14:	d102      	bne.n	8007d1c <UART_SetConfig+0x844>
 8007d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d1a:	e016      	b.n	8007d4a <UART_SetConfig+0x872>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e014      	b.n	8007d4a <UART_SetConfig+0x872>
 8007d20:	2380      	movs	r3, #128	; 0x80
 8007d22:	e012      	b.n	8007d4a <UART_SetConfig+0x872>
 8007d24:	2340      	movs	r3, #64	; 0x40
 8007d26:	e010      	b.n	8007d4a <UART_SetConfig+0x872>
 8007d28:	2320      	movs	r3, #32
 8007d2a:	e00e      	b.n	8007d4a <UART_SetConfig+0x872>
 8007d2c:	2310      	movs	r3, #16
 8007d2e:	e00c      	b.n	8007d4a <UART_SetConfig+0x872>
 8007d30:	230c      	movs	r3, #12
 8007d32:	e00a      	b.n	8007d4a <UART_SetConfig+0x872>
 8007d34:	230a      	movs	r3, #10
 8007d36:	e008      	b.n	8007d4a <UART_SetConfig+0x872>
 8007d38:	2308      	movs	r3, #8
 8007d3a:	e006      	b.n	8007d4a <UART_SetConfig+0x872>
 8007d3c:	2306      	movs	r3, #6
 8007d3e:	e004      	b.n	8007d4a <UART_SetConfig+0x872>
 8007d40:	2304      	movs	r3, #4
 8007d42:	e002      	b.n	8007d4a <UART_SetConfig+0x872>
 8007d44:	2302      	movs	r3, #2
 8007d46:	e000      	b.n	8007d4a <UART_SetConfig+0x872>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d50:	e21f      	b.n	8008192 <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d52:	f107 0318 	add.w	r3, r7, #24
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fe faaa 	bl	80062b0 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007d5c:	69fa      	ldr	r2, [r7, #28]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d044      	beq.n	8007df0 <UART_SetConfig+0x918>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d03e      	beq.n	8007dec <UART_SetConfig+0x914>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d038      	beq.n	8007de8 <UART_SetConfig+0x910>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d032      	beq.n	8007de4 <UART_SetConfig+0x90c>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d82:	2b04      	cmp	r3, #4
 8007d84:	d02c      	beq.n	8007de0 <UART_SetConfig+0x908>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	2b05      	cmp	r3, #5
 8007d8c:	d026      	beq.n	8007ddc <UART_SetConfig+0x904>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d92:	2b06      	cmp	r3, #6
 8007d94:	d020      	beq.n	8007dd8 <UART_SetConfig+0x900>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9a:	2b07      	cmp	r3, #7
 8007d9c:	d01a      	beq.n	8007dd4 <UART_SetConfig+0x8fc>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	2b08      	cmp	r3, #8
 8007da4:	d014      	beq.n	8007dd0 <UART_SetConfig+0x8f8>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007daa:	2b09      	cmp	r3, #9
 8007dac:	d00e      	beq.n	8007dcc <UART_SetConfig+0x8f4>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	2b0a      	cmp	r3, #10
 8007db4:	d008      	beq.n	8007dc8 <UART_SetConfig+0x8f0>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dba:	2b0b      	cmp	r3, #11
 8007dbc:	d102      	bne.n	8007dc4 <UART_SetConfig+0x8ec>
 8007dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dc2:	e016      	b.n	8007df2 <UART_SetConfig+0x91a>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e014      	b.n	8007df2 <UART_SetConfig+0x91a>
 8007dc8:	2380      	movs	r3, #128	; 0x80
 8007dca:	e012      	b.n	8007df2 <UART_SetConfig+0x91a>
 8007dcc:	2340      	movs	r3, #64	; 0x40
 8007dce:	e010      	b.n	8007df2 <UART_SetConfig+0x91a>
 8007dd0:	2320      	movs	r3, #32
 8007dd2:	e00e      	b.n	8007df2 <UART_SetConfig+0x91a>
 8007dd4:	2310      	movs	r3, #16
 8007dd6:	e00c      	b.n	8007df2 <UART_SetConfig+0x91a>
 8007dd8:	230c      	movs	r3, #12
 8007dda:	e00a      	b.n	8007df2 <UART_SetConfig+0x91a>
 8007ddc:	230a      	movs	r3, #10
 8007dde:	e008      	b.n	8007df2 <UART_SetConfig+0x91a>
 8007de0:	2308      	movs	r3, #8
 8007de2:	e006      	b.n	8007df2 <UART_SetConfig+0x91a>
 8007de4:	2306      	movs	r3, #6
 8007de6:	e004      	b.n	8007df2 <UART_SetConfig+0x91a>
 8007de8:	2304      	movs	r3, #4
 8007dea:	e002      	b.n	8007df2 <UART_SetConfig+0x91a>
 8007dec:	2302      	movs	r3, #2
 8007dee:	e000      	b.n	8007df2 <UART_SetConfig+0x91a>
 8007df0:	2301      	movs	r3, #1
 8007df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007df8:	e1cb      	b.n	8008192 <UART_SetConfig+0xcba>
 8007dfa:	bf00      	nop
 8007dfc:	40007c00 	.word	0x40007c00
 8007e00:	58024400 	.word	0x58024400
 8007e04:	58000c00 	.word	0x58000c00
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e08:	f107 030c 	add.w	r3, r7, #12
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7fe fb9b 	bl	8006548 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d044      	beq.n	8007ea6 <UART_SetConfig+0x9ce>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d03e      	beq.n	8007ea2 <UART_SetConfig+0x9ca>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d038      	beq.n	8007e9e <UART_SetConfig+0x9c6>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d032      	beq.n	8007e9a <UART_SetConfig+0x9c2>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e38:	2b04      	cmp	r3, #4
 8007e3a:	d02c      	beq.n	8007e96 <UART_SetConfig+0x9be>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e40:	2b05      	cmp	r3, #5
 8007e42:	d026      	beq.n	8007e92 <UART_SetConfig+0x9ba>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e48:	2b06      	cmp	r3, #6
 8007e4a:	d020      	beq.n	8007e8e <UART_SetConfig+0x9b6>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e50:	2b07      	cmp	r3, #7
 8007e52:	d01a      	beq.n	8007e8a <UART_SetConfig+0x9b2>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	2b08      	cmp	r3, #8
 8007e5a:	d014      	beq.n	8007e86 <UART_SetConfig+0x9ae>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	2b09      	cmp	r3, #9
 8007e62:	d00e      	beq.n	8007e82 <UART_SetConfig+0x9aa>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e68:	2b0a      	cmp	r3, #10
 8007e6a:	d008      	beq.n	8007e7e <UART_SetConfig+0x9a6>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e70:	2b0b      	cmp	r3, #11
 8007e72:	d102      	bne.n	8007e7a <UART_SetConfig+0x9a2>
 8007e74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e78:	e016      	b.n	8007ea8 <UART_SetConfig+0x9d0>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	e014      	b.n	8007ea8 <UART_SetConfig+0x9d0>
 8007e7e:	2380      	movs	r3, #128	; 0x80
 8007e80:	e012      	b.n	8007ea8 <UART_SetConfig+0x9d0>
 8007e82:	2340      	movs	r3, #64	; 0x40
 8007e84:	e010      	b.n	8007ea8 <UART_SetConfig+0x9d0>
 8007e86:	2320      	movs	r3, #32
 8007e88:	e00e      	b.n	8007ea8 <UART_SetConfig+0x9d0>
 8007e8a:	2310      	movs	r3, #16
 8007e8c:	e00c      	b.n	8007ea8 <UART_SetConfig+0x9d0>
 8007e8e:	230c      	movs	r3, #12
 8007e90:	e00a      	b.n	8007ea8 <UART_SetConfig+0x9d0>
 8007e92:	230a      	movs	r3, #10
 8007e94:	e008      	b.n	8007ea8 <UART_SetConfig+0x9d0>
 8007e96:	2308      	movs	r3, #8
 8007e98:	e006      	b.n	8007ea8 <UART_SetConfig+0x9d0>
 8007e9a:	2306      	movs	r3, #6
 8007e9c:	e004      	b.n	8007ea8 <UART_SetConfig+0x9d0>
 8007e9e:	2304      	movs	r3, #4
 8007ea0:	e002      	b.n	8007ea8 <UART_SetConfig+0x9d0>
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	e000      	b.n	8007ea8 <UART_SetConfig+0x9d0>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007eae:	e170      	b.n	8008192 <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007eb0:	4b79      	ldr	r3, [pc, #484]	; (8008098 <UART_SetConfig+0xbc0>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 0320 	and.w	r3, r3, #32
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d054      	beq.n	8007f66 <UART_SetConfig+0xa8e>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007ebc:	4b76      	ldr	r3, [pc, #472]	; (8008098 <UART_SetConfig+0xbc0>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	08db      	lsrs	r3, r3, #3
 8007ec2:	f003 0303 	and.w	r3, r3, #3
 8007ec6:	4a75      	ldr	r2, [pc, #468]	; (800809c <UART_SetConfig+0xbc4>)
 8007ec8:	40da      	lsrs	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d044      	beq.n	8007f5c <UART_SetConfig+0xa84>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d03e      	beq.n	8007f58 <UART_SetConfig+0xa80>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d038      	beq.n	8007f54 <UART_SetConfig+0xa7c>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee6:	2b03      	cmp	r3, #3
 8007ee8:	d032      	beq.n	8007f50 <UART_SetConfig+0xa78>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	d02c      	beq.n	8007f4c <UART_SetConfig+0xa74>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef6:	2b05      	cmp	r3, #5
 8007ef8:	d026      	beq.n	8007f48 <UART_SetConfig+0xa70>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	2b06      	cmp	r3, #6
 8007f00:	d020      	beq.n	8007f44 <UART_SetConfig+0xa6c>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f06:	2b07      	cmp	r3, #7
 8007f08:	d01a      	beq.n	8007f40 <UART_SetConfig+0xa68>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0e:	2b08      	cmp	r3, #8
 8007f10:	d014      	beq.n	8007f3c <UART_SetConfig+0xa64>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	2b09      	cmp	r3, #9
 8007f18:	d00e      	beq.n	8007f38 <UART_SetConfig+0xa60>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	2b0a      	cmp	r3, #10
 8007f20:	d008      	beq.n	8007f34 <UART_SetConfig+0xa5c>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f26:	2b0b      	cmp	r3, #11
 8007f28:	d102      	bne.n	8007f30 <UART_SetConfig+0xa58>
 8007f2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f2e:	e016      	b.n	8007f5e <UART_SetConfig+0xa86>
 8007f30:	2301      	movs	r3, #1
 8007f32:	e014      	b.n	8007f5e <UART_SetConfig+0xa86>
 8007f34:	2380      	movs	r3, #128	; 0x80
 8007f36:	e012      	b.n	8007f5e <UART_SetConfig+0xa86>
 8007f38:	2340      	movs	r3, #64	; 0x40
 8007f3a:	e010      	b.n	8007f5e <UART_SetConfig+0xa86>
 8007f3c:	2320      	movs	r3, #32
 8007f3e:	e00e      	b.n	8007f5e <UART_SetConfig+0xa86>
 8007f40:	2310      	movs	r3, #16
 8007f42:	e00c      	b.n	8007f5e <UART_SetConfig+0xa86>
 8007f44:	230c      	movs	r3, #12
 8007f46:	e00a      	b.n	8007f5e <UART_SetConfig+0xa86>
 8007f48:	230a      	movs	r3, #10
 8007f4a:	e008      	b.n	8007f5e <UART_SetConfig+0xa86>
 8007f4c:	2308      	movs	r3, #8
 8007f4e:	e006      	b.n	8007f5e <UART_SetConfig+0xa86>
 8007f50:	2306      	movs	r3, #6
 8007f52:	e004      	b.n	8007f5e <UART_SetConfig+0xa86>
 8007f54:	2304      	movs	r3, #4
 8007f56:	e002      	b.n	8007f5e <UART_SetConfig+0xa86>
 8007f58:	2302      	movs	r3, #2
 8007f5a:	e000      	b.n	8007f5e <UART_SetConfig+0xa86>
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8007f64:	e115      	b.n	8008192 <UART_SetConfig+0xcba>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d043      	beq.n	8007ff6 <UART_SetConfig+0xb1e>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d03d      	beq.n	8007ff2 <UART_SetConfig+0xb1a>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d037      	beq.n	8007fee <UART_SetConfig+0xb16>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	2b03      	cmp	r3, #3
 8007f84:	d031      	beq.n	8007fea <UART_SetConfig+0xb12>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8a:	2b04      	cmp	r3, #4
 8007f8c:	d02b      	beq.n	8007fe6 <UART_SetConfig+0xb0e>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f92:	2b05      	cmp	r3, #5
 8007f94:	d025      	beq.n	8007fe2 <UART_SetConfig+0xb0a>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9a:	2b06      	cmp	r3, #6
 8007f9c:	d01f      	beq.n	8007fde <UART_SetConfig+0xb06>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa2:	2b07      	cmp	r3, #7
 8007fa4:	d019      	beq.n	8007fda <UART_SetConfig+0xb02>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007faa:	2b08      	cmp	r3, #8
 8007fac:	d013      	beq.n	8007fd6 <UART_SetConfig+0xafe>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb2:	2b09      	cmp	r3, #9
 8007fb4:	d00d      	beq.n	8007fd2 <UART_SetConfig+0xafa>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fba:	2b0a      	cmp	r3, #10
 8007fbc:	d007      	beq.n	8007fce <UART_SetConfig+0xaf6>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc2:	2b0b      	cmp	r3, #11
 8007fc4:	d101      	bne.n	8007fca <UART_SetConfig+0xaf2>
 8007fc6:	4b36      	ldr	r3, [pc, #216]	; (80080a0 <UART_SetConfig+0xbc8>)
 8007fc8:	e016      	b.n	8007ff8 <UART_SetConfig+0xb20>
 8007fca:	4b34      	ldr	r3, [pc, #208]	; (800809c <UART_SetConfig+0xbc4>)
 8007fcc:	e014      	b.n	8007ff8 <UART_SetConfig+0xb20>
 8007fce:	4b35      	ldr	r3, [pc, #212]	; (80080a4 <UART_SetConfig+0xbcc>)
 8007fd0:	e012      	b.n	8007ff8 <UART_SetConfig+0xb20>
 8007fd2:	4b35      	ldr	r3, [pc, #212]	; (80080a8 <UART_SetConfig+0xbd0>)
 8007fd4:	e010      	b.n	8007ff8 <UART_SetConfig+0xb20>
 8007fd6:	4b35      	ldr	r3, [pc, #212]	; (80080ac <UART_SetConfig+0xbd4>)
 8007fd8:	e00e      	b.n	8007ff8 <UART_SetConfig+0xb20>
 8007fda:	4b35      	ldr	r3, [pc, #212]	; (80080b0 <UART_SetConfig+0xbd8>)
 8007fdc:	e00c      	b.n	8007ff8 <UART_SetConfig+0xb20>
 8007fde:	4b35      	ldr	r3, [pc, #212]	; (80080b4 <UART_SetConfig+0xbdc>)
 8007fe0:	e00a      	b.n	8007ff8 <UART_SetConfig+0xb20>
 8007fe2:	4b35      	ldr	r3, [pc, #212]	; (80080b8 <UART_SetConfig+0xbe0>)
 8007fe4:	e008      	b.n	8007ff8 <UART_SetConfig+0xb20>
 8007fe6:	4b35      	ldr	r3, [pc, #212]	; (80080bc <UART_SetConfig+0xbe4>)
 8007fe8:	e006      	b.n	8007ff8 <UART_SetConfig+0xb20>
 8007fea:	4b35      	ldr	r3, [pc, #212]	; (80080c0 <UART_SetConfig+0xbe8>)
 8007fec:	e004      	b.n	8007ff8 <UART_SetConfig+0xb20>
 8007fee:	4b35      	ldr	r3, [pc, #212]	; (80080c4 <UART_SetConfig+0xbec>)
 8007ff0:	e002      	b.n	8007ff8 <UART_SetConfig+0xb20>
 8007ff2:	4b35      	ldr	r3, [pc, #212]	; (80080c8 <UART_SetConfig+0xbf0>)
 8007ff4:	e000      	b.n	8007ff8 <UART_SetConfig+0xb20>
 8007ff6:	4b29      	ldr	r3, [pc, #164]	; (800809c <UART_SetConfig+0xbc4>)
 8007ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ffa:	e0ca      	b.n	8008192 <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008000:	2b00      	cmp	r3, #0
 8008002:	d046      	beq.n	8008092 <UART_SetConfig+0xbba>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	2b01      	cmp	r3, #1
 800800a:	d040      	beq.n	800808e <UART_SetConfig+0xbb6>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008010:	2b02      	cmp	r3, #2
 8008012:	d03a      	beq.n	800808a <UART_SetConfig+0xbb2>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008018:	2b03      	cmp	r3, #3
 800801a:	d034      	beq.n	8008086 <UART_SetConfig+0xbae>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008020:	2b04      	cmp	r3, #4
 8008022:	d02e      	beq.n	8008082 <UART_SetConfig+0xbaa>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008028:	2b05      	cmp	r3, #5
 800802a:	d028      	beq.n	800807e <UART_SetConfig+0xba6>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008030:	2b06      	cmp	r3, #6
 8008032:	d022      	beq.n	800807a <UART_SetConfig+0xba2>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008038:	2b07      	cmp	r3, #7
 800803a:	d01c      	beq.n	8008076 <UART_SetConfig+0xb9e>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008040:	2b08      	cmp	r3, #8
 8008042:	d016      	beq.n	8008072 <UART_SetConfig+0xb9a>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008048:	2b09      	cmp	r3, #9
 800804a:	d00f      	beq.n	800806c <UART_SetConfig+0xb94>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008050:	2b0a      	cmp	r3, #10
 8008052:	d008      	beq.n	8008066 <UART_SetConfig+0xb8e>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008058:	2b0b      	cmp	r3, #11
 800805a:	d102      	bne.n	8008062 <UART_SetConfig+0xb8a>
 800805c:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008060:	e018      	b.n	8008094 <UART_SetConfig+0xbbc>
 8008062:	4b13      	ldr	r3, [pc, #76]	; (80080b0 <UART_SetConfig+0xbd8>)
 8008064:	e016      	b.n	8008094 <UART_SetConfig+0xbbc>
 8008066:	f647 2312 	movw	r3, #31250	; 0x7a12
 800806a:	e013      	b.n	8008094 <UART_SetConfig+0xbbc>
 800806c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008070:	e010      	b.n	8008094 <UART_SetConfig+0xbbc>
 8008072:	4b16      	ldr	r3, [pc, #88]	; (80080cc <UART_SetConfig+0xbf4>)
 8008074:	e00e      	b.n	8008094 <UART_SetConfig+0xbbc>
 8008076:	4b0a      	ldr	r3, [pc, #40]	; (80080a0 <UART_SetConfig+0xbc8>)
 8008078:	e00c      	b.n	8008094 <UART_SetConfig+0xbbc>
 800807a:	4b15      	ldr	r3, [pc, #84]	; (80080d0 <UART_SetConfig+0xbf8>)
 800807c:	e00a      	b.n	8008094 <UART_SetConfig+0xbbc>
 800807e:	4b15      	ldr	r3, [pc, #84]	; (80080d4 <UART_SetConfig+0xbfc>)
 8008080:	e008      	b.n	8008094 <UART_SetConfig+0xbbc>
 8008082:	4b08      	ldr	r3, [pc, #32]	; (80080a4 <UART_SetConfig+0xbcc>)
 8008084:	e006      	b.n	8008094 <UART_SetConfig+0xbbc>
 8008086:	4b14      	ldr	r3, [pc, #80]	; (80080d8 <UART_SetConfig+0xc00>)
 8008088:	e004      	b.n	8008094 <UART_SetConfig+0xbbc>
 800808a:	4b07      	ldr	r3, [pc, #28]	; (80080a8 <UART_SetConfig+0xbd0>)
 800808c:	e002      	b.n	8008094 <UART_SetConfig+0xbbc>
 800808e:	4b07      	ldr	r3, [pc, #28]	; (80080ac <UART_SetConfig+0xbd4>)
 8008090:	e000      	b.n	8008094 <UART_SetConfig+0xbbc>
 8008092:	4b07      	ldr	r3, [pc, #28]	; (80080b0 <UART_SetConfig+0xbd8>)
 8008094:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008096:	e07c      	b.n	8008192 <UART_SetConfig+0xcba>
 8008098:	58024400 	.word	0x58024400
 800809c:	03d09000 	.word	0x03d09000
 80080a0:	0003d090 	.word	0x0003d090
 80080a4:	0007a120 	.word	0x0007a120
 80080a8:	000f4240 	.word	0x000f4240
 80080ac:	001e8480 	.word	0x001e8480
 80080b0:	003d0900 	.word	0x003d0900
 80080b4:	00516155 	.word	0x00516155
 80080b8:	0061a800 	.word	0x0061a800
 80080bc:	007a1200 	.word	0x007a1200
 80080c0:	00a2c2aa 	.word	0x00a2c2aa
 80080c4:	00f42400 	.word	0x00f42400
 80080c8:	01e84800 	.word	0x01e84800
 80080cc:	0001e848 	.word	0x0001e848
 80080d0:	00051615 	.word	0x00051615
 80080d4:	00061a80 	.word	0x00061a80
 80080d8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d04e      	beq.n	8008182 <UART_SetConfig+0xcaa>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d047      	beq.n	800817c <UART_SetConfig+0xca4>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d040      	beq.n	8008176 <UART_SetConfig+0xc9e>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f8:	2b03      	cmp	r3, #3
 80080fa:	d039      	beq.n	8008170 <UART_SetConfig+0xc98>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008100:	2b04      	cmp	r3, #4
 8008102:	d032      	beq.n	800816a <UART_SetConfig+0xc92>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008108:	2b05      	cmp	r3, #5
 800810a:	d02b      	beq.n	8008164 <UART_SetConfig+0xc8c>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008110:	2b06      	cmp	r3, #6
 8008112:	d024      	beq.n	800815e <UART_SetConfig+0xc86>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	2b07      	cmp	r3, #7
 800811a:	d01d      	beq.n	8008158 <UART_SetConfig+0xc80>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	2b08      	cmp	r3, #8
 8008122:	d016      	beq.n	8008152 <UART_SetConfig+0xc7a>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008128:	2b09      	cmp	r3, #9
 800812a:	d00f      	beq.n	800814c <UART_SetConfig+0xc74>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008130:	2b0a      	cmp	r3, #10
 8008132:	d008      	beq.n	8008146 <UART_SetConfig+0xc6e>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	2b0b      	cmp	r3, #11
 800813a:	d101      	bne.n	8008140 <UART_SetConfig+0xc68>
 800813c:	2380      	movs	r3, #128	; 0x80
 800813e:	e022      	b.n	8008186 <UART_SetConfig+0xcae>
 8008140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008144:	e01f      	b.n	8008186 <UART_SetConfig+0xcae>
 8008146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800814a:	e01c      	b.n	8008186 <UART_SetConfig+0xcae>
 800814c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008150:	e019      	b.n	8008186 <UART_SetConfig+0xcae>
 8008152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008156:	e016      	b.n	8008186 <UART_SetConfig+0xcae>
 8008158:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800815c:	e013      	b.n	8008186 <UART_SetConfig+0xcae>
 800815e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008162:	e010      	b.n	8008186 <UART_SetConfig+0xcae>
 8008164:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008168:	e00d      	b.n	8008186 <UART_SetConfig+0xcae>
 800816a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800816e:	e00a      	b.n	8008186 <UART_SetConfig+0xcae>
 8008170:	f241 5355 	movw	r3, #5461	; 0x1555
 8008174:	e007      	b.n	8008186 <UART_SetConfig+0xcae>
 8008176:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800817a:	e004      	b.n	8008186 <UART_SetConfig+0xcae>
 800817c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008180:	e001      	b.n	8008186 <UART_SetConfig+0xcae>
 8008182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008186:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008188:	e003      	b.n	8008192 <UART_SetConfig+0xcba>
      default:
        ret = HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008190:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8008192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008194:	2b00      	cmp	r3, #0
 8008196:	f001 83e8 	beq.w	800996a <UART_SetConfig+0x2492>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	685a      	ldr	r2, [r3, #4]
 800819e:	4613      	mov	r3, r2
 80081a0:	005b      	lsls	r3, r3, #1
 80081a2:	4413      	add	r3, r2
 80081a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d305      	bcc.n	80081b6 <UART_SetConfig+0xcde>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d904      	bls.n	80081c0 <UART_SetConfig+0xce8>
      {
        ret = HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081bc:	f001 bbd5 	b.w	800996a <UART_SetConfig+0x2492>
      }
      else
      {
        switch (clocksource)
 80081c0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80081c4:	2b08      	cmp	r3, #8
 80081c6:	f000 8154 	beq.w	8008472 <UART_SetConfig+0xf9a>
 80081ca:	2b08      	cmp	r3, #8
 80081cc:	dc06      	bgt.n	80081dc <UART_SetConfig+0xd04>
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	d00f      	beq.n	80081f2 <UART_SetConfig+0xd1a>
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	f000 80ac 	beq.w	8008330 <UART_SetConfig+0xe58>
 80081d8:	f000 bc30 	b.w	8008a3c <UART_SetConfig+0x1564>
 80081dc:	2b20      	cmp	r3, #32
 80081de:	f000 832d 	beq.w	800883c <UART_SetConfig+0x1364>
 80081e2:	2b40      	cmp	r3, #64	; 0x40
 80081e4:	f000 83a5 	beq.w	8008932 <UART_SetConfig+0x145a>
 80081e8:	2b10      	cmp	r3, #16
 80081ea:	f000 81e3 	beq.w	80085b4 <UART_SetConfig+0x10dc>
 80081ee:	f000 bc25 	b.w	8008a3c <UART_SetConfig+0x1564>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80081f2:	f7fe f847 	bl	8006284 <HAL_RCCEx_GetD3PCLK1Freq>
 80081f6:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fa:	4618      	mov	r0, r3
 80081fc:	f04f 0100 	mov.w	r1, #0
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008204:	2b00      	cmp	r3, #0
 8008206:	d067      	beq.n	80082d8 <UART_SetConfig+0xe00>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820c:	2b01      	cmp	r3, #1
 800820e:	d05e      	beq.n	80082ce <UART_SetConfig+0xdf6>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008214:	2b02      	cmp	r3, #2
 8008216:	d055      	beq.n	80082c4 <UART_SetConfig+0xdec>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821c:	2b03      	cmp	r3, #3
 800821e:	d04c      	beq.n	80082ba <UART_SetConfig+0xde2>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008224:	2b04      	cmp	r3, #4
 8008226:	d043      	beq.n	80082b0 <UART_SetConfig+0xdd8>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822c:	2b05      	cmp	r3, #5
 800822e:	d03a      	beq.n	80082a6 <UART_SetConfig+0xdce>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008234:	2b06      	cmp	r3, #6
 8008236:	d031      	beq.n	800829c <UART_SetConfig+0xdc4>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823c:	2b07      	cmp	r3, #7
 800823e:	d028      	beq.n	8008292 <UART_SetConfig+0xdba>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	2b08      	cmp	r3, #8
 8008246:	d01f      	beq.n	8008288 <UART_SetConfig+0xdb0>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824c:	2b09      	cmp	r3, #9
 800824e:	d016      	beq.n	800827e <UART_SetConfig+0xda6>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008254:	2b0a      	cmp	r3, #10
 8008256:	d00d      	beq.n	8008274 <UART_SetConfig+0xd9c>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825c:	2b0b      	cmp	r3, #11
 800825e:	d104      	bne.n	800826a <UART_SetConfig+0xd92>
 8008260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008264:	f04f 0400 	mov.w	r4, #0
 8008268:	e03a      	b.n	80082e0 <UART_SetConfig+0xe08>
 800826a:	f04f 0301 	mov.w	r3, #1
 800826e:	f04f 0400 	mov.w	r4, #0
 8008272:	e035      	b.n	80082e0 <UART_SetConfig+0xe08>
 8008274:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008278:	f04f 0400 	mov.w	r4, #0
 800827c:	e030      	b.n	80082e0 <UART_SetConfig+0xe08>
 800827e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008282:	f04f 0400 	mov.w	r4, #0
 8008286:	e02b      	b.n	80082e0 <UART_SetConfig+0xe08>
 8008288:	f04f 0320 	mov.w	r3, #32
 800828c:	f04f 0400 	mov.w	r4, #0
 8008290:	e026      	b.n	80082e0 <UART_SetConfig+0xe08>
 8008292:	f04f 0310 	mov.w	r3, #16
 8008296:	f04f 0400 	mov.w	r4, #0
 800829a:	e021      	b.n	80082e0 <UART_SetConfig+0xe08>
 800829c:	f04f 030c 	mov.w	r3, #12
 80082a0:	f04f 0400 	mov.w	r4, #0
 80082a4:	e01c      	b.n	80082e0 <UART_SetConfig+0xe08>
 80082a6:	f04f 030a 	mov.w	r3, #10
 80082aa:	f04f 0400 	mov.w	r4, #0
 80082ae:	e017      	b.n	80082e0 <UART_SetConfig+0xe08>
 80082b0:	f04f 0308 	mov.w	r3, #8
 80082b4:	f04f 0400 	mov.w	r4, #0
 80082b8:	e012      	b.n	80082e0 <UART_SetConfig+0xe08>
 80082ba:	f04f 0306 	mov.w	r3, #6
 80082be:	f04f 0400 	mov.w	r4, #0
 80082c2:	e00d      	b.n	80082e0 <UART_SetConfig+0xe08>
 80082c4:	f04f 0304 	mov.w	r3, #4
 80082c8:	f04f 0400 	mov.w	r4, #0
 80082cc:	e008      	b.n	80082e0 <UART_SetConfig+0xe08>
 80082ce:	f04f 0302 	mov.w	r3, #2
 80082d2:	f04f 0400 	mov.w	r4, #0
 80082d6:	e003      	b.n	80082e0 <UART_SetConfig+0xe08>
 80082d8:	f04f 0301 	mov.w	r3, #1
 80082dc:	f04f 0400 	mov.w	r4, #0
 80082e0:	461a      	mov	r2, r3
 80082e2:	4623      	mov	r3, r4
 80082e4:	f7f8 f84c 	bl	8000380 <__aeabi_uldivmod>
 80082e8:	4603      	mov	r3, r0
 80082ea:	460c      	mov	r4, r1
 80082ec:	4619      	mov	r1, r3
 80082ee:	4622      	mov	r2, r4
 80082f0:	f04f 0300 	mov.w	r3, #0
 80082f4:	f04f 0400 	mov.w	r4, #0
 80082f8:	0214      	lsls	r4, r2, #8
 80082fa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80082fe:	020b      	lsls	r3, r1, #8
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	6852      	ldr	r2, [r2, #4]
 8008304:	0852      	lsrs	r2, r2, #1
 8008306:	4611      	mov	r1, r2
 8008308:	f04f 0200 	mov.w	r2, #0
 800830c:	eb13 0b01 	adds.w	fp, r3, r1
 8008310:	eb44 0c02 	adc.w	ip, r4, r2
 8008314:	4658      	mov	r0, fp
 8008316:	4661      	mov	r1, ip
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	f04f 0400 	mov.w	r4, #0
 8008320:	461a      	mov	r2, r3
 8008322:	4623      	mov	r3, r4
 8008324:	f7f8 f82c 	bl	8000380 <__aeabi_uldivmod>
 8008328:	4603      	mov	r3, r0
 800832a:	460c      	mov	r4, r1
 800832c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800832e:	e389      	b.n	8008a44 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008330:	f107 0318 	add.w	r3, r7, #24
 8008334:	4618      	mov	r0, r3
 8008336:	f7fd ffbb 	bl	80062b0 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	4618      	mov	r0, r3
 800833e:	f04f 0100 	mov.w	r1, #0
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008346:	2b00      	cmp	r3, #0
 8008348:	d067      	beq.n	800841a <UART_SetConfig+0xf42>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834e:	2b01      	cmp	r3, #1
 8008350:	d05e      	beq.n	8008410 <UART_SetConfig+0xf38>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008356:	2b02      	cmp	r3, #2
 8008358:	d055      	beq.n	8008406 <UART_SetConfig+0xf2e>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	2b03      	cmp	r3, #3
 8008360:	d04c      	beq.n	80083fc <UART_SetConfig+0xf24>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	2b04      	cmp	r3, #4
 8008368:	d043      	beq.n	80083f2 <UART_SetConfig+0xf1a>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836e:	2b05      	cmp	r3, #5
 8008370:	d03a      	beq.n	80083e8 <UART_SetConfig+0xf10>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008376:	2b06      	cmp	r3, #6
 8008378:	d031      	beq.n	80083de <UART_SetConfig+0xf06>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837e:	2b07      	cmp	r3, #7
 8008380:	d028      	beq.n	80083d4 <UART_SetConfig+0xefc>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008386:	2b08      	cmp	r3, #8
 8008388:	d01f      	beq.n	80083ca <UART_SetConfig+0xef2>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838e:	2b09      	cmp	r3, #9
 8008390:	d016      	beq.n	80083c0 <UART_SetConfig+0xee8>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008396:	2b0a      	cmp	r3, #10
 8008398:	d00d      	beq.n	80083b6 <UART_SetConfig+0xede>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839e:	2b0b      	cmp	r3, #11
 80083a0:	d104      	bne.n	80083ac <UART_SetConfig+0xed4>
 80083a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083a6:	f04f 0400 	mov.w	r4, #0
 80083aa:	e03a      	b.n	8008422 <UART_SetConfig+0xf4a>
 80083ac:	f04f 0301 	mov.w	r3, #1
 80083b0:	f04f 0400 	mov.w	r4, #0
 80083b4:	e035      	b.n	8008422 <UART_SetConfig+0xf4a>
 80083b6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80083ba:	f04f 0400 	mov.w	r4, #0
 80083be:	e030      	b.n	8008422 <UART_SetConfig+0xf4a>
 80083c0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80083c4:	f04f 0400 	mov.w	r4, #0
 80083c8:	e02b      	b.n	8008422 <UART_SetConfig+0xf4a>
 80083ca:	f04f 0320 	mov.w	r3, #32
 80083ce:	f04f 0400 	mov.w	r4, #0
 80083d2:	e026      	b.n	8008422 <UART_SetConfig+0xf4a>
 80083d4:	f04f 0310 	mov.w	r3, #16
 80083d8:	f04f 0400 	mov.w	r4, #0
 80083dc:	e021      	b.n	8008422 <UART_SetConfig+0xf4a>
 80083de:	f04f 030c 	mov.w	r3, #12
 80083e2:	f04f 0400 	mov.w	r4, #0
 80083e6:	e01c      	b.n	8008422 <UART_SetConfig+0xf4a>
 80083e8:	f04f 030a 	mov.w	r3, #10
 80083ec:	f04f 0400 	mov.w	r4, #0
 80083f0:	e017      	b.n	8008422 <UART_SetConfig+0xf4a>
 80083f2:	f04f 0308 	mov.w	r3, #8
 80083f6:	f04f 0400 	mov.w	r4, #0
 80083fa:	e012      	b.n	8008422 <UART_SetConfig+0xf4a>
 80083fc:	f04f 0306 	mov.w	r3, #6
 8008400:	f04f 0400 	mov.w	r4, #0
 8008404:	e00d      	b.n	8008422 <UART_SetConfig+0xf4a>
 8008406:	f04f 0304 	mov.w	r3, #4
 800840a:	f04f 0400 	mov.w	r4, #0
 800840e:	e008      	b.n	8008422 <UART_SetConfig+0xf4a>
 8008410:	f04f 0302 	mov.w	r3, #2
 8008414:	f04f 0400 	mov.w	r4, #0
 8008418:	e003      	b.n	8008422 <UART_SetConfig+0xf4a>
 800841a:	f04f 0301 	mov.w	r3, #1
 800841e:	f04f 0400 	mov.w	r4, #0
 8008422:	461a      	mov	r2, r3
 8008424:	4623      	mov	r3, r4
 8008426:	f7f7 ffab 	bl	8000380 <__aeabi_uldivmod>
 800842a:	4603      	mov	r3, r0
 800842c:	460c      	mov	r4, r1
 800842e:	4619      	mov	r1, r3
 8008430:	4622      	mov	r2, r4
 8008432:	f04f 0300 	mov.w	r3, #0
 8008436:	f04f 0400 	mov.w	r4, #0
 800843a:	0214      	lsls	r4, r2, #8
 800843c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008440:	020b      	lsls	r3, r1, #8
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	6852      	ldr	r2, [r2, #4]
 8008446:	0852      	lsrs	r2, r2, #1
 8008448:	4611      	mov	r1, r2
 800844a:	f04f 0200 	mov.w	r2, #0
 800844e:	eb13 0b01 	adds.w	fp, r3, r1
 8008452:	eb44 0c02 	adc.w	ip, r4, r2
 8008456:	4658      	mov	r0, fp
 8008458:	4661      	mov	r1, ip
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	f04f 0400 	mov.w	r4, #0
 8008462:	461a      	mov	r2, r3
 8008464:	4623      	mov	r3, r4
 8008466:	f7f7 ff8b 	bl	8000380 <__aeabi_uldivmod>
 800846a:	4603      	mov	r3, r0
 800846c:	460c      	mov	r4, r1
 800846e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008470:	e2e8      	b.n	8008a44 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008472:	f107 030c 	add.w	r3, r7, #12
 8008476:	4618      	mov	r0, r3
 8008478:	f7fe f866 	bl	8006548 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	4618      	mov	r0, r3
 8008480:	f04f 0100 	mov.w	r1, #0
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008488:	2b00      	cmp	r3, #0
 800848a:	d067      	beq.n	800855c <UART_SetConfig+0x1084>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008490:	2b01      	cmp	r3, #1
 8008492:	d05e      	beq.n	8008552 <UART_SetConfig+0x107a>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008498:	2b02      	cmp	r3, #2
 800849a:	d055      	beq.n	8008548 <UART_SetConfig+0x1070>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d04c      	beq.n	800853e <UART_SetConfig+0x1066>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a8:	2b04      	cmp	r3, #4
 80084aa:	d043      	beq.n	8008534 <UART_SetConfig+0x105c>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b0:	2b05      	cmp	r3, #5
 80084b2:	d03a      	beq.n	800852a <UART_SetConfig+0x1052>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b8:	2b06      	cmp	r3, #6
 80084ba:	d031      	beq.n	8008520 <UART_SetConfig+0x1048>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	2b07      	cmp	r3, #7
 80084c2:	d028      	beq.n	8008516 <UART_SetConfig+0x103e>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c8:	2b08      	cmp	r3, #8
 80084ca:	d01f      	beq.n	800850c <UART_SetConfig+0x1034>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d0:	2b09      	cmp	r3, #9
 80084d2:	d016      	beq.n	8008502 <UART_SetConfig+0x102a>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d8:	2b0a      	cmp	r3, #10
 80084da:	d00d      	beq.n	80084f8 <UART_SetConfig+0x1020>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e0:	2b0b      	cmp	r3, #11
 80084e2:	d104      	bne.n	80084ee <UART_SetConfig+0x1016>
 80084e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084e8:	f04f 0400 	mov.w	r4, #0
 80084ec:	e03a      	b.n	8008564 <UART_SetConfig+0x108c>
 80084ee:	f04f 0301 	mov.w	r3, #1
 80084f2:	f04f 0400 	mov.w	r4, #0
 80084f6:	e035      	b.n	8008564 <UART_SetConfig+0x108c>
 80084f8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80084fc:	f04f 0400 	mov.w	r4, #0
 8008500:	e030      	b.n	8008564 <UART_SetConfig+0x108c>
 8008502:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008506:	f04f 0400 	mov.w	r4, #0
 800850a:	e02b      	b.n	8008564 <UART_SetConfig+0x108c>
 800850c:	f04f 0320 	mov.w	r3, #32
 8008510:	f04f 0400 	mov.w	r4, #0
 8008514:	e026      	b.n	8008564 <UART_SetConfig+0x108c>
 8008516:	f04f 0310 	mov.w	r3, #16
 800851a:	f04f 0400 	mov.w	r4, #0
 800851e:	e021      	b.n	8008564 <UART_SetConfig+0x108c>
 8008520:	f04f 030c 	mov.w	r3, #12
 8008524:	f04f 0400 	mov.w	r4, #0
 8008528:	e01c      	b.n	8008564 <UART_SetConfig+0x108c>
 800852a:	f04f 030a 	mov.w	r3, #10
 800852e:	f04f 0400 	mov.w	r4, #0
 8008532:	e017      	b.n	8008564 <UART_SetConfig+0x108c>
 8008534:	f04f 0308 	mov.w	r3, #8
 8008538:	f04f 0400 	mov.w	r4, #0
 800853c:	e012      	b.n	8008564 <UART_SetConfig+0x108c>
 800853e:	f04f 0306 	mov.w	r3, #6
 8008542:	f04f 0400 	mov.w	r4, #0
 8008546:	e00d      	b.n	8008564 <UART_SetConfig+0x108c>
 8008548:	f04f 0304 	mov.w	r3, #4
 800854c:	f04f 0400 	mov.w	r4, #0
 8008550:	e008      	b.n	8008564 <UART_SetConfig+0x108c>
 8008552:	f04f 0302 	mov.w	r3, #2
 8008556:	f04f 0400 	mov.w	r4, #0
 800855a:	e003      	b.n	8008564 <UART_SetConfig+0x108c>
 800855c:	f04f 0301 	mov.w	r3, #1
 8008560:	f04f 0400 	mov.w	r4, #0
 8008564:	461a      	mov	r2, r3
 8008566:	4623      	mov	r3, r4
 8008568:	f7f7 ff0a 	bl	8000380 <__aeabi_uldivmod>
 800856c:	4603      	mov	r3, r0
 800856e:	460c      	mov	r4, r1
 8008570:	4619      	mov	r1, r3
 8008572:	4622      	mov	r2, r4
 8008574:	f04f 0300 	mov.w	r3, #0
 8008578:	f04f 0400 	mov.w	r4, #0
 800857c:	0214      	lsls	r4, r2, #8
 800857e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008582:	020b      	lsls	r3, r1, #8
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	6852      	ldr	r2, [r2, #4]
 8008588:	0852      	lsrs	r2, r2, #1
 800858a:	4611      	mov	r1, r2
 800858c:	f04f 0200 	mov.w	r2, #0
 8008590:	eb13 0b01 	adds.w	fp, r3, r1
 8008594:	eb44 0c02 	adc.w	ip, r4, r2
 8008598:	4658      	mov	r0, fp
 800859a:	4661      	mov	r1, ip
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f04f 0400 	mov.w	r4, #0
 80085a4:	461a      	mov	r2, r3
 80085a6:	4623      	mov	r3, r4
 80085a8:	f7f7 feea 	bl	8000380 <__aeabi_uldivmod>
 80085ac:	4603      	mov	r3, r0
 80085ae:	460c      	mov	r4, r1
 80085b0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80085b2:	e247      	b.n	8008a44 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085b4:	4b96      	ldr	r3, [pc, #600]	; (8008810 <UART_SetConfig+0x1338>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0320 	and.w	r3, r3, #32
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 80a3 	beq.w	8008708 <UART_SetConfig+0x1230>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085c2:	4b93      	ldr	r3, [pc, #588]	; (8008810 <UART_SetConfig+0x1338>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	08db      	lsrs	r3, r3, #3
 80085c8:	f003 0303 	and.w	r3, r3, #3
 80085cc:	4a91      	ldr	r2, [pc, #580]	; (8008814 <UART_SetConfig+0x133c>)
 80085ce:	fa22 f303 	lsr.w	r3, r2, r3
 80085d2:	4618      	mov	r0, r3
 80085d4:	f04f 0100 	mov.w	r1, #0
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d067      	beq.n	80086b0 <UART_SetConfig+0x11d8>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d05e      	beq.n	80086a6 <UART_SetConfig+0x11ce>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d055      	beq.n	800869c <UART_SetConfig+0x11c4>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f4:	2b03      	cmp	r3, #3
 80085f6:	d04c      	beq.n	8008692 <UART_SetConfig+0x11ba>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fc:	2b04      	cmp	r3, #4
 80085fe:	d043      	beq.n	8008688 <UART_SetConfig+0x11b0>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008604:	2b05      	cmp	r3, #5
 8008606:	d03a      	beq.n	800867e <UART_SetConfig+0x11a6>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	2b06      	cmp	r3, #6
 800860e:	d031      	beq.n	8008674 <UART_SetConfig+0x119c>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008614:	2b07      	cmp	r3, #7
 8008616:	d028      	beq.n	800866a <UART_SetConfig+0x1192>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861c:	2b08      	cmp	r3, #8
 800861e:	d01f      	beq.n	8008660 <UART_SetConfig+0x1188>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008624:	2b09      	cmp	r3, #9
 8008626:	d016      	beq.n	8008656 <UART_SetConfig+0x117e>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862c:	2b0a      	cmp	r3, #10
 800862e:	d00d      	beq.n	800864c <UART_SetConfig+0x1174>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008634:	2b0b      	cmp	r3, #11
 8008636:	d104      	bne.n	8008642 <UART_SetConfig+0x116a>
 8008638:	f44f 7380 	mov.w	r3, #256	; 0x100
 800863c:	f04f 0400 	mov.w	r4, #0
 8008640:	e03a      	b.n	80086b8 <UART_SetConfig+0x11e0>
 8008642:	f04f 0301 	mov.w	r3, #1
 8008646:	f04f 0400 	mov.w	r4, #0
 800864a:	e035      	b.n	80086b8 <UART_SetConfig+0x11e0>
 800864c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008650:	f04f 0400 	mov.w	r4, #0
 8008654:	e030      	b.n	80086b8 <UART_SetConfig+0x11e0>
 8008656:	f04f 0340 	mov.w	r3, #64	; 0x40
 800865a:	f04f 0400 	mov.w	r4, #0
 800865e:	e02b      	b.n	80086b8 <UART_SetConfig+0x11e0>
 8008660:	f04f 0320 	mov.w	r3, #32
 8008664:	f04f 0400 	mov.w	r4, #0
 8008668:	e026      	b.n	80086b8 <UART_SetConfig+0x11e0>
 800866a:	f04f 0310 	mov.w	r3, #16
 800866e:	f04f 0400 	mov.w	r4, #0
 8008672:	e021      	b.n	80086b8 <UART_SetConfig+0x11e0>
 8008674:	f04f 030c 	mov.w	r3, #12
 8008678:	f04f 0400 	mov.w	r4, #0
 800867c:	e01c      	b.n	80086b8 <UART_SetConfig+0x11e0>
 800867e:	f04f 030a 	mov.w	r3, #10
 8008682:	f04f 0400 	mov.w	r4, #0
 8008686:	e017      	b.n	80086b8 <UART_SetConfig+0x11e0>
 8008688:	f04f 0308 	mov.w	r3, #8
 800868c:	f04f 0400 	mov.w	r4, #0
 8008690:	e012      	b.n	80086b8 <UART_SetConfig+0x11e0>
 8008692:	f04f 0306 	mov.w	r3, #6
 8008696:	f04f 0400 	mov.w	r4, #0
 800869a:	e00d      	b.n	80086b8 <UART_SetConfig+0x11e0>
 800869c:	f04f 0304 	mov.w	r3, #4
 80086a0:	f04f 0400 	mov.w	r4, #0
 80086a4:	e008      	b.n	80086b8 <UART_SetConfig+0x11e0>
 80086a6:	f04f 0302 	mov.w	r3, #2
 80086aa:	f04f 0400 	mov.w	r4, #0
 80086ae:	e003      	b.n	80086b8 <UART_SetConfig+0x11e0>
 80086b0:	f04f 0301 	mov.w	r3, #1
 80086b4:	f04f 0400 	mov.w	r4, #0
 80086b8:	461a      	mov	r2, r3
 80086ba:	4623      	mov	r3, r4
 80086bc:	f7f7 fe60 	bl	8000380 <__aeabi_uldivmod>
 80086c0:	4603      	mov	r3, r0
 80086c2:	460c      	mov	r4, r1
 80086c4:	4619      	mov	r1, r3
 80086c6:	4622      	mov	r2, r4
 80086c8:	f04f 0300 	mov.w	r3, #0
 80086cc:	f04f 0400 	mov.w	r4, #0
 80086d0:	0214      	lsls	r4, r2, #8
 80086d2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80086d6:	020b      	lsls	r3, r1, #8
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	6852      	ldr	r2, [r2, #4]
 80086dc:	0852      	lsrs	r2, r2, #1
 80086de:	4611      	mov	r1, r2
 80086e0:	f04f 0200 	mov.w	r2, #0
 80086e4:	eb13 0b01 	adds.w	fp, r3, r1
 80086e8:	eb44 0c02 	adc.w	ip, r4, r2
 80086ec:	4658      	mov	r0, fp
 80086ee:	4661      	mov	r1, ip
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	f04f 0400 	mov.w	r4, #0
 80086f8:	461a      	mov	r2, r3
 80086fa:	4623      	mov	r3, r4
 80086fc:	f7f7 fe40 	bl	8000380 <__aeabi_uldivmod>
 8008700:	4603      	mov	r3, r0
 8008702:	460c      	mov	r4, r1
 8008704:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8008706:	e19d      	b.n	8008a44 <UART_SetConfig+0x156c>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870c:	2b00      	cmp	r3, #0
 800870e:	d05b      	beq.n	80087c8 <UART_SetConfig+0x12f0>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	2b01      	cmp	r3, #1
 8008716:	d053      	beq.n	80087c0 <UART_SetConfig+0x12e8>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871c:	2b02      	cmp	r3, #2
 800871e:	d04b      	beq.n	80087b8 <UART_SetConfig+0x12e0>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008724:	2b03      	cmp	r3, #3
 8008726:	d043      	beq.n	80087b0 <UART_SetConfig+0x12d8>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872c:	2b04      	cmp	r3, #4
 800872e:	d03b      	beq.n	80087a8 <UART_SetConfig+0x12d0>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008734:	2b05      	cmp	r3, #5
 8008736:	d033      	beq.n	80087a0 <UART_SetConfig+0x12c8>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873c:	2b06      	cmp	r3, #6
 800873e:	d02b      	beq.n	8008798 <UART_SetConfig+0x12c0>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008744:	2b07      	cmp	r3, #7
 8008746:	d023      	beq.n	8008790 <UART_SetConfig+0x12b8>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874c:	2b08      	cmp	r3, #8
 800874e:	d01b      	beq.n	8008788 <UART_SetConfig+0x12b0>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008754:	2b09      	cmp	r3, #9
 8008756:	d013      	beq.n	8008780 <UART_SetConfig+0x12a8>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875c:	2b0a      	cmp	r3, #10
 800875e:	d00b      	beq.n	8008778 <UART_SetConfig+0x12a0>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008764:	2b0b      	cmp	r3, #11
 8008766:	d103      	bne.n	8008770 <UART_SetConfig+0x1298>
 8008768:	4b2a      	ldr	r3, [pc, #168]	; (8008814 <UART_SetConfig+0x133c>)
 800876a:	f04f 0400 	mov.w	r4, #0
 800876e:	e02e      	b.n	80087ce <UART_SetConfig+0x12f6>
 8008770:	4b29      	ldr	r3, [pc, #164]	; (8008818 <UART_SetConfig+0x1340>)
 8008772:	f04f 0403 	mov.w	r4, #3
 8008776:	e02a      	b.n	80087ce <UART_SetConfig+0x12f6>
 8008778:	4b28      	ldr	r3, [pc, #160]	; (800881c <UART_SetConfig+0x1344>)
 800877a:	f04f 0400 	mov.w	r4, #0
 800877e:	e026      	b.n	80087ce <UART_SetConfig+0x12f6>
 8008780:	4b27      	ldr	r3, [pc, #156]	; (8008820 <UART_SetConfig+0x1348>)
 8008782:	f04f 0400 	mov.w	r4, #0
 8008786:	e022      	b.n	80087ce <UART_SetConfig+0x12f6>
 8008788:	4b26      	ldr	r3, [pc, #152]	; (8008824 <UART_SetConfig+0x134c>)
 800878a:	f04f 0400 	mov.w	r4, #0
 800878e:	e01e      	b.n	80087ce <UART_SetConfig+0x12f6>
 8008790:	4b25      	ldr	r3, [pc, #148]	; (8008828 <UART_SetConfig+0x1350>)
 8008792:	f04f 0400 	mov.w	r4, #0
 8008796:	e01a      	b.n	80087ce <UART_SetConfig+0x12f6>
 8008798:	a419      	add	r4, pc, #100	; (adr r4, 8008800 <UART_SetConfig+0x1328>)
 800879a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800879e:	e016      	b.n	80087ce <UART_SetConfig+0x12f6>
 80087a0:	4b22      	ldr	r3, [pc, #136]	; (800882c <UART_SetConfig+0x1354>)
 80087a2:	f04f 0400 	mov.w	r4, #0
 80087a6:	e012      	b.n	80087ce <UART_SetConfig+0x12f6>
 80087a8:	4b21      	ldr	r3, [pc, #132]	; (8008830 <UART_SetConfig+0x1358>)
 80087aa:	f04f 0400 	mov.w	r4, #0
 80087ae:	e00e      	b.n	80087ce <UART_SetConfig+0x12f6>
 80087b0:	a415      	add	r4, pc, #84	; (adr r4, 8008808 <UART_SetConfig+0x1330>)
 80087b2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80087b6:	e00a      	b.n	80087ce <UART_SetConfig+0x12f6>
 80087b8:	4b1e      	ldr	r3, [pc, #120]	; (8008834 <UART_SetConfig+0x135c>)
 80087ba:	f04f 0400 	mov.w	r4, #0
 80087be:	e006      	b.n	80087ce <UART_SetConfig+0x12f6>
 80087c0:	4b1d      	ldr	r3, [pc, #116]	; (8008838 <UART_SetConfig+0x1360>)
 80087c2:	f04f 0401 	mov.w	r4, #1
 80087c6:	e002      	b.n	80087ce <UART_SetConfig+0x12f6>
 80087c8:	4b13      	ldr	r3, [pc, #76]	; (8008818 <UART_SetConfig+0x1340>)
 80087ca:	f04f 0403 	mov.w	r4, #3
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	6852      	ldr	r2, [r2, #4]
 80087d2:	0852      	lsrs	r2, r2, #1
 80087d4:	4611      	mov	r1, r2
 80087d6:	f04f 0200 	mov.w	r2, #0
 80087da:	eb13 0b01 	adds.w	fp, r3, r1
 80087de:	eb44 0c02 	adc.w	ip, r4, r2
 80087e2:	4658      	mov	r0, fp
 80087e4:	4661      	mov	r1, ip
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f04f 0400 	mov.w	r4, #0
 80087ee:	461a      	mov	r2, r3
 80087f0:	4623      	mov	r3, r4
 80087f2:	f7f7 fdc5 	bl	8000380 <__aeabi_uldivmod>
 80087f6:	4603      	mov	r3, r0
 80087f8:	460c      	mov	r4, r1
 80087fa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80087fc:	e122      	b.n	8008a44 <UART_SetConfig+0x156c>
 80087fe:	bf00      	nop
 8008800:	51615500 	.word	0x51615500
 8008804:	00000000 	.word	0x00000000
 8008808:	a2c2aa00 	.word	0xa2c2aa00
 800880c:	00000000 	.word	0x00000000
 8008810:	58024400 	.word	0x58024400
 8008814:	03d09000 	.word	0x03d09000
 8008818:	d0900000 	.word	0xd0900000
 800881c:	07a12000 	.word	0x07a12000
 8008820:	0f424000 	.word	0x0f424000
 8008824:	1e848000 	.word	0x1e848000
 8008828:	3d090000 	.word	0x3d090000
 800882c:	61a80000 	.word	0x61a80000
 8008830:	7a120000 	.word	0x7a120000
 8008834:	f4240000 	.word	0xf4240000
 8008838:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008840:	2b00      	cmp	r3, #0
 8008842:	d05b      	beq.n	80088fc <UART_SetConfig+0x1424>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	2b01      	cmp	r3, #1
 800884a:	d053      	beq.n	80088f4 <UART_SetConfig+0x141c>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	2b02      	cmp	r3, #2
 8008852:	d04b      	beq.n	80088ec <UART_SetConfig+0x1414>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	2b03      	cmp	r3, #3
 800885a:	d043      	beq.n	80088e4 <UART_SetConfig+0x140c>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008860:	2b04      	cmp	r3, #4
 8008862:	d03b      	beq.n	80088dc <UART_SetConfig+0x1404>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008868:	2b05      	cmp	r3, #5
 800886a:	d033      	beq.n	80088d4 <UART_SetConfig+0x13fc>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008870:	2b06      	cmp	r3, #6
 8008872:	d02b      	beq.n	80088cc <UART_SetConfig+0x13f4>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	2b07      	cmp	r3, #7
 800887a:	d023      	beq.n	80088c4 <UART_SetConfig+0x13ec>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008880:	2b08      	cmp	r3, #8
 8008882:	d01b      	beq.n	80088bc <UART_SetConfig+0x13e4>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	2b09      	cmp	r3, #9
 800888a:	d013      	beq.n	80088b4 <UART_SetConfig+0x13dc>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008890:	2b0a      	cmp	r3, #10
 8008892:	d00b      	beq.n	80088ac <UART_SetConfig+0x13d4>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008898:	2b0b      	cmp	r3, #11
 800889a:	d103      	bne.n	80088a4 <UART_SetConfig+0x13cc>
 800889c:	4bc0      	ldr	r3, [pc, #768]	; (8008ba0 <UART_SetConfig+0x16c8>)
 800889e:	f04f 0400 	mov.w	r4, #0
 80088a2:	e02e      	b.n	8008902 <UART_SetConfig+0x142a>
 80088a4:	4bbf      	ldr	r3, [pc, #764]	; (8008ba4 <UART_SetConfig+0x16cc>)
 80088a6:	f04f 0400 	mov.w	r4, #0
 80088aa:	e02a      	b.n	8008902 <UART_SetConfig+0x142a>
 80088ac:	4bbe      	ldr	r3, [pc, #760]	; (8008ba8 <UART_SetConfig+0x16d0>)
 80088ae:	f04f 0400 	mov.w	r4, #0
 80088b2:	e026      	b.n	8008902 <UART_SetConfig+0x142a>
 80088b4:	4bbd      	ldr	r3, [pc, #756]	; (8008bac <UART_SetConfig+0x16d4>)
 80088b6:	f04f 0400 	mov.w	r4, #0
 80088ba:	e022      	b.n	8008902 <UART_SetConfig+0x142a>
 80088bc:	4bbc      	ldr	r3, [pc, #752]	; (8008bb0 <UART_SetConfig+0x16d8>)
 80088be:	f04f 0400 	mov.w	r4, #0
 80088c2:	e01e      	b.n	8008902 <UART_SetConfig+0x142a>
 80088c4:	4bbb      	ldr	r3, [pc, #748]	; (8008bb4 <UART_SetConfig+0x16dc>)
 80088c6:	f04f 0400 	mov.w	r4, #0
 80088ca:	e01a      	b.n	8008902 <UART_SetConfig+0x142a>
 80088cc:	a4b0      	add	r4, pc, #704	; (adr r4, 8008b90 <UART_SetConfig+0x16b8>)
 80088ce:	e9d4 3400 	ldrd	r3, r4, [r4]
 80088d2:	e016      	b.n	8008902 <UART_SetConfig+0x142a>
 80088d4:	4bb8      	ldr	r3, [pc, #736]	; (8008bb8 <UART_SetConfig+0x16e0>)
 80088d6:	f04f 0400 	mov.w	r4, #0
 80088da:	e012      	b.n	8008902 <UART_SetConfig+0x142a>
 80088dc:	4bb7      	ldr	r3, [pc, #732]	; (8008bbc <UART_SetConfig+0x16e4>)
 80088de:	f04f 0400 	mov.w	r4, #0
 80088e2:	e00e      	b.n	8008902 <UART_SetConfig+0x142a>
 80088e4:	a4ac      	add	r4, pc, #688	; (adr r4, 8008b98 <UART_SetConfig+0x16c0>)
 80088e6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80088ea:	e00a      	b.n	8008902 <UART_SetConfig+0x142a>
 80088ec:	4bb4      	ldr	r3, [pc, #720]	; (8008bc0 <UART_SetConfig+0x16e8>)
 80088ee:	f04f 0400 	mov.w	r4, #0
 80088f2:	e006      	b.n	8008902 <UART_SetConfig+0x142a>
 80088f4:	4bb3      	ldr	r3, [pc, #716]	; (8008bc4 <UART_SetConfig+0x16ec>)
 80088f6:	f04f 0400 	mov.w	r4, #0
 80088fa:	e002      	b.n	8008902 <UART_SetConfig+0x142a>
 80088fc:	4ba9      	ldr	r3, [pc, #676]	; (8008ba4 <UART_SetConfig+0x16cc>)
 80088fe:	f04f 0400 	mov.w	r4, #0
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	6852      	ldr	r2, [r2, #4]
 8008906:	0852      	lsrs	r2, r2, #1
 8008908:	4611      	mov	r1, r2
 800890a:	f04f 0200 	mov.w	r2, #0
 800890e:	eb13 0b01 	adds.w	fp, r3, r1
 8008912:	eb44 0c02 	adc.w	ip, r4, r2
 8008916:	4658      	mov	r0, fp
 8008918:	4661      	mov	r1, ip
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	f04f 0400 	mov.w	r4, #0
 8008922:	461a      	mov	r2, r3
 8008924:	4623      	mov	r3, r4
 8008926:	f7f7 fd2b 	bl	8000380 <__aeabi_uldivmod>
 800892a:	4603      	mov	r3, r0
 800892c:	460c      	mov	r4, r1
 800892e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008930:	e088      	b.n	8008a44 <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008936:	2b00      	cmp	r3, #0
 8008938:	d064      	beq.n	8008a04 <UART_SetConfig+0x152c>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893e:	2b01      	cmp	r3, #1
 8008940:	d05b      	beq.n	80089fa <UART_SetConfig+0x1522>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008946:	2b02      	cmp	r3, #2
 8008948:	d052      	beq.n	80089f0 <UART_SetConfig+0x1518>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894e:	2b03      	cmp	r3, #3
 8008950:	d04a      	beq.n	80089e8 <UART_SetConfig+0x1510>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008956:	2b04      	cmp	r3, #4
 8008958:	d041      	beq.n	80089de <UART_SetConfig+0x1506>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895e:	2b05      	cmp	r3, #5
 8008960:	d039      	beq.n	80089d6 <UART_SetConfig+0x14fe>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008966:	2b06      	cmp	r3, #6
 8008968:	d031      	beq.n	80089ce <UART_SetConfig+0x14f6>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896e:	2b07      	cmp	r3, #7
 8008970:	d028      	beq.n	80089c4 <UART_SetConfig+0x14ec>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008976:	2b08      	cmp	r3, #8
 8008978:	d01f      	beq.n	80089ba <UART_SetConfig+0x14e2>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897e:	2b09      	cmp	r3, #9
 8008980:	d016      	beq.n	80089b0 <UART_SetConfig+0x14d8>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008986:	2b0a      	cmp	r3, #10
 8008988:	d00d      	beq.n	80089a6 <UART_SetConfig+0x14ce>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898e:	2b0b      	cmp	r3, #11
 8008990:	d104      	bne.n	800899c <UART_SetConfig+0x14c4>
 8008992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008996:	f04f 0400 	mov.w	r4, #0
 800899a:	e037      	b.n	8008a0c <UART_SetConfig+0x1534>
 800899c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80089a0:	f04f 0400 	mov.w	r4, #0
 80089a4:	e032      	b.n	8008a0c <UART_SetConfig+0x1534>
 80089a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80089aa:	f04f 0400 	mov.w	r4, #0
 80089ae:	e02d      	b.n	8008a0c <UART_SetConfig+0x1534>
 80089b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80089b4:	f04f 0400 	mov.w	r4, #0
 80089b8:	e028      	b.n	8008a0c <UART_SetConfig+0x1534>
 80089ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80089be:	f04f 0400 	mov.w	r4, #0
 80089c2:	e023      	b.n	8008a0c <UART_SetConfig+0x1534>
 80089c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80089c8:	f04f 0400 	mov.w	r4, #0
 80089cc:	e01e      	b.n	8008a0c <UART_SetConfig+0x1534>
 80089ce:	4b7e      	ldr	r3, [pc, #504]	; (8008bc8 <UART_SetConfig+0x16f0>)
 80089d0:	f04f 0400 	mov.w	r4, #0
 80089d4:	e01a      	b.n	8008a0c <UART_SetConfig+0x1534>
 80089d6:	4b7d      	ldr	r3, [pc, #500]	; (8008bcc <UART_SetConfig+0x16f4>)
 80089d8:	f04f 0400 	mov.w	r4, #0
 80089dc:	e016      	b.n	8008a0c <UART_SetConfig+0x1534>
 80089de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80089e2:	f04f 0400 	mov.w	r4, #0
 80089e6:	e011      	b.n	8008a0c <UART_SetConfig+0x1534>
 80089e8:	4b79      	ldr	r3, [pc, #484]	; (8008bd0 <UART_SetConfig+0x16f8>)
 80089ea:	f04f 0400 	mov.w	r4, #0
 80089ee:	e00d      	b.n	8008a0c <UART_SetConfig+0x1534>
 80089f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80089f4:	f04f 0400 	mov.w	r4, #0
 80089f8:	e008      	b.n	8008a0c <UART_SetConfig+0x1534>
 80089fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80089fe:	f04f 0400 	mov.w	r4, #0
 8008a02:	e003      	b.n	8008a0c <UART_SetConfig+0x1534>
 8008a04:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008a08:	f04f 0400 	mov.w	r4, #0
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	6852      	ldr	r2, [r2, #4]
 8008a10:	0852      	lsrs	r2, r2, #1
 8008a12:	4611      	mov	r1, r2
 8008a14:	f04f 0200 	mov.w	r2, #0
 8008a18:	eb13 0b01 	adds.w	fp, r3, r1
 8008a1c:	eb44 0c02 	adc.w	ip, r4, r2
 8008a20:	4658      	mov	r0, fp
 8008a22:	4661      	mov	r1, ip
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	f04f 0400 	mov.w	r4, #0
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	4623      	mov	r3, r4
 8008a30:	f7f7 fca6 	bl	8000380 <__aeabi_uldivmod>
 8008a34:	4603      	mov	r3, r0
 8008a36:	460c      	mov	r4, r1
 8008a38:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008a3a:	e003      	b.n	8008a44 <UART_SetConfig+0x156c>
          default:
            ret = HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8008a42:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a4a:	d309      	bcc.n	8008a60 <UART_SetConfig+0x1588>
 8008a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a52:	d205      	bcs.n	8008a60 <UART_SetConfig+0x1588>
        {
          huart->Instance->BRR = usartdiv;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a5a:	60da      	str	r2, [r3, #12]
 8008a5c:	f000 bf85 	b.w	800996a <UART_SetConfig+0x2492>
        }
        else
        {
          ret = HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008a66:	f000 bf80 	b.w	800996a <UART_SetConfig+0x2492>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	69db      	ldr	r3, [r3, #28]
 8008a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a72:	f040 83da 	bne.w	800922a <UART_SetConfig+0x1d52>
  {
    switch (clocksource)
 8008a76:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008a7a:	2b40      	cmp	r3, #64	; 0x40
 8008a7c:	f200 83b3 	bhi.w	80091e6 <UART_SetConfig+0x1d0e>
 8008a80:	a201      	add	r2, pc, #4	; (adr r2, 8008a88 <UART_SetConfig+0x15b0>)
 8008a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a86:	bf00      	nop
 8008a88:	08008bd5 	.word	0x08008bd5
 8008a8c:	08008c8d 	.word	0x08008c8d
 8008a90:	080091e7 	.word	0x080091e7
 8008a94:	080091e7 	.word	0x080091e7
 8008a98:	08008d45 	.word	0x08008d45
 8008a9c:	080091e7 	.word	0x080091e7
 8008aa0:	080091e7 	.word	0x080091e7
 8008aa4:	080091e7 	.word	0x080091e7
 8008aa8:	08008e01 	.word	0x08008e01
 8008aac:	080091e7 	.word	0x080091e7
 8008ab0:	080091e7 	.word	0x080091e7
 8008ab4:	080091e7 	.word	0x080091e7
 8008ab8:	080091e7 	.word	0x080091e7
 8008abc:	080091e7 	.word	0x080091e7
 8008ac0:	080091e7 	.word	0x080091e7
 8008ac4:	080091e7 	.word	0x080091e7
 8008ac8:	08008ebd 	.word	0x08008ebd
 8008acc:	080091e7 	.word	0x080091e7
 8008ad0:	080091e7 	.word	0x080091e7
 8008ad4:	080091e7 	.word	0x080091e7
 8008ad8:	080091e7 	.word	0x080091e7
 8008adc:	080091e7 	.word	0x080091e7
 8008ae0:	080091e7 	.word	0x080091e7
 8008ae4:	080091e7 	.word	0x080091e7
 8008ae8:	080091e7 	.word	0x080091e7
 8008aec:	080091e7 	.word	0x080091e7
 8008af0:	080091e7 	.word	0x080091e7
 8008af4:	080091e7 	.word	0x080091e7
 8008af8:	080091e7 	.word	0x080091e7
 8008afc:	080091e7 	.word	0x080091e7
 8008b00:	080091e7 	.word	0x080091e7
 8008b04:	080091e7 	.word	0x080091e7
 8008b08:	0800902f 	.word	0x0800902f
 8008b0c:	080091e7 	.word	0x080091e7
 8008b10:	080091e7 	.word	0x080091e7
 8008b14:	080091e7 	.word	0x080091e7
 8008b18:	080091e7 	.word	0x080091e7
 8008b1c:	080091e7 	.word	0x080091e7
 8008b20:	080091e7 	.word	0x080091e7
 8008b24:	080091e7 	.word	0x080091e7
 8008b28:	080091e7 	.word	0x080091e7
 8008b2c:	080091e7 	.word	0x080091e7
 8008b30:	080091e7 	.word	0x080091e7
 8008b34:	080091e7 	.word	0x080091e7
 8008b38:	080091e7 	.word	0x080091e7
 8008b3c:	080091e7 	.word	0x080091e7
 8008b40:	080091e7 	.word	0x080091e7
 8008b44:	080091e7 	.word	0x080091e7
 8008b48:	080091e7 	.word	0x080091e7
 8008b4c:	080091e7 	.word	0x080091e7
 8008b50:	080091e7 	.word	0x080091e7
 8008b54:	080091e7 	.word	0x080091e7
 8008b58:	080091e7 	.word	0x080091e7
 8008b5c:	080091e7 	.word	0x080091e7
 8008b60:	080091e7 	.word	0x080091e7
 8008b64:	080091e7 	.word	0x080091e7
 8008b68:	080091e7 	.word	0x080091e7
 8008b6c:	080091e7 	.word	0x080091e7
 8008b70:	080091e7 	.word	0x080091e7
 8008b74:	080091e7 	.word	0x080091e7
 8008b78:	080091e7 	.word	0x080091e7
 8008b7c:	080091e7 	.word	0x080091e7
 8008b80:	080091e7 	.word	0x080091e7
 8008b84:	080091e7 	.word	0x080091e7
 8008b88:	08009125 	.word	0x08009125
 8008b8c:	f3af 8000 	nop.w
 8008b90:	05161500 	.word	0x05161500
 8008b94:	00000000 	.word	0x00000000
 8008b98:	0a2c2a00 	.word	0x0a2c2a00
 8008b9c:	00000000 	.word	0x00000000
 8008ba0:	003d0900 	.word	0x003d0900
 8008ba4:	3d090000 	.word	0x3d090000
 8008ba8:	007a1200 	.word	0x007a1200
 8008bac:	00f42400 	.word	0x00f42400
 8008bb0:	01e84800 	.word	0x01e84800
 8008bb4:	03d09000 	.word	0x03d09000
 8008bb8:	061a8000 	.word	0x061a8000
 8008bbc:	07a12000 	.word	0x07a12000
 8008bc0:	0f424000 	.word	0x0f424000
 8008bc4:	1e848000 	.word	0x1e848000
 8008bc8:	000aaa00 	.word	0x000aaa00
 8008bcc:	000ccc00 	.word	0x000ccc00
 8008bd0:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bd4:	f7fc f968 	bl	8004ea8 <HAL_RCC_GetPCLK1Freq>
 8008bd8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d044      	beq.n	8008c6c <UART_SetConfig+0x1794>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d03e      	beq.n	8008c68 <UART_SetConfig+0x1790>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	d038      	beq.n	8008c64 <UART_SetConfig+0x178c>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf6:	2b03      	cmp	r3, #3
 8008bf8:	d032      	beq.n	8008c60 <UART_SetConfig+0x1788>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfe:	2b04      	cmp	r3, #4
 8008c00:	d02c      	beq.n	8008c5c <UART_SetConfig+0x1784>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c06:	2b05      	cmp	r3, #5
 8008c08:	d026      	beq.n	8008c58 <UART_SetConfig+0x1780>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0e:	2b06      	cmp	r3, #6
 8008c10:	d020      	beq.n	8008c54 <UART_SetConfig+0x177c>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c16:	2b07      	cmp	r3, #7
 8008c18:	d01a      	beq.n	8008c50 <UART_SetConfig+0x1778>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1e:	2b08      	cmp	r3, #8
 8008c20:	d014      	beq.n	8008c4c <UART_SetConfig+0x1774>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c26:	2b09      	cmp	r3, #9
 8008c28:	d00e      	beq.n	8008c48 <UART_SetConfig+0x1770>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2e:	2b0a      	cmp	r3, #10
 8008c30:	d008      	beq.n	8008c44 <UART_SetConfig+0x176c>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c36:	2b0b      	cmp	r3, #11
 8008c38:	d102      	bne.n	8008c40 <UART_SetConfig+0x1768>
 8008c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c3e:	e016      	b.n	8008c6e <UART_SetConfig+0x1796>
 8008c40:	2301      	movs	r3, #1
 8008c42:	e014      	b.n	8008c6e <UART_SetConfig+0x1796>
 8008c44:	2380      	movs	r3, #128	; 0x80
 8008c46:	e012      	b.n	8008c6e <UART_SetConfig+0x1796>
 8008c48:	2340      	movs	r3, #64	; 0x40
 8008c4a:	e010      	b.n	8008c6e <UART_SetConfig+0x1796>
 8008c4c:	2320      	movs	r3, #32
 8008c4e:	e00e      	b.n	8008c6e <UART_SetConfig+0x1796>
 8008c50:	2310      	movs	r3, #16
 8008c52:	e00c      	b.n	8008c6e <UART_SetConfig+0x1796>
 8008c54:	230c      	movs	r3, #12
 8008c56:	e00a      	b.n	8008c6e <UART_SetConfig+0x1796>
 8008c58:	230a      	movs	r3, #10
 8008c5a:	e008      	b.n	8008c6e <UART_SetConfig+0x1796>
 8008c5c:	2308      	movs	r3, #8
 8008c5e:	e006      	b.n	8008c6e <UART_SetConfig+0x1796>
 8008c60:	2306      	movs	r3, #6
 8008c62:	e004      	b.n	8008c6e <UART_SetConfig+0x1796>
 8008c64:	2304      	movs	r3, #4
 8008c66:	e002      	b.n	8008c6e <UART_SetConfig+0x1796>
 8008c68:	2302      	movs	r3, #2
 8008c6a:	e000      	b.n	8008c6e <UART_SetConfig+0x1796>
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c74:	005a      	lsls	r2, r3, #1
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	085b      	lsrs	r3, r3, #1
 8008c7c:	441a      	add	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c8a:	e2b0      	b.n	80091ee <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c8c:	f7fc f922 	bl	8004ed4 <HAL_RCC_GetPCLK2Freq>
 8008c90:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d044      	beq.n	8008d24 <UART_SetConfig+0x184c>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d03e      	beq.n	8008d20 <UART_SetConfig+0x1848>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d038      	beq.n	8008d1c <UART_SetConfig+0x1844>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cae:	2b03      	cmp	r3, #3
 8008cb0:	d032      	beq.n	8008d18 <UART_SetConfig+0x1840>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb6:	2b04      	cmp	r3, #4
 8008cb8:	d02c      	beq.n	8008d14 <UART_SetConfig+0x183c>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbe:	2b05      	cmp	r3, #5
 8008cc0:	d026      	beq.n	8008d10 <UART_SetConfig+0x1838>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc6:	2b06      	cmp	r3, #6
 8008cc8:	d020      	beq.n	8008d0c <UART_SetConfig+0x1834>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	2b07      	cmp	r3, #7
 8008cd0:	d01a      	beq.n	8008d08 <UART_SetConfig+0x1830>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd6:	2b08      	cmp	r3, #8
 8008cd8:	d014      	beq.n	8008d04 <UART_SetConfig+0x182c>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cde:	2b09      	cmp	r3, #9
 8008ce0:	d00e      	beq.n	8008d00 <UART_SetConfig+0x1828>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce6:	2b0a      	cmp	r3, #10
 8008ce8:	d008      	beq.n	8008cfc <UART_SetConfig+0x1824>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cee:	2b0b      	cmp	r3, #11
 8008cf0:	d102      	bne.n	8008cf8 <UART_SetConfig+0x1820>
 8008cf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cf6:	e016      	b.n	8008d26 <UART_SetConfig+0x184e>
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e014      	b.n	8008d26 <UART_SetConfig+0x184e>
 8008cfc:	2380      	movs	r3, #128	; 0x80
 8008cfe:	e012      	b.n	8008d26 <UART_SetConfig+0x184e>
 8008d00:	2340      	movs	r3, #64	; 0x40
 8008d02:	e010      	b.n	8008d26 <UART_SetConfig+0x184e>
 8008d04:	2320      	movs	r3, #32
 8008d06:	e00e      	b.n	8008d26 <UART_SetConfig+0x184e>
 8008d08:	2310      	movs	r3, #16
 8008d0a:	e00c      	b.n	8008d26 <UART_SetConfig+0x184e>
 8008d0c:	230c      	movs	r3, #12
 8008d0e:	e00a      	b.n	8008d26 <UART_SetConfig+0x184e>
 8008d10:	230a      	movs	r3, #10
 8008d12:	e008      	b.n	8008d26 <UART_SetConfig+0x184e>
 8008d14:	2308      	movs	r3, #8
 8008d16:	e006      	b.n	8008d26 <UART_SetConfig+0x184e>
 8008d18:	2306      	movs	r3, #6
 8008d1a:	e004      	b.n	8008d26 <UART_SetConfig+0x184e>
 8008d1c:	2304      	movs	r3, #4
 8008d1e:	e002      	b.n	8008d26 <UART_SetConfig+0x184e>
 8008d20:	2302      	movs	r3, #2
 8008d22:	e000      	b.n	8008d26 <UART_SetConfig+0x184e>
 8008d24:	2301      	movs	r3, #1
 8008d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d2c:	005a      	lsls	r2, r3, #1
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	085b      	lsrs	r3, r3, #1
 8008d34:	441a      	add	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d42:	e254      	b.n	80091ee <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d44:	f107 0318 	add.w	r3, r7, #24
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fd fab1 	bl	80062b0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d4e:	69fa      	ldr	r2, [r7, #28]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d044      	beq.n	8008de2 <UART_SetConfig+0x190a>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d03e      	beq.n	8008dde <UART_SetConfig+0x1906>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d038      	beq.n	8008dda <UART_SetConfig+0x1902>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6c:	2b03      	cmp	r3, #3
 8008d6e:	d032      	beq.n	8008dd6 <UART_SetConfig+0x18fe>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d74:	2b04      	cmp	r3, #4
 8008d76:	d02c      	beq.n	8008dd2 <UART_SetConfig+0x18fa>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7c:	2b05      	cmp	r3, #5
 8008d7e:	d026      	beq.n	8008dce <UART_SetConfig+0x18f6>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	2b06      	cmp	r3, #6
 8008d86:	d020      	beq.n	8008dca <UART_SetConfig+0x18f2>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8c:	2b07      	cmp	r3, #7
 8008d8e:	d01a      	beq.n	8008dc6 <UART_SetConfig+0x18ee>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d94:	2b08      	cmp	r3, #8
 8008d96:	d014      	beq.n	8008dc2 <UART_SetConfig+0x18ea>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9c:	2b09      	cmp	r3, #9
 8008d9e:	d00e      	beq.n	8008dbe <UART_SetConfig+0x18e6>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da4:	2b0a      	cmp	r3, #10
 8008da6:	d008      	beq.n	8008dba <UART_SetConfig+0x18e2>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dac:	2b0b      	cmp	r3, #11
 8008dae:	d102      	bne.n	8008db6 <UART_SetConfig+0x18de>
 8008db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008db4:	e016      	b.n	8008de4 <UART_SetConfig+0x190c>
 8008db6:	2301      	movs	r3, #1
 8008db8:	e014      	b.n	8008de4 <UART_SetConfig+0x190c>
 8008dba:	2380      	movs	r3, #128	; 0x80
 8008dbc:	e012      	b.n	8008de4 <UART_SetConfig+0x190c>
 8008dbe:	2340      	movs	r3, #64	; 0x40
 8008dc0:	e010      	b.n	8008de4 <UART_SetConfig+0x190c>
 8008dc2:	2320      	movs	r3, #32
 8008dc4:	e00e      	b.n	8008de4 <UART_SetConfig+0x190c>
 8008dc6:	2310      	movs	r3, #16
 8008dc8:	e00c      	b.n	8008de4 <UART_SetConfig+0x190c>
 8008dca:	230c      	movs	r3, #12
 8008dcc:	e00a      	b.n	8008de4 <UART_SetConfig+0x190c>
 8008dce:	230a      	movs	r3, #10
 8008dd0:	e008      	b.n	8008de4 <UART_SetConfig+0x190c>
 8008dd2:	2308      	movs	r3, #8
 8008dd4:	e006      	b.n	8008de4 <UART_SetConfig+0x190c>
 8008dd6:	2306      	movs	r3, #6
 8008dd8:	e004      	b.n	8008de4 <UART_SetConfig+0x190c>
 8008dda:	2304      	movs	r3, #4
 8008ddc:	e002      	b.n	8008de4 <UART_SetConfig+0x190c>
 8008dde:	2302      	movs	r3, #2
 8008de0:	e000      	b.n	8008de4 <UART_SetConfig+0x190c>
 8008de2:	2301      	movs	r3, #1
 8008de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008de8:	005a      	lsls	r2, r3, #1
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	085b      	lsrs	r3, r3, #1
 8008df0:	441a      	add	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008dfe:	e1f6      	b.n	80091ee <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e00:	f107 030c 	add.w	r3, r7, #12
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fd fb9f 	bl	8006548 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d044      	beq.n	8008e9e <UART_SetConfig+0x19c6>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d03e      	beq.n	8008e9a <UART_SetConfig+0x19c2>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d038      	beq.n	8008e96 <UART_SetConfig+0x19be>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e28:	2b03      	cmp	r3, #3
 8008e2a:	d032      	beq.n	8008e92 <UART_SetConfig+0x19ba>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e30:	2b04      	cmp	r3, #4
 8008e32:	d02c      	beq.n	8008e8e <UART_SetConfig+0x19b6>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e38:	2b05      	cmp	r3, #5
 8008e3a:	d026      	beq.n	8008e8a <UART_SetConfig+0x19b2>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e40:	2b06      	cmp	r3, #6
 8008e42:	d020      	beq.n	8008e86 <UART_SetConfig+0x19ae>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e48:	2b07      	cmp	r3, #7
 8008e4a:	d01a      	beq.n	8008e82 <UART_SetConfig+0x19aa>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e50:	2b08      	cmp	r3, #8
 8008e52:	d014      	beq.n	8008e7e <UART_SetConfig+0x19a6>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e58:	2b09      	cmp	r3, #9
 8008e5a:	d00e      	beq.n	8008e7a <UART_SetConfig+0x19a2>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e60:	2b0a      	cmp	r3, #10
 8008e62:	d008      	beq.n	8008e76 <UART_SetConfig+0x199e>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e68:	2b0b      	cmp	r3, #11
 8008e6a:	d102      	bne.n	8008e72 <UART_SetConfig+0x199a>
 8008e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e70:	e016      	b.n	8008ea0 <UART_SetConfig+0x19c8>
 8008e72:	2301      	movs	r3, #1
 8008e74:	e014      	b.n	8008ea0 <UART_SetConfig+0x19c8>
 8008e76:	2380      	movs	r3, #128	; 0x80
 8008e78:	e012      	b.n	8008ea0 <UART_SetConfig+0x19c8>
 8008e7a:	2340      	movs	r3, #64	; 0x40
 8008e7c:	e010      	b.n	8008ea0 <UART_SetConfig+0x19c8>
 8008e7e:	2320      	movs	r3, #32
 8008e80:	e00e      	b.n	8008ea0 <UART_SetConfig+0x19c8>
 8008e82:	2310      	movs	r3, #16
 8008e84:	e00c      	b.n	8008ea0 <UART_SetConfig+0x19c8>
 8008e86:	230c      	movs	r3, #12
 8008e88:	e00a      	b.n	8008ea0 <UART_SetConfig+0x19c8>
 8008e8a:	230a      	movs	r3, #10
 8008e8c:	e008      	b.n	8008ea0 <UART_SetConfig+0x19c8>
 8008e8e:	2308      	movs	r3, #8
 8008e90:	e006      	b.n	8008ea0 <UART_SetConfig+0x19c8>
 8008e92:	2306      	movs	r3, #6
 8008e94:	e004      	b.n	8008ea0 <UART_SetConfig+0x19c8>
 8008e96:	2304      	movs	r3, #4
 8008e98:	e002      	b.n	8008ea0 <UART_SetConfig+0x19c8>
 8008e9a:	2302      	movs	r3, #2
 8008e9c:	e000      	b.n	8008ea0 <UART_SetConfig+0x19c8>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea4:	005a      	lsls	r2, r3, #1
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	085b      	lsrs	r3, r3, #1
 8008eac:	441a      	add	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008eba:	e198      	b.n	80091ee <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ebc:	4b87      	ldr	r3, [pc, #540]	; (80090dc <UART_SetConfig+0x1c04>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 0320 	and.w	r3, r3, #32
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d05e      	beq.n	8008f86 <UART_SetConfig+0x1aae>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ec8:	4b84      	ldr	r3, [pc, #528]	; (80090dc <UART_SetConfig+0x1c04>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	08db      	lsrs	r3, r3, #3
 8008ece:	f003 0303 	and.w	r3, r3, #3
 8008ed2:	4a83      	ldr	r2, [pc, #524]	; (80090e0 <UART_SetConfig+0x1c08>)
 8008ed4:	40da      	lsrs	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d044      	beq.n	8008f68 <UART_SetConfig+0x1a90>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d03e      	beq.n	8008f64 <UART_SetConfig+0x1a8c>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d038      	beq.n	8008f60 <UART_SetConfig+0x1a88>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef2:	2b03      	cmp	r3, #3
 8008ef4:	d032      	beq.n	8008f5c <UART_SetConfig+0x1a84>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efa:	2b04      	cmp	r3, #4
 8008efc:	d02c      	beq.n	8008f58 <UART_SetConfig+0x1a80>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f02:	2b05      	cmp	r3, #5
 8008f04:	d026      	beq.n	8008f54 <UART_SetConfig+0x1a7c>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0a:	2b06      	cmp	r3, #6
 8008f0c:	d020      	beq.n	8008f50 <UART_SetConfig+0x1a78>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f12:	2b07      	cmp	r3, #7
 8008f14:	d01a      	beq.n	8008f4c <UART_SetConfig+0x1a74>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1a:	2b08      	cmp	r3, #8
 8008f1c:	d014      	beq.n	8008f48 <UART_SetConfig+0x1a70>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f22:	2b09      	cmp	r3, #9
 8008f24:	d00e      	beq.n	8008f44 <UART_SetConfig+0x1a6c>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2a:	2b0a      	cmp	r3, #10
 8008f2c:	d008      	beq.n	8008f40 <UART_SetConfig+0x1a68>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f32:	2b0b      	cmp	r3, #11
 8008f34:	d102      	bne.n	8008f3c <UART_SetConfig+0x1a64>
 8008f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f3a:	e016      	b.n	8008f6a <UART_SetConfig+0x1a92>
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e014      	b.n	8008f6a <UART_SetConfig+0x1a92>
 8008f40:	2380      	movs	r3, #128	; 0x80
 8008f42:	e012      	b.n	8008f6a <UART_SetConfig+0x1a92>
 8008f44:	2340      	movs	r3, #64	; 0x40
 8008f46:	e010      	b.n	8008f6a <UART_SetConfig+0x1a92>
 8008f48:	2320      	movs	r3, #32
 8008f4a:	e00e      	b.n	8008f6a <UART_SetConfig+0x1a92>
 8008f4c:	2310      	movs	r3, #16
 8008f4e:	e00c      	b.n	8008f6a <UART_SetConfig+0x1a92>
 8008f50:	230c      	movs	r3, #12
 8008f52:	e00a      	b.n	8008f6a <UART_SetConfig+0x1a92>
 8008f54:	230a      	movs	r3, #10
 8008f56:	e008      	b.n	8008f6a <UART_SetConfig+0x1a92>
 8008f58:	2308      	movs	r3, #8
 8008f5a:	e006      	b.n	8008f6a <UART_SetConfig+0x1a92>
 8008f5c:	2306      	movs	r3, #6
 8008f5e:	e004      	b.n	8008f6a <UART_SetConfig+0x1a92>
 8008f60:	2304      	movs	r3, #4
 8008f62:	e002      	b.n	8008f6a <UART_SetConfig+0x1a92>
 8008f64:	2302      	movs	r3, #2
 8008f66:	e000      	b.n	8008f6a <UART_SetConfig+0x1a92>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f6e:	005a      	lsls	r2, r3, #1
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	085b      	lsrs	r3, r3, #1
 8008f76:	441a      	add	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8008f84:	e133      	b.n	80091ee <UART_SetConfig+0x1d16>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d043      	beq.n	8009016 <UART_SetConfig+0x1b3e>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d03d      	beq.n	8009012 <UART_SetConfig+0x1b3a>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d037      	beq.n	800900e <UART_SetConfig+0x1b36>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa2:	2b03      	cmp	r3, #3
 8008fa4:	d031      	beq.n	800900a <UART_SetConfig+0x1b32>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008faa:	2b04      	cmp	r3, #4
 8008fac:	d02b      	beq.n	8009006 <UART_SetConfig+0x1b2e>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb2:	2b05      	cmp	r3, #5
 8008fb4:	d025      	beq.n	8009002 <UART_SetConfig+0x1b2a>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fba:	2b06      	cmp	r3, #6
 8008fbc:	d01f      	beq.n	8008ffe <UART_SetConfig+0x1b26>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc2:	2b07      	cmp	r3, #7
 8008fc4:	d019      	beq.n	8008ffa <UART_SetConfig+0x1b22>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fca:	2b08      	cmp	r3, #8
 8008fcc:	d013      	beq.n	8008ff6 <UART_SetConfig+0x1b1e>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd2:	2b09      	cmp	r3, #9
 8008fd4:	d00d      	beq.n	8008ff2 <UART_SetConfig+0x1b1a>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fda:	2b0a      	cmp	r3, #10
 8008fdc:	d007      	beq.n	8008fee <UART_SetConfig+0x1b16>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe2:	2b0b      	cmp	r3, #11
 8008fe4:	d101      	bne.n	8008fea <UART_SetConfig+0x1b12>
 8008fe6:	4b3f      	ldr	r3, [pc, #252]	; (80090e4 <UART_SetConfig+0x1c0c>)
 8008fe8:	e016      	b.n	8009018 <UART_SetConfig+0x1b40>
 8008fea:	4b3f      	ldr	r3, [pc, #252]	; (80090e8 <UART_SetConfig+0x1c10>)
 8008fec:	e014      	b.n	8009018 <UART_SetConfig+0x1b40>
 8008fee:	4b3f      	ldr	r3, [pc, #252]	; (80090ec <UART_SetConfig+0x1c14>)
 8008ff0:	e012      	b.n	8009018 <UART_SetConfig+0x1b40>
 8008ff2:	4b3f      	ldr	r3, [pc, #252]	; (80090f0 <UART_SetConfig+0x1c18>)
 8008ff4:	e010      	b.n	8009018 <UART_SetConfig+0x1b40>
 8008ff6:	4b3f      	ldr	r3, [pc, #252]	; (80090f4 <UART_SetConfig+0x1c1c>)
 8008ff8:	e00e      	b.n	8009018 <UART_SetConfig+0x1b40>
 8008ffa:	4b3f      	ldr	r3, [pc, #252]	; (80090f8 <UART_SetConfig+0x1c20>)
 8008ffc:	e00c      	b.n	8009018 <UART_SetConfig+0x1b40>
 8008ffe:	4b3f      	ldr	r3, [pc, #252]	; (80090fc <UART_SetConfig+0x1c24>)
 8009000:	e00a      	b.n	8009018 <UART_SetConfig+0x1b40>
 8009002:	4b3f      	ldr	r3, [pc, #252]	; (8009100 <UART_SetConfig+0x1c28>)
 8009004:	e008      	b.n	8009018 <UART_SetConfig+0x1b40>
 8009006:	4b3f      	ldr	r3, [pc, #252]	; (8009104 <UART_SetConfig+0x1c2c>)
 8009008:	e006      	b.n	8009018 <UART_SetConfig+0x1b40>
 800900a:	4b3f      	ldr	r3, [pc, #252]	; (8009108 <UART_SetConfig+0x1c30>)
 800900c:	e004      	b.n	8009018 <UART_SetConfig+0x1b40>
 800900e:	4b3f      	ldr	r3, [pc, #252]	; (800910c <UART_SetConfig+0x1c34>)
 8009010:	e002      	b.n	8009018 <UART_SetConfig+0x1b40>
 8009012:	4b33      	ldr	r3, [pc, #204]	; (80090e0 <UART_SetConfig+0x1c08>)
 8009014:	e000      	b.n	8009018 <UART_SetConfig+0x1b40>
 8009016:	4b34      	ldr	r3, [pc, #208]	; (80090e8 <UART_SetConfig+0x1c10>)
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	6852      	ldr	r2, [r2, #4]
 800901c:	0852      	lsrs	r2, r2, #1
 800901e:	441a      	add	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	fbb2 f3f3 	udiv	r3, r2, r3
 8009028:	b29b      	uxth	r3, r3
 800902a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800902c:	e0df      	b.n	80091ee <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009032:	2b00      	cmp	r3, #0
 8009034:	d045      	beq.n	80090c2 <UART_SetConfig+0x1bea>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903a:	2b01      	cmp	r3, #1
 800903c:	d03f      	beq.n	80090be <UART_SetConfig+0x1be6>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009042:	2b02      	cmp	r3, #2
 8009044:	d039      	beq.n	80090ba <UART_SetConfig+0x1be2>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904a:	2b03      	cmp	r3, #3
 800904c:	d033      	beq.n	80090b6 <UART_SetConfig+0x1bde>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009052:	2b04      	cmp	r3, #4
 8009054:	d02d      	beq.n	80090b2 <UART_SetConfig+0x1bda>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905a:	2b05      	cmp	r3, #5
 800905c:	d027      	beq.n	80090ae <UART_SetConfig+0x1bd6>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009062:	2b06      	cmp	r3, #6
 8009064:	d021      	beq.n	80090aa <UART_SetConfig+0x1bd2>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	2b07      	cmp	r3, #7
 800906c:	d01b      	beq.n	80090a6 <UART_SetConfig+0x1bce>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009072:	2b08      	cmp	r3, #8
 8009074:	d015      	beq.n	80090a2 <UART_SetConfig+0x1bca>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907a:	2b09      	cmp	r3, #9
 800907c:	d00f      	beq.n	800909e <UART_SetConfig+0x1bc6>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009082:	2b0a      	cmp	r3, #10
 8009084:	d008      	beq.n	8009098 <UART_SetConfig+0x1bc0>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908a:	2b0b      	cmp	r3, #11
 800908c:	d102      	bne.n	8009094 <UART_SetConfig+0x1bbc>
 800908e:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009092:	e017      	b.n	80090c4 <UART_SetConfig+0x1bec>
 8009094:	4b18      	ldr	r3, [pc, #96]	; (80090f8 <UART_SetConfig+0x1c20>)
 8009096:	e015      	b.n	80090c4 <UART_SetConfig+0x1bec>
 8009098:	f24f 4324 	movw	r3, #62500	; 0xf424
 800909c:	e012      	b.n	80090c4 <UART_SetConfig+0x1bec>
 800909e:	4b1c      	ldr	r3, [pc, #112]	; (8009110 <UART_SetConfig+0x1c38>)
 80090a0:	e010      	b.n	80090c4 <UART_SetConfig+0x1bec>
 80090a2:	4b1c      	ldr	r3, [pc, #112]	; (8009114 <UART_SetConfig+0x1c3c>)
 80090a4:	e00e      	b.n	80090c4 <UART_SetConfig+0x1bec>
 80090a6:	4b0f      	ldr	r3, [pc, #60]	; (80090e4 <UART_SetConfig+0x1c0c>)
 80090a8:	e00c      	b.n	80090c4 <UART_SetConfig+0x1bec>
 80090aa:	4b1b      	ldr	r3, [pc, #108]	; (8009118 <UART_SetConfig+0x1c40>)
 80090ac:	e00a      	b.n	80090c4 <UART_SetConfig+0x1bec>
 80090ae:	4b1b      	ldr	r3, [pc, #108]	; (800911c <UART_SetConfig+0x1c44>)
 80090b0:	e008      	b.n	80090c4 <UART_SetConfig+0x1bec>
 80090b2:	4b0e      	ldr	r3, [pc, #56]	; (80090ec <UART_SetConfig+0x1c14>)
 80090b4:	e006      	b.n	80090c4 <UART_SetConfig+0x1bec>
 80090b6:	4b1a      	ldr	r3, [pc, #104]	; (8009120 <UART_SetConfig+0x1c48>)
 80090b8:	e004      	b.n	80090c4 <UART_SetConfig+0x1bec>
 80090ba:	4b0d      	ldr	r3, [pc, #52]	; (80090f0 <UART_SetConfig+0x1c18>)
 80090bc:	e002      	b.n	80090c4 <UART_SetConfig+0x1bec>
 80090be:	4b0d      	ldr	r3, [pc, #52]	; (80090f4 <UART_SetConfig+0x1c1c>)
 80090c0:	e000      	b.n	80090c4 <UART_SetConfig+0x1bec>
 80090c2:	4b0d      	ldr	r3, [pc, #52]	; (80090f8 <UART_SetConfig+0x1c20>)
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	6852      	ldr	r2, [r2, #4]
 80090c8:	0852      	lsrs	r2, r2, #1
 80090ca:	441a      	add	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80090d8:	e089      	b.n	80091ee <UART_SetConfig+0x1d16>
 80090da:	bf00      	nop
 80090dc:	58024400 	.word	0x58024400
 80090e0:	03d09000 	.word	0x03d09000
 80090e4:	0007a120 	.word	0x0007a120
 80090e8:	07a12000 	.word	0x07a12000
 80090ec:	000f4240 	.word	0x000f4240
 80090f0:	001e8480 	.word	0x001e8480
 80090f4:	003d0900 	.word	0x003d0900
 80090f8:	007a1200 	.word	0x007a1200
 80090fc:	00a2c2aa 	.word	0x00a2c2aa
 8009100:	00c35000 	.word	0x00c35000
 8009104:	00f42400 	.word	0x00f42400
 8009108:	01458554 	.word	0x01458554
 800910c:	01e84800 	.word	0x01e84800
 8009110:	0001e848 	.word	0x0001e848
 8009114:	0003d090 	.word	0x0003d090
 8009118:	000a2c2a 	.word	0x000a2c2a
 800911c:	000c3500 	.word	0x000c3500
 8009120:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009128:	2b00      	cmp	r3, #0
 800912a:	d04f      	beq.n	80091cc <UART_SetConfig+0x1cf4>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009130:	2b01      	cmp	r3, #1
 8009132:	d048      	beq.n	80091c6 <UART_SetConfig+0x1cee>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009138:	2b02      	cmp	r3, #2
 800913a:	d041      	beq.n	80091c0 <UART_SetConfig+0x1ce8>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009140:	2b03      	cmp	r3, #3
 8009142:	d03a      	beq.n	80091ba <UART_SetConfig+0x1ce2>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009148:	2b04      	cmp	r3, #4
 800914a:	d033      	beq.n	80091b4 <UART_SetConfig+0x1cdc>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009150:	2b05      	cmp	r3, #5
 8009152:	d02c      	beq.n	80091ae <UART_SetConfig+0x1cd6>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009158:	2b06      	cmp	r3, #6
 800915a:	d025      	beq.n	80091a8 <UART_SetConfig+0x1cd0>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009160:	2b07      	cmp	r3, #7
 8009162:	d01e      	beq.n	80091a2 <UART_SetConfig+0x1cca>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009168:	2b08      	cmp	r3, #8
 800916a:	d017      	beq.n	800919c <UART_SetConfig+0x1cc4>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009170:	2b09      	cmp	r3, #9
 8009172:	d010      	beq.n	8009196 <UART_SetConfig+0x1cbe>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009178:	2b0a      	cmp	r3, #10
 800917a:	d009      	beq.n	8009190 <UART_SetConfig+0x1cb8>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009180:	2b0b      	cmp	r3, #11
 8009182:	d102      	bne.n	800918a <UART_SetConfig+0x1cb2>
 8009184:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009188:	e022      	b.n	80091d0 <UART_SetConfig+0x1cf8>
 800918a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800918e:	e01f      	b.n	80091d0 <UART_SetConfig+0x1cf8>
 8009190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009194:	e01c      	b.n	80091d0 <UART_SetConfig+0x1cf8>
 8009196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800919a:	e019      	b.n	80091d0 <UART_SetConfig+0x1cf8>
 800919c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091a0:	e016      	b.n	80091d0 <UART_SetConfig+0x1cf8>
 80091a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091a6:	e013      	b.n	80091d0 <UART_SetConfig+0x1cf8>
 80091a8:	f241 5354 	movw	r3, #5460	; 0x1554
 80091ac:	e010      	b.n	80091d0 <UART_SetConfig+0x1cf8>
 80091ae:	f641 1398 	movw	r3, #6552	; 0x1998
 80091b2:	e00d      	b.n	80091d0 <UART_SetConfig+0x1cf8>
 80091b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80091b8:	e00a      	b.n	80091d0 <UART_SetConfig+0x1cf8>
 80091ba:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80091be:	e007      	b.n	80091d0 <UART_SetConfig+0x1cf8>
 80091c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80091c4:	e004      	b.n	80091d0 <UART_SetConfig+0x1cf8>
 80091c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091ca:	e001      	b.n	80091d0 <UART_SetConfig+0x1cf8>
 80091cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	6852      	ldr	r2, [r2, #4]
 80091d4:	0852      	lsrs	r2, r2, #1
 80091d6:	441a      	add	r2, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80091e4:	e003      	b.n	80091ee <UART_SetConfig+0x1d16>
      default:
        ret = HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80091ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f0:	2b0f      	cmp	r3, #15
 80091f2:	d916      	bls.n	8009222 <UART_SetConfig+0x1d4a>
 80091f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091fa:	d212      	bcs.n	8009222 <UART_SetConfig+0x1d4a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091fe:	b29b      	uxth	r3, r3
 8009200:	f023 030f 	bic.w	r3, r3, #15
 8009204:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009208:	085b      	lsrs	r3, r3, #1
 800920a:	b29b      	uxth	r3, r3
 800920c:	f003 0307 	and.w	r3, r3, #7
 8009210:	b29a      	uxth	r2, r3
 8009212:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009214:	4313      	orrs	r3, r2
 8009216:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800921e:	60da      	str	r2, [r3, #12]
 8009220:	e3a3      	b.n	800996a <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009228:	e39f      	b.n	800996a <UART_SetConfig+0x2492>
    }
  }
  else
  {
    switch (clocksource)
 800922a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800922e:	2b40      	cmp	r3, #64	; 0x40
 8009230:	f200 8388 	bhi.w	8009944 <UART_SetConfig+0x246c>
 8009234:	a201      	add	r2, pc, #4	; (adr r2, 800923c <UART_SetConfig+0x1d64>)
 8009236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800923a:	bf00      	nop
 800923c:	08009341 	.word	0x08009341
 8009240:	080093f7 	.word	0x080093f7
 8009244:	08009945 	.word	0x08009945
 8009248:	08009945 	.word	0x08009945
 800924c:	080094ad 	.word	0x080094ad
 8009250:	08009945 	.word	0x08009945
 8009254:	08009945 	.word	0x08009945
 8009258:	08009945 	.word	0x08009945
 800925c:	08009567 	.word	0x08009567
 8009260:	08009945 	.word	0x08009945
 8009264:	08009945 	.word	0x08009945
 8009268:	08009945 	.word	0x08009945
 800926c:	08009945 	.word	0x08009945
 8009270:	08009945 	.word	0x08009945
 8009274:	08009945 	.word	0x08009945
 8009278:	08009945 	.word	0x08009945
 800927c:	08009621 	.word	0x08009621
 8009280:	08009945 	.word	0x08009945
 8009284:	08009945 	.word	0x08009945
 8009288:	08009945 	.word	0x08009945
 800928c:	08009945 	.word	0x08009945
 8009290:	08009945 	.word	0x08009945
 8009294:	08009945 	.word	0x08009945
 8009298:	08009945 	.word	0x08009945
 800929c:	08009945 	.word	0x08009945
 80092a0:	08009945 	.word	0x08009945
 80092a4:	08009945 	.word	0x08009945
 80092a8:	08009945 	.word	0x08009945
 80092ac:	08009945 	.word	0x08009945
 80092b0:	08009945 	.word	0x08009945
 80092b4:	08009945 	.word	0x08009945
 80092b8:	08009945 	.word	0x08009945
 80092bc:	08009791 	.word	0x08009791
 80092c0:	08009945 	.word	0x08009945
 80092c4:	08009945 	.word	0x08009945
 80092c8:	08009945 	.word	0x08009945
 80092cc:	08009945 	.word	0x08009945
 80092d0:	08009945 	.word	0x08009945
 80092d4:	08009945 	.word	0x08009945
 80092d8:	08009945 	.word	0x08009945
 80092dc:	08009945 	.word	0x08009945
 80092e0:	08009945 	.word	0x08009945
 80092e4:	08009945 	.word	0x08009945
 80092e8:	08009945 	.word	0x08009945
 80092ec:	08009945 	.word	0x08009945
 80092f0:	08009945 	.word	0x08009945
 80092f4:	08009945 	.word	0x08009945
 80092f8:	08009945 	.word	0x08009945
 80092fc:	08009945 	.word	0x08009945
 8009300:	08009945 	.word	0x08009945
 8009304:	08009945 	.word	0x08009945
 8009308:	08009945 	.word	0x08009945
 800930c:	08009945 	.word	0x08009945
 8009310:	08009945 	.word	0x08009945
 8009314:	08009945 	.word	0x08009945
 8009318:	08009945 	.word	0x08009945
 800931c:	08009945 	.word	0x08009945
 8009320:	08009945 	.word	0x08009945
 8009324:	08009945 	.word	0x08009945
 8009328:	08009945 	.word	0x08009945
 800932c:	08009945 	.word	0x08009945
 8009330:	08009945 	.word	0x08009945
 8009334:	08009945 	.word	0x08009945
 8009338:	08009945 	.word	0x08009945
 800933c:	08009885 	.word	0x08009885
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009340:	f7fb fdb2 	bl	8004ea8 <HAL_RCC_GetPCLK1Freq>
 8009344:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934a:	2b00      	cmp	r3, #0
 800934c:	d044      	beq.n	80093d8 <UART_SetConfig+0x1f00>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009352:	2b01      	cmp	r3, #1
 8009354:	d03e      	beq.n	80093d4 <UART_SetConfig+0x1efc>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935a:	2b02      	cmp	r3, #2
 800935c:	d038      	beq.n	80093d0 <UART_SetConfig+0x1ef8>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009362:	2b03      	cmp	r3, #3
 8009364:	d032      	beq.n	80093cc <UART_SetConfig+0x1ef4>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936a:	2b04      	cmp	r3, #4
 800936c:	d02c      	beq.n	80093c8 <UART_SetConfig+0x1ef0>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009372:	2b05      	cmp	r3, #5
 8009374:	d026      	beq.n	80093c4 <UART_SetConfig+0x1eec>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937a:	2b06      	cmp	r3, #6
 800937c:	d020      	beq.n	80093c0 <UART_SetConfig+0x1ee8>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009382:	2b07      	cmp	r3, #7
 8009384:	d01a      	beq.n	80093bc <UART_SetConfig+0x1ee4>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938a:	2b08      	cmp	r3, #8
 800938c:	d014      	beq.n	80093b8 <UART_SetConfig+0x1ee0>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009392:	2b09      	cmp	r3, #9
 8009394:	d00e      	beq.n	80093b4 <UART_SetConfig+0x1edc>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939a:	2b0a      	cmp	r3, #10
 800939c:	d008      	beq.n	80093b0 <UART_SetConfig+0x1ed8>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a2:	2b0b      	cmp	r3, #11
 80093a4:	d102      	bne.n	80093ac <UART_SetConfig+0x1ed4>
 80093a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093aa:	e016      	b.n	80093da <UART_SetConfig+0x1f02>
 80093ac:	2301      	movs	r3, #1
 80093ae:	e014      	b.n	80093da <UART_SetConfig+0x1f02>
 80093b0:	2380      	movs	r3, #128	; 0x80
 80093b2:	e012      	b.n	80093da <UART_SetConfig+0x1f02>
 80093b4:	2340      	movs	r3, #64	; 0x40
 80093b6:	e010      	b.n	80093da <UART_SetConfig+0x1f02>
 80093b8:	2320      	movs	r3, #32
 80093ba:	e00e      	b.n	80093da <UART_SetConfig+0x1f02>
 80093bc:	2310      	movs	r3, #16
 80093be:	e00c      	b.n	80093da <UART_SetConfig+0x1f02>
 80093c0:	230c      	movs	r3, #12
 80093c2:	e00a      	b.n	80093da <UART_SetConfig+0x1f02>
 80093c4:	230a      	movs	r3, #10
 80093c6:	e008      	b.n	80093da <UART_SetConfig+0x1f02>
 80093c8:	2308      	movs	r3, #8
 80093ca:	e006      	b.n	80093da <UART_SetConfig+0x1f02>
 80093cc:	2306      	movs	r3, #6
 80093ce:	e004      	b.n	80093da <UART_SetConfig+0x1f02>
 80093d0:	2304      	movs	r3, #4
 80093d2:	e002      	b.n	80093da <UART_SetConfig+0x1f02>
 80093d4:	2302      	movs	r3, #2
 80093d6:	e000      	b.n	80093da <UART_SetConfig+0x1f02>
 80093d8:	2301      	movs	r3, #1
 80093da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	085b      	lsrs	r3, r3, #1
 80093e6:	441a      	add	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80093f4:	e2aa      	b.n	800994c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093f6:	f7fb fd6d 	bl	8004ed4 <HAL_RCC_GetPCLK2Freq>
 80093fa:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009400:	2b00      	cmp	r3, #0
 8009402:	d044      	beq.n	800948e <UART_SetConfig+0x1fb6>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009408:	2b01      	cmp	r3, #1
 800940a:	d03e      	beq.n	800948a <UART_SetConfig+0x1fb2>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009410:	2b02      	cmp	r3, #2
 8009412:	d038      	beq.n	8009486 <UART_SetConfig+0x1fae>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009418:	2b03      	cmp	r3, #3
 800941a:	d032      	beq.n	8009482 <UART_SetConfig+0x1faa>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009420:	2b04      	cmp	r3, #4
 8009422:	d02c      	beq.n	800947e <UART_SetConfig+0x1fa6>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009428:	2b05      	cmp	r3, #5
 800942a:	d026      	beq.n	800947a <UART_SetConfig+0x1fa2>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009430:	2b06      	cmp	r3, #6
 8009432:	d020      	beq.n	8009476 <UART_SetConfig+0x1f9e>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009438:	2b07      	cmp	r3, #7
 800943a:	d01a      	beq.n	8009472 <UART_SetConfig+0x1f9a>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009440:	2b08      	cmp	r3, #8
 8009442:	d014      	beq.n	800946e <UART_SetConfig+0x1f96>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009448:	2b09      	cmp	r3, #9
 800944a:	d00e      	beq.n	800946a <UART_SetConfig+0x1f92>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009450:	2b0a      	cmp	r3, #10
 8009452:	d008      	beq.n	8009466 <UART_SetConfig+0x1f8e>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009458:	2b0b      	cmp	r3, #11
 800945a:	d102      	bne.n	8009462 <UART_SetConfig+0x1f8a>
 800945c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009460:	e016      	b.n	8009490 <UART_SetConfig+0x1fb8>
 8009462:	2301      	movs	r3, #1
 8009464:	e014      	b.n	8009490 <UART_SetConfig+0x1fb8>
 8009466:	2380      	movs	r3, #128	; 0x80
 8009468:	e012      	b.n	8009490 <UART_SetConfig+0x1fb8>
 800946a:	2340      	movs	r3, #64	; 0x40
 800946c:	e010      	b.n	8009490 <UART_SetConfig+0x1fb8>
 800946e:	2320      	movs	r3, #32
 8009470:	e00e      	b.n	8009490 <UART_SetConfig+0x1fb8>
 8009472:	2310      	movs	r3, #16
 8009474:	e00c      	b.n	8009490 <UART_SetConfig+0x1fb8>
 8009476:	230c      	movs	r3, #12
 8009478:	e00a      	b.n	8009490 <UART_SetConfig+0x1fb8>
 800947a:	230a      	movs	r3, #10
 800947c:	e008      	b.n	8009490 <UART_SetConfig+0x1fb8>
 800947e:	2308      	movs	r3, #8
 8009480:	e006      	b.n	8009490 <UART_SetConfig+0x1fb8>
 8009482:	2306      	movs	r3, #6
 8009484:	e004      	b.n	8009490 <UART_SetConfig+0x1fb8>
 8009486:	2304      	movs	r3, #4
 8009488:	e002      	b.n	8009490 <UART_SetConfig+0x1fb8>
 800948a:	2302      	movs	r3, #2
 800948c:	e000      	b.n	8009490 <UART_SetConfig+0x1fb8>
 800948e:	2301      	movs	r3, #1
 8009490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009492:	fbb2 f2f3 	udiv	r2, r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	085b      	lsrs	r3, r3, #1
 800949c:	441a      	add	r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80094aa:	e24f      	b.n	800994c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094ac:	f107 0318 	add.w	r3, r7, #24
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7fc fefd 	bl	80062b0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094b6:	69fa      	ldr	r2, [r7, #28]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d044      	beq.n	800954a <UART_SetConfig+0x2072>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d03e      	beq.n	8009546 <UART_SetConfig+0x206e>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d038      	beq.n	8009542 <UART_SetConfig+0x206a>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d4:	2b03      	cmp	r3, #3
 80094d6:	d032      	beq.n	800953e <UART_SetConfig+0x2066>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094dc:	2b04      	cmp	r3, #4
 80094de:	d02c      	beq.n	800953a <UART_SetConfig+0x2062>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e4:	2b05      	cmp	r3, #5
 80094e6:	d026      	beq.n	8009536 <UART_SetConfig+0x205e>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ec:	2b06      	cmp	r3, #6
 80094ee:	d020      	beq.n	8009532 <UART_SetConfig+0x205a>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f4:	2b07      	cmp	r3, #7
 80094f6:	d01a      	beq.n	800952e <UART_SetConfig+0x2056>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fc:	2b08      	cmp	r3, #8
 80094fe:	d014      	beq.n	800952a <UART_SetConfig+0x2052>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009504:	2b09      	cmp	r3, #9
 8009506:	d00e      	beq.n	8009526 <UART_SetConfig+0x204e>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950c:	2b0a      	cmp	r3, #10
 800950e:	d008      	beq.n	8009522 <UART_SetConfig+0x204a>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009514:	2b0b      	cmp	r3, #11
 8009516:	d102      	bne.n	800951e <UART_SetConfig+0x2046>
 8009518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800951c:	e016      	b.n	800954c <UART_SetConfig+0x2074>
 800951e:	2301      	movs	r3, #1
 8009520:	e014      	b.n	800954c <UART_SetConfig+0x2074>
 8009522:	2380      	movs	r3, #128	; 0x80
 8009524:	e012      	b.n	800954c <UART_SetConfig+0x2074>
 8009526:	2340      	movs	r3, #64	; 0x40
 8009528:	e010      	b.n	800954c <UART_SetConfig+0x2074>
 800952a:	2320      	movs	r3, #32
 800952c:	e00e      	b.n	800954c <UART_SetConfig+0x2074>
 800952e:	2310      	movs	r3, #16
 8009530:	e00c      	b.n	800954c <UART_SetConfig+0x2074>
 8009532:	230c      	movs	r3, #12
 8009534:	e00a      	b.n	800954c <UART_SetConfig+0x2074>
 8009536:	230a      	movs	r3, #10
 8009538:	e008      	b.n	800954c <UART_SetConfig+0x2074>
 800953a:	2308      	movs	r3, #8
 800953c:	e006      	b.n	800954c <UART_SetConfig+0x2074>
 800953e:	2306      	movs	r3, #6
 8009540:	e004      	b.n	800954c <UART_SetConfig+0x2074>
 8009542:	2304      	movs	r3, #4
 8009544:	e002      	b.n	800954c <UART_SetConfig+0x2074>
 8009546:	2302      	movs	r3, #2
 8009548:	e000      	b.n	800954c <UART_SetConfig+0x2074>
 800954a:	2301      	movs	r3, #1
 800954c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	085b      	lsrs	r3, r3, #1
 8009556:	441a      	add	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009560:	b29b      	uxth	r3, r3
 8009562:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009564:	e1f2      	b.n	800994c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009566:	f107 030c 	add.w	r3, r7, #12
 800956a:	4618      	mov	r0, r3
 800956c:	f7fc ffec 	bl	8006548 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009570:	693a      	ldr	r2, [r7, #16]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009576:	2b00      	cmp	r3, #0
 8009578:	d044      	beq.n	8009604 <UART_SetConfig+0x212c>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957e:	2b01      	cmp	r3, #1
 8009580:	d03e      	beq.n	8009600 <UART_SetConfig+0x2128>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009586:	2b02      	cmp	r3, #2
 8009588:	d038      	beq.n	80095fc <UART_SetConfig+0x2124>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958e:	2b03      	cmp	r3, #3
 8009590:	d032      	beq.n	80095f8 <UART_SetConfig+0x2120>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009596:	2b04      	cmp	r3, #4
 8009598:	d02c      	beq.n	80095f4 <UART_SetConfig+0x211c>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959e:	2b05      	cmp	r3, #5
 80095a0:	d026      	beq.n	80095f0 <UART_SetConfig+0x2118>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a6:	2b06      	cmp	r3, #6
 80095a8:	d020      	beq.n	80095ec <UART_SetConfig+0x2114>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ae:	2b07      	cmp	r3, #7
 80095b0:	d01a      	beq.n	80095e8 <UART_SetConfig+0x2110>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b6:	2b08      	cmp	r3, #8
 80095b8:	d014      	beq.n	80095e4 <UART_SetConfig+0x210c>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095be:	2b09      	cmp	r3, #9
 80095c0:	d00e      	beq.n	80095e0 <UART_SetConfig+0x2108>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c6:	2b0a      	cmp	r3, #10
 80095c8:	d008      	beq.n	80095dc <UART_SetConfig+0x2104>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ce:	2b0b      	cmp	r3, #11
 80095d0:	d102      	bne.n	80095d8 <UART_SetConfig+0x2100>
 80095d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095d6:	e016      	b.n	8009606 <UART_SetConfig+0x212e>
 80095d8:	2301      	movs	r3, #1
 80095da:	e014      	b.n	8009606 <UART_SetConfig+0x212e>
 80095dc:	2380      	movs	r3, #128	; 0x80
 80095de:	e012      	b.n	8009606 <UART_SetConfig+0x212e>
 80095e0:	2340      	movs	r3, #64	; 0x40
 80095e2:	e010      	b.n	8009606 <UART_SetConfig+0x212e>
 80095e4:	2320      	movs	r3, #32
 80095e6:	e00e      	b.n	8009606 <UART_SetConfig+0x212e>
 80095e8:	2310      	movs	r3, #16
 80095ea:	e00c      	b.n	8009606 <UART_SetConfig+0x212e>
 80095ec:	230c      	movs	r3, #12
 80095ee:	e00a      	b.n	8009606 <UART_SetConfig+0x212e>
 80095f0:	230a      	movs	r3, #10
 80095f2:	e008      	b.n	8009606 <UART_SetConfig+0x212e>
 80095f4:	2308      	movs	r3, #8
 80095f6:	e006      	b.n	8009606 <UART_SetConfig+0x212e>
 80095f8:	2306      	movs	r3, #6
 80095fa:	e004      	b.n	8009606 <UART_SetConfig+0x212e>
 80095fc:	2304      	movs	r3, #4
 80095fe:	e002      	b.n	8009606 <UART_SetConfig+0x212e>
 8009600:	2302      	movs	r3, #2
 8009602:	e000      	b.n	8009606 <UART_SetConfig+0x212e>
 8009604:	2301      	movs	r3, #1
 8009606:	fbb2 f2f3 	udiv	r2, r2, r3
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	085b      	lsrs	r3, r3, #1
 8009610:	441a      	add	r2, r3
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	fbb2 f3f3 	udiv	r3, r2, r3
 800961a:	b29b      	uxth	r3, r3
 800961c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800961e:	e195      	b.n	800994c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009620:	4b87      	ldr	r3, [pc, #540]	; (8009840 <UART_SetConfig+0x2368>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0320 	and.w	r3, r3, #32
 8009628:	2b00      	cmp	r3, #0
 800962a:	d05d      	beq.n	80096e8 <UART_SetConfig+0x2210>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800962c:	4b84      	ldr	r3, [pc, #528]	; (8009840 <UART_SetConfig+0x2368>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	08db      	lsrs	r3, r3, #3
 8009632:	f003 0303 	and.w	r3, r3, #3
 8009636:	4a83      	ldr	r2, [pc, #524]	; (8009844 <UART_SetConfig+0x236c>)
 8009638:	40da      	lsrs	r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963e:	2b00      	cmp	r3, #0
 8009640:	d044      	beq.n	80096cc <UART_SetConfig+0x21f4>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009646:	2b01      	cmp	r3, #1
 8009648:	d03e      	beq.n	80096c8 <UART_SetConfig+0x21f0>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964e:	2b02      	cmp	r3, #2
 8009650:	d038      	beq.n	80096c4 <UART_SetConfig+0x21ec>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009656:	2b03      	cmp	r3, #3
 8009658:	d032      	beq.n	80096c0 <UART_SetConfig+0x21e8>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965e:	2b04      	cmp	r3, #4
 8009660:	d02c      	beq.n	80096bc <UART_SetConfig+0x21e4>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009666:	2b05      	cmp	r3, #5
 8009668:	d026      	beq.n	80096b8 <UART_SetConfig+0x21e0>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966e:	2b06      	cmp	r3, #6
 8009670:	d020      	beq.n	80096b4 <UART_SetConfig+0x21dc>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009676:	2b07      	cmp	r3, #7
 8009678:	d01a      	beq.n	80096b0 <UART_SetConfig+0x21d8>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967e:	2b08      	cmp	r3, #8
 8009680:	d014      	beq.n	80096ac <UART_SetConfig+0x21d4>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009686:	2b09      	cmp	r3, #9
 8009688:	d00e      	beq.n	80096a8 <UART_SetConfig+0x21d0>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968e:	2b0a      	cmp	r3, #10
 8009690:	d008      	beq.n	80096a4 <UART_SetConfig+0x21cc>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009696:	2b0b      	cmp	r3, #11
 8009698:	d102      	bne.n	80096a0 <UART_SetConfig+0x21c8>
 800969a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800969e:	e016      	b.n	80096ce <UART_SetConfig+0x21f6>
 80096a0:	2301      	movs	r3, #1
 80096a2:	e014      	b.n	80096ce <UART_SetConfig+0x21f6>
 80096a4:	2380      	movs	r3, #128	; 0x80
 80096a6:	e012      	b.n	80096ce <UART_SetConfig+0x21f6>
 80096a8:	2340      	movs	r3, #64	; 0x40
 80096aa:	e010      	b.n	80096ce <UART_SetConfig+0x21f6>
 80096ac:	2320      	movs	r3, #32
 80096ae:	e00e      	b.n	80096ce <UART_SetConfig+0x21f6>
 80096b0:	2310      	movs	r3, #16
 80096b2:	e00c      	b.n	80096ce <UART_SetConfig+0x21f6>
 80096b4:	230c      	movs	r3, #12
 80096b6:	e00a      	b.n	80096ce <UART_SetConfig+0x21f6>
 80096b8:	230a      	movs	r3, #10
 80096ba:	e008      	b.n	80096ce <UART_SetConfig+0x21f6>
 80096bc:	2308      	movs	r3, #8
 80096be:	e006      	b.n	80096ce <UART_SetConfig+0x21f6>
 80096c0:	2306      	movs	r3, #6
 80096c2:	e004      	b.n	80096ce <UART_SetConfig+0x21f6>
 80096c4:	2304      	movs	r3, #4
 80096c6:	e002      	b.n	80096ce <UART_SetConfig+0x21f6>
 80096c8:	2302      	movs	r3, #2
 80096ca:	e000      	b.n	80096ce <UART_SetConfig+0x21f6>
 80096cc:	2301      	movs	r3, #1
 80096ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	085b      	lsrs	r3, r3, #1
 80096d8:	441a      	add	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	fbb2 f3f3 	udiv	r3, r2, r3
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80096e6:	e131      	b.n	800994c <UART_SetConfig+0x2474>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d043      	beq.n	8009778 <UART_SetConfig+0x22a0>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d03d      	beq.n	8009774 <UART_SetConfig+0x229c>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d037      	beq.n	8009770 <UART_SetConfig+0x2298>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009704:	2b03      	cmp	r3, #3
 8009706:	d031      	beq.n	800976c <UART_SetConfig+0x2294>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970c:	2b04      	cmp	r3, #4
 800970e:	d02b      	beq.n	8009768 <UART_SetConfig+0x2290>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009714:	2b05      	cmp	r3, #5
 8009716:	d025      	beq.n	8009764 <UART_SetConfig+0x228c>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971c:	2b06      	cmp	r3, #6
 800971e:	d01f      	beq.n	8009760 <UART_SetConfig+0x2288>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009724:	2b07      	cmp	r3, #7
 8009726:	d019      	beq.n	800975c <UART_SetConfig+0x2284>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972c:	2b08      	cmp	r3, #8
 800972e:	d013      	beq.n	8009758 <UART_SetConfig+0x2280>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009734:	2b09      	cmp	r3, #9
 8009736:	d00d      	beq.n	8009754 <UART_SetConfig+0x227c>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973c:	2b0a      	cmp	r3, #10
 800973e:	d007      	beq.n	8009750 <UART_SetConfig+0x2278>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009744:	2b0b      	cmp	r3, #11
 8009746:	d101      	bne.n	800974c <UART_SetConfig+0x2274>
 8009748:	4b3f      	ldr	r3, [pc, #252]	; (8009848 <UART_SetConfig+0x2370>)
 800974a:	e016      	b.n	800977a <UART_SetConfig+0x22a2>
 800974c:	4b3d      	ldr	r3, [pc, #244]	; (8009844 <UART_SetConfig+0x236c>)
 800974e:	e014      	b.n	800977a <UART_SetConfig+0x22a2>
 8009750:	4b3e      	ldr	r3, [pc, #248]	; (800984c <UART_SetConfig+0x2374>)
 8009752:	e012      	b.n	800977a <UART_SetConfig+0x22a2>
 8009754:	4b3e      	ldr	r3, [pc, #248]	; (8009850 <UART_SetConfig+0x2378>)
 8009756:	e010      	b.n	800977a <UART_SetConfig+0x22a2>
 8009758:	4b3e      	ldr	r3, [pc, #248]	; (8009854 <UART_SetConfig+0x237c>)
 800975a:	e00e      	b.n	800977a <UART_SetConfig+0x22a2>
 800975c:	4b3e      	ldr	r3, [pc, #248]	; (8009858 <UART_SetConfig+0x2380>)
 800975e:	e00c      	b.n	800977a <UART_SetConfig+0x22a2>
 8009760:	4b3e      	ldr	r3, [pc, #248]	; (800985c <UART_SetConfig+0x2384>)
 8009762:	e00a      	b.n	800977a <UART_SetConfig+0x22a2>
 8009764:	4b3e      	ldr	r3, [pc, #248]	; (8009860 <UART_SetConfig+0x2388>)
 8009766:	e008      	b.n	800977a <UART_SetConfig+0x22a2>
 8009768:	4b3e      	ldr	r3, [pc, #248]	; (8009864 <UART_SetConfig+0x238c>)
 800976a:	e006      	b.n	800977a <UART_SetConfig+0x22a2>
 800976c:	4b3e      	ldr	r3, [pc, #248]	; (8009868 <UART_SetConfig+0x2390>)
 800976e:	e004      	b.n	800977a <UART_SetConfig+0x22a2>
 8009770:	4b3e      	ldr	r3, [pc, #248]	; (800986c <UART_SetConfig+0x2394>)
 8009772:	e002      	b.n	800977a <UART_SetConfig+0x22a2>
 8009774:	4b3e      	ldr	r3, [pc, #248]	; (8009870 <UART_SetConfig+0x2398>)
 8009776:	e000      	b.n	800977a <UART_SetConfig+0x22a2>
 8009778:	4b32      	ldr	r3, [pc, #200]	; (8009844 <UART_SetConfig+0x236c>)
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	6852      	ldr	r2, [r2, #4]
 800977e:	0852      	lsrs	r2, r2, #1
 8009780:	441a      	add	r2, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	fbb2 f3f3 	udiv	r3, r2, r3
 800978a:	b29b      	uxth	r3, r3
 800978c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800978e:	e0dd      	b.n	800994c <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009794:	2b00      	cmp	r3, #0
 8009796:	d046      	beq.n	8009826 <UART_SetConfig+0x234e>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979c:	2b01      	cmp	r3, #1
 800979e:	d040      	beq.n	8009822 <UART_SetConfig+0x234a>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d03a      	beq.n	800981e <UART_SetConfig+0x2346>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ac:	2b03      	cmp	r3, #3
 80097ae:	d034      	beq.n	800981a <UART_SetConfig+0x2342>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b4:	2b04      	cmp	r3, #4
 80097b6:	d02e      	beq.n	8009816 <UART_SetConfig+0x233e>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097bc:	2b05      	cmp	r3, #5
 80097be:	d028      	beq.n	8009812 <UART_SetConfig+0x233a>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c4:	2b06      	cmp	r3, #6
 80097c6:	d022      	beq.n	800980e <UART_SetConfig+0x2336>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097cc:	2b07      	cmp	r3, #7
 80097ce:	d01c      	beq.n	800980a <UART_SetConfig+0x2332>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d4:	2b08      	cmp	r3, #8
 80097d6:	d016      	beq.n	8009806 <UART_SetConfig+0x232e>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097dc:	2b09      	cmp	r3, #9
 80097de:	d00f      	beq.n	8009800 <UART_SetConfig+0x2328>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e4:	2b0a      	cmp	r3, #10
 80097e6:	d008      	beq.n	80097fa <UART_SetConfig+0x2322>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ec:	2b0b      	cmp	r3, #11
 80097ee:	d102      	bne.n	80097f6 <UART_SetConfig+0x231e>
 80097f0:	f643 5309 	movw	r3, #15625	; 0x3d09
 80097f4:	e018      	b.n	8009828 <UART_SetConfig+0x2350>
 80097f6:	4b18      	ldr	r3, [pc, #96]	; (8009858 <UART_SetConfig+0x2380>)
 80097f8:	e016      	b.n	8009828 <UART_SetConfig+0x2350>
 80097fa:	f647 2312 	movw	r3, #31250	; 0x7a12
 80097fe:	e013      	b.n	8009828 <UART_SetConfig+0x2350>
 8009800:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009804:	e010      	b.n	8009828 <UART_SetConfig+0x2350>
 8009806:	4b1b      	ldr	r3, [pc, #108]	; (8009874 <UART_SetConfig+0x239c>)
 8009808:	e00e      	b.n	8009828 <UART_SetConfig+0x2350>
 800980a:	4b0f      	ldr	r3, [pc, #60]	; (8009848 <UART_SetConfig+0x2370>)
 800980c:	e00c      	b.n	8009828 <UART_SetConfig+0x2350>
 800980e:	4b1a      	ldr	r3, [pc, #104]	; (8009878 <UART_SetConfig+0x23a0>)
 8009810:	e00a      	b.n	8009828 <UART_SetConfig+0x2350>
 8009812:	4b1a      	ldr	r3, [pc, #104]	; (800987c <UART_SetConfig+0x23a4>)
 8009814:	e008      	b.n	8009828 <UART_SetConfig+0x2350>
 8009816:	4b0d      	ldr	r3, [pc, #52]	; (800984c <UART_SetConfig+0x2374>)
 8009818:	e006      	b.n	8009828 <UART_SetConfig+0x2350>
 800981a:	4b19      	ldr	r3, [pc, #100]	; (8009880 <UART_SetConfig+0x23a8>)
 800981c:	e004      	b.n	8009828 <UART_SetConfig+0x2350>
 800981e:	4b0c      	ldr	r3, [pc, #48]	; (8009850 <UART_SetConfig+0x2378>)
 8009820:	e002      	b.n	8009828 <UART_SetConfig+0x2350>
 8009822:	4b0c      	ldr	r3, [pc, #48]	; (8009854 <UART_SetConfig+0x237c>)
 8009824:	e000      	b.n	8009828 <UART_SetConfig+0x2350>
 8009826:	4b0c      	ldr	r3, [pc, #48]	; (8009858 <UART_SetConfig+0x2380>)
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	6852      	ldr	r2, [r2, #4]
 800982c:	0852      	lsrs	r2, r2, #1
 800982e:	441a      	add	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	fbb2 f3f3 	udiv	r3, r2, r3
 8009838:	b29b      	uxth	r3, r3
 800983a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800983c:	e086      	b.n	800994c <UART_SetConfig+0x2474>
 800983e:	bf00      	nop
 8009840:	58024400 	.word	0x58024400
 8009844:	03d09000 	.word	0x03d09000
 8009848:	0003d090 	.word	0x0003d090
 800984c:	0007a120 	.word	0x0007a120
 8009850:	000f4240 	.word	0x000f4240
 8009854:	001e8480 	.word	0x001e8480
 8009858:	003d0900 	.word	0x003d0900
 800985c:	00516155 	.word	0x00516155
 8009860:	0061a800 	.word	0x0061a800
 8009864:	007a1200 	.word	0x007a1200
 8009868:	00a2c2aa 	.word	0x00a2c2aa
 800986c:	00f42400 	.word	0x00f42400
 8009870:	01e84800 	.word	0x01e84800
 8009874:	0001e848 	.word	0x0001e848
 8009878:	00051615 	.word	0x00051615
 800987c:	00061a80 	.word	0x00061a80
 8009880:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009888:	2b00      	cmp	r3, #0
 800988a:	d04e      	beq.n	800992a <UART_SetConfig+0x2452>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009890:	2b01      	cmp	r3, #1
 8009892:	d047      	beq.n	8009924 <UART_SetConfig+0x244c>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009898:	2b02      	cmp	r3, #2
 800989a:	d040      	beq.n	800991e <UART_SetConfig+0x2446>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a0:	2b03      	cmp	r3, #3
 80098a2:	d039      	beq.n	8009918 <UART_SetConfig+0x2440>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a8:	2b04      	cmp	r3, #4
 80098aa:	d032      	beq.n	8009912 <UART_SetConfig+0x243a>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b0:	2b05      	cmp	r3, #5
 80098b2:	d02b      	beq.n	800990c <UART_SetConfig+0x2434>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b8:	2b06      	cmp	r3, #6
 80098ba:	d024      	beq.n	8009906 <UART_SetConfig+0x242e>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c0:	2b07      	cmp	r3, #7
 80098c2:	d01d      	beq.n	8009900 <UART_SetConfig+0x2428>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c8:	2b08      	cmp	r3, #8
 80098ca:	d016      	beq.n	80098fa <UART_SetConfig+0x2422>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d0:	2b09      	cmp	r3, #9
 80098d2:	d00f      	beq.n	80098f4 <UART_SetConfig+0x241c>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d8:	2b0a      	cmp	r3, #10
 80098da:	d008      	beq.n	80098ee <UART_SetConfig+0x2416>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e0:	2b0b      	cmp	r3, #11
 80098e2:	d101      	bne.n	80098e8 <UART_SetConfig+0x2410>
 80098e4:	2380      	movs	r3, #128	; 0x80
 80098e6:	e022      	b.n	800992e <UART_SetConfig+0x2456>
 80098e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098ec:	e01f      	b.n	800992e <UART_SetConfig+0x2456>
 80098ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098f2:	e01c      	b.n	800992e <UART_SetConfig+0x2456>
 80098f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098f8:	e019      	b.n	800992e <UART_SetConfig+0x2456>
 80098fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098fe:	e016      	b.n	800992e <UART_SetConfig+0x2456>
 8009900:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009904:	e013      	b.n	800992e <UART_SetConfig+0x2456>
 8009906:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800990a:	e010      	b.n	800992e <UART_SetConfig+0x2456>
 800990c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009910:	e00d      	b.n	800992e <UART_SetConfig+0x2456>
 8009912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009916:	e00a      	b.n	800992e <UART_SetConfig+0x2456>
 8009918:	f241 5355 	movw	r3, #5461	; 0x1555
 800991c:	e007      	b.n	800992e <UART_SetConfig+0x2456>
 800991e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009922:	e004      	b.n	800992e <UART_SetConfig+0x2456>
 8009924:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009928:	e001      	b.n	800992e <UART_SetConfig+0x2456>
 800992a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	6852      	ldr	r2, [r2, #4]
 8009932:	0852      	lsrs	r2, r2, #1
 8009934:	441a      	add	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	fbb2 f3f3 	udiv	r3, r2, r3
 800993e:	b29b      	uxth	r3, r3
 8009940:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009942:	e003      	b.n	800994c <UART_SetConfig+0x2474>
      default:
        ret = HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800994a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800994c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800994e:	2b0f      	cmp	r3, #15
 8009950:	d908      	bls.n	8009964 <UART_SetConfig+0x248c>
 8009952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009958:	d204      	bcs.n	8009964 <UART_SetConfig+0x248c>
    {
      huart->Instance->BRR = usartdiv;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009960:	60da      	str	r2, [r3, #12]
 8009962:	e002      	b.n	800996a <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2201      	movs	r2, #1
 800996e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2201      	movs	r2, #1
 8009976:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009986:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800998a:	4618      	mov	r0, r3
 800998c:	3740      	adds	r7, #64	; 0x40
 800998e:	46bd      	mov	sp, r7
 8009990:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a0:	2bff      	cmp	r3, #255	; 0xff
 80099a2:	d904      	bls.n	80099ae <UART_AdvFeatureConfig+0x1a>
 80099a4:	f640 4149 	movw	r1, #3145	; 0xc49
 80099a8:	4899      	ldr	r0, [pc, #612]	; (8009c10 <UART_AdvFeatureConfig+0x27c>)
 80099aa:	f7f7 f930 	bl	8000c0e <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b2:	f003 0301 	and.w	r3, r3, #1
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d018      	beq.n	80099ec <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d009      	beq.n	80099d6 <UART_AdvFeatureConfig+0x42>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099ca:	d004      	beq.n	80099d6 <UART_AdvFeatureConfig+0x42>
 80099cc:	f640 414e 	movw	r1, #3150	; 0xc4e
 80099d0:	488f      	ldr	r0, [pc, #572]	; (8009c10 <UART_AdvFeatureConfig+0x27c>)
 80099d2:	f7f7 f91c 	bl	8000c0e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	430a      	orrs	r2, r1
 80099ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f0:	f003 0302 	and.w	r3, r3, #2
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d018      	beq.n	8009a2a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d009      	beq.n	8009a14 <UART_AdvFeatureConfig+0x80>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a08:	d004      	beq.n	8009a14 <UART_AdvFeatureConfig+0x80>
 8009a0a:	f640 4155 	movw	r1, #3157	; 0xc55
 8009a0e:	4880      	ldr	r0, [pc, #512]	; (8009c10 <UART_AdvFeatureConfig+0x27c>)
 8009a10:	f7f7 f8fd 	bl	8000c0e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	430a      	orrs	r2, r1
 8009a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2e:	f003 0304 	and.w	r3, r3, #4
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d018      	beq.n	8009a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d009      	beq.n	8009a52 <UART_AdvFeatureConfig+0xbe>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a46:	d004      	beq.n	8009a52 <UART_AdvFeatureConfig+0xbe>
 8009a48:	f640 415c 	movw	r1, #3164	; 0xc5c
 8009a4c:	4870      	ldr	r0, [pc, #448]	; (8009c10 <UART_AdvFeatureConfig+0x27c>)
 8009a4e:	f7f7 f8de 	bl	8000c0e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	430a      	orrs	r2, r1
 8009a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a6c:	f003 0308 	and.w	r3, r3, #8
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d018      	beq.n	8009aa6 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d009      	beq.n	8009a90 <UART_AdvFeatureConfig+0xfc>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a84:	d004      	beq.n	8009a90 <UART_AdvFeatureConfig+0xfc>
 8009a86:	f640 4163 	movw	r1, #3171	; 0xc63
 8009a8a:	4861      	ldr	r0, [pc, #388]	; (8009c10 <UART_AdvFeatureConfig+0x27c>)
 8009a8c:	f7f7 f8bf 	bl	8000c0e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	430a      	orrs	r2, r1
 8009aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aaa:	f003 0310 	and.w	r3, r3, #16
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d018      	beq.n	8009ae4 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d009      	beq.n	8009ace <UART_AdvFeatureConfig+0x13a>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ac2:	d004      	beq.n	8009ace <UART_AdvFeatureConfig+0x13a>
 8009ac4:	f640 416a 	movw	r1, #3178	; 0xc6a
 8009ac8:	4851      	ldr	r0, [pc, #324]	; (8009c10 <UART_AdvFeatureConfig+0x27c>)
 8009aca:	f7f7 f8a0 	bl	8000c0e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	430a      	orrs	r2, r1
 8009ae2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae8:	f003 0320 	and.w	r3, r3, #32
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d018      	beq.n	8009b22 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d009      	beq.n	8009b0c <UART_AdvFeatureConfig+0x178>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b00:	d004      	beq.n	8009b0c <UART_AdvFeatureConfig+0x178>
 8009b02:	f640 4171 	movw	r1, #3185	; 0xc71
 8009b06:	4842      	ldr	r0, [pc, #264]	; (8009c10 <UART_AdvFeatureConfig+0x27c>)
 8009b08:	f7f7 f881 	bl	8000c0e <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f000 8082 	beq.w	8009c34 <UART_AdvFeatureConfig+0x2a0>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a37      	ldr	r2, [pc, #220]	; (8009c14 <UART_AdvFeatureConfig+0x280>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d027      	beq.n	8009b8a <UART_AdvFeatureConfig+0x1f6>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a36      	ldr	r2, [pc, #216]	; (8009c18 <UART_AdvFeatureConfig+0x284>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d022      	beq.n	8009b8a <UART_AdvFeatureConfig+0x1f6>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a34      	ldr	r2, [pc, #208]	; (8009c1c <UART_AdvFeatureConfig+0x288>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d01d      	beq.n	8009b8a <UART_AdvFeatureConfig+0x1f6>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a33      	ldr	r2, [pc, #204]	; (8009c20 <UART_AdvFeatureConfig+0x28c>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d018      	beq.n	8009b8a <UART_AdvFeatureConfig+0x1f6>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a31      	ldr	r2, [pc, #196]	; (8009c24 <UART_AdvFeatureConfig+0x290>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d013      	beq.n	8009b8a <UART_AdvFeatureConfig+0x1f6>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a30      	ldr	r2, [pc, #192]	; (8009c28 <UART_AdvFeatureConfig+0x294>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d00e      	beq.n	8009b8a <UART_AdvFeatureConfig+0x1f6>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a2e      	ldr	r2, [pc, #184]	; (8009c2c <UART_AdvFeatureConfig+0x298>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d009      	beq.n	8009b8a <UART_AdvFeatureConfig+0x1f6>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a2d      	ldr	r2, [pc, #180]	; (8009c30 <UART_AdvFeatureConfig+0x29c>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d004      	beq.n	8009b8a <UART_AdvFeatureConfig+0x1f6>
 8009b80:	f640 4178 	movw	r1, #3192	; 0xc78
 8009b84:	4822      	ldr	r0, [pc, #136]	; (8009c10 <UART_AdvFeatureConfig+0x27c>)
 8009b86:	f7f7 f842 	bl	8000c0e <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d009      	beq.n	8009ba6 <UART_AdvFeatureConfig+0x212>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b9a:	d004      	beq.n	8009ba6 <UART_AdvFeatureConfig+0x212>
 8009b9c:	f640 4179 	movw	r1, #3193	; 0xc79
 8009ba0:	481b      	ldr	r0, [pc, #108]	; (8009c10 <UART_AdvFeatureConfig+0x27c>)
 8009ba2:	f7f7 f834 	bl	8000c0e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	430a      	orrs	r2, r1
 8009bba:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bc4:	d136      	bne.n	8009c34 <UART_AdvFeatureConfig+0x2a0>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d013      	beq.n	8009bf6 <UART_AdvFeatureConfig+0x262>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009bd6:	d00e      	beq.n	8009bf6 <UART_AdvFeatureConfig+0x262>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009be0:	d009      	beq.n	8009bf6 <UART_AdvFeatureConfig+0x262>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009be6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009bea:	d004      	beq.n	8009bf6 <UART_AdvFeatureConfig+0x262>
 8009bec:	f640 417e 	movw	r1, #3198	; 0xc7e
 8009bf0:	4807      	ldr	r0, [pc, #28]	; (8009c10 <UART_AdvFeatureConfig+0x27c>)
 8009bf2:	f7f7 f80c 	bl	8000c0e <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	430a      	orrs	r2, r1
 8009c0a:	605a      	str	r2, [r3, #4]
 8009c0c:	e012      	b.n	8009c34 <UART_AdvFeatureConfig+0x2a0>
 8009c0e:	bf00      	nop
 8009c10:	080183f8 	.word	0x080183f8
 8009c14:	40011000 	.word	0x40011000
 8009c18:	40004400 	.word	0x40004400
 8009c1c:	40004800 	.word	0x40004800
 8009c20:	40004c00 	.word	0x40004c00
 8009c24:	40005000 	.word	0x40005000
 8009c28:	40011400 	.word	0x40011400
 8009c2c:	40007800 	.word	0x40007800
 8009c30:	40007c00 	.word	0x40007c00
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d018      	beq.n	8009c72 <UART_AdvFeatureConfig+0x2de>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d009      	beq.n	8009c5c <UART_AdvFeatureConfig+0x2c8>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009c50:	d004      	beq.n	8009c5c <UART_AdvFeatureConfig+0x2c8>
 8009c52:	f640 4186 	movw	r1, #3206	; 0xc86
 8009c56:	4809      	ldr	r0, [pc, #36]	; (8009c7c <UART_AdvFeatureConfig+0x2e8>)
 8009c58:	f7f6 ffd9 	bl	8000c0e <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	430a      	orrs	r2, r1
 8009c70:	605a      	str	r2, [r3, #4]
  }
}
 8009c72:	bf00      	nop
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	080183f8 	.word	0x080183f8

08009c80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af02      	add	r7, sp, #8
 8009c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009c90:	f7f7 fbd4 	bl	800143c <HAL_GetTick>
 8009c94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f003 0308 	and.w	r3, r3, #8
 8009ca0:	2b08      	cmp	r3, #8
 8009ca2:	d10e      	bne.n	8009cc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ca4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f82c 	bl	8009d10 <UART_WaitOnFlagUntilTimeout>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d001      	beq.n	8009cc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	e022      	b.n	8009d08 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 0304 	and.w	r3, r3, #4
 8009ccc:	2b04      	cmp	r3, #4
 8009cce:	d10e      	bne.n	8009cee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009cd4:	9300      	str	r3, [sp, #0]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f816 	bl	8009d10 <UART_WaitOnFlagUntilTimeout>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d001      	beq.n	8009cee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cea:	2303      	movs	r3, #3
 8009cec:	e00c      	b.n	8009d08 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2220      	movs	r2, #32
 8009cf2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2220      	movs	r2, #32
 8009cfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009d06:	2300      	movs	r3, #0
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	603b      	str	r3, [r7, #0]
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d20:	e062      	b.n	8009de8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d28:	d05e      	beq.n	8009de8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d2a:	f7f7 fb87 	bl	800143c <HAL_GetTick>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	1ad3      	subs	r3, r2, r3
 8009d34:	69ba      	ldr	r2, [r7, #24]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d302      	bcc.n	8009d40 <UART_WaitOnFlagUntilTimeout+0x30>
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d11d      	bne.n	8009d7c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009d4e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	689a      	ldr	r2, [r3, #8]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f022 0201 	bic.w	r2, r2, #1
 8009d5e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2220      	movs	r2, #32
 8009d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2220      	movs	r2, #32
 8009d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	e045      	b.n	8009e08 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f003 0304 	and.w	r3, r3, #4
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d02e      	beq.n	8009de8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	69db      	ldr	r3, [r3, #28]
 8009d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d98:	d126      	bne.n	8009de8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009da2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009db2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	689a      	ldr	r2, [r3, #8]
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f022 0201 	bic.w	r2, r2, #1
 8009dc2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2220      	movs	r2, #32
 8009dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2220      	movs	r2, #32
 8009dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2220      	movs	r2, #32
 8009dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8009de4:	2303      	movs	r3, #3
 8009de6:	e00f      	b.n	8009e08 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	69da      	ldr	r2, [r3, #28]
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	4013      	ands	r3, r2
 8009df2:	68ba      	ldr	r2, [r7, #8]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	bf0c      	ite	eq
 8009df8:	2301      	moveq	r3, #1
 8009dfa:	2300      	movne	r3, #0
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	461a      	mov	r2, r3
 8009e00:	79fb      	ldrb	r3, [r7, #7]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d08d      	beq.n	8009d22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a2e      	ldr	r2, [pc, #184]	; (8009ed8 <HAL_UARTEx_DisableFifoMode+0xc8>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d027      	beq.n	8009e72 <HAL_UARTEx_DisableFifoMode+0x62>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a2d      	ldr	r2, [pc, #180]	; (8009edc <HAL_UARTEx_DisableFifoMode+0xcc>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d022      	beq.n	8009e72 <HAL_UARTEx_DisableFifoMode+0x62>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a2b      	ldr	r2, [pc, #172]	; (8009ee0 <HAL_UARTEx_DisableFifoMode+0xd0>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d01d      	beq.n	8009e72 <HAL_UARTEx_DisableFifoMode+0x62>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a2a      	ldr	r2, [pc, #168]	; (8009ee4 <HAL_UARTEx_DisableFifoMode+0xd4>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d018      	beq.n	8009e72 <HAL_UARTEx_DisableFifoMode+0x62>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a28      	ldr	r2, [pc, #160]	; (8009ee8 <HAL_UARTEx_DisableFifoMode+0xd8>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d013      	beq.n	8009e72 <HAL_UARTEx_DisableFifoMode+0x62>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a27      	ldr	r2, [pc, #156]	; (8009eec <HAL_UARTEx_DisableFifoMode+0xdc>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d00e      	beq.n	8009e72 <HAL_UARTEx_DisableFifoMode+0x62>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a25      	ldr	r2, [pc, #148]	; (8009ef0 <HAL_UARTEx_DisableFifoMode+0xe0>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d009      	beq.n	8009e72 <HAL_UARTEx_DisableFifoMode+0x62>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a24      	ldr	r2, [pc, #144]	; (8009ef4 <HAL_UARTEx_DisableFifoMode+0xe4>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d004      	beq.n	8009e72 <HAL_UARTEx_DisableFifoMode+0x62>
 8009e68:	f240 2111 	movw	r1, #529	; 0x211
 8009e6c:	4822      	ldr	r0, [pc, #136]	; (8009ef8 <HAL_UARTEx_DisableFifoMode+0xe8>)
 8009e6e:	f7f6 fece 	bl	8000c0e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d101      	bne.n	8009e80 <HAL_UARTEx_DisableFifoMode+0x70>
 8009e7c:	2302      	movs	r3, #2
 8009e7e:	e027      	b.n	8009ed0 <HAL_UARTEx_DisableFifoMode+0xc0>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2224      	movs	r2, #36	; 0x24
 8009e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f022 0201 	bic.w	r2, r2, #1
 8009ea6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009eae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	68fa      	ldr	r2, [r7, #12]
 8009ebc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2220      	movs	r2, #32
 8009ec2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3710      	adds	r7, #16
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	40011000 	.word	0x40011000
 8009edc:	40004400 	.word	0x40004400
 8009ee0:	40004800 	.word	0x40004800
 8009ee4:	40004c00 	.word	0x40004c00
 8009ee8:	40005000 	.word	0x40005000
 8009eec:	40011400 	.word	0x40011400
 8009ef0:	40007800 	.word	0x40007800
 8009ef4:	40007c00 	.word	0x40007c00
 8009ef8:	08018434 	.word	0x08018434

08009efc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a40      	ldr	r2, [pc, #256]	; (800a00c <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d027      	beq.n	8009f60 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a3e      	ldr	r2, [pc, #248]	; (800a010 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d022      	beq.n	8009f60 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a3d      	ldr	r2, [pc, #244]	; (800a014 <HAL_UARTEx_SetTxFifoThreshold+0x118>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d01d      	beq.n	8009f60 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a3b      	ldr	r2, [pc, #236]	; (800a018 <HAL_UARTEx_SetTxFifoThreshold+0x11c>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d018      	beq.n	8009f60 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a3a      	ldr	r2, [pc, #232]	; (800a01c <HAL_UARTEx_SetTxFifoThreshold+0x120>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d013      	beq.n	8009f60 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a38      	ldr	r2, [pc, #224]	; (800a020 <HAL_UARTEx_SetTxFifoThreshold+0x124>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d00e      	beq.n	8009f60 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a37      	ldr	r2, [pc, #220]	; (800a024 <HAL_UARTEx_SetTxFifoThreshold+0x128>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d009      	beq.n	8009f60 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a35      	ldr	r2, [pc, #212]	; (800a028 <HAL_UARTEx_SetTxFifoThreshold+0x12c>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d004      	beq.n	8009f60 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8009f56:	f240 213f 	movw	r1, #575	; 0x23f
 8009f5a:	4834      	ldr	r0, [pc, #208]	; (800a02c <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 8009f5c:	f7f6 fe57 	bl	8000c0e <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d018      	beq.n	8009f98 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f6c:	d014      	beq.n	8009f98 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f74:	d010      	beq.n	8009f98 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8009f7c:	d00c      	beq.n	8009f98 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f84:	d008      	beq.n	8009f98 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 8009f8c:	d004      	beq.n	8009f98 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8009f8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f92:	4826      	ldr	r0, [pc, #152]	; (800a02c <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 8009f94:	f7f6 fe3b 	bl	8000c0e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d101      	bne.n	8009fa6 <HAL_UARTEx_SetTxFifoThreshold+0xaa>
 8009fa2:	2302      	movs	r3, #2
 8009fa4:	e02d      	b.n	800a002 <HAL_UARTEx_SetTxFifoThreshold+0x106>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2224      	movs	r2, #36	; 0x24
 8009fb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f022 0201 	bic.w	r2, r2, #1
 8009fcc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	683a      	ldr	r2, [r7, #0]
 8009fde:	430a      	orrs	r2, r1
 8009fe0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 f8be 	bl	800a164 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2220      	movs	r2, #32
 8009ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3710      	adds	r7, #16
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	40011000 	.word	0x40011000
 800a010:	40004400 	.word	0x40004400
 800a014:	40004800 	.word	0x40004800
 800a018:	40004c00 	.word	0x40004c00
 800a01c:	40005000 	.word	0x40005000
 800a020:	40011400 	.word	0x40011400
 800a024:	40007800 	.word	0x40007800
 800a028:	40007c00 	.word	0x40007c00
 800a02c:	08018434 	.word	0x08018434

0800a030 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a40      	ldr	r2, [pc, #256]	; (800a140 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d027      	beq.n	800a094 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a3e      	ldr	r2, [pc, #248]	; (800a144 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d022      	beq.n	800a094 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a3d      	ldr	r2, [pc, #244]	; (800a148 <HAL_UARTEx_SetRxFifoThreshold+0x118>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d01d      	beq.n	800a094 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a3b      	ldr	r2, [pc, #236]	; (800a14c <HAL_UARTEx_SetRxFifoThreshold+0x11c>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d018      	beq.n	800a094 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a3a      	ldr	r2, [pc, #232]	; (800a150 <HAL_UARTEx_SetRxFifoThreshold+0x120>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d013      	beq.n	800a094 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a38      	ldr	r2, [pc, #224]	; (800a154 <HAL_UARTEx_SetRxFifoThreshold+0x124>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d00e      	beq.n	800a094 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a37      	ldr	r2, [pc, #220]	; (800a158 <HAL_UARTEx_SetRxFifoThreshold+0x128>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d009      	beq.n	800a094 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a35      	ldr	r2, [pc, #212]	; (800a15c <HAL_UARTEx_SetRxFifoThreshold+0x12c>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d004      	beq.n	800a094 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a08a:	f44f 711c 	mov.w	r1, #624	; 0x270
 800a08e:	4834      	ldr	r0, [pc, #208]	; (800a160 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800a090:	f7f6 fdbd 	bl	8000c0e <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d018      	beq.n	800a0cc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a0a0:	d014      	beq.n	800a0cc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a0a8:	d010      	beq.n	800a0cc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800a0b0:	d00c      	beq.n	800a0cc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a0b8:	d008      	beq.n	800a0cc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800a0c0:	d004      	beq.n	800a0cc <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a0c2:	f240 2171 	movw	r1, #625	; 0x271
 800a0c6:	4826      	ldr	r0, [pc, #152]	; (800a160 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800a0c8:	f7f6 fda1 	bl	8000c0e <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d101      	bne.n	800a0da <HAL_UARTEx_SetRxFifoThreshold+0xaa>
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	e02d      	b.n	800a136 <HAL_UARTEx_SetRxFifoThreshold+0x106>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2224      	movs	r2, #36	; 0x24
 800a0e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f022 0201 	bic.w	r2, r2, #1
 800a100:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	430a      	orrs	r2, r1
 800a114:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 f824 	bl	800a164 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2220      	movs	r2, #32
 800a128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	40011000 	.word	0x40011000
 800a144:	40004400 	.word	0x40004400
 800a148:	40004800 	.word	0x40004800
 800a14c:	40004c00 	.word	0x40004c00
 800a150:	40005000 	.word	0x40005000
 800a154:	40011400 	.word	0x40011400
 800a158:	40007800 	.word	0x40007800
 800a15c:	40007c00 	.word	0x40007c00
 800a160:	08018434 	.word	0x08018434

0800a164 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a164:	b480      	push	{r7}
 800a166:	b089      	sub	sp, #36	; 0x24
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a16c:	4a2f      	ldr	r2, [pc, #188]	; (800a22c <UARTEx_SetNbDataToProcess+0xc8>)
 800a16e:	f107 0314 	add.w	r3, r7, #20
 800a172:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a176:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a17a:	4a2d      	ldr	r2, [pc, #180]	; (800a230 <UARTEx_SetNbDataToProcess+0xcc>)
 800a17c:	f107 030c 	add.w	r3, r7, #12
 800a180:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a184:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d108      	bne.n	800a1a2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a1a0:	e03d      	b.n	800a21e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a1a2:	2308      	movs	r3, #8
 800a1a4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a1a6:	2308      	movs	r3, #8
 800a1a8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	689b      	ldr	r3, [r3, #8]
 800a1b0:	0e5b      	lsrs	r3, r3, #25
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	f003 0307 	and.w	r3, r3, #7
 800a1b8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	0f5b      	lsrs	r3, r3, #29
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	f003 0307 	and.w	r3, r3, #7
 800a1c8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a1ca:	7fbb      	ldrb	r3, [r7, #30]
 800a1cc:	7f3a      	ldrb	r2, [r7, #28]
 800a1ce:	f107 0120 	add.w	r1, r7, #32
 800a1d2:	440a      	add	r2, r1
 800a1d4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a1d8:	fb02 f303 	mul.w	r3, r2, r3
 800a1dc:	7f3a      	ldrb	r2, [r7, #28]
 800a1de:	f107 0120 	add.w	r1, r7, #32
 800a1e2:	440a      	add	r2, r1
 800a1e4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a1e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a1ec:	b29a      	uxth	r2, r3
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a1f4:	7ffb      	ldrb	r3, [r7, #31]
 800a1f6:	7f7a      	ldrb	r2, [r7, #29]
 800a1f8:	f107 0120 	add.w	r1, r7, #32
 800a1fc:	440a      	add	r2, r1
 800a1fe:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a202:	fb02 f303 	mul.w	r3, r2, r3
 800a206:	7f7a      	ldrb	r2, [r7, #29]
 800a208:	f107 0120 	add.w	r1, r7, #32
 800a20c:	440a      	add	r2, r1
 800a20e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a212:	fb93 f3f2 	sdiv	r3, r3, r2
 800a216:	b29a      	uxth	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a21e:	bf00      	nop
 800a220:	3724      	adds	r7, #36	; 0x24
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr
 800a22a:	bf00      	nop
 800a22c:	08018470 	.word	0x08018470
 800a230:	08018478 	.word	0x08018478

0800a234 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800a23a:	4b8c      	ldr	r3, [pc, #560]	; (800a46c <MX_LWIP_Init+0x238>)
 800a23c:	220a      	movs	r2, #10
 800a23e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 10;
 800a240:	4b8a      	ldr	r3, [pc, #552]	; (800a46c <MX_LWIP_Init+0x238>)
 800a242:	220a      	movs	r2, #10
 800a244:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 800a246:	4b89      	ldr	r3, [pc, #548]	; (800a46c <MX_LWIP_Init+0x238>)
 800a248:	220a      	movs	r2, #10
 800a24a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800a24c:	4b87      	ldr	r3, [pc, #540]	; (800a46c <MX_LWIP_Init+0x238>)
 800a24e:	220a      	movs	r2, #10
 800a250:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a252:	4b87      	ldr	r3, [pc, #540]	; (800a470 <MX_LWIP_Init+0x23c>)
 800a254:	22ff      	movs	r2, #255	; 0xff
 800a256:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a258:	4b85      	ldr	r3, [pc, #532]	; (800a470 <MX_LWIP_Init+0x23c>)
 800a25a:	22ff      	movs	r2, #255	; 0xff
 800a25c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a25e:	4b84      	ldr	r3, [pc, #528]	; (800a470 <MX_LWIP_Init+0x23c>)
 800a260:	22ff      	movs	r2, #255	; 0xff
 800a262:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a264:	4b82      	ldr	r3, [pc, #520]	; (800a470 <MX_LWIP_Init+0x23c>)
 800a266:	2200      	movs	r2, #0
 800a268:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800a26a:	4b82      	ldr	r3, [pc, #520]	; (800a474 <MX_LWIP_Init+0x240>)
 800a26c:	220a      	movs	r2, #10
 800a26e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 10;
 800a270:	4b80      	ldr	r3, [pc, #512]	; (800a474 <MX_LWIP_Init+0x240>)
 800a272:	220a      	movs	r2, #10
 800a274:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 10;
 800a276:	4b7f      	ldr	r3, [pc, #508]	; (800a474 <MX_LWIP_Init+0x240>)
 800a278:	220a      	movs	r2, #10
 800a27a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 11;
 800a27c:	4b7d      	ldr	r3, [pc, #500]	; (800a474 <MX_LWIP_Init+0x240>)
 800a27e:	220b      	movs	r2, #11
 800a280:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800a282:	2100      	movs	r1, #0
 800a284:	2000      	movs	r0, #0
 800a286:	f004 f947 	bl	800e518 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a28a:	4b78      	ldr	r3, [pc, #480]	; (800a46c <MX_LWIP_Init+0x238>)
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	061a      	lsls	r2, r3, #24
 800a290:	4b76      	ldr	r3, [pc, #472]	; (800a46c <MX_LWIP_Init+0x238>)
 800a292:	785b      	ldrb	r3, [r3, #1]
 800a294:	041b      	lsls	r3, r3, #16
 800a296:	431a      	orrs	r2, r3
 800a298:	4b74      	ldr	r3, [pc, #464]	; (800a46c <MX_LWIP_Init+0x238>)
 800a29a:	789b      	ldrb	r3, [r3, #2]
 800a29c:	021b      	lsls	r3, r3, #8
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	4a72      	ldr	r2, [pc, #456]	; (800a46c <MX_LWIP_Init+0x238>)
 800a2a2:	78d2      	ldrb	r2, [r2, #3]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	061a      	lsls	r2, r3, #24
 800a2a8:	4b70      	ldr	r3, [pc, #448]	; (800a46c <MX_LWIP_Init+0x238>)
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	0619      	lsls	r1, r3, #24
 800a2ae:	4b6f      	ldr	r3, [pc, #444]	; (800a46c <MX_LWIP_Init+0x238>)
 800a2b0:	785b      	ldrb	r3, [r3, #1]
 800a2b2:	041b      	lsls	r3, r3, #16
 800a2b4:	4319      	orrs	r1, r3
 800a2b6:	4b6d      	ldr	r3, [pc, #436]	; (800a46c <MX_LWIP_Init+0x238>)
 800a2b8:	789b      	ldrb	r3, [r3, #2]
 800a2ba:	021b      	lsls	r3, r3, #8
 800a2bc:	430b      	orrs	r3, r1
 800a2be:	496b      	ldr	r1, [pc, #428]	; (800a46c <MX_LWIP_Init+0x238>)
 800a2c0:	78c9      	ldrb	r1, [r1, #3]
 800a2c2:	430b      	orrs	r3, r1
 800a2c4:	021b      	lsls	r3, r3, #8
 800a2c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a2ca:	431a      	orrs	r2, r3
 800a2cc:	4b67      	ldr	r3, [pc, #412]	; (800a46c <MX_LWIP_Init+0x238>)
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	0619      	lsls	r1, r3, #24
 800a2d2:	4b66      	ldr	r3, [pc, #408]	; (800a46c <MX_LWIP_Init+0x238>)
 800a2d4:	785b      	ldrb	r3, [r3, #1]
 800a2d6:	041b      	lsls	r3, r3, #16
 800a2d8:	4319      	orrs	r1, r3
 800a2da:	4b64      	ldr	r3, [pc, #400]	; (800a46c <MX_LWIP_Init+0x238>)
 800a2dc:	789b      	ldrb	r3, [r3, #2]
 800a2de:	021b      	lsls	r3, r3, #8
 800a2e0:	430b      	orrs	r3, r1
 800a2e2:	4962      	ldr	r1, [pc, #392]	; (800a46c <MX_LWIP_Init+0x238>)
 800a2e4:	78c9      	ldrb	r1, [r1, #3]
 800a2e6:	430b      	orrs	r3, r1
 800a2e8:	0a1b      	lsrs	r3, r3, #8
 800a2ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a2ee:	431a      	orrs	r2, r3
 800a2f0:	4b5e      	ldr	r3, [pc, #376]	; (800a46c <MX_LWIP_Init+0x238>)
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	0619      	lsls	r1, r3, #24
 800a2f6:	4b5d      	ldr	r3, [pc, #372]	; (800a46c <MX_LWIP_Init+0x238>)
 800a2f8:	785b      	ldrb	r3, [r3, #1]
 800a2fa:	041b      	lsls	r3, r3, #16
 800a2fc:	4319      	orrs	r1, r3
 800a2fe:	4b5b      	ldr	r3, [pc, #364]	; (800a46c <MX_LWIP_Init+0x238>)
 800a300:	789b      	ldrb	r3, [r3, #2]
 800a302:	021b      	lsls	r3, r3, #8
 800a304:	430b      	orrs	r3, r1
 800a306:	4959      	ldr	r1, [pc, #356]	; (800a46c <MX_LWIP_Init+0x238>)
 800a308:	78c9      	ldrb	r1, [r1, #3]
 800a30a:	430b      	orrs	r3, r1
 800a30c:	0e1b      	lsrs	r3, r3, #24
 800a30e:	4313      	orrs	r3, r2
 800a310:	4a59      	ldr	r2, [pc, #356]	; (800a478 <MX_LWIP_Init+0x244>)
 800a312:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a314:	4b56      	ldr	r3, [pc, #344]	; (800a470 <MX_LWIP_Init+0x23c>)
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	061a      	lsls	r2, r3, #24
 800a31a:	4b55      	ldr	r3, [pc, #340]	; (800a470 <MX_LWIP_Init+0x23c>)
 800a31c:	785b      	ldrb	r3, [r3, #1]
 800a31e:	041b      	lsls	r3, r3, #16
 800a320:	431a      	orrs	r2, r3
 800a322:	4b53      	ldr	r3, [pc, #332]	; (800a470 <MX_LWIP_Init+0x23c>)
 800a324:	789b      	ldrb	r3, [r3, #2]
 800a326:	021b      	lsls	r3, r3, #8
 800a328:	4313      	orrs	r3, r2
 800a32a:	4a51      	ldr	r2, [pc, #324]	; (800a470 <MX_LWIP_Init+0x23c>)
 800a32c:	78d2      	ldrb	r2, [r2, #3]
 800a32e:	4313      	orrs	r3, r2
 800a330:	061a      	lsls	r2, r3, #24
 800a332:	4b4f      	ldr	r3, [pc, #316]	; (800a470 <MX_LWIP_Init+0x23c>)
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	0619      	lsls	r1, r3, #24
 800a338:	4b4d      	ldr	r3, [pc, #308]	; (800a470 <MX_LWIP_Init+0x23c>)
 800a33a:	785b      	ldrb	r3, [r3, #1]
 800a33c:	041b      	lsls	r3, r3, #16
 800a33e:	4319      	orrs	r1, r3
 800a340:	4b4b      	ldr	r3, [pc, #300]	; (800a470 <MX_LWIP_Init+0x23c>)
 800a342:	789b      	ldrb	r3, [r3, #2]
 800a344:	021b      	lsls	r3, r3, #8
 800a346:	430b      	orrs	r3, r1
 800a348:	4949      	ldr	r1, [pc, #292]	; (800a470 <MX_LWIP_Init+0x23c>)
 800a34a:	78c9      	ldrb	r1, [r1, #3]
 800a34c:	430b      	orrs	r3, r1
 800a34e:	021b      	lsls	r3, r3, #8
 800a350:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a354:	431a      	orrs	r2, r3
 800a356:	4b46      	ldr	r3, [pc, #280]	; (800a470 <MX_LWIP_Init+0x23c>)
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	0619      	lsls	r1, r3, #24
 800a35c:	4b44      	ldr	r3, [pc, #272]	; (800a470 <MX_LWIP_Init+0x23c>)
 800a35e:	785b      	ldrb	r3, [r3, #1]
 800a360:	041b      	lsls	r3, r3, #16
 800a362:	4319      	orrs	r1, r3
 800a364:	4b42      	ldr	r3, [pc, #264]	; (800a470 <MX_LWIP_Init+0x23c>)
 800a366:	789b      	ldrb	r3, [r3, #2]
 800a368:	021b      	lsls	r3, r3, #8
 800a36a:	430b      	orrs	r3, r1
 800a36c:	4940      	ldr	r1, [pc, #256]	; (800a470 <MX_LWIP_Init+0x23c>)
 800a36e:	78c9      	ldrb	r1, [r1, #3]
 800a370:	430b      	orrs	r3, r1
 800a372:	0a1b      	lsrs	r3, r3, #8
 800a374:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a378:	431a      	orrs	r2, r3
 800a37a:	4b3d      	ldr	r3, [pc, #244]	; (800a470 <MX_LWIP_Init+0x23c>)
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	0619      	lsls	r1, r3, #24
 800a380:	4b3b      	ldr	r3, [pc, #236]	; (800a470 <MX_LWIP_Init+0x23c>)
 800a382:	785b      	ldrb	r3, [r3, #1]
 800a384:	041b      	lsls	r3, r3, #16
 800a386:	4319      	orrs	r1, r3
 800a388:	4b39      	ldr	r3, [pc, #228]	; (800a470 <MX_LWIP_Init+0x23c>)
 800a38a:	789b      	ldrb	r3, [r3, #2]
 800a38c:	021b      	lsls	r3, r3, #8
 800a38e:	430b      	orrs	r3, r1
 800a390:	4937      	ldr	r1, [pc, #220]	; (800a470 <MX_LWIP_Init+0x23c>)
 800a392:	78c9      	ldrb	r1, [r1, #3]
 800a394:	430b      	orrs	r3, r1
 800a396:	0e1b      	lsrs	r3, r3, #24
 800a398:	4313      	orrs	r3, r2
 800a39a:	4a38      	ldr	r2, [pc, #224]	; (800a47c <MX_LWIP_Init+0x248>)
 800a39c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a39e:	4b35      	ldr	r3, [pc, #212]	; (800a474 <MX_LWIP_Init+0x240>)
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	061a      	lsls	r2, r3, #24
 800a3a4:	4b33      	ldr	r3, [pc, #204]	; (800a474 <MX_LWIP_Init+0x240>)
 800a3a6:	785b      	ldrb	r3, [r3, #1]
 800a3a8:	041b      	lsls	r3, r3, #16
 800a3aa:	431a      	orrs	r2, r3
 800a3ac:	4b31      	ldr	r3, [pc, #196]	; (800a474 <MX_LWIP_Init+0x240>)
 800a3ae:	789b      	ldrb	r3, [r3, #2]
 800a3b0:	021b      	lsls	r3, r3, #8
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	4a2f      	ldr	r2, [pc, #188]	; (800a474 <MX_LWIP_Init+0x240>)
 800a3b6:	78d2      	ldrb	r2, [r2, #3]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	061a      	lsls	r2, r3, #24
 800a3bc:	4b2d      	ldr	r3, [pc, #180]	; (800a474 <MX_LWIP_Init+0x240>)
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	0619      	lsls	r1, r3, #24
 800a3c2:	4b2c      	ldr	r3, [pc, #176]	; (800a474 <MX_LWIP_Init+0x240>)
 800a3c4:	785b      	ldrb	r3, [r3, #1]
 800a3c6:	041b      	lsls	r3, r3, #16
 800a3c8:	4319      	orrs	r1, r3
 800a3ca:	4b2a      	ldr	r3, [pc, #168]	; (800a474 <MX_LWIP_Init+0x240>)
 800a3cc:	789b      	ldrb	r3, [r3, #2]
 800a3ce:	021b      	lsls	r3, r3, #8
 800a3d0:	430b      	orrs	r3, r1
 800a3d2:	4928      	ldr	r1, [pc, #160]	; (800a474 <MX_LWIP_Init+0x240>)
 800a3d4:	78c9      	ldrb	r1, [r1, #3]
 800a3d6:	430b      	orrs	r3, r1
 800a3d8:	021b      	lsls	r3, r3, #8
 800a3da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a3de:	431a      	orrs	r2, r3
 800a3e0:	4b24      	ldr	r3, [pc, #144]	; (800a474 <MX_LWIP_Init+0x240>)
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	0619      	lsls	r1, r3, #24
 800a3e6:	4b23      	ldr	r3, [pc, #140]	; (800a474 <MX_LWIP_Init+0x240>)
 800a3e8:	785b      	ldrb	r3, [r3, #1]
 800a3ea:	041b      	lsls	r3, r3, #16
 800a3ec:	4319      	orrs	r1, r3
 800a3ee:	4b21      	ldr	r3, [pc, #132]	; (800a474 <MX_LWIP_Init+0x240>)
 800a3f0:	789b      	ldrb	r3, [r3, #2]
 800a3f2:	021b      	lsls	r3, r3, #8
 800a3f4:	430b      	orrs	r3, r1
 800a3f6:	491f      	ldr	r1, [pc, #124]	; (800a474 <MX_LWIP_Init+0x240>)
 800a3f8:	78c9      	ldrb	r1, [r1, #3]
 800a3fa:	430b      	orrs	r3, r1
 800a3fc:	0a1b      	lsrs	r3, r3, #8
 800a3fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a402:	431a      	orrs	r2, r3
 800a404:	4b1b      	ldr	r3, [pc, #108]	; (800a474 <MX_LWIP_Init+0x240>)
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	0619      	lsls	r1, r3, #24
 800a40a:	4b1a      	ldr	r3, [pc, #104]	; (800a474 <MX_LWIP_Init+0x240>)
 800a40c:	785b      	ldrb	r3, [r3, #1]
 800a40e:	041b      	lsls	r3, r3, #16
 800a410:	4319      	orrs	r1, r3
 800a412:	4b18      	ldr	r3, [pc, #96]	; (800a474 <MX_LWIP_Init+0x240>)
 800a414:	789b      	ldrb	r3, [r3, #2]
 800a416:	021b      	lsls	r3, r3, #8
 800a418:	430b      	orrs	r3, r1
 800a41a:	4916      	ldr	r1, [pc, #88]	; (800a474 <MX_LWIP_Init+0x240>)
 800a41c:	78c9      	ldrb	r1, [r1, #3]
 800a41e:	430b      	orrs	r3, r1
 800a420:	0e1b      	lsrs	r3, r3, #24
 800a422:	4313      	orrs	r3, r2
 800a424:	4a16      	ldr	r2, [pc, #88]	; (800a480 <MX_LWIP_Init+0x24c>)
 800a426:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800a428:	4b16      	ldr	r3, [pc, #88]	; (800a484 <MX_LWIP_Init+0x250>)
 800a42a:	9302      	str	r3, [sp, #8]
 800a42c:	4b16      	ldr	r3, [pc, #88]	; (800a488 <MX_LWIP_Init+0x254>)
 800a42e:	9301      	str	r3, [sp, #4]
 800a430:	2300      	movs	r3, #0
 800a432:	9300      	str	r3, [sp, #0]
 800a434:	4b12      	ldr	r3, [pc, #72]	; (800a480 <MX_LWIP_Init+0x24c>)
 800a436:	4a11      	ldr	r2, [pc, #68]	; (800a47c <MX_LWIP_Init+0x248>)
 800a438:	490f      	ldr	r1, [pc, #60]	; (800a478 <MX_LWIP_Init+0x244>)
 800a43a:	4814      	ldr	r0, [pc, #80]	; (800a48c <MX_LWIP_Init+0x258>)
 800a43c:	f004 fe24 	bl	800f088 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a440:	4812      	ldr	r0, [pc, #72]	; (800a48c <MX_LWIP_Init+0x258>)
 800a442:	f004 ff01 	bl	800f248 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a446:	4b11      	ldr	r3, [pc, #68]	; (800a48c <MX_LWIP_Init+0x258>)
 800a448:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a44c:	089b      	lsrs	r3, r3, #2
 800a44e:	f003 0301 	and.w	r3, r3, #1
 800a452:	b2db      	uxtb	r3, r3
 800a454:	2b00      	cmp	r3, #0
 800a456:	d003      	beq.n	800a460 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a458:	480c      	ldr	r0, [pc, #48]	; (800a48c <MX_LWIP_Init+0x258>)
 800a45a:	f004 ff05 	bl	800f268 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a45e:	e002      	b.n	800a466 <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 800a460:	480a      	ldr	r0, [pc, #40]	; (800a48c <MX_LWIP_Init+0x258>)
 800a462:	f004 ff45 	bl	800f2f0 <netif_set_down>
}
 800a466:	bf00      	nop
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	2400a654 	.word	0x2400a654
 800a470:	2400a650 	.word	0x2400a650
 800a474:	2400a618 	.word	0x2400a618
 800a478:	2400a64c 	.word	0x2400a64c
 800a47c:	2400a658 	.word	0x2400a658
 800a480:	2400a65c 	.word	0x2400a65c
 800a484:	0800e441 	.word	0x0800e441
 800a488:	0800aae5 	.word	0x0800aae5
 800a48c:	2400a61c 	.word	0x2400a61c

0800a490 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800a490:	b480      	push	{r7}
 800a492:	b087      	sub	sp, #28
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800a4a2:	2320      	movs	r3, #32
 800a4a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a4a6:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 800a4aa:	e00b      	b.n	800a4c4 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 800a4ac:	4a0c      	ldr	r2, [pc, #48]	; (800a4e0 <SCB_InvalidateDCache_by_Addr+0x50>)
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	693a      	ldr	r2, [r7, #16]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800a4bc:	697a      	ldr	r2, [r7, #20]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	1ad3      	subs	r3, r2, r3
 800a4c2:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	dcf0      	bgt.n	800a4ac <SCB_InvalidateDCache_by_Addr+0x1c>
 800a4ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a4ce:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 800a4d2:	bf00      	nop
 800a4d4:	371c      	adds	r7, #28
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	e000ed00 	.word	0xe000ed00

0800a4e4 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b08e      	sub	sp, #56	; 0x38
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	601a      	str	r2, [r3, #0]
 800a4f4:	605a      	str	r2, [r3, #4]
 800a4f6:	609a      	str	r2, [r3, #8]
 800a4f8:	60da      	str	r2, [r3, #12]
 800a4fa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a59      	ldr	r2, [pc, #356]	; (800a668 <HAL_ETH_MspInit+0x184>)
 800a502:	4293      	cmp	r3, r2
 800a504:	f040 80ab 	bne.w	800a65e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800a508:	4b58      	ldr	r3, [pc, #352]	; (800a66c <HAL_ETH_MspInit+0x188>)
 800a50a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a50e:	4a57      	ldr	r2, [pc, #348]	; (800a66c <HAL_ETH_MspInit+0x188>)
 800a510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a514:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a518:	4b54      	ldr	r3, [pc, #336]	; (800a66c <HAL_ETH_MspInit+0x188>)
 800a51a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a51e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a522:	623b      	str	r3, [r7, #32]
 800a524:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800a526:	4b51      	ldr	r3, [pc, #324]	; (800a66c <HAL_ETH_MspInit+0x188>)
 800a528:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a52c:	4a4f      	ldr	r2, [pc, #316]	; (800a66c <HAL_ETH_MspInit+0x188>)
 800a52e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a532:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a536:	4b4d      	ldr	r3, [pc, #308]	; (800a66c <HAL_ETH_MspInit+0x188>)
 800a538:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a53c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a540:	61fb      	str	r3, [r7, #28]
 800a542:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800a544:	4b49      	ldr	r3, [pc, #292]	; (800a66c <HAL_ETH_MspInit+0x188>)
 800a546:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a54a:	4a48      	ldr	r2, [pc, #288]	; (800a66c <HAL_ETH_MspInit+0x188>)
 800a54c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a550:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a554:	4b45      	ldr	r3, [pc, #276]	; (800a66c <HAL_ETH_MspInit+0x188>)
 800a556:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a55a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a55e:	61bb      	str	r3, [r7, #24]
 800a560:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a562:	4b42      	ldr	r3, [pc, #264]	; (800a66c <HAL_ETH_MspInit+0x188>)
 800a564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a568:	4a40      	ldr	r2, [pc, #256]	; (800a66c <HAL_ETH_MspInit+0x188>)
 800a56a:	f043 0304 	orr.w	r3, r3, #4
 800a56e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a572:	4b3e      	ldr	r3, [pc, #248]	; (800a66c <HAL_ETH_MspInit+0x188>)
 800a574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a578:	f003 0304 	and.w	r3, r3, #4
 800a57c:	617b      	str	r3, [r7, #20]
 800a57e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a580:	4b3a      	ldr	r3, [pc, #232]	; (800a66c <HAL_ETH_MspInit+0x188>)
 800a582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a586:	4a39      	ldr	r2, [pc, #228]	; (800a66c <HAL_ETH_MspInit+0x188>)
 800a588:	f043 0301 	orr.w	r3, r3, #1
 800a58c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a590:	4b36      	ldr	r3, [pc, #216]	; (800a66c <HAL_ETH_MspInit+0x188>)
 800a592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a596:	f003 0301 	and.w	r3, r3, #1
 800a59a:	613b      	str	r3, [r7, #16]
 800a59c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a59e:	4b33      	ldr	r3, [pc, #204]	; (800a66c <HAL_ETH_MspInit+0x188>)
 800a5a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a5a4:	4a31      	ldr	r2, [pc, #196]	; (800a66c <HAL_ETH_MspInit+0x188>)
 800a5a6:	f043 0302 	orr.w	r3, r3, #2
 800a5aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a5ae:	4b2f      	ldr	r3, [pc, #188]	; (800a66c <HAL_ETH_MspInit+0x188>)
 800a5b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a5b4:	f003 0302 	and.w	r3, r3, #2
 800a5b8:	60fb      	str	r3, [r7, #12]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a5bc:	4b2b      	ldr	r3, [pc, #172]	; (800a66c <HAL_ETH_MspInit+0x188>)
 800a5be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a5c2:	4a2a      	ldr	r2, [pc, #168]	; (800a66c <HAL_ETH_MspInit+0x188>)
 800a5c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a5cc:	4b27      	ldr	r3, [pc, #156]	; (800a66c <HAL_ETH_MspInit+0x188>)
 800a5ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a5d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d6:	60bb      	str	r3, [r7, #8]
 800a5d8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a5da:	2332      	movs	r3, #50	; 0x32
 800a5dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5de:	2302      	movs	r3, #2
 800a5e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a5ea:	230b      	movs	r3, #11
 800a5ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	481e      	ldr	r0, [pc, #120]	; (800a670 <HAL_ETH_MspInit+0x18c>)
 800a5f6:	f7f8 fef3 	bl	80033e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a5fa:	2386      	movs	r3, #134	; 0x86
 800a5fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5fe:	2302      	movs	r3, #2
 800a600:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a602:	2300      	movs	r3, #0
 800a604:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a606:	2300      	movs	r3, #0
 800a608:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a60a:	230b      	movs	r3, #11
 800a60c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a60e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a612:	4619      	mov	r1, r3
 800a614:	4817      	ldr	r0, [pc, #92]	; (800a674 <HAL_ETH_MspInit+0x190>)
 800a616:	f7f8 fee3 	bl	80033e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a61a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a61e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a620:	2302      	movs	r3, #2
 800a622:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a624:	2300      	movs	r3, #0
 800a626:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a628:	2300      	movs	r3, #0
 800a62a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a62c:	230b      	movs	r3, #11
 800a62e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a634:	4619      	mov	r1, r3
 800a636:	4810      	ldr	r0, [pc, #64]	; (800a678 <HAL_ETH_MspInit+0x194>)
 800a638:	f7f8 fed2 	bl	80033e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a63c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a640:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a642:	2302      	movs	r3, #2
 800a644:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a646:	2300      	movs	r3, #0
 800a648:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a64a:	2300      	movs	r3, #0
 800a64c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a64e:	230b      	movs	r3, #11
 800a650:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a656:	4619      	mov	r1, r3
 800a658:	4808      	ldr	r0, [pc, #32]	; (800a67c <HAL_ETH_MspInit+0x198>)
 800a65a:	f7f8 fec1 	bl	80033e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a65e:	bf00      	nop
 800a660:	3738      	adds	r7, #56	; 0x38
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	40028000 	.word	0x40028000
 800a66c:	58024400 	.word	0x58024400
 800a670:	58020800 	.word	0x58020800
 800a674:	58020000 	.word	0x58020000
 800a678:	58020400 	.word	0x58020400
 800a67c:	58021800 	.word	0x58021800

0800a680 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a680:	b5b0      	push	{r4, r5, r7, lr}
 800a682:	b0ac      	sub	sp, #176	; 0xb0
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  uint32_t idx = 0;
 800a688:	2300      	movs	r3, #0
 800a68a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800a68e:	2300      	movs	r3, #0
 800a690:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a694:	4b90      	ldr	r3, [pc, #576]	; (800a8d8 <low_level_init+0x258>)
 800a696:	4a91      	ldr	r2, [pc, #580]	; (800a8dc <low_level_init+0x25c>)
 800a698:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a69a:	2300      	movs	r3, #0
 800a69c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800a6a0:	2380      	movs	r3, #128	; 0x80
 800a6a2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800a6a6:	23e1      	movs	r3, #225	; 0xe1
 800a6a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800a6be:	4a86      	ldr	r2, [pc, #536]	; (800a8d8 <low_level_init+0x258>)
 800a6c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a6c4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a6c6:	4b84      	ldr	r3, [pc, #528]	; (800a8d8 <low_level_init+0x258>)
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a6cc:	4b82      	ldr	r3, [pc, #520]	; (800a8d8 <low_level_init+0x258>)
 800a6ce:	4a84      	ldr	r2, [pc, #528]	; (800a8e0 <low_level_init+0x260>)
 800a6d0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a6d2:	4b81      	ldr	r3, [pc, #516]	; (800a8d8 <low_level_init+0x258>)
 800a6d4:	4a83      	ldr	r2, [pc, #524]	; (800a8e4 <low_level_init+0x264>)
 800a6d6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800a6d8:	4b7f      	ldr	r3, [pc, #508]	; (800a8d8 <low_level_init+0x258>)
 800a6da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a6de:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a6e0:	487d      	ldr	r0, [pc, #500]	; (800a8d8 <low_level_init+0x258>)
 800a6e2:	f7f7 f99f 	bl	8001a24 <HAL_ETH_Init>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a6ec:	2234      	movs	r2, #52	; 0x34
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	487d      	ldr	r0, [pc, #500]	; (800a8e8 <low_level_init+0x268>)
 800a6f2:	f00c fe95 	bl	8017420 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a6f6:	4b7c      	ldr	r3, [pc, #496]	; (800a8e8 <low_level_init+0x268>)
 800a6f8:	2221      	movs	r2, #33	; 0x21
 800a6fa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a6fc:	4b7a      	ldr	r3, [pc, #488]	; (800a8e8 <low_level_init+0x268>)
 800a6fe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a702:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a704:	4b78      	ldr	r3, [pc, #480]	; (800a8e8 <low_level_init+0x268>)
 800a706:	2200      	movs	r2, #0
 800a708:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */
  
  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a70a:	4878      	ldr	r0, [pc, #480]	; (800a8ec <low_level_init+0x26c>)
 800a70c:	f004 fb76 	bl	800edfc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2206      	movs	r2, #6
 800a714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a718:	4b6f      	ldr	r3, [pc, #444]	; (800a8d8 <low_level_init+0x258>)
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	781a      	ldrb	r2, [r3, #0]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a724:	4b6c      	ldr	r3, [pc, #432]	; (800a8d8 <low_level_init+0x258>)
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	785a      	ldrb	r2, [r3, #1]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a730:	4b69      	ldr	r3, [pc, #420]	; (800a8d8 <low_level_init+0x258>)
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	789a      	ldrb	r2, [r3, #2]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a73c:	4b66      	ldr	r3, [pc, #408]	; (800a8d8 <low_level_init+0x258>)
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	78da      	ldrb	r2, [r3, #3]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a748:	4b63      	ldr	r3, [pc, #396]	; (800a8d8 <low_level_init+0x258>)
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	791a      	ldrb	r2, [r3, #4]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a754:	4b60      	ldr	r3, [pc, #384]	; (800a8d8 <low_level_init+0x258>)
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	795a      	ldrb	r2, [r3, #5]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a766:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a76e:	f043 030a 	orr.w	r3, r3, #10
 800a772:	b2da      	uxtb	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800a77a:	2300      	movs	r3, #0
 800a77c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a780:	e012      	b.n	800a7a8 <low_level_init+0x128>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800a782:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a786:	4613      	mov	r3, r2
 800a788:	005b      	lsls	r3, r3, #1
 800a78a:	4413      	add	r3, r2
 800a78c:	025b      	lsls	r3, r3, #9
 800a78e:	4a58      	ldr	r2, [pc, #352]	; (800a8f0 <low_level_init+0x270>)
 800a790:	441a      	add	r2, r3
 800a792:	2300      	movs	r3, #0
 800a794:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800a798:	484f      	ldr	r0, [pc, #316]	; (800a8d8 <low_level_init+0x258>)
 800a79a:	f7f7 fa1d 	bl	8001bd8 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800a79e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a7a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a7ac:	2b03      	cmp	r3, #3
 800a7ae:	d9e8      	bls.n	800a782 <low_level_init+0x102>
  } 
      
  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800a7b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a7bc:	2101      	movs	r1, #1
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f000 fb74 	bl	800aeac <osSemaphoreCreate>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	4b4b      	ldr	r3, [pc, #300]	; (800a8f4 <low_level_init+0x274>)
 800a7c8:	601a      	str	r2, [r3, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a7ca:	4b4b      	ldr	r3, [pc, #300]	; (800a8f8 <low_level_init+0x278>)
 800a7cc:	f107 040c 	add.w	r4, r7, #12
 800a7d0:	461d      	mov	r5, r3
 800a7d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a7d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a7da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800a7de:	f107 030c 	add.w	r3, r7, #12
 800a7e2:	6879      	ldr	r1, [r7, #4]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f000 fa59 	bl	800ac9c <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */ 
    
/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a7ea:	4944      	ldr	r1, [pc, #272]	; (800a8fc <low_level_init+0x27c>)
 800a7ec:	4844      	ldr	r0, [pc, #272]	; (800a900 <low_level_init+0x280>)
 800a7ee:	f7f6 fc74 	bl	80010da <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a7f2:	4843      	ldr	r0, [pc, #268]	; (800a900 <low_level_init+0x280>)
 800a7f4:	f7f6 fca3 	bl	800113e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a7f8:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d164      	bne.n	800a8ca <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a800:	483f      	ldr	r0, [pc, #252]	; (800a900 <low_level_init+0x280>)
 800a802:	f7f6 fd44 	bl	800128e <LAN8742_GetLinkState>
 800a806:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  
    /* Get link state */  
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a80a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a80e:	2b01      	cmp	r3, #1
 800a810:	dc06      	bgt.n	800a820 <low_level_init+0x1a0>
    {
      netif_set_link_down(netif);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f004 fdb1 	bl	800f37a <netif_set_link_down>
      netif_set_down(netif);
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f004 fd69 	bl	800f2f0 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800a81e:	e056      	b.n	800a8ce <low_level_init+0x24e>
      switch (PHYLinkState)
 800a820:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a824:	3b02      	subs	r3, #2
 800a826:	2b03      	cmp	r3, #3
 800a828:	d82a      	bhi.n	800a880 <low_level_init+0x200>
 800a82a:	a201      	add	r2, pc, #4	; (adr r2, 800a830 <low_level_init+0x1b0>)
 800a82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a830:	0800a841 	.word	0x0800a841
 800a834:	0800a853 	.word	0x0800a853
 800a838:	0800a863 	.word	0x0800a863
 800a83c:	0800a873 	.word	0x0800a873
        duplex = ETH_FULLDUPLEX_MODE;
 800a840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a844:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a848:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a84c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a850:	e01f      	b.n	800a892 <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800a852:	2300      	movs	r3, #0
 800a854:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a858:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a85c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a860:	e017      	b.n	800a892 <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800a862:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a866:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800a86a:	2300      	movs	r3, #0
 800a86c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a870:	e00f      	b.n	800a892 <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800a872:	2300      	movs	r3, #0
 800a874:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800a878:	2300      	movs	r3, #0
 800a87a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800a87e:	e008      	b.n	800a892 <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800a880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a884:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800a888:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a88c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;      
 800a890:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf); 
 800a892:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a896:	4619      	mov	r1, r3
 800a898:	480f      	ldr	r0, [pc, #60]	; (800a8d8 <low_level_init+0x258>)
 800a89a:	f7f7 fdcb 	bl	8002434 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800a89e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a8a2:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800a8a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a8a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a8aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	4809      	ldr	r0, [pc, #36]	; (800a8d8 <low_level_init+0x258>)
 800a8b2:	f7f7 ff93 	bl	80027dc <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800a8b6:	4808      	ldr	r0, [pc, #32]	; (800a8d8 <low_level_init+0x258>)
 800a8b8:	f7f7 f9cf 	bl	8001c5a <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f004 fcd3 	bl	800f268 <netif_set_up>
    netif_set_link_up(netif);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f004 fd36 	bl	800f334 <netif_set_link_up>
}
 800a8c8:	e001      	b.n	800a8ce <low_level_init+0x24e>
    Error_Handler();
 800a8ca:	f7f6 f999 	bl	8000c00 <Error_Handler>
}
 800a8ce:	bf00      	nop
 800a8d0:	37b0      	adds	r7, #176	; 0xb0
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bdb0      	pop	{r4, r5, r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	2400a74c 	.word	0x2400a74c
 800a8dc:	40028000 	.word	0x40028000
 800a8e0:	30040060 	.word	0x30040060
 800a8e4:	30040000 	.word	0x30040000
 800a8e8:	2400a7bc 	.word	0x2400a7bc
 800a8ec:	0801a280 	.word	0x0801a280
 800a8f0:	30040200 	.word	0x30040200
 800a8f4:	24002158 	.word	0x24002158
 800a8f8:	08018488 	.word	0x08018488
 800a8fc:	24000010 	.word	0x24000010
 800a900:	2400a72c 	.word	0x2400a72c

0800a904 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b092      	sub	sp, #72	; 0x48
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
  uint32_t i=0, framelen = 0;
 800a90e:	2300      	movs	r3, #0
 800a910:	647b      	str	r3, [r7, #68]	; 0x44
 800a912:	2300      	movs	r3, #0
 800a914:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf *q;
  err_t errval = ERR_OK;
 800a916:	2300      	movs	r3, #0
 800a918:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a91c:	f107 0308 	add.w	r3, r7, #8
 800a920:	2230      	movs	r2, #48	; 0x30
 800a922:	2100      	movs	r1, #0
 800a924:	4618      	mov	r0, r3
 800a926:	f00c fd7b 	bl	8017420 <memset>
  
  for(q = p; q != NULL; q = q->next)
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a92e:	e04f      	b.n	800a9d0 <low_level_output+0xcc>
  {
    if(i >= ETH_TX_DESC_CNT)	
 800a930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a932:	2b03      	cmp	r3, #3
 800a934:	d902      	bls.n	800a93c <low_level_output+0x38>
      return ERR_IF;
 800a936:	f06f 030b 	mvn.w	r3, #11
 800a93a:	e05a      	b.n	800a9f2 <low_level_output+0xee>
    
    Txbuffer[i].buffer = q->payload;
 800a93c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a93e:	6859      	ldr	r1, [r3, #4]
 800a940:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a942:	4613      	mov	r3, r2
 800a944:	005b      	lsls	r3, r3, #1
 800a946:	4413      	add	r3, r2
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a94e:	4413      	add	r3, r2
 800a950:	3b40      	subs	r3, #64	; 0x40
 800a952:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a956:	895b      	ldrh	r3, [r3, #10]
 800a958:	4619      	mov	r1, r3
 800a95a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a95c:	4613      	mov	r3, r2
 800a95e:	005b      	lsls	r3, r3, #1
 800a960:	4413      	add	r3, r2
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a968:	4413      	add	r3, r2
 800a96a:	3b3c      	subs	r3, #60	; 0x3c
 800a96c:	6019      	str	r1, [r3, #0]
    framelen += q->len;
 800a96e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a970:	895b      	ldrh	r3, [r3, #10]
 800a972:	461a      	mov	r2, r3
 800a974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a976:	4413      	add	r3, r2
 800a978:	643b      	str	r3, [r7, #64]	; 0x40
    
    if(i>0)
 800a97a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d012      	beq.n	800a9a6 <low_level_output+0xa2>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a982:	1e5a      	subs	r2, r3, #1
 800a984:	f107 0008 	add.w	r0, r7, #8
 800a988:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a98a:	460b      	mov	r3, r1
 800a98c:	005b      	lsls	r3, r3, #1
 800a98e:	440b      	add	r3, r1
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	18c1      	adds	r1, r0, r3
 800a994:	4613      	mov	r3, r2
 800a996:	005b      	lsls	r3, r3, #1
 800a998:	4413      	add	r3, r2
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a9a0:	4413      	add	r3, r2
 800a9a2:	3b38      	subs	r3, #56	; 0x38
 800a9a4:	6019      	str	r1, [r3, #0]
    }
    
    if(q->next == NULL)
 800a9a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d10a      	bne.n	800a9c4 <low_level_output+0xc0>
    {
      Txbuffer[i].next = NULL;
 800a9ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	005b      	lsls	r3, r3, #1
 800a9b4:	4413      	add	r3, r2
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a9bc:	4413      	add	r3, r2
 800a9be:	3b38      	subs	r3, #56	; 0x38
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	601a      	str	r2, [r3, #0]
    }
    
    i++;
 800a9c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800a9ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1ac      	bne.n	800a930 <low_level_output+0x2c>
  }

  TxConfig.Length = framelen;
 800a9d6:	4a09      	ldr	r2, [pc, #36]	; (800a9fc <low_level_output+0xf8>)
 800a9d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9da:	6053      	str	r3, [r2, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a9dc:	4a07      	ldr	r2, [pc, #28]	; (800a9fc <low_level_output+0xf8>)
 800a9de:	f107 0308 	add.w	r3, r7, #8
 800a9e2:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800a9e4:	2214      	movs	r2, #20
 800a9e6:	4905      	ldr	r1, [pc, #20]	; (800a9fc <low_level_output+0xf8>)
 800a9e8:	4805      	ldr	r0, [pc, #20]	; (800aa00 <low_level_output+0xfc>)
 800a9ea:	f7f7 f9cc 	bl	8001d86 <HAL_ETH_Transmit>
  
  return errval;
 800a9ee:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3748      	adds	r7, #72	; 0x48
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	2400a7bc 	.word	0x2400a7bc
 800aa00:	2400a74c 	.word	0x2400a74c

0800aa04 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b08a      	sub	sp, #40	; 0x28
 800aa08:	af02      	add	r7, sp, #8
 800aa0a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	61fb      	str	r3, [r7, #28]
  ETH_BufferTypeDef RxBuff;
  uint32_t framelength = 0;
 800aa10:	2300      	movs	r3, #0
 800aa12:	60bb      	str	r3, [r7, #8]
  struct pbuf_custom* custom_pbuf;
  
  if (HAL_ETH_GetRxDataBuffer(&heth, &RxBuff) == HAL_OK) 
 800aa14:	f107 030c 	add.w	r3, r7, #12
 800aa18:	4619      	mov	r1, r3
 800aa1a:	4817      	ldr	r0, [pc, #92]	; (800aa78 <low_level_input+0x74>)
 800aa1c:	f7f7 fb1d 	bl	800205a <HAL_ETH_GetRxDataBuffer>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d122      	bne.n	800aa6c <low_level_input+0x68>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800aa26:	f107 0308 	add.w	r3, r7, #8
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	4812      	ldr	r0, [pc, #72]	; (800aa78 <low_level_input+0x74>)
 800aa2e:	f7f7 fbb2 	bl	8002196 <HAL_ETH_GetRxDataLength>
    
    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800aa32:	4811      	ldr	r0, [pc, #68]	; (800aa78 <low_level_input+0x74>)
 800aa34:	f7f7 fbe2 	bl	80021fc <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff.buffer, framelength);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	68ba      	ldr	r2, [r7, #8]
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7ff fd26 	bl	800a490 <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800aa44:	480d      	ldr	r0, [pc, #52]	; (800aa7c <low_level_input+0x78>)
 800aa46:	f004 fa55 	bl	800eef4 <memp_malloc_pool>
 800aa4a:	61b8      	str	r0, [r7, #24]
    custom_pbuf->custom_free_function = pbuf_free_custom;
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	4a0c      	ldr	r2, [pc, #48]	; (800aa80 <low_level_input+0x7c>)
 800aa50:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff.buffer, ETH_RX_BUFFER_SIZE);
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	b299      	uxth	r1, r3
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800aa5c:	9201      	str	r2, [sp, #4]
 800aa5e:	9300      	str	r3, [sp, #0]
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	2202      	movs	r2, #2
 800aa64:	2004      	movs	r0, #4
 800aa66:	f004 fe97 	bl	800f798 <pbuf_alloced_custom>
 800aa6a:	61f8      	str	r0, [r7, #28]
  }
  
  
  return p;
 800aa6c:	69fb      	ldr	r3, [r7, #28]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3720      	adds	r7, #32
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	2400a74c 	.word	0x2400a74c
 800aa7c:	0801a280 	.word	0x0801a280
 800aa80:	0800ab41 	.word	0x0800ab41

0800aa84 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800aa90:	4b12      	ldr	r3, [pc, #72]	; (800aadc <ethernetif_input+0x58>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f04f 31ff 	mov.w	r1, #4294967295
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f000 fa47 	bl	800af2c <osSemaphoreWait>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1f5      	bne.n	800aa90 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800aaa4:	480e      	ldr	r0, [pc, #56]	; (800aae0 <ethernetif_input+0x5c>)
 800aaa6:	f00c fc1d 	bl	80172e4 <sys_mutex_lock>
        p = low_level_input( netif );
 800aaaa:	68f8      	ldr	r0, [r7, #12]
 800aaac:	f7ff ffaa 	bl	800aa04 <low_level_input>
 800aab0:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d00a      	beq.n	800aace <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	691b      	ldr	r3, [r3, #16]
 800aabc:	68f9      	ldr	r1, [r7, #12]
 800aabe:	68b8      	ldr	r0, [r7, #8]
 800aac0:	4798      	blx	r3
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d002      	beq.n	800aace <ethernetif_input+0x4a>
          {
            pbuf_free(p);           
 800aac8:	68b8      	ldr	r0, [r7, #8]
 800aaca:	f005 f843 	bl	800fb54 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800aace:	4804      	ldr	r0, [pc, #16]	; (800aae0 <ethernetif_input+0x5c>)
 800aad0:	f00c fc17 	bl	8017302 <sys_mutex_unlock>
      } while(p!=NULL);
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d1e4      	bne.n	800aaa4 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800aada:	e7d9      	b.n	800aa90 <ethernetif_input+0xc>
 800aadc:	24002158 	.word	0x24002158
 800aae0:	2400a830 	.word	0x2400a830

0800aae4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d106      	bne.n	800ab00 <ethernetif_init+0x1c>
 800aaf2:	4b0e      	ldr	r3, [pc, #56]	; (800ab2c <ethernetif_init+0x48>)
 800aaf4:	f240 223b 	movw	r2, #571	; 0x23b
 800aaf8:	490d      	ldr	r1, [pc, #52]	; (800ab30 <ethernetif_init+0x4c>)
 800aafa:	480e      	ldr	r0, [pc, #56]	; (800ab34 <ethernetif_init+0x50>)
 800aafc:	f00c fc98 	bl	8017430 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2273      	movs	r2, #115	; 0x73
 800ab04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2274      	movs	r2, #116	; 0x74
 800ab0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a09      	ldr	r2, [pc, #36]	; (800ab38 <ethernetif_init+0x54>)
 800ab14:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	4a08      	ldr	r2, [pc, #32]	; (800ab3c <ethernetif_init+0x58>)
 800ab1a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f7ff fdaf 	bl	800a680 <low_level_init>

  return ERR_OK;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	080184a4 	.word	0x080184a4
 800ab30:	080184c0 	.word	0x080184c0
 800ab34:	080184d0 	.word	0x080184d0
 800ab38:	0801552d 	.word	0x0801552d
 800ab3c:	0800a905 	.word	0x0800a905

0800ab40 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	60fb      	str	r3, [r7, #12]
  
#if !defined(DUAL_CORE) || defined(CORE_CM7)
  /* Invalidate data cache: lwIP and/or application may have written into buffer */
  SCB_InvalidateDCache_by_Addr((uint32_t *)p->payload, p->tot_len);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	685a      	ldr	r2, [r3, #4]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	891b      	ldrh	r3, [r3, #8]
 800ab54:	4619      	mov	r1, r3
 800ab56:	4610      	mov	r0, r2
 800ab58:	f7ff fc9a 	bl	800a490 <SCB_InvalidateDCache_by_Addr>
#endif
  
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800ab5c:	68f9      	ldr	r1, [r7, #12]
 800ab5e:	4803      	ldr	r0, [pc, #12]	; (800ab6c <pbuf_free_custom+0x2c>)
 800ab60:	f004 fa3c 	bl	800efdc <memp_free_pool>
}
 800ab64:	bf00      	nop
 800ab66:	3710      	adds	r7, #16
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	0801a280 	.word	0x0801a280

0800ab70 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ab74:	f7f6 fc62 	bl	800143c <HAL_GetTick>
 800ab78:	4603      	mov	r3, r0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	bd80      	pop	{r7, pc}
	...

0800ab80 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{  
 800ab80:	b580      	push	{r7, lr}
 800ab82:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here 
  */
  
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800ab84:	4802      	ldr	r0, [pc, #8]	; (800ab90 <ETH_PHY_IO_Init+0x10>)
 800ab86:	f7f7 fe43 	bl	8002810 <HAL_ETH_SetMDIOClockRange>
  
  return 0;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	2400a74c 	.word	0x2400a74c

0800ab94 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800ab94:	b480      	push	{r7}
 800ab96:	af00      	add	r7, sp, #0
  return 0;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	68ba      	ldr	r2, [r7, #8]
 800abb4:	68f9      	ldr	r1, [r7, #12]
 800abb6:	4807      	ldr	r0, [pc, #28]	; (800abd4 <ETH_PHY_IO_ReadReg+0x30>)
 800abb8:	f7f7 fb94 	bl	80022e4 <HAL_ETH_ReadPHYRegister>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d002      	beq.n	800abc8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800abc2:	f04f 33ff 	mov.w	r3, #4294967295
 800abc6:	e000      	b.n	800abca <ETH_PHY_IO_ReadReg+0x26>
  }
  
  return 0;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	2400a74c 	.word	0x2400a74c

0800abd8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af00      	add	r7, sp, #0
 800abde:	60f8      	str	r0, [r7, #12]
 800abe0:	60b9      	str	r1, [r7, #8]
 800abe2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	68f9      	ldr	r1, [r7, #12]
 800abea:	4807      	ldr	r0, [pc, #28]	; (800ac08 <ETH_PHY_IO_WriteReg+0x30>)
 800abec:	f7f7 fbce 	bl	800238c <HAL_ETH_WritePHYRegister>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d002      	beq.n	800abfc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800abf6:	f04f 33ff 	mov.w	r3, #4294967295
 800abfa:	e000      	b.n	800abfe <ETH_PHY_IO_WriteReg+0x26>
  }
  
  return 0;
 800abfc:	2300      	movs	r3, #0
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3710      	adds	r7, #16
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	2400a74c 	.word	0x2400a74c

0800ac0c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ac10:	f7f6 fc14 	bl	800143c <HAL_GetTick>
 800ac14:	4603      	mov	r3, r0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ac1a:	b480      	push	{r7}
 800ac1c:	b085      	sub	sp, #20
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	4603      	mov	r3, r0
 800ac22:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ac24:	2300      	movs	r3, #0
 800ac26:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ac28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ac2c:	2b84      	cmp	r3, #132	; 0x84
 800ac2e:	d005      	beq.n	800ac3c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ac30:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	4413      	add	r3, r2
 800ac38:	3303      	adds	r3, #3
 800ac3a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3714      	adds	r7, #20
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ac4a:	b480      	push	{r7}
 800ac4c:	b083      	sub	sp, #12
 800ac4e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac50:	f3ef 8305 	mrs	r3, IPSR
 800ac54:	607b      	str	r3, [r7, #4]
  return(result);
 800ac56:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	bf14      	ite	ne
 800ac5c:	2301      	movne	r3, #1
 800ac5e:	2300      	moveq	r3, #0
 800ac60:	b2db      	uxtb	r3, r3
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	370c      	adds	r7, #12
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ac72:	f001 fd77 	bl	800c764 <vTaskStartScheduler>
  
  return osOK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800ac80:	f7ff ffe3 	bl	800ac4a <inHandlerMode>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d003      	beq.n	800ac92 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800ac8a:	f001 fe89 	bl	800c9a0 <xTaskGetTickCountFromISR>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	e002      	b.n	800ac98 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800ac92:	f001 fe75 	bl	800c980 <xTaskGetTickCount>
 800ac96:	4603      	mov	r3, r0
  }
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ac9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac9e:	b089      	sub	sp, #36	; 0x24
 800aca0:	af04      	add	r7, sp, #16
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	695b      	ldr	r3, [r3, #20]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d020      	beq.n	800acf0 <osThreadCreate+0x54>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	699b      	ldr	r3, [r3, #24]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d01c      	beq.n	800acf0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	685c      	ldr	r4, [r3, #4]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681d      	ldr	r5, [r3, #0]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	691e      	ldr	r6, [r3, #16]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800acc8:	4618      	mov	r0, r3
 800acca:	f7ff ffa6 	bl	800ac1a <makeFreeRtosPriority>
 800acce:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	695b      	ldr	r3, [r3, #20]
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800acd8:	9202      	str	r2, [sp, #8]
 800acda:	9301      	str	r3, [sp, #4]
 800acdc:	9100      	str	r1, [sp, #0]
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	4632      	mov	r2, r6
 800ace2:	4629      	mov	r1, r5
 800ace4:	4620      	mov	r0, r4
 800ace6:	f001 faeb 	bl	800c2c0 <xTaskCreateStatic>
 800acea:	4603      	mov	r3, r0
 800acec:	60fb      	str	r3, [r7, #12]
 800acee:	e01c      	b.n	800ad2a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	685c      	ldr	r4, [r3, #4]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800acfc:	b29e      	uxth	r6, r3
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7ff ff88 	bl	800ac1a <makeFreeRtosPriority>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	f107 030c 	add.w	r3, r7, #12
 800ad10:	9301      	str	r3, [sp, #4]
 800ad12:	9200      	str	r2, [sp, #0]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	4632      	mov	r2, r6
 800ad18:	4629      	mov	r1, r5
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	f001 fb2a 	bl	800c374 <xTaskCreate>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d001      	beq.n	800ad2a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ad26:	2300      	movs	r3, #0
 800ad28:	e000      	b.n	800ad2c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3714      	adds	r7, #20
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad34 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f001 fc4f 	bl	800c5e0 <vTaskDelete>
  return osOK;
 800ad42:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d001      	beq.n	800ad62 <osDelay+0x16>
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	e000      	b.n	800ad64 <osDelay+0x18>
 800ad62:	2301      	movs	r3, #1
 800ad64:	4618      	mov	r0, r3
 800ad66:	f001 fcc9 	bl	800c6fc <vTaskDelay>
  
  return osOK;
 800ad6a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d007      	beq.n	800ad94 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	4619      	mov	r1, r3
 800ad8a:	2001      	movs	r0, #1
 800ad8c:	f000 fc19 	bl	800b5c2 <xQueueCreateMutexStatic>
 800ad90:	4603      	mov	r3, r0
 800ad92:	e003      	b.n	800ad9c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800ad94:	2001      	movs	r0, #1
 800ad96:	f000 fbfc 	bl	800b592 <xQueueCreateMutex>
 800ad9a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3708      	adds	r7, #8
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800adae:	2300      	movs	r3, #0
 800adb0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d101      	bne.n	800adbc <osMutexWait+0x18>
    return osErrorParameter;
 800adb8:	2380      	movs	r3, #128	; 0x80
 800adba:	e03a      	b.n	800ae32 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800adbc:	2300      	movs	r3, #0
 800adbe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc6:	d103      	bne.n	800add0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800adc8:	f04f 33ff 	mov.w	r3, #4294967295
 800adcc:	60fb      	str	r3, [r7, #12]
 800adce:	e009      	b.n	800ade4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d006      	beq.n	800ade4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d101      	bne.n	800ade4 <osMutexWait+0x40>
      ticks = 1;
 800ade0:	2301      	movs	r3, #1
 800ade2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ade4:	f7ff ff31 	bl	800ac4a <inHandlerMode>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d017      	beq.n	800ae1e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800adee:	f107 0308 	add.w	r3, r7, #8
 800adf2:	461a      	mov	r2, r3
 800adf4:	2100      	movs	r1, #0
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f001 f860 	bl	800bebc <xQueueReceiveFromISR>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d001      	beq.n	800ae06 <osMutexWait+0x62>
      return osErrorOS;
 800ae02:	23ff      	movs	r3, #255	; 0xff
 800ae04:	e015      	b.n	800ae32 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d011      	beq.n	800ae30 <osMutexWait+0x8c>
 800ae0c:	4b0b      	ldr	r3, [pc, #44]	; (800ae3c <osMutexWait+0x98>)
 800ae0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae12:	601a      	str	r2, [r3, #0]
 800ae14:	f3bf 8f4f 	dsb	sy
 800ae18:	f3bf 8f6f 	isb	sy
 800ae1c:	e008      	b.n	800ae30 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800ae1e:	68f9      	ldr	r1, [r7, #12]
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 ff43 	bl	800bcac <xQueueSemaphoreTake>
 800ae26:	4603      	mov	r3, r0
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d001      	beq.n	800ae30 <osMutexWait+0x8c>
    return osErrorOS;
 800ae2c:	23ff      	movs	r3, #255	; 0xff
 800ae2e:	e000      	b.n	800ae32 <osMutexWait+0x8e>
  }
  
  return osOK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	e000ed04 	.word	0xe000ed04

0800ae40 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800ae50:	f7ff fefb 	bl	800ac4a <inHandlerMode>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d016      	beq.n	800ae88 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ae5a:	f107 0308 	add.w	r3, r7, #8
 800ae5e:	4619      	mov	r1, r3
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 fdbd 	bl	800b9e0 <xQueueGiveFromISR>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d001      	beq.n	800ae70 <osMutexRelease+0x30>
      return osErrorOS;
 800ae6c:	23ff      	movs	r3, #255	; 0xff
 800ae6e:	e017      	b.n	800aea0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d013      	beq.n	800ae9e <osMutexRelease+0x5e>
 800ae76:	4b0c      	ldr	r3, [pc, #48]	; (800aea8 <osMutexRelease+0x68>)
 800ae78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae7c:	601a      	str	r2, [r3, #0]
 800ae7e:	f3bf 8f4f 	dsb	sy
 800ae82:	f3bf 8f6f 	isb	sy
 800ae86:	e00a      	b.n	800ae9e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800ae88:	2300      	movs	r3, #0
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 fc18 	bl	800b6c4 <xQueueGenericSend>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d001      	beq.n	800ae9e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800ae9a:	23ff      	movs	r3, #255	; 0xff
 800ae9c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3710      	adds	r7, #16
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	e000ed04 	.word	0xe000ed04

0800aeac <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af02      	add	r7, sp, #8
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d017      	beq.n	800aeee <osSemaphoreCreate+0x42>
    if (count == 1) {
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d10b      	bne.n	800aedc <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	685a      	ldr	r2, [r3, #4]
 800aec8:	2303      	movs	r3, #3
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	4613      	mov	r3, r2
 800aece:	2200      	movs	r2, #0
 800aed0:	2100      	movs	r1, #0
 800aed2:	2001      	movs	r0, #1
 800aed4:	f000 fa72 	bl	800b3bc <xQueueGenericCreateStatic>
 800aed8:	4603      	mov	r3, r0
 800aeda:	e023      	b.n	800af24 <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800aedc:	6838      	ldr	r0, [r7, #0]
 800aede:	6839      	ldr	r1, [r7, #0]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	461a      	mov	r2, r3
 800aee6:	f000 fb87 	bl	800b5f8 <xQueueCreateCountingSemaphoreStatic>
 800aeea:	4603      	mov	r3, r0
 800aeec:	e01a      	b.n	800af24 <osSemaphoreCreate+0x78>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d110      	bne.n	800af16 <osSemaphoreCreate+0x6a>
      vSemaphoreCreateBinary(sema);
 800aef4:	2203      	movs	r2, #3
 800aef6:	2100      	movs	r1, #0
 800aef8:	2001      	movs	r0, #1
 800aefa:	f000 fad2 	bl	800b4a2 <xQueueGenericCreate>
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d005      	beq.n	800af12 <osSemaphoreCreate+0x66>
 800af06:	2300      	movs	r3, #0
 800af08:	2200      	movs	r2, #0
 800af0a:	2100      	movs	r1, #0
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f000 fbd9 	bl	800b6c4 <xQueueGenericSend>
      return sema;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	e006      	b.n	800af24 <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	683a      	ldr	r2, [r7, #0]
 800af1a:	4611      	mov	r1, r2
 800af1c:	4618      	mov	r0, r3
 800af1e:	f000 fba0 	bl	800b662 <xQueueCreateCountingSemaphore>
 800af22:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800af24:	4618      	mov	r0, r3
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800af36:	2300      	movs	r3, #0
 800af38:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d101      	bne.n	800af44 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800af40:	2380      	movs	r3, #128	; 0x80
 800af42:	e03a      	b.n	800afba <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800af44:	2300      	movs	r3, #0
 800af46:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af4e:	d103      	bne.n	800af58 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800af50:	f04f 33ff 	mov.w	r3, #4294967295
 800af54:	60fb      	str	r3, [r7, #12]
 800af56:	e009      	b.n	800af6c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d006      	beq.n	800af6c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d101      	bne.n	800af6c <osSemaphoreWait+0x40>
      ticks = 1;
 800af68:	2301      	movs	r3, #1
 800af6a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800af6c:	f7ff fe6d 	bl	800ac4a <inHandlerMode>
 800af70:	4603      	mov	r3, r0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d017      	beq.n	800afa6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800af76:	f107 0308 	add.w	r3, r7, #8
 800af7a:	461a      	mov	r2, r3
 800af7c:	2100      	movs	r1, #0
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 ff9c 	bl	800bebc <xQueueReceiveFromISR>
 800af84:	4603      	mov	r3, r0
 800af86:	2b01      	cmp	r3, #1
 800af88:	d001      	beq.n	800af8e <osSemaphoreWait+0x62>
      return osErrorOS;
 800af8a:	23ff      	movs	r3, #255	; 0xff
 800af8c:	e015      	b.n	800afba <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d011      	beq.n	800afb8 <osSemaphoreWait+0x8c>
 800af94:	4b0b      	ldr	r3, [pc, #44]	; (800afc4 <osSemaphoreWait+0x98>)
 800af96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af9a:	601a      	str	r2, [r3, #0]
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	f3bf 8f6f 	isb	sy
 800afa4:	e008      	b.n	800afb8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800afa6:	68f9      	ldr	r1, [r7, #12]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 fe7f 	bl	800bcac <xQueueSemaphoreTake>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d001      	beq.n	800afb8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800afb4:	23ff      	movs	r3, #255	; 0xff
 800afb6:	e000      	b.n	800afba <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800afb8:	2300      	movs	r3, #0
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3710      	adds	r7, #16
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop
 800afc4:	e000ed04 	.word	0xe000ed04

0800afc8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800afc8:	b590      	push	{r4, r7, lr}
 800afca:	b085      	sub	sp, #20
 800afcc:	af02      	add	r7, sp, #8
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d012      	beq.n	800b000 <osMessageCreate+0x38>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00e      	beq.n	800b000 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6818      	ldr	r0, [r3, #0]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6859      	ldr	r1, [r3, #4]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	689a      	ldr	r2, [r3, #8]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	68dc      	ldr	r4, [r3, #12]
 800aff2:	2300      	movs	r3, #0
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	4623      	mov	r3, r4
 800aff8:	f000 f9e0 	bl	800b3bc <xQueueGenericCreateStatic>
 800affc:	4603      	mov	r3, r0
 800affe:	e008      	b.n	800b012 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6818      	ldr	r0, [r3, #0]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	4619      	mov	r1, r3
 800b00c:	f000 fa49 	bl	800b4a2 <xQueueGenericCreate>
 800b010:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b012:	4618      	mov	r0, r3
 800b014:	370c      	adds	r7, #12
 800b016:	46bd      	mov	sp, r7
 800b018:	bd90      	pop	{r4, r7, pc}
	...

0800b01c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b086      	sub	sp, #24
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b028:	2300      	movs	r3, #0
 800b02a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d101      	bne.n	800b03a <osMessagePut+0x1e>
    ticks = 1;
 800b036:	2301      	movs	r3, #1
 800b038:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b03a:	f7ff fe06 	bl	800ac4a <inHandlerMode>
 800b03e:	4603      	mov	r3, r0
 800b040:	2b00      	cmp	r3, #0
 800b042:	d018      	beq.n	800b076 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b044:	f107 0210 	add.w	r2, r7, #16
 800b048:	f107 0108 	add.w	r1, r7, #8
 800b04c:	2300      	movs	r3, #0
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f000 fc32 	bl	800b8b8 <xQueueGenericSendFromISR>
 800b054:	4603      	mov	r3, r0
 800b056:	2b01      	cmp	r3, #1
 800b058:	d001      	beq.n	800b05e <osMessagePut+0x42>
      return osErrorOS;
 800b05a:	23ff      	movs	r3, #255	; 0xff
 800b05c:	e018      	b.n	800b090 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d014      	beq.n	800b08e <osMessagePut+0x72>
 800b064:	4b0c      	ldr	r3, [pc, #48]	; (800b098 <osMessagePut+0x7c>)
 800b066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b06a:	601a      	str	r2, [r3, #0]
 800b06c:	f3bf 8f4f 	dsb	sy
 800b070:	f3bf 8f6f 	isb	sy
 800b074:	e00b      	b.n	800b08e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b076:	f107 0108 	add.w	r1, r7, #8
 800b07a:	2300      	movs	r3, #0
 800b07c:	697a      	ldr	r2, [r7, #20]
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f000 fb20 	bl	800b6c4 <xQueueGenericSend>
 800b084:	4603      	mov	r3, r0
 800b086:	2b01      	cmp	r3, #1
 800b088:	d001      	beq.n	800b08e <osMessagePut+0x72>
      return osErrorOS;
 800b08a:	23ff      	movs	r3, #255	; 0xff
 800b08c:	e000      	b.n	800b090 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3718      	adds	r7, #24
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	e000ed04 	.word	0xe000ed04

0800b09c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b09c:	b590      	push	{r4, r7, lr}
 800b09e:	b08b      	sub	sp, #44	; 0x2c
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d10a      	bne.n	800b0cc <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b0b6:	2380      	movs	r3, #128	; 0x80
 800b0b8:	617b      	str	r3, [r7, #20]
    return event;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	461c      	mov	r4, r3
 800b0be:	f107 0314 	add.w	r3, r7, #20
 800b0c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b0c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b0ca:	e054      	b.n	800b176 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0da:	d103      	bne.n	800b0e4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b0dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b0e0:	627b      	str	r3, [r7, #36]	; 0x24
 800b0e2:	e009      	b.n	800b0f8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d006      	beq.n	800b0f8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d101      	bne.n	800b0f8 <osMessageGet+0x5c>
      ticks = 1;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b0f8:	f7ff fda7 	bl	800ac4a <inHandlerMode>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d01c      	beq.n	800b13c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b102:	f107 0220 	add.w	r2, r7, #32
 800b106:	f107 0314 	add.w	r3, r7, #20
 800b10a:	3304      	adds	r3, #4
 800b10c:	4619      	mov	r1, r3
 800b10e:	68b8      	ldr	r0, [r7, #8]
 800b110:	f000 fed4 	bl	800bebc <xQueueReceiveFromISR>
 800b114:	4603      	mov	r3, r0
 800b116:	2b01      	cmp	r3, #1
 800b118:	d102      	bne.n	800b120 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b11a:	2310      	movs	r3, #16
 800b11c:	617b      	str	r3, [r7, #20]
 800b11e:	e001      	b.n	800b124 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b120:	2300      	movs	r3, #0
 800b122:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b124:	6a3b      	ldr	r3, [r7, #32]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d01d      	beq.n	800b166 <osMessageGet+0xca>
 800b12a:	4b15      	ldr	r3, [pc, #84]	; (800b180 <osMessageGet+0xe4>)
 800b12c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b130:	601a      	str	r2, [r3, #0]
 800b132:	f3bf 8f4f 	dsb	sy
 800b136:	f3bf 8f6f 	isb	sy
 800b13a:	e014      	b.n	800b166 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b13c:	f107 0314 	add.w	r3, r7, #20
 800b140:	3304      	adds	r3, #4
 800b142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b144:	4619      	mov	r1, r3
 800b146:	68b8      	ldr	r0, [r7, #8]
 800b148:	f000 fcd4 	bl	800baf4 <xQueueReceive>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d102      	bne.n	800b158 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b152:	2310      	movs	r3, #16
 800b154:	617b      	str	r3, [r7, #20]
 800b156:	e006      	b.n	800b166 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d101      	bne.n	800b162 <osMessageGet+0xc6>
 800b15e:	2300      	movs	r3, #0
 800b160:	e000      	b.n	800b164 <osMessageGet+0xc8>
 800b162:	2340      	movs	r3, #64	; 0x40
 800b164:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	461c      	mov	r4, r3
 800b16a:	f107 0314 	add.w	r3, r7, #20
 800b16e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b172:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	372c      	adds	r7, #44	; 0x2c
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd90      	pop	{r4, r7, pc}
 800b17e:	bf00      	nop
 800b180:	e000ed04 	.word	0xe000ed04

0800b184 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f103 0208 	add.w	r2, r3, #8
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f04f 32ff 	mov.w	r2, #4294967295
 800b19c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f103 0208 	add.w	r2, r3, #8
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f103 0208 	add.w	r2, r3, #8
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b1b8:	bf00      	nop
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b1d2:	bf00      	nop
 800b1d4:	370c      	adds	r7, #12
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr

0800b1de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b1de:	b480      	push	{r7}
 800b1e0:	b085      	sub	sp, #20
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
 800b1e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	689a      	ldr	r2, [r3, #8]
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	683a      	ldr	r2, [r7, #0]
 800b208:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	1c5a      	adds	r2, r3, #1
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	601a      	str	r2, [r3, #0]
}
 800b21a:	bf00      	nop
 800b21c:	3714      	adds	r7, #20
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr

0800b226 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b226:	b480      	push	{r7}
 800b228:	b085      	sub	sp, #20
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
 800b22e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b23c:	d103      	bne.n	800b246 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	691b      	ldr	r3, [r3, #16]
 800b242:	60fb      	str	r3, [r7, #12]
 800b244:	e00c      	b.n	800b260 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	3308      	adds	r3, #8
 800b24a:	60fb      	str	r3, [r7, #12]
 800b24c:	e002      	b.n	800b254 <vListInsert+0x2e>
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	60fb      	str	r3, [r7, #12]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68ba      	ldr	r2, [r7, #8]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d2f6      	bcs.n	800b24e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	685a      	ldr	r2, [r3, #4]
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	683a      	ldr	r2, [r7, #0]
 800b26e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	68fa      	ldr	r2, [r7, #12]
 800b274:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	683a      	ldr	r2, [r7, #0]
 800b27a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	1c5a      	adds	r2, r3, #1
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	601a      	str	r2, [r3, #0]
}
 800b28c:	bf00      	nop
 800b28e:	3714      	adds	r7, #20
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b298:	b480      	push	{r7}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	691b      	ldr	r3, [r3, #16]
 800b2a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	6892      	ldr	r2, [r2, #8]
 800b2ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	687a      	ldr	r2, [r7, #4]
 800b2b6:	6852      	ldr	r2, [r2, #4]
 800b2b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d103      	bne.n	800b2cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	689a      	ldr	r2, [r3, #8]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	1e5a      	subs	r2, r3, #1
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3714      	adds	r7, #20
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d109      	bne.n	800b314 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b304:	f383 8811 	msr	BASEPRI, r3
 800b308:	f3bf 8f6f 	isb	sy
 800b30c:	f3bf 8f4f 	dsb	sy
 800b310:	60bb      	str	r3, [r7, #8]
 800b312:	e7fe      	b.n	800b312 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800b314:	f002 fcfa 	bl	800dd0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b320:	68f9      	ldr	r1, [r7, #12]
 800b322:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b324:	fb01 f303 	mul.w	r3, r1, r3
 800b328:	441a      	add	r2, r3
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2200      	movs	r2, #0
 800b332:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681a      	ldr	r2, [r3, #0]
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681a      	ldr	r2, [r3, #0]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b344:	3b01      	subs	r3, #1
 800b346:	68f9      	ldr	r1, [r7, #12]
 800b348:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b34a:	fb01 f303 	mul.w	r3, r1, r3
 800b34e:	441a      	add	r2, r3
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	22ff      	movs	r2, #255	; 0xff
 800b358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	22ff      	movs	r2, #255	; 0xff
 800b360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d114      	bne.n	800b394 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d01a      	beq.n	800b3a8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	3310      	adds	r3, #16
 800b376:	4618      	mov	r0, r3
 800b378:	f001 fc84 	bl	800cc84 <xTaskRemoveFromEventList>
 800b37c:	4603      	mov	r3, r0
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d012      	beq.n	800b3a8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b382:	4b0d      	ldr	r3, [pc, #52]	; (800b3b8 <xQueueGenericReset+0xcc>)
 800b384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b388:	601a      	str	r2, [r3, #0]
 800b38a:	f3bf 8f4f 	dsb	sy
 800b38e:	f3bf 8f6f 	isb	sy
 800b392:	e009      	b.n	800b3a8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	3310      	adds	r3, #16
 800b398:	4618      	mov	r0, r3
 800b39a:	f7ff fef3 	bl	800b184 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	3324      	adds	r3, #36	; 0x24
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7ff feee 	bl	800b184 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b3a8:	f002 fcde 	bl	800dd68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b3ac:	2301      	movs	r3, #1
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	e000ed04 	.word	0xe000ed04

0800b3bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b08e      	sub	sp, #56	; 0x38
 800b3c0:	af02      	add	r7, sp, #8
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
 800b3c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d109      	bne.n	800b3e4 <xQueueGenericCreateStatic+0x28>
 800b3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d4:	f383 8811 	msr	BASEPRI, r3
 800b3d8:	f3bf 8f6f 	isb	sy
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3e2:	e7fe      	b.n	800b3e2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d109      	bne.n	800b3fe <xQueueGenericCreateStatic+0x42>
 800b3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ee:	f383 8811 	msr	BASEPRI, r3
 800b3f2:	f3bf 8f6f 	isb	sy
 800b3f6:	f3bf 8f4f 	dsb	sy
 800b3fa:	627b      	str	r3, [r7, #36]	; 0x24
 800b3fc:	e7fe      	b.n	800b3fc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d002      	beq.n	800b40a <xQueueGenericCreateStatic+0x4e>
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d001      	beq.n	800b40e <xQueueGenericCreateStatic+0x52>
 800b40a:	2301      	movs	r3, #1
 800b40c:	e000      	b.n	800b410 <xQueueGenericCreateStatic+0x54>
 800b40e:	2300      	movs	r3, #0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d109      	bne.n	800b428 <xQueueGenericCreateStatic+0x6c>
 800b414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b418:	f383 8811 	msr	BASEPRI, r3
 800b41c:	f3bf 8f6f 	isb	sy
 800b420:	f3bf 8f4f 	dsb	sy
 800b424:	623b      	str	r3, [r7, #32]
 800b426:	e7fe      	b.n	800b426 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d102      	bne.n	800b434 <xQueueGenericCreateStatic+0x78>
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d101      	bne.n	800b438 <xQueueGenericCreateStatic+0x7c>
 800b434:	2301      	movs	r3, #1
 800b436:	e000      	b.n	800b43a <xQueueGenericCreateStatic+0x7e>
 800b438:	2300      	movs	r3, #0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d109      	bne.n	800b452 <xQueueGenericCreateStatic+0x96>
 800b43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	61fb      	str	r3, [r7, #28]
 800b450:	e7fe      	b.n	800b450 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b452:	2348      	movs	r3, #72	; 0x48
 800b454:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	2b48      	cmp	r3, #72	; 0x48
 800b45a:	d009      	beq.n	800b470 <xQueueGenericCreateStatic+0xb4>
 800b45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b460:	f383 8811 	msr	BASEPRI, r3
 800b464:	f3bf 8f6f 	isb	sy
 800b468:	f3bf 8f4f 	dsb	sy
 800b46c:	61bb      	str	r3, [r7, #24]
 800b46e:	e7fe      	b.n	800b46e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b470:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d00d      	beq.n	800b498 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47e:	2201      	movs	r2, #1
 800b480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b484:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b48a:	9300      	str	r3, [sp, #0]
 800b48c:	4613      	mov	r3, r2
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	68b9      	ldr	r1, [r7, #8]
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	f000 f844 	bl	800b520 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3730      	adds	r7, #48	; 0x30
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b08a      	sub	sp, #40	; 0x28
 800b4a6:	af02      	add	r7, sp, #8
 800b4a8:	60f8      	str	r0, [r7, #12]
 800b4aa:	60b9      	str	r1, [r7, #8]
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d109      	bne.n	800b4ca <xQueueGenericCreate+0x28>
 800b4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ba:	f383 8811 	msr	BASEPRI, r3
 800b4be:	f3bf 8f6f 	isb	sy
 800b4c2:	f3bf 8f4f 	dsb	sy
 800b4c6:	613b      	str	r3, [r7, #16]
 800b4c8:	e7fe      	b.n	800b4c8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d102      	bne.n	800b4d6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	61fb      	str	r3, [r7, #28]
 800b4d4:	e004      	b.n	800b4e0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	68ba      	ldr	r2, [r7, #8]
 800b4da:	fb02 f303 	mul.w	r3, r2, r3
 800b4de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b4e0:	69fb      	ldr	r3, [r7, #28]
 800b4e2:	3348      	adds	r3, #72	; 0x48
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f002 fd2b 	bl	800df40 <pvPortMalloc>
 800b4ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b4ec:	69bb      	ldr	r3, [r7, #24]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d011      	beq.n	800b516 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	3348      	adds	r3, #72	; 0x48
 800b4fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b4fc:	69bb      	ldr	r3, [r7, #24]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b504:	79fa      	ldrb	r2, [r7, #7]
 800b506:	69bb      	ldr	r3, [r7, #24]
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	4613      	mov	r3, r2
 800b50c:	697a      	ldr	r2, [r7, #20]
 800b50e:	68b9      	ldr	r1, [r7, #8]
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f000 f805 	bl	800b520 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b516:	69bb      	ldr	r3, [r7, #24]
	}
 800b518:	4618      	mov	r0, r3
 800b51a:	3720      	adds	r7, #32
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	607a      	str	r2, [r7, #4]
 800b52c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d103      	bne.n	800b53c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	69ba      	ldr	r2, [r7, #24]
 800b538:	601a      	str	r2, [r3, #0]
 800b53a:	e002      	b.n	800b542 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b53c:	69bb      	ldr	r3, [r7, #24]
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b542:	69bb      	ldr	r3, [r7, #24]
 800b544:	68fa      	ldr	r2, [r7, #12]
 800b546:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b548:	69bb      	ldr	r3, [r7, #24]
 800b54a:	68ba      	ldr	r2, [r7, #8]
 800b54c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b54e:	2101      	movs	r1, #1
 800b550:	69b8      	ldr	r0, [r7, #24]
 800b552:	f7ff fecb 	bl	800b2ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b556:	bf00      	nop
 800b558:	3710      	adds	r7, #16
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b55e:	b580      	push	{r7, lr}
 800b560:	b082      	sub	sp, #8
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d00e      	beq.n	800b58a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b57e:	2300      	movs	r3, #0
 800b580:	2200      	movs	r2, #0
 800b582:	2100      	movs	r1, #0
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 f89d 	bl	800b6c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b58a:	bf00      	nop
 800b58c:	3708      	adds	r7, #8
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b592:	b580      	push	{r7, lr}
 800b594:	b086      	sub	sp, #24
 800b596:	af00      	add	r7, sp, #0
 800b598:	4603      	mov	r3, r0
 800b59a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b59c:	2301      	movs	r3, #1
 800b59e:	617b      	str	r3, [r7, #20]
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b5a4:	79fb      	ldrb	r3, [r7, #7]
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	6939      	ldr	r1, [r7, #16]
 800b5aa:	6978      	ldr	r0, [r7, #20]
 800b5ac:	f7ff ff79 	bl	800b4a2 <xQueueGenericCreate>
 800b5b0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f7ff ffd3 	bl	800b55e <prvInitialiseMutex>

		return xNewQueue;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
	}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3718      	adds	r7, #24
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b088      	sub	sp, #32
 800b5c6:	af02      	add	r7, sp, #8
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	6039      	str	r1, [r7, #0]
 800b5cc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	617b      	str	r3, [r7, #20]
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b5d6:	79fb      	ldrb	r3, [r7, #7]
 800b5d8:	9300      	str	r3, [sp, #0]
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	6939      	ldr	r1, [r7, #16]
 800b5e0:	6978      	ldr	r0, [r7, #20]
 800b5e2:	f7ff feeb 	bl	800b3bc <xQueueGenericCreateStatic>
 800b5e6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f7ff ffb8 	bl	800b55e <prvInitialiseMutex>

		return xNewQueue;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
	}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3718      	adds	r7, #24
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b08a      	sub	sp, #40	; 0x28
 800b5fc:	af02      	add	r7, sp, #8
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d109      	bne.n	800b61e <xQueueCreateCountingSemaphoreStatic+0x26>
 800b60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60e:	f383 8811 	msr	BASEPRI, r3
 800b612:	f3bf 8f6f 	isb	sy
 800b616:	f3bf 8f4f 	dsb	sy
 800b61a:	61bb      	str	r3, [r7, #24]
 800b61c:	e7fe      	b.n	800b61c <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b61e:	68ba      	ldr	r2, [r7, #8]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	429a      	cmp	r2, r3
 800b624:	d909      	bls.n	800b63a <xQueueCreateCountingSemaphoreStatic+0x42>
 800b626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62a:	f383 8811 	msr	BASEPRI, r3
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	f3bf 8f4f 	dsb	sy
 800b636:	617b      	str	r3, [r7, #20]
 800b638:	e7fe      	b.n	800b638 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b63a:	2302      	movs	r3, #2
 800b63c:	9300      	str	r3, [sp, #0]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	2100      	movs	r1, #0
 800b644:	68f8      	ldr	r0, [r7, #12]
 800b646:	f7ff feb9 	bl	800b3bc <xQueueGenericCreateStatic>
 800b64a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d002      	beq.n	800b658 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b652:	69fb      	ldr	r3, [r7, #28]
 800b654:	68ba      	ldr	r2, [r7, #8]
 800b656:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b658:	69fb      	ldr	r3, [r7, #28]
	}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3720      	adds	r7, #32
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b662:	b580      	push	{r7, lr}
 800b664:	b086      	sub	sp, #24
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d109      	bne.n	800b686 <xQueueCreateCountingSemaphore+0x24>
 800b672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b676:	f383 8811 	msr	BASEPRI, r3
 800b67a:	f3bf 8f6f 	isb	sy
 800b67e:	f3bf 8f4f 	dsb	sy
 800b682:	613b      	str	r3, [r7, #16]
 800b684:	e7fe      	b.n	800b684 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b686:	683a      	ldr	r2, [r7, #0]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d909      	bls.n	800b6a2 <xQueueCreateCountingSemaphore+0x40>
 800b68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b692:	f383 8811 	msr	BASEPRI, r3
 800b696:	f3bf 8f6f 	isb	sy
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	60fb      	str	r3, [r7, #12]
 800b6a0:	e7fe      	b.n	800b6a0 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b6a2:	2202      	movs	r2, #2
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f7ff fefb 	bl	800b4a2 <xQueueGenericCreate>
 800b6ac:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d002      	beq.n	800b6ba <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	683a      	ldr	r2, [r7, #0]
 800b6b8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b6ba:	697b      	ldr	r3, [r7, #20]
	}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3718      	adds	r7, #24
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b08e      	sub	sp, #56	; 0x38
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	60b9      	str	r1, [r7, #8]
 800b6ce:	607a      	str	r2, [r7, #4]
 800b6d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d109      	bne.n	800b6f4 <xQueueGenericSend+0x30>
 800b6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e4:	f383 8811 	msr	BASEPRI, r3
 800b6e8:	f3bf 8f6f 	isb	sy
 800b6ec:	f3bf 8f4f 	dsb	sy
 800b6f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6f2:	e7fe      	b.n	800b6f2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d103      	bne.n	800b702 <xQueueGenericSend+0x3e>
 800b6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d101      	bne.n	800b706 <xQueueGenericSend+0x42>
 800b702:	2301      	movs	r3, #1
 800b704:	e000      	b.n	800b708 <xQueueGenericSend+0x44>
 800b706:	2300      	movs	r3, #0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d109      	bne.n	800b720 <xQueueGenericSend+0x5c>
 800b70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b710:	f383 8811 	msr	BASEPRI, r3
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	f3bf 8f4f 	dsb	sy
 800b71c:	627b      	str	r3, [r7, #36]	; 0x24
 800b71e:	e7fe      	b.n	800b71e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	2b02      	cmp	r3, #2
 800b724:	d103      	bne.n	800b72e <xQueueGenericSend+0x6a>
 800b726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d101      	bne.n	800b732 <xQueueGenericSend+0x6e>
 800b72e:	2301      	movs	r3, #1
 800b730:	e000      	b.n	800b734 <xQueueGenericSend+0x70>
 800b732:	2300      	movs	r3, #0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d109      	bne.n	800b74c <xQueueGenericSend+0x88>
 800b738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73c:	f383 8811 	msr	BASEPRI, r3
 800b740:	f3bf 8f6f 	isb	sy
 800b744:	f3bf 8f4f 	dsb	sy
 800b748:	623b      	str	r3, [r7, #32]
 800b74a:	e7fe      	b.n	800b74a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b74c:	f001 fc52 	bl	800cff4 <xTaskGetSchedulerState>
 800b750:	4603      	mov	r3, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d102      	bne.n	800b75c <xQueueGenericSend+0x98>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d101      	bne.n	800b760 <xQueueGenericSend+0x9c>
 800b75c:	2301      	movs	r3, #1
 800b75e:	e000      	b.n	800b762 <xQueueGenericSend+0x9e>
 800b760:	2300      	movs	r3, #0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d109      	bne.n	800b77a <xQueueGenericSend+0xb6>
 800b766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76a:	f383 8811 	msr	BASEPRI, r3
 800b76e:	f3bf 8f6f 	isb	sy
 800b772:	f3bf 8f4f 	dsb	sy
 800b776:	61fb      	str	r3, [r7, #28]
 800b778:	e7fe      	b.n	800b778 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b77a:	f002 fac7 	bl	800dd0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b786:	429a      	cmp	r2, r3
 800b788:	d302      	bcc.n	800b790 <xQueueGenericSend+0xcc>
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	2b02      	cmp	r3, #2
 800b78e:	d129      	bne.n	800b7e4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b790:	683a      	ldr	r2, [r7, #0]
 800b792:	68b9      	ldr	r1, [r7, #8]
 800b794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b796:	f000 fc26 	bl	800bfe6 <prvCopyDataToQueue>
 800b79a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d010      	beq.n	800b7c6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a6:	3324      	adds	r3, #36	; 0x24
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f001 fa6b 	bl	800cc84 <xTaskRemoveFromEventList>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d013      	beq.n	800b7dc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b7b4:	4b3f      	ldr	r3, [pc, #252]	; (800b8b4 <xQueueGenericSend+0x1f0>)
 800b7b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7ba:	601a      	str	r2, [r3, #0]
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	f3bf 8f6f 	isb	sy
 800b7c4:	e00a      	b.n	800b7dc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d007      	beq.n	800b7dc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b7cc:	4b39      	ldr	r3, [pc, #228]	; (800b8b4 <xQueueGenericSend+0x1f0>)
 800b7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7d2:	601a      	str	r2, [r3, #0]
 800b7d4:	f3bf 8f4f 	dsb	sy
 800b7d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b7dc:	f002 fac4 	bl	800dd68 <vPortExitCritical>
				return pdPASS;
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	e063      	b.n	800b8ac <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d103      	bne.n	800b7f2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b7ea:	f002 fabd 	bl	800dd68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	e05c      	b.n	800b8ac <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b7f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d106      	bne.n	800b806 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b7f8:	f107 0314 	add.w	r3, r7, #20
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f001 faa3 	bl	800cd48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b802:	2301      	movs	r3, #1
 800b804:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b806:	f002 faaf 	bl	800dd68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b80a:	f001 f80f 	bl	800c82c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b80e:	f002 fa7d 	bl	800dd0c <vPortEnterCritical>
 800b812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b814:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b818:	b25b      	sxtb	r3, r3
 800b81a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b81e:	d103      	bne.n	800b828 <xQueueGenericSend+0x164>
 800b820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b822:	2200      	movs	r2, #0
 800b824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b82e:	b25b      	sxtb	r3, r3
 800b830:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b834:	d103      	bne.n	800b83e <xQueueGenericSend+0x17a>
 800b836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b838:	2200      	movs	r2, #0
 800b83a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b83e:	f002 fa93 	bl	800dd68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b842:	1d3a      	adds	r2, r7, #4
 800b844:	f107 0314 	add.w	r3, r7, #20
 800b848:	4611      	mov	r1, r2
 800b84a:	4618      	mov	r0, r3
 800b84c:	f001 fa92 	bl	800cd74 <xTaskCheckForTimeOut>
 800b850:	4603      	mov	r3, r0
 800b852:	2b00      	cmp	r3, #0
 800b854:	d124      	bne.n	800b8a0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b856:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b858:	f000 fcbd 	bl	800c1d6 <prvIsQueueFull>
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d018      	beq.n	800b894 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b864:	3310      	adds	r3, #16
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	4611      	mov	r1, r2
 800b86a:	4618      	mov	r0, r3
 800b86c:	f001 f9bc 	bl	800cbe8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b870:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b872:	f000 fc48 	bl	800c106 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b876:	f000 ffe7 	bl	800c848 <xTaskResumeAll>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f47f af7c 	bne.w	800b77a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800b882:	4b0c      	ldr	r3, [pc, #48]	; (800b8b4 <xQueueGenericSend+0x1f0>)
 800b884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b888:	601a      	str	r2, [r3, #0]
 800b88a:	f3bf 8f4f 	dsb	sy
 800b88e:	f3bf 8f6f 	isb	sy
 800b892:	e772      	b.n	800b77a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b894:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b896:	f000 fc36 	bl	800c106 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b89a:	f000 ffd5 	bl	800c848 <xTaskResumeAll>
 800b89e:	e76c      	b.n	800b77a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b8a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8a2:	f000 fc30 	bl	800c106 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b8a6:	f000 ffcf 	bl	800c848 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b8aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3738      	adds	r7, #56	; 0x38
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	e000ed04 	.word	0xe000ed04

0800b8b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b08e      	sub	sp, #56	; 0x38
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	607a      	str	r2, [r7, #4]
 800b8c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d109      	bne.n	800b8e4 <xQueueGenericSendFromISR+0x2c>
 800b8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d4:	f383 8811 	msr	BASEPRI, r3
 800b8d8:	f3bf 8f6f 	isb	sy
 800b8dc:	f3bf 8f4f 	dsb	sy
 800b8e0:	627b      	str	r3, [r7, #36]	; 0x24
 800b8e2:	e7fe      	b.n	800b8e2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d103      	bne.n	800b8f2 <xQueueGenericSendFromISR+0x3a>
 800b8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d101      	bne.n	800b8f6 <xQueueGenericSendFromISR+0x3e>
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e000      	b.n	800b8f8 <xQueueGenericSendFromISR+0x40>
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d109      	bne.n	800b910 <xQueueGenericSendFromISR+0x58>
 800b8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b900:	f383 8811 	msr	BASEPRI, r3
 800b904:	f3bf 8f6f 	isb	sy
 800b908:	f3bf 8f4f 	dsb	sy
 800b90c:	623b      	str	r3, [r7, #32]
 800b90e:	e7fe      	b.n	800b90e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	2b02      	cmp	r3, #2
 800b914:	d103      	bne.n	800b91e <xQueueGenericSendFromISR+0x66>
 800b916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	d101      	bne.n	800b922 <xQueueGenericSendFromISR+0x6a>
 800b91e:	2301      	movs	r3, #1
 800b920:	e000      	b.n	800b924 <xQueueGenericSendFromISR+0x6c>
 800b922:	2300      	movs	r3, #0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d109      	bne.n	800b93c <xQueueGenericSendFromISR+0x84>
 800b928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b92c:	f383 8811 	msr	BASEPRI, r3
 800b930:	f3bf 8f6f 	isb	sy
 800b934:	f3bf 8f4f 	dsb	sy
 800b938:	61fb      	str	r3, [r7, #28]
 800b93a:	e7fe      	b.n	800b93a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b93c:	f002 fac2 	bl	800dec4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b940:	f3ef 8211 	mrs	r2, BASEPRI
 800b944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b948:	f383 8811 	msr	BASEPRI, r3
 800b94c:	f3bf 8f6f 	isb	sy
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	61ba      	str	r2, [r7, #24]
 800b956:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b958:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b95a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b964:	429a      	cmp	r2, r3
 800b966:	d302      	bcc.n	800b96e <xQueueGenericSendFromISR+0xb6>
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	2b02      	cmp	r3, #2
 800b96c:	d12c      	bne.n	800b9c8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b970:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b978:	683a      	ldr	r2, [r7, #0]
 800b97a:	68b9      	ldr	r1, [r7, #8]
 800b97c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b97e:	f000 fb32 	bl	800bfe6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b982:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b98a:	d112      	bne.n	800b9b2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b990:	2b00      	cmp	r3, #0
 800b992:	d016      	beq.n	800b9c2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b996:	3324      	adds	r3, #36	; 0x24
 800b998:	4618      	mov	r0, r3
 800b99a:	f001 f973 	bl	800cc84 <xTaskRemoveFromEventList>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d00e      	beq.n	800b9c2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d00b      	beq.n	800b9c2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	601a      	str	r2, [r3, #0]
 800b9b0:	e007      	b.n	800b9c2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b9b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	b25a      	sxtb	r2, r3
 800b9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b9c6:	e001      	b.n	800b9cc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	637b      	str	r3, [r7, #52]	; 0x34
 800b9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ce:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b9d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3738      	adds	r7, #56	; 0x38
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b08e      	sub	sp, #56	; 0x38
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d109      	bne.n	800ba08 <xQueueGiveFromISR+0x28>
	__asm volatile
 800b9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f8:	f383 8811 	msr	BASEPRI, r3
 800b9fc:	f3bf 8f6f 	isb	sy
 800ba00:	f3bf 8f4f 	dsb	sy
 800ba04:	623b      	str	r3, [r7, #32]
 800ba06:	e7fe      	b.n	800ba06 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ba08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d009      	beq.n	800ba24 <xQueueGiveFromISR+0x44>
 800ba10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba14:	f383 8811 	msr	BASEPRI, r3
 800ba18:	f3bf 8f6f 	isb	sy
 800ba1c:	f3bf 8f4f 	dsb	sy
 800ba20:	61fb      	str	r3, [r7, #28]
 800ba22:	e7fe      	b.n	800ba22 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ba24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d103      	bne.n	800ba34 <xQueueGiveFromISR+0x54>
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d101      	bne.n	800ba38 <xQueueGiveFromISR+0x58>
 800ba34:	2301      	movs	r3, #1
 800ba36:	e000      	b.n	800ba3a <xQueueGiveFromISR+0x5a>
 800ba38:	2300      	movs	r3, #0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d109      	bne.n	800ba52 <xQueueGiveFromISR+0x72>
 800ba3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba42:	f383 8811 	msr	BASEPRI, r3
 800ba46:	f3bf 8f6f 	isb	sy
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	61bb      	str	r3, [r7, #24]
 800ba50:	e7fe      	b.n	800ba50 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba52:	f002 fa37 	bl	800dec4 <vPortValidateInterruptPriority>
	__asm volatile
 800ba56:	f3ef 8211 	mrs	r2, BASEPRI
 800ba5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5e:	f383 8811 	msr	BASEPRI, r3
 800ba62:	f3bf 8f6f 	isb	sy
 800ba66:	f3bf 8f4f 	dsb	sy
 800ba6a:	617a      	str	r2, [r7, #20]
 800ba6c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ba6e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba76:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ba78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d22b      	bcs.n	800bada <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ba82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ba8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8e:	1c5a      	adds	r2, r3, #1
 800ba90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba92:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba9c:	d112      	bne.n	800bac4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d016      	beq.n	800bad4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800baa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa8:	3324      	adds	r3, #36	; 0x24
 800baaa:	4618      	mov	r0, r3
 800baac:	f001 f8ea 	bl	800cc84 <xTaskRemoveFromEventList>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d00e      	beq.n	800bad4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d00b      	beq.n	800bad4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	2201      	movs	r2, #1
 800bac0:	601a      	str	r2, [r3, #0]
 800bac2:	e007      	b.n	800bad4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bac8:	3301      	adds	r3, #1
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	b25a      	sxtb	r2, r3
 800bace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bad4:	2301      	movs	r3, #1
 800bad6:	637b      	str	r3, [r7, #52]	; 0x34
 800bad8:	e001      	b.n	800bade <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bada:	2300      	movs	r3, #0
 800badc:	637b      	str	r3, [r7, #52]	; 0x34
 800bade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800baea:	4618      	mov	r0, r3
 800baec:	3738      	adds	r7, #56	; 0x38
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
	...

0800baf4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b08c      	sub	sp, #48	; 0x30
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bb00:	2300      	movs	r3, #0
 800bb02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d109      	bne.n	800bb22 <xQueueReceive+0x2e>
	__asm volatile
 800bb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb12:	f383 8811 	msr	BASEPRI, r3
 800bb16:	f3bf 8f6f 	isb	sy
 800bb1a:	f3bf 8f4f 	dsb	sy
 800bb1e:	623b      	str	r3, [r7, #32]
 800bb20:	e7fe      	b.n	800bb20 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d103      	bne.n	800bb30 <xQueueReceive+0x3c>
 800bb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d101      	bne.n	800bb34 <xQueueReceive+0x40>
 800bb30:	2301      	movs	r3, #1
 800bb32:	e000      	b.n	800bb36 <xQueueReceive+0x42>
 800bb34:	2300      	movs	r3, #0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d109      	bne.n	800bb4e <xQueueReceive+0x5a>
 800bb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3e:	f383 8811 	msr	BASEPRI, r3
 800bb42:	f3bf 8f6f 	isb	sy
 800bb46:	f3bf 8f4f 	dsb	sy
 800bb4a:	61fb      	str	r3, [r7, #28]
 800bb4c:	e7fe      	b.n	800bb4c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb4e:	f001 fa51 	bl	800cff4 <xTaskGetSchedulerState>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d102      	bne.n	800bb5e <xQueueReceive+0x6a>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d101      	bne.n	800bb62 <xQueueReceive+0x6e>
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e000      	b.n	800bb64 <xQueueReceive+0x70>
 800bb62:	2300      	movs	r3, #0
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d109      	bne.n	800bb7c <xQueueReceive+0x88>
 800bb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6c:	f383 8811 	msr	BASEPRI, r3
 800bb70:	f3bf 8f6f 	isb	sy
 800bb74:	f3bf 8f4f 	dsb	sy
 800bb78:	61bb      	str	r3, [r7, #24]
 800bb7a:	e7fe      	b.n	800bb7a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bb7c:	f002 f8c6 	bl	800dd0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb84:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d01f      	beq.n	800bbcc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bb8c:	68b9      	ldr	r1, [r7, #8]
 800bb8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb90:	f000 fa93 	bl	800c0ba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb96:	1e5a      	subs	r2, r3, #1
 800bb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9e:	691b      	ldr	r3, [r3, #16]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d00f      	beq.n	800bbc4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba6:	3310      	adds	r3, #16
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f001 f86b 	bl	800cc84 <xTaskRemoveFromEventList>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d007      	beq.n	800bbc4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bbb4:	4b3c      	ldr	r3, [pc, #240]	; (800bca8 <xQueueReceive+0x1b4>)
 800bbb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbba:	601a      	str	r2, [r3, #0]
 800bbbc:	f3bf 8f4f 	dsb	sy
 800bbc0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bbc4:	f002 f8d0 	bl	800dd68 <vPortExitCritical>
				return pdPASS;
 800bbc8:	2301      	movs	r3, #1
 800bbca:	e069      	b.n	800bca0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d103      	bne.n	800bbda <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bbd2:	f002 f8c9 	bl	800dd68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	e062      	b.n	800bca0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d106      	bne.n	800bbee <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bbe0:	f107 0310 	add.w	r3, r7, #16
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f001 f8af 	bl	800cd48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bbea:	2301      	movs	r3, #1
 800bbec:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bbee:	f002 f8bb 	bl	800dd68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bbf2:	f000 fe1b 	bl	800c82c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bbf6:	f002 f889 	bl	800dd0c <vPortEnterCritical>
 800bbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc00:	b25b      	sxtb	r3, r3
 800bc02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc06:	d103      	bne.n	800bc10 <xQueueReceive+0x11c>
 800bc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc16:	b25b      	sxtb	r3, r3
 800bc18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc1c:	d103      	bne.n	800bc26 <xQueueReceive+0x132>
 800bc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc20:	2200      	movs	r2, #0
 800bc22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc26:	f002 f89f 	bl	800dd68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc2a:	1d3a      	adds	r2, r7, #4
 800bc2c:	f107 0310 	add.w	r3, r7, #16
 800bc30:	4611      	mov	r1, r2
 800bc32:	4618      	mov	r0, r3
 800bc34:	f001 f89e 	bl	800cd74 <xTaskCheckForTimeOut>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d123      	bne.n	800bc86 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc40:	f000 fab3 	bl	800c1aa <prvIsQueueEmpty>
 800bc44:	4603      	mov	r3, r0
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d017      	beq.n	800bc7a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc4c:	3324      	adds	r3, #36	; 0x24
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	4611      	mov	r1, r2
 800bc52:	4618      	mov	r0, r3
 800bc54:	f000 ffc8 	bl	800cbe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bc58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc5a:	f000 fa54 	bl	800c106 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bc5e:	f000 fdf3 	bl	800c848 <xTaskResumeAll>
 800bc62:	4603      	mov	r3, r0
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d189      	bne.n	800bb7c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800bc68:	4b0f      	ldr	r3, [pc, #60]	; (800bca8 <xQueueReceive+0x1b4>)
 800bc6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc6e:	601a      	str	r2, [r3, #0]
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	f3bf 8f6f 	isb	sy
 800bc78:	e780      	b.n	800bb7c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bc7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc7c:	f000 fa43 	bl	800c106 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc80:	f000 fde2 	bl	800c848 <xTaskResumeAll>
 800bc84:	e77a      	b.n	800bb7c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bc86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc88:	f000 fa3d 	bl	800c106 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc8c:	f000 fddc 	bl	800c848 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc92:	f000 fa8a 	bl	800c1aa <prvIsQueueEmpty>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	f43f af6f 	beq.w	800bb7c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bc9e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3730      	adds	r7, #48	; 0x30
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	e000ed04 	.word	0xe000ed04

0800bcac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b08e      	sub	sp, #56	; 0x38
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d109      	bne.n	800bcdc <xQueueSemaphoreTake+0x30>
 800bcc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bccc:	f383 8811 	msr	BASEPRI, r3
 800bcd0:	f3bf 8f6f 	isb	sy
 800bcd4:	f3bf 8f4f 	dsb	sy
 800bcd8:	623b      	str	r3, [r7, #32]
 800bcda:	e7fe      	b.n	800bcda <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bcdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d009      	beq.n	800bcf8 <xQueueSemaphoreTake+0x4c>
 800bce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce8:	f383 8811 	msr	BASEPRI, r3
 800bcec:	f3bf 8f6f 	isb	sy
 800bcf0:	f3bf 8f4f 	dsb	sy
 800bcf4:	61fb      	str	r3, [r7, #28]
 800bcf6:	e7fe      	b.n	800bcf6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bcf8:	f001 f97c 	bl	800cff4 <xTaskGetSchedulerState>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d102      	bne.n	800bd08 <xQueueSemaphoreTake+0x5c>
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d101      	bne.n	800bd0c <xQueueSemaphoreTake+0x60>
 800bd08:	2301      	movs	r3, #1
 800bd0a:	e000      	b.n	800bd0e <xQueueSemaphoreTake+0x62>
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d109      	bne.n	800bd26 <xQueueSemaphoreTake+0x7a>
 800bd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd16:	f383 8811 	msr	BASEPRI, r3
 800bd1a:	f3bf 8f6f 	isb	sy
 800bd1e:	f3bf 8f4f 	dsb	sy
 800bd22:	61bb      	str	r3, [r7, #24]
 800bd24:	e7fe      	b.n	800bd24 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd26:	f001 fff1 	bl	800dd0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd2e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d024      	beq.n	800bd80 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd38:	1e5a      	subs	r2, r3, #1
 800bd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d104      	bne.n	800bd50 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bd46:	f001 fb0f 	bl	800d368 <pvTaskIncrementMutexHeldCount>
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd4e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd52:	691b      	ldr	r3, [r3, #16]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d00f      	beq.n	800bd78 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd5a:	3310      	adds	r3, #16
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f000 ff91 	bl	800cc84 <xTaskRemoveFromEventList>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d007      	beq.n	800bd78 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bd68:	4b53      	ldr	r3, [pc, #332]	; (800beb8 <xQueueSemaphoreTake+0x20c>)
 800bd6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd6e:	601a      	str	r2, [r3, #0]
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bd78:	f001 fff6 	bl	800dd68 <vPortExitCritical>
				return pdPASS;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e096      	b.n	800beae <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d110      	bne.n	800bda8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d009      	beq.n	800bda0 <xQueueSemaphoreTake+0xf4>
 800bd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd90:	f383 8811 	msr	BASEPRI, r3
 800bd94:	f3bf 8f6f 	isb	sy
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	617b      	str	r3, [r7, #20]
 800bd9e:	e7fe      	b.n	800bd9e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bda0:	f001 ffe2 	bl	800dd68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bda4:	2300      	movs	r3, #0
 800bda6:	e082      	b.n	800beae <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bda8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d106      	bne.n	800bdbc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bdae:	f107 030c 	add.w	r3, r7, #12
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f000 ffc8 	bl	800cd48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bdbc:	f001 ffd4 	bl	800dd68 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bdc0:	f000 fd34 	bl	800c82c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bdc4:	f001 ffa2 	bl	800dd0c <vPortEnterCritical>
 800bdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdce:	b25b      	sxtb	r3, r3
 800bdd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd4:	d103      	bne.n	800bdde <xQueueSemaphoreTake+0x132>
 800bdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bde4:	b25b      	sxtb	r3, r3
 800bde6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdea:	d103      	bne.n	800bdf4 <xQueueSemaphoreTake+0x148>
 800bdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdf4:	f001 ffb8 	bl	800dd68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bdf8:	463a      	mov	r2, r7
 800bdfa:	f107 030c 	add.w	r3, r7, #12
 800bdfe:	4611      	mov	r1, r2
 800be00:	4618      	mov	r0, r3
 800be02:	f000 ffb7 	bl	800cd74 <xTaskCheckForTimeOut>
 800be06:	4603      	mov	r3, r0
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d132      	bne.n	800be72 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be0e:	f000 f9cc 	bl	800c1aa <prvIsQueueEmpty>
 800be12:	4603      	mov	r3, r0
 800be14:	2b00      	cmp	r3, #0
 800be16:	d026      	beq.n	800be66 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d109      	bne.n	800be34 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800be20:	f001 ff74 	bl	800dd0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be26:	689b      	ldr	r3, [r3, #8]
 800be28:	4618      	mov	r0, r3
 800be2a:	f001 f901 	bl	800d030 <xTaskPriorityInherit>
 800be2e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800be30:	f001 ff9a 	bl	800dd68 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be36:	3324      	adds	r3, #36	; 0x24
 800be38:	683a      	ldr	r2, [r7, #0]
 800be3a:	4611      	mov	r1, r2
 800be3c:	4618      	mov	r0, r3
 800be3e:	f000 fed3 	bl	800cbe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be44:	f000 f95f 	bl	800c106 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be48:	f000 fcfe 	bl	800c848 <xTaskResumeAll>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	f47f af69 	bne.w	800bd26 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800be54:	4b18      	ldr	r3, [pc, #96]	; (800beb8 <xQueueSemaphoreTake+0x20c>)
 800be56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be5a:	601a      	str	r2, [r3, #0]
 800be5c:	f3bf 8f4f 	dsb	sy
 800be60:	f3bf 8f6f 	isb	sy
 800be64:	e75f      	b.n	800bd26 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800be66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be68:	f000 f94d 	bl	800c106 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be6c:	f000 fcec 	bl	800c848 <xTaskResumeAll>
 800be70:	e759      	b.n	800bd26 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800be72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be74:	f000 f947 	bl	800c106 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be78:	f000 fce6 	bl	800c848 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be7e:	f000 f994 	bl	800c1aa <prvIsQueueEmpty>
 800be82:	4603      	mov	r3, r0
 800be84:	2b00      	cmp	r3, #0
 800be86:	f43f af4e 	beq.w	800bd26 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800be8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d00d      	beq.n	800beac <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800be90:	f001 ff3c 	bl	800dd0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800be94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be96:	f000 f88e 	bl	800bfb6 <prvGetDisinheritPriorityAfterTimeout>
 800be9a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800be9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bea2:	4618      	mov	r0, r3
 800bea4:	f001 f9c8 	bl	800d238 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bea8:	f001 ff5e 	bl	800dd68 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800beac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3738      	adds	r7, #56	; 0x38
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	e000ed04 	.word	0xe000ed04

0800bebc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b08e      	sub	sp, #56	; 0x38
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800becc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d109      	bne.n	800bee6 <xQueueReceiveFromISR+0x2a>
 800bed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed6:	f383 8811 	msr	BASEPRI, r3
 800beda:	f3bf 8f6f 	isb	sy
 800bede:	f3bf 8f4f 	dsb	sy
 800bee2:	623b      	str	r3, [r7, #32]
 800bee4:	e7fe      	b.n	800bee4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d103      	bne.n	800bef4 <xQueueReceiveFromISR+0x38>
 800beec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d101      	bne.n	800bef8 <xQueueReceiveFromISR+0x3c>
 800bef4:	2301      	movs	r3, #1
 800bef6:	e000      	b.n	800befa <xQueueReceiveFromISR+0x3e>
 800bef8:	2300      	movs	r3, #0
 800befa:	2b00      	cmp	r3, #0
 800befc:	d109      	bne.n	800bf12 <xQueueReceiveFromISR+0x56>
 800befe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf02:	f383 8811 	msr	BASEPRI, r3
 800bf06:	f3bf 8f6f 	isb	sy
 800bf0a:	f3bf 8f4f 	dsb	sy
 800bf0e:	61fb      	str	r3, [r7, #28]
 800bf10:	e7fe      	b.n	800bf10 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf12:	f001 ffd7 	bl	800dec4 <vPortValidateInterruptPriority>
	__asm volatile
 800bf16:	f3ef 8211 	mrs	r2, BASEPRI
 800bf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1e:	f383 8811 	msr	BASEPRI, r3
 800bf22:	f3bf 8f6f 	isb	sy
 800bf26:	f3bf 8f4f 	dsb	sy
 800bf2a:	61ba      	str	r2, [r7, #24]
 800bf2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bf2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d02f      	beq.n	800bf9e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf48:	68b9      	ldr	r1, [r7, #8]
 800bf4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf4c:	f000 f8b5 	bl	800c0ba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf52:	1e5a      	subs	r2, r3, #1
 800bf54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bf58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bf5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf60:	d112      	bne.n	800bf88 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf64:	691b      	ldr	r3, [r3, #16]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d016      	beq.n	800bf98 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6c:	3310      	adds	r3, #16
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f000 fe88 	bl	800cc84 <xTaskRemoveFromEventList>
 800bf74:	4603      	mov	r3, r0
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d00e      	beq.n	800bf98 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d00b      	beq.n	800bf98 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2201      	movs	r2, #1
 800bf84:	601a      	str	r2, [r3, #0]
 800bf86:	e007      	b.n	800bf98 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bf88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	b25a      	sxtb	r2, r3
 800bf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bf98:	2301      	movs	r3, #1
 800bf9a:	637b      	str	r3, [r7, #52]	; 0x34
 800bf9c:	e001      	b.n	800bfa2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	637b      	str	r3, [r7, #52]	; 0x34
 800bfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bfac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3738      	adds	r7, #56	; 0x38
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bfb6:	b480      	push	{r7}
 800bfb8:	b085      	sub	sp, #20
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d006      	beq.n	800bfd4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f1c3 0307 	rsb	r3, r3, #7
 800bfd0:	60fb      	str	r3, [r7, #12]
 800bfd2:	e001      	b.n	800bfd8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
	}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3714      	adds	r7, #20
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr

0800bfe6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b086      	sub	sp, #24
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	60f8      	str	r0, [r7, #12]
 800bfee:	60b9      	str	r1, [r7, #8]
 800bff0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bff2:	2300      	movs	r3, #0
 800bff4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bffa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10d      	bne.n	800c020 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d14d      	bne.n	800c0a8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	4618      	mov	r0, r3
 800c012:	f001 f88d 	bl	800d130 <xTaskPriorityDisinherit>
 800c016:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2200      	movs	r2, #0
 800c01c:	609a      	str	r2, [r3, #8]
 800c01e:	e043      	b.n	800c0a8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d119      	bne.n	800c05a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	6858      	ldr	r0, [r3, #4]
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c02e:	461a      	mov	r2, r3
 800c030:	68b9      	ldr	r1, [r7, #8]
 800c032:	f00b f9ea 	bl	801740a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	685a      	ldr	r2, [r3, #4]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c03e:	441a      	add	r2, r3
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	685a      	ldr	r2, [r3, #4]
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d32b      	bcc.n	800c0a8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	605a      	str	r2, [r3, #4]
 800c058:	e026      	b.n	800c0a8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	68d8      	ldr	r0, [r3, #12]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c062:	461a      	mov	r2, r3
 800c064:	68b9      	ldr	r1, [r7, #8]
 800c066:	f00b f9d0 	bl	801740a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	68da      	ldr	r2, [r3, #12]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c072:	425b      	negs	r3, r3
 800c074:	441a      	add	r2, r3
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	68da      	ldr	r2, [r3, #12]
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	429a      	cmp	r2, r3
 800c084:	d207      	bcs.n	800c096 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	689a      	ldr	r2, [r3, #8]
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c08e:	425b      	negs	r3, r3
 800c090:	441a      	add	r2, r3
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2b02      	cmp	r3, #2
 800c09a:	d105      	bne.n	800c0a8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d002      	beq.n	800c0a8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	3b01      	subs	r3, #1
 800c0a6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	1c5a      	adds	r2, r3, #1
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c0b0:	697b      	ldr	r3, [r7, #20]
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3718      	adds	r7, #24
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b082      	sub	sp, #8
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
 800c0c2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d018      	beq.n	800c0fe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	68da      	ldr	r2, [r3, #12]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0d4:	441a      	add	r2, r3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	68da      	ldr	r2, [r3, #12]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d303      	bcc.n	800c0ee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681a      	ldr	r2, [r3, #0]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	68d9      	ldr	r1, [r3, #12]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	6838      	ldr	r0, [r7, #0]
 800c0fa:	f00b f986 	bl	801740a <memcpy>
	}
}
 800c0fe:	bf00      	nop
 800c100:	3708      	adds	r7, #8
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c106:	b580      	push	{r7, lr}
 800c108:	b084      	sub	sp, #16
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c10e:	f001 fdfd 	bl	800dd0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c118:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c11a:	e011      	b.n	800c140 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c120:	2b00      	cmp	r3, #0
 800c122:	d012      	beq.n	800c14a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	3324      	adds	r3, #36	; 0x24
 800c128:	4618      	mov	r0, r3
 800c12a:	f000 fdab 	bl	800cc84 <xTaskRemoveFromEventList>
 800c12e:	4603      	mov	r3, r0
 800c130:	2b00      	cmp	r3, #0
 800c132:	d001      	beq.n	800c138 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c134:	f000 fe7e 	bl	800ce34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c138:	7bfb      	ldrb	r3, [r7, #15]
 800c13a:	3b01      	subs	r3, #1
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c144:	2b00      	cmp	r3, #0
 800c146:	dce9      	bgt.n	800c11c <prvUnlockQueue+0x16>
 800c148:	e000      	b.n	800c14c <prvUnlockQueue+0x46>
					break;
 800c14a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	22ff      	movs	r2, #255	; 0xff
 800c150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c154:	f001 fe08 	bl	800dd68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c158:	f001 fdd8 	bl	800dd0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c162:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c164:	e011      	b.n	800c18a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d012      	beq.n	800c194 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	3310      	adds	r3, #16
 800c172:	4618      	mov	r0, r3
 800c174:	f000 fd86 	bl	800cc84 <xTaskRemoveFromEventList>
 800c178:	4603      	mov	r3, r0
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d001      	beq.n	800c182 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c17e:	f000 fe59 	bl	800ce34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c182:	7bbb      	ldrb	r3, [r7, #14]
 800c184:	3b01      	subs	r3, #1
 800c186:	b2db      	uxtb	r3, r3
 800c188:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c18a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	dce9      	bgt.n	800c166 <prvUnlockQueue+0x60>
 800c192:	e000      	b.n	800c196 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c194:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	22ff      	movs	r2, #255	; 0xff
 800c19a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c19e:	f001 fde3 	bl	800dd68 <vPortExitCritical>
}
 800c1a2:	bf00      	nop
 800c1a4:	3710      	adds	r7, #16
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}

0800c1aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c1aa:	b580      	push	{r7, lr}
 800c1ac:	b084      	sub	sp, #16
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c1b2:	f001 fdab 	bl	800dd0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d102      	bne.n	800c1c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	60fb      	str	r3, [r7, #12]
 800c1c2:	e001      	b.n	800c1c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c1c8:	f001 fdce 	bl	800dd68 <vPortExitCritical>

	return xReturn;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}

0800c1d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c1d6:	b580      	push	{r7, lr}
 800c1d8:	b084      	sub	sp, #16
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c1de:	f001 fd95 	bl	800dd0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d102      	bne.n	800c1f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	60fb      	str	r3, [r7, #12]
 800c1f2:	e001      	b.n	800c1f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c1f8:	f001 fdb6 	bl	800dd68 <vPortExitCritical>

	return xReturn;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3710      	adds	r7, #16
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
	...

0800c208 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c208:	b480      	push	{r7}
 800c20a:	b085      	sub	sp, #20
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c212:	2300      	movs	r3, #0
 800c214:	60fb      	str	r3, [r7, #12]
 800c216:	e014      	b.n	800c242 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c218:	4a0e      	ldr	r2, [pc, #56]	; (800c254 <vQueueAddToRegistry+0x4c>)
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d10b      	bne.n	800c23c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c224:	490b      	ldr	r1, [pc, #44]	; (800c254 <vQueueAddToRegistry+0x4c>)
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	683a      	ldr	r2, [r7, #0]
 800c22a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c22e:	4a09      	ldr	r2, [pc, #36]	; (800c254 <vQueueAddToRegistry+0x4c>)
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	00db      	lsls	r3, r3, #3
 800c234:	4413      	add	r3, r2
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c23a:	e005      	b.n	800c248 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	3301      	adds	r3, #1
 800c240:	60fb      	str	r3, [r7, #12]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2b07      	cmp	r3, #7
 800c246:	d9e7      	bls.n	800c218 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c248:	bf00      	nop
 800c24a:	3714      	adds	r7, #20
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr
 800c254:	2400a7f0 	.word	0x2400a7f0

0800c258 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b086      	sub	sp, #24
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c268:	f001 fd50 	bl	800dd0c <vPortEnterCritical>
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c272:	b25b      	sxtb	r3, r3
 800c274:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c278:	d103      	bne.n	800c282 <vQueueWaitForMessageRestricted+0x2a>
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	2200      	movs	r2, #0
 800c27e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c288:	b25b      	sxtb	r3, r3
 800c28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c28e:	d103      	bne.n	800c298 <vQueueWaitForMessageRestricted+0x40>
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	2200      	movs	r2, #0
 800c294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c298:	f001 fd66 	bl	800dd68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d106      	bne.n	800c2b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	3324      	adds	r3, #36	; 0x24
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	68b9      	ldr	r1, [r7, #8]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f000 fcbf 	bl	800cc30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c2b2:	6978      	ldr	r0, [r7, #20]
 800c2b4:	f7ff ff27 	bl	800c106 <prvUnlockQueue>
	}
 800c2b8:	bf00      	nop
 800c2ba:	3718      	adds	r7, #24
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b08e      	sub	sp, #56	; 0x38
 800c2c4:	af04      	add	r7, sp, #16
 800c2c6:	60f8      	str	r0, [r7, #12]
 800c2c8:	60b9      	str	r1, [r7, #8]
 800c2ca:	607a      	str	r2, [r7, #4]
 800c2cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c2ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d109      	bne.n	800c2e8 <xTaskCreateStatic+0x28>
	__asm volatile
 800c2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d8:	f383 8811 	msr	BASEPRI, r3
 800c2dc:	f3bf 8f6f 	isb	sy
 800c2e0:	f3bf 8f4f 	dsb	sy
 800c2e4:	623b      	str	r3, [r7, #32]
 800c2e6:	e7fe      	b.n	800c2e6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800c2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d109      	bne.n	800c302 <xTaskCreateStatic+0x42>
 800c2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f2:	f383 8811 	msr	BASEPRI, r3
 800c2f6:	f3bf 8f6f 	isb	sy
 800c2fa:	f3bf 8f4f 	dsb	sy
 800c2fe:	61fb      	str	r3, [r7, #28]
 800c300:	e7fe      	b.n	800c300 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c302:	2354      	movs	r3, #84	; 0x54
 800c304:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	2b54      	cmp	r3, #84	; 0x54
 800c30a:	d009      	beq.n	800c320 <xTaskCreateStatic+0x60>
 800c30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c310:	f383 8811 	msr	BASEPRI, r3
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	f3bf 8f4f 	dsb	sy
 800c31c:	61bb      	str	r3, [r7, #24]
 800c31e:	e7fe      	b.n	800c31e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c320:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c324:	2b00      	cmp	r3, #0
 800c326:	d01e      	beq.n	800c366 <xTaskCreateStatic+0xa6>
 800c328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d01b      	beq.n	800c366 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c330:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c334:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c336:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33a:	2202      	movs	r2, #2
 800c33c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c340:	2300      	movs	r3, #0
 800c342:	9303      	str	r3, [sp, #12]
 800c344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c346:	9302      	str	r3, [sp, #8]
 800c348:	f107 0314 	add.w	r3, r7, #20
 800c34c:	9301      	str	r3, [sp, #4]
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	9300      	str	r3, [sp, #0]
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	68b9      	ldr	r1, [r7, #8]
 800c358:	68f8      	ldr	r0, [r7, #12]
 800c35a:	f000 f850 	bl	800c3fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c35e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c360:	f000 f8d4 	bl	800c50c <prvAddNewTaskToReadyList>
 800c364:	e001      	b.n	800c36a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800c366:	2300      	movs	r3, #0
 800c368:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c36a:	697b      	ldr	r3, [r7, #20]
	}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3728      	adds	r7, #40	; 0x28
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c374:	b580      	push	{r7, lr}
 800c376:	b08c      	sub	sp, #48	; 0x30
 800c378:	af04      	add	r7, sp, #16
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	603b      	str	r3, [r7, #0]
 800c380:	4613      	mov	r3, r2
 800c382:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c384:	88fb      	ldrh	r3, [r7, #6]
 800c386:	009b      	lsls	r3, r3, #2
 800c388:	4618      	mov	r0, r3
 800c38a:	f001 fdd9 	bl	800df40 <pvPortMalloc>
 800c38e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d00e      	beq.n	800c3b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c396:	2054      	movs	r0, #84	; 0x54
 800c398:	f001 fdd2 	bl	800df40 <pvPortMalloc>
 800c39c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c39e:	69fb      	ldr	r3, [r7, #28]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d003      	beq.n	800c3ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c3a4:	69fb      	ldr	r3, [r7, #28]
 800c3a6:	697a      	ldr	r2, [r7, #20]
 800c3a8:	631a      	str	r2, [r3, #48]	; 0x30
 800c3aa:	e005      	b.n	800c3b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c3ac:	6978      	ldr	r0, [r7, #20]
 800c3ae:	f001 fe89 	bl	800e0c4 <vPortFree>
 800c3b2:	e001      	b.n	800c3b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c3b8:	69fb      	ldr	r3, [r7, #28]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d017      	beq.n	800c3ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c3be:	69fb      	ldr	r3, [r7, #28]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c3c6:	88fa      	ldrh	r2, [r7, #6]
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	9303      	str	r3, [sp, #12]
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	9302      	str	r3, [sp, #8]
 800c3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d2:	9301      	str	r3, [sp, #4]
 800c3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d6:	9300      	str	r3, [sp, #0]
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	68b9      	ldr	r1, [r7, #8]
 800c3dc:	68f8      	ldr	r0, [r7, #12]
 800c3de:	f000 f80e 	bl	800c3fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c3e2:	69f8      	ldr	r0, [r7, #28]
 800c3e4:	f000 f892 	bl	800c50c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	61bb      	str	r3, [r7, #24]
 800c3ec:	e002      	b.n	800c3f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c3ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c3f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c3f4:	69bb      	ldr	r3, [r7, #24]
	}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3720      	adds	r7, #32
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b088      	sub	sp, #32
 800c402:	af00      	add	r7, sp, #0
 800c404:	60f8      	str	r0, [r7, #12]
 800c406:	60b9      	str	r1, [r7, #8]
 800c408:	607a      	str	r2, [r7, #4]
 800c40a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c410:	6879      	ldr	r1, [r7, #4]
 800c412:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c416:	440b      	add	r3, r1
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	4413      	add	r3, r2
 800c41c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c41e:	69bb      	ldr	r3, [r7, #24]
 800c420:	f023 0307 	bic.w	r3, r3, #7
 800c424:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c426:	69bb      	ldr	r3, [r7, #24]
 800c428:	f003 0307 	and.w	r3, r3, #7
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d009      	beq.n	800c444 <prvInitialiseNewTask+0x46>
 800c430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c434:	f383 8811 	msr	BASEPRI, r3
 800c438:	f3bf 8f6f 	isb	sy
 800c43c:	f3bf 8f4f 	dsb	sy
 800c440:	617b      	str	r3, [r7, #20]
 800c442:	e7fe      	b.n	800c442 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d01f      	beq.n	800c48a <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c44a:	2300      	movs	r3, #0
 800c44c:	61fb      	str	r3, [r7, #28]
 800c44e:	e012      	b.n	800c476 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c450:	68ba      	ldr	r2, [r7, #8]
 800c452:	69fb      	ldr	r3, [r7, #28]
 800c454:	4413      	add	r3, r2
 800c456:	7819      	ldrb	r1, [r3, #0]
 800c458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c45a:	69fb      	ldr	r3, [r7, #28]
 800c45c:	4413      	add	r3, r2
 800c45e:	3334      	adds	r3, #52	; 0x34
 800c460:	460a      	mov	r2, r1
 800c462:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c464:	68ba      	ldr	r2, [r7, #8]
 800c466:	69fb      	ldr	r3, [r7, #28]
 800c468:	4413      	add	r3, r2
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d006      	beq.n	800c47e <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	3301      	adds	r3, #1
 800c474:	61fb      	str	r3, [r7, #28]
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	2b0f      	cmp	r3, #15
 800c47a:	d9e9      	bls.n	800c450 <prvInitialiseNewTask+0x52>
 800c47c:	e000      	b.n	800c480 <prvInitialiseNewTask+0x82>
			{
				break;
 800c47e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c482:	2200      	movs	r2, #0
 800c484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c488:	e003      	b.n	800c492 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c48c:	2200      	movs	r2, #0
 800c48e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c494:	2b06      	cmp	r3, #6
 800c496:	d901      	bls.n	800c49c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c498:	2306      	movs	r3, #6
 800c49a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c49e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4a6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b0:	3304      	adds	r3, #4
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7fe fe86 	bl	800b1c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ba:	3318      	adds	r3, #24
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f7fe fe81 	bl	800b1c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ca:	f1c3 0207 	rsb	r2, r3, #7
 800c4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4da:	2200      	movs	r2, #0
 800c4dc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c4e6:	683a      	ldr	r2, [r7, #0]
 800c4e8:	68f9      	ldr	r1, [r7, #12]
 800c4ea:	69b8      	ldr	r0, [r7, #24]
 800c4ec:	f001 fae4 	bl	800dab8 <pxPortInitialiseStack>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d002      	beq.n	800c502 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c500:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c502:	bf00      	nop
 800c504:	3720      	adds	r7, #32
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
	...

0800c50c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c514:	f001 fbfa 	bl	800dd0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c518:	4b2a      	ldr	r3, [pc, #168]	; (800c5c4 <prvAddNewTaskToReadyList+0xb8>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	3301      	adds	r3, #1
 800c51e:	4a29      	ldr	r2, [pc, #164]	; (800c5c4 <prvAddNewTaskToReadyList+0xb8>)
 800c520:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c522:	4b29      	ldr	r3, [pc, #164]	; (800c5c8 <prvAddNewTaskToReadyList+0xbc>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d109      	bne.n	800c53e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c52a:	4a27      	ldr	r2, [pc, #156]	; (800c5c8 <prvAddNewTaskToReadyList+0xbc>)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c530:	4b24      	ldr	r3, [pc, #144]	; (800c5c4 <prvAddNewTaskToReadyList+0xb8>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	2b01      	cmp	r3, #1
 800c536:	d110      	bne.n	800c55a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c538:	f000 fca2 	bl	800ce80 <prvInitialiseTaskLists>
 800c53c:	e00d      	b.n	800c55a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c53e:	4b23      	ldr	r3, [pc, #140]	; (800c5cc <prvAddNewTaskToReadyList+0xc0>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d109      	bne.n	800c55a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c546:	4b20      	ldr	r3, [pc, #128]	; (800c5c8 <prvAddNewTaskToReadyList+0xbc>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c550:	429a      	cmp	r2, r3
 800c552:	d802      	bhi.n	800c55a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c554:	4a1c      	ldr	r2, [pc, #112]	; (800c5c8 <prvAddNewTaskToReadyList+0xbc>)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c55a:	4b1d      	ldr	r3, [pc, #116]	; (800c5d0 <prvAddNewTaskToReadyList+0xc4>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	3301      	adds	r3, #1
 800c560:	4a1b      	ldr	r2, [pc, #108]	; (800c5d0 <prvAddNewTaskToReadyList+0xc4>)
 800c562:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c568:	2201      	movs	r2, #1
 800c56a:	409a      	lsls	r2, r3
 800c56c:	4b19      	ldr	r3, [pc, #100]	; (800c5d4 <prvAddNewTaskToReadyList+0xc8>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4313      	orrs	r3, r2
 800c572:	4a18      	ldr	r2, [pc, #96]	; (800c5d4 <prvAddNewTaskToReadyList+0xc8>)
 800c574:	6013      	str	r3, [r2, #0]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c57a:	4613      	mov	r3, r2
 800c57c:	009b      	lsls	r3, r3, #2
 800c57e:	4413      	add	r3, r2
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	4a15      	ldr	r2, [pc, #84]	; (800c5d8 <prvAddNewTaskToReadyList+0xcc>)
 800c584:	441a      	add	r2, r3
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	3304      	adds	r3, #4
 800c58a:	4619      	mov	r1, r3
 800c58c:	4610      	mov	r0, r2
 800c58e:	f7fe fe26 	bl	800b1de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c592:	f001 fbe9 	bl	800dd68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c596:	4b0d      	ldr	r3, [pc, #52]	; (800c5cc <prvAddNewTaskToReadyList+0xc0>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00e      	beq.n	800c5bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c59e:	4b0a      	ldr	r3, [pc, #40]	; (800c5c8 <prvAddNewTaskToReadyList+0xbc>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d207      	bcs.n	800c5bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c5ac:	4b0b      	ldr	r3, [pc, #44]	; (800c5dc <prvAddNewTaskToReadyList+0xd0>)
 800c5ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5b2:	601a      	str	r2, [r3, #0]
 800c5b4:	f3bf 8f4f 	dsb	sy
 800c5b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5bc:	bf00      	nop
 800c5be:	3708      	adds	r7, #8
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	24002260 	.word	0x24002260
 800c5c8:	24002160 	.word	0x24002160
 800c5cc:	2400226c 	.word	0x2400226c
 800c5d0:	2400227c 	.word	0x2400227c
 800c5d4:	24002268 	.word	0x24002268
 800c5d8:	24002164 	.word	0x24002164
 800c5dc:	e000ed04 	.word	0xe000ed04

0800c5e0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b084      	sub	sp, #16
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c5e8:	f001 fb90 	bl	800dd0c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d102      	bne.n	800c5f8 <vTaskDelete+0x18>
 800c5f2:	4b38      	ldr	r3, [pc, #224]	; (800c6d4 <vTaskDelete+0xf4>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	e000      	b.n	800c5fa <vTaskDelete+0x1a>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	3304      	adds	r3, #4
 800c600:	4618      	mov	r0, r3
 800c602:	f7fe fe49 	bl	800b298 <uxListRemove>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d115      	bne.n	800c638 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c610:	4931      	ldr	r1, [pc, #196]	; (800c6d8 <vTaskDelete+0xf8>)
 800c612:	4613      	mov	r3, r2
 800c614:	009b      	lsls	r3, r3, #2
 800c616:	4413      	add	r3, r2
 800c618:	009b      	lsls	r3, r3, #2
 800c61a:	440b      	add	r3, r1
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d10a      	bne.n	800c638 <vTaskDelete+0x58>
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c626:	2201      	movs	r2, #1
 800c628:	fa02 f303 	lsl.w	r3, r2, r3
 800c62c:	43da      	mvns	r2, r3
 800c62e:	4b2b      	ldr	r3, [pc, #172]	; (800c6dc <vTaskDelete+0xfc>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	4013      	ands	r3, r2
 800c634:	4a29      	ldr	r2, [pc, #164]	; (800c6dc <vTaskDelete+0xfc>)
 800c636:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d004      	beq.n	800c64a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	3318      	adds	r3, #24
 800c644:	4618      	mov	r0, r3
 800c646:	f7fe fe27 	bl	800b298 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c64a:	4b25      	ldr	r3, [pc, #148]	; (800c6e0 <vTaskDelete+0x100>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	3301      	adds	r3, #1
 800c650:	4a23      	ldr	r2, [pc, #140]	; (800c6e0 <vTaskDelete+0x100>)
 800c652:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c654:	4b1f      	ldr	r3, [pc, #124]	; (800c6d4 <vTaskDelete+0xf4>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	68fa      	ldr	r2, [r7, #12]
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d10b      	bne.n	800c676 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	3304      	adds	r3, #4
 800c662:	4619      	mov	r1, r3
 800c664:	481f      	ldr	r0, [pc, #124]	; (800c6e4 <vTaskDelete+0x104>)
 800c666:	f7fe fdba 	bl	800b1de <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c66a:	4b1f      	ldr	r3, [pc, #124]	; (800c6e8 <vTaskDelete+0x108>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	3301      	adds	r3, #1
 800c670:	4a1d      	ldr	r2, [pc, #116]	; (800c6e8 <vTaskDelete+0x108>)
 800c672:	6013      	str	r3, [r2, #0]
 800c674:	e009      	b.n	800c68a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c676:	4b1d      	ldr	r3, [pc, #116]	; (800c6ec <vTaskDelete+0x10c>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	3b01      	subs	r3, #1
 800c67c:	4a1b      	ldr	r2, [pc, #108]	; (800c6ec <vTaskDelete+0x10c>)
 800c67e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	f000 fc69 	bl	800cf58 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c686:	f000 fc95 	bl	800cfb4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800c68a:	f001 fb6d 	bl	800dd68 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c68e:	4b18      	ldr	r3, [pc, #96]	; (800c6f0 <vTaskDelete+0x110>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d01a      	beq.n	800c6cc <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 800c696:	4b0f      	ldr	r3, [pc, #60]	; (800c6d4 <vTaskDelete+0xf4>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	68fa      	ldr	r2, [r7, #12]
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d115      	bne.n	800c6cc <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c6a0:	4b14      	ldr	r3, [pc, #80]	; (800c6f4 <vTaskDelete+0x114>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d009      	beq.n	800c6bc <vTaskDelete+0xdc>
 800c6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ac:	f383 8811 	msr	BASEPRI, r3
 800c6b0:	f3bf 8f6f 	isb	sy
 800c6b4:	f3bf 8f4f 	dsb	sy
 800c6b8:	60bb      	str	r3, [r7, #8]
 800c6ba:	e7fe      	b.n	800c6ba <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 800c6bc:	4b0e      	ldr	r3, [pc, #56]	; (800c6f8 <vTaskDelete+0x118>)
 800c6be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6c2:	601a      	str	r2, [r3, #0]
 800c6c4:	f3bf 8f4f 	dsb	sy
 800c6c8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c6cc:	bf00      	nop
 800c6ce:	3710      	adds	r7, #16
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	24002160 	.word	0x24002160
 800c6d8:	24002164 	.word	0x24002164
 800c6dc:	24002268 	.word	0x24002268
 800c6e0:	2400227c 	.word	0x2400227c
 800c6e4:	24002234 	.word	0x24002234
 800c6e8:	24002248 	.word	0x24002248
 800c6ec:	24002260 	.word	0x24002260
 800c6f0:	2400226c 	.word	0x2400226c
 800c6f4:	24002288 	.word	0x24002288
 800c6f8:	e000ed04 	.word	0xe000ed04

0800c6fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c704:	2300      	movs	r3, #0
 800c706:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d016      	beq.n	800c73c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c70e:	4b13      	ldr	r3, [pc, #76]	; (800c75c <vTaskDelay+0x60>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d009      	beq.n	800c72a <vTaskDelay+0x2e>
 800c716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c71a:	f383 8811 	msr	BASEPRI, r3
 800c71e:	f3bf 8f6f 	isb	sy
 800c722:	f3bf 8f4f 	dsb	sy
 800c726:	60bb      	str	r3, [r7, #8]
 800c728:	e7fe      	b.n	800c728 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800c72a:	f000 f87f 	bl	800c82c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c72e:	2100      	movs	r1, #0
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 fe2d 	bl	800d390 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c736:	f000 f887 	bl	800c848 <xTaskResumeAll>
 800c73a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d107      	bne.n	800c752 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800c742:	4b07      	ldr	r3, [pc, #28]	; (800c760 <vTaskDelay+0x64>)
 800c744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c748:	601a      	str	r2, [r3, #0]
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c752:	bf00      	nop
 800c754:	3710      	adds	r7, #16
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
 800c75a:	bf00      	nop
 800c75c:	24002288 	.word	0x24002288
 800c760:	e000ed04 	.word	0xe000ed04

0800c764 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b08a      	sub	sp, #40	; 0x28
 800c768:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c76a:	2300      	movs	r3, #0
 800c76c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c76e:	2300      	movs	r3, #0
 800c770:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c772:	463a      	mov	r2, r7
 800c774:	1d39      	adds	r1, r7, #4
 800c776:	f107 0308 	add.w	r3, r7, #8
 800c77a:	4618      	mov	r0, r3
 800c77c:	f7f3 ff88 	bl	8000690 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c780:	6839      	ldr	r1, [r7, #0]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	68ba      	ldr	r2, [r7, #8]
 800c786:	9202      	str	r2, [sp, #8]
 800c788:	9301      	str	r3, [sp, #4]
 800c78a:	2300      	movs	r3, #0
 800c78c:	9300      	str	r3, [sp, #0]
 800c78e:	2300      	movs	r3, #0
 800c790:	460a      	mov	r2, r1
 800c792:	4920      	ldr	r1, [pc, #128]	; (800c814 <vTaskStartScheduler+0xb0>)
 800c794:	4820      	ldr	r0, [pc, #128]	; (800c818 <vTaskStartScheduler+0xb4>)
 800c796:	f7ff fd93 	bl	800c2c0 <xTaskCreateStatic>
 800c79a:	4602      	mov	r2, r0
 800c79c:	4b1f      	ldr	r3, [pc, #124]	; (800c81c <vTaskStartScheduler+0xb8>)
 800c79e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c7a0:	4b1e      	ldr	r3, [pc, #120]	; (800c81c <vTaskStartScheduler+0xb8>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d002      	beq.n	800c7ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	617b      	str	r3, [r7, #20]
 800c7ac:	e001      	b.n	800c7b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d102      	bne.n	800c7be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c7b8:	f000 fe50 	bl	800d45c <xTimerCreateTimerTask>
 800c7bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d115      	bne.n	800c7f0 <vTaskStartScheduler+0x8c>
 800c7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c8:	f383 8811 	msr	BASEPRI, r3
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f3bf 8f4f 	dsb	sy
 800c7d4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c7d6:	4b12      	ldr	r3, [pc, #72]	; (800c820 <vTaskStartScheduler+0xbc>)
 800c7d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c7dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c7de:	4b11      	ldr	r3, [pc, #68]	; (800c824 <vTaskStartScheduler+0xc0>)
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c7e4:	4b10      	ldr	r3, [pc, #64]	; (800c828 <vTaskStartScheduler+0xc4>)
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c7ea:	f001 f9f1 	bl	800dbd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c7ee:	e00d      	b.n	800c80c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f6:	d109      	bne.n	800c80c <vTaskStartScheduler+0xa8>
 800c7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fc:	f383 8811 	msr	BASEPRI, r3
 800c800:	f3bf 8f6f 	isb	sy
 800c804:	f3bf 8f4f 	dsb	sy
 800c808:	60fb      	str	r3, [r7, #12]
 800c80a:	e7fe      	b.n	800c80a <vTaskStartScheduler+0xa6>
}
 800c80c:	bf00      	nop
 800c80e:	3718      	adds	r7, #24
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	080184f8 	.word	0x080184f8
 800c818:	0800ce4d 	.word	0x0800ce4d
 800c81c:	24002284 	.word	0x24002284
 800c820:	24002280 	.word	0x24002280
 800c824:	2400226c 	.word	0x2400226c
 800c828:	24002264 	.word	0x24002264

0800c82c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c82c:	b480      	push	{r7}
 800c82e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c830:	4b04      	ldr	r3, [pc, #16]	; (800c844 <vTaskSuspendAll+0x18>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	3301      	adds	r3, #1
 800c836:	4a03      	ldr	r2, [pc, #12]	; (800c844 <vTaskSuspendAll+0x18>)
 800c838:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c83a:	bf00      	nop
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr
 800c844:	24002288 	.word	0x24002288

0800c848 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b084      	sub	sp, #16
 800c84c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c84e:	2300      	movs	r3, #0
 800c850:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c852:	2300      	movs	r3, #0
 800c854:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c856:	4b41      	ldr	r3, [pc, #260]	; (800c95c <xTaskResumeAll+0x114>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d109      	bne.n	800c872 <xTaskResumeAll+0x2a>
 800c85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c862:	f383 8811 	msr	BASEPRI, r3
 800c866:	f3bf 8f6f 	isb	sy
 800c86a:	f3bf 8f4f 	dsb	sy
 800c86e:	603b      	str	r3, [r7, #0]
 800c870:	e7fe      	b.n	800c870 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c872:	f001 fa4b 	bl	800dd0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c876:	4b39      	ldr	r3, [pc, #228]	; (800c95c <xTaskResumeAll+0x114>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	3b01      	subs	r3, #1
 800c87c:	4a37      	ldr	r2, [pc, #220]	; (800c95c <xTaskResumeAll+0x114>)
 800c87e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c880:	4b36      	ldr	r3, [pc, #216]	; (800c95c <xTaskResumeAll+0x114>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d161      	bne.n	800c94c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c888:	4b35      	ldr	r3, [pc, #212]	; (800c960 <xTaskResumeAll+0x118>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d05d      	beq.n	800c94c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c890:	e02e      	b.n	800c8f0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c892:	4b34      	ldr	r3, [pc, #208]	; (800c964 <xTaskResumeAll+0x11c>)
 800c894:	68db      	ldr	r3, [r3, #12]
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	3318      	adds	r3, #24
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7fe fcfa 	bl	800b298 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	3304      	adds	r3, #4
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f7fe fcf5 	bl	800b298 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	409a      	lsls	r2, r3
 800c8b6:	4b2c      	ldr	r3, [pc, #176]	; (800c968 <xTaskResumeAll+0x120>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	4a2a      	ldr	r2, [pc, #168]	; (800c968 <xTaskResumeAll+0x120>)
 800c8be:	6013      	str	r3, [r2, #0]
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	4413      	add	r3, r2
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	4a27      	ldr	r2, [pc, #156]	; (800c96c <xTaskResumeAll+0x124>)
 800c8ce:	441a      	add	r2, r3
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	3304      	adds	r3, #4
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	4610      	mov	r0, r2
 800c8d8:	f7fe fc81 	bl	800b1de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8e0:	4b23      	ldr	r3, [pc, #140]	; (800c970 <xTaskResumeAll+0x128>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d302      	bcc.n	800c8f0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800c8ea:	4b22      	ldr	r3, [pc, #136]	; (800c974 <xTaskResumeAll+0x12c>)
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c8f0:	4b1c      	ldr	r3, [pc, #112]	; (800c964 <xTaskResumeAll+0x11c>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d1cc      	bne.n	800c892 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d001      	beq.n	800c902 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c8fe:	f000 fb59 	bl	800cfb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c902:	4b1d      	ldr	r3, [pc, #116]	; (800c978 <xTaskResumeAll+0x130>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d010      	beq.n	800c930 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c90e:	f000 f859 	bl	800c9c4 <xTaskIncrementTick>
 800c912:	4603      	mov	r3, r0
 800c914:	2b00      	cmp	r3, #0
 800c916:	d002      	beq.n	800c91e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800c918:	4b16      	ldr	r3, [pc, #88]	; (800c974 <xTaskResumeAll+0x12c>)
 800c91a:	2201      	movs	r2, #1
 800c91c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	3b01      	subs	r3, #1
 800c922:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d1f1      	bne.n	800c90e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800c92a:	4b13      	ldr	r3, [pc, #76]	; (800c978 <xTaskResumeAll+0x130>)
 800c92c:	2200      	movs	r2, #0
 800c92e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c930:	4b10      	ldr	r3, [pc, #64]	; (800c974 <xTaskResumeAll+0x12c>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d009      	beq.n	800c94c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c938:	2301      	movs	r3, #1
 800c93a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c93c:	4b0f      	ldr	r3, [pc, #60]	; (800c97c <xTaskResumeAll+0x134>)
 800c93e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c942:	601a      	str	r2, [r3, #0]
 800c944:	f3bf 8f4f 	dsb	sy
 800c948:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c94c:	f001 fa0c 	bl	800dd68 <vPortExitCritical>

	return xAlreadyYielded;
 800c950:	68bb      	ldr	r3, [r7, #8]
}
 800c952:	4618      	mov	r0, r3
 800c954:	3710      	adds	r7, #16
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	24002288 	.word	0x24002288
 800c960:	24002260 	.word	0x24002260
 800c964:	24002220 	.word	0x24002220
 800c968:	24002268 	.word	0x24002268
 800c96c:	24002164 	.word	0x24002164
 800c970:	24002160 	.word	0x24002160
 800c974:	24002274 	.word	0x24002274
 800c978:	24002270 	.word	0x24002270
 800c97c:	e000ed04 	.word	0xe000ed04

0800c980 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c980:	b480      	push	{r7}
 800c982:	b083      	sub	sp, #12
 800c984:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c986:	4b05      	ldr	r3, [pc, #20]	; (800c99c <xTaskGetTickCount+0x1c>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c98c:	687b      	ldr	r3, [r7, #4]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	370c      	adds	r7, #12
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr
 800c99a:	bf00      	nop
 800c99c:	24002264 	.word	0x24002264

0800c9a0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c9a6:	f001 fa8d 	bl	800dec4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c9ae:	4b04      	ldr	r3, [pc, #16]	; (800c9c0 <xTaskGetTickCountFromISR+0x20>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c9b4:	683b      	ldr	r3, [r7, #0]
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3708      	adds	r7, #8
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	24002264 	.word	0x24002264

0800c9c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b086      	sub	sp, #24
 800c9c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9ce:	4b4e      	ldr	r3, [pc, #312]	; (800cb08 <xTaskIncrementTick+0x144>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	f040 8087 	bne.w	800cae6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c9d8:	4b4c      	ldr	r3, [pc, #304]	; (800cb0c <xTaskIncrementTick+0x148>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	3301      	adds	r3, #1
 800c9de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c9e0:	4a4a      	ldr	r2, [pc, #296]	; (800cb0c <xTaskIncrementTick+0x148>)
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d11f      	bne.n	800ca2c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800c9ec:	4b48      	ldr	r3, [pc, #288]	; (800cb10 <xTaskIncrementTick+0x14c>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d009      	beq.n	800ca0a <xTaskIncrementTick+0x46>
 800c9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fa:	f383 8811 	msr	BASEPRI, r3
 800c9fe:	f3bf 8f6f 	isb	sy
 800ca02:	f3bf 8f4f 	dsb	sy
 800ca06:	603b      	str	r3, [r7, #0]
 800ca08:	e7fe      	b.n	800ca08 <xTaskIncrementTick+0x44>
 800ca0a:	4b41      	ldr	r3, [pc, #260]	; (800cb10 <xTaskIncrementTick+0x14c>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	60fb      	str	r3, [r7, #12]
 800ca10:	4b40      	ldr	r3, [pc, #256]	; (800cb14 <xTaskIncrementTick+0x150>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4a3e      	ldr	r2, [pc, #248]	; (800cb10 <xTaskIncrementTick+0x14c>)
 800ca16:	6013      	str	r3, [r2, #0]
 800ca18:	4a3e      	ldr	r2, [pc, #248]	; (800cb14 <xTaskIncrementTick+0x150>)
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	6013      	str	r3, [r2, #0]
 800ca1e:	4b3e      	ldr	r3, [pc, #248]	; (800cb18 <xTaskIncrementTick+0x154>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	3301      	adds	r3, #1
 800ca24:	4a3c      	ldr	r2, [pc, #240]	; (800cb18 <xTaskIncrementTick+0x154>)
 800ca26:	6013      	str	r3, [r2, #0]
 800ca28:	f000 fac4 	bl	800cfb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ca2c:	4b3b      	ldr	r3, [pc, #236]	; (800cb1c <xTaskIncrementTick+0x158>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	693a      	ldr	r2, [r7, #16]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d348      	bcc.n	800cac8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca36:	4b36      	ldr	r3, [pc, #216]	; (800cb10 <xTaskIncrementTick+0x14c>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d104      	bne.n	800ca4a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca40:	4b36      	ldr	r3, [pc, #216]	; (800cb1c <xTaskIncrementTick+0x158>)
 800ca42:	f04f 32ff 	mov.w	r2, #4294967295
 800ca46:	601a      	str	r2, [r3, #0]
					break;
 800ca48:	e03e      	b.n	800cac8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca4a:	4b31      	ldr	r3, [pc, #196]	; (800cb10 <xTaskIncrementTick+0x14c>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	68db      	ldr	r3, [r3, #12]
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ca5a:	693a      	ldr	r2, [r7, #16]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d203      	bcs.n	800ca6a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ca62:	4a2e      	ldr	r2, [pc, #184]	; (800cb1c <xTaskIncrementTick+0x158>)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ca68:	e02e      	b.n	800cac8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	3304      	adds	r3, #4
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7fe fc12 	bl	800b298 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d004      	beq.n	800ca86 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	3318      	adds	r3, #24
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7fe fc09 	bl	800b298 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	409a      	lsls	r2, r3
 800ca8e:	4b24      	ldr	r3, [pc, #144]	; (800cb20 <xTaskIncrementTick+0x15c>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4313      	orrs	r3, r2
 800ca94:	4a22      	ldr	r2, [pc, #136]	; (800cb20 <xTaskIncrementTick+0x15c>)
 800ca96:	6013      	str	r3, [r2, #0]
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca9c:	4613      	mov	r3, r2
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	4413      	add	r3, r2
 800caa2:	009b      	lsls	r3, r3, #2
 800caa4:	4a1f      	ldr	r2, [pc, #124]	; (800cb24 <xTaskIncrementTick+0x160>)
 800caa6:	441a      	add	r2, r3
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	3304      	adds	r3, #4
 800caac:	4619      	mov	r1, r3
 800caae:	4610      	mov	r0, r2
 800cab0:	f7fe fb95 	bl	800b1de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cab8:	4b1b      	ldr	r3, [pc, #108]	; (800cb28 <xTaskIncrementTick+0x164>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d3b9      	bcc.n	800ca36 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800cac2:	2301      	movs	r3, #1
 800cac4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cac6:	e7b6      	b.n	800ca36 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cac8:	4b17      	ldr	r3, [pc, #92]	; (800cb28 <xTaskIncrementTick+0x164>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cace:	4915      	ldr	r1, [pc, #84]	; (800cb24 <xTaskIncrementTick+0x160>)
 800cad0:	4613      	mov	r3, r2
 800cad2:	009b      	lsls	r3, r3, #2
 800cad4:	4413      	add	r3, r2
 800cad6:	009b      	lsls	r3, r3, #2
 800cad8:	440b      	add	r3, r1
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d907      	bls.n	800caf0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800cae0:	2301      	movs	r3, #1
 800cae2:	617b      	str	r3, [r7, #20]
 800cae4:	e004      	b.n	800caf0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cae6:	4b11      	ldr	r3, [pc, #68]	; (800cb2c <xTaskIncrementTick+0x168>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	3301      	adds	r3, #1
 800caec:	4a0f      	ldr	r2, [pc, #60]	; (800cb2c <xTaskIncrementTick+0x168>)
 800caee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800caf0:	4b0f      	ldr	r3, [pc, #60]	; (800cb30 <xTaskIncrementTick+0x16c>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d001      	beq.n	800cafc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800caf8:	2301      	movs	r3, #1
 800cafa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cafc:	697b      	ldr	r3, [r7, #20]
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3718      	adds	r7, #24
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop
 800cb08:	24002288 	.word	0x24002288
 800cb0c:	24002264 	.word	0x24002264
 800cb10:	24002218 	.word	0x24002218
 800cb14:	2400221c 	.word	0x2400221c
 800cb18:	24002278 	.word	0x24002278
 800cb1c:	24002280 	.word	0x24002280
 800cb20:	24002268 	.word	0x24002268
 800cb24:	24002164 	.word	0x24002164
 800cb28:	24002160 	.word	0x24002160
 800cb2c:	24002270 	.word	0x24002270
 800cb30:	24002274 	.word	0x24002274

0800cb34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cb34:	b480      	push	{r7}
 800cb36:	b087      	sub	sp, #28
 800cb38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cb3a:	4b26      	ldr	r3, [pc, #152]	; (800cbd4 <vTaskSwitchContext+0xa0>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d003      	beq.n	800cb4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cb42:	4b25      	ldr	r3, [pc, #148]	; (800cbd8 <vTaskSwitchContext+0xa4>)
 800cb44:	2201      	movs	r2, #1
 800cb46:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cb48:	e03e      	b.n	800cbc8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800cb4a:	4b23      	ldr	r3, [pc, #140]	; (800cbd8 <vTaskSwitchContext+0xa4>)
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb50:	4b22      	ldr	r3, [pc, #136]	; (800cbdc <vTaskSwitchContext+0xa8>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	fab3 f383 	clz	r3, r3
 800cb5c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cb5e:	7afb      	ldrb	r3, [r7, #11]
 800cb60:	f1c3 031f 	rsb	r3, r3, #31
 800cb64:	617b      	str	r3, [r7, #20]
 800cb66:	491e      	ldr	r1, [pc, #120]	; (800cbe0 <vTaskSwitchContext+0xac>)
 800cb68:	697a      	ldr	r2, [r7, #20]
 800cb6a:	4613      	mov	r3, r2
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	4413      	add	r3, r2
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	440b      	add	r3, r1
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d109      	bne.n	800cb8e <vTaskSwitchContext+0x5a>
	__asm volatile
 800cb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7e:	f383 8811 	msr	BASEPRI, r3
 800cb82:	f3bf 8f6f 	isb	sy
 800cb86:	f3bf 8f4f 	dsb	sy
 800cb8a:	607b      	str	r3, [r7, #4]
 800cb8c:	e7fe      	b.n	800cb8c <vTaskSwitchContext+0x58>
 800cb8e:	697a      	ldr	r2, [r7, #20]
 800cb90:	4613      	mov	r3, r2
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	4413      	add	r3, r2
 800cb96:	009b      	lsls	r3, r3, #2
 800cb98:	4a11      	ldr	r2, [pc, #68]	; (800cbe0 <vTaskSwitchContext+0xac>)
 800cb9a:	4413      	add	r3, r2
 800cb9c:	613b      	str	r3, [r7, #16]
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	685a      	ldr	r2, [r3, #4]
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	605a      	str	r2, [r3, #4]
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	685a      	ldr	r2, [r3, #4]
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	3308      	adds	r3, #8
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d104      	bne.n	800cbbe <vTaskSwitchContext+0x8a>
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	685a      	ldr	r2, [r3, #4]
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	605a      	str	r2, [r3, #4]
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	68db      	ldr	r3, [r3, #12]
 800cbc4:	4a07      	ldr	r2, [pc, #28]	; (800cbe4 <vTaskSwitchContext+0xb0>)
 800cbc6:	6013      	str	r3, [r2, #0]
}
 800cbc8:	bf00      	nop
 800cbca:	371c      	adds	r7, #28
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr
 800cbd4:	24002288 	.word	0x24002288
 800cbd8:	24002274 	.word	0x24002274
 800cbdc:	24002268 	.word	0x24002268
 800cbe0:	24002164 	.word	0x24002164
 800cbe4:	24002160 	.word	0x24002160

0800cbe8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d109      	bne.n	800cc0c <vTaskPlaceOnEventList+0x24>
 800cbf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfc:	f383 8811 	msr	BASEPRI, r3
 800cc00:	f3bf 8f6f 	isb	sy
 800cc04:	f3bf 8f4f 	dsb	sy
 800cc08:	60fb      	str	r3, [r7, #12]
 800cc0a:	e7fe      	b.n	800cc0a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cc0c:	4b07      	ldr	r3, [pc, #28]	; (800cc2c <vTaskPlaceOnEventList+0x44>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	3318      	adds	r3, #24
 800cc12:	4619      	mov	r1, r3
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f7fe fb06 	bl	800b226 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cc1a:	2101      	movs	r1, #1
 800cc1c:	6838      	ldr	r0, [r7, #0]
 800cc1e:	f000 fbb7 	bl	800d390 <prvAddCurrentTaskToDelayedList>
}
 800cc22:	bf00      	nop
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	24002160 	.word	0x24002160

0800cc30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b086      	sub	sp, #24
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d109      	bne.n	800cc56 <vTaskPlaceOnEventListRestricted+0x26>
 800cc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc46:	f383 8811 	msr	BASEPRI, r3
 800cc4a:	f3bf 8f6f 	isb	sy
 800cc4e:	f3bf 8f4f 	dsb	sy
 800cc52:	617b      	str	r3, [r7, #20]
 800cc54:	e7fe      	b.n	800cc54 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cc56:	4b0a      	ldr	r3, [pc, #40]	; (800cc80 <vTaskPlaceOnEventListRestricted+0x50>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	3318      	adds	r3, #24
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	68f8      	ldr	r0, [r7, #12]
 800cc60:	f7fe fabd 	bl	800b1de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d002      	beq.n	800cc70 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800cc6a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc6e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cc70:	6879      	ldr	r1, [r7, #4]
 800cc72:	68b8      	ldr	r0, [r7, #8]
 800cc74:	f000 fb8c 	bl	800d390 <prvAddCurrentTaskToDelayedList>
	}
 800cc78:	bf00      	nop
 800cc7a:	3718      	adds	r7, #24
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	24002160 	.word	0x24002160

0800cc84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b086      	sub	sp, #24
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d109      	bne.n	800ccae <xTaskRemoveFromEventList+0x2a>
 800cc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc9e:	f383 8811 	msr	BASEPRI, r3
 800cca2:	f3bf 8f6f 	isb	sy
 800cca6:	f3bf 8f4f 	dsb	sy
 800ccaa:	60fb      	str	r3, [r7, #12]
 800ccac:	e7fe      	b.n	800ccac <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	3318      	adds	r3, #24
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7fe faf0 	bl	800b298 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccb8:	4b1d      	ldr	r3, [pc, #116]	; (800cd30 <xTaskRemoveFromEventList+0xac>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d11c      	bne.n	800ccfa <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	3304      	adds	r3, #4
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7fe fae7 	bl	800b298 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccce:	2201      	movs	r2, #1
 800ccd0:	409a      	lsls	r2, r3
 800ccd2:	4b18      	ldr	r3, [pc, #96]	; (800cd34 <xTaskRemoveFromEventList+0xb0>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	4a16      	ldr	r2, [pc, #88]	; (800cd34 <xTaskRemoveFromEventList+0xb0>)
 800ccda:	6013      	str	r3, [r2, #0]
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cce0:	4613      	mov	r3, r2
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	4413      	add	r3, r2
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	4a13      	ldr	r2, [pc, #76]	; (800cd38 <xTaskRemoveFromEventList+0xb4>)
 800ccea:	441a      	add	r2, r3
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	3304      	adds	r3, #4
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	4610      	mov	r0, r2
 800ccf4:	f7fe fa73 	bl	800b1de <vListInsertEnd>
 800ccf8:	e005      	b.n	800cd06 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	3318      	adds	r3, #24
 800ccfe:	4619      	mov	r1, r3
 800cd00:	480e      	ldr	r0, [pc, #56]	; (800cd3c <xTaskRemoveFromEventList+0xb8>)
 800cd02:	f7fe fa6c 	bl	800b1de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd0a:	4b0d      	ldr	r3, [pc, #52]	; (800cd40 <xTaskRemoveFromEventList+0xbc>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d905      	bls.n	800cd20 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cd14:	2301      	movs	r3, #1
 800cd16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cd18:	4b0a      	ldr	r3, [pc, #40]	; (800cd44 <xTaskRemoveFromEventList+0xc0>)
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	601a      	str	r2, [r3, #0]
 800cd1e:	e001      	b.n	800cd24 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800cd20:	2300      	movs	r3, #0
 800cd22:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cd24:	697b      	ldr	r3, [r7, #20]
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3718      	adds	r7, #24
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	24002288 	.word	0x24002288
 800cd34:	24002268 	.word	0x24002268
 800cd38:	24002164 	.word	0x24002164
 800cd3c:	24002220 	.word	0x24002220
 800cd40:	24002160 	.word	0x24002160
 800cd44:	24002274 	.word	0x24002274

0800cd48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b083      	sub	sp, #12
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cd50:	4b06      	ldr	r3, [pc, #24]	; (800cd6c <vTaskInternalSetTimeOutState+0x24>)
 800cd52:	681a      	ldr	r2, [r3, #0]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cd58:	4b05      	ldr	r3, [pc, #20]	; (800cd70 <vTaskInternalSetTimeOutState+0x28>)
 800cd5a:	681a      	ldr	r2, [r3, #0]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	605a      	str	r2, [r3, #4]
}
 800cd60:	bf00      	nop
 800cd62:	370c      	adds	r7, #12
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr
 800cd6c:	24002278 	.word	0x24002278
 800cd70:	24002264 	.word	0x24002264

0800cd74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b088      	sub	sp, #32
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d109      	bne.n	800cd98 <xTaskCheckForTimeOut+0x24>
 800cd84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd88:	f383 8811 	msr	BASEPRI, r3
 800cd8c:	f3bf 8f6f 	isb	sy
 800cd90:	f3bf 8f4f 	dsb	sy
 800cd94:	613b      	str	r3, [r7, #16]
 800cd96:	e7fe      	b.n	800cd96 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d109      	bne.n	800cdb2 <xTaskCheckForTimeOut+0x3e>
 800cd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	60fb      	str	r3, [r7, #12]
 800cdb0:	e7fe      	b.n	800cdb0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800cdb2:	f000 ffab 	bl	800dd0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cdb6:	4b1d      	ldr	r3, [pc, #116]	; (800ce2c <xTaskCheckForTimeOut+0xb8>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	69ba      	ldr	r2, [r7, #24]
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdce:	d102      	bne.n	800cdd6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	61fb      	str	r3, [r7, #28]
 800cdd4:	e023      	b.n	800ce1e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681a      	ldr	r2, [r3, #0]
 800cdda:	4b15      	ldr	r3, [pc, #84]	; (800ce30 <xTaskCheckForTimeOut+0xbc>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d007      	beq.n	800cdf2 <xTaskCheckForTimeOut+0x7e>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	69ba      	ldr	r2, [r7, #24]
 800cde8:	429a      	cmp	r2, r3
 800cdea:	d302      	bcc.n	800cdf2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cdec:	2301      	movs	r3, #1
 800cdee:	61fb      	str	r3, [r7, #28]
 800cdf0:	e015      	b.n	800ce1e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	697a      	ldr	r2, [r7, #20]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d20b      	bcs.n	800ce14 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	681a      	ldr	r2, [r3, #0]
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	1ad2      	subs	r2, r2, r3
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f7ff ff9d 	bl	800cd48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	61fb      	str	r3, [r7, #28]
 800ce12:	e004      	b.n	800ce1e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	2200      	movs	r2, #0
 800ce18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ce1e:	f000 ffa3 	bl	800dd68 <vPortExitCritical>

	return xReturn;
 800ce22:	69fb      	ldr	r3, [r7, #28]
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3720      	adds	r7, #32
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	24002264 	.word	0x24002264
 800ce30:	24002278 	.word	0x24002278

0800ce34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ce34:	b480      	push	{r7}
 800ce36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ce38:	4b03      	ldr	r3, [pc, #12]	; (800ce48 <vTaskMissedYield+0x14>)
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	601a      	str	r2, [r3, #0]
}
 800ce3e:	bf00      	nop
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr
 800ce48:	24002274 	.word	0x24002274

0800ce4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b082      	sub	sp, #8
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ce54:	f000 f854 	bl	800cf00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ce58:	4b07      	ldr	r3, [pc, #28]	; (800ce78 <prvIdleTask+0x2c>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d907      	bls.n	800ce70 <prvIdleTask+0x24>
			{
				taskYIELD();
 800ce60:	4b06      	ldr	r3, [pc, #24]	; (800ce7c <prvIdleTask+0x30>)
 800ce62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce66:	601a      	str	r2, [r3, #0]
 800ce68:	f3bf 8f4f 	dsb	sy
 800ce6c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ce70:	f7f3 fc06 	bl	8000680 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800ce74:	e7ee      	b.n	800ce54 <prvIdleTask+0x8>
 800ce76:	bf00      	nop
 800ce78:	24002164 	.word	0x24002164
 800ce7c:	e000ed04 	.word	0xe000ed04

0800ce80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce86:	2300      	movs	r3, #0
 800ce88:	607b      	str	r3, [r7, #4]
 800ce8a:	e00c      	b.n	800cea6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ce8c:	687a      	ldr	r2, [r7, #4]
 800ce8e:	4613      	mov	r3, r2
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	4413      	add	r3, r2
 800ce94:	009b      	lsls	r3, r3, #2
 800ce96:	4a12      	ldr	r2, [pc, #72]	; (800cee0 <prvInitialiseTaskLists+0x60>)
 800ce98:	4413      	add	r3, r2
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7fe f972 	bl	800b184 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	3301      	adds	r3, #1
 800cea4:	607b      	str	r3, [r7, #4]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2b06      	cmp	r3, #6
 800ceaa:	d9ef      	bls.n	800ce8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ceac:	480d      	ldr	r0, [pc, #52]	; (800cee4 <prvInitialiseTaskLists+0x64>)
 800ceae:	f7fe f969 	bl	800b184 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ceb2:	480d      	ldr	r0, [pc, #52]	; (800cee8 <prvInitialiseTaskLists+0x68>)
 800ceb4:	f7fe f966 	bl	800b184 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ceb8:	480c      	ldr	r0, [pc, #48]	; (800ceec <prvInitialiseTaskLists+0x6c>)
 800ceba:	f7fe f963 	bl	800b184 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cebe:	480c      	ldr	r0, [pc, #48]	; (800cef0 <prvInitialiseTaskLists+0x70>)
 800cec0:	f7fe f960 	bl	800b184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cec4:	480b      	ldr	r0, [pc, #44]	; (800cef4 <prvInitialiseTaskLists+0x74>)
 800cec6:	f7fe f95d 	bl	800b184 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ceca:	4b0b      	ldr	r3, [pc, #44]	; (800cef8 <prvInitialiseTaskLists+0x78>)
 800cecc:	4a05      	ldr	r2, [pc, #20]	; (800cee4 <prvInitialiseTaskLists+0x64>)
 800cece:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ced0:	4b0a      	ldr	r3, [pc, #40]	; (800cefc <prvInitialiseTaskLists+0x7c>)
 800ced2:	4a05      	ldr	r2, [pc, #20]	; (800cee8 <prvInitialiseTaskLists+0x68>)
 800ced4:	601a      	str	r2, [r3, #0]
}
 800ced6:	bf00      	nop
 800ced8:	3708      	adds	r7, #8
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}
 800cede:	bf00      	nop
 800cee0:	24002164 	.word	0x24002164
 800cee4:	240021f0 	.word	0x240021f0
 800cee8:	24002204 	.word	0x24002204
 800ceec:	24002220 	.word	0x24002220
 800cef0:	24002234 	.word	0x24002234
 800cef4:	2400224c 	.word	0x2400224c
 800cef8:	24002218 	.word	0x24002218
 800cefc:	2400221c 	.word	0x2400221c

0800cf00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf06:	e019      	b.n	800cf3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cf08:	f000 ff00 	bl	800dd0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf0c:	4b0f      	ldr	r3, [pc, #60]	; (800cf4c <prvCheckTasksWaitingTermination+0x4c>)
 800cf0e:	68db      	ldr	r3, [r3, #12]
 800cf10:	68db      	ldr	r3, [r3, #12]
 800cf12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	3304      	adds	r3, #4
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7fe f9bd 	bl	800b298 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cf1e:	4b0c      	ldr	r3, [pc, #48]	; (800cf50 <prvCheckTasksWaitingTermination+0x50>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	3b01      	subs	r3, #1
 800cf24:	4a0a      	ldr	r2, [pc, #40]	; (800cf50 <prvCheckTasksWaitingTermination+0x50>)
 800cf26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cf28:	4b0a      	ldr	r3, [pc, #40]	; (800cf54 <prvCheckTasksWaitingTermination+0x54>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	3b01      	subs	r3, #1
 800cf2e:	4a09      	ldr	r2, [pc, #36]	; (800cf54 <prvCheckTasksWaitingTermination+0x54>)
 800cf30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cf32:	f000 ff19 	bl	800dd68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f000 f80e 	bl	800cf58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cf3c:	4b05      	ldr	r3, [pc, #20]	; (800cf54 <prvCheckTasksWaitingTermination+0x54>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d1e1      	bne.n	800cf08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cf44:	bf00      	nop
 800cf46:	3708      	adds	r7, #8
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	24002234 	.word	0x24002234
 800cf50:	24002260 	.word	0x24002260
 800cf54:	24002248 	.word	0x24002248

0800cf58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b084      	sub	sp, #16
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d108      	bne.n	800cf7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f001 f8a8 	bl	800e0c4 <vPortFree>
				vPortFree( pxTCB );
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f001 f8a5 	bl	800e0c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cf7a:	e017      	b.n	800cfac <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	d103      	bne.n	800cf8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f001 f89c 	bl	800e0c4 <vPortFree>
	}
 800cf8c:	e00e      	b.n	800cfac <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cf94:	2b02      	cmp	r3, #2
 800cf96:	d009      	beq.n	800cfac <prvDeleteTCB+0x54>
 800cf98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9c:	f383 8811 	msr	BASEPRI, r3
 800cfa0:	f3bf 8f6f 	isb	sy
 800cfa4:	f3bf 8f4f 	dsb	sy
 800cfa8:	60fb      	str	r3, [r7, #12]
 800cfaa:	e7fe      	b.n	800cfaa <prvDeleteTCB+0x52>
	}
 800cfac:	bf00      	nop
 800cfae:	3710      	adds	r7, #16
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cfba:	4b0c      	ldr	r3, [pc, #48]	; (800cfec <prvResetNextTaskUnblockTime+0x38>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d104      	bne.n	800cfce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cfc4:	4b0a      	ldr	r3, [pc, #40]	; (800cff0 <prvResetNextTaskUnblockTime+0x3c>)
 800cfc6:	f04f 32ff 	mov.w	r2, #4294967295
 800cfca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cfcc:	e008      	b.n	800cfe0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfce:	4b07      	ldr	r3, [pc, #28]	; (800cfec <prvResetNextTaskUnblockTime+0x38>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	68db      	ldr	r3, [r3, #12]
 800cfd4:	68db      	ldr	r3, [r3, #12]
 800cfd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	4a04      	ldr	r2, [pc, #16]	; (800cff0 <prvResetNextTaskUnblockTime+0x3c>)
 800cfde:	6013      	str	r3, [r2, #0]
}
 800cfe0:	bf00      	nop
 800cfe2:	370c      	adds	r7, #12
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr
 800cfec:	24002218 	.word	0x24002218
 800cff0:	24002280 	.word	0x24002280

0800cff4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cffa:	4b0b      	ldr	r3, [pc, #44]	; (800d028 <xTaskGetSchedulerState+0x34>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d102      	bne.n	800d008 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d002:	2301      	movs	r3, #1
 800d004:	607b      	str	r3, [r7, #4]
 800d006:	e008      	b.n	800d01a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d008:	4b08      	ldr	r3, [pc, #32]	; (800d02c <xTaskGetSchedulerState+0x38>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d102      	bne.n	800d016 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d010:	2302      	movs	r3, #2
 800d012:	607b      	str	r3, [r7, #4]
 800d014:	e001      	b.n	800d01a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d016:	2300      	movs	r3, #0
 800d018:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d01a:	687b      	ldr	r3, [r7, #4]
	}
 800d01c:	4618      	mov	r0, r3
 800d01e:	370c      	adds	r7, #12
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr
 800d028:	2400226c 	.word	0x2400226c
 800d02c:	24002288 	.word	0x24002288

0800d030 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d03c:	2300      	movs	r3, #0
 800d03e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d069      	beq.n	800d11a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d04a:	4b36      	ldr	r3, [pc, #216]	; (800d124 <xTaskPriorityInherit+0xf4>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d050:	429a      	cmp	r2, r3
 800d052:	d259      	bcs.n	800d108 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	699b      	ldr	r3, [r3, #24]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	db06      	blt.n	800d06a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d05c:	4b31      	ldr	r3, [pc, #196]	; (800d124 <xTaskPriorityInherit+0xf4>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d062:	f1c3 0207 	rsb	r2, r3, #7
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	6959      	ldr	r1, [r3, #20]
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d072:	4613      	mov	r3, r2
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	4413      	add	r3, r2
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	4a2b      	ldr	r2, [pc, #172]	; (800d128 <xTaskPriorityInherit+0xf8>)
 800d07c:	4413      	add	r3, r2
 800d07e:	4299      	cmp	r1, r3
 800d080:	d13a      	bne.n	800d0f8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	3304      	adds	r3, #4
 800d086:	4618      	mov	r0, r3
 800d088:	f7fe f906 	bl	800b298 <uxListRemove>
 800d08c:	4603      	mov	r3, r0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d115      	bne.n	800d0be <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d096:	4924      	ldr	r1, [pc, #144]	; (800d128 <xTaskPriorityInherit+0xf8>)
 800d098:	4613      	mov	r3, r2
 800d09a:	009b      	lsls	r3, r3, #2
 800d09c:	4413      	add	r3, r2
 800d09e:	009b      	lsls	r3, r3, #2
 800d0a0:	440b      	add	r3, r1
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d10a      	bne.n	800d0be <xTaskPriorityInherit+0x8e>
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	fa02 f303 	lsl.w	r3, r2, r3
 800d0b2:	43da      	mvns	r2, r3
 800d0b4:	4b1d      	ldr	r3, [pc, #116]	; (800d12c <xTaskPriorityInherit+0xfc>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4013      	ands	r3, r2
 800d0ba:	4a1c      	ldr	r2, [pc, #112]	; (800d12c <xTaskPriorityInherit+0xfc>)
 800d0bc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d0be:	4b19      	ldr	r3, [pc, #100]	; (800d124 <xTaskPriorityInherit+0xf4>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	409a      	lsls	r2, r3
 800d0d0:	4b16      	ldr	r3, [pc, #88]	; (800d12c <xTaskPriorityInherit+0xfc>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	4a15      	ldr	r2, [pc, #84]	; (800d12c <xTaskPriorityInherit+0xfc>)
 800d0d8:	6013      	str	r3, [r2, #0]
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0de:	4613      	mov	r3, r2
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	4413      	add	r3, r2
 800d0e4:	009b      	lsls	r3, r3, #2
 800d0e6:	4a10      	ldr	r2, [pc, #64]	; (800d128 <xTaskPriorityInherit+0xf8>)
 800d0e8:	441a      	add	r2, r3
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	3304      	adds	r3, #4
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	4610      	mov	r0, r2
 800d0f2:	f7fe f874 	bl	800b1de <vListInsertEnd>
 800d0f6:	e004      	b.n	800d102 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d0f8:	4b0a      	ldr	r3, [pc, #40]	; (800d124 <xTaskPriorityInherit+0xf4>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d102:	2301      	movs	r3, #1
 800d104:	60fb      	str	r3, [r7, #12]
 800d106:	e008      	b.n	800d11a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d108:	68bb      	ldr	r3, [r7, #8]
 800d10a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d10c:	4b05      	ldr	r3, [pc, #20]	; (800d124 <xTaskPriorityInherit+0xf4>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d112:	429a      	cmp	r2, r3
 800d114:	d201      	bcs.n	800d11a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d116:	2301      	movs	r3, #1
 800d118:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d11a:	68fb      	ldr	r3, [r7, #12]
	}
 800d11c:	4618      	mov	r0, r3
 800d11e:	3710      	adds	r7, #16
 800d120:	46bd      	mov	sp, r7
 800d122:	bd80      	pop	{r7, pc}
 800d124:	24002160 	.word	0x24002160
 800d128:	24002164 	.word	0x24002164
 800d12c:	24002268 	.word	0x24002268

0800d130 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d130:	b580      	push	{r7, lr}
 800d132:	b086      	sub	sp, #24
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d13c:	2300      	movs	r3, #0
 800d13e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d06c      	beq.n	800d220 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d146:	4b39      	ldr	r3, [pc, #228]	; (800d22c <xTaskPriorityDisinherit+0xfc>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	693a      	ldr	r2, [r7, #16]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d009      	beq.n	800d164 <xTaskPriorityDisinherit+0x34>
 800d150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d154:	f383 8811 	msr	BASEPRI, r3
 800d158:	f3bf 8f6f 	isb	sy
 800d15c:	f3bf 8f4f 	dsb	sy
 800d160:	60fb      	str	r3, [r7, #12]
 800d162:	e7fe      	b.n	800d162 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d109      	bne.n	800d180 <xTaskPriorityDisinherit+0x50>
 800d16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d170:	f383 8811 	msr	BASEPRI, r3
 800d174:	f3bf 8f6f 	isb	sy
 800d178:	f3bf 8f4f 	dsb	sy
 800d17c:	60bb      	str	r3, [r7, #8]
 800d17e:	e7fe      	b.n	800d17e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d184:	1e5a      	subs	r2, r3, #1
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d192:	429a      	cmp	r2, r3
 800d194:	d044      	beq.n	800d220 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d140      	bne.n	800d220 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	3304      	adds	r3, #4
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7fe f878 	bl	800b298 <uxListRemove>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d115      	bne.n	800d1da <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1b2:	491f      	ldr	r1, [pc, #124]	; (800d230 <xTaskPriorityDisinherit+0x100>)
 800d1b4:	4613      	mov	r3, r2
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	4413      	add	r3, r2
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	440b      	add	r3, r1
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d10a      	bne.n	800d1da <xTaskPriorityDisinherit+0xaa>
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c8:	2201      	movs	r2, #1
 800d1ca:	fa02 f303 	lsl.w	r3, r2, r3
 800d1ce:	43da      	mvns	r2, r3
 800d1d0:	4b18      	ldr	r3, [pc, #96]	; (800d234 <xTaskPriorityDisinherit+0x104>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4013      	ands	r3, r2
 800d1d6:	4a17      	ldr	r2, [pc, #92]	; (800d234 <xTaskPriorityDisinherit+0x104>)
 800d1d8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e6:	f1c3 0207 	rsb	r2, r3, #7
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	409a      	lsls	r2, r3
 800d1f6:	4b0f      	ldr	r3, [pc, #60]	; (800d234 <xTaskPriorityDisinherit+0x104>)
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	4313      	orrs	r3, r2
 800d1fc:	4a0d      	ldr	r2, [pc, #52]	; (800d234 <xTaskPriorityDisinherit+0x104>)
 800d1fe:	6013      	str	r3, [r2, #0]
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d204:	4613      	mov	r3, r2
 800d206:	009b      	lsls	r3, r3, #2
 800d208:	4413      	add	r3, r2
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	4a08      	ldr	r2, [pc, #32]	; (800d230 <xTaskPriorityDisinherit+0x100>)
 800d20e:	441a      	add	r2, r3
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	3304      	adds	r3, #4
 800d214:	4619      	mov	r1, r3
 800d216:	4610      	mov	r0, r2
 800d218:	f7fd ffe1 	bl	800b1de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d21c:	2301      	movs	r3, #1
 800d21e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d220:	697b      	ldr	r3, [r7, #20]
	}
 800d222:	4618      	mov	r0, r3
 800d224:	3718      	adds	r7, #24
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	24002160 	.word	0x24002160
 800d230:	24002164 	.word	0x24002164
 800d234:	24002268 	.word	0x24002268

0800d238 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b088      	sub	sp, #32
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d246:	2301      	movs	r3, #1
 800d248:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	f000 8081 	beq.w	800d354 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d256:	2b00      	cmp	r3, #0
 800d258:	d109      	bne.n	800d26e <vTaskPriorityDisinheritAfterTimeout+0x36>
 800d25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25e:	f383 8811 	msr	BASEPRI, r3
 800d262:	f3bf 8f6f 	isb	sy
 800d266:	f3bf 8f4f 	dsb	sy
 800d26a:	60fb      	str	r3, [r7, #12]
 800d26c:	e7fe      	b.n	800d26c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d26e:	69bb      	ldr	r3, [r7, #24]
 800d270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d272:	683a      	ldr	r2, [r7, #0]
 800d274:	429a      	cmp	r2, r3
 800d276:	d902      	bls.n	800d27e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	61fb      	str	r3, [r7, #28]
 800d27c:	e002      	b.n	800d284 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d27e:	69bb      	ldr	r3, [r7, #24]
 800d280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d282:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d284:	69bb      	ldr	r3, [r7, #24]
 800d286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d288:	69fa      	ldr	r2, [r7, #28]
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d062      	beq.n	800d354 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d292:	697a      	ldr	r2, [r7, #20]
 800d294:	429a      	cmp	r2, r3
 800d296:	d15d      	bne.n	800d354 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d298:	4b30      	ldr	r3, [pc, #192]	; (800d35c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	69ba      	ldr	r2, [r7, #24]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d109      	bne.n	800d2b6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800d2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a6:	f383 8811 	msr	BASEPRI, r3
 800d2aa:	f3bf 8f6f 	isb	sy
 800d2ae:	f3bf 8f4f 	dsb	sy
 800d2b2:	60bb      	str	r3, [r7, #8]
 800d2b4:	e7fe      	b.n	800d2b4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ba:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d2bc:	69bb      	ldr	r3, [r7, #24]
 800d2be:	69fa      	ldr	r2, [r7, #28]
 800d2c0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d2c2:	69bb      	ldr	r3, [r7, #24]
 800d2c4:	699b      	ldr	r3, [r3, #24]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	db04      	blt.n	800d2d4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2ca:	69fb      	ldr	r3, [r7, #28]
 800d2cc:	f1c3 0207 	rsb	r2, r3, #7
 800d2d0:	69bb      	ldr	r3, [r7, #24]
 800d2d2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d2d4:	69bb      	ldr	r3, [r7, #24]
 800d2d6:	6959      	ldr	r1, [r3, #20]
 800d2d8:	693a      	ldr	r2, [r7, #16]
 800d2da:	4613      	mov	r3, r2
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	4413      	add	r3, r2
 800d2e0:	009b      	lsls	r3, r3, #2
 800d2e2:	4a1f      	ldr	r2, [pc, #124]	; (800d360 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d2e4:	4413      	add	r3, r2
 800d2e6:	4299      	cmp	r1, r3
 800d2e8:	d134      	bne.n	800d354 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2ea:	69bb      	ldr	r3, [r7, #24]
 800d2ec:	3304      	adds	r3, #4
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f7fd ffd2 	bl	800b298 <uxListRemove>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d115      	bne.n	800d326 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d2fa:	69bb      	ldr	r3, [r7, #24]
 800d2fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2fe:	4918      	ldr	r1, [pc, #96]	; (800d360 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d300:	4613      	mov	r3, r2
 800d302:	009b      	lsls	r3, r3, #2
 800d304:	4413      	add	r3, r2
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	440b      	add	r3, r1
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d10a      	bne.n	800d326 <vTaskPriorityDisinheritAfterTimeout+0xee>
 800d310:	69bb      	ldr	r3, [r7, #24]
 800d312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d314:	2201      	movs	r2, #1
 800d316:	fa02 f303 	lsl.w	r3, r2, r3
 800d31a:	43da      	mvns	r2, r3
 800d31c:	4b11      	ldr	r3, [pc, #68]	; (800d364 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4013      	ands	r3, r2
 800d322:	4a10      	ldr	r2, [pc, #64]	; (800d364 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d324:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d326:	69bb      	ldr	r3, [r7, #24]
 800d328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d32a:	2201      	movs	r2, #1
 800d32c:	409a      	lsls	r2, r3
 800d32e:	4b0d      	ldr	r3, [pc, #52]	; (800d364 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	4313      	orrs	r3, r2
 800d334:	4a0b      	ldr	r2, [pc, #44]	; (800d364 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d336:	6013      	str	r3, [r2, #0]
 800d338:	69bb      	ldr	r3, [r7, #24]
 800d33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d33c:	4613      	mov	r3, r2
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	4413      	add	r3, r2
 800d342:	009b      	lsls	r3, r3, #2
 800d344:	4a06      	ldr	r2, [pc, #24]	; (800d360 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d346:	441a      	add	r2, r3
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	3304      	adds	r3, #4
 800d34c:	4619      	mov	r1, r3
 800d34e:	4610      	mov	r0, r2
 800d350:	f7fd ff45 	bl	800b1de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d354:	bf00      	nop
 800d356:	3720      	adds	r7, #32
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	24002160 	.word	0x24002160
 800d360:	24002164 	.word	0x24002164
 800d364:	24002268 	.word	0x24002268

0800d368 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d368:	b480      	push	{r7}
 800d36a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d36c:	4b07      	ldr	r3, [pc, #28]	; (800d38c <pvTaskIncrementMutexHeldCount+0x24>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d004      	beq.n	800d37e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d374:	4b05      	ldr	r3, [pc, #20]	; (800d38c <pvTaskIncrementMutexHeldCount+0x24>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d37a:	3201      	adds	r2, #1
 800d37c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d37e:	4b03      	ldr	r3, [pc, #12]	; (800d38c <pvTaskIncrementMutexHeldCount+0x24>)
 800d380:	681b      	ldr	r3, [r3, #0]
	}
 800d382:	4618      	mov	r0, r3
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr
 800d38c:	24002160 	.word	0x24002160

0800d390 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b084      	sub	sp, #16
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
 800d398:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d39a:	4b29      	ldr	r3, [pc, #164]	; (800d440 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3a0:	4b28      	ldr	r3, [pc, #160]	; (800d444 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	3304      	adds	r3, #4
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7fd ff76 	bl	800b298 <uxListRemove>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d10b      	bne.n	800d3ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d3b2:	4b24      	ldr	r3, [pc, #144]	; (800d444 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d3be:	43da      	mvns	r2, r3
 800d3c0:	4b21      	ldr	r3, [pc, #132]	; (800d448 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4013      	ands	r3, r2
 800d3c6:	4a20      	ldr	r2, [pc, #128]	; (800d448 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d3c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d0:	d10a      	bne.n	800d3e8 <prvAddCurrentTaskToDelayedList+0x58>
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d007      	beq.n	800d3e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3d8:	4b1a      	ldr	r3, [pc, #104]	; (800d444 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	3304      	adds	r3, #4
 800d3de:	4619      	mov	r1, r3
 800d3e0:	481a      	ldr	r0, [pc, #104]	; (800d44c <prvAddCurrentTaskToDelayedList+0xbc>)
 800d3e2:	f7fd fefc 	bl	800b1de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d3e6:	e026      	b.n	800d436 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d3e8:	68fa      	ldr	r2, [r7, #12]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	4413      	add	r3, r2
 800d3ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d3f0:	4b14      	ldr	r3, [pc, #80]	; (800d444 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	68ba      	ldr	r2, [r7, #8]
 800d3f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d3f8:	68ba      	ldr	r2, [r7, #8]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d209      	bcs.n	800d414 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d400:	4b13      	ldr	r3, [pc, #76]	; (800d450 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d402:	681a      	ldr	r2, [r3, #0]
 800d404:	4b0f      	ldr	r3, [pc, #60]	; (800d444 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	3304      	adds	r3, #4
 800d40a:	4619      	mov	r1, r3
 800d40c:	4610      	mov	r0, r2
 800d40e:	f7fd ff0a 	bl	800b226 <vListInsert>
}
 800d412:	e010      	b.n	800d436 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d414:	4b0f      	ldr	r3, [pc, #60]	; (800d454 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	4b0a      	ldr	r3, [pc, #40]	; (800d444 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	3304      	adds	r3, #4
 800d41e:	4619      	mov	r1, r3
 800d420:	4610      	mov	r0, r2
 800d422:	f7fd ff00 	bl	800b226 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d426:	4b0c      	ldr	r3, [pc, #48]	; (800d458 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	68ba      	ldr	r2, [r7, #8]
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d202      	bcs.n	800d436 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d430:	4a09      	ldr	r2, [pc, #36]	; (800d458 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	6013      	str	r3, [r2, #0]
}
 800d436:	bf00      	nop
 800d438:	3710      	adds	r7, #16
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	24002264 	.word	0x24002264
 800d444:	24002160 	.word	0x24002160
 800d448:	24002268 	.word	0x24002268
 800d44c:	2400224c 	.word	0x2400224c
 800d450:	2400221c 	.word	0x2400221c
 800d454:	24002218 	.word	0x24002218
 800d458:	24002280 	.word	0x24002280

0800d45c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b08a      	sub	sp, #40	; 0x28
 800d460:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d462:	2300      	movs	r3, #0
 800d464:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d466:	f000 fae7 	bl	800da38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d46a:	4b1c      	ldr	r3, [pc, #112]	; (800d4dc <xTimerCreateTimerTask+0x80>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d021      	beq.n	800d4b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d472:	2300      	movs	r3, #0
 800d474:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d476:	2300      	movs	r3, #0
 800d478:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d47a:	1d3a      	adds	r2, r7, #4
 800d47c:	f107 0108 	add.w	r1, r7, #8
 800d480:	f107 030c 	add.w	r3, r7, #12
 800d484:	4618      	mov	r0, r3
 800d486:	f7f3 f91d 	bl	80006c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d48a:	6879      	ldr	r1, [r7, #4]
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	68fa      	ldr	r2, [r7, #12]
 800d490:	9202      	str	r2, [sp, #8]
 800d492:	9301      	str	r3, [sp, #4]
 800d494:	2302      	movs	r3, #2
 800d496:	9300      	str	r3, [sp, #0]
 800d498:	2300      	movs	r3, #0
 800d49a:	460a      	mov	r2, r1
 800d49c:	4910      	ldr	r1, [pc, #64]	; (800d4e0 <xTimerCreateTimerTask+0x84>)
 800d49e:	4811      	ldr	r0, [pc, #68]	; (800d4e4 <xTimerCreateTimerTask+0x88>)
 800d4a0:	f7fe ff0e 	bl	800c2c0 <xTaskCreateStatic>
 800d4a4:	4602      	mov	r2, r0
 800d4a6:	4b10      	ldr	r3, [pc, #64]	; (800d4e8 <xTimerCreateTimerTask+0x8c>)
 800d4a8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d4aa:	4b0f      	ldr	r3, [pc, #60]	; (800d4e8 <xTimerCreateTimerTask+0x8c>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d001      	beq.n	800d4b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d109      	bne.n	800d4d0 <xTimerCreateTimerTask+0x74>
 800d4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c0:	f383 8811 	msr	BASEPRI, r3
 800d4c4:	f3bf 8f6f 	isb	sy
 800d4c8:	f3bf 8f4f 	dsb	sy
 800d4cc:	613b      	str	r3, [r7, #16]
 800d4ce:	e7fe      	b.n	800d4ce <xTimerCreateTimerTask+0x72>
	return xReturn;
 800d4d0:	697b      	ldr	r3, [r7, #20]
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3718      	adds	r7, #24
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	bf00      	nop
 800d4dc:	240022bc 	.word	0x240022bc
 800d4e0:	08018500 	.word	0x08018500
 800d4e4:	0800d61d 	.word	0x0800d61d
 800d4e8:	240022c0 	.word	0x240022c0

0800d4ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b08a      	sub	sp, #40	; 0x28
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	60f8      	str	r0, [r7, #12]
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	607a      	str	r2, [r7, #4]
 800d4f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d109      	bne.n	800d518 <xTimerGenericCommand+0x2c>
 800d504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d508:	f383 8811 	msr	BASEPRI, r3
 800d50c:	f3bf 8f6f 	isb	sy
 800d510:	f3bf 8f4f 	dsb	sy
 800d514:	623b      	str	r3, [r7, #32]
 800d516:	e7fe      	b.n	800d516 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d518:	4b19      	ldr	r3, [pc, #100]	; (800d580 <xTimerGenericCommand+0x94>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d02a      	beq.n	800d576 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	2b05      	cmp	r3, #5
 800d530:	dc18      	bgt.n	800d564 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d532:	f7ff fd5f 	bl	800cff4 <xTaskGetSchedulerState>
 800d536:	4603      	mov	r3, r0
 800d538:	2b02      	cmp	r3, #2
 800d53a:	d109      	bne.n	800d550 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d53c:	4b10      	ldr	r3, [pc, #64]	; (800d580 <xTimerGenericCommand+0x94>)
 800d53e:	6818      	ldr	r0, [r3, #0]
 800d540:	f107 0114 	add.w	r1, r7, #20
 800d544:	2300      	movs	r3, #0
 800d546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d548:	f7fe f8bc 	bl	800b6c4 <xQueueGenericSend>
 800d54c:	6278      	str	r0, [r7, #36]	; 0x24
 800d54e:	e012      	b.n	800d576 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d550:	4b0b      	ldr	r3, [pc, #44]	; (800d580 <xTimerGenericCommand+0x94>)
 800d552:	6818      	ldr	r0, [r3, #0]
 800d554:	f107 0114 	add.w	r1, r7, #20
 800d558:	2300      	movs	r3, #0
 800d55a:	2200      	movs	r2, #0
 800d55c:	f7fe f8b2 	bl	800b6c4 <xQueueGenericSend>
 800d560:	6278      	str	r0, [r7, #36]	; 0x24
 800d562:	e008      	b.n	800d576 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d564:	4b06      	ldr	r3, [pc, #24]	; (800d580 <xTimerGenericCommand+0x94>)
 800d566:	6818      	ldr	r0, [r3, #0]
 800d568:	f107 0114 	add.w	r1, r7, #20
 800d56c:	2300      	movs	r3, #0
 800d56e:	683a      	ldr	r2, [r7, #0]
 800d570:	f7fe f9a2 	bl	800b8b8 <xQueueGenericSendFromISR>
 800d574:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3728      	adds	r7, #40	; 0x28
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	240022bc 	.word	0x240022bc

0800d584 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b088      	sub	sp, #32
 800d588:	af02      	add	r7, sp, #8
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d58e:	4b22      	ldr	r3, [pc, #136]	; (800d618 <prvProcessExpiredTimer+0x94>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	68db      	ldr	r3, [r3, #12]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	3304      	adds	r3, #4
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7fd fe7b 	bl	800b298 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d5a8:	f003 0304 	and.w	r3, r3, #4
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d021      	beq.n	800d5f4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	699a      	ldr	r2, [r3, #24]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	18d1      	adds	r1, r2, r3
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	683a      	ldr	r2, [r7, #0]
 800d5bc:	6978      	ldr	r0, [r7, #20]
 800d5be:	f000 f8d1 	bl	800d764 <prvInsertTimerInActiveList>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d01e      	beq.n	800d606 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	9300      	str	r3, [sp, #0]
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	687a      	ldr	r2, [r7, #4]
 800d5d0:	2100      	movs	r1, #0
 800d5d2:	6978      	ldr	r0, [r7, #20]
 800d5d4:	f7ff ff8a 	bl	800d4ec <xTimerGenericCommand>
 800d5d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d112      	bne.n	800d606 <prvProcessExpiredTimer+0x82>
 800d5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e4:	f383 8811 	msr	BASEPRI, r3
 800d5e8:	f3bf 8f6f 	isb	sy
 800d5ec:	f3bf 8f4f 	dsb	sy
 800d5f0:	60fb      	str	r3, [r7, #12]
 800d5f2:	e7fe      	b.n	800d5f2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d5fa:	f023 0301 	bic.w	r3, r3, #1
 800d5fe:	b2da      	uxtb	r2, r3
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	6a1b      	ldr	r3, [r3, #32]
 800d60a:	6978      	ldr	r0, [r7, #20]
 800d60c:	4798      	blx	r3
}
 800d60e:	bf00      	nop
 800d610:	3718      	adds	r7, #24
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	240022b4 	.word	0x240022b4

0800d61c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d624:	f107 0308 	add.w	r3, r7, #8
 800d628:	4618      	mov	r0, r3
 800d62a:	f000 f857 	bl	800d6dc <prvGetNextExpireTime>
 800d62e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	4619      	mov	r1, r3
 800d634:	68f8      	ldr	r0, [r7, #12]
 800d636:	f000 f803 	bl	800d640 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d63a:	f000 f8d5 	bl	800d7e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d63e:	e7f1      	b.n	800d624 <prvTimerTask+0x8>

0800d640 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d64a:	f7ff f8ef 	bl	800c82c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d64e:	f107 0308 	add.w	r3, r7, #8
 800d652:	4618      	mov	r0, r3
 800d654:	f000 f866 	bl	800d724 <prvSampleTimeNow>
 800d658:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d130      	bne.n	800d6c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d10a      	bne.n	800d67c <prvProcessTimerOrBlockTask+0x3c>
 800d666:	687a      	ldr	r2, [r7, #4]
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d806      	bhi.n	800d67c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d66e:	f7ff f8eb 	bl	800c848 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d672:	68f9      	ldr	r1, [r7, #12]
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f7ff ff85 	bl	800d584 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d67a:	e024      	b.n	800d6c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d008      	beq.n	800d694 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d682:	4b13      	ldr	r3, [pc, #76]	; (800d6d0 <prvProcessTimerOrBlockTask+0x90>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d101      	bne.n	800d690 <prvProcessTimerOrBlockTask+0x50>
 800d68c:	2301      	movs	r3, #1
 800d68e:	e000      	b.n	800d692 <prvProcessTimerOrBlockTask+0x52>
 800d690:	2300      	movs	r3, #0
 800d692:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d694:	4b0f      	ldr	r3, [pc, #60]	; (800d6d4 <prvProcessTimerOrBlockTask+0x94>)
 800d696:	6818      	ldr	r0, [r3, #0]
 800d698:	687a      	ldr	r2, [r7, #4]
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	1ad3      	subs	r3, r2, r3
 800d69e:	683a      	ldr	r2, [r7, #0]
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	f7fe fdd9 	bl	800c258 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d6a6:	f7ff f8cf 	bl	800c848 <xTaskResumeAll>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d10a      	bne.n	800d6c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d6b0:	4b09      	ldr	r3, [pc, #36]	; (800d6d8 <prvProcessTimerOrBlockTask+0x98>)
 800d6b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6b6:	601a      	str	r2, [r3, #0]
 800d6b8:	f3bf 8f4f 	dsb	sy
 800d6bc:	f3bf 8f6f 	isb	sy
}
 800d6c0:	e001      	b.n	800d6c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d6c2:	f7ff f8c1 	bl	800c848 <xTaskResumeAll>
}
 800d6c6:	bf00      	nop
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	240022b8 	.word	0x240022b8
 800d6d4:	240022bc 	.word	0x240022bc
 800d6d8:	e000ed04 	.word	0xe000ed04

0800d6dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b085      	sub	sp, #20
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d6e4:	4b0e      	ldr	r3, [pc, #56]	; (800d720 <prvGetNextExpireTime+0x44>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d101      	bne.n	800d6f2 <prvGetNextExpireTime+0x16>
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	e000      	b.n	800d6f4 <prvGetNextExpireTime+0x18>
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d105      	bne.n	800d70c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d700:	4b07      	ldr	r3, [pc, #28]	; (800d720 <prvGetNextExpireTime+0x44>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	68db      	ldr	r3, [r3, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	60fb      	str	r3, [r7, #12]
 800d70a:	e001      	b.n	800d710 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d70c:	2300      	movs	r3, #0
 800d70e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d710:	68fb      	ldr	r3, [r7, #12]
}
 800d712:	4618      	mov	r0, r3
 800d714:	3714      	adds	r7, #20
 800d716:	46bd      	mov	sp, r7
 800d718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71c:	4770      	bx	lr
 800d71e:	bf00      	nop
 800d720:	240022b4 	.word	0x240022b4

0800d724 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b084      	sub	sp, #16
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d72c:	f7ff f928 	bl	800c980 <xTaskGetTickCount>
 800d730:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d732:	4b0b      	ldr	r3, [pc, #44]	; (800d760 <prvSampleTimeNow+0x3c>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	68fa      	ldr	r2, [r7, #12]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d205      	bcs.n	800d748 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d73c:	f000 f918 	bl	800d970 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2201      	movs	r2, #1
 800d744:	601a      	str	r2, [r3, #0]
 800d746:	e002      	b.n	800d74e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2200      	movs	r2, #0
 800d74c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d74e:	4a04      	ldr	r2, [pc, #16]	; (800d760 <prvSampleTimeNow+0x3c>)
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d754:	68fb      	ldr	r3, [r7, #12]
}
 800d756:	4618      	mov	r0, r3
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	240022c4 	.word	0x240022c4

0800d764 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b086      	sub	sp, #24
 800d768:	af00      	add	r7, sp, #0
 800d76a:	60f8      	str	r0, [r7, #12]
 800d76c:	60b9      	str	r1, [r7, #8]
 800d76e:	607a      	str	r2, [r7, #4]
 800d770:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d772:	2300      	movs	r3, #0
 800d774:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	68ba      	ldr	r2, [r7, #8]
 800d77a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	68fa      	ldr	r2, [r7, #12]
 800d780:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d782:	68ba      	ldr	r2, [r7, #8]
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	429a      	cmp	r2, r3
 800d788:	d812      	bhi.n	800d7b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d78a:	687a      	ldr	r2, [r7, #4]
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	1ad2      	subs	r2, r2, r3
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	699b      	ldr	r3, [r3, #24]
 800d794:	429a      	cmp	r2, r3
 800d796:	d302      	bcc.n	800d79e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d798:	2301      	movs	r3, #1
 800d79a:	617b      	str	r3, [r7, #20]
 800d79c:	e01b      	b.n	800d7d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d79e:	4b10      	ldr	r3, [pc, #64]	; (800d7e0 <prvInsertTimerInActiveList+0x7c>)
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	3304      	adds	r3, #4
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	4610      	mov	r0, r2
 800d7aa:	f7fd fd3c 	bl	800b226 <vListInsert>
 800d7ae:	e012      	b.n	800d7d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d7b0:	687a      	ldr	r2, [r7, #4]
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d206      	bcs.n	800d7c6 <prvInsertTimerInActiveList+0x62>
 800d7b8:	68ba      	ldr	r2, [r7, #8]
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d302      	bcc.n	800d7c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	617b      	str	r3, [r7, #20]
 800d7c4:	e007      	b.n	800d7d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d7c6:	4b07      	ldr	r3, [pc, #28]	; (800d7e4 <prvInsertTimerInActiveList+0x80>)
 800d7c8:	681a      	ldr	r2, [r3, #0]
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	3304      	adds	r3, #4
 800d7ce:	4619      	mov	r1, r3
 800d7d0:	4610      	mov	r0, r2
 800d7d2:	f7fd fd28 	bl	800b226 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d7d6:	697b      	ldr	r3, [r7, #20]
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3718      	adds	r7, #24
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	240022b8 	.word	0x240022b8
 800d7e4:	240022b4 	.word	0x240022b4

0800d7e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b08c      	sub	sp, #48	; 0x30
 800d7ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d7ee:	e0ac      	b.n	800d94a <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	f2c0 80a8 	blt.w	800d948 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fe:	695b      	ldr	r3, [r3, #20]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d004      	beq.n	800d80e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d806:	3304      	adds	r3, #4
 800d808:	4618      	mov	r0, r3
 800d80a:	f7fd fd45 	bl	800b298 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d80e:	1d3b      	adds	r3, r7, #4
 800d810:	4618      	mov	r0, r3
 800d812:	f7ff ff87 	bl	800d724 <prvSampleTimeNow>
 800d816:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	2b09      	cmp	r3, #9
 800d81c:	f200 8095 	bhi.w	800d94a <prvProcessReceivedCommands+0x162>
 800d820:	a201      	add	r2, pc, #4	; (adr r2, 800d828 <prvProcessReceivedCommands+0x40>)
 800d822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d826:	bf00      	nop
 800d828:	0800d851 	.word	0x0800d851
 800d82c:	0800d851 	.word	0x0800d851
 800d830:	0800d851 	.word	0x0800d851
 800d834:	0800d8c3 	.word	0x0800d8c3
 800d838:	0800d8d7 	.word	0x0800d8d7
 800d83c:	0800d91f 	.word	0x0800d91f
 800d840:	0800d851 	.word	0x0800d851
 800d844:	0800d851 	.word	0x0800d851
 800d848:	0800d8c3 	.word	0x0800d8c3
 800d84c:	0800d8d7 	.word	0x0800d8d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d852:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d856:	f043 0301 	orr.w	r3, r3, #1
 800d85a:	b2da      	uxtb	r2, r3
 800d85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d862:	68fa      	ldr	r2, [r7, #12]
 800d864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d866:	699b      	ldr	r3, [r3, #24]
 800d868:	18d1      	adds	r1, r2, r3
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	6a3a      	ldr	r2, [r7, #32]
 800d86e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d870:	f7ff ff78 	bl	800d764 <prvInsertTimerInActiveList>
 800d874:	4603      	mov	r3, r0
 800d876:	2b00      	cmp	r3, #0
 800d878:	d067      	beq.n	800d94a <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87c:	6a1b      	ldr	r3, [r3, #32]
 800d87e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d880:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d884:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d888:	f003 0304 	and.w	r3, r3, #4
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d05c      	beq.n	800d94a <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d890:	68fa      	ldr	r2, [r7, #12]
 800d892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d894:	699b      	ldr	r3, [r3, #24]
 800d896:	441a      	add	r2, r3
 800d898:	2300      	movs	r3, #0
 800d89a:	9300      	str	r3, [sp, #0]
 800d89c:	2300      	movs	r3, #0
 800d89e:	2100      	movs	r1, #0
 800d8a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8a2:	f7ff fe23 	bl	800d4ec <xTimerGenericCommand>
 800d8a6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d14d      	bne.n	800d94a <prvProcessReceivedCommands+0x162>
 800d8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b2:	f383 8811 	msr	BASEPRI, r3
 800d8b6:	f3bf 8f6f 	isb	sy
 800d8ba:	f3bf 8f4f 	dsb	sy
 800d8be:	61bb      	str	r3, [r7, #24]
 800d8c0:	e7fe      	b.n	800d8c0 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d8c8:	f023 0301 	bic.w	r3, r3, #1
 800d8cc:	b2da      	uxtb	r2, r3
 800d8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800d8d4:	e039      	b.n	800d94a <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d8dc:	f043 0301 	orr.w	r3, r3, #1
 800d8e0:	b2da      	uxtb	r2, r3
 800d8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d8e8:	68fa      	ldr	r2, [r7, #12]
 800d8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f0:	699b      	ldr	r3, [r3, #24]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d109      	bne.n	800d90a <prvProcessReceivedCommands+0x122>
 800d8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8fa:	f383 8811 	msr	BASEPRI, r3
 800d8fe:	f3bf 8f6f 	isb	sy
 800d902:	f3bf 8f4f 	dsb	sy
 800d906:	617b      	str	r3, [r7, #20]
 800d908:	e7fe      	b.n	800d908 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90c:	699a      	ldr	r2, [r3, #24]
 800d90e:	6a3b      	ldr	r3, [r7, #32]
 800d910:	18d1      	adds	r1, r2, r3
 800d912:	6a3b      	ldr	r3, [r7, #32]
 800d914:	6a3a      	ldr	r2, [r7, #32]
 800d916:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d918:	f7ff ff24 	bl	800d764 <prvInsertTimerInActiveList>
					break;
 800d91c:	e015      	b.n	800d94a <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d920:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d924:	f003 0302 	and.w	r3, r3, #2
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d103      	bne.n	800d934 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800d92c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d92e:	f000 fbc9 	bl	800e0c4 <vPortFree>
 800d932:	e00a      	b.n	800d94a <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d936:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d93a:	f023 0301 	bic.w	r3, r3, #1
 800d93e:	b2da      	uxtb	r2, r3
 800d940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d946:	e000      	b.n	800d94a <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d948:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d94a:	4b08      	ldr	r3, [pc, #32]	; (800d96c <prvProcessReceivedCommands+0x184>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f107 0108 	add.w	r1, r7, #8
 800d952:	2200      	movs	r2, #0
 800d954:	4618      	mov	r0, r3
 800d956:	f7fe f8cd 	bl	800baf4 <xQueueReceive>
 800d95a:	4603      	mov	r3, r0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	f47f af47 	bne.w	800d7f0 <prvProcessReceivedCommands+0x8>
	}
}
 800d962:	bf00      	nop
 800d964:	3728      	adds	r7, #40	; 0x28
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	240022bc 	.word	0x240022bc

0800d970 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b088      	sub	sp, #32
 800d974:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d976:	e047      	b.n	800da08 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d978:	4b2d      	ldr	r3, [pc, #180]	; (800da30 <prvSwitchTimerLists+0xc0>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	68db      	ldr	r3, [r3, #12]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d982:	4b2b      	ldr	r3, [pc, #172]	; (800da30 <prvSwitchTimerLists+0xc0>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	68db      	ldr	r3, [r3, #12]
 800d98a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	3304      	adds	r3, #4
 800d990:	4618      	mov	r0, r3
 800d992:	f7fd fc81 	bl	800b298 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	6a1b      	ldr	r3, [r3, #32]
 800d99a:	68f8      	ldr	r0, [r7, #12]
 800d99c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d9a4:	f003 0304 	and.w	r3, r3, #4
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d02d      	beq.n	800da08 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	699b      	ldr	r3, [r3, #24]
 800d9b0:	693a      	ldr	r2, [r7, #16]
 800d9b2:	4413      	add	r3, r2
 800d9b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d9b6:	68ba      	ldr	r2, [r7, #8]
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d90e      	bls.n	800d9dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	68ba      	ldr	r2, [r7, #8]
 800d9c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	68fa      	ldr	r2, [r7, #12]
 800d9c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d9ca:	4b19      	ldr	r3, [pc, #100]	; (800da30 <prvSwitchTimerLists+0xc0>)
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	3304      	adds	r3, #4
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	4610      	mov	r0, r2
 800d9d6:	f7fd fc26 	bl	800b226 <vListInsert>
 800d9da:	e015      	b.n	800da08 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d9dc:	2300      	movs	r3, #0
 800d9de:	9300      	str	r3, [sp, #0]
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	693a      	ldr	r2, [r7, #16]
 800d9e4:	2100      	movs	r1, #0
 800d9e6:	68f8      	ldr	r0, [r7, #12]
 800d9e8:	f7ff fd80 	bl	800d4ec <xTimerGenericCommand>
 800d9ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d109      	bne.n	800da08 <prvSwitchTimerLists+0x98>
 800d9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f8:	f383 8811 	msr	BASEPRI, r3
 800d9fc:	f3bf 8f6f 	isb	sy
 800da00:	f3bf 8f4f 	dsb	sy
 800da04:	603b      	str	r3, [r7, #0]
 800da06:	e7fe      	b.n	800da06 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800da08:	4b09      	ldr	r3, [pc, #36]	; (800da30 <prvSwitchTimerLists+0xc0>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d1b2      	bne.n	800d978 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800da12:	4b07      	ldr	r3, [pc, #28]	; (800da30 <prvSwitchTimerLists+0xc0>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800da18:	4b06      	ldr	r3, [pc, #24]	; (800da34 <prvSwitchTimerLists+0xc4>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4a04      	ldr	r2, [pc, #16]	; (800da30 <prvSwitchTimerLists+0xc0>)
 800da1e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800da20:	4a04      	ldr	r2, [pc, #16]	; (800da34 <prvSwitchTimerLists+0xc4>)
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	6013      	str	r3, [r2, #0]
}
 800da26:	bf00      	nop
 800da28:	3718      	adds	r7, #24
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}
 800da2e:	bf00      	nop
 800da30:	240022b4 	.word	0x240022b4
 800da34:	240022b8 	.word	0x240022b8

0800da38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b082      	sub	sp, #8
 800da3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800da3e:	f000 f965 	bl	800dd0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800da42:	4b15      	ldr	r3, [pc, #84]	; (800da98 <prvCheckForValidListAndQueue+0x60>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d120      	bne.n	800da8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800da4a:	4814      	ldr	r0, [pc, #80]	; (800da9c <prvCheckForValidListAndQueue+0x64>)
 800da4c:	f7fd fb9a 	bl	800b184 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800da50:	4813      	ldr	r0, [pc, #76]	; (800daa0 <prvCheckForValidListAndQueue+0x68>)
 800da52:	f7fd fb97 	bl	800b184 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800da56:	4b13      	ldr	r3, [pc, #76]	; (800daa4 <prvCheckForValidListAndQueue+0x6c>)
 800da58:	4a10      	ldr	r2, [pc, #64]	; (800da9c <prvCheckForValidListAndQueue+0x64>)
 800da5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800da5c:	4b12      	ldr	r3, [pc, #72]	; (800daa8 <prvCheckForValidListAndQueue+0x70>)
 800da5e:	4a10      	ldr	r2, [pc, #64]	; (800daa0 <prvCheckForValidListAndQueue+0x68>)
 800da60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800da62:	2300      	movs	r3, #0
 800da64:	9300      	str	r3, [sp, #0]
 800da66:	4b11      	ldr	r3, [pc, #68]	; (800daac <prvCheckForValidListAndQueue+0x74>)
 800da68:	4a11      	ldr	r2, [pc, #68]	; (800dab0 <prvCheckForValidListAndQueue+0x78>)
 800da6a:	210c      	movs	r1, #12
 800da6c:	200a      	movs	r0, #10
 800da6e:	f7fd fca5 	bl	800b3bc <xQueueGenericCreateStatic>
 800da72:	4602      	mov	r2, r0
 800da74:	4b08      	ldr	r3, [pc, #32]	; (800da98 <prvCheckForValidListAndQueue+0x60>)
 800da76:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800da78:	4b07      	ldr	r3, [pc, #28]	; (800da98 <prvCheckForValidListAndQueue+0x60>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d005      	beq.n	800da8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800da80:	4b05      	ldr	r3, [pc, #20]	; (800da98 <prvCheckForValidListAndQueue+0x60>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	490b      	ldr	r1, [pc, #44]	; (800dab4 <prvCheckForValidListAndQueue+0x7c>)
 800da86:	4618      	mov	r0, r3
 800da88:	f7fe fbbe 	bl	800c208 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800da8c:	f000 f96c 	bl	800dd68 <vPortExitCritical>
}
 800da90:	bf00      	nop
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	240022bc 	.word	0x240022bc
 800da9c:	2400228c 	.word	0x2400228c
 800daa0:	240022a0 	.word	0x240022a0
 800daa4:	240022b4 	.word	0x240022b4
 800daa8:	240022b8 	.word	0x240022b8
 800daac:	24002340 	.word	0x24002340
 800dab0:	240022c8 	.word	0x240022c8
 800dab4:	08018508 	.word	0x08018508

0800dab8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dab8:	b480      	push	{r7}
 800daba:	b085      	sub	sp, #20
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	60f8      	str	r0, [r7, #12]
 800dac0:	60b9      	str	r1, [r7, #8]
 800dac2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	3b04      	subs	r3, #4
 800dac8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	3b04      	subs	r3, #4
 800dad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	f023 0201 	bic.w	r2, r3, #1
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	3b04      	subs	r3, #4
 800dae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dae8:	4a0c      	ldr	r2, [pc, #48]	; (800db1c <pxPortInitialiseStack+0x64>)
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	3b14      	subs	r3, #20
 800daf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800daf4:	687a      	ldr	r2, [r7, #4]
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	3b04      	subs	r3, #4
 800dafe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f06f 0202 	mvn.w	r2, #2
 800db06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	3b20      	subs	r3, #32
 800db0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800db0e:	68fb      	ldr	r3, [r7, #12]
}
 800db10:	4618      	mov	r0, r3
 800db12:	3714      	adds	r7, #20
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr
 800db1c:	0800db21 	.word	0x0800db21

0800db20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800db20:	b480      	push	{r7}
 800db22:	b085      	sub	sp, #20
 800db24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800db26:	2300      	movs	r3, #0
 800db28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800db2a:	4b11      	ldr	r3, [pc, #68]	; (800db70 <prvTaskExitError+0x50>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db32:	d009      	beq.n	800db48 <prvTaskExitError+0x28>
 800db34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db38:	f383 8811 	msr	BASEPRI, r3
 800db3c:	f3bf 8f6f 	isb	sy
 800db40:	f3bf 8f4f 	dsb	sy
 800db44:	60fb      	str	r3, [r7, #12]
 800db46:	e7fe      	b.n	800db46 <prvTaskExitError+0x26>
 800db48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db4c:	f383 8811 	msr	BASEPRI, r3
 800db50:	f3bf 8f6f 	isb	sy
 800db54:	f3bf 8f4f 	dsb	sy
 800db58:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800db5a:	bf00      	nop
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d0fc      	beq.n	800db5c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800db62:	bf00      	nop
 800db64:	3714      	adds	r7, #20
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	24000024 	.word	0x24000024
	...

0800db80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800db80:	4b07      	ldr	r3, [pc, #28]	; (800dba0 <pxCurrentTCBConst2>)
 800db82:	6819      	ldr	r1, [r3, #0]
 800db84:	6808      	ldr	r0, [r1, #0]
 800db86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db8a:	f380 8809 	msr	PSP, r0
 800db8e:	f3bf 8f6f 	isb	sy
 800db92:	f04f 0000 	mov.w	r0, #0
 800db96:	f380 8811 	msr	BASEPRI, r0
 800db9a:	4770      	bx	lr
 800db9c:	f3af 8000 	nop.w

0800dba0 <pxCurrentTCBConst2>:
 800dba0:	24002160 	.word	0x24002160
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dba4:	bf00      	nop
 800dba6:	bf00      	nop

0800dba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dba8:	4808      	ldr	r0, [pc, #32]	; (800dbcc <prvPortStartFirstTask+0x24>)
 800dbaa:	6800      	ldr	r0, [r0, #0]
 800dbac:	6800      	ldr	r0, [r0, #0]
 800dbae:	f380 8808 	msr	MSP, r0
 800dbb2:	f04f 0000 	mov.w	r0, #0
 800dbb6:	f380 8814 	msr	CONTROL, r0
 800dbba:	b662      	cpsie	i
 800dbbc:	b661      	cpsie	f
 800dbbe:	f3bf 8f4f 	dsb	sy
 800dbc2:	f3bf 8f6f 	isb	sy
 800dbc6:	df00      	svc	0
 800dbc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dbca:	bf00      	nop
 800dbcc:	e000ed08 	.word	0xe000ed08

0800dbd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b086      	sub	sp, #24
 800dbd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dbd6:	4b44      	ldr	r3, [pc, #272]	; (800dce8 <xPortStartScheduler+0x118>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4a44      	ldr	r2, [pc, #272]	; (800dcec <xPortStartScheduler+0x11c>)
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	d109      	bne.n	800dbf4 <xPortStartScheduler+0x24>
 800dbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe4:	f383 8811 	msr	BASEPRI, r3
 800dbe8:	f3bf 8f6f 	isb	sy
 800dbec:	f3bf 8f4f 	dsb	sy
 800dbf0:	613b      	str	r3, [r7, #16]
 800dbf2:	e7fe      	b.n	800dbf2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dbf4:	4b3c      	ldr	r3, [pc, #240]	; (800dce8 <xPortStartScheduler+0x118>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4a3d      	ldr	r2, [pc, #244]	; (800dcf0 <xPortStartScheduler+0x120>)
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d109      	bne.n	800dc12 <xPortStartScheduler+0x42>
 800dbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc02:	f383 8811 	msr	BASEPRI, r3
 800dc06:	f3bf 8f6f 	isb	sy
 800dc0a:	f3bf 8f4f 	dsb	sy
 800dc0e:	60fb      	str	r3, [r7, #12]
 800dc10:	e7fe      	b.n	800dc10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dc12:	4b38      	ldr	r3, [pc, #224]	; (800dcf4 <xPortStartScheduler+0x124>)
 800dc14:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	b2db      	uxtb	r3, r3
 800dc1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	22ff      	movs	r2, #255	; 0xff
 800dc22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dc2c:	78fb      	ldrb	r3, [r7, #3]
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dc34:	b2da      	uxtb	r2, r3
 800dc36:	4b30      	ldr	r3, [pc, #192]	; (800dcf8 <xPortStartScheduler+0x128>)
 800dc38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dc3a:	4b30      	ldr	r3, [pc, #192]	; (800dcfc <xPortStartScheduler+0x12c>)
 800dc3c:	2207      	movs	r2, #7
 800dc3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc40:	e009      	b.n	800dc56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800dc42:	4b2e      	ldr	r3, [pc, #184]	; (800dcfc <xPortStartScheduler+0x12c>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	3b01      	subs	r3, #1
 800dc48:	4a2c      	ldr	r2, [pc, #176]	; (800dcfc <xPortStartScheduler+0x12c>)
 800dc4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dc4c:	78fb      	ldrb	r3, [r7, #3]
 800dc4e:	b2db      	uxtb	r3, r3
 800dc50:	005b      	lsls	r3, r3, #1
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc56:	78fb      	ldrb	r3, [r7, #3]
 800dc58:	b2db      	uxtb	r3, r3
 800dc5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc5e:	2b80      	cmp	r3, #128	; 0x80
 800dc60:	d0ef      	beq.n	800dc42 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dc62:	4b26      	ldr	r3, [pc, #152]	; (800dcfc <xPortStartScheduler+0x12c>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f1c3 0307 	rsb	r3, r3, #7
 800dc6a:	2b04      	cmp	r3, #4
 800dc6c:	d009      	beq.n	800dc82 <xPortStartScheduler+0xb2>
 800dc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc72:	f383 8811 	msr	BASEPRI, r3
 800dc76:	f3bf 8f6f 	isb	sy
 800dc7a:	f3bf 8f4f 	dsb	sy
 800dc7e:	60bb      	str	r3, [r7, #8]
 800dc80:	e7fe      	b.n	800dc80 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dc82:	4b1e      	ldr	r3, [pc, #120]	; (800dcfc <xPortStartScheduler+0x12c>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	021b      	lsls	r3, r3, #8
 800dc88:	4a1c      	ldr	r2, [pc, #112]	; (800dcfc <xPortStartScheduler+0x12c>)
 800dc8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dc8c:	4b1b      	ldr	r3, [pc, #108]	; (800dcfc <xPortStartScheduler+0x12c>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dc94:	4a19      	ldr	r2, [pc, #100]	; (800dcfc <xPortStartScheduler+0x12c>)
 800dc96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	b2da      	uxtb	r2, r3
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dca0:	4b17      	ldr	r3, [pc, #92]	; (800dd00 <xPortStartScheduler+0x130>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4a16      	ldr	r2, [pc, #88]	; (800dd00 <xPortStartScheduler+0x130>)
 800dca6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dcaa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dcac:	4b14      	ldr	r3, [pc, #80]	; (800dd00 <xPortStartScheduler+0x130>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	4a13      	ldr	r2, [pc, #76]	; (800dd00 <xPortStartScheduler+0x130>)
 800dcb2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dcb6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dcb8:	f000 f8d6 	bl	800de68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dcbc:	4b11      	ldr	r3, [pc, #68]	; (800dd04 <xPortStartScheduler+0x134>)
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dcc2:	f000 f8f5 	bl	800deb0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dcc6:	4b10      	ldr	r3, [pc, #64]	; (800dd08 <xPortStartScheduler+0x138>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	4a0f      	ldr	r2, [pc, #60]	; (800dd08 <xPortStartScheduler+0x138>)
 800dccc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dcd0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dcd2:	f7ff ff69 	bl	800dba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dcd6:	f7fe ff2d 	bl	800cb34 <vTaskSwitchContext>
	prvTaskExitError();
 800dcda:	f7ff ff21 	bl	800db20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dcde:	2300      	movs	r3, #0
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3718      	adds	r7, #24
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	e000ed00 	.word	0xe000ed00
 800dcec:	410fc271 	.word	0x410fc271
 800dcf0:	410fc270 	.word	0x410fc270
 800dcf4:	e000e400 	.word	0xe000e400
 800dcf8:	24002388 	.word	0x24002388
 800dcfc:	2400238c 	.word	0x2400238c
 800dd00:	e000ed20 	.word	0xe000ed20
 800dd04:	24000024 	.word	0x24000024
 800dd08:	e000ef34 	.word	0xe000ef34

0800dd0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b083      	sub	sp, #12
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd16:	f383 8811 	msr	BASEPRI, r3
 800dd1a:	f3bf 8f6f 	isb	sy
 800dd1e:	f3bf 8f4f 	dsb	sy
 800dd22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dd24:	4b0e      	ldr	r3, [pc, #56]	; (800dd60 <vPortEnterCritical+0x54>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	3301      	adds	r3, #1
 800dd2a:	4a0d      	ldr	r2, [pc, #52]	; (800dd60 <vPortEnterCritical+0x54>)
 800dd2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dd2e:	4b0c      	ldr	r3, [pc, #48]	; (800dd60 <vPortEnterCritical+0x54>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	2b01      	cmp	r3, #1
 800dd34:	d10e      	bne.n	800dd54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dd36:	4b0b      	ldr	r3, [pc, #44]	; (800dd64 <vPortEnterCritical+0x58>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d009      	beq.n	800dd54 <vPortEnterCritical+0x48>
 800dd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd44:	f383 8811 	msr	BASEPRI, r3
 800dd48:	f3bf 8f6f 	isb	sy
 800dd4c:	f3bf 8f4f 	dsb	sy
 800dd50:	603b      	str	r3, [r7, #0]
 800dd52:	e7fe      	b.n	800dd52 <vPortEnterCritical+0x46>
	}
}
 800dd54:	bf00      	nop
 800dd56:	370c      	adds	r7, #12
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr
 800dd60:	24000024 	.word	0x24000024
 800dd64:	e000ed04 	.word	0xe000ed04

0800dd68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b083      	sub	sp, #12
 800dd6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dd6e:	4b11      	ldr	r3, [pc, #68]	; (800ddb4 <vPortExitCritical+0x4c>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d109      	bne.n	800dd8a <vPortExitCritical+0x22>
 800dd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd7a:	f383 8811 	msr	BASEPRI, r3
 800dd7e:	f3bf 8f6f 	isb	sy
 800dd82:	f3bf 8f4f 	dsb	sy
 800dd86:	607b      	str	r3, [r7, #4]
 800dd88:	e7fe      	b.n	800dd88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800dd8a:	4b0a      	ldr	r3, [pc, #40]	; (800ddb4 <vPortExitCritical+0x4c>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	3b01      	subs	r3, #1
 800dd90:	4a08      	ldr	r2, [pc, #32]	; (800ddb4 <vPortExitCritical+0x4c>)
 800dd92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dd94:	4b07      	ldr	r3, [pc, #28]	; (800ddb4 <vPortExitCritical+0x4c>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d104      	bne.n	800dda6 <vPortExitCritical+0x3e>
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800dda6:	bf00      	nop
 800dda8:	370c      	adds	r7, #12
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb0:	4770      	bx	lr
 800ddb2:	bf00      	nop
 800ddb4:	24000024 	.word	0x24000024
	...

0800ddc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ddc0:	f3ef 8009 	mrs	r0, PSP
 800ddc4:	f3bf 8f6f 	isb	sy
 800ddc8:	4b15      	ldr	r3, [pc, #84]	; (800de20 <pxCurrentTCBConst>)
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	f01e 0f10 	tst.w	lr, #16
 800ddd0:	bf08      	it	eq
 800ddd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ddd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddda:	6010      	str	r0, [r2, #0]
 800dddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dde0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dde4:	f380 8811 	msr	BASEPRI, r0
 800dde8:	f3bf 8f4f 	dsb	sy
 800ddec:	f3bf 8f6f 	isb	sy
 800ddf0:	f7fe fea0 	bl	800cb34 <vTaskSwitchContext>
 800ddf4:	f04f 0000 	mov.w	r0, #0
 800ddf8:	f380 8811 	msr	BASEPRI, r0
 800ddfc:	bc09      	pop	{r0, r3}
 800ddfe:	6819      	ldr	r1, [r3, #0]
 800de00:	6808      	ldr	r0, [r1, #0]
 800de02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de06:	f01e 0f10 	tst.w	lr, #16
 800de0a:	bf08      	it	eq
 800de0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800de10:	f380 8809 	msr	PSP, r0
 800de14:	f3bf 8f6f 	isb	sy
 800de18:	4770      	bx	lr
 800de1a:	bf00      	nop
 800de1c:	f3af 8000 	nop.w

0800de20 <pxCurrentTCBConst>:
 800de20:	24002160 	.word	0x24002160
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800de24:	bf00      	nop
 800de26:	bf00      	nop

0800de28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
	__asm volatile
 800de2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de32:	f383 8811 	msr	BASEPRI, r3
 800de36:	f3bf 8f6f 	isb	sy
 800de3a:	f3bf 8f4f 	dsb	sy
 800de3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800de40:	f7fe fdc0 	bl	800c9c4 <xTaskIncrementTick>
 800de44:	4603      	mov	r3, r0
 800de46:	2b00      	cmp	r3, #0
 800de48:	d003      	beq.n	800de52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800de4a:	4b06      	ldr	r3, [pc, #24]	; (800de64 <SysTick_Handler+0x3c>)
 800de4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de50:	601a      	str	r2, [r3, #0]
 800de52:	2300      	movs	r3, #0
 800de54:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800de5c:	bf00      	nop
 800de5e:	3708      	adds	r7, #8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	e000ed04 	.word	0xe000ed04

0800de68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800de68:	b480      	push	{r7}
 800de6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800de6c:	4b0b      	ldr	r3, [pc, #44]	; (800de9c <vPortSetupTimerInterrupt+0x34>)
 800de6e:	2200      	movs	r2, #0
 800de70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800de72:	4b0b      	ldr	r3, [pc, #44]	; (800dea0 <vPortSetupTimerInterrupt+0x38>)
 800de74:	2200      	movs	r2, #0
 800de76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800de78:	4b0a      	ldr	r3, [pc, #40]	; (800dea4 <vPortSetupTimerInterrupt+0x3c>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	4a0a      	ldr	r2, [pc, #40]	; (800dea8 <vPortSetupTimerInterrupt+0x40>)
 800de7e:	fba2 2303 	umull	r2, r3, r2, r3
 800de82:	099b      	lsrs	r3, r3, #6
 800de84:	4a09      	ldr	r2, [pc, #36]	; (800deac <vPortSetupTimerInterrupt+0x44>)
 800de86:	3b01      	subs	r3, #1
 800de88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800de8a:	4b04      	ldr	r3, [pc, #16]	; (800de9c <vPortSetupTimerInterrupt+0x34>)
 800de8c:	2207      	movs	r2, #7
 800de8e:	601a      	str	r2, [r3, #0]
}
 800de90:	bf00      	nop
 800de92:	46bd      	mov	sp, r7
 800de94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de98:	4770      	bx	lr
 800de9a:	bf00      	nop
 800de9c:	e000e010 	.word	0xe000e010
 800dea0:	e000e018 	.word	0xe000e018
 800dea4:	24000000 	.word	0x24000000
 800dea8:	10624dd3 	.word	0x10624dd3
 800deac:	e000e014 	.word	0xe000e014

0800deb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800deb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dec0 <vPortEnableVFP+0x10>
 800deb4:	6801      	ldr	r1, [r0, #0]
 800deb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800deba:	6001      	str	r1, [r0, #0]
 800debc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800debe:	bf00      	nop
 800dec0:	e000ed88 	.word	0xe000ed88

0800dec4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dec4:	b480      	push	{r7}
 800dec6:	b085      	sub	sp, #20
 800dec8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800deca:	f3ef 8305 	mrs	r3, IPSR
 800dece:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2b0f      	cmp	r3, #15
 800ded4:	d913      	bls.n	800defe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ded6:	4a16      	ldr	r2, [pc, #88]	; (800df30 <vPortValidateInterruptPriority+0x6c>)
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	4413      	add	r3, r2
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dee0:	4b14      	ldr	r3, [pc, #80]	; (800df34 <vPortValidateInterruptPriority+0x70>)
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	7afa      	ldrb	r2, [r7, #11]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d209      	bcs.n	800defe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800deea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deee:	f383 8811 	msr	BASEPRI, r3
 800def2:	f3bf 8f6f 	isb	sy
 800def6:	f3bf 8f4f 	dsb	sy
 800defa:	607b      	str	r3, [r7, #4]
 800defc:	e7fe      	b.n	800defc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800defe:	4b0e      	ldr	r3, [pc, #56]	; (800df38 <vPortValidateInterruptPriority+0x74>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800df06:	4b0d      	ldr	r3, [pc, #52]	; (800df3c <vPortValidateInterruptPriority+0x78>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	429a      	cmp	r2, r3
 800df0c:	d909      	bls.n	800df22 <vPortValidateInterruptPriority+0x5e>
 800df0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df12:	f383 8811 	msr	BASEPRI, r3
 800df16:	f3bf 8f6f 	isb	sy
 800df1a:	f3bf 8f4f 	dsb	sy
 800df1e:	603b      	str	r3, [r7, #0]
 800df20:	e7fe      	b.n	800df20 <vPortValidateInterruptPriority+0x5c>
	}
 800df22:	bf00      	nop
 800df24:	3714      	adds	r7, #20
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr
 800df2e:	bf00      	nop
 800df30:	e000e3f0 	.word	0xe000e3f0
 800df34:	24002388 	.word	0x24002388
 800df38:	e000ed0c 	.word	0xe000ed0c
 800df3c:	2400238c 	.word	0x2400238c

0800df40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b08a      	sub	sp, #40	; 0x28
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800df48:	2300      	movs	r3, #0
 800df4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800df4c:	f7fe fc6e 	bl	800c82c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800df50:	4b57      	ldr	r3, [pc, #348]	; (800e0b0 <pvPortMalloc+0x170>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d101      	bne.n	800df5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800df58:	f000 f90c 	bl	800e174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800df5c:	4b55      	ldr	r3, [pc, #340]	; (800e0b4 <pvPortMalloc+0x174>)
 800df5e:	681a      	ldr	r2, [r3, #0]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	4013      	ands	r3, r2
 800df64:	2b00      	cmp	r3, #0
 800df66:	f040 808c 	bne.w	800e082 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d01c      	beq.n	800dfaa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800df70:	2208      	movs	r2, #8
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	4413      	add	r3, r2
 800df76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f003 0307 	and.w	r3, r3, #7
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d013      	beq.n	800dfaa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f023 0307 	bic.w	r3, r3, #7
 800df88:	3308      	adds	r3, #8
 800df8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f003 0307 	and.w	r3, r3, #7
 800df92:	2b00      	cmp	r3, #0
 800df94:	d009      	beq.n	800dfaa <pvPortMalloc+0x6a>
 800df96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df9a:	f383 8811 	msr	BASEPRI, r3
 800df9e:	f3bf 8f6f 	isb	sy
 800dfa2:	f3bf 8f4f 	dsb	sy
 800dfa6:	617b      	str	r3, [r7, #20]
 800dfa8:	e7fe      	b.n	800dfa8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d068      	beq.n	800e082 <pvPortMalloc+0x142>
 800dfb0:	4b41      	ldr	r3, [pc, #260]	; (800e0b8 <pvPortMalloc+0x178>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	687a      	ldr	r2, [r7, #4]
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d863      	bhi.n	800e082 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dfba:	4b40      	ldr	r3, [pc, #256]	; (800e0bc <pvPortMalloc+0x17c>)
 800dfbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dfbe:	4b3f      	ldr	r3, [pc, #252]	; (800e0bc <pvPortMalloc+0x17c>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dfc4:	e004      	b.n	800dfd0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800dfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd2:	685b      	ldr	r3, [r3, #4]
 800dfd4:	687a      	ldr	r2, [r7, #4]
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d903      	bls.n	800dfe2 <pvPortMalloc+0xa2>
 800dfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d1f1      	bne.n	800dfc6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dfe2:	4b33      	ldr	r3, [pc, #204]	; (800e0b0 <pvPortMalloc+0x170>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d04a      	beq.n	800e082 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dfec:	6a3b      	ldr	r3, [r7, #32]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	2208      	movs	r2, #8
 800dff2:	4413      	add	r3, r2
 800dff4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff8:	681a      	ldr	r2, [r3, #0]
 800dffa:	6a3b      	ldr	r3, [r7, #32]
 800dffc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e000:	685a      	ldr	r2, [r3, #4]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	1ad2      	subs	r2, r2, r3
 800e006:	2308      	movs	r3, #8
 800e008:	005b      	lsls	r3, r3, #1
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d91e      	bls.n	800e04c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e00e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	4413      	add	r3, r2
 800e014:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e016:	69bb      	ldr	r3, [r7, #24]
 800e018:	f003 0307 	and.w	r3, r3, #7
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d009      	beq.n	800e034 <pvPortMalloc+0xf4>
 800e020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e024:	f383 8811 	msr	BASEPRI, r3
 800e028:	f3bf 8f6f 	isb	sy
 800e02c:	f3bf 8f4f 	dsb	sy
 800e030:	613b      	str	r3, [r7, #16]
 800e032:	e7fe      	b.n	800e032 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e036:	685a      	ldr	r2, [r3, #4]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	1ad2      	subs	r2, r2, r3
 800e03c:	69bb      	ldr	r3, [r7, #24]
 800e03e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e046:	69b8      	ldr	r0, [r7, #24]
 800e048:	f000 f8f6 	bl	800e238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e04c:	4b1a      	ldr	r3, [pc, #104]	; (800e0b8 <pvPortMalloc+0x178>)
 800e04e:	681a      	ldr	r2, [r3, #0]
 800e050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	1ad3      	subs	r3, r2, r3
 800e056:	4a18      	ldr	r2, [pc, #96]	; (800e0b8 <pvPortMalloc+0x178>)
 800e058:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e05a:	4b17      	ldr	r3, [pc, #92]	; (800e0b8 <pvPortMalloc+0x178>)
 800e05c:	681a      	ldr	r2, [r3, #0]
 800e05e:	4b18      	ldr	r3, [pc, #96]	; (800e0c0 <pvPortMalloc+0x180>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	429a      	cmp	r2, r3
 800e064:	d203      	bcs.n	800e06e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e066:	4b14      	ldr	r3, [pc, #80]	; (800e0b8 <pvPortMalloc+0x178>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4a15      	ldr	r2, [pc, #84]	; (800e0c0 <pvPortMalloc+0x180>)
 800e06c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e070:	685a      	ldr	r2, [r3, #4]
 800e072:	4b10      	ldr	r3, [pc, #64]	; (800e0b4 <pvPortMalloc+0x174>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	431a      	orrs	r2, r3
 800e078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07e:	2200      	movs	r2, #0
 800e080:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e082:	f7fe fbe1 	bl	800c848 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e086:	69fb      	ldr	r3, [r7, #28]
 800e088:	f003 0307 	and.w	r3, r3, #7
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d009      	beq.n	800e0a4 <pvPortMalloc+0x164>
 800e090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e094:	f383 8811 	msr	BASEPRI, r3
 800e098:	f3bf 8f6f 	isb	sy
 800e09c:	f3bf 8f4f 	dsb	sy
 800e0a0:	60fb      	str	r3, [r7, #12]
 800e0a2:	e7fe      	b.n	800e0a2 <pvPortMalloc+0x162>
	return pvReturn;
 800e0a4:	69fb      	ldr	r3, [r7, #28]
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3728      	adds	r7, #40	; 0x28
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	2400a398 	.word	0x2400a398
 800e0b4:	2400a3a4 	.word	0x2400a3a4
 800e0b8:	2400a39c 	.word	0x2400a39c
 800e0bc:	2400a390 	.word	0x2400a390
 800e0c0:	2400a3a0 	.word	0x2400a3a0

0800e0c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b086      	sub	sp, #24
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d046      	beq.n	800e164 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e0d6:	2308      	movs	r3, #8
 800e0d8:	425b      	negs	r3, r3
 800e0da:	697a      	ldr	r2, [r7, #20]
 800e0dc:	4413      	add	r3, r2
 800e0de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	685a      	ldr	r2, [r3, #4]
 800e0e8:	4b20      	ldr	r3, [pc, #128]	; (800e16c <vPortFree+0xa8>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4013      	ands	r3, r2
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d109      	bne.n	800e106 <vPortFree+0x42>
 800e0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f6:	f383 8811 	msr	BASEPRI, r3
 800e0fa:	f3bf 8f6f 	isb	sy
 800e0fe:	f3bf 8f4f 	dsb	sy
 800e102:	60fb      	str	r3, [r7, #12]
 800e104:	e7fe      	b.n	800e104 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d009      	beq.n	800e122 <vPortFree+0x5e>
 800e10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	60bb      	str	r3, [r7, #8]
 800e120:	e7fe      	b.n	800e120 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	685a      	ldr	r2, [r3, #4]
 800e126:	4b11      	ldr	r3, [pc, #68]	; (800e16c <vPortFree+0xa8>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4013      	ands	r3, r2
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d019      	beq.n	800e164 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d115      	bne.n	800e164 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	685a      	ldr	r2, [r3, #4]
 800e13c:	4b0b      	ldr	r3, [pc, #44]	; (800e16c <vPortFree+0xa8>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	43db      	mvns	r3, r3
 800e142:	401a      	ands	r2, r3
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e148:	f7fe fb70 	bl	800c82c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	685a      	ldr	r2, [r3, #4]
 800e150:	4b07      	ldr	r3, [pc, #28]	; (800e170 <vPortFree+0xac>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4413      	add	r3, r2
 800e156:	4a06      	ldr	r2, [pc, #24]	; (800e170 <vPortFree+0xac>)
 800e158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e15a:	6938      	ldr	r0, [r7, #16]
 800e15c:	f000 f86c 	bl	800e238 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e160:	f7fe fb72 	bl	800c848 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e164:	bf00      	nop
 800e166:	3718      	adds	r7, #24
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	2400a3a4 	.word	0x2400a3a4
 800e170:	2400a39c 	.word	0x2400a39c

0800e174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e174:	b480      	push	{r7}
 800e176:	b085      	sub	sp, #20
 800e178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e17a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e17e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e180:	4b27      	ldr	r3, [pc, #156]	; (800e220 <prvHeapInit+0xac>)
 800e182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	f003 0307 	and.w	r3, r3, #7
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d00c      	beq.n	800e1a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	3307      	adds	r3, #7
 800e192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	f023 0307 	bic.w	r3, r3, #7
 800e19a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e19c:	68ba      	ldr	r2, [r7, #8]
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	1ad3      	subs	r3, r2, r3
 800e1a2:	4a1f      	ldr	r2, [pc, #124]	; (800e220 <prvHeapInit+0xac>)
 800e1a4:	4413      	add	r3, r2
 800e1a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e1ac:	4a1d      	ldr	r2, [pc, #116]	; (800e224 <prvHeapInit+0xb0>)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e1b2:	4b1c      	ldr	r3, [pc, #112]	; (800e224 <prvHeapInit+0xb0>)
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	68ba      	ldr	r2, [r7, #8]
 800e1bc:	4413      	add	r3, r2
 800e1be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e1c0:	2208      	movs	r2, #8
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	1a9b      	subs	r3, r3, r2
 800e1c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f023 0307 	bic.w	r3, r3, #7
 800e1ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	4a15      	ldr	r2, [pc, #84]	; (800e228 <prvHeapInit+0xb4>)
 800e1d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e1d6:	4b14      	ldr	r3, [pc, #80]	; (800e228 <prvHeapInit+0xb4>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e1de:	4b12      	ldr	r3, [pc, #72]	; (800e228 <prvHeapInit+0xb4>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	68fa      	ldr	r2, [r7, #12]
 800e1ee:	1ad2      	subs	r2, r2, r3
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e1f4:	4b0c      	ldr	r3, [pc, #48]	; (800e228 <prvHeapInit+0xb4>)
 800e1f6:	681a      	ldr	r2, [r3, #0]
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	4a0a      	ldr	r2, [pc, #40]	; (800e22c <prvHeapInit+0xb8>)
 800e202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	685b      	ldr	r3, [r3, #4]
 800e208:	4a09      	ldr	r2, [pc, #36]	; (800e230 <prvHeapInit+0xbc>)
 800e20a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e20c:	4b09      	ldr	r3, [pc, #36]	; (800e234 <prvHeapInit+0xc0>)
 800e20e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e212:	601a      	str	r2, [r3, #0]
}
 800e214:	bf00      	nop
 800e216:	3714      	adds	r7, #20
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr
 800e220:	24002390 	.word	0x24002390
 800e224:	2400a390 	.word	0x2400a390
 800e228:	2400a398 	.word	0x2400a398
 800e22c:	2400a3a0 	.word	0x2400a3a0
 800e230:	2400a39c 	.word	0x2400a39c
 800e234:	2400a3a4 	.word	0x2400a3a4

0800e238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e238:	b480      	push	{r7}
 800e23a:	b085      	sub	sp, #20
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e240:	4b28      	ldr	r3, [pc, #160]	; (800e2e4 <prvInsertBlockIntoFreeList+0xac>)
 800e242:	60fb      	str	r3, [r7, #12]
 800e244:	e002      	b.n	800e24c <prvInsertBlockIntoFreeList+0x14>
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	60fb      	str	r3, [r7, #12]
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	429a      	cmp	r2, r3
 800e254:	d8f7      	bhi.n	800e246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	68ba      	ldr	r2, [r7, #8]
 800e260:	4413      	add	r3, r2
 800e262:	687a      	ldr	r2, [r7, #4]
 800e264:	429a      	cmp	r2, r3
 800e266:	d108      	bne.n	800e27a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	685a      	ldr	r2, [r3, #4]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	685b      	ldr	r3, [r3, #4]
 800e270:	441a      	add	r2, r3
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	685b      	ldr	r3, [r3, #4]
 800e282:	68ba      	ldr	r2, [r7, #8]
 800e284:	441a      	add	r2, r3
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d118      	bne.n	800e2c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	681a      	ldr	r2, [r3, #0]
 800e292:	4b15      	ldr	r3, [pc, #84]	; (800e2e8 <prvInsertBlockIntoFreeList+0xb0>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	429a      	cmp	r2, r3
 800e298:	d00d      	beq.n	800e2b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	685a      	ldr	r2, [r3, #4]
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	441a      	add	r2, r3
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	681a      	ldr	r2, [r3, #0]
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	601a      	str	r2, [r3, #0]
 800e2b4:	e008      	b.n	800e2c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e2b6:	4b0c      	ldr	r3, [pc, #48]	; (800e2e8 <prvInsertBlockIntoFreeList+0xb0>)
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	601a      	str	r2, [r3, #0]
 800e2be:	e003      	b.n	800e2c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e2c8:	68fa      	ldr	r2, [r7, #12]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d002      	beq.n	800e2d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2d6:	bf00      	nop
 800e2d8:	3714      	adds	r7, #20
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e0:	4770      	bx	lr
 800e2e2:	bf00      	nop
 800e2e4:	2400a390 	.word	0x2400a390
 800e2e8:	2400a398 	.word	0x2400a398

0800e2ec <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b084      	sub	sp, #16
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800e2f4:	4b29      	ldr	r3, [pc, #164]	; (800e39c <tcpip_thread+0xb0>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d005      	beq.n	800e308 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800e2fc:	4b27      	ldr	r3, [pc, #156]	; (800e39c <tcpip_thread+0xb0>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a27      	ldr	r2, [pc, #156]	; (800e3a0 <tcpip_thread+0xb4>)
 800e302:	6812      	ldr	r2, [r2, #0]
 800e304:	4610      	mov	r0, r2
 800e306:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800e308:	4826      	ldr	r0, [pc, #152]	; (800e3a4 <tcpip_thread+0xb8>)
 800e30a:	f008 ffeb 	bl	80172e4 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800e30e:	4825      	ldr	r0, [pc, #148]	; (800e3a4 <tcpip_thread+0xb8>)
 800e310:	f008 fff7 	bl	8017302 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800e314:	f107 030c 	add.w	r3, r7, #12
 800e318:	4619      	mov	r1, r3
 800e31a:	4823      	ldr	r0, [pc, #140]	; (800e3a8 <tcpip_thread+0xbc>)
 800e31c:	f006 fb68 	bl	80149f0 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800e320:	4820      	ldr	r0, [pc, #128]	; (800e3a4 <tcpip_thread+0xb8>)
 800e322:	f008 ffdf 	bl	80172e4 <sys_mutex_lock>
    if (msg == NULL) {
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d106      	bne.n	800e33a <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e32c:	4b1f      	ldr	r3, [pc, #124]	; (800e3ac <tcpip_thread+0xc0>)
 800e32e:	2269      	movs	r2, #105	; 0x69
 800e330:	491f      	ldr	r1, [pc, #124]	; (800e3b0 <tcpip_thread+0xc4>)
 800e332:	4820      	ldr	r0, [pc, #128]	; (800e3b4 <tcpip_thread+0xc8>)
 800e334:	f009 f87c 	bl	8017430 <iprintf>
      continue;
 800e338:	e02f      	b.n	800e39a <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	781b      	ldrb	r3, [r3, #0]
 800e33e:	2b03      	cmp	r3, #3
 800e340:	d011      	beq.n	800e366 <tcpip_thread+0x7a>
 800e342:	2b04      	cmp	r3, #4
 800e344:	d01b      	beq.n	800e37e <tcpip_thread+0x92>
 800e346:	2b02      	cmp	r3, #2
 800e348:	d120      	bne.n	800e38c <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	68db      	ldr	r3, [r3, #12]
 800e34e:	68fa      	ldr	r2, [r7, #12]
 800e350:	6850      	ldr	r0, [r2, #4]
 800e352:	68fa      	ldr	r2, [r7, #12]
 800e354:	6892      	ldr	r2, [r2, #8]
 800e356:	4611      	mov	r1, r2
 800e358:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	4619      	mov	r1, r3
 800e35e:	2009      	movs	r0, #9
 800e360:	f000 fe60 	bl	800f024 <memp_free>
      break;
 800e364:	e019      	b.n	800e39a <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	68fa      	ldr	r2, [r7, #12]
 800e36c:	6892      	ldr	r2, [r2, #8]
 800e36e:	4610      	mov	r0, r2
 800e370:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	4619      	mov	r1, r3
 800e376:	2008      	movs	r0, #8
 800e378:	f000 fe54 	bl	800f024 <memp_free>
      break;
 800e37c:	e00d      	b.n	800e39a <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	685b      	ldr	r3, [r3, #4]
 800e382:	68fa      	ldr	r2, [r7, #12]
 800e384:	6892      	ldr	r2, [r2, #8]
 800e386:	4610      	mov	r0, r2
 800e388:	4798      	blx	r3
      break;
 800e38a:	e006      	b.n	800e39a <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e38c:	4b07      	ldr	r3, [pc, #28]	; (800e3ac <tcpip_thread+0xc0>)
 800e38e:	229b      	movs	r2, #155	; 0x9b
 800e390:	4907      	ldr	r1, [pc, #28]	; (800e3b0 <tcpip_thread+0xc4>)
 800e392:	4808      	ldr	r0, [pc, #32]	; (800e3b4 <tcpip_thread+0xc8>)
 800e394:	f009 f84c 	bl	8017430 <iprintf>
      break;
 800e398:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800e39a:	e7b8      	b.n	800e30e <tcpip_thread+0x22>
 800e39c:	2400a3a8 	.word	0x2400a3a8
 800e3a0:	2400a3ac 	.word	0x2400a3ac
 800e3a4:	2400a830 	.word	0x2400a830
 800e3a8:	2400a3b0 	.word	0x2400a3b0
 800e3ac:	08018510 	.word	0x08018510
 800e3b0:	08018540 	.word	0x08018540
 800e3b4:	08018560 	.word	0x08018560

0800e3b8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b086      	sub	sp, #24
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	60b9      	str	r1, [r7, #8]
 800e3c2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800e3c4:	481a      	ldr	r0, [pc, #104]	; (800e430 <tcpip_inpkt+0x78>)
 800e3c6:	f008 ff51 	bl	801726c <sys_mbox_valid>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d105      	bne.n	800e3dc <tcpip_inpkt+0x24>
 800e3d0:	4b18      	ldr	r3, [pc, #96]	; (800e434 <tcpip_inpkt+0x7c>)
 800e3d2:	22b5      	movs	r2, #181	; 0xb5
 800e3d4:	4918      	ldr	r1, [pc, #96]	; (800e438 <tcpip_inpkt+0x80>)
 800e3d6:	4819      	ldr	r0, [pc, #100]	; (800e43c <tcpip_inpkt+0x84>)
 800e3d8:	f009 f82a 	bl	8017430 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800e3dc:	2009      	movs	r0, #9
 800e3de:	f000 fdab 	bl	800ef38 <memp_malloc>
 800e3e2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d102      	bne.n	800e3f0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800e3ea:	f04f 33ff 	mov.w	r3, #4294967295
 800e3ee:	e01a      	b.n	800e426 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	2202      	movs	r2, #2
 800e3f4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	68fa      	ldr	r2, [r7, #12]
 800e3fa:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	68ba      	ldr	r2, [r7, #8]
 800e400:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	687a      	ldr	r2, [r7, #4]
 800e406:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800e408:	6979      	ldr	r1, [r7, #20]
 800e40a:	4809      	ldr	r0, [pc, #36]	; (800e430 <tcpip_inpkt+0x78>)
 800e40c:	f008 fed5 	bl	80171ba <sys_mbox_trypost>
 800e410:	4603      	mov	r3, r0
 800e412:	2b00      	cmp	r3, #0
 800e414:	d006      	beq.n	800e424 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e416:	6979      	ldr	r1, [r7, #20]
 800e418:	2009      	movs	r0, #9
 800e41a:	f000 fe03 	bl	800f024 <memp_free>
    return ERR_MEM;
 800e41e:	f04f 33ff 	mov.w	r3, #4294967295
 800e422:	e000      	b.n	800e426 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800e424:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800e426:	4618      	mov	r0, r3
 800e428:	3718      	adds	r7, #24
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	bf00      	nop
 800e430:	2400a3b0 	.word	0x2400a3b0
 800e434:	08018510 	.word	0x08018510
 800e438:	08018588 	.word	0x08018588
 800e43c:	08018560 	.word	0x08018560

0800e440 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b082      	sub	sp, #8
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800e450:	f003 0318 	and.w	r3, r3, #24
 800e454:	2b00      	cmp	r3, #0
 800e456:	d006      	beq.n	800e466 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800e458:	4a08      	ldr	r2, [pc, #32]	; (800e47c <tcpip_input+0x3c>)
 800e45a:	6839      	ldr	r1, [r7, #0]
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	f7ff ffab 	bl	800e3b8 <tcpip_inpkt>
 800e462:	4603      	mov	r3, r0
 800e464:	e005      	b.n	800e472 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800e466:	4a06      	ldr	r2, [pc, #24]	; (800e480 <tcpip_input+0x40>)
 800e468:	6839      	ldr	r1, [r7, #0]
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f7ff ffa4 	bl	800e3b8 <tcpip_inpkt>
 800e470:	4603      	mov	r3, r0
}
 800e472:	4618      	mov	r0, r3
 800e474:	3708      	adds	r7, #8
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
 800e47a:	bf00      	nop
 800e47c:	08016f95 	.word	0x08016f95
 800e480:	08015f59 	.word	0x08015f59

0800e484 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b086      	sub	sp, #24
 800e488:	af00      	add	r7, sp, #0
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	60b9      	str	r1, [r7, #8]
 800e48e:	4613      	mov	r3, r2
 800e490:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800e492:	481d      	ldr	r0, [pc, #116]	; (800e508 <tcpip_callback_with_block+0x84>)
 800e494:	f008 feea 	bl	801726c <sys_mbox_valid>
 800e498:	4603      	mov	r3, r0
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d105      	bne.n	800e4aa <tcpip_callback_with_block+0x26>
 800e49e:	4b1b      	ldr	r3, [pc, #108]	; (800e50c <tcpip_callback_with_block+0x88>)
 800e4a0:	22ee      	movs	r2, #238	; 0xee
 800e4a2:	491b      	ldr	r1, [pc, #108]	; (800e510 <tcpip_callback_with_block+0x8c>)
 800e4a4:	481b      	ldr	r0, [pc, #108]	; (800e514 <tcpip_callback_with_block+0x90>)
 800e4a6:	f008 ffc3 	bl	8017430 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800e4aa:	2008      	movs	r0, #8
 800e4ac:	f000 fd44 	bl	800ef38 <memp_malloc>
 800e4b0:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d102      	bne.n	800e4be <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800e4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4bc:	e01f      	b.n	800e4fe <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	2203      	movs	r2, #3
 800e4c2:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	68fa      	ldr	r2, [r7, #12]
 800e4c8:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	68ba      	ldr	r2, [r7, #8]
 800e4ce:	609a      	str	r2, [r3, #8]
  if (block) {
 800e4d0:	79fb      	ldrb	r3, [r7, #7]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d004      	beq.n	800e4e0 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800e4d6:	6979      	ldr	r1, [r7, #20]
 800e4d8:	480b      	ldr	r0, [pc, #44]	; (800e508 <tcpip_callback_with_block+0x84>)
 800e4da:	f008 fe59 	bl	8017190 <sys_mbox_post>
 800e4de:	e00d      	b.n	800e4fc <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800e4e0:	6979      	ldr	r1, [r7, #20]
 800e4e2:	4809      	ldr	r0, [pc, #36]	; (800e508 <tcpip_callback_with_block+0x84>)
 800e4e4:	f008 fe69 	bl	80171ba <sys_mbox_trypost>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d006      	beq.n	800e4fc <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e4ee:	6979      	ldr	r1, [r7, #20]
 800e4f0:	2008      	movs	r0, #8
 800e4f2:	f000 fd97 	bl	800f024 <memp_free>
      return ERR_MEM;
 800e4f6:	f04f 33ff 	mov.w	r3, #4294967295
 800e4fa:	e000      	b.n	800e4fe <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800e4fc:	2300      	movs	r3, #0
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3718      	adds	r7, #24
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
 800e506:	bf00      	nop
 800e508:	2400a3b0 	.word	0x2400a3b0
 800e50c:	08018510 	.word	0x08018510
 800e510:	08018588 	.word	0x08018588
 800e514:	08018560 	.word	0x08018560

0800e518 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af02      	add	r7, sp, #8
 800e51e:	6078      	str	r0, [r7, #4]
 800e520:	6039      	str	r1, [r7, #0]
  lwip_init();
 800e522:	f000 f923 	bl	800e76c <lwip_init>

  tcpip_init_done = initfunc;
 800e526:	4a17      	ldr	r2, [pc, #92]	; (800e584 <tcpip_init+0x6c>)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800e52c:	4a16      	ldr	r2, [pc, #88]	; (800e588 <tcpip_init+0x70>)
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800e532:	2106      	movs	r1, #6
 800e534:	4815      	ldr	r0, [pc, #84]	; (800e58c <tcpip_init+0x74>)
 800e536:	f008 fe09 	bl	801714c <sys_mbox_new>
 800e53a:	4603      	mov	r3, r0
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d006      	beq.n	800e54e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800e540:	4b13      	ldr	r3, [pc, #76]	; (800e590 <tcpip_init+0x78>)
 800e542:	f240 12d5 	movw	r2, #469	; 0x1d5
 800e546:	4913      	ldr	r1, [pc, #76]	; (800e594 <tcpip_init+0x7c>)
 800e548:	4813      	ldr	r0, [pc, #76]	; (800e598 <tcpip_init+0x80>)
 800e54a:	f008 ff71 	bl	8017430 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800e54e:	4813      	ldr	r0, [pc, #76]	; (800e59c <tcpip_init+0x84>)
 800e550:	f008 feac 	bl	80172ac <sys_mutex_new>
 800e554:	4603      	mov	r3, r0
 800e556:	2b00      	cmp	r3, #0
 800e558:	d006      	beq.n	800e568 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800e55a:	4b0d      	ldr	r3, [pc, #52]	; (800e590 <tcpip_init+0x78>)
 800e55c:	f240 12d9 	movw	r2, #473	; 0x1d9
 800e560:	490f      	ldr	r1, [pc, #60]	; (800e5a0 <tcpip_init+0x88>)
 800e562:	480d      	ldr	r0, [pc, #52]	; (800e598 <tcpip_init+0x80>)
 800e564:	f008 ff64 	bl	8017430 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800e568:	2300      	movs	r3, #0
 800e56a:	9300      	str	r3, [sp, #0]
 800e56c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e570:	2200      	movs	r2, #0
 800e572:	490c      	ldr	r1, [pc, #48]	; (800e5a4 <tcpip_init+0x8c>)
 800e574:	480c      	ldr	r0, [pc, #48]	; (800e5a8 <tcpip_init+0x90>)
 800e576:	f008 fed1 	bl	801731c <sys_thread_new>
}
 800e57a:	bf00      	nop
 800e57c:	3708      	adds	r7, #8
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	2400a3a8 	.word	0x2400a3a8
 800e588:	2400a3ac 	.word	0x2400a3ac
 800e58c:	2400a3b0 	.word	0x2400a3b0
 800e590:	08018510 	.word	0x08018510
 800e594:	08018598 	.word	0x08018598
 800e598:	08018560 	.word	0x08018560
 800e59c:	2400a830 	.word	0x2400a830
 800e5a0:	080185bc 	.word	0x080185bc
 800e5a4:	0800e2ed 	.word	0x0800e2ed
 800e5a8:	080185e0 	.word	0x080185e0

0800e5ac <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	b083      	sub	sp, #12
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800e5b6:	88fb      	ldrh	r3, [r7, #6]
 800e5b8:	ba5b      	rev16	r3, r3
 800e5ba:	b29b      	uxth	r3, r3
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	370c      	adds	r7, #12
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c6:	4770      	bx	lr

0800e5c8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800e5c8:	b480      	push	{r7}
 800e5ca:	b083      	sub	sp, #12
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	061a      	lsls	r2, r3, #24
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	021b      	lsls	r3, r3, #8
 800e5d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e5dc:	431a      	orrs	r2, r3
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	0a1b      	lsrs	r3, r3, #8
 800e5e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e5e6:	431a      	orrs	r2, r3
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	0e1b      	lsrs	r3, r3, #24
 800e5ec:	4313      	orrs	r3, r2
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	370c      	adds	r7, #12
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f8:	4770      	bx	lr

0800e5fa <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800e5fa:	b480      	push	{r7}
 800e5fc:	b089      	sub	sp, #36	; 0x24
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	6078      	str	r0, [r7, #4]
 800e602:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800e608:	2300      	movs	r3, #0
 800e60a:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800e60c:	2300      	movs	r3, #0
 800e60e:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800e610:	69fb      	ldr	r3, [r7, #28]
 800e612:	f003 0301 	and.w	r3, r3, #1
 800e616:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d00d      	beq.n	800e63a <lwip_standard_chksum+0x40>
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	2b00      	cmp	r3, #0
 800e622:	dd0a      	ble.n	800e63a <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800e624:	69fa      	ldr	r2, [r7, #28]
 800e626:	1c53      	adds	r3, r2, #1
 800e628:	61fb      	str	r3, [r7, #28]
 800e62a:	f107 030e 	add.w	r3, r7, #14
 800e62e:	3301      	adds	r3, #1
 800e630:	7812      	ldrb	r2, [r2, #0]
 800e632:	701a      	strb	r2, [r3, #0]
    len--;
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	3b01      	subs	r3, #1
 800e638:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800e63a:	69fb      	ldr	r3, [r7, #28]
 800e63c:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800e63e:	e00a      	b.n	800e656 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800e640:	69bb      	ldr	r3, [r7, #24]
 800e642:	1c9a      	adds	r2, r3, #2
 800e644:	61ba      	str	r2, [r7, #24]
 800e646:	881b      	ldrh	r3, [r3, #0]
 800e648:	461a      	mov	r2, r3
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	4413      	add	r3, r2
 800e64e:	617b      	str	r3, [r7, #20]
    len -= 2;
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	3b02      	subs	r3, #2
 800e654:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	2b01      	cmp	r3, #1
 800e65a:	dcf1      	bgt.n	800e640 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	dd04      	ble.n	800e66c <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800e662:	f107 030e 	add.w	r3, r7, #14
 800e666:	69ba      	ldr	r2, [r7, #24]
 800e668:	7812      	ldrb	r2, [r2, #0]
 800e66a:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800e66c:	89fb      	ldrh	r3, [r7, #14]
 800e66e:	461a      	mov	r2, r3
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	4413      	add	r3, r2
 800e674:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	0c1a      	lsrs	r2, r3, #16
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	b29b      	uxth	r3, r3
 800e67e:	4413      	add	r3, r2
 800e680:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	0c1a      	lsrs	r2, r3, #16
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	b29b      	uxth	r3, r3
 800e68a:	4413      	add	r3, r2
 800e68c:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d007      	beq.n	800e6a4 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	021b      	lsls	r3, r3, #8
 800e698:	b29a      	uxth	r2, r3
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	0a1b      	lsrs	r3, r3, #8
 800e69e:	b2db      	uxtb	r3, r3
 800e6a0:	4313      	orrs	r3, r2
 800e6a2:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	b29b      	uxth	r3, r3
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3724      	adds	r7, #36	; 0x24
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr

0800e6b4 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	460b      	mov	r3, r1
 800e6be:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800e6c0:	887b      	ldrh	r3, [r7, #2]
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	f7ff ff98 	bl	800e5fa <lwip_standard_chksum>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	43db      	mvns	r3, r3
 800e6ce:	b29b      	uxth	r3, r3
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3708      	adds	r7, #8
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b086      	sub	sp, #24
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	617b      	str	r3, [r7, #20]
  swapped = 0;
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	73fb      	strb	r3, [r7, #15]
  for (q = p; q != NULL; q = q->next) {
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	613b      	str	r3, [r7, #16]
 800e6ec:	e028      	b.n	800e740 <inet_chksum_pbuf+0x68>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	685a      	ldr	r2, [r3, #4]
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	895b      	ldrh	r3, [r3, #10]
 800e6f6:	4619      	mov	r1, r3
 800e6f8:	4610      	mov	r0, r2
 800e6fa:	f7ff ff7e 	bl	800e5fa <lwip_standard_chksum>
 800e6fe:	4603      	mov	r3, r0
 800e700:	461a      	mov	r2, r3
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	4413      	add	r3, r2
 800e706:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	0c1a      	lsrs	r2, r3, #16
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	b29b      	uxth	r3, r3
 800e710:	4413      	add	r3, r2
 800e712:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	895b      	ldrh	r3, [r3, #10]
 800e718:	f003 0301 	and.w	r3, r3, #1
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d00b      	beq.n	800e73a <inet_chksum_pbuf+0x62>
      swapped = 1 - swapped;
 800e722:	7bfb      	ldrb	r3, [r7, #15]
 800e724:	f1c3 0301 	rsb	r3, r3, #1
 800e728:	73fb      	strb	r3, [r7, #15]
      acc = SWAP_BYTES_IN_WORD(acc);
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	021b      	lsls	r3, r3, #8
 800e72e:	b29a      	uxth	r2, r3
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	0a1b      	lsrs	r3, r3, #8
 800e734:	b2db      	uxtb	r3, r3
 800e736:	4313      	orrs	r3, r2
 800e738:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	613b      	str	r3, [r7, #16]
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d1d3      	bne.n	800e6ee <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800e746:	7bfb      	ldrb	r3, [r7, #15]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d007      	beq.n	800e75c <inet_chksum_pbuf+0x84>
    acc = SWAP_BYTES_IN_WORD(acc);
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	021b      	lsls	r3, r3, #8
 800e750:	b29a      	uxth	r2, r3
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	0a1b      	lsrs	r3, r3, #8
 800e756:	b2db      	uxtb	r3, r3
 800e758:	4313      	orrs	r3, r2
 800e75a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	b29b      	uxth	r3, r3
 800e760:	43db      	mvns	r3, r3
 800e762:	b29b      	uxth	r3, r3
}
 800e764:	4618      	mov	r0, r3
 800e766:	3718      	adds	r7, #24
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}

0800e76c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b082      	sub	sp, #8
 800e770:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800e772:	2300      	movs	r3, #0
 800e774:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800e776:	f008 fd8b 	bl	8017290 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800e77a:	f000 f8a7 	bl	800e8cc <mem_init>
  memp_init();
 800e77e:	f000 fb6d 	bl	800ee5c <memp_init>
  pbuf_init();
  netif_init();
 800e782:	f000 fc79 	bl	800f078 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800e786:	f006 f959 	bl	8014a3c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800e78a:	f001 fc59 	bl	8010040 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800e78e:	f005 ffeb 	bl	8014768 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800e792:	bf00      	nop
 800e794:	3708      	adds	r7, #8
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
	...

0800e79c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b084      	sub	sp, #16
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800e7a4:	4b40      	ldr	r3, [pc, #256]	; (800e8a8 <plug_holes+0x10c>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	687a      	ldr	r2, [r7, #4]
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d206      	bcs.n	800e7bc <plug_holes+0x20>
 800e7ae:	4b3f      	ldr	r3, [pc, #252]	; (800e8ac <plug_holes+0x110>)
 800e7b0:	f240 125d 	movw	r2, #349	; 0x15d
 800e7b4:	493e      	ldr	r1, [pc, #248]	; (800e8b0 <plug_holes+0x114>)
 800e7b6:	483f      	ldr	r0, [pc, #252]	; (800e8b4 <plug_holes+0x118>)
 800e7b8:	f008 fe3a 	bl	8017430 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800e7bc:	4b3e      	ldr	r3, [pc, #248]	; (800e8b8 <plug_holes+0x11c>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	687a      	ldr	r2, [r7, #4]
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d306      	bcc.n	800e7d4 <plug_holes+0x38>
 800e7c6:	4b39      	ldr	r3, [pc, #228]	; (800e8ac <plug_holes+0x110>)
 800e7c8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e7cc:	493b      	ldr	r1, [pc, #236]	; (800e8bc <plug_holes+0x120>)
 800e7ce:	4839      	ldr	r0, [pc, #228]	; (800e8b4 <plug_holes+0x118>)
 800e7d0:	f008 fe2e 	bl	8017430 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	791b      	ldrb	r3, [r3, #4]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d006      	beq.n	800e7ea <plug_holes+0x4e>
 800e7dc:	4b33      	ldr	r3, [pc, #204]	; (800e8ac <plug_holes+0x110>)
 800e7de:	f240 125f 	movw	r2, #351	; 0x15f
 800e7e2:	4937      	ldr	r1, [pc, #220]	; (800e8c0 <plug_holes+0x124>)
 800e7e4:	4833      	ldr	r0, [pc, #204]	; (800e8b4 <plug_holes+0x118>)
 800e7e6:	f008 fe23 	bl	8017430 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	881b      	ldrh	r3, [r3, #0]
 800e7ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e7f2:	d906      	bls.n	800e802 <plug_holes+0x66>
 800e7f4:	4b2d      	ldr	r3, [pc, #180]	; (800e8ac <plug_holes+0x110>)
 800e7f6:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800e7fa:	4932      	ldr	r1, [pc, #200]	; (800e8c4 <plug_holes+0x128>)
 800e7fc:	482d      	ldr	r0, [pc, #180]	; (800e8b4 <plug_holes+0x118>)
 800e7fe:	f008 fe17 	bl	8017430 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800e802:	4b29      	ldr	r3, [pc, #164]	; (800e8a8 <plug_holes+0x10c>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	8812      	ldrh	r2, [r2, #0]
 800e80a:	4413      	add	r3, r2
 800e80c:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800e80e:	687a      	ldr	r2, [r7, #4]
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	429a      	cmp	r2, r3
 800e814:	d01f      	beq.n	800e856 <plug_holes+0xba>
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	791b      	ldrb	r3, [r3, #4]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d11b      	bne.n	800e856 <plug_holes+0xba>
 800e81e:	4b26      	ldr	r3, [pc, #152]	; (800e8b8 <plug_holes+0x11c>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	68fa      	ldr	r2, [r7, #12]
 800e824:	429a      	cmp	r2, r3
 800e826:	d016      	beq.n	800e856 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800e828:	4b27      	ldr	r3, [pc, #156]	; (800e8c8 <plug_holes+0x12c>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	68fa      	ldr	r2, [r7, #12]
 800e82e:	429a      	cmp	r2, r3
 800e830:	d102      	bne.n	800e838 <plug_holes+0x9c>
      lfree = mem;
 800e832:	4a25      	ldr	r2, [pc, #148]	; (800e8c8 <plug_holes+0x12c>)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	881a      	ldrh	r2, [r3, #0]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	4a19      	ldr	r2, [pc, #100]	; (800e8a8 <plug_holes+0x10c>)
 800e844:	6812      	ldr	r2, [r2, #0]
 800e846:	1a99      	subs	r1, r3, r2
 800e848:	4b17      	ldr	r3, [pc, #92]	; (800e8a8 <plug_holes+0x10c>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	68fa      	ldr	r2, [r7, #12]
 800e84e:	8812      	ldrh	r2, [r2, #0]
 800e850:	4413      	add	r3, r2
 800e852:	b28a      	uxth	r2, r1
 800e854:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800e856:	4b14      	ldr	r3, [pc, #80]	; (800e8a8 <plug_holes+0x10c>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	687a      	ldr	r2, [r7, #4]
 800e85c:	8852      	ldrh	r2, [r2, #2]
 800e85e:	4413      	add	r3, r2
 800e860:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800e862:	68ba      	ldr	r2, [r7, #8]
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	429a      	cmp	r2, r3
 800e868:	d01a      	beq.n	800e8a0 <plug_holes+0x104>
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	791b      	ldrb	r3, [r3, #4]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d116      	bne.n	800e8a0 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800e872:	4b15      	ldr	r3, [pc, #84]	; (800e8c8 <plug_holes+0x12c>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d102      	bne.n	800e882 <plug_holes+0xe6>
      lfree = pmem;
 800e87c:	4a12      	ldr	r2, [pc, #72]	; (800e8c8 <plug_holes+0x12c>)
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	881a      	ldrh	r2, [r3, #0]
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	4a06      	ldr	r2, [pc, #24]	; (800e8a8 <plug_holes+0x10c>)
 800e88e:	6812      	ldr	r2, [r2, #0]
 800e890:	1a99      	subs	r1, r3, r2
 800e892:	4b05      	ldr	r3, [pc, #20]	; (800e8a8 <plug_holes+0x10c>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	687a      	ldr	r2, [r7, #4]
 800e898:	8812      	ldrh	r2, [r2, #0]
 800e89a:	4413      	add	r3, r2
 800e89c:	b28a      	uxth	r2, r1
 800e89e:	805a      	strh	r2, [r3, #2]
  }
}
 800e8a0:	bf00      	nop
 800e8a2:	3710      	adds	r7, #16
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	2400a3b4 	.word	0x2400a3b4
 800e8ac:	080185f0 	.word	0x080185f0
 800e8b0:	08018620 	.word	0x08018620
 800e8b4:	08018638 	.word	0x08018638
 800e8b8:	2400a3b8 	.word	0x2400a3b8
 800e8bc:	08018660 	.word	0x08018660
 800e8c0:	0801867c 	.word	0x0801867c
 800e8c4:	08018698 	.word	0x08018698
 800e8c8:	2400a3bc 	.word	0x2400a3bc

0800e8cc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b082      	sub	sp, #8
 800e8d0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800e8d2:	4b1c      	ldr	r3, [pc, #112]	; (800e944 <mem_init+0x78>)
 800e8d4:	4a1c      	ldr	r2, [pc, #112]	; (800e948 <mem_init+0x7c>)
 800e8d6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800e8d8:	4b1a      	ldr	r3, [pc, #104]	; (800e944 <mem_init+0x78>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e8e4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800e8f2:	4b14      	ldr	r3, [pc, #80]	; (800e944 <mem_init+0x78>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800e8fa:	4a14      	ldr	r2, [pc, #80]	; (800e94c <mem_init+0x80>)
 800e8fc:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800e8fe:	4b13      	ldr	r3, [pc, #76]	; (800e94c <mem_init+0x80>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	2201      	movs	r2, #1
 800e904:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800e906:	4b11      	ldr	r3, [pc, #68]	; (800e94c <mem_init+0x80>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e90e:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800e910:	4b0e      	ldr	r3, [pc, #56]	; (800e94c <mem_init+0x80>)
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e918:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800e91a:	4b0a      	ldr	r3, [pc, #40]	; (800e944 <mem_init+0x78>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	4a0c      	ldr	r2, [pc, #48]	; (800e950 <mem_init+0x84>)
 800e920:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800e922:	480c      	ldr	r0, [pc, #48]	; (800e954 <mem_init+0x88>)
 800e924:	f008 fcc2 	bl	80172ac <sys_mutex_new>
 800e928:	4603      	mov	r3, r0
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d006      	beq.n	800e93c <mem_init+0x70>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800e92e:	4b0a      	ldr	r3, [pc, #40]	; (800e958 <mem_init+0x8c>)
 800e930:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e934:	4909      	ldr	r1, [pc, #36]	; (800e95c <mem_init+0x90>)
 800e936:	480a      	ldr	r0, [pc, #40]	; (800e960 <mem_init+0x94>)
 800e938:	f008 fd7a 	bl	8017430 <iprintf>
  }
}
 800e93c:	bf00      	nop
 800e93e:	3708      	adds	r7, #8
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}
 800e944:	2400a3b4 	.word	0x2400a3b4
 800e948:	30044000 	.word	0x30044000
 800e94c:	2400a3b8 	.word	0x2400a3b8
 800e950:	2400a3bc 	.word	0x2400a3bc
 800e954:	2400a3c0 	.word	0x2400a3c0
 800e958:	080185f0 	.word	0x080185f0
 800e95c:	080186c4 	.word	0x080186c4
 800e960:	08018638 	.word	0x08018638

0800e964 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b084      	sub	sp, #16
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d050      	beq.n	800ea14 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	f003 0303 	and.w	r3, r3, #3
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d006      	beq.n	800e98a <mem_free+0x26>
 800e97c:	4b27      	ldr	r3, [pc, #156]	; (800ea1c <mem_free+0xb8>)
 800e97e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800e982:	4927      	ldr	r1, [pc, #156]	; (800ea20 <mem_free+0xbc>)
 800e984:	4827      	ldr	r0, [pc, #156]	; (800ea24 <mem_free+0xc0>)
 800e986:	f008 fd53 	bl	8017430 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e98a:	4b27      	ldr	r3, [pc, #156]	; (800ea28 <mem_free+0xc4>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	429a      	cmp	r2, r3
 800e992:	d304      	bcc.n	800e99e <mem_free+0x3a>
 800e994:	4b25      	ldr	r3, [pc, #148]	; (800ea2c <mem_free+0xc8>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	687a      	ldr	r2, [r7, #4]
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d306      	bcc.n	800e9ac <mem_free+0x48>
 800e99e:	4b1f      	ldr	r3, [pc, #124]	; (800ea1c <mem_free+0xb8>)
 800e9a0:	f240 12af 	movw	r2, #431	; 0x1af
 800e9a4:	4922      	ldr	r1, [pc, #136]	; (800ea30 <mem_free+0xcc>)
 800e9a6:	481f      	ldr	r0, [pc, #124]	; (800ea24 <mem_free+0xc0>)
 800e9a8:	f008 fd42 	bl	8017430 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e9ac:	4b1e      	ldr	r3, [pc, #120]	; (800ea28 <mem_free+0xc4>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	687a      	ldr	r2, [r7, #4]
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	d304      	bcc.n	800e9c0 <mem_free+0x5c>
 800e9b6:	4b1d      	ldr	r3, [pc, #116]	; (800ea2c <mem_free+0xc8>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	687a      	ldr	r2, [r7, #4]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d306      	bcc.n	800e9ce <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800e9c0:	f008 fcd2 	bl	8017368 <sys_arch_protect>
 800e9c4:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800e9c6:	68b8      	ldr	r0, [r7, #8]
 800e9c8:	f008 fcdc 	bl	8017384 <sys_arch_unprotect>
    return;
 800e9cc:	e023      	b.n	800ea16 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e9ce:	4819      	ldr	r0, [pc, #100]	; (800ea34 <mem_free+0xd0>)
 800e9d0:	f008 fc88 	bl	80172e4 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	3b08      	subs	r3, #8
 800e9d8:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	791b      	ldrb	r3, [r3, #4]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d106      	bne.n	800e9f0 <mem_free+0x8c>
 800e9e2:	4b0e      	ldr	r3, [pc, #56]	; (800ea1c <mem_free+0xb8>)
 800e9e4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800e9e8:	4913      	ldr	r1, [pc, #76]	; (800ea38 <mem_free+0xd4>)
 800e9ea:	480e      	ldr	r0, [pc, #56]	; (800ea24 <mem_free+0xc0>)
 800e9ec:	f008 fd20 	bl	8017430 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800e9f6:	4b11      	ldr	r3, [pc, #68]	; (800ea3c <mem_free+0xd8>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	68fa      	ldr	r2, [r7, #12]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d202      	bcs.n	800ea06 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ea00:	4a0e      	ldr	r2, [pc, #56]	; (800ea3c <mem_free+0xd8>)
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ea06:	68f8      	ldr	r0, [r7, #12]
 800ea08:	f7ff fec8 	bl	800e79c <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ea0c:	4809      	ldr	r0, [pc, #36]	; (800ea34 <mem_free+0xd0>)
 800ea0e:	f008 fc78 	bl	8017302 <sys_mutex_unlock>
 800ea12:	e000      	b.n	800ea16 <mem_free+0xb2>
    return;
 800ea14:	bf00      	nop
}
 800ea16:	3710      	adds	r7, #16
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}
 800ea1c:	080185f0 	.word	0x080185f0
 800ea20:	080186e0 	.word	0x080186e0
 800ea24:	08018638 	.word	0x08018638
 800ea28:	2400a3b4 	.word	0x2400a3b4
 800ea2c:	2400a3b8 	.word	0x2400a3b8
 800ea30:	08018704 	.word	0x08018704
 800ea34:	2400a3c0 	.word	0x2400a3c0
 800ea38:	0801871c 	.word	0x0801871c
 800ea3c:	2400a3bc 	.word	0x2400a3bc

0800ea40 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b088      	sub	sp, #32
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	460b      	mov	r3, r1
 800ea4a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800ea4c:	887b      	ldrh	r3, [r7, #2]
 800ea4e:	3303      	adds	r3, #3
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	f023 0303 	bic.w	r3, r3, #3
 800ea56:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800ea58:	887b      	ldrh	r3, [r7, #2]
 800ea5a:	2b0b      	cmp	r3, #11
 800ea5c:	d801      	bhi.n	800ea62 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ea5e:	230c      	movs	r3, #12
 800ea60:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800ea62:	887b      	ldrh	r3, [r7, #2]
 800ea64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ea68:	d901      	bls.n	800ea6e <mem_trim+0x2e>
    return NULL;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	e0bd      	b.n	800ebea <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ea6e:	4b61      	ldr	r3, [pc, #388]	; (800ebf4 <mem_trim+0x1b4>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	687a      	ldr	r2, [r7, #4]
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d304      	bcc.n	800ea82 <mem_trim+0x42>
 800ea78:	4b5f      	ldr	r3, [pc, #380]	; (800ebf8 <mem_trim+0x1b8>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	687a      	ldr	r2, [r7, #4]
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d306      	bcc.n	800ea90 <mem_trim+0x50>
 800ea82:	4b5e      	ldr	r3, [pc, #376]	; (800ebfc <mem_trim+0x1bc>)
 800ea84:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800ea88:	495d      	ldr	r1, [pc, #372]	; (800ec00 <mem_trim+0x1c0>)
 800ea8a:	485e      	ldr	r0, [pc, #376]	; (800ec04 <mem_trim+0x1c4>)
 800ea8c:	f008 fcd0 	bl	8017430 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ea90:	4b58      	ldr	r3, [pc, #352]	; (800ebf4 <mem_trim+0x1b4>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	687a      	ldr	r2, [r7, #4]
 800ea96:	429a      	cmp	r2, r3
 800ea98:	d304      	bcc.n	800eaa4 <mem_trim+0x64>
 800ea9a:	4b57      	ldr	r3, [pc, #348]	; (800ebf8 <mem_trim+0x1b8>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	687a      	ldr	r2, [r7, #4]
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d307      	bcc.n	800eab4 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800eaa4:	f008 fc60 	bl	8017368 <sys_arch_protect>
 800eaa8:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800eaaa:	68f8      	ldr	r0, [r7, #12]
 800eaac:	f008 fc6a 	bl	8017384 <sys_arch_unprotect>
    return rmem;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	e09a      	b.n	800ebea <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	3b08      	subs	r3, #8
 800eab8:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800eaba:	69fb      	ldr	r3, [r7, #28]
 800eabc:	4a4d      	ldr	r2, [pc, #308]	; (800ebf4 <mem_trim+0x1b4>)
 800eabe:	6812      	ldr	r2, [r2, #0]
 800eac0:	1a9b      	subs	r3, r3, r2
 800eac2:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800eac4:	69fb      	ldr	r3, [r7, #28]
 800eac6:	881a      	ldrh	r2, [r3, #0]
 800eac8:	8b7b      	ldrh	r3, [r7, #26]
 800eaca:	1ad3      	subs	r3, r2, r3
 800eacc:	b29b      	uxth	r3, r3
 800eace:	3b08      	subs	r3, #8
 800ead0:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ead2:	887a      	ldrh	r2, [r7, #2]
 800ead4:	8b3b      	ldrh	r3, [r7, #24]
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d906      	bls.n	800eae8 <mem_trim+0xa8>
 800eada:	4b48      	ldr	r3, [pc, #288]	; (800ebfc <mem_trim+0x1bc>)
 800eadc:	f240 2206 	movw	r2, #518	; 0x206
 800eae0:	4949      	ldr	r1, [pc, #292]	; (800ec08 <mem_trim+0x1c8>)
 800eae2:	4848      	ldr	r0, [pc, #288]	; (800ec04 <mem_trim+0x1c4>)
 800eae4:	f008 fca4 	bl	8017430 <iprintf>
  if (newsize > size) {
 800eae8:	887a      	ldrh	r2, [r7, #2]
 800eaea:	8b3b      	ldrh	r3, [r7, #24]
 800eaec:	429a      	cmp	r2, r3
 800eaee:	d901      	bls.n	800eaf4 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	e07a      	b.n	800ebea <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800eaf4:	887a      	ldrh	r2, [r7, #2]
 800eaf6:	8b3b      	ldrh	r3, [r7, #24]
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d101      	bne.n	800eb00 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	e074      	b.n	800ebea <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800eb00:	4842      	ldr	r0, [pc, #264]	; (800ec0c <mem_trim+0x1cc>)
 800eb02:	f008 fbef 	bl	80172e4 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800eb06:	4b3b      	ldr	r3, [pc, #236]	; (800ebf4 <mem_trim+0x1b4>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	69fa      	ldr	r2, [r7, #28]
 800eb0c:	8812      	ldrh	r2, [r2, #0]
 800eb0e:	4413      	add	r3, r2
 800eb10:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	791b      	ldrb	r3, [r3, #4]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d131      	bne.n	800eb7e <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	881b      	ldrh	r3, [r3, #0]
 800eb1e:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800eb20:	8b7a      	ldrh	r2, [r7, #26]
 800eb22:	887b      	ldrh	r3, [r7, #2]
 800eb24:	4413      	add	r3, r2
 800eb26:	b29b      	uxth	r3, r3
 800eb28:	3308      	adds	r3, #8
 800eb2a:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800eb2c:	4b38      	ldr	r3, [pc, #224]	; (800ec10 <mem_trim+0x1d0>)
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	697a      	ldr	r2, [r7, #20]
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d105      	bne.n	800eb42 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800eb36:	4b2f      	ldr	r3, [pc, #188]	; (800ebf4 <mem_trim+0x1b4>)
 800eb38:	681a      	ldr	r2, [r3, #0]
 800eb3a:	8a7b      	ldrh	r3, [r7, #18]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	4a34      	ldr	r2, [pc, #208]	; (800ec10 <mem_trim+0x1d0>)
 800eb40:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800eb42:	4b2c      	ldr	r3, [pc, #176]	; (800ebf4 <mem_trim+0x1b4>)
 800eb44:	681a      	ldr	r2, [r3, #0]
 800eb46:	8a7b      	ldrh	r3, [r7, #18]
 800eb48:	4413      	add	r3, r2
 800eb4a:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	8a3a      	ldrh	r2, [r7, #16]
 800eb56:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	8b7a      	ldrh	r2, [r7, #26]
 800eb5c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800eb5e:	69fb      	ldr	r3, [r7, #28]
 800eb60:	8a7a      	ldrh	r2, [r7, #18]
 800eb62:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	881b      	ldrh	r3, [r3, #0]
 800eb68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eb6c:	d039      	beq.n	800ebe2 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800eb6e:	4b21      	ldr	r3, [pc, #132]	; (800ebf4 <mem_trim+0x1b4>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	697a      	ldr	r2, [r7, #20]
 800eb74:	8812      	ldrh	r2, [r2, #0]
 800eb76:	4413      	add	r3, r2
 800eb78:	8a7a      	ldrh	r2, [r7, #18]
 800eb7a:	805a      	strh	r2, [r3, #2]
 800eb7c:	e031      	b.n	800ebe2 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800eb7e:	887b      	ldrh	r3, [r7, #2]
 800eb80:	f103 0214 	add.w	r2, r3, #20
 800eb84:	8b3b      	ldrh	r3, [r7, #24]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d82b      	bhi.n	800ebe2 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800eb8a:	8b7a      	ldrh	r2, [r7, #26]
 800eb8c:	887b      	ldrh	r3, [r7, #2]
 800eb8e:	4413      	add	r3, r2
 800eb90:	b29b      	uxth	r3, r3
 800eb92:	3308      	adds	r3, #8
 800eb94:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800eb96:	4b17      	ldr	r3, [pc, #92]	; (800ebf4 <mem_trim+0x1b4>)
 800eb98:	681a      	ldr	r2, [r3, #0]
 800eb9a:	8a7b      	ldrh	r3, [r7, #18]
 800eb9c:	4413      	add	r3, r2
 800eb9e:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800eba0:	4b1b      	ldr	r3, [pc, #108]	; (800ec10 <mem_trim+0x1d0>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	697a      	ldr	r2, [r7, #20]
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d202      	bcs.n	800ebb0 <mem_trim+0x170>
      lfree = mem2;
 800ebaa:	4a19      	ldr	r2, [pc, #100]	; (800ec10 <mem_trim+0x1d0>)
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ebb6:	69fb      	ldr	r3, [r7, #28]
 800ebb8:	881a      	ldrh	r2, [r3, #0]
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	8b7a      	ldrh	r2, [r7, #26]
 800ebc2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ebc4:	69fb      	ldr	r3, [r7, #28]
 800ebc6:	8a7a      	ldrh	r2, [r7, #18]
 800ebc8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	881b      	ldrh	r3, [r3, #0]
 800ebce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ebd2:	d006      	beq.n	800ebe2 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800ebd4:	4b07      	ldr	r3, [pc, #28]	; (800ebf4 <mem_trim+0x1b4>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	697a      	ldr	r2, [r7, #20]
 800ebda:	8812      	ldrh	r2, [r2, #0]
 800ebdc:	4413      	add	r3, r2
 800ebde:	8a7a      	ldrh	r2, [r7, #18]
 800ebe0:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ebe2:	480a      	ldr	r0, [pc, #40]	; (800ec0c <mem_trim+0x1cc>)
 800ebe4:	f008 fb8d 	bl	8017302 <sys_mutex_unlock>
  return rmem;
 800ebe8:	687b      	ldr	r3, [r7, #4]
}
 800ebea:	4618      	mov	r0, r3
 800ebec:	3720      	adds	r7, #32
 800ebee:	46bd      	mov	sp, r7
 800ebf0:	bd80      	pop	{r7, pc}
 800ebf2:	bf00      	nop
 800ebf4:	2400a3b4 	.word	0x2400a3b4
 800ebf8:	2400a3b8 	.word	0x2400a3b8
 800ebfc:	080185f0 	.word	0x080185f0
 800ec00:	08018730 	.word	0x08018730
 800ec04:	08018638 	.word	0x08018638
 800ec08:	08018748 	.word	0x08018748
 800ec0c:	2400a3c0 	.word	0x2400a3c0
 800ec10:	2400a3bc 	.word	0x2400a3bc

0800ec14 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b088      	sub	sp, #32
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800ec1e:	88fb      	ldrh	r3, [r7, #6]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d101      	bne.n	800ec28 <mem_malloc+0x14>
    return NULL;
 800ec24:	2300      	movs	r3, #0
 800ec26:	e0d1      	b.n	800edcc <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800ec28:	88fb      	ldrh	r3, [r7, #6]
 800ec2a:	3303      	adds	r3, #3
 800ec2c:	b29b      	uxth	r3, r3
 800ec2e:	f023 0303 	bic.w	r3, r3, #3
 800ec32:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800ec34:	88fb      	ldrh	r3, [r7, #6]
 800ec36:	2b0b      	cmp	r3, #11
 800ec38:	d801      	bhi.n	800ec3e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ec3a:	230c      	movs	r3, #12
 800ec3c:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800ec3e:	88fb      	ldrh	r3, [r7, #6]
 800ec40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ec44:	d901      	bls.n	800ec4a <mem_malloc+0x36>
    return NULL;
 800ec46:	2300      	movs	r3, #0
 800ec48:	e0c0      	b.n	800edcc <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ec4a:	4862      	ldr	r0, [pc, #392]	; (800edd4 <mem_malloc+0x1c0>)
 800ec4c:	f008 fb4a 	bl	80172e4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800ec50:	4b61      	ldr	r3, [pc, #388]	; (800edd8 <mem_malloc+0x1c4>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	461a      	mov	r2, r3
 800ec56:	4b61      	ldr	r3, [pc, #388]	; (800eddc <mem_malloc+0x1c8>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	1ad3      	subs	r3, r2, r3
 800ec5c:	83fb      	strh	r3, [r7, #30]
 800ec5e:	e0aa      	b.n	800edb6 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800ec60:	4b5e      	ldr	r3, [pc, #376]	; (800eddc <mem_malloc+0x1c8>)
 800ec62:	681a      	ldr	r2, [r3, #0]
 800ec64:	8bfb      	ldrh	r3, [r7, #30]
 800ec66:	4413      	add	r3, r2
 800ec68:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	791b      	ldrb	r3, [r3, #4]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	f040 809b 	bne.w	800edaa <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	881b      	ldrh	r3, [r3, #0]
 800ec78:	461a      	mov	r2, r3
 800ec7a:	8bfb      	ldrh	r3, [r7, #30]
 800ec7c:	1ad3      	subs	r3, r2, r3
 800ec7e:	f1a3 0208 	sub.w	r2, r3, #8
 800ec82:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800ec84:	429a      	cmp	r2, r3
 800ec86:	f0c0 8090 	bcc.w	800edaa <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	881b      	ldrh	r3, [r3, #0]
 800ec8e:	461a      	mov	r2, r3
 800ec90:	8bfb      	ldrh	r3, [r7, #30]
 800ec92:	1ad3      	subs	r3, r2, r3
 800ec94:	f1a3 0208 	sub.w	r2, r3, #8
 800ec98:	88fb      	ldrh	r3, [r7, #6]
 800ec9a:	3314      	adds	r3, #20
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d327      	bcc.n	800ecf0 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800eca0:	8bfa      	ldrh	r2, [r7, #30]
 800eca2:	88fb      	ldrh	r3, [r7, #6]
 800eca4:	4413      	add	r3, r2
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	3308      	adds	r3, #8
 800ecaa:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800ecac:	4b4b      	ldr	r3, [pc, #300]	; (800eddc <mem_malloc+0x1c8>)
 800ecae:	681a      	ldr	r2, [r3, #0]
 800ecb0:	8a7b      	ldrh	r3, [r7, #18]
 800ecb2:	4413      	add	r3, r2
 800ecb4:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	881a      	ldrh	r2, [r3, #0]
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	8bfa      	ldrh	r2, [r7, #30]
 800ecc8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	8a7a      	ldrh	r2, [r7, #18]
 800ecce:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	881b      	ldrh	r3, [r3, #0]
 800ecda:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ecde:	d00a      	beq.n	800ecf6 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800ece0:	4b3e      	ldr	r3, [pc, #248]	; (800eddc <mem_malloc+0x1c8>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	68fa      	ldr	r2, [r7, #12]
 800ece6:	8812      	ldrh	r2, [r2, #0]
 800ece8:	4413      	add	r3, r2
 800ecea:	8a7a      	ldrh	r2, [r7, #18]
 800ecec:	805a      	strh	r2, [r3, #2]
 800ecee:	e002      	b.n	800ecf6 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	2201      	movs	r2, #1
 800ecf4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ecf6:	4b38      	ldr	r3, [pc, #224]	; (800edd8 <mem_malloc+0x1c4>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	697a      	ldr	r2, [r7, #20]
 800ecfc:	429a      	cmp	r2, r3
 800ecfe:	d127      	bne.n	800ed50 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800ed00:	4b35      	ldr	r3, [pc, #212]	; (800edd8 <mem_malloc+0x1c4>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ed06:	e005      	b.n	800ed14 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800ed08:	4b34      	ldr	r3, [pc, #208]	; (800eddc <mem_malloc+0x1c8>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	69ba      	ldr	r2, [r7, #24]
 800ed0e:	8812      	ldrh	r2, [r2, #0]
 800ed10:	4413      	add	r3, r2
 800ed12:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ed14:	69bb      	ldr	r3, [r7, #24]
 800ed16:	791b      	ldrb	r3, [r3, #4]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d004      	beq.n	800ed26 <mem_malloc+0x112>
 800ed1c:	4b30      	ldr	r3, [pc, #192]	; (800ede0 <mem_malloc+0x1cc>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	69ba      	ldr	r2, [r7, #24]
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d1f0      	bne.n	800ed08 <mem_malloc+0xf4>
          }
          lfree = cur;
 800ed26:	4a2c      	ldr	r2, [pc, #176]	; (800edd8 <mem_malloc+0x1c4>)
 800ed28:	69bb      	ldr	r3, [r7, #24]
 800ed2a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ed2c:	4b2a      	ldr	r3, [pc, #168]	; (800edd8 <mem_malloc+0x1c4>)
 800ed2e:	681a      	ldr	r2, [r3, #0]
 800ed30:	4b2b      	ldr	r3, [pc, #172]	; (800ede0 <mem_malloc+0x1cc>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d00b      	beq.n	800ed50 <mem_malloc+0x13c>
 800ed38:	4b27      	ldr	r3, [pc, #156]	; (800edd8 <mem_malloc+0x1c4>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	791b      	ldrb	r3, [r3, #4]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d006      	beq.n	800ed50 <mem_malloc+0x13c>
 800ed42:	4b28      	ldr	r3, [pc, #160]	; (800ede4 <mem_malloc+0x1d0>)
 800ed44:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ed48:	4927      	ldr	r1, [pc, #156]	; (800ede8 <mem_malloc+0x1d4>)
 800ed4a:	4828      	ldr	r0, [pc, #160]	; (800edec <mem_malloc+0x1d8>)
 800ed4c:	f008 fb70 	bl	8017430 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ed50:	4820      	ldr	r0, [pc, #128]	; (800edd4 <mem_malloc+0x1c0>)
 800ed52:	f008 fad6 	bl	8017302 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ed56:	88fa      	ldrh	r2, [r7, #6]
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	4413      	add	r3, r2
 800ed5c:	3308      	adds	r3, #8
 800ed5e:	4a20      	ldr	r2, [pc, #128]	; (800ede0 <mem_malloc+0x1cc>)
 800ed60:	6812      	ldr	r2, [r2, #0]
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d906      	bls.n	800ed74 <mem_malloc+0x160>
 800ed66:	4b1f      	ldr	r3, [pc, #124]	; (800ede4 <mem_malloc+0x1d0>)
 800ed68:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800ed6c:	4920      	ldr	r1, [pc, #128]	; (800edf0 <mem_malloc+0x1dc>)
 800ed6e:	481f      	ldr	r0, [pc, #124]	; (800edec <mem_malloc+0x1d8>)
 800ed70:	f008 fb5e 	bl	8017430 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	f003 0303 	and.w	r3, r3, #3
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d006      	beq.n	800ed8c <mem_malloc+0x178>
 800ed7e:	4b19      	ldr	r3, [pc, #100]	; (800ede4 <mem_malloc+0x1d0>)
 800ed80:	f240 22d6 	movw	r2, #726	; 0x2d6
 800ed84:	491b      	ldr	r1, [pc, #108]	; (800edf4 <mem_malloc+0x1e0>)
 800ed86:	4819      	ldr	r0, [pc, #100]	; (800edec <mem_malloc+0x1d8>)
 800ed88:	f008 fb52 	bl	8017430 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	f003 0303 	and.w	r3, r3, #3
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d006      	beq.n	800eda4 <mem_malloc+0x190>
 800ed96:	4b13      	ldr	r3, [pc, #76]	; (800ede4 <mem_malloc+0x1d0>)
 800ed98:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800ed9c:	4916      	ldr	r1, [pc, #88]	; (800edf8 <mem_malloc+0x1e4>)
 800ed9e:	4813      	ldr	r0, [pc, #76]	; (800edec <mem_malloc+0x1d8>)
 800eda0:	f008 fb46 	bl	8017430 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	3308      	adds	r3, #8
 800eda8:	e010      	b.n	800edcc <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800edaa:	4b0c      	ldr	r3, [pc, #48]	; (800eddc <mem_malloc+0x1c8>)
 800edac:	681a      	ldr	r2, [r3, #0]
 800edae:	8bfb      	ldrh	r3, [r7, #30]
 800edb0:	4413      	add	r3, r2
 800edb2:	881b      	ldrh	r3, [r3, #0]
 800edb4:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800edb6:	8bfa      	ldrh	r2, [r7, #30]
 800edb8:	88fb      	ldrh	r3, [r7, #6]
 800edba:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800edbe:	429a      	cmp	r2, r3
 800edc0:	f4ff af4e 	bcc.w	800ec60 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800edc4:	4803      	ldr	r0, [pc, #12]	; (800edd4 <mem_malloc+0x1c0>)
 800edc6:	f008 fa9c 	bl	8017302 <sys_mutex_unlock>
  return NULL;
 800edca:	2300      	movs	r3, #0
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3720      	adds	r7, #32
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}
 800edd4:	2400a3c0 	.word	0x2400a3c0
 800edd8:	2400a3bc 	.word	0x2400a3bc
 800eddc:	2400a3b4 	.word	0x2400a3b4
 800ede0:	2400a3b8 	.word	0x2400a3b8
 800ede4:	080185f0 	.word	0x080185f0
 800ede8:	08018768 	.word	0x08018768
 800edec:	08018638 	.word	0x08018638
 800edf0:	08018784 	.word	0x08018784
 800edf4:	080187b4 	.word	0x080187b4
 800edf8:	080187e4 	.word	0x080187e4

0800edfc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800edfc:	b480      	push	{r7}
 800edfe:	b085      	sub	sp, #20
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	689b      	ldr	r3, [r3, #8]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	685b      	ldr	r3, [r3, #4]
 800ee10:	3303      	adds	r3, #3
 800ee12:	f023 0303 	bic.w	r3, r3, #3
 800ee16:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ee18:	2300      	movs	r3, #0
 800ee1a:	60fb      	str	r3, [r7, #12]
 800ee1c:	e011      	b.n	800ee42 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	689b      	ldr	r3, [r3, #8]
 800ee22:	681a      	ldr	r2, [r3, #0]
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	689b      	ldr	r3, [r3, #8]
 800ee2c:	68ba      	ldr	r2, [r7, #8]
 800ee2e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	881b      	ldrh	r3, [r3, #0]
 800ee34:	461a      	mov	r2, r3
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	4413      	add	r3, r2
 800ee3a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	3301      	adds	r3, #1
 800ee40:	60fb      	str	r3, [r7, #12]
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	885b      	ldrh	r3, [r3, #2]
 800ee46:	461a      	mov	r2, r3
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	dbe7      	blt.n	800ee1e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ee4e:	bf00      	nop
 800ee50:	3714      	adds	r7, #20
 800ee52:	46bd      	mov	sp, r7
 800ee54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee58:	4770      	bx	lr
	...

0800ee5c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ee62:	2300      	movs	r3, #0
 800ee64:	80fb      	strh	r3, [r7, #6]
 800ee66:	e009      	b.n	800ee7c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ee68:	88fb      	ldrh	r3, [r7, #6]
 800ee6a:	4a08      	ldr	r2, [pc, #32]	; (800ee8c <memp_init+0x30>)
 800ee6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee70:	4618      	mov	r0, r3
 800ee72:	f7ff ffc3 	bl	800edfc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ee76:	88fb      	ldrh	r3, [r7, #6]
 800ee78:	3301      	adds	r3, #1
 800ee7a:	80fb      	strh	r3, [r7, #6]
 800ee7c:	88fb      	ldrh	r3, [r7, #6]
 800ee7e:	2b0c      	cmp	r3, #12
 800ee80:	d9f2      	bls.n	800ee68 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ee82:	bf00      	nop
 800ee84:	3708      	adds	r7, #8
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}
 800ee8a:	bf00      	nop
 800ee8c:	0801a328 	.word	0x0801a328

0800ee90 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b084      	sub	sp, #16
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ee98:	f008 fa66 	bl	8017368 <sys_arch_protect>
 800ee9c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	689b      	ldr	r3, [r3, #8]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d015      	beq.n	800eed8 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	689b      	ldr	r3, [r3, #8]
 800eeb0:	68ba      	ldr	r2, [r7, #8]
 800eeb2:	6812      	ldr	r2, [r2, #0]
 800eeb4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	f003 0303 	and.w	r3, r3, #3
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d006      	beq.n	800eece <do_memp_malloc_pool+0x3e>
 800eec0:	4b09      	ldr	r3, [pc, #36]	; (800eee8 <do_memp_malloc_pool+0x58>)
 800eec2:	f240 1249 	movw	r2, #329	; 0x149
 800eec6:	4909      	ldr	r1, [pc, #36]	; (800eeec <do_memp_malloc_pool+0x5c>)
 800eec8:	4809      	ldr	r0, [pc, #36]	; (800eef0 <do_memp_malloc_pool+0x60>)
 800eeca:	f008 fab1 	bl	8017430 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800eece:	68f8      	ldr	r0, [r7, #12]
 800eed0:	f008 fa58 	bl	8017384 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	e003      	b.n	800eee0 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800eed8:	68f8      	ldr	r0, [r7, #12]
 800eeda:	f008 fa53 	bl	8017384 <sys_arch_unprotect>
  return NULL;
 800eede:	2300      	movs	r3, #0
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3710      	adds	r7, #16
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	08018808 	.word	0x08018808
 800eeec:	08018838 	.word	0x08018838
 800eef0:	0801885c 	.word	0x0801885c

0800eef4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d106      	bne.n	800ef10 <memp_malloc_pool+0x1c>
 800ef02:	4b0a      	ldr	r3, [pc, #40]	; (800ef2c <memp_malloc_pool+0x38>)
 800ef04:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ef08:	4909      	ldr	r1, [pc, #36]	; (800ef30 <memp_malloc_pool+0x3c>)
 800ef0a:	480a      	ldr	r0, [pc, #40]	; (800ef34 <memp_malloc_pool+0x40>)
 800ef0c:	f008 fa90 	bl	8017430 <iprintf>
  if (desc == NULL) {
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d101      	bne.n	800ef1a <memp_malloc_pool+0x26>
    return NULL;
 800ef16:	2300      	movs	r3, #0
 800ef18:	e003      	b.n	800ef22 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f7ff ffb8 	bl	800ee90 <do_memp_malloc_pool>
 800ef20:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3708      	adds	r7, #8
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	08018808 	.word	0x08018808
 800ef30:	08018884 	.word	0x08018884
 800ef34:	0801885c 	.word	0x0801885c

0800ef38 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b084      	sub	sp, #16
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	4603      	mov	r3, r0
 800ef40:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ef42:	79fb      	ldrb	r3, [r7, #7]
 800ef44:	2b0c      	cmp	r3, #12
 800ef46:	d908      	bls.n	800ef5a <memp_malloc+0x22>
 800ef48:	4b0a      	ldr	r3, [pc, #40]	; (800ef74 <memp_malloc+0x3c>)
 800ef4a:	f240 1287 	movw	r2, #391	; 0x187
 800ef4e:	490a      	ldr	r1, [pc, #40]	; (800ef78 <memp_malloc+0x40>)
 800ef50:	480a      	ldr	r0, [pc, #40]	; (800ef7c <memp_malloc+0x44>)
 800ef52:	f008 fa6d 	bl	8017430 <iprintf>
 800ef56:	2300      	movs	r3, #0
 800ef58:	e008      	b.n	800ef6c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ef5a:	79fb      	ldrb	r3, [r7, #7]
 800ef5c:	4a08      	ldr	r2, [pc, #32]	; (800ef80 <memp_malloc+0x48>)
 800ef5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7ff ff94 	bl	800ee90 <do_memp_malloc_pool>
 800ef68:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3710      	adds	r7, #16
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}
 800ef74:	08018808 	.word	0x08018808
 800ef78:	08018898 	.word	0x08018898
 800ef7c:	0801885c 	.word	0x0801885c
 800ef80:	0801a328 	.word	0x0801a328

0800ef84 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b084      	sub	sp, #16
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	f003 0303 	and.w	r3, r3, #3
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d006      	beq.n	800efa6 <do_memp_free_pool+0x22>
 800ef98:	4b0d      	ldr	r3, [pc, #52]	; (800efd0 <do_memp_free_pool+0x4c>)
 800ef9a:	f240 129d 	movw	r2, #413	; 0x19d
 800ef9e:	490d      	ldr	r1, [pc, #52]	; (800efd4 <do_memp_free_pool+0x50>)
 800efa0:	480d      	ldr	r0, [pc, #52]	; (800efd8 <do_memp_free_pool+0x54>)
 800efa2:	f008 fa45 	bl	8017430 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800efaa:	f008 f9dd 	bl	8017368 <sys_arch_protect>
 800efae:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	689b      	ldr	r3, [r3, #8]
 800efb4:	681a      	ldr	r2, [r3, #0]
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	689b      	ldr	r3, [r3, #8]
 800efbe:	68fa      	ldr	r2, [r7, #12]
 800efc0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800efc2:	68b8      	ldr	r0, [r7, #8]
 800efc4:	f008 f9de 	bl	8017384 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800efc8:	bf00      	nop
 800efca:	3710      	adds	r7, #16
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}
 800efd0:	08018808 	.word	0x08018808
 800efd4:	080188b8 	.word	0x080188b8
 800efd8:	0801885c 	.word	0x0801885c

0800efdc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b082      	sub	sp, #8
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
 800efe4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d106      	bne.n	800effa <memp_free_pool+0x1e>
 800efec:	4b0a      	ldr	r3, [pc, #40]	; (800f018 <memp_free_pool+0x3c>)
 800efee:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 800eff2:	490a      	ldr	r1, [pc, #40]	; (800f01c <memp_free_pool+0x40>)
 800eff4:	480a      	ldr	r0, [pc, #40]	; (800f020 <memp_free_pool+0x44>)
 800eff6:	f008 fa1b 	bl	8017430 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d007      	beq.n	800f010 <memp_free_pool+0x34>
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d004      	beq.n	800f010 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800f006:	6839      	ldr	r1, [r7, #0]
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f7ff ffbb 	bl	800ef84 <do_memp_free_pool>
 800f00e:	e000      	b.n	800f012 <memp_free_pool+0x36>
    return;
 800f010:	bf00      	nop
}
 800f012:	3708      	adds	r7, #8
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}
 800f018:	08018808 	.word	0x08018808
 800f01c:	08018884 	.word	0x08018884
 800f020:	0801885c 	.word	0x0801885c

0800f024 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b082      	sub	sp, #8
 800f028:	af00      	add	r7, sp, #0
 800f02a:	4603      	mov	r3, r0
 800f02c:	6039      	str	r1, [r7, #0]
 800f02e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f030:	79fb      	ldrb	r3, [r7, #7]
 800f032:	2b0c      	cmp	r3, #12
 800f034:	d907      	bls.n	800f046 <memp_free+0x22>
 800f036:	4b0c      	ldr	r3, [pc, #48]	; (800f068 <memp_free+0x44>)
 800f038:	f240 12db 	movw	r2, #475	; 0x1db
 800f03c:	490b      	ldr	r1, [pc, #44]	; (800f06c <memp_free+0x48>)
 800f03e:	480c      	ldr	r0, [pc, #48]	; (800f070 <memp_free+0x4c>)
 800f040:	f008 f9f6 	bl	8017430 <iprintf>
 800f044:	e00c      	b.n	800f060 <memp_free+0x3c>

  if (mem == NULL) {
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d008      	beq.n	800f05e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f04c:	79fb      	ldrb	r3, [r7, #7]
 800f04e:	4a09      	ldr	r2, [pc, #36]	; (800f074 <memp_free+0x50>)
 800f050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f054:	6839      	ldr	r1, [r7, #0]
 800f056:	4618      	mov	r0, r3
 800f058:	f7ff ff94 	bl	800ef84 <do_memp_free_pool>
 800f05c:	e000      	b.n	800f060 <memp_free+0x3c>
    return;
 800f05e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f060:	3708      	adds	r7, #8
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
 800f066:	bf00      	nop
 800f068:	08018808 	.word	0x08018808
 800f06c:	080188d8 	.word	0x080188d8
 800f070:	0801885c 	.word	0x0801885c
 800f074:	0801a328 	.word	0x0801a328

0800f078 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f078:	b480      	push	{r7}
 800f07a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f07c:	bf00      	nop
 800f07e:	46bd      	mov	sp, r7
 800f080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f084:	4770      	bx	lr
	...

0800f088 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b084      	sub	sp, #16
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	60f8      	str	r0, [r7, #12]
 800f090:	60b9      	str	r1, [r7, #8]
 800f092:	607a      	str	r2, [r7, #4]
 800f094:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800f096:	69fb      	ldr	r3, [r7, #28]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d105      	bne.n	800f0a8 <netif_add+0x20>
 800f09c:	4b1f      	ldr	r3, [pc, #124]	; (800f11c <netif_add+0x94>)
 800f09e:	22fb      	movs	r2, #251	; 0xfb
 800f0a0:	491f      	ldr	r1, [pc, #124]	; (800f120 <netif_add+0x98>)
 800f0a2:	4820      	ldr	r0, [pc, #128]	; (800f124 <netif_add+0x9c>)
 800f0a4:	f008 f9c4 	bl	8017430 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	2203      	movs	r2, #3
 800f0c6:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	69ba      	ldr	r2, [r7, #24]
 800f0ce:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800f0d0:	4b15      	ldr	r3, [pc, #84]	; (800f128 <netif_add+0xa0>)
 800f0d2:	781b      	ldrb	r3, [r3, #0]
 800f0d4:	1c5a      	adds	r2, r3, #1
 800f0d6:	b2d1      	uxtb	r1, r2
 800f0d8:	4a13      	ldr	r2, [pc, #76]	; (800f128 <netif_add+0xa0>)
 800f0da:	7011      	strb	r1, [r2, #0]
 800f0dc:	68fa      	ldr	r2, [r7, #12]
 800f0de:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	6a3a      	ldr	r2, [r7, #32]
 800f0e6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	687a      	ldr	r2, [r7, #4]
 800f0ec:	68b9      	ldr	r1, [r7, #8]
 800f0ee:	68f8      	ldr	r0, [r7, #12]
 800f0f0:	f000 f81e 	bl	800f130 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f0f4:	69fb      	ldr	r3, [r7, #28]
 800f0f6:	68f8      	ldr	r0, [r7, #12]
 800f0f8:	4798      	blx	r3
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d001      	beq.n	800f104 <netif_add+0x7c>
    return NULL;
 800f100:	2300      	movs	r3, #0
 800f102:	e007      	b.n	800f114 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f104:	4b09      	ldr	r3, [pc, #36]	; (800f12c <netif_add+0xa4>)
 800f106:	681a      	ldr	r2, [r3, #0]
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f10c:	4a07      	ldr	r2, [pc, #28]	; (800f12c <netif_add+0xa4>)
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800f112:	68fb      	ldr	r3, [r7, #12]
}
 800f114:	4618      	mov	r0, r3
 800f116:	3710      	adds	r7, #16
 800f118:	46bd      	mov	sp, r7
 800f11a:	bd80      	pop	{r7, pc}
 800f11c:	080188f4 	.word	0x080188f4
 800f120:	08018928 	.word	0x08018928
 800f124:	08018940 	.word	0x08018940
 800f128:	2400a3f8 	.word	0x2400a3f8
 800f12c:	2400d8e0 	.word	0x2400d8e0

0800f130 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b084      	sub	sp, #16
 800f134:	af00      	add	r7, sp, #0
 800f136:	60f8      	str	r0, [r7, #12]
 800f138:	60b9      	str	r1, [r7, #8]
 800f13a:	607a      	str	r2, [r7, #4]
 800f13c:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d003      	beq.n	800f14c <netif_set_addr+0x1c>
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d10c      	bne.n	800f166 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800f14c:	68b9      	ldr	r1, [r7, #8]
 800f14e:	68f8      	ldr	r0, [r7, #12]
 800f150:	f000 f81a 	bl	800f188 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800f154:	6879      	ldr	r1, [r7, #4]
 800f156:	68f8      	ldr	r0, [r7, #12]
 800f158:	f000 f862 	bl	800f220 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800f15c:	6839      	ldr	r1, [r7, #0]
 800f15e:	68f8      	ldr	r0, [r7, #12]
 800f160:	f000 f84a 	bl	800f1f8 <netif_set_gw>
 800f164:	e00b      	b.n	800f17e <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800f166:	6879      	ldr	r1, [r7, #4]
 800f168:	68f8      	ldr	r0, [r7, #12]
 800f16a:	f000 f859 	bl	800f220 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800f16e:	6839      	ldr	r1, [r7, #0]
 800f170:	68f8      	ldr	r0, [r7, #12]
 800f172:	f000 f841 	bl	800f1f8 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800f176:	68b9      	ldr	r1, [r7, #8]
 800f178:	68f8      	ldr	r0, [r7, #12]
 800f17a:	f000 f805 	bl	800f188 <netif_set_ipaddr>
  }
}
 800f17e:	bf00      	nop
 800f180:	3710      	adds	r7, #16
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}
	...

0800f188 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b084      	sub	sp, #16
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d003      	beq.n	800f1a0 <netif_set_ipaddr+0x18>
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	60fb      	str	r3, [r7, #12]
 800f19e:	e002      	b.n	800f1a6 <netif_set_ipaddr+0x1e>
 800f1a0:	4b14      	ldr	r3, [pc, #80]	; (800f1f4 <netif_set_ipaddr+0x6c>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800f1a6:	68fa      	ldr	r2, [r7, #12]
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	3304      	adds	r3, #4
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d01c      	beq.n	800f1ec <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	3304      	adds	r3, #4
 800f1b6:	f107 020c 	add.w	r2, r7, #12
 800f1ba:	4611      	mov	r1, r2
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f002 f8cd 	bl	801135c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	3304      	adds	r3, #4
 800f1c6:	f107 020c 	add.w	r2, r7, #12
 800f1ca:	4611      	mov	r1, r2
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f005 fd5f 	bl	8014c90 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d002      	beq.n	800f1de <netif_set_ipaddr+0x56>
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	e000      	b.n	800f1e0 <netif_set_ipaddr+0x58>
 800f1de:	2300      	movs	r3, #0
 800f1e0:	687a      	ldr	r2, [r7, #4]
 800f1e2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f1e4:	2101      	movs	r1, #1
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f000 f861 	bl	800f2ae <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800f1ec:	bf00      	nop
 800f1ee:	3710      	adds	r7, #16
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}
 800f1f4:	0801a39c 	.word	0x0801a39c

0800f1f8 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800f1f8:	b480      	push	{r7}
 800f1fa:	b083      	sub	sp, #12
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d002      	beq.n	800f20e <netif_set_gw+0x16>
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	e000      	b.n	800f210 <netif_set_gw+0x18>
 800f20e:	2300      	movs	r3, #0
 800f210:	687a      	ldr	r2, [r7, #4]
 800f212:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800f214:	bf00      	nop
 800f216:	370c      	adds	r7, #12
 800f218:	46bd      	mov	sp, r7
 800f21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21e:	4770      	bx	lr

0800f220 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800f220:	b480      	push	{r7}
 800f222:	b083      	sub	sp, #12
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d002      	beq.n	800f236 <netif_set_netmask+0x16>
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	e000      	b.n	800f238 <netif_set_netmask+0x18>
 800f236:	2300      	movs	r3, #0
 800f238:	687a      	ldr	r2, [r7, #4]
 800f23a:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800f23c:	bf00      	nop
 800f23e:	370c      	adds	r7, #12
 800f240:	46bd      	mov	sp, r7
 800f242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f246:	4770      	bx	lr

0800f248 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f248:	b480      	push	{r7}
 800f24a:	b083      	sub	sp, #12
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f250:	4a04      	ldr	r2, [pc, #16]	; (800f264 <netif_set_default+0x1c>)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f256:	bf00      	nop
 800f258:	370c      	adds	r7, #12
 800f25a:	46bd      	mov	sp, r7
 800f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f260:	4770      	bx	lr
 800f262:	bf00      	nop
 800f264:	2400d8e4 	.word	0x2400d8e4

0800f268 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b082      	sub	sp, #8
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f276:	f003 0301 	and.w	r3, r3, #1
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d113      	bne.n	800f2a6 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f284:	f043 0301 	orr.w	r3, r3, #1
 800f288:	b2da      	uxtb	r2, r3
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f296:	f003 0304 	and.w	r3, r3, #4
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d003      	beq.n	800f2a6 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800f29e:	2103      	movs	r1, #3
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f000 f804 	bl	800f2ae <netif_issue_reports>
    }
  }
}
 800f2a6:	bf00      	nop
 800f2a8:	3708      	adds	r7, #8
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}

0800f2ae <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800f2ae:	b580      	push	{r7, lr}
 800f2b0:	b082      	sub	sp, #8
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6078      	str	r0, [r7, #4]
 800f2b6:	460b      	mov	r3, r1
 800f2b8:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f2ba:	78fb      	ldrb	r3, [r7, #3]
 800f2bc:	f003 0301 	and.w	r3, r3, #1
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d011      	beq.n	800f2e8 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	3304      	adds	r3, #4
 800f2c8:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d00c      	beq.n	800f2e8 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f2d4:	f003 0308 	and.w	r3, r3, #8
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d005      	beq.n	800f2e8 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	3304      	adds	r3, #4
 800f2e0:	4619      	mov	r1, r3
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f006 fc08 	bl	8015af8 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800f2e8:	bf00      	nop
 800f2ea:	3708      	adds	r7, #8
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b082      	sub	sp, #8
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f2fe:	f003 0301 	and.w	r3, r3, #1
 800f302:	2b00      	cmp	r3, #0
 800f304:	d012      	beq.n	800f32c <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f30c:	f023 0301 	bic.w	r3, r3, #1
 800f310:	b2da      	uxtb	r2, r3
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f31e:	f003 0308 	and.w	r3, r3, #8
 800f322:	2b00      	cmp	r3, #0
 800f324:	d002      	beq.n	800f32c <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f005 ffac 	bl	8015284 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800f32c:	bf00      	nop
 800f32e:	3708      	adds	r7, #8
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b082      	sub	sp, #8
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f342:	f003 0304 	and.w	r3, r3, #4
 800f346:	2b00      	cmp	r3, #0
 800f348:	d113      	bne.n	800f372 <netif_set_link_up+0x3e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f350:	f043 0304 	orr.w	r3, r3, #4
 800f354:	b2da      	uxtb	r2, r3
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f362:	f003 0301 	and.w	r3, r3, #1
 800f366:	2b00      	cmp	r3, #0
 800f368:	d003      	beq.n	800f372 <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800f36a:	2103      	movs	r1, #3
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f7ff ff9e 	bl	800f2ae <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
  }
}
 800f372:	bf00      	nop
 800f374:	3708      	adds	r7, #8
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}

0800f37a <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 800f37a:	b480      	push	{r7}
 800f37c:	b083      	sub	sp, #12
 800f37e:	af00      	add	r7, sp, #0
 800f380:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f388:	f003 0304 	and.w	r3, r3, #4
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d008      	beq.n	800f3a2 <netif_set_link_down+0x28>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800f396:	f023 0304 	bic.w	r3, r3, #4
 800f39a:	b2da      	uxtb	r2, r3
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    NETIF_LINK_CALLBACK(netif);
  }
}
 800f3a2:	bf00      	nop
 800f3a4:	370c      	adds	r7, #12
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ac:	4770      	bx	lr
	...

0800f3b0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b082      	sub	sp, #8
 800f3b4:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800f3b6:	f007 ffd7 	bl	8017368 <sys_arch_protect>
 800f3ba:	6038      	str	r0, [r7, #0]
 800f3bc:	4b0f      	ldr	r3, [pc, #60]	; (800f3fc <pbuf_free_ooseq+0x4c>)
 800f3be:	2200      	movs	r2, #0
 800f3c0:	701a      	strb	r2, [r3, #0]
 800f3c2:	6838      	ldr	r0, [r7, #0]
 800f3c4:	f007 ffde 	bl	8017384 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f3c8:	4b0d      	ldr	r3, [pc, #52]	; (800f400 <pbuf_free_ooseq+0x50>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	607b      	str	r3, [r7, #4]
 800f3ce:	e00f      	b.n	800f3f0 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d008      	beq.n	800f3ea <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f001 fcf8 	bl	8010dd2 <tcp_segs_free>
      pcb->ooseq = NULL;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800f3e8:	e005      	b.n	800f3f6 <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	68db      	ldr	r3, [r3, #12]
 800f3ee:	607b      	str	r3, [r7, #4]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d1ec      	bne.n	800f3d0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800f3f6:	3708      	adds	r7, #8
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}
 800f3fc:	2400d8e8 	.word	0x2400d8e8
 800f400:	2400d8f0 	.word	0x2400d8f0

0800f404 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b082      	sub	sp, #8
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800f40c:	f7ff ffd0 	bl	800f3b0 <pbuf_free_ooseq>
}
 800f410:	bf00      	nop
 800f412:	3708      	adds	r7, #8
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}

0800f418 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b082      	sub	sp, #8
 800f41c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800f41e:	f007 ffa3 	bl	8017368 <sys_arch_protect>
 800f422:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800f424:	4b10      	ldr	r3, [pc, #64]	; (800f468 <pbuf_pool_is_empty+0x50>)
 800f426:	781b      	ldrb	r3, [r3, #0]
 800f428:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800f42a:	4b0f      	ldr	r3, [pc, #60]	; (800f468 <pbuf_pool_is_empty+0x50>)
 800f42c:	2201      	movs	r2, #1
 800f42e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f007 ffa7 	bl	8017384 <sys_arch_unprotect>

  if (!queued) {
 800f436:	78fb      	ldrb	r3, [r7, #3]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d110      	bne.n	800f45e <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800f43c:	2200      	movs	r2, #0
 800f43e:	2100      	movs	r1, #0
 800f440:	480a      	ldr	r0, [pc, #40]	; (800f46c <pbuf_pool_is_empty+0x54>)
 800f442:	f7ff f81f 	bl	800e484 <tcpip_callback_with_block>
 800f446:	4603      	mov	r3, r0
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d008      	beq.n	800f45e <pbuf_pool_is_empty+0x46>
 800f44c:	f007 ff8c 	bl	8017368 <sys_arch_protect>
 800f450:	6078      	str	r0, [r7, #4]
 800f452:	4b05      	ldr	r3, [pc, #20]	; (800f468 <pbuf_pool_is_empty+0x50>)
 800f454:	2200      	movs	r2, #0
 800f456:	701a      	strb	r2, [r3, #0]
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f007 ff93 	bl	8017384 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800f45e:	bf00      	nop
 800f460:	3708      	adds	r7, #8
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop
 800f468:	2400d8e8 	.word	0x2400d8e8
 800f46c:	0800f405 	.word	0x0800f405

0800f470 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b088      	sub	sp, #32
 800f474:	af00      	add	r7, sp, #0
 800f476:	4603      	mov	r3, r0
 800f478:	71fb      	strb	r3, [r7, #7]
 800f47a:	460b      	mov	r3, r1
 800f47c:	80bb      	strh	r3, [r7, #4]
 800f47e:	4613      	mov	r3, r2
 800f480:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800f482:	79fb      	ldrb	r3, [r7, #7]
 800f484:	2b04      	cmp	r3, #4
 800f486:	d81c      	bhi.n	800f4c2 <pbuf_alloc+0x52>
 800f488:	a201      	add	r2, pc, #4	; (adr r2, 800f490 <pbuf_alloc+0x20>)
 800f48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f48e:	bf00      	nop
 800f490:	0800f4a5 	.word	0x0800f4a5
 800f494:	0800f4ab 	.word	0x0800f4ab
 800f498:	0800f4b1 	.word	0x0800f4b1
 800f49c:	0800f4b7 	.word	0x0800f4b7
 800f4a0:	0800f4bd 	.word	0x0800f4bd
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800f4a4:	2336      	movs	r3, #54	; 0x36
 800f4a6:	82fb      	strh	r3, [r7, #22]
    break;
 800f4a8:	e014      	b.n	800f4d4 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800f4aa:	2322      	movs	r3, #34	; 0x22
 800f4ac:	82fb      	strh	r3, [r7, #22]
    break;
 800f4ae:	e011      	b.n	800f4d4 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800f4b0:	230e      	movs	r3, #14
 800f4b2:	82fb      	strh	r3, [r7, #22]
    break;
 800f4b4:	e00e      	b.n	800f4d4 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	82fb      	strh	r3, [r7, #22]
    break;
 800f4ba:	e00b      	b.n	800f4d4 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	82fb      	strh	r3, [r7, #22]
    break;
 800f4c0:	e008      	b.n	800f4d4 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800f4c2:	4ba5      	ldr	r3, [pc, #660]	; (800f758 <pbuf_alloc+0x2e8>)
 800f4c4:	f44f 728b 	mov.w	r2, #278	; 0x116
 800f4c8:	49a4      	ldr	r1, [pc, #656]	; (800f75c <pbuf_alloc+0x2ec>)
 800f4ca:	48a5      	ldr	r0, [pc, #660]	; (800f760 <pbuf_alloc+0x2f0>)
 800f4cc:	f007 ffb0 	bl	8017430 <iprintf>
    return NULL;
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	e15d      	b.n	800f790 <pbuf_alloc+0x320>
  }

  switch (type) {
 800f4d4:	79bb      	ldrb	r3, [r7, #6]
 800f4d6:	2b03      	cmp	r3, #3
 800f4d8:	f200 8134 	bhi.w	800f744 <pbuf_alloc+0x2d4>
 800f4dc:	a201      	add	r2, pc, #4	; (adr r2, 800f4e4 <pbuf_alloc+0x74>)
 800f4de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4e2:	bf00      	nop
 800f4e4:	0800f685 	.word	0x0800f685
 800f4e8:	0800f711 	.word	0x0800f711
 800f4ec:	0800f711 	.word	0x0800f711
 800f4f0:	0800f4f5 	.word	0x0800f4f5
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f4f4:	200c      	movs	r0, #12
 800f4f6:	f7ff fd1f 	bl	800ef38 <memp_malloc>
 800f4fa:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d103      	bne.n	800f50a <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800f502:	f7ff ff89 	bl	800f418 <pbuf_pool_is_empty>
      return NULL;
 800f506:	2300      	movs	r3, #0
 800f508:	e142      	b.n	800f790 <pbuf_alloc+0x320>
    }
    p->type = type;
 800f50a:	69fb      	ldr	r3, [r7, #28]
 800f50c:	79ba      	ldrb	r2, [r7, #6]
 800f50e:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800f510:	69fb      	ldr	r3, [r7, #28]
 800f512:	2200      	movs	r2, #0
 800f514:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800f516:	8afb      	ldrh	r3, [r7, #22]
 800f518:	3310      	adds	r3, #16
 800f51a:	69fa      	ldr	r2, [r7, #28]
 800f51c:	4413      	add	r3, r2
 800f51e:	3303      	adds	r3, #3
 800f520:	f023 0303 	bic.w	r3, r3, #3
 800f524:	461a      	mov	r2, r3
 800f526:	69fb      	ldr	r3, [r7, #28]
 800f528:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800f52a:	69fb      	ldr	r3, [r7, #28]
 800f52c:	685b      	ldr	r3, [r3, #4]
 800f52e:	f003 0303 	and.w	r3, r3, #3
 800f532:	2b00      	cmp	r3, #0
 800f534:	d006      	beq.n	800f544 <pbuf_alloc+0xd4>
 800f536:	4b88      	ldr	r3, [pc, #544]	; (800f758 <pbuf_alloc+0x2e8>)
 800f538:	f240 1229 	movw	r2, #297	; 0x129
 800f53c:	4989      	ldr	r1, [pc, #548]	; (800f764 <pbuf_alloc+0x2f4>)
 800f53e:	4888      	ldr	r0, [pc, #544]	; (800f760 <pbuf_alloc+0x2f0>)
 800f540:	f007 ff76 	bl	8017430 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	88ba      	ldrh	r2, [r7, #4]
 800f548:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800f54a:	8afb      	ldrh	r3, [r7, #22]
 800f54c:	3303      	adds	r3, #3
 800f54e:	f023 0303 	bic.w	r3, r3, #3
 800f552:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800f556:	88bb      	ldrh	r3, [r7, #4]
 800f558:	4293      	cmp	r3, r2
 800f55a:	bf28      	it	cs
 800f55c:	4613      	movcs	r3, r2
 800f55e:	b29a      	uxth	r2, r3
 800f560:	69fb      	ldr	r3, [r7, #28]
 800f562:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800f564:	69fb      	ldr	r3, [r7, #28]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	69fa      	ldr	r2, [r7, #28]
 800f56a:	8952      	ldrh	r2, [r2, #10]
 800f56c:	441a      	add	r2, r3
 800f56e:	69fb      	ldr	r3, [r7, #28]
 800f570:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f574:	429a      	cmp	r2, r3
 800f576:	d906      	bls.n	800f586 <pbuf_alloc+0x116>
 800f578:	4b77      	ldr	r3, [pc, #476]	; (800f758 <pbuf_alloc+0x2e8>)
 800f57a:	f44f 7298 	mov.w	r2, #304	; 0x130
 800f57e:	497a      	ldr	r1, [pc, #488]	; (800f768 <pbuf_alloc+0x2f8>)
 800f580:	4877      	ldr	r0, [pc, #476]	; (800f760 <pbuf_alloc+0x2f0>)
 800f582:	f007 ff55 	bl	8017430 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f586:	8afb      	ldrh	r3, [r7, #22]
 800f588:	3303      	adds	r3, #3
 800f58a:	f023 0303 	bic.w	r3, r3, #3
 800f58e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800f592:	d106      	bne.n	800f5a2 <pbuf_alloc+0x132>
 800f594:	4b70      	ldr	r3, [pc, #448]	; (800f758 <pbuf_alloc+0x2e8>)
 800f596:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f59a:	4974      	ldr	r1, [pc, #464]	; (800f76c <pbuf_alloc+0x2fc>)
 800f59c:	4870      	ldr	r0, [pc, #448]	; (800f760 <pbuf_alloc+0x2f0>)
 800f59e:	f007 ff47 	bl	8017430 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800f5a2:	69fb      	ldr	r3, [r7, #28]
 800f5a4:	2201      	movs	r2, #1
 800f5a6:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800f5a8:	69fb      	ldr	r3, [r7, #28]
 800f5aa:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800f5ac:	88bb      	ldrh	r3, [r7, #4]
 800f5ae:	69fa      	ldr	r2, [r7, #28]
 800f5b0:	8952      	ldrh	r2, [r2, #10]
 800f5b2:	1a9b      	subs	r3, r3, r2
 800f5b4:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800f5b6:	e061      	b.n	800f67c <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f5b8:	200c      	movs	r0, #12
 800f5ba:	f7ff fcbd 	bl	800ef38 <memp_malloc>
 800f5be:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d106      	bne.n	800f5d4 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800f5c6:	f7ff ff27 	bl	800f418 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800f5ca:	69f8      	ldr	r0, [r7, #28]
 800f5cc:	f000 fac2 	bl	800fb54 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	e0dd      	b.n	800f790 <pbuf_alloc+0x320>
      }
      q->type = type;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	79ba      	ldrb	r2, [r7, #6]
 800f5d8:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	2200      	movs	r2, #0
 800f5de:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800f5e6:	69bb      	ldr	r3, [r7, #24]
 800f5e8:	68fa      	ldr	r2, [r7, #12]
 800f5ea:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800f5ec:	693b      	ldr	r3, [r7, #16]
 800f5ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	dd06      	ble.n	800f604 <pbuf_alloc+0x194>
 800f5f6:	4b58      	ldr	r3, [pc, #352]	; (800f758 <pbuf_alloc+0x2e8>)
 800f5f8:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800f5fc:	495c      	ldr	r1, [pc, #368]	; (800f770 <pbuf_alloc+0x300>)
 800f5fe:	4858      	ldr	r0, [pc, #352]	; (800f760 <pbuf_alloc+0x2f0>)
 800f600:	f007 ff16 	bl	8017430 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	b29a      	uxth	r2, r3
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800f60c:	693b      	ldr	r3, [r7, #16]
 800f60e:	b29b      	uxth	r3, r3
 800f610:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800f614:	bf28      	it	cs
 800f616:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800f61a:	b29a      	uxth	r2, r3
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	f103 0210 	add.w	r2, r3, #16
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	685b      	ldr	r3, [r3, #4]
 800f62e:	f003 0303 	and.w	r3, r3, #3
 800f632:	2b00      	cmp	r3, #0
 800f634:	d006      	beq.n	800f644 <pbuf_alloc+0x1d4>
 800f636:	4b48      	ldr	r3, [pc, #288]	; (800f758 <pbuf_alloc+0x2e8>)
 800f638:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800f63c:	494d      	ldr	r1, [pc, #308]	; (800f774 <pbuf_alloc+0x304>)
 800f63e:	4848      	ldr	r0, [pc, #288]	; (800f760 <pbuf_alloc+0x2f0>)
 800f640:	f007 fef6 	bl	8017430 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800f644:	69fb      	ldr	r3, [r7, #28]
 800f646:	685b      	ldr	r3, [r3, #4]
 800f648:	69fa      	ldr	r2, [r7, #28]
 800f64a:	8952      	ldrh	r2, [r2, #10]
 800f64c:	441a      	add	r2, r3
 800f64e:	69fb      	ldr	r3, [r7, #28]
 800f650:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f654:	429a      	cmp	r2, r3
 800f656:	d906      	bls.n	800f666 <pbuf_alloc+0x1f6>
 800f658:	4b3f      	ldr	r3, [pc, #252]	; (800f758 <pbuf_alloc+0x2e8>)
 800f65a:	f240 1255 	movw	r2, #341	; 0x155
 800f65e:	4942      	ldr	r1, [pc, #264]	; (800f768 <pbuf_alloc+0x2f8>)
 800f660:	483f      	ldr	r0, [pc, #252]	; (800f760 <pbuf_alloc+0x2f0>)
 800f662:	f007 fee5 	bl	8017430 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	2201      	movs	r2, #1
 800f66a:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	895b      	ldrh	r3, [r3, #10]
 800f670:	461a      	mov	r2, r3
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	1a9b      	subs	r3, r3, r2
 800f676:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	dc9a      	bgt.n	800f5b8 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800f682:	e07e      	b.n	800f782 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800f684:	8afb      	ldrh	r3, [r7, #22]
 800f686:	3313      	adds	r3, #19
 800f688:	b29b      	uxth	r3, r3
 800f68a:	f023 0303 	bic.w	r3, r3, #3
 800f68e:	b29a      	uxth	r2, r3
 800f690:	88bb      	ldrh	r3, [r7, #4]
 800f692:	3303      	adds	r3, #3
 800f694:	b29b      	uxth	r3, r3
 800f696:	f023 0303 	bic.w	r3, r3, #3
 800f69a:	b29b      	uxth	r3, r3
 800f69c:	4413      	add	r3, r2
 800f69e:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800f6a0:	897a      	ldrh	r2, [r7, #10]
 800f6a2:	88bb      	ldrh	r3, [r7, #4]
 800f6a4:	3303      	adds	r3, #3
 800f6a6:	f023 0303 	bic.w	r3, r3, #3
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	d201      	bcs.n	800f6b2 <pbuf_alloc+0x242>
        return NULL;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	e06e      	b.n	800f790 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800f6b2:	897b      	ldrh	r3, [r7, #10]
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f7ff faad 	bl	800ec14 <mem_malloc>
 800f6ba:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800f6bc:	69fb      	ldr	r3, [r7, #28]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d101      	bne.n	800f6c6 <pbuf_alloc+0x256>
      return NULL;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	e064      	b.n	800f790 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800f6c6:	8afb      	ldrh	r3, [r7, #22]
 800f6c8:	3310      	adds	r3, #16
 800f6ca:	69fa      	ldr	r2, [r7, #28]
 800f6cc:	4413      	add	r3, r2
 800f6ce:	3303      	adds	r3, #3
 800f6d0:	f023 0303 	bic.w	r3, r3, #3
 800f6d4:	461a      	mov	r2, r3
 800f6d6:	69fb      	ldr	r3, [r7, #28]
 800f6d8:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800f6da:	69fb      	ldr	r3, [r7, #28]
 800f6dc:	88ba      	ldrh	r2, [r7, #4]
 800f6de:	811a      	strh	r2, [r3, #8]
 800f6e0:	69fb      	ldr	r3, [r7, #28]
 800f6e2:	891a      	ldrh	r2, [r3, #8]
 800f6e4:	69fb      	ldr	r3, [r7, #28]
 800f6e6:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800f6e8:	69fb      	ldr	r3, [r7, #28]
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	601a      	str	r2, [r3, #0]
    p->type = type;
 800f6ee:	69fb      	ldr	r3, [r7, #28]
 800f6f0:	79ba      	ldrb	r2, [r7, #6]
 800f6f2:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	685b      	ldr	r3, [r3, #4]
 800f6f8:	f003 0303 	and.w	r3, r3, #3
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d03f      	beq.n	800f780 <pbuf_alloc+0x310>
 800f700:	4b15      	ldr	r3, [pc, #84]	; (800f758 <pbuf_alloc+0x2e8>)
 800f702:	f240 1277 	movw	r2, #375	; 0x177
 800f706:	491c      	ldr	r1, [pc, #112]	; (800f778 <pbuf_alloc+0x308>)
 800f708:	4815      	ldr	r0, [pc, #84]	; (800f760 <pbuf_alloc+0x2f0>)
 800f70a:	f007 fe91 	bl	8017430 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800f70e:	e037      	b.n	800f780 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f710:	200b      	movs	r0, #11
 800f712:	f7ff fc11 	bl	800ef38 <memp_malloc>
 800f716:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800f718:	69fb      	ldr	r3, [r7, #28]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d101      	bne.n	800f722 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800f71e:	2300      	movs	r3, #0
 800f720:	e036      	b.n	800f790 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800f722:	69fb      	ldr	r3, [r7, #28]
 800f724:	2200      	movs	r2, #0
 800f726:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800f728:	69fb      	ldr	r3, [r7, #28]
 800f72a:	88ba      	ldrh	r2, [r7, #4]
 800f72c:	811a      	strh	r2, [r3, #8]
 800f72e:	69fb      	ldr	r3, [r7, #28]
 800f730:	891a      	ldrh	r2, [r3, #8]
 800f732:	69fb      	ldr	r3, [r7, #28]
 800f734:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800f736:	69fb      	ldr	r3, [r7, #28]
 800f738:	2200      	movs	r2, #0
 800f73a:	601a      	str	r2, [r3, #0]
    p->type = type;
 800f73c:	69fb      	ldr	r3, [r7, #28]
 800f73e:	79ba      	ldrb	r2, [r7, #6]
 800f740:	731a      	strb	r2, [r3, #12]
    break;
 800f742:	e01e      	b.n	800f782 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f744:	4b04      	ldr	r3, [pc, #16]	; (800f758 <pbuf_alloc+0x2e8>)
 800f746:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800f74a:	490c      	ldr	r1, [pc, #48]	; (800f77c <pbuf_alloc+0x30c>)
 800f74c:	4804      	ldr	r0, [pc, #16]	; (800f760 <pbuf_alloc+0x2f0>)
 800f74e:	f007 fe6f 	bl	8017430 <iprintf>
    return NULL;
 800f752:	2300      	movs	r3, #0
 800f754:	e01c      	b.n	800f790 <pbuf_alloc+0x320>
 800f756:	bf00      	nop
 800f758:	08018968 	.word	0x08018968
 800f75c:	08018998 	.word	0x08018998
 800f760:	080189b4 	.word	0x080189b4
 800f764:	080189dc 	.word	0x080189dc
 800f768:	08018a0c 	.word	0x08018a0c
 800f76c:	08018a40 	.word	0x08018a40
 800f770:	08018a74 	.word	0x08018a74
 800f774:	08018a88 	.word	0x08018a88
 800f778:	08018ab8 	.word	0x08018ab8
 800f77c:	08018ae4 	.word	0x08018ae4
    break;
 800f780:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800f782:	69fb      	ldr	r3, [r7, #28]
 800f784:	2201      	movs	r2, #1
 800f786:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800f788:	69fb      	ldr	r3, [r7, #28]
 800f78a:	2200      	movs	r2, #0
 800f78c:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800f78e:	69fb      	ldr	r3, [r7, #28]
}
 800f790:	4618      	mov	r0, r3
 800f792:	3720      	adds	r7, #32
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}

0800f798 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b084      	sub	sp, #16
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	603b      	str	r3, [r7, #0]
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	71fb      	strb	r3, [r7, #7]
 800f7a4:	460b      	mov	r3, r1
 800f7a6:	80bb      	strh	r3, [r7, #4]
 800f7a8:	4613      	mov	r3, r2
 800f7aa:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800f7ac:	79fb      	ldrb	r3, [r7, #7]
 800f7ae:	2b04      	cmp	r3, #4
 800f7b0:	d81b      	bhi.n	800f7ea <pbuf_alloced_custom+0x52>
 800f7b2:	a201      	add	r2, pc, #4	; (adr r2, 800f7b8 <pbuf_alloced_custom+0x20>)
 800f7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7b8:	0800f7cd 	.word	0x0800f7cd
 800f7bc:	0800f7d3 	.word	0x0800f7d3
 800f7c0:	0800f7d9 	.word	0x0800f7d9
 800f7c4:	0800f7df 	.word	0x0800f7df
 800f7c8:	0800f7e5 	.word	0x0800f7e5
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800f7cc:	2336      	movs	r3, #54	; 0x36
 800f7ce:	81fb      	strh	r3, [r7, #14]
    break;
 800f7d0:	e014      	b.n	800f7fc <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800f7d2:	2322      	movs	r3, #34	; 0x22
 800f7d4:	81fb      	strh	r3, [r7, #14]
    break;
 800f7d6:	e011      	b.n	800f7fc <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800f7d8:	230e      	movs	r3, #14
 800f7da:	81fb      	strh	r3, [r7, #14]
    break;
 800f7dc:	e00e      	b.n	800f7fc <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	81fb      	strh	r3, [r7, #14]
    break;
 800f7e2:	e00b      	b.n	800f7fc <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	81fb      	strh	r3, [r7, #14]
    break;
 800f7e8:	e008      	b.n	800f7fc <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800f7ea:	4b1d      	ldr	r3, [pc, #116]	; (800f860 <pbuf_alloced_custom+0xc8>)
 800f7ec:	f240 12c5 	movw	r2, #453	; 0x1c5
 800f7f0:	491c      	ldr	r1, [pc, #112]	; (800f864 <pbuf_alloced_custom+0xcc>)
 800f7f2:	481d      	ldr	r0, [pc, #116]	; (800f868 <pbuf_alloced_custom+0xd0>)
 800f7f4:	f007 fe1c 	bl	8017430 <iprintf>
    return NULL;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	e02d      	b.n	800f858 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f7fc:	89fb      	ldrh	r3, [r7, #14]
 800f7fe:	3303      	adds	r3, #3
 800f800:	f023 0203 	bic.w	r2, r3, #3
 800f804:	88bb      	ldrh	r3, [r7, #4]
 800f806:	441a      	add	r2, r3
 800f808:	8bbb      	ldrh	r3, [r7, #28]
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d901      	bls.n	800f812 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800f80e:	2300      	movs	r3, #0
 800f810:	e022      	b.n	800f858 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	2200      	movs	r2, #0
 800f816:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800f818:	69bb      	ldr	r3, [r7, #24]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d008      	beq.n	800f830 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f81e:	89fb      	ldrh	r3, [r7, #14]
 800f820:	3303      	adds	r3, #3
 800f822:	f023 0303 	bic.w	r3, r3, #3
 800f826:	69ba      	ldr	r2, [r7, #24]
 800f828:	441a      	add	r2, r3
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	605a      	str	r2, [r3, #4]
 800f82e:	e002      	b.n	800f836 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	2200      	movs	r2, #0
 800f834:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	2202      	movs	r2, #2
 800f83a:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	88ba      	ldrh	r2, [r7, #4]
 800f840:	811a      	strh	r2, [r3, #8]
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	891a      	ldrh	r2, [r3, #8]
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	79ba      	ldrb	r2, [r7, #6]
 800f84e:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	2201      	movs	r2, #1
 800f854:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800f856:	683b      	ldr	r3, [r7, #0]
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3710      	adds	r7, #16
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	08018968 	.word	0x08018968
 800f864:	08018b00 	.word	0x08018b00
 800f868:	080189b4 	.word	0x080189b4

0800f86c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b086      	sub	sp, #24
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	460b      	mov	r3, r1
 800f876:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d106      	bne.n	800f88c <pbuf_realloc+0x20>
 800f87e:	4b4b      	ldr	r3, [pc, #300]	; (800f9ac <pbuf_realloc+0x140>)
 800f880:	f240 12f3 	movw	r2, #499	; 0x1f3
 800f884:	494a      	ldr	r1, [pc, #296]	; (800f9b0 <pbuf_realloc+0x144>)
 800f886:	484b      	ldr	r0, [pc, #300]	; (800f9b4 <pbuf_realloc+0x148>)
 800f888:	f007 fdd2 	bl	8017430 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	7b1b      	ldrb	r3, [r3, #12]
 800f890:	2b03      	cmp	r3, #3
 800f892:	d012      	beq.n	800f8ba <pbuf_realloc+0x4e>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	7b1b      	ldrb	r3, [r3, #12]
 800f898:	2b01      	cmp	r3, #1
 800f89a:	d00e      	beq.n	800f8ba <pbuf_realloc+0x4e>
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	7b1b      	ldrb	r3, [r3, #12]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d00a      	beq.n	800f8ba <pbuf_realloc+0x4e>
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	7b1b      	ldrb	r3, [r3, #12]
 800f8a8:	2b02      	cmp	r3, #2
 800f8aa:	d006      	beq.n	800f8ba <pbuf_realloc+0x4e>
 800f8ac:	4b3f      	ldr	r3, [pc, #252]	; (800f9ac <pbuf_realloc+0x140>)
 800f8ae:	f240 12f7 	movw	r2, #503	; 0x1f7
 800f8b2:	4941      	ldr	r1, [pc, #260]	; (800f9b8 <pbuf_realloc+0x14c>)
 800f8b4:	483f      	ldr	r0, [pc, #252]	; (800f9b4 <pbuf_realloc+0x148>)
 800f8b6:	f007 fdbb 	bl	8017430 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	891b      	ldrh	r3, [r3, #8]
 800f8be:	887a      	ldrh	r2, [r7, #2]
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d26f      	bcs.n	800f9a4 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800f8c4:	887b      	ldrh	r3, [r7, #2]
 800f8c6:	687a      	ldr	r2, [r7, #4]
 800f8c8:	8912      	ldrh	r2, [r2, #8]
 800f8ca:	1a9b      	subs	r3, r3, r2
 800f8cc:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f8ce:	887b      	ldrh	r3, [r7, #2]
 800f8d0:	827b      	strh	r3, [r7, #18]
  q = p;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f8d6:	e025      	b.n	800f924 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	895b      	ldrh	r3, [r3, #10]
 800f8dc:	8a7a      	ldrh	r2, [r7, #18]
 800f8de:	1ad3      	subs	r3, r2, r3
 800f8e0:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	dd06      	ble.n	800f8fa <pbuf_realloc+0x8e>
 800f8ec:	4b2f      	ldr	r3, [pc, #188]	; (800f9ac <pbuf_realloc+0x140>)
 800f8ee:	f240 220b 	movw	r2, #523	; 0x20b
 800f8f2:	4932      	ldr	r1, [pc, #200]	; (800f9bc <pbuf_realloc+0x150>)
 800f8f4:	482f      	ldr	r0, [pc, #188]	; (800f9b4 <pbuf_realloc+0x148>)
 800f8f6:	f007 fd9b 	bl	8017430 <iprintf>
    q->tot_len += (u16_t)grow;
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	891a      	ldrh	r2, [r3, #8]
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	b29b      	uxth	r3, r3
 800f902:	4413      	add	r3, r2
 800f904:	b29a      	uxth	r2, r3
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d106      	bne.n	800f924 <pbuf_realloc+0xb8>
 800f916:	4b25      	ldr	r3, [pc, #148]	; (800f9ac <pbuf_realloc+0x140>)
 800f918:	f240 220f 	movw	r2, #527	; 0x20f
 800f91c:	4928      	ldr	r1, [pc, #160]	; (800f9c0 <pbuf_realloc+0x154>)
 800f91e:	4825      	ldr	r0, [pc, #148]	; (800f9b4 <pbuf_realloc+0x148>)
 800f920:	f007 fd86 	bl	8017430 <iprintf>
  while (rem_len > q->len) {
 800f924:	697b      	ldr	r3, [r7, #20]
 800f926:	895b      	ldrh	r3, [r3, #10]
 800f928:	8a7a      	ldrh	r2, [r7, #18]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d8d4      	bhi.n	800f8d8 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	7b1b      	ldrb	r3, [r3, #12]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d122      	bne.n	800f97c <pbuf_realloc+0x110>
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	895b      	ldrh	r3, [r3, #10]
 800f93a:	8a7a      	ldrh	r2, [r7, #18]
 800f93c:	429a      	cmp	r2, r3
 800f93e:	d01d      	beq.n	800f97c <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	7b5b      	ldrb	r3, [r3, #13]
 800f944:	f003 0302 	and.w	r3, r3, #2
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d117      	bne.n	800f97c <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	685b      	ldr	r3, [r3, #4]
 800f950:	461a      	mov	r2, r3
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	1ad3      	subs	r3, r2, r3
 800f956:	b29a      	uxth	r2, r3
 800f958:	8a7b      	ldrh	r3, [r7, #18]
 800f95a:	4413      	add	r3, r2
 800f95c:	b29b      	uxth	r3, r3
 800f95e:	4619      	mov	r1, r3
 800f960:	6978      	ldr	r0, [r7, #20]
 800f962:	f7ff f86d 	bl	800ea40 <mem_trim>
 800f966:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d106      	bne.n	800f97c <pbuf_realloc+0x110>
 800f96e:	4b0f      	ldr	r3, [pc, #60]	; (800f9ac <pbuf_realloc+0x140>)
 800f970:	f240 221d 	movw	r2, #541	; 0x21d
 800f974:	4913      	ldr	r1, [pc, #76]	; (800f9c4 <pbuf_realloc+0x158>)
 800f976:	480f      	ldr	r0, [pc, #60]	; (800f9b4 <pbuf_realloc+0x148>)
 800f978:	f007 fd5a 	bl	8017430 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	8a7a      	ldrh	r2, [r7, #18]
 800f980:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	895a      	ldrh	r2, [r3, #10]
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f98a:	697b      	ldr	r3, [r7, #20]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d004      	beq.n	800f99c <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	4618      	mov	r0, r3
 800f998:	f000 f8dc 	bl	800fb54 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	601a      	str	r2, [r3, #0]
 800f9a2:	e000      	b.n	800f9a6 <pbuf_realloc+0x13a>
    return;
 800f9a4:	bf00      	nop

}
 800f9a6:	3718      	adds	r7, #24
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}
 800f9ac:	08018968 	.word	0x08018968
 800f9b0:	08018b24 	.word	0x08018b24
 800f9b4:	080189b4 	.word	0x080189b4
 800f9b8:	08018b3c 	.word	0x08018b3c
 800f9bc:	08018b58 	.word	0x08018b58
 800f9c0:	08018b6c 	.word	0x08018b6c
 800f9c4:	08018b84 	.word	0x08018b84

0800f9c8 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b084      	sub	sp, #16
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
 800f9d0:	460b      	mov	r3, r1
 800f9d2:	807b      	strh	r3, [r7, #2]
 800f9d4:	4613      	mov	r3, r2
 800f9d6:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d106      	bne.n	800f9ec <pbuf_header_impl+0x24>
 800f9de:	4b46      	ldr	r3, [pc, #280]	; (800faf8 <pbuf_header_impl+0x130>)
 800f9e0:	f240 223f 	movw	r2, #575	; 0x23f
 800f9e4:	4945      	ldr	r1, [pc, #276]	; (800fafc <pbuf_header_impl+0x134>)
 800f9e6:	4846      	ldr	r0, [pc, #280]	; (800fb00 <pbuf_header_impl+0x138>)
 800f9e8:	f007 fd22 	bl	8017430 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800f9ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d002      	beq.n	800f9fa <pbuf_header_impl+0x32>
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d101      	bne.n	800f9fe <pbuf_header_impl+0x36>
    return 0;
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	e078      	b.n	800faf0 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800f9fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	da10      	bge.n	800fa28 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800fa06:	887b      	ldrh	r3, [r7, #2]
 800fa08:	425b      	negs	r3, r3
 800fa0a:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	895b      	ldrh	r3, [r3, #10]
 800fa10:	89fa      	ldrh	r2, [r7, #14]
 800fa12:	429a      	cmp	r2, r3
 800fa14:	d90a      	bls.n	800fa2c <pbuf_header_impl+0x64>
 800fa16:	4b38      	ldr	r3, [pc, #224]	; (800faf8 <pbuf_header_impl+0x130>)
 800fa18:	f240 2247 	movw	r2, #583	; 0x247
 800fa1c:	4939      	ldr	r1, [pc, #228]	; (800fb04 <pbuf_header_impl+0x13c>)
 800fa1e:	4838      	ldr	r0, [pc, #224]	; (800fb00 <pbuf_header_impl+0x138>)
 800fa20:	f007 fd06 	bl	8017430 <iprintf>
 800fa24:	2301      	movs	r3, #1
 800fa26:	e063      	b.n	800faf0 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800fa28:	887b      	ldrh	r3, [r7, #2]
 800fa2a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	7b1b      	ldrb	r3, [r3, #12]
 800fa30:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	685b      	ldr	r3, [r3, #4]
 800fa36:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800fa38:	89bb      	ldrh	r3, [r7, #12]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d002      	beq.n	800fa44 <pbuf_header_impl+0x7c>
 800fa3e:	89bb      	ldrh	r3, [r7, #12]
 800fa40:	2b03      	cmp	r3, #3
 800fa42:	d112      	bne.n	800fa6a <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	685a      	ldr	r2, [r3, #4]
 800fa48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fa4c:	425b      	negs	r3, r3
 800fa4e:	441a      	add	r2, r3
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	685a      	ldr	r2, [r3, #4]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	3310      	adds	r3, #16
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	d238      	bcs.n	800fad2 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	68ba      	ldr	r2, [r7, #8]
 800fa64:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800fa66:	2301      	movs	r3, #1
 800fa68:	e042      	b.n	800faf0 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800fa6a:	89bb      	ldrh	r3, [r7, #12]
 800fa6c:	2b02      	cmp	r3, #2
 800fa6e:	d002      	beq.n	800fa76 <pbuf_header_impl+0xae>
 800fa70:	89bb      	ldrh	r3, [r7, #12]
 800fa72:	2b01      	cmp	r3, #1
 800fa74:	d124      	bne.n	800fac0 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800fa76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	da0d      	bge.n	800fa9a <pbuf_header_impl+0xd2>
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	895b      	ldrh	r3, [r3, #10]
 800fa82:	89fa      	ldrh	r2, [r7, #14]
 800fa84:	429a      	cmp	r2, r3
 800fa86:	d808      	bhi.n	800fa9a <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	685a      	ldr	r2, [r3, #4]
 800fa8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fa90:	425b      	negs	r3, r3
 800fa92:	441a      	add	r2, r3
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	605a      	str	r2, [r3, #4]
 800fa98:	e011      	b.n	800fabe <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800fa9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	dd0b      	ble.n	800faba <pbuf_header_impl+0xf2>
 800faa2:	787b      	ldrb	r3, [r7, #1]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d008      	beq.n	800faba <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	685a      	ldr	r2, [r3, #4]
 800faac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fab0:	425b      	negs	r3, r3
 800fab2:	441a      	add	r2, r3
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	605a      	str	r2, [r3, #4]
 800fab8:	e001      	b.n	800fabe <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800faba:	2301      	movs	r3, #1
 800fabc:	e018      	b.n	800faf0 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800fabe:	e008      	b.n	800fad2 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800fac0:	4b0d      	ldr	r3, [pc, #52]	; (800faf8 <pbuf_header_impl+0x130>)
 800fac2:	f240 2277 	movw	r2, #631	; 0x277
 800fac6:	4910      	ldr	r1, [pc, #64]	; (800fb08 <pbuf_header_impl+0x140>)
 800fac8:	480d      	ldr	r0, [pc, #52]	; (800fb00 <pbuf_header_impl+0x138>)
 800faca:	f007 fcb1 	bl	8017430 <iprintf>
    return 1;
 800face:	2301      	movs	r3, #1
 800fad0:	e00e      	b.n	800faf0 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	895a      	ldrh	r2, [r3, #10]
 800fad6:	887b      	ldrh	r3, [r7, #2]
 800fad8:	4413      	add	r3, r2
 800fada:	b29a      	uxth	r2, r3
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	891a      	ldrh	r2, [r3, #8]
 800fae4:	887b      	ldrh	r3, [r7, #2]
 800fae6:	4413      	add	r3, r2
 800fae8:	b29a      	uxth	r2, r3
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800faee:	2300      	movs	r3, #0
}
 800faf0:	4618      	mov	r0, r3
 800faf2:	3710      	adds	r7, #16
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	08018968 	.word	0x08018968
 800fafc:	08018ba0 	.word	0x08018ba0
 800fb00:	080189b4 	.word	0x080189b4
 800fb04:	08018bac 	.word	0x08018bac
 800fb08:	08018bcc 	.word	0x08018bcc

0800fb0c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b082      	sub	sp, #8
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
 800fb14:	460b      	mov	r3, r1
 800fb16:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800fb18:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	4619      	mov	r1, r3
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f7ff ff51 	bl	800f9c8 <pbuf_header_impl>
 800fb26:	4603      	mov	r3, r0
}
 800fb28:	4618      	mov	r0, r3
 800fb2a:	3708      	adds	r7, #8
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b082      	sub	sp, #8
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	460b      	mov	r3, r1
 800fb3a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800fb3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fb40:	2201      	movs	r2, #1
 800fb42:	4619      	mov	r1, r3
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f7ff ff3f 	bl	800f9c8 <pbuf_header_impl>
 800fb4a:	4603      	mov	r3, r0
}
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3708      	adds	r7, #8
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}

0800fb54 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b088      	sub	sp, #32
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d10b      	bne.n	800fb7a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d106      	bne.n	800fb76 <pbuf_free+0x22>
 800fb68:	4b41      	ldr	r3, [pc, #260]	; (800fc70 <pbuf_free+0x11c>)
 800fb6a:	f240 22d2 	movw	r2, #722	; 0x2d2
 800fb6e:	4941      	ldr	r1, [pc, #260]	; (800fc74 <pbuf_free+0x120>)
 800fb70:	4841      	ldr	r0, [pc, #260]	; (800fc78 <pbuf_free+0x124>)
 800fb72:	f007 fc5d 	bl	8017430 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800fb76:	2300      	movs	r3, #0
 800fb78:	e076      	b.n	800fc68 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	7b1b      	ldrb	r3, [r3, #12]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d012      	beq.n	800fba8 <pbuf_free+0x54>
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	7b1b      	ldrb	r3, [r3, #12]
 800fb86:	2b01      	cmp	r3, #1
 800fb88:	d00e      	beq.n	800fba8 <pbuf_free+0x54>
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	7b1b      	ldrb	r3, [r3, #12]
 800fb8e:	2b02      	cmp	r3, #2
 800fb90:	d00a      	beq.n	800fba8 <pbuf_free+0x54>
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	7b1b      	ldrb	r3, [r3, #12]
 800fb96:	2b03      	cmp	r3, #3
 800fb98:	d006      	beq.n	800fba8 <pbuf_free+0x54>
 800fb9a:	4b35      	ldr	r3, [pc, #212]	; (800fc70 <pbuf_free+0x11c>)
 800fb9c:	f240 22de 	movw	r2, #734	; 0x2de
 800fba0:	4936      	ldr	r1, [pc, #216]	; (800fc7c <pbuf_free+0x128>)
 800fba2:	4835      	ldr	r0, [pc, #212]	; (800fc78 <pbuf_free+0x124>)
 800fba4:	f007 fc44 	bl	8017430 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800fbac:	e058      	b.n	800fc60 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800fbae:	f007 fbdb 	bl	8017368 <sys_arch_protect>
 800fbb2:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	89db      	ldrh	r3, [r3, #14]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d106      	bne.n	800fbca <pbuf_free+0x76>
 800fbbc:	4b2c      	ldr	r3, [pc, #176]	; (800fc70 <pbuf_free+0x11c>)
 800fbbe:	f240 22eb 	movw	r2, #747	; 0x2eb
 800fbc2:	492f      	ldr	r1, [pc, #188]	; (800fc80 <pbuf_free+0x12c>)
 800fbc4:	482c      	ldr	r0, [pc, #176]	; (800fc78 <pbuf_free+0x124>)
 800fbc6:	f007 fc33 	bl	8017430 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	89db      	ldrh	r3, [r3, #14]
 800fbce:	3b01      	subs	r3, #1
 800fbd0:	b29a      	uxth	r2, r3
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	81da      	strh	r2, [r3, #14]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	89db      	ldrh	r3, [r3, #14]
 800fbda:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800fbdc:	69b8      	ldr	r0, [r7, #24]
 800fbde:	f007 fbd1 	bl	8017384 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800fbe2:	8afb      	ldrh	r3, [r7, #22]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d139      	bne.n	800fc5c <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	7b1b      	ldrb	r3, [r3, #12]
 800fbf2:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	7b5b      	ldrb	r3, [r3, #13]
 800fbf8:	f003 0302 	and.w	r3, r3, #2
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d011      	beq.n	800fc24 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	691b      	ldr	r3, [r3, #16]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d106      	bne.n	800fc1a <pbuf_free+0xc6>
 800fc0c:	4b18      	ldr	r3, [pc, #96]	; (800fc70 <pbuf_free+0x11c>)
 800fc0e:	f240 22f9 	movw	r2, #761	; 0x2f9
 800fc12:	491c      	ldr	r1, [pc, #112]	; (800fc84 <pbuf_free+0x130>)
 800fc14:	4818      	ldr	r0, [pc, #96]	; (800fc78 <pbuf_free+0x124>)
 800fc16:	f007 fc0b 	bl	8017430 <iprintf>
        pc->custom_free_function(p);
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	691b      	ldr	r3, [r3, #16]
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	4798      	blx	r3
 800fc22:	e015      	b.n	800fc50 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800fc24:	89fb      	ldrh	r3, [r7, #14]
 800fc26:	2b03      	cmp	r3, #3
 800fc28:	d104      	bne.n	800fc34 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800fc2a:	6879      	ldr	r1, [r7, #4]
 800fc2c:	200c      	movs	r0, #12
 800fc2e:	f7ff f9f9 	bl	800f024 <memp_free>
 800fc32:	e00d      	b.n	800fc50 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800fc34:	89fb      	ldrh	r3, [r7, #14]
 800fc36:	2b01      	cmp	r3, #1
 800fc38:	d002      	beq.n	800fc40 <pbuf_free+0xec>
 800fc3a:	89fb      	ldrh	r3, [r7, #14]
 800fc3c:	2b02      	cmp	r3, #2
 800fc3e:	d104      	bne.n	800fc4a <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800fc40:	6879      	ldr	r1, [r7, #4]
 800fc42:	200b      	movs	r0, #11
 800fc44:	f7ff f9ee 	bl	800f024 <memp_free>
 800fc48:	e002      	b.n	800fc50 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f7fe fe8a 	bl	800e964 <mem_free>
        }
      }
      count++;
 800fc50:	7ffb      	ldrb	r3, [r7, #31]
 800fc52:	3301      	adds	r3, #1
 800fc54:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800fc56:	693b      	ldr	r3, [r7, #16]
 800fc58:	607b      	str	r3, [r7, #4]
 800fc5a:	e001      	b.n	800fc60 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d1a3      	bne.n	800fbae <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800fc66:	7ffb      	ldrb	r3, [r7, #31]
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3720      	adds	r7, #32
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}
 800fc70:	08018968 	.word	0x08018968
 800fc74:	08018ba0 	.word	0x08018ba0
 800fc78:	080189b4 	.word	0x080189b4
 800fc7c:	08018bdc 	.word	0x08018bdc
 800fc80:	08018bf4 	.word	0x08018bf4
 800fc84:	08018c0c 	.word	0x08018c0c

0800fc88 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800fc88:	b480      	push	{r7}
 800fc8a:	b085      	sub	sp, #20
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800fc90:	2300      	movs	r3, #0
 800fc92:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800fc94:	e005      	b.n	800fca2 <pbuf_clen+0x1a>
    ++len;
 800fc96:	89fb      	ldrh	r3, [r7, #14]
 800fc98:	3301      	adds	r3, #1
 800fc9a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d1f6      	bne.n	800fc96 <pbuf_clen+0xe>
  }
  return len;
 800fca8:	89fb      	ldrh	r3, [r7, #14]
}
 800fcaa:	4618      	mov	r0, r3
 800fcac:	3714      	adds	r7, #20
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb4:	4770      	bx	lr
	...

0800fcb8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b084      	sub	sp, #16
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d016      	beq.n	800fcf4 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800fcc6:	f007 fb4f 	bl	8017368 <sys_arch_protect>
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	89db      	ldrh	r3, [r3, #14]
 800fcd0:	3301      	adds	r3, #1
 800fcd2:	b29a      	uxth	r2, r3
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	81da      	strh	r2, [r3, #14]
 800fcd8:	68f8      	ldr	r0, [r7, #12]
 800fcda:	f007 fb53 	bl	8017384 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	89db      	ldrh	r3, [r3, #14]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d106      	bne.n	800fcf4 <pbuf_ref+0x3c>
 800fce6:	4b05      	ldr	r3, [pc, #20]	; (800fcfc <pbuf_ref+0x44>)
 800fce8:	f240 3239 	movw	r2, #825	; 0x339
 800fcec:	4904      	ldr	r1, [pc, #16]	; (800fd00 <pbuf_ref+0x48>)
 800fcee:	4805      	ldr	r0, [pc, #20]	; (800fd04 <pbuf_ref+0x4c>)
 800fcf0:	f007 fb9e 	bl	8017430 <iprintf>
  }
}
 800fcf4:	bf00      	nop
 800fcf6:	3710      	adds	r7, #16
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}
 800fcfc:	08018968 	.word	0x08018968
 800fd00:	08018c30 	.word	0x08018c30
 800fd04:	080189b4 	.word	0x080189b4

0800fd08 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b084      	sub	sp, #16
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
 800fd10:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d002      	beq.n	800fd1e <pbuf_cat+0x16>
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d107      	bne.n	800fd2e <pbuf_cat+0x26>
 800fd1e:	4b20      	ldr	r3, [pc, #128]	; (800fda0 <pbuf_cat+0x98>)
 800fd20:	f240 324d 	movw	r2, #845	; 0x34d
 800fd24:	491f      	ldr	r1, [pc, #124]	; (800fda4 <pbuf_cat+0x9c>)
 800fd26:	4820      	ldr	r0, [pc, #128]	; (800fda8 <pbuf_cat+0xa0>)
 800fd28:	f007 fb82 	bl	8017430 <iprintf>
 800fd2c:	e034      	b.n	800fd98 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	60fb      	str	r3, [r7, #12]
 800fd32:	e00a      	b.n	800fd4a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	891a      	ldrh	r2, [r3, #8]
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	891b      	ldrh	r3, [r3, #8]
 800fd3c:	4413      	add	r3, r2
 800fd3e:	b29a      	uxth	r2, r3
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	60fb      	str	r3, [r7, #12]
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d1f0      	bne.n	800fd34 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	891a      	ldrh	r2, [r3, #8]
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	895b      	ldrh	r3, [r3, #10]
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d006      	beq.n	800fd6c <pbuf_cat+0x64>
 800fd5e:	4b10      	ldr	r3, [pc, #64]	; (800fda0 <pbuf_cat+0x98>)
 800fd60:	f240 3255 	movw	r2, #853	; 0x355
 800fd64:	4911      	ldr	r1, [pc, #68]	; (800fdac <pbuf_cat+0xa4>)
 800fd66:	4810      	ldr	r0, [pc, #64]	; (800fda8 <pbuf_cat+0xa0>)
 800fd68:	f007 fb62 	bl	8017430 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d006      	beq.n	800fd82 <pbuf_cat+0x7a>
 800fd74:	4b0a      	ldr	r3, [pc, #40]	; (800fda0 <pbuf_cat+0x98>)
 800fd76:	f240 3256 	movw	r2, #854	; 0x356
 800fd7a:	490d      	ldr	r1, [pc, #52]	; (800fdb0 <pbuf_cat+0xa8>)
 800fd7c:	480a      	ldr	r0, [pc, #40]	; (800fda8 <pbuf_cat+0xa0>)
 800fd7e:	f007 fb57 	bl	8017430 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	891a      	ldrh	r2, [r3, #8]
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	891b      	ldrh	r3, [r3, #8]
 800fd8a:	4413      	add	r3, r2
 800fd8c:	b29a      	uxth	r2, r3
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	683a      	ldr	r2, [r7, #0]
 800fd96:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800fd98:	3710      	adds	r7, #16
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}
 800fd9e:	bf00      	nop
 800fda0:	08018968 	.word	0x08018968
 800fda4:	08018c44 	.word	0x08018c44
 800fda8:	080189b4 	.word	0x080189b4
 800fdac:	08018c7c 	.word	0x08018c7c
 800fdb0:	08018cac 	.word	0x08018cac

0800fdb4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b084      	sub	sp, #16
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
 800fdbc:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	81fb      	strh	r3, [r7, #14]
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d008      	beq.n	800fdde <pbuf_copy+0x2a>
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d005      	beq.n	800fdde <pbuf_copy+0x2a>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	891a      	ldrh	r2, [r3, #8]
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	891b      	ldrh	r3, [r3, #8]
 800fdda:	429a      	cmp	r2, r3
 800fddc:	d209      	bcs.n	800fdf2 <pbuf_copy+0x3e>
 800fdde:	4b54      	ldr	r3, [pc, #336]	; (800ff30 <pbuf_copy+0x17c>)
 800fde0:	f240 32bd 	movw	r2, #957	; 0x3bd
 800fde4:	4953      	ldr	r1, [pc, #332]	; (800ff34 <pbuf_copy+0x180>)
 800fde6:	4854      	ldr	r0, [pc, #336]	; (800ff38 <pbuf_copy+0x184>)
 800fde8:	f007 fb22 	bl	8017430 <iprintf>
 800fdec:	f06f 030f 	mvn.w	r3, #15
 800fdf0:	e099      	b.n	800ff26 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	895b      	ldrh	r3, [r3, #10]
 800fdf6:	461a      	mov	r2, r3
 800fdf8:	89fb      	ldrh	r3, [r7, #14]
 800fdfa:	1ad2      	subs	r2, r2, r3
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	895b      	ldrh	r3, [r3, #10]
 800fe00:	4619      	mov	r1, r3
 800fe02:	89bb      	ldrh	r3, [r7, #12]
 800fe04:	1acb      	subs	r3, r1, r3
 800fe06:	429a      	cmp	r2, r3
 800fe08:	db05      	blt.n	800fe16 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	895a      	ldrh	r2, [r3, #10]
 800fe0e:	89bb      	ldrh	r3, [r7, #12]
 800fe10:	1ad3      	subs	r3, r2, r3
 800fe12:	817b      	strh	r3, [r7, #10]
 800fe14:	e004      	b.n	800fe20 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	895a      	ldrh	r2, [r3, #10]
 800fe1a:	89fb      	ldrh	r3, [r7, #14]
 800fe1c:	1ad3      	subs	r3, r2, r3
 800fe1e:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	685a      	ldr	r2, [r3, #4]
 800fe24:	89fb      	ldrh	r3, [r7, #14]
 800fe26:	18d0      	adds	r0, r2, r3
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	685a      	ldr	r2, [r3, #4]
 800fe2c:	89bb      	ldrh	r3, [r7, #12]
 800fe2e:	4413      	add	r3, r2
 800fe30:	897a      	ldrh	r2, [r7, #10]
 800fe32:	4619      	mov	r1, r3
 800fe34:	f007 fae9 	bl	801740a <memcpy>
    offset_to += len;
 800fe38:	89fa      	ldrh	r2, [r7, #14]
 800fe3a:	897b      	ldrh	r3, [r7, #10]
 800fe3c:	4413      	add	r3, r2
 800fe3e:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800fe40:	89ba      	ldrh	r2, [r7, #12]
 800fe42:	897b      	ldrh	r3, [r7, #10]
 800fe44:	4413      	add	r3, r2
 800fe46:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	895b      	ldrh	r3, [r3, #10]
 800fe4c:	89fa      	ldrh	r2, [r7, #14]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d906      	bls.n	800fe60 <pbuf_copy+0xac>
 800fe52:	4b37      	ldr	r3, [pc, #220]	; (800ff30 <pbuf_copy+0x17c>)
 800fe54:	f240 32cd 	movw	r2, #973	; 0x3cd
 800fe58:	4938      	ldr	r1, [pc, #224]	; (800ff3c <pbuf_copy+0x188>)
 800fe5a:	4837      	ldr	r0, [pc, #220]	; (800ff38 <pbuf_copy+0x184>)
 800fe5c:	f007 fae8 	bl	8017430 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	895b      	ldrh	r3, [r3, #10]
 800fe64:	89ba      	ldrh	r2, [r7, #12]
 800fe66:	429a      	cmp	r2, r3
 800fe68:	d906      	bls.n	800fe78 <pbuf_copy+0xc4>
 800fe6a:	4b31      	ldr	r3, [pc, #196]	; (800ff30 <pbuf_copy+0x17c>)
 800fe6c:	f240 32ce 	movw	r2, #974	; 0x3ce
 800fe70:	4933      	ldr	r1, [pc, #204]	; (800ff40 <pbuf_copy+0x18c>)
 800fe72:	4831      	ldr	r0, [pc, #196]	; (800ff38 <pbuf_copy+0x184>)
 800fe74:	f007 fadc 	bl	8017430 <iprintf>
    if (offset_from >= p_from->len) {
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	895b      	ldrh	r3, [r3, #10]
 800fe7c:	89ba      	ldrh	r2, [r7, #12]
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d304      	bcc.n	800fe8c <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800fe82:	2300      	movs	r3, #0
 800fe84:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	895b      	ldrh	r3, [r3, #10]
 800fe90:	89fa      	ldrh	r2, [r7, #14]
 800fe92:	429a      	cmp	r2, r3
 800fe94:	d114      	bne.n	800fec0 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800fe96:	2300      	movs	r3, #0
 800fe98:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d10c      	bne.n	800fec0 <pbuf_copy+0x10c>
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d009      	beq.n	800fec0 <pbuf_copy+0x10c>
 800feac:	4b20      	ldr	r3, [pc, #128]	; (800ff30 <pbuf_copy+0x17c>)
 800feae:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800feb2:	4924      	ldr	r1, [pc, #144]	; (800ff44 <pbuf_copy+0x190>)
 800feb4:	4820      	ldr	r0, [pc, #128]	; (800ff38 <pbuf_copy+0x184>)
 800feb6:	f007 fabb 	bl	8017430 <iprintf>
 800feba:	f06f 030f 	mvn.w	r3, #15
 800febe:	e032      	b.n	800ff26 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d013      	beq.n	800feee <pbuf_copy+0x13a>
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	895a      	ldrh	r2, [r3, #10]
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	891b      	ldrh	r3, [r3, #8]
 800fece:	429a      	cmp	r2, r3
 800fed0:	d10d      	bne.n	800feee <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d009      	beq.n	800feee <pbuf_copy+0x13a>
 800feda:	4b15      	ldr	r3, [pc, #84]	; (800ff30 <pbuf_copy+0x17c>)
 800fedc:	f240 32de 	movw	r2, #990	; 0x3de
 800fee0:	4919      	ldr	r1, [pc, #100]	; (800ff48 <pbuf_copy+0x194>)
 800fee2:	4815      	ldr	r0, [pc, #84]	; (800ff38 <pbuf_copy+0x184>)
 800fee4:	f007 faa4 	bl	8017430 <iprintf>
 800fee8:	f06f 0305 	mvn.w	r3, #5
 800feec:	e01b      	b.n	800ff26 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d013      	beq.n	800ff1c <pbuf_copy+0x168>
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	895a      	ldrh	r2, [r3, #10]
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	891b      	ldrh	r3, [r3, #8]
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d10d      	bne.n	800ff1c <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d009      	beq.n	800ff1c <pbuf_copy+0x168>
 800ff08:	4b09      	ldr	r3, [pc, #36]	; (800ff30 <pbuf_copy+0x17c>)
 800ff0a:	f240 32e3 	movw	r2, #995	; 0x3e3
 800ff0e:	490e      	ldr	r1, [pc, #56]	; (800ff48 <pbuf_copy+0x194>)
 800ff10:	4809      	ldr	r0, [pc, #36]	; (800ff38 <pbuf_copy+0x184>)
 800ff12:	f007 fa8d 	bl	8017430 <iprintf>
 800ff16:	f06f 0305 	mvn.w	r3, #5
 800ff1a:	e004      	b.n	800ff26 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	f47f af67 	bne.w	800fdf2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ff24:	2300      	movs	r3, #0
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	3710      	adds	r7, #16
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}
 800ff2e:	bf00      	nop
 800ff30:	08018968 	.word	0x08018968
 800ff34:	08018cf8 	.word	0x08018cf8
 800ff38:	080189b4 	.word	0x080189b4
 800ff3c:	08018d28 	.word	0x08018d28
 800ff40:	08018d40 	.word	0x08018d40
 800ff44:	08018d5c 	.word	0x08018d5c
 800ff48:	08018d6c 	.word	0x08018d6c

0800ff4c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b088      	sub	sp, #32
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	60f8      	str	r0, [r7, #12]
 800ff54:	60b9      	str	r1, [r7, #8]
 800ff56:	4611      	mov	r1, r2
 800ff58:	461a      	mov	r2, r3
 800ff5a:	460b      	mov	r3, r1
 800ff5c:	80fb      	strh	r3, [r7, #6]
 800ff5e:	4613      	mov	r3, r2
 800ff60:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ff62:	2300      	movs	r3, #0
 800ff64:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d108      	bne.n	800ff7e <pbuf_copy_partial+0x32>
 800ff6c:	4b30      	ldr	r3, [pc, #192]	; (8010030 <pbuf_copy_partial+0xe4>)
 800ff6e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800ff72:	4930      	ldr	r1, [pc, #192]	; (8010034 <pbuf_copy_partial+0xe8>)
 800ff74:	4830      	ldr	r0, [pc, #192]	; (8010038 <pbuf_copy_partial+0xec>)
 800ff76:	f007 fa5b 	bl	8017430 <iprintf>
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	e054      	b.n	8010028 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d108      	bne.n	800ff96 <pbuf_copy_partial+0x4a>
 800ff84:	4b2a      	ldr	r3, [pc, #168]	; (8010030 <pbuf_copy_partial+0xe4>)
 800ff86:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800ff8a:	492c      	ldr	r1, [pc, #176]	; (801003c <pbuf_copy_partial+0xf0>)
 800ff8c:	482a      	ldr	r0, [pc, #168]	; (8010038 <pbuf_copy_partial+0xec>)
 800ff8e:	f007 fa4f 	bl	8017430 <iprintf>
 800ff92:	2300      	movs	r3, #0
 800ff94:	e048      	b.n	8010028 <pbuf_copy_partial+0xdc>

  left = 0;
 800ff96:	2300      	movs	r3, #0
 800ff98:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d002      	beq.n	800ffa6 <pbuf_copy_partial+0x5a>
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d101      	bne.n	800ffaa <pbuf_copy_partial+0x5e>
    return 0;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	e03e      	b.n	8010028 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	61fb      	str	r3, [r7, #28]
 800ffae:	e034      	b.n	801001a <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800ffb0:	88bb      	ldrh	r3, [r7, #4]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d00a      	beq.n	800ffcc <pbuf_copy_partial+0x80>
 800ffb6:	69fb      	ldr	r3, [r7, #28]
 800ffb8:	895b      	ldrh	r3, [r3, #10]
 800ffba:	88ba      	ldrh	r2, [r7, #4]
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	d305      	bcc.n	800ffcc <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800ffc0:	69fb      	ldr	r3, [r7, #28]
 800ffc2:	895b      	ldrh	r3, [r3, #10]
 800ffc4:	88ba      	ldrh	r2, [r7, #4]
 800ffc6:	1ad3      	subs	r3, r2, r3
 800ffc8:	80bb      	strh	r3, [r7, #4]
 800ffca:	e023      	b.n	8010014 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800ffcc:	69fb      	ldr	r3, [r7, #28]
 800ffce:	895a      	ldrh	r2, [r3, #10]
 800ffd0:	88bb      	ldrh	r3, [r7, #4]
 800ffd2:	1ad3      	subs	r3, r2, r3
 800ffd4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ffd6:	8b3a      	ldrh	r2, [r7, #24]
 800ffd8:	88fb      	ldrh	r3, [r7, #6]
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	d901      	bls.n	800ffe2 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800ffde:	88fb      	ldrh	r3, [r7, #6]
 800ffe0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800ffe2:	8b7b      	ldrh	r3, [r7, #26]
 800ffe4:	68ba      	ldr	r2, [r7, #8]
 800ffe6:	18d0      	adds	r0, r2, r3
 800ffe8:	69fb      	ldr	r3, [r7, #28]
 800ffea:	685a      	ldr	r2, [r3, #4]
 800ffec:	88bb      	ldrh	r3, [r7, #4]
 800ffee:	4413      	add	r3, r2
 800fff0:	8b3a      	ldrh	r2, [r7, #24]
 800fff2:	4619      	mov	r1, r3
 800fff4:	f007 fa09 	bl	801740a <memcpy>
      copied_total += buf_copy_len;
 800fff8:	8afa      	ldrh	r2, [r7, #22]
 800fffa:	8b3b      	ldrh	r3, [r7, #24]
 800fffc:	4413      	add	r3, r2
 800fffe:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8010000:	8b7a      	ldrh	r2, [r7, #26]
 8010002:	8b3b      	ldrh	r3, [r7, #24]
 8010004:	4413      	add	r3, r2
 8010006:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8010008:	88fa      	ldrh	r2, [r7, #6]
 801000a:	8b3b      	ldrh	r3, [r7, #24]
 801000c:	1ad3      	subs	r3, r2, r3
 801000e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010010:	2300      	movs	r3, #0
 8010012:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010014:	69fb      	ldr	r3, [r7, #28]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	61fb      	str	r3, [r7, #28]
 801001a:	88fb      	ldrh	r3, [r7, #6]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d002      	beq.n	8010026 <pbuf_copy_partial+0xda>
 8010020:	69fb      	ldr	r3, [r7, #28]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d1c4      	bne.n	800ffb0 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8010026:	8afb      	ldrh	r3, [r7, #22]
}
 8010028:	4618      	mov	r0, r3
 801002a:	3720      	adds	r7, #32
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}
 8010030:	08018968 	.word	0x08018968
 8010034:	08018d98 	.word	0x08018d98
 8010038:	080189b4 	.word	0x080189b4
 801003c:	08018db8 	.word	0x08018db8

08010040 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010040:	b480      	push	{r7}
 8010042:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8010044:	bf00      	nop
 8010046:	46bd      	mov	sp, r7
 8010048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004c:	4770      	bx	lr
	...

08010050 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010054:	f000 fdf0 	bl	8010c38 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010058:	4b07      	ldr	r3, [pc, #28]	; (8010078 <tcp_tmr+0x28>)
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	3301      	adds	r3, #1
 801005e:	b2da      	uxtb	r2, r3
 8010060:	4b05      	ldr	r3, [pc, #20]	; (8010078 <tcp_tmr+0x28>)
 8010062:	701a      	strb	r2, [r3, #0]
 8010064:	4b04      	ldr	r3, [pc, #16]	; (8010078 <tcp_tmr+0x28>)
 8010066:	781b      	ldrb	r3, [r3, #0]
 8010068:	f003 0301 	and.w	r3, r3, #1
 801006c:	2b00      	cmp	r3, #0
 801006e:	d001      	beq.n	8010074 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010070:	f000 fb22 	bl	80106b8 <tcp_slowtmr>
  }
}
 8010074:	bf00      	nop
 8010076:	bd80      	pop	{r7, pc}
 8010078:	2400a3f9 	.word	0x2400a3f9

0801007c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801007c:	b480      	push	{r7}
 801007e:	b085      	sub	sp, #20
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	60fb      	str	r3, [r7, #12]
 801008a:	e00a      	b.n	80100a2 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010090:	683a      	ldr	r2, [r7, #0]
 8010092:	429a      	cmp	r2, r3
 8010094:	d102      	bne.n	801009c <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	2200      	movs	r2, #0
 801009a:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	68db      	ldr	r3, [r3, #12]
 80100a0:	60fb      	str	r3, [r7, #12]
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d1f1      	bne.n	801008c <tcp_remove_listener+0x10>
      }
   }
}
 80100a8:	bf00      	nop
 80100aa:	3714      	adds	r7, #20
 80100ac:	46bd      	mov	sp, r7
 80100ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b2:	4770      	bx	lr

080100b4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b084      	sub	sp, #16
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d105      	bne.n	80100ce <tcp_listen_closed+0x1a>
 80100c2:	4b13      	ldr	r3, [pc, #76]	; (8010110 <tcp_listen_closed+0x5c>)
 80100c4:	22c0      	movs	r2, #192	; 0xc0
 80100c6:	4913      	ldr	r1, [pc, #76]	; (8010114 <tcp_listen_closed+0x60>)
 80100c8:	4813      	ldr	r0, [pc, #76]	; (8010118 <tcp_listen_closed+0x64>)
 80100ca:	f007 f9b1 	bl	8017430 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	7d1b      	ldrb	r3, [r3, #20]
 80100d2:	2b01      	cmp	r3, #1
 80100d4:	d005      	beq.n	80100e2 <tcp_listen_closed+0x2e>
 80100d6:	4b0e      	ldr	r3, [pc, #56]	; (8010110 <tcp_listen_closed+0x5c>)
 80100d8:	22c1      	movs	r2, #193	; 0xc1
 80100da:	4910      	ldr	r1, [pc, #64]	; (801011c <tcp_listen_closed+0x68>)
 80100dc:	480e      	ldr	r0, [pc, #56]	; (8010118 <tcp_listen_closed+0x64>)
 80100de:	f007 f9a7 	bl	8017430 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80100e2:	2301      	movs	r3, #1
 80100e4:	60fb      	str	r3, [r7, #12]
 80100e6:	e00b      	b.n	8010100 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80100e8:	4a0d      	ldr	r2, [pc, #52]	; (8010120 <tcp_listen_closed+0x6c>)
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	6879      	ldr	r1, [r7, #4]
 80100f4:	4618      	mov	r0, r3
 80100f6:	f7ff ffc1 	bl	801007c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	3301      	adds	r3, #1
 80100fe:	60fb      	str	r3, [r7, #12]
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	2b03      	cmp	r3, #3
 8010104:	d9f0      	bls.n	80100e8 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010106:	bf00      	nop
 8010108:	3710      	adds	r7, #16
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}
 801010e:	bf00      	nop
 8010110:	08018eec 	.word	0x08018eec
 8010114:	08018f1c 	.word	0x08018f1c
 8010118:	08018f28 	.word	0x08018f28
 801011c:	08018f50 	.word	0x08018f50
 8010120:	0801a374 	.word	0x0801a374

08010124 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010124:	b5b0      	push	{r4, r5, r7, lr}
 8010126:	b086      	sub	sp, #24
 8010128:	af02      	add	r7, sp, #8
 801012a:	6078      	str	r0, [r7, #4]
 801012c:	460b      	mov	r3, r1
 801012e:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010130:	78fb      	ldrb	r3, [r7, #3]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d075      	beq.n	8010222 <tcp_close_shutdown+0xfe>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	7d1b      	ldrb	r3, [r3, #20]
 801013a:	2b04      	cmp	r3, #4
 801013c:	d003      	beq.n	8010146 <tcp_close_shutdown+0x22>
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	7d1b      	ldrb	r3, [r3, #20]
 8010142:	2b07      	cmp	r3, #7
 8010144:	d16d      	bne.n	8010222 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801014a:	2b00      	cmp	r3, #0
 801014c:	d104      	bne.n	8010158 <tcp_close_shutdown+0x34>
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010152:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010156:	d064      	beq.n	8010222 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	7e9b      	ldrb	r3, [r3, #26]
 801015c:	f003 0310 	and.w	r3, r3, #16
 8010160:	2b00      	cmp	r3, #0
 8010162:	d106      	bne.n	8010172 <tcp_close_shutdown+0x4e>
 8010164:	4b59      	ldr	r3, [pc, #356]	; (80102cc <tcp_close_shutdown+0x1a8>)
 8010166:	f240 120f 	movw	r2, #271	; 0x10f
 801016a:	4959      	ldr	r1, [pc, #356]	; (80102d0 <tcp_close_shutdown+0x1ac>)
 801016c:	4859      	ldr	r0, [pc, #356]	; (80102d4 <tcp_close_shutdown+0x1b0>)
 801016e:	f007 f95f 	bl	8017430 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801017a:	687c      	ldr	r4, [r7, #4]
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	1d1d      	adds	r5, r3, #4
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	8adb      	ldrh	r3, [r3, #22]
 8010184:	687a      	ldr	r2, [r7, #4]
 8010186:	8b12      	ldrh	r2, [r2, #24]
 8010188:	9201      	str	r2, [sp, #4]
 801018a:	9300      	str	r3, [sp, #0]
 801018c:	462b      	mov	r3, r5
 801018e:	4622      	mov	r2, r4
 8010190:	f004 f862 	bl	8014258 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f000 ffc5 	bl	8011124 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801019a:	4b4f      	ldr	r3, [pc, #316]	; (80102d8 <tcp_close_shutdown+0x1b4>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	687a      	ldr	r2, [r7, #4]
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d105      	bne.n	80101b0 <tcp_close_shutdown+0x8c>
 80101a4:	4b4c      	ldr	r3, [pc, #304]	; (80102d8 <tcp_close_shutdown+0x1b4>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	68db      	ldr	r3, [r3, #12]
 80101aa:	4a4b      	ldr	r2, [pc, #300]	; (80102d8 <tcp_close_shutdown+0x1b4>)
 80101ac:	6013      	str	r3, [r2, #0]
 80101ae:	e013      	b.n	80101d8 <tcp_close_shutdown+0xb4>
 80101b0:	4b49      	ldr	r3, [pc, #292]	; (80102d8 <tcp_close_shutdown+0x1b4>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	60fb      	str	r3, [r7, #12]
 80101b6:	e00c      	b.n	80101d2 <tcp_close_shutdown+0xae>
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	68db      	ldr	r3, [r3, #12]
 80101bc:	687a      	ldr	r2, [r7, #4]
 80101be:	429a      	cmp	r2, r3
 80101c0:	d104      	bne.n	80101cc <tcp_close_shutdown+0xa8>
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	68da      	ldr	r2, [r3, #12]
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	60da      	str	r2, [r3, #12]
 80101ca:	e005      	b.n	80101d8 <tcp_close_shutdown+0xb4>
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	68db      	ldr	r3, [r3, #12]
 80101d0:	60fb      	str	r3, [r7, #12]
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d1ef      	bne.n	80101b8 <tcp_close_shutdown+0x94>
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2200      	movs	r2, #0
 80101dc:	60da      	str	r2, [r3, #12]
 80101de:	4b3f      	ldr	r3, [pc, #252]	; (80102dc <tcp_close_shutdown+0x1b8>)
 80101e0:	2201      	movs	r2, #1
 80101e2:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	7d1b      	ldrb	r3, [r3, #20]
 80101e8:	2b04      	cmp	r3, #4
 80101ea:	d10c      	bne.n	8010206 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	220a      	movs	r2, #10
 80101f0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80101f2:	4b3b      	ldr	r3, [pc, #236]	; (80102e0 <tcp_close_shutdown+0x1bc>)
 80101f4:	681a      	ldr	r2, [r3, #0]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	60da      	str	r2, [r3, #12]
 80101fa:	4a39      	ldr	r2, [pc, #228]	; (80102e0 <tcp_close_shutdown+0x1bc>)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6013      	str	r3, [r2, #0]
 8010200:	f004 fa7c 	bl	80146fc <tcp_timer_needed>
 8010204:	e00b      	b.n	801021e <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8010206:	4b37      	ldr	r3, [pc, #220]	; (80102e4 <tcp_close_shutdown+0x1c0>)
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	687a      	ldr	r2, [r7, #4]
 801020c:	429a      	cmp	r2, r3
 801020e:	d102      	bne.n	8010216 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8010210:	f003 faec 	bl	80137ec <tcp_trigger_input_pcb_close>
 8010214:	e003      	b.n	801021e <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8010216:	6879      	ldr	r1, [r7, #4]
 8010218:	2001      	movs	r0, #1
 801021a:	f7fe ff03 	bl	800f024 <memp_free>
        }
      }
      return ERR_OK;
 801021e:	2300      	movs	r3, #0
 8010220:	e050      	b.n	80102c4 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	7d1b      	ldrb	r3, [r3, #20]
 8010226:	2b01      	cmp	r3, #1
 8010228:	d02e      	beq.n	8010288 <tcp_close_shutdown+0x164>
 801022a:	2b02      	cmp	r3, #2
 801022c:	d038      	beq.n	80102a0 <tcp_close_shutdown+0x17c>
 801022e:	2b00      	cmp	r3, #0
 8010230:	d142      	bne.n	80102b8 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	8adb      	ldrh	r3, [r3, #22]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d021      	beq.n	801027e <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801023a:	4b2b      	ldr	r3, [pc, #172]	; (80102e8 <tcp_close_shutdown+0x1c4>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	687a      	ldr	r2, [r7, #4]
 8010240:	429a      	cmp	r2, r3
 8010242:	d105      	bne.n	8010250 <tcp_close_shutdown+0x12c>
 8010244:	4b28      	ldr	r3, [pc, #160]	; (80102e8 <tcp_close_shutdown+0x1c4>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	68db      	ldr	r3, [r3, #12]
 801024a:	4a27      	ldr	r2, [pc, #156]	; (80102e8 <tcp_close_shutdown+0x1c4>)
 801024c:	6013      	str	r3, [r2, #0]
 801024e:	e013      	b.n	8010278 <tcp_close_shutdown+0x154>
 8010250:	4b25      	ldr	r3, [pc, #148]	; (80102e8 <tcp_close_shutdown+0x1c4>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	60bb      	str	r3, [r7, #8]
 8010256:	e00c      	b.n	8010272 <tcp_close_shutdown+0x14e>
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	68db      	ldr	r3, [r3, #12]
 801025c:	687a      	ldr	r2, [r7, #4]
 801025e:	429a      	cmp	r2, r3
 8010260:	d104      	bne.n	801026c <tcp_close_shutdown+0x148>
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	68da      	ldr	r2, [r3, #12]
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	60da      	str	r2, [r3, #12]
 801026a:	e005      	b.n	8010278 <tcp_close_shutdown+0x154>
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	68db      	ldr	r3, [r3, #12]
 8010270:	60bb      	str	r3, [r7, #8]
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d1ef      	bne.n	8010258 <tcp_close_shutdown+0x134>
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2200      	movs	r2, #0
 801027c:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 801027e:	6879      	ldr	r1, [r7, #4]
 8010280:	2001      	movs	r0, #1
 8010282:	f7fe fecf 	bl	800f024 <memp_free>
    break;
 8010286:	e01c      	b.n	80102c2 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	f7ff ff13 	bl	80100b4 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801028e:	6879      	ldr	r1, [r7, #4]
 8010290:	4816      	ldr	r0, [pc, #88]	; (80102ec <tcp_close_shutdown+0x1c8>)
 8010292:	f000 ff89 	bl	80111a8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010296:	6879      	ldr	r1, [r7, #4]
 8010298:	2002      	movs	r0, #2
 801029a:	f7fe fec3 	bl	800f024 <memp_free>
    break;
 801029e:	e010      	b.n	80102c2 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80102a0:	6879      	ldr	r1, [r7, #4]
 80102a2:	480d      	ldr	r0, [pc, #52]	; (80102d8 <tcp_close_shutdown+0x1b4>)
 80102a4:	f000 ff80 	bl	80111a8 <tcp_pcb_remove>
 80102a8:	4b0c      	ldr	r3, [pc, #48]	; (80102dc <tcp_close_shutdown+0x1b8>)
 80102aa:	2201      	movs	r2, #1
 80102ac:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 80102ae:	6879      	ldr	r1, [r7, #4]
 80102b0:	2001      	movs	r0, #1
 80102b2:	f7fe feb7 	bl	800f024 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 80102b6:	e004      	b.n	80102c2 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 80102b8:	6878      	ldr	r0, [r7, #4]
 80102ba:	f000 f819 	bl	80102f0 <tcp_close_shutdown_fin>
 80102be:	4603      	mov	r3, r0
 80102c0:	e000      	b.n	80102c4 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 80102c2:	2300      	movs	r3, #0
}
 80102c4:	4618      	mov	r0, r3
 80102c6:	3710      	adds	r7, #16
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bdb0      	pop	{r4, r5, r7, pc}
 80102cc:	08018eec 	.word	0x08018eec
 80102d0:	08018f68 	.word	0x08018f68
 80102d4:	08018f28 	.word	0x08018f28
 80102d8:	2400d8f0 	.word	0x2400d8f0
 80102dc:	2400d8ec 	.word	0x2400d8ec
 80102e0:	2400d900 	.word	0x2400d900
 80102e4:	2400d904 	.word	0x2400d904
 80102e8:	2400d8fc 	.word	0x2400d8fc
 80102ec:	2400d8f8 	.word	0x2400d8f8

080102f0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b084      	sub	sp, #16
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d106      	bne.n	801030c <tcp_close_shutdown_fin+0x1c>
 80102fe:	4b2c      	ldr	r3, [pc, #176]	; (80103b0 <tcp_close_shutdown_fin+0xc0>)
 8010300:	f240 124d 	movw	r2, #333	; 0x14d
 8010304:	492b      	ldr	r1, [pc, #172]	; (80103b4 <tcp_close_shutdown_fin+0xc4>)
 8010306:	482c      	ldr	r0, [pc, #176]	; (80103b8 <tcp_close_shutdown_fin+0xc8>)
 8010308:	f007 f892 	bl	8017430 <iprintf>

  switch (pcb->state) {
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	7d1b      	ldrb	r3, [r3, #20]
 8010310:	2b04      	cmp	r3, #4
 8010312:	d010      	beq.n	8010336 <tcp_close_shutdown_fin+0x46>
 8010314:	2b07      	cmp	r3, #7
 8010316:	d01b      	beq.n	8010350 <tcp_close_shutdown_fin+0x60>
 8010318:	2b03      	cmp	r3, #3
 801031a:	d126      	bne.n	801036a <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f003 faf1 	bl	8013904 <tcp_send_fin>
 8010322:	4603      	mov	r3, r0
 8010324:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d11f      	bne.n	801036e <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	2205      	movs	r2, #5
 8010332:	751a      	strb	r2, [r3, #20]
    }
    break;
 8010334:	e01b      	b.n	801036e <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f003 fae4 	bl	8013904 <tcp_send_fin>
 801033c:	4603      	mov	r3, r0
 801033e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d114      	bne.n	8010372 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2205      	movs	r2, #5
 801034c:	751a      	strb	r2, [r3, #20]
    }
    break;
 801034e:	e010      	b.n	8010372 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8010350:	6878      	ldr	r0, [r7, #4]
 8010352:	f003 fad7 	bl	8013904 <tcp_send_fin>
 8010356:	4603      	mov	r3, r0
 8010358:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801035a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d109      	bne.n	8010376 <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2209      	movs	r2, #9
 8010366:	751a      	strb	r2, [r3, #20]
    }
    break;
 8010368:	e005      	b.n	8010376 <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 801036a:	2300      	movs	r3, #0
 801036c:	e01c      	b.n	80103a8 <tcp_close_shutdown_fin+0xb8>
    break;
 801036e:	bf00      	nop
 8010370:	e002      	b.n	8010378 <tcp_close_shutdown_fin+0x88>
    break;
 8010372:	bf00      	nop
 8010374:	e000      	b.n	8010378 <tcp_close_shutdown_fin+0x88>
    break;
 8010376:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d103      	bne.n	8010388 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f003 fcdf 	bl	8013d44 <tcp_output>
 8010386:	e00d      	b.n	80103a4 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8010388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801038c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010390:	d108      	bne.n	80103a4 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	7e9b      	ldrb	r3, [r3, #26]
 8010396:	f043 0308 	orr.w	r3, r3, #8
 801039a:	b2da      	uxtb	r2, r3
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80103a0:	2300      	movs	r3, #0
 80103a2:	e001      	b.n	80103a8 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 80103a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	3710      	adds	r7, #16
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}
 80103b0:	08018eec 	.word	0x08018eec
 80103b4:	08018f1c 	.word	0x08018f1c
 80103b8:	08018f28 	.word	0x08018f28

080103bc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	b082      	sub	sp, #8
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	7d1b      	ldrb	r3, [r3, #20]
 80103c8:	2b01      	cmp	r3, #1
 80103ca:	d006      	beq.n	80103da <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	7e9b      	ldrb	r3, [r3, #26]
 80103d0:	f043 0310 	orr.w	r3, r3, #16
 80103d4:	b2da      	uxtb	r2, r3
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80103da:	2101      	movs	r1, #1
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f7ff fea1 	bl	8010124 <tcp_close_shutdown>
 80103e2:	4603      	mov	r3, r0
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3708      	adds	r7, #8
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b08c      	sub	sp, #48	; 0x30
 80103f0:	af02      	add	r7, sp, #8
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	7d1b      	ldrb	r3, [r3, #20]
 80103fa:	2b01      	cmp	r3, #1
 80103fc:	d106      	bne.n	801040c <tcp_abandon+0x20>
 80103fe:	4b4d      	ldr	r3, [pc, #308]	; (8010534 <tcp_abandon+0x148>)
 8010400:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010404:	494c      	ldr	r1, [pc, #304]	; (8010538 <tcp_abandon+0x14c>)
 8010406:	484d      	ldr	r0, [pc, #308]	; (801053c <tcp_abandon+0x150>)
 8010408:	f007 f812 	bl	8017430 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	7d1b      	ldrb	r3, [r3, #20]
 8010410:	2b0a      	cmp	r3, #10
 8010412:	d108      	bne.n	8010426 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010414:	6879      	ldr	r1, [r7, #4]
 8010416:	484a      	ldr	r0, [pc, #296]	; (8010540 <tcp_abandon+0x154>)
 8010418:	f000 fec6 	bl	80111a8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 801041c:	6879      	ldr	r1, [r7, #4]
 801041e:	2001      	movs	r0, #1
 8010420:	f7fe fe00 	bl	800f024 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8010424:	e081      	b.n	801052a <tcp_abandon+0x13e>
    int send_rst = 0;
 8010426:	2300      	movs	r3, #0
 8010428:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801042a:	2300      	movs	r3, #0
 801042c:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010432:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010438:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010440:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	691b      	ldr	r3, [r3, #16]
 8010446:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	7d1b      	ldrb	r3, [r3, #20]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d126      	bne.n	801049e <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	8adb      	ldrh	r3, [r3, #22]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d02e      	beq.n	80104b6 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010458:	4b3a      	ldr	r3, [pc, #232]	; (8010544 <tcp_abandon+0x158>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	687a      	ldr	r2, [r7, #4]
 801045e:	429a      	cmp	r2, r3
 8010460:	d105      	bne.n	801046e <tcp_abandon+0x82>
 8010462:	4b38      	ldr	r3, [pc, #224]	; (8010544 <tcp_abandon+0x158>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	68db      	ldr	r3, [r3, #12]
 8010468:	4a36      	ldr	r2, [pc, #216]	; (8010544 <tcp_abandon+0x158>)
 801046a:	6013      	str	r3, [r2, #0]
 801046c:	e013      	b.n	8010496 <tcp_abandon+0xaa>
 801046e:	4b35      	ldr	r3, [pc, #212]	; (8010544 <tcp_abandon+0x158>)
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	61fb      	str	r3, [r7, #28]
 8010474:	e00c      	b.n	8010490 <tcp_abandon+0xa4>
 8010476:	69fb      	ldr	r3, [r7, #28]
 8010478:	68db      	ldr	r3, [r3, #12]
 801047a:	687a      	ldr	r2, [r7, #4]
 801047c:	429a      	cmp	r2, r3
 801047e:	d104      	bne.n	801048a <tcp_abandon+0x9e>
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	68da      	ldr	r2, [r3, #12]
 8010484:	69fb      	ldr	r3, [r7, #28]
 8010486:	60da      	str	r2, [r3, #12]
 8010488:	e005      	b.n	8010496 <tcp_abandon+0xaa>
 801048a:	69fb      	ldr	r3, [r7, #28]
 801048c:	68db      	ldr	r3, [r3, #12]
 801048e:	61fb      	str	r3, [r7, #28]
 8010490:	69fb      	ldr	r3, [r7, #28]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d1ef      	bne.n	8010476 <tcp_abandon+0x8a>
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	2200      	movs	r2, #0
 801049a:	60da      	str	r2, [r3, #12]
 801049c:	e00b      	b.n	80104b6 <tcp_abandon+0xca>
      send_rst = reset;
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	8adb      	ldrh	r3, [r3, #22]
 80104a6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80104a8:	6879      	ldr	r1, [r7, #4]
 80104aa:	4827      	ldr	r0, [pc, #156]	; (8010548 <tcp_abandon+0x15c>)
 80104ac:	f000 fe7c 	bl	80111a8 <tcp_pcb_remove>
 80104b0:	4b26      	ldr	r3, [pc, #152]	; (801054c <tcp_abandon+0x160>)
 80104b2:	2201      	movs	r2, #1
 80104b4:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d004      	beq.n	80104c8 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104c2:	4618      	mov	r0, r3
 80104c4:	f000 fc85 	bl	8010dd2 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d004      	beq.n	80104da <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80104d4:	4618      	mov	r0, r3
 80104d6:	f000 fc7c 	bl	8010dd2 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d004      	beq.n	80104ec <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104e6:	4618      	mov	r0, r3
 80104e8:	f000 fc73 	bl	8010dd2 <tcp_segs_free>
    if (send_rst) {
 80104ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d00c      	beq.n	801050c <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80104f2:	687a      	ldr	r2, [r7, #4]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	1d19      	adds	r1, r3, #4
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	8b1b      	ldrh	r3, [r3, #24]
 80104fc:	9301      	str	r3, [sp, #4]
 80104fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010500:	9300      	str	r3, [sp, #0]
 8010502:	460b      	mov	r3, r1
 8010504:	6979      	ldr	r1, [r7, #20]
 8010506:	69b8      	ldr	r0, [r7, #24]
 8010508:	f003 fea6 	bl	8014258 <tcp_rst>
    last_state = pcb->state;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	7d1b      	ldrb	r3, [r3, #20]
 8010510:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8010512:	6879      	ldr	r1, [r7, #4]
 8010514:	2001      	movs	r0, #1
 8010516:	f7fe fd85 	bl	800f024 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801051a:	693b      	ldr	r3, [r7, #16]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d004      	beq.n	801052a <tcp_abandon+0x13e>
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	f06f 010c 	mvn.w	r1, #12
 8010526:	68f8      	ldr	r0, [r7, #12]
 8010528:	4798      	blx	r3
}
 801052a:	bf00      	nop
 801052c:	3728      	adds	r7, #40	; 0x28
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}
 8010532:	bf00      	nop
 8010534:	08018eec 	.word	0x08018eec
 8010538:	08018f84 	.word	0x08018f84
 801053c:	08018f28 	.word	0x08018f28
 8010540:	2400d900 	.word	0x2400d900
 8010544:	2400d8fc 	.word	0x2400d8fc
 8010548:	2400d8f0 	.word	0x2400d8f0
 801054c:	2400d8ec 	.word	0x2400d8ec

08010550 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b082      	sub	sp, #8
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010558:	2101      	movs	r1, #1
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f7ff ff46 	bl	80103ec <tcp_abandon>
}
 8010560:	bf00      	nop
 8010562:	3708      	adds	r7, #8
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}

08010568 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b084      	sub	sp, #16
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010574:	687a      	ldr	r2, [r7, #4]
 8010576:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010578:	4413      	add	r3, r2
 801057a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010580:	687a      	ldr	r2, [r7, #4]
 8010582:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010584:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8010588:	bf28      	it	cs
 801058a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801058e:	b292      	uxth	r2, r2
 8010590:	4413      	add	r3, r2
 8010592:	68fa      	ldr	r2, [r7, #12]
 8010594:	1ad3      	subs	r3, r2, r3
 8010596:	2b00      	cmp	r3, #0
 8010598:	db08      	blt.n	80105ac <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105a6:	68fa      	ldr	r2, [r7, #12]
 80105a8:	1ad3      	subs	r3, r2, r3
 80105aa:	e020      	b.n	80105ee <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105b4:	1ad3      	subs	r3, r2, r3
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	dd03      	ble.n	80105c2 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2200      	movs	r2, #0
 80105be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80105c0:	e014      	b.n	80105ec <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105ca:	1ad3      	subs	r3, r2, r3
 80105cc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80105ce:	68bb      	ldr	r3, [r7, #8]
 80105d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105d4:	d306      	bcc.n	80105e4 <tcp_update_rcv_ann_wnd+0x7c>
 80105d6:	4b08      	ldr	r3, [pc, #32]	; (80105f8 <tcp_update_rcv_ann_wnd+0x90>)
 80105d8:	f44f 7242 	mov.w	r2, #776	; 0x308
 80105dc:	4907      	ldr	r1, [pc, #28]	; (80105fc <tcp_update_rcv_ann_wnd+0x94>)
 80105de:	4808      	ldr	r0, [pc, #32]	; (8010600 <tcp_update_rcv_ann_wnd+0x98>)
 80105e0:	f006 ff26 	bl	8017430 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	b29a      	uxth	r2, r3
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80105ec:	2300      	movs	r3, #0
  }
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	3710      	adds	r7, #16
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}
 80105f6:	bf00      	nop
 80105f8:	08018eec 	.word	0x08018eec
 80105fc:	08019004 	.word	0x08019004
 8010600:	08018f28 	.word	0x08018f28

08010604 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b084      	sub	sp, #16
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
 801060c:	460b      	mov	r3, r1
 801060e:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	7d1b      	ldrb	r3, [r3, #20]
 8010614:	2b01      	cmp	r3, #1
 8010616:	d106      	bne.n	8010626 <tcp_recved+0x22>
 8010618:	4b23      	ldr	r3, [pc, #140]	; (80106a8 <tcp_recved+0xa4>)
 801061a:	f44f 7248 	mov.w	r2, #800	; 0x320
 801061e:	4923      	ldr	r1, [pc, #140]	; (80106ac <tcp_recved+0xa8>)
 8010620:	4823      	ldr	r0, [pc, #140]	; (80106b0 <tcp_recved+0xac>)
 8010622:	f006 ff05 	bl	8017430 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801062a:	887b      	ldrh	r3, [r7, #2]
 801062c:	4413      	add	r3, r2
 801062e:	b29a      	uxth	r2, r3
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010638:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801063c:	d904      	bls.n	8010648 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010644:	851a      	strh	r2, [r3, #40]	; 0x28
 8010646:	e017      	b.n	8010678 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801064c:	2b00      	cmp	r3, #0
 801064e:	d113      	bne.n	8010678 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	7d1b      	ldrb	r3, [r3, #20]
 8010654:	2b07      	cmp	r3, #7
 8010656:	d003      	beq.n	8010660 <tcp_recved+0x5c>
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	7d1b      	ldrb	r3, [r3, #20]
 801065c:	2b09      	cmp	r3, #9
 801065e:	d104      	bne.n	801066a <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010666:	851a      	strh	r2, [r3, #40]	; 0x28
 8010668:	e006      	b.n	8010678 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 801066a:	4b0f      	ldr	r3, [pc, #60]	; (80106a8 <tcp_recved+0xa4>)
 801066c:	f240 322d 	movw	r2, #813	; 0x32d
 8010670:	4910      	ldr	r1, [pc, #64]	; (80106b4 <tcp_recved+0xb0>)
 8010672:	480f      	ldr	r0, [pc, #60]	; (80106b0 <tcp_recved+0xac>)
 8010674:	f006 fedc 	bl	8017430 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	f7ff ff75 	bl	8010568 <tcp_update_rcv_ann_wnd>
 801067e:	4603      	mov	r3, r0
 8010680:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010688:	db09      	blt.n	801069e <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	7e9b      	ldrb	r3, [r3, #26]
 801068e:	f043 0302 	orr.w	r3, r3, #2
 8010692:	b2da      	uxtb	r2, r3
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8010698:	6878      	ldr	r0, [r7, #4]
 801069a:	f003 fb53 	bl	8013d44 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801069e:	bf00      	nop
 80106a0:	3710      	adds	r7, #16
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
 80106a6:	bf00      	nop
 80106a8:	08018eec 	.word	0x08018eec
 80106ac:	08019020 	.word	0x08019020
 80106b0:	08018f28 	.word	0x08018f28
 80106b4:	08019048 	.word	0x08019048

080106b8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80106b8:	b5b0      	push	{r4, r5, r7, lr}
 80106ba:	b08c      	sub	sp, #48	; 0x30
 80106bc:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80106be:	2300      	movs	r3, #0
 80106c0:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 80106c2:	4b96      	ldr	r3, [pc, #600]	; (801091c <tcp_slowtmr+0x264>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	3301      	adds	r3, #1
 80106c8:	4a94      	ldr	r2, [pc, #592]	; (801091c <tcp_slowtmr+0x264>)
 80106ca:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80106cc:	4b94      	ldr	r3, [pc, #592]	; (8010920 <tcp_slowtmr+0x268>)
 80106ce:	781b      	ldrb	r3, [r3, #0]
 80106d0:	3301      	adds	r3, #1
 80106d2:	b2da      	uxtb	r2, r3
 80106d4:	4b92      	ldr	r3, [pc, #584]	; (8010920 <tcp_slowtmr+0x268>)
 80106d6:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80106d8:	2300      	movs	r3, #0
 80106da:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 80106dc:	4b91      	ldr	r3, [pc, #580]	; (8010924 <tcp_slowtmr+0x26c>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80106e2:	e227      	b.n	8010b34 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80106e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e6:	7d1b      	ldrb	r3, [r3, #20]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d106      	bne.n	80106fa <tcp_slowtmr+0x42>
 80106ec:	4b8e      	ldr	r3, [pc, #568]	; (8010928 <tcp_slowtmr+0x270>)
 80106ee:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80106f2:	498e      	ldr	r1, [pc, #568]	; (801092c <tcp_slowtmr+0x274>)
 80106f4:	488e      	ldr	r0, [pc, #568]	; (8010930 <tcp_slowtmr+0x278>)
 80106f6:	f006 fe9b 	bl	8017430 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80106fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106fc:	7d1b      	ldrb	r3, [r3, #20]
 80106fe:	2b01      	cmp	r3, #1
 8010700:	d106      	bne.n	8010710 <tcp_slowtmr+0x58>
 8010702:	4b89      	ldr	r3, [pc, #548]	; (8010928 <tcp_slowtmr+0x270>)
 8010704:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010708:	498a      	ldr	r1, [pc, #552]	; (8010934 <tcp_slowtmr+0x27c>)
 801070a:	4889      	ldr	r0, [pc, #548]	; (8010930 <tcp_slowtmr+0x278>)
 801070c:	f006 fe90 	bl	8017430 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010712:	7d1b      	ldrb	r3, [r3, #20]
 8010714:	2b0a      	cmp	r3, #10
 8010716:	d106      	bne.n	8010726 <tcp_slowtmr+0x6e>
 8010718:	4b83      	ldr	r3, [pc, #524]	; (8010928 <tcp_slowtmr+0x270>)
 801071a:	f240 32f2 	movw	r2, #1010	; 0x3f2
 801071e:	4986      	ldr	r1, [pc, #536]	; (8010938 <tcp_slowtmr+0x280>)
 8010720:	4883      	ldr	r0, [pc, #524]	; (8010930 <tcp_slowtmr+0x278>)
 8010722:	f006 fe85 	bl	8017430 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010728:	7f5a      	ldrb	r2, [r3, #29]
 801072a:	4b7d      	ldr	r3, [pc, #500]	; (8010920 <tcp_slowtmr+0x268>)
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	429a      	cmp	r2, r3
 8010730:	d103      	bne.n	801073a <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8010732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010734:	68db      	ldr	r3, [r3, #12]
 8010736:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8010738:	e1fc      	b.n	8010b34 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 801073a:	4b79      	ldr	r3, [pc, #484]	; (8010920 <tcp_slowtmr+0x268>)
 801073c:	781a      	ldrb	r2, [r3, #0]
 801073e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010740:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8010742:	2300      	movs	r3, #0
 8010744:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8010746:	2300      	movs	r3, #0
 8010748:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801074a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801074c:	7d1b      	ldrb	r3, [r3, #20]
 801074e:	2b02      	cmp	r3, #2
 8010750:	d108      	bne.n	8010764 <tcp_slowtmr+0xac>
 8010752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010754:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010758:	2b05      	cmp	r3, #5
 801075a:	d903      	bls.n	8010764 <tcp_slowtmr+0xac>
      ++pcb_remove;
 801075c:	7ffb      	ldrb	r3, [r7, #31]
 801075e:	3301      	adds	r3, #1
 8010760:	77fb      	strb	r3, [r7, #31]
 8010762:	e0a2      	b.n	80108aa <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8010764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010766:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801076a:	2b0b      	cmp	r3, #11
 801076c:	d903      	bls.n	8010776 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801076e:	7ffb      	ldrb	r3, [r7, #31]
 8010770:	3301      	adds	r3, #1
 8010772:	77fb      	strb	r3, [r7, #31]
 8010774:	e099      	b.n	80108aa <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010778:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801077c:	2b00      	cmp	r3, #0
 801077e:	d032      	beq.n	80107e6 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8010780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010782:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010786:	3b01      	subs	r3, #1
 8010788:	4a6c      	ldr	r2, [pc, #432]	; (801093c <tcp_slowtmr+0x284>)
 801078a:	5cd3      	ldrb	r3, [r2, r3]
 801078c:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 801078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010790:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8010794:	7cfa      	ldrb	r2, [r7, #19]
 8010796:	429a      	cmp	r2, r3
 8010798:	d907      	bls.n	80107aa <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 801079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80107a0:	3301      	adds	r3, #1
 80107a2:	b2da      	uxtb	r2, r3
 80107a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 80107aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ac:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80107b0:	7cfa      	ldrb	r2, [r7, #19]
 80107b2:	429a      	cmp	r2, r3
 80107b4:	d879      	bhi.n	80108aa <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80107b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107b8:	f003 fee0 	bl	801457c <tcp_zero_window_probe>
 80107bc:	4603      	mov	r3, r0
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d173      	bne.n	80108aa <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 80107c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c4:	2200      	movs	r2, #0
 80107c6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80107ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107cc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80107d0:	2b06      	cmp	r3, #6
 80107d2:	d86a      	bhi.n	80108aa <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 80107d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80107da:	3301      	adds	r3, #1
 80107dc:	b2da      	uxtb	r2, r3
 80107de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 80107e4:	e061      	b.n	80108aa <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 80107e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	db08      	blt.n	8010802 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 80107f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80107f6:	b29b      	uxth	r3, r3
 80107f8:	3301      	adds	r3, #1
 80107fa:	b29b      	uxth	r3, r3
 80107fc:	b21a      	sxth	r2, r3
 80107fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010800:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8010802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010806:	2b00      	cmp	r3, #0
 8010808:	d04f      	beq.n	80108aa <tcp_slowtmr+0x1f2>
 801080a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801080c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8010810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010812:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010816:	429a      	cmp	r2, r3
 8010818:	db47      	blt.n	80108aa <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 801081a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801081c:	7d1b      	ldrb	r3, [r3, #20]
 801081e:	2b02      	cmp	r3, #2
 8010820:	d018      	beq.n	8010854 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8010822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010824:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010828:	2b0c      	cmp	r3, #12
 801082a:	bf28      	it	cs
 801082c:	230c      	movcs	r3, #12
 801082e:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010832:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010836:	10db      	asrs	r3, r3, #3
 8010838:	b21b      	sxth	r3, r3
 801083a:	461a      	mov	r2, r3
 801083c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801083e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010842:	4413      	add	r3, r2
 8010844:	7dfa      	ldrb	r2, [r7, #23]
 8010846:	493e      	ldr	r1, [pc, #248]	; (8010940 <tcp_slowtmr+0x288>)
 8010848:	5c8a      	ldrb	r2, [r1, r2]
 801084a:	4093      	lsls	r3, r2
 801084c:	b21a      	sxth	r2, r3
 801084e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010850:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8010854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010856:	2200      	movs	r2, #0
 8010858:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801085c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010862:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010866:	4293      	cmp	r3, r2
 8010868:	bf28      	it	cs
 801086a:	4613      	movcs	r3, r2
 801086c:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 801086e:	8abb      	ldrh	r3, [r7, #20]
 8010870:	085b      	lsrs	r3, r3, #1
 8010872:	b29a      	uxth	r2, r3
 8010874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010876:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801087a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801087c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010882:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010884:	005b      	lsls	r3, r3, #1
 8010886:	b29b      	uxth	r3, r3
 8010888:	429a      	cmp	r2, r3
 801088a:	d206      	bcs.n	801089a <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 801088c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801088e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010890:	005b      	lsls	r3, r3, #1
 8010892:	b29a      	uxth	r2, r3
 8010894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010896:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 801089a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801089c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 80108a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80108a6:	f003 fd4d 	bl	8014344 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80108aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ac:	7d1b      	ldrb	r3, [r3, #20]
 80108ae:	2b06      	cmp	r3, #6
 80108b0:	d10f      	bne.n	80108d2 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80108b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b4:	7e9b      	ldrb	r3, [r3, #26]
 80108b6:	f003 0310 	and.w	r3, r3, #16
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d009      	beq.n	80108d2 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80108be:	4b17      	ldr	r3, [pc, #92]	; (801091c <tcp_slowtmr+0x264>)
 80108c0:	681a      	ldr	r2, [r3, #0]
 80108c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c4:	6a1b      	ldr	r3, [r3, #32]
 80108c6:	1ad3      	subs	r3, r2, r3
 80108c8:	2b28      	cmp	r3, #40	; 0x28
 80108ca:	d902      	bls.n	80108d2 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80108cc:	7ffb      	ldrb	r3, [r7, #31]
 80108ce:	3301      	adds	r3, #1
 80108d0:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80108d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108d4:	7a1b      	ldrb	r3, [r3, #8]
 80108d6:	f003 0308 	and.w	r3, r3, #8
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d05d      	beq.n	801099a <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 80108de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e0:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80108e2:	2b04      	cmp	r3, #4
 80108e4:	d003      	beq.n	80108ee <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 80108e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e8:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 80108ea:	2b07      	cmp	r3, #7
 80108ec:	d155      	bne.n	801099a <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80108ee:	4b0b      	ldr	r3, [pc, #44]	; (801091c <tcp_slowtmr+0x264>)
 80108f0:	681a      	ldr	r2, [r3, #0]
 80108f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f4:	6a1b      	ldr	r3, [r3, #32]
 80108f6:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80108f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108fa:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80108fe:	4b11      	ldr	r3, [pc, #68]	; (8010944 <tcp_slowtmr+0x28c>)
 8010900:	440b      	add	r3, r1
 8010902:	4911      	ldr	r1, [pc, #68]	; (8010948 <tcp_slowtmr+0x290>)
 8010904:	fba1 1303 	umull	r1, r3, r1, r3
 8010908:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801090a:	429a      	cmp	r2, r3
 801090c:	d91e      	bls.n	801094c <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801090e:	7ffb      	ldrb	r3, [r7, #31]
 8010910:	3301      	adds	r3, #1
 8010912:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8010914:	7fbb      	ldrb	r3, [r7, #30]
 8010916:	3301      	adds	r3, #1
 8010918:	77bb      	strb	r3, [r7, #30]
 801091a:	e03e      	b.n	801099a <tcp_slowtmr+0x2e2>
 801091c:	2400d8f4 	.word	0x2400d8f4
 8010920:	2400a3fa 	.word	0x2400a3fa
 8010924:	2400d8f0 	.word	0x2400d8f0
 8010928:	08018eec 	.word	0x08018eec
 801092c:	0801909c 	.word	0x0801909c
 8010930:	08018f28 	.word	0x08018f28
 8010934:	080190c8 	.word	0x080190c8
 8010938:	080190f4 	.word	0x080190f4
 801093c:	0801a36c 	.word	0x0801a36c
 8010940:	0801a35c 	.word	0x0801a35c
 8010944:	000a4cb8 	.word	0x000a4cb8
 8010948:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801094c:	4b97      	ldr	r3, [pc, #604]	; (8010bac <tcp_slowtmr+0x4f4>)
 801094e:	681a      	ldr	r2, [r3, #0]
 8010950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010952:	6a1b      	ldr	r3, [r3, #32]
 8010954:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010958:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 801095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801095e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8010962:	4618      	mov	r0, r3
 8010964:	4b92      	ldr	r3, [pc, #584]	; (8010bb0 <tcp_slowtmr+0x4f8>)
 8010966:	fb03 f300 	mul.w	r3, r3, r0
 801096a:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 801096c:	4991      	ldr	r1, [pc, #580]	; (8010bb4 <tcp_slowtmr+0x4fc>)
 801096e:	fba1 1303 	umull	r1, r3, r1, r3
 8010972:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010974:	429a      	cmp	r2, r3
 8010976:	d910      	bls.n	801099a <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8010978:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801097a:	f003 fdc2 	bl	8014502 <tcp_keepalive>
 801097e:	4603      	mov	r3, r0
 8010980:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8010982:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d107      	bne.n	801099a <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 801098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801098c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8010990:	3301      	adds	r3, #1
 8010992:	b2da      	uxtb	r2, r3
 8010994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010996:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801099c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d016      	beq.n	80109d0 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80109a2:	4b82      	ldr	r3, [pc, #520]	; (8010bac <tcp_slowtmr+0x4f4>)
 80109a4:	681a      	ldr	r2, [r3, #0]
 80109a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a8:	6a1b      	ldr	r3, [r3, #32]
 80109aa:	1ad2      	subs	r2, r2, r3
 80109ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ae:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80109b2:	4619      	mov	r1, r3
 80109b4:	460b      	mov	r3, r1
 80109b6:	005b      	lsls	r3, r3, #1
 80109b8:	440b      	add	r3, r1
 80109ba:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80109bc:	429a      	cmp	r2, r3
 80109be:	d307      	bcc.n	80109d0 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 80109c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109c4:	4618      	mov	r0, r3
 80109c6:	f000 fa04 	bl	8010dd2 <tcp_segs_free>
      pcb->ooseq = NULL;
 80109ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109cc:	2200      	movs	r2, #0
 80109ce:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80109d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d2:	7d1b      	ldrb	r3, [r3, #20]
 80109d4:	2b03      	cmp	r3, #3
 80109d6:	d109      	bne.n	80109ec <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80109d8:	4b74      	ldr	r3, [pc, #464]	; (8010bac <tcp_slowtmr+0x4f4>)
 80109da:	681a      	ldr	r2, [r3, #0]
 80109dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109de:	6a1b      	ldr	r3, [r3, #32]
 80109e0:	1ad3      	subs	r3, r2, r3
 80109e2:	2b28      	cmp	r3, #40	; 0x28
 80109e4:	d902      	bls.n	80109ec <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80109e6:	7ffb      	ldrb	r3, [r7, #31]
 80109e8:	3301      	adds	r3, #1
 80109ea:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80109ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ee:	7d1b      	ldrb	r3, [r3, #20]
 80109f0:	2b09      	cmp	r3, #9
 80109f2:	d109      	bne.n	8010a08 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80109f4:	4b6d      	ldr	r3, [pc, #436]	; (8010bac <tcp_slowtmr+0x4f4>)
 80109f6:	681a      	ldr	r2, [r3, #0]
 80109f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109fa:	6a1b      	ldr	r3, [r3, #32]
 80109fc:	1ad3      	subs	r3, r2, r3
 80109fe:	2bf0      	cmp	r3, #240	; 0xf0
 8010a00:	d902      	bls.n	8010a08 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8010a02:	7ffb      	ldrb	r3, [r7, #31]
 8010a04:	3301      	adds	r3, #1
 8010a06:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010a08:	7ffb      	ldrb	r3, [r7, #31]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d05d      	beq.n	8010aca <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8010a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010a14:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8010a16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a18:	f000 fb84 	bl	8011124 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8010a1c:	6a3b      	ldr	r3, [r7, #32]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d010      	beq.n	8010a44 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010a22:	4b65      	ldr	r3, [pc, #404]	; (8010bb8 <tcp_slowtmr+0x500>)
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a28:	429a      	cmp	r2, r3
 8010a2a:	d106      	bne.n	8010a3a <tcp_slowtmr+0x382>
 8010a2c:	4b63      	ldr	r3, [pc, #396]	; (8010bbc <tcp_slowtmr+0x504>)
 8010a2e:	f240 4289 	movw	r2, #1161	; 0x489
 8010a32:	4963      	ldr	r1, [pc, #396]	; (8010bc0 <tcp_slowtmr+0x508>)
 8010a34:	4863      	ldr	r0, [pc, #396]	; (8010bc4 <tcp_slowtmr+0x50c>)
 8010a36:	f006 fcfb 	bl	8017430 <iprintf>
        prev->next = pcb->next;
 8010a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a3c:	68da      	ldr	r2, [r3, #12]
 8010a3e:	6a3b      	ldr	r3, [r7, #32]
 8010a40:	60da      	str	r2, [r3, #12]
 8010a42:	e00f      	b.n	8010a64 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010a44:	4b5c      	ldr	r3, [pc, #368]	; (8010bb8 <tcp_slowtmr+0x500>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d006      	beq.n	8010a5c <tcp_slowtmr+0x3a4>
 8010a4e:	4b5b      	ldr	r3, [pc, #364]	; (8010bbc <tcp_slowtmr+0x504>)
 8010a50:	f240 428d 	movw	r2, #1165	; 0x48d
 8010a54:	495c      	ldr	r1, [pc, #368]	; (8010bc8 <tcp_slowtmr+0x510>)
 8010a56:	485b      	ldr	r0, [pc, #364]	; (8010bc4 <tcp_slowtmr+0x50c>)
 8010a58:	f006 fcea 	bl	8017430 <iprintf>
        tcp_active_pcbs = pcb->next;
 8010a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a5e:	68db      	ldr	r3, [r3, #12]
 8010a60:	4a55      	ldr	r2, [pc, #340]	; (8010bb8 <tcp_slowtmr+0x500>)
 8010a62:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8010a64:	7fbb      	ldrb	r3, [r7, #30]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d010      	beq.n	8010a8c <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a6c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a70:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010a72:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8010a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a76:	1d1d      	adds	r5, r3, #4
 8010a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a7a:	8adb      	ldrh	r3, [r3, #22]
 8010a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a7e:	8b12      	ldrh	r2, [r2, #24]
 8010a80:	9201      	str	r2, [sp, #4]
 8010a82:	9300      	str	r3, [sp, #0]
 8010a84:	462b      	mov	r3, r5
 8010a86:	4622      	mov	r2, r4
 8010a88:	f003 fbe6 	bl	8014258 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8010a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a8e:	691b      	ldr	r3, [r3, #16]
 8010a90:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a94:	7d1b      	ldrb	r3, [r3, #20]
 8010a96:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a9a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a9e:	68db      	ldr	r3, [r3, #12]
 8010aa0:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8010aa2:	6839      	ldr	r1, [r7, #0]
 8010aa4:	2001      	movs	r0, #1
 8010aa6:	f7fe fabd 	bl	800f024 <memp_free>

      tcp_active_pcbs_changed = 0;
 8010aaa:	4b48      	ldr	r3, [pc, #288]	; (8010bcc <tcp_slowtmr+0x514>)
 8010aac:	2200      	movs	r2, #0
 8010aae:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d004      	beq.n	8010ac0 <tcp_slowtmr+0x408>
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	f06f 010c 	mvn.w	r1, #12
 8010abc:	68b8      	ldr	r0, [r7, #8]
 8010abe:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010ac0:	4b42      	ldr	r3, [pc, #264]	; (8010bcc <tcp_slowtmr+0x514>)
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d035      	beq.n	8010b34 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8010ac8:	e606      	b.n	80106d8 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8010aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010acc:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8010ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad0:	68db      	ldr	r3, [r3, #12]
 8010ad2:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8010ad4:	6a3b      	ldr	r3, [r7, #32]
 8010ad6:	7edb      	ldrb	r3, [r3, #27]
 8010ad8:	3301      	adds	r3, #1
 8010ada:	b2da      	uxtb	r2, r3
 8010adc:	6a3b      	ldr	r3, [r7, #32]
 8010ade:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8010ae0:	6a3b      	ldr	r3, [r7, #32]
 8010ae2:	7eda      	ldrb	r2, [r3, #27]
 8010ae4:	6a3b      	ldr	r3, [r7, #32]
 8010ae6:	7f1b      	ldrb	r3, [r3, #28]
 8010ae8:	429a      	cmp	r2, r3
 8010aea:	d323      	bcc.n	8010b34 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8010aec:	6a3b      	ldr	r3, [r7, #32]
 8010aee:	2200      	movs	r2, #0
 8010af0:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8010af2:	4b36      	ldr	r3, [pc, #216]	; (8010bcc <tcp_slowtmr+0x514>)
 8010af4:	2200      	movs	r2, #0
 8010af6:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010af8:	6a3b      	ldr	r3, [r7, #32]
 8010afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d00a      	beq.n	8010b18 <tcp_slowtmr+0x460>
 8010b02:	6a3b      	ldr	r3, [r7, #32]
 8010b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b08:	6a3a      	ldr	r2, [r7, #32]
 8010b0a:	6912      	ldr	r2, [r2, #16]
 8010b0c:	6a39      	ldr	r1, [r7, #32]
 8010b0e:	4610      	mov	r0, r2
 8010b10:	4798      	blx	r3
 8010b12:	4603      	mov	r3, r0
 8010b14:	777b      	strb	r3, [r7, #29]
 8010b16:	e001      	b.n	8010b1c <tcp_slowtmr+0x464>
 8010b18:	2300      	movs	r3, #0
 8010b1a:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8010b1c:	4b2b      	ldr	r3, [pc, #172]	; (8010bcc <tcp_slowtmr+0x514>)
 8010b1e:	781b      	ldrb	r3, [r3, #0]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d000      	beq.n	8010b26 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8010b24:	e5d8      	b.n	80106d8 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010b26:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d102      	bne.n	8010b34 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8010b2e:	6a38      	ldr	r0, [r7, #32]
 8010b30:	f003 f908 	bl	8013d44 <tcp_output>
  while (pcb != NULL) {
 8010b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	f47f add4 	bne.w	80106e4 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8010b40:	4b23      	ldr	r3, [pc, #140]	; (8010bd0 <tcp_slowtmr+0x518>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8010b46:	e068      	b.n	8010c1a <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b4a:	7d1b      	ldrb	r3, [r3, #20]
 8010b4c:	2b0a      	cmp	r3, #10
 8010b4e:	d006      	beq.n	8010b5e <tcp_slowtmr+0x4a6>
 8010b50:	4b1a      	ldr	r3, [pc, #104]	; (8010bbc <tcp_slowtmr+0x504>)
 8010b52:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8010b56:	491f      	ldr	r1, [pc, #124]	; (8010bd4 <tcp_slowtmr+0x51c>)
 8010b58:	481a      	ldr	r0, [pc, #104]	; (8010bc4 <tcp_slowtmr+0x50c>)
 8010b5a:	f006 fc69 	bl	8017430 <iprintf>
    pcb_remove = 0;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010b62:	4b12      	ldr	r3, [pc, #72]	; (8010bac <tcp_slowtmr+0x4f4>)
 8010b64:	681a      	ldr	r2, [r3, #0]
 8010b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b68:	6a1b      	ldr	r3, [r3, #32]
 8010b6a:	1ad3      	subs	r3, r2, r3
 8010b6c:	2bf0      	cmp	r3, #240	; 0xf0
 8010b6e:	d902      	bls.n	8010b76 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8010b70:	7ffb      	ldrb	r3, [r7, #31]
 8010b72:	3301      	adds	r3, #1
 8010b74:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010b76:	7ffb      	ldrb	r3, [r7, #31]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d049      	beq.n	8010c10 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010b7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b7e:	f000 fad1 	bl	8011124 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010b82:	6a3b      	ldr	r3, [r7, #32]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d029      	beq.n	8010bdc <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010b88:	4b11      	ldr	r3, [pc, #68]	; (8010bd0 <tcp_slowtmr+0x518>)
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b8e:	429a      	cmp	r2, r3
 8010b90:	d106      	bne.n	8010ba0 <tcp_slowtmr+0x4e8>
 8010b92:	4b0a      	ldr	r3, [pc, #40]	; (8010bbc <tcp_slowtmr+0x504>)
 8010b94:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8010b98:	490f      	ldr	r1, [pc, #60]	; (8010bd8 <tcp_slowtmr+0x520>)
 8010b9a:	480a      	ldr	r0, [pc, #40]	; (8010bc4 <tcp_slowtmr+0x50c>)
 8010b9c:	f006 fc48 	bl	8017430 <iprintf>
        prev->next = pcb->next;
 8010ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba2:	68da      	ldr	r2, [r3, #12]
 8010ba4:	6a3b      	ldr	r3, [r7, #32]
 8010ba6:	60da      	str	r2, [r3, #12]
 8010ba8:	e028      	b.n	8010bfc <tcp_slowtmr+0x544>
 8010baa:	bf00      	nop
 8010bac:	2400d8f4 	.word	0x2400d8f4
 8010bb0:	000124f8 	.word	0x000124f8
 8010bb4:	10624dd3 	.word	0x10624dd3
 8010bb8:	2400d8f0 	.word	0x2400d8f0
 8010bbc:	08018eec 	.word	0x08018eec
 8010bc0:	08019124 	.word	0x08019124
 8010bc4:	08018f28 	.word	0x08018f28
 8010bc8:	08019150 	.word	0x08019150
 8010bcc:	2400d8ec 	.word	0x2400d8ec
 8010bd0:	2400d900 	.word	0x2400d900
 8010bd4:	0801917c 	.word	0x0801917c
 8010bd8:	080191ac 	.word	0x080191ac
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010bdc:	4b12      	ldr	r3, [pc, #72]	; (8010c28 <tcp_slowtmr+0x570>)
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010be2:	429a      	cmp	r2, r3
 8010be4:	d006      	beq.n	8010bf4 <tcp_slowtmr+0x53c>
 8010be6:	4b11      	ldr	r3, [pc, #68]	; (8010c2c <tcp_slowtmr+0x574>)
 8010be8:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8010bec:	4910      	ldr	r1, [pc, #64]	; (8010c30 <tcp_slowtmr+0x578>)
 8010bee:	4811      	ldr	r0, [pc, #68]	; (8010c34 <tcp_slowtmr+0x57c>)
 8010bf0:	f006 fc1e 	bl	8017430 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf6:	68db      	ldr	r3, [r3, #12]
 8010bf8:	4a0b      	ldr	r2, [pc, #44]	; (8010c28 <tcp_slowtmr+0x570>)
 8010bfa:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bfe:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8010c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c02:	68db      	ldr	r3, [r3, #12]
 8010c04:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8010c06:	69b9      	ldr	r1, [r7, #24]
 8010c08:	2001      	movs	r0, #1
 8010c0a:	f7fe fa0b 	bl	800f024 <memp_free>
 8010c0e:	e004      	b.n	8010c1a <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8010c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c12:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8010c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c16:	68db      	ldr	r3, [r3, #12]
 8010c18:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8010c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d193      	bne.n	8010b48 <tcp_slowtmr+0x490>
    }
  }
}
 8010c20:	bf00      	nop
 8010c22:	3728      	adds	r7, #40	; 0x28
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bdb0      	pop	{r4, r5, r7, pc}
 8010c28:	2400d900 	.word	0x2400d900
 8010c2c:	08018eec 	.word	0x08018eec
 8010c30:	080191d4 	.word	0x080191d4
 8010c34:	08018f28 	.word	0x08018f28

08010c38 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b082      	sub	sp, #8
 8010c3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010c3e:	4b2d      	ldr	r3, [pc, #180]	; (8010cf4 <tcp_fasttmr+0xbc>)
 8010c40:	781b      	ldrb	r3, [r3, #0]
 8010c42:	3301      	adds	r3, #1
 8010c44:	b2da      	uxtb	r2, r3
 8010c46:	4b2b      	ldr	r3, [pc, #172]	; (8010cf4 <tcp_fasttmr+0xbc>)
 8010c48:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010c4a:	4b2b      	ldr	r3, [pc, #172]	; (8010cf8 <tcp_fasttmr+0xc0>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010c50:	e048      	b.n	8010ce4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	7f5a      	ldrb	r2, [r3, #29]
 8010c56:	4b27      	ldr	r3, [pc, #156]	; (8010cf4 <tcp_fasttmr+0xbc>)
 8010c58:	781b      	ldrb	r3, [r3, #0]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d03f      	beq.n	8010cde <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010c5e:	4b25      	ldr	r3, [pc, #148]	; (8010cf4 <tcp_fasttmr+0xbc>)
 8010c60:	781a      	ldrb	r2, [r3, #0]
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	7e9b      	ldrb	r3, [r3, #26]
 8010c6a:	f003 0301 	and.w	r3, r3, #1
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d010      	beq.n	8010c94 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	7e9b      	ldrb	r3, [r3, #26]
 8010c76:	f043 0302 	orr.w	r3, r3, #2
 8010c7a:	b2da      	uxtb	r2, r3
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f003 f85f 	bl	8013d44 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	7e9b      	ldrb	r3, [r3, #26]
 8010c8a:	f023 0303 	bic.w	r3, r3, #3
 8010c8e:	b2da      	uxtb	r2, r3
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	7e9b      	ldrb	r3, [r3, #26]
 8010c98:	f003 0308 	and.w	r3, r3, #8
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d009      	beq.n	8010cb4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	7e9b      	ldrb	r3, [r3, #26]
 8010ca4:	f023 0308 	bic.w	r3, r3, #8
 8010ca8:	b2da      	uxtb	r2, r3
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010cae:	6878      	ldr	r0, [r7, #4]
 8010cb0:	f7ff fb1e 	bl	80102f0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	68db      	ldr	r3, [r3, #12]
 8010cb8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d00a      	beq.n	8010cd8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010cc2:	4b0e      	ldr	r3, [pc, #56]	; (8010cfc <tcp_fasttmr+0xc4>)
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010cc8:	6878      	ldr	r0, [r7, #4]
 8010cca:	f000 f819 	bl	8010d00 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010cce:	4b0b      	ldr	r3, [pc, #44]	; (8010cfc <tcp_fasttmr+0xc4>)
 8010cd0:	781b      	ldrb	r3, [r3, #0]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d000      	beq.n	8010cd8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010cd6:	e7b8      	b.n	8010c4a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	607b      	str	r3, [r7, #4]
 8010cdc:	e002      	b.n	8010ce4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	68db      	ldr	r3, [r3, #12]
 8010ce2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d1b3      	bne.n	8010c52 <tcp_fasttmr+0x1a>
    }
  }
}
 8010cea:	bf00      	nop
 8010cec:	3708      	adds	r7, #8
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}
 8010cf2:	bf00      	nop
 8010cf4:	2400a3fa 	.word	0x2400a3fa
 8010cf8:	2400d8f0 	.word	0x2400d8f0
 8010cfc:	2400d8ec 	.word	0x2400d8ec

08010d00 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010d00:	b590      	push	{r4, r7, lr}
 8010d02:	b085      	sub	sp, #20
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d0c:	7b5b      	ldrb	r3, [r3, #13]
 8010d0e:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d14:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2200      	movs	r2, #0
 8010d1a:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d00b      	beq.n	8010d3e <tcp_process_refused_data+0x3e>
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6918      	ldr	r0, [r3, #16]
 8010d30:	2300      	movs	r3, #0
 8010d32:	68ba      	ldr	r2, [r7, #8]
 8010d34:	6879      	ldr	r1, [r7, #4]
 8010d36:	47a0      	blx	r4
 8010d38:	4603      	mov	r3, r0
 8010d3a:	73fb      	strb	r3, [r7, #15]
 8010d3c:	e007      	b.n	8010d4e <tcp_process_refused_data+0x4e>
 8010d3e:	2300      	movs	r3, #0
 8010d40:	68ba      	ldr	r2, [r7, #8]
 8010d42:	6879      	ldr	r1, [r7, #4]
 8010d44:	2000      	movs	r0, #0
 8010d46:	f000 f88c 	bl	8010e62 <tcp_recv_null>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d12a      	bne.n	8010dac <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8010d56:	7bbb      	ldrb	r3, [r7, #14]
 8010d58:	f003 0320 	and.w	r3, r3, #32
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d033      	beq.n	8010dc8 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d64:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010d68:	d005      	beq.n	8010d76 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d6e:	3301      	adds	r3, #1
 8010d70:	b29a      	uxth	r2, r3
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d00b      	beq.n	8010d98 <tcp_process_refused_data+0x98>
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	6918      	ldr	r0, [r3, #16]
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	2200      	movs	r2, #0
 8010d8e:	6879      	ldr	r1, [r7, #4]
 8010d90:	47a0      	blx	r4
 8010d92:	4603      	mov	r3, r0
 8010d94:	73fb      	strb	r3, [r7, #15]
 8010d96:	e001      	b.n	8010d9c <tcp_process_refused_data+0x9c>
 8010d98:	2300      	movs	r3, #0
 8010d9a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010da0:	f113 0f0d 	cmn.w	r3, #13
 8010da4:	d110      	bne.n	8010dc8 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8010da6:	f06f 030c 	mvn.w	r3, #12
 8010daa:	e00e      	b.n	8010dca <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8010dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010db0:	f113 0f0d 	cmn.w	r3, #13
 8010db4:	d102      	bne.n	8010dbc <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010db6:	f06f 030c 	mvn.w	r3, #12
 8010dba:	e006      	b.n	8010dca <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	68ba      	ldr	r2, [r7, #8]
 8010dc0:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8010dc2:	f06f 0304 	mvn.w	r3, #4
 8010dc6:	e000      	b.n	8010dca <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8010dc8:	2300      	movs	r3, #0
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3714      	adds	r7, #20
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd90      	pop	{r4, r7, pc}

08010dd2 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010dd2:	b580      	push	{r7, lr}
 8010dd4:	b084      	sub	sp, #16
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010dda:	e007      	b.n	8010dec <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010de2:	6878      	ldr	r0, [r7, #4]
 8010de4:	f000 f809 	bl	8010dfa <tcp_seg_free>
    seg = next;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d1f4      	bne.n	8010ddc <tcp_segs_free+0xa>
  }
}
 8010df2:	bf00      	nop
 8010df4:	3710      	adds	r7, #16
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd80      	pop	{r7, pc}

08010dfa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010dfa:	b580      	push	{r7, lr}
 8010dfc:	b082      	sub	sp, #8
 8010dfe:	af00      	add	r7, sp, #0
 8010e00:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d00c      	beq.n	8010e22 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	685b      	ldr	r3, [r3, #4]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d004      	beq.n	8010e1a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	685b      	ldr	r3, [r3, #4]
 8010e14:	4618      	mov	r0, r3
 8010e16:	f7fe fe9d 	bl	800fb54 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010e1a:	6879      	ldr	r1, [r7, #4]
 8010e1c:	2003      	movs	r0, #3
 8010e1e:	f7fe f901 	bl	800f024 <memp_free>
  }
}
 8010e22:	bf00      	nop
 8010e24:	3708      	adds	r7, #8
 8010e26:	46bd      	mov	sp, r7
 8010e28:	bd80      	pop	{r7, pc}

08010e2a <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010e2a:	b580      	push	{r7, lr}
 8010e2c:	b084      	sub	sp, #16
 8010e2e:	af00      	add	r7, sp, #0
 8010e30:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010e32:	2003      	movs	r0, #3
 8010e34:	f7fe f880 	bl	800ef38 <memp_malloc>
 8010e38:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d101      	bne.n	8010e44 <tcp_seg_copy+0x1a>
    return NULL;
 8010e40:	2300      	movs	r3, #0
 8010e42:	e00a      	b.n	8010e5a <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010e44:	2210      	movs	r2, #16
 8010e46:	6879      	ldr	r1, [r7, #4]
 8010e48:	68f8      	ldr	r0, [r7, #12]
 8010e4a:	f006 fade 	bl	801740a <memcpy>
  pbuf_ref(cseg->p);
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	685b      	ldr	r3, [r3, #4]
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7fe ff30 	bl	800fcb8 <pbuf_ref>
  return cseg;
 8010e58:	68fb      	ldr	r3, [r7, #12]
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3710      	adds	r7, #16
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}

08010e62 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010e62:	b580      	push	{r7, lr}
 8010e64:	b084      	sub	sp, #16
 8010e66:	af00      	add	r7, sp, #0
 8010e68:	60f8      	str	r0, [r7, #12]
 8010e6a:	60b9      	str	r1, [r7, #8]
 8010e6c:	607a      	str	r2, [r7, #4]
 8010e6e:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d009      	beq.n	8010e8a <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	891b      	ldrh	r3, [r3, #8]
 8010e7a:	4619      	mov	r1, r3
 8010e7c:	68b8      	ldr	r0, [r7, #8]
 8010e7e:	f7ff fbc1 	bl	8010604 <tcp_recved>
    pbuf_free(p);
 8010e82:	6878      	ldr	r0, [r7, #4]
 8010e84:	f7fe fe66 	bl	800fb54 <pbuf_free>
 8010e88:	e008      	b.n	8010e9c <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8010e8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d104      	bne.n	8010e9c <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8010e92:	68b8      	ldr	r0, [r7, #8]
 8010e94:	f7ff fa92 	bl	80103bc <tcp_close>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	e000      	b.n	8010e9e <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8010e9c:	2300      	movs	r3, #0
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	3710      	adds	r7, #16
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}
	...

08010ea8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b086      	sub	sp, #24
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	4603      	mov	r3, r0
 8010eb0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	db01      	blt.n	8010ebe <tcp_kill_prio+0x16>
 8010eba:	79fb      	ldrb	r3, [r7, #7]
 8010ebc:	e000      	b.n	8010ec0 <tcp_kill_prio+0x18>
 8010ebe:	237f      	movs	r3, #127	; 0x7f
 8010ec0:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010eca:	4b16      	ldr	r3, [pc, #88]	; (8010f24 <tcp_kill_prio+0x7c>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	617b      	str	r3, [r7, #20]
 8010ed0:	e01a      	b.n	8010f08 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8010ed2:	697b      	ldr	r3, [r7, #20]
 8010ed4:	7d5b      	ldrb	r3, [r3, #21]
 8010ed6:	7afa      	ldrb	r2, [r7, #11]
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	d312      	bcc.n	8010f02 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010edc:	4b12      	ldr	r3, [pc, #72]	; (8010f28 <tcp_kill_prio+0x80>)
 8010ede:	681a      	ldr	r2, [r3, #0]
 8010ee0:	697b      	ldr	r3, [r7, #20]
 8010ee2:	6a1b      	ldr	r3, [r3, #32]
 8010ee4:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8010ee6:	68fa      	ldr	r2, [r7, #12]
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	d80a      	bhi.n	8010f02 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8010eec:	4b0e      	ldr	r3, [pc, #56]	; (8010f28 <tcp_kill_prio+0x80>)
 8010eee:	681a      	ldr	r2, [r3, #0]
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	6a1b      	ldr	r3, [r3, #32]
 8010ef4:	1ad3      	subs	r3, r2, r3
 8010ef6:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8010ef8:	697b      	ldr	r3, [r7, #20]
 8010efa:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	7d5b      	ldrb	r3, [r3, #21]
 8010f00:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f02:	697b      	ldr	r3, [r7, #20]
 8010f04:	68db      	ldr	r3, [r3, #12]
 8010f06:	617b      	str	r3, [r7, #20]
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d1e1      	bne.n	8010ed2 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8010f0e:	693b      	ldr	r3, [r7, #16]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d002      	beq.n	8010f1a <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010f14:	6938      	ldr	r0, [r7, #16]
 8010f16:	f7ff fb1b 	bl	8010550 <tcp_abort>
  }
}
 8010f1a:	bf00      	nop
 8010f1c:	3718      	adds	r7, #24
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	bd80      	pop	{r7, pc}
 8010f22:	bf00      	nop
 8010f24:	2400d8f0 	.word	0x2400d8f0
 8010f28:	2400d8f4 	.word	0x2400d8f4

08010f2c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b086      	sub	sp, #24
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	4603      	mov	r3, r0
 8010f34:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010f36:	79fb      	ldrb	r3, [r7, #7]
 8010f38:	2b08      	cmp	r3, #8
 8010f3a:	d009      	beq.n	8010f50 <tcp_kill_state+0x24>
 8010f3c:	79fb      	ldrb	r3, [r7, #7]
 8010f3e:	2b09      	cmp	r3, #9
 8010f40:	d006      	beq.n	8010f50 <tcp_kill_state+0x24>
 8010f42:	4b1a      	ldr	r3, [pc, #104]	; (8010fac <tcp_kill_state+0x80>)
 8010f44:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8010f48:	4919      	ldr	r1, [pc, #100]	; (8010fb0 <tcp_kill_state+0x84>)
 8010f4a:	481a      	ldr	r0, [pc, #104]	; (8010fb4 <tcp_kill_state+0x88>)
 8010f4c:	f006 fa70 	bl	8017430 <iprintf>

  inactivity = 0;
 8010f50:	2300      	movs	r3, #0
 8010f52:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010f54:	2300      	movs	r3, #0
 8010f56:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f58:	4b17      	ldr	r3, [pc, #92]	; (8010fb8 <tcp_kill_state+0x8c>)
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	617b      	str	r3, [r7, #20]
 8010f5e:	e017      	b.n	8010f90 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	7d1b      	ldrb	r3, [r3, #20]
 8010f64:	79fa      	ldrb	r2, [r7, #7]
 8010f66:	429a      	cmp	r2, r3
 8010f68:	d10f      	bne.n	8010f8a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010f6a:	4b14      	ldr	r3, [pc, #80]	; (8010fbc <tcp_kill_state+0x90>)
 8010f6c:	681a      	ldr	r2, [r3, #0]
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	6a1b      	ldr	r3, [r3, #32]
 8010f72:	1ad3      	subs	r3, r2, r3
 8010f74:	68fa      	ldr	r2, [r7, #12]
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d807      	bhi.n	8010f8a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010f7a:	4b10      	ldr	r3, [pc, #64]	; (8010fbc <tcp_kill_state+0x90>)
 8010f7c:	681a      	ldr	r2, [r3, #0]
 8010f7e:	697b      	ldr	r3, [r7, #20]
 8010f80:	6a1b      	ldr	r3, [r3, #32]
 8010f82:	1ad3      	subs	r3, r2, r3
 8010f84:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	68db      	ldr	r3, [r3, #12]
 8010f8e:	617b      	str	r3, [r7, #20]
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d1e4      	bne.n	8010f60 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010f96:	693b      	ldr	r3, [r7, #16]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d003      	beq.n	8010fa4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010f9c:	2100      	movs	r1, #0
 8010f9e:	6938      	ldr	r0, [r7, #16]
 8010fa0:	f7ff fa24 	bl	80103ec <tcp_abandon>
  }
}
 8010fa4:	bf00      	nop
 8010fa6:	3718      	adds	r7, #24
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}
 8010fac:	08018eec 	.word	0x08018eec
 8010fb0:	080191fc 	.word	0x080191fc
 8010fb4:	08018f28 	.word	0x08018f28
 8010fb8:	2400d8f0 	.word	0x2400d8f0
 8010fbc:	2400d8f4 	.word	0x2400d8f4

08010fc0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b084      	sub	sp, #16
 8010fc4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010fca:	2300      	movs	r3, #0
 8010fcc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010fce:	4b12      	ldr	r3, [pc, #72]	; (8011018 <tcp_kill_timewait+0x58>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	60fb      	str	r3, [r7, #12]
 8010fd4:	e012      	b.n	8010ffc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010fd6:	4b11      	ldr	r3, [pc, #68]	; (801101c <tcp_kill_timewait+0x5c>)
 8010fd8:	681a      	ldr	r2, [r3, #0]
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	6a1b      	ldr	r3, [r3, #32]
 8010fde:	1ad3      	subs	r3, r2, r3
 8010fe0:	687a      	ldr	r2, [r7, #4]
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d807      	bhi.n	8010ff6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010fe6:	4b0d      	ldr	r3, [pc, #52]	; (801101c <tcp_kill_timewait+0x5c>)
 8010fe8:	681a      	ldr	r2, [r3, #0]
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	6a1b      	ldr	r3, [r3, #32]
 8010fee:	1ad3      	subs	r3, r2, r3
 8010ff0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	68db      	ldr	r3, [r3, #12]
 8010ffa:	60fb      	str	r3, [r7, #12]
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d1e9      	bne.n	8010fd6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011002:	68bb      	ldr	r3, [r7, #8]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d002      	beq.n	801100e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011008:	68b8      	ldr	r0, [r7, #8]
 801100a:	f7ff faa1 	bl	8010550 <tcp_abort>
  }
}
 801100e:	bf00      	nop
 8011010:	3710      	adds	r7, #16
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}
 8011016:	bf00      	nop
 8011018:	2400d900 	.word	0x2400d900
 801101c:	2400d8f4 	.word	0x2400d8f4

08011020 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b084      	sub	sp, #16
 8011024:	af00      	add	r7, sp, #0
 8011026:	4603      	mov	r3, r0
 8011028:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801102a:	2001      	movs	r0, #1
 801102c:	f7fd ff84 	bl	800ef38 <memp_malloc>
 8011030:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d124      	bne.n	8011082 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011038:	f7ff ffc2 	bl	8010fc0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801103c:	2001      	movs	r0, #1
 801103e:	f7fd ff7b 	bl	800ef38 <memp_malloc>
 8011042:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d11b      	bne.n	8011082 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801104a:	2009      	movs	r0, #9
 801104c:	f7ff ff6e 	bl	8010f2c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011050:	2001      	movs	r0, #1
 8011052:	f7fd ff71 	bl	800ef38 <memp_malloc>
 8011056:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d111      	bne.n	8011082 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801105e:	2008      	movs	r0, #8
 8011060:	f7ff ff64 	bl	8010f2c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011064:	2001      	movs	r0, #1
 8011066:	f7fd ff67 	bl	800ef38 <memp_malloc>
 801106a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d107      	bne.n	8011082 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011072:	79fb      	ldrb	r3, [r7, #7]
 8011074:	4618      	mov	r0, r3
 8011076:	f7ff ff17 	bl	8010ea8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801107a:	2001      	movs	r0, #1
 801107c:	f7fd ff5c 	bl	800ef38 <memp_malloc>
 8011080:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d03f      	beq.n	8011108 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011088:	2298      	movs	r2, #152	; 0x98
 801108a:	2100      	movs	r1, #0
 801108c:	68f8      	ldr	r0, [r7, #12]
 801108e:	f006 f9c7 	bl	8017420 <memset>
    pcb->prio = prio;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	79fa      	ldrb	r2, [r7, #7]
 8011096:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801109e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80110a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	22ff      	movs	r2, #255	; 0xff
 80110b6:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	f44f 7206 	mov.w	r2, #536	; 0x218
 80110be:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	2206      	movs	r2, #6
 80110c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	2206      	movs	r2, #6
 80110cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110d4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	2201      	movs	r2, #1
 80110da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80110de:	4b0d      	ldr	r3, [pc, #52]	; (8011114 <tcp_alloc+0xf4>)
 80110e0:	681a      	ldr	r2, [r3, #0]
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80110e6:	4b0c      	ldr	r3, [pc, #48]	; (8011118 <tcp_alloc+0xf8>)
 80110e8:	781a      	ldrb	r2, [r3, #0]
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80110f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	4a08      	ldr	r2, [pc, #32]	; (801111c <tcp_alloc+0xfc>)
 80110fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	4a07      	ldr	r2, [pc, #28]	; (8011120 <tcp_alloc+0x100>)
 8011104:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011108:	68fb      	ldr	r3, [r7, #12]
}
 801110a:	4618      	mov	r0, r3
 801110c:	3710      	adds	r7, #16
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
 8011112:	bf00      	nop
 8011114:	2400d8f4 	.word	0x2400d8f4
 8011118:	2400a3fa 	.word	0x2400a3fa
 801111c:	08010e63 	.word	0x08010e63
 8011120:	006ddd00 	.word	0x006ddd00

08011124 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b082      	sub	sp, #8
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	7d1b      	ldrb	r3, [r3, #20]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d034      	beq.n	801119e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011138:	2b0a      	cmp	r3, #10
 801113a:	d030      	beq.n	801119e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8011140:	2b01      	cmp	r3, #1
 8011142:	d02c      	beq.n	801119e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011148:	2b00      	cmp	r3, #0
 801114a:	d007      	beq.n	801115c <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011150:	4618      	mov	r0, r3
 8011152:	f7fe fcff 	bl	800fb54 <pbuf_free>
      pcb->refused_data = NULL;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	2200      	movs	r2, #0
 801115a:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011160:	4618      	mov	r0, r3
 8011162:	f7ff fe36 	bl	8010dd2 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	2200      	movs	r2, #0
 801116a:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011172:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011178:	4618      	mov	r0, r3
 801117a:	f7ff fe2a 	bl	8010dd2 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011182:	4618      	mov	r0, r3
 8011184:	f7ff fe25 	bl	8010dd2 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2200      	movs	r2, #0
 801118c:	669a      	str	r2, [r3, #104]	; 0x68
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	2200      	movs	r2, #0
 801119a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 801119e:	bf00      	nop
 80111a0:	3708      	adds	r7, #8
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
	...

080111a8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b084      	sub	sp, #16
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
 80111b0:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	683a      	ldr	r2, [r7, #0]
 80111b8:	429a      	cmp	r2, r3
 80111ba:	d105      	bne.n	80111c8 <tcp_pcb_remove+0x20>
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	68da      	ldr	r2, [r3, #12]
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	601a      	str	r2, [r3, #0]
 80111c6:	e013      	b.n	80111f0 <tcp_pcb_remove+0x48>
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	60fb      	str	r3, [r7, #12]
 80111ce:	e00c      	b.n	80111ea <tcp_pcb_remove+0x42>
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	68db      	ldr	r3, [r3, #12]
 80111d4:	683a      	ldr	r2, [r7, #0]
 80111d6:	429a      	cmp	r2, r3
 80111d8:	d104      	bne.n	80111e4 <tcp_pcb_remove+0x3c>
 80111da:	683b      	ldr	r3, [r7, #0]
 80111dc:	68da      	ldr	r2, [r3, #12]
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	60da      	str	r2, [r3, #12]
 80111e2:	e005      	b.n	80111f0 <tcp_pcb_remove+0x48>
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	68db      	ldr	r3, [r3, #12]
 80111e8:	60fb      	str	r3, [r7, #12]
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d1ef      	bne.n	80111d0 <tcp_pcb_remove+0x28>
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	2200      	movs	r2, #0
 80111f4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80111f6:	6838      	ldr	r0, [r7, #0]
 80111f8:	f7ff ff94 	bl	8011124 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	7d1b      	ldrb	r3, [r3, #20]
 8011200:	2b0a      	cmp	r3, #10
 8011202:	d013      	beq.n	801122c <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8011204:	683b      	ldr	r3, [r7, #0]
 8011206:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8011208:	2b01      	cmp	r3, #1
 801120a:	d00f      	beq.n	801122c <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	7e9b      	ldrb	r3, [r3, #26]
 8011210:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8011214:	2b00      	cmp	r3, #0
 8011216:	d009      	beq.n	801122c <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	7e9b      	ldrb	r3, [r3, #26]
 801121c:	f043 0302 	orr.w	r3, r3, #2
 8011220:	b2da      	uxtb	r2, r3
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8011226:	6838      	ldr	r0, [r7, #0]
 8011228:	f002 fd8c 	bl	8013d44 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	7d1b      	ldrb	r3, [r3, #20]
 8011230:	2b01      	cmp	r3, #1
 8011232:	d020      	beq.n	8011276 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011238:	2b00      	cmp	r3, #0
 801123a:	d006      	beq.n	801124a <tcp_pcb_remove+0xa2>
 801123c:	4b13      	ldr	r3, [pc, #76]	; (801128c <tcp_pcb_remove+0xe4>)
 801123e:	f240 7253 	movw	r2, #1875	; 0x753
 8011242:	4913      	ldr	r1, [pc, #76]	; (8011290 <tcp_pcb_remove+0xe8>)
 8011244:	4813      	ldr	r0, [pc, #76]	; (8011294 <tcp_pcb_remove+0xec>)
 8011246:	f006 f8f3 	bl	8017430 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801124e:	2b00      	cmp	r3, #0
 8011250:	d006      	beq.n	8011260 <tcp_pcb_remove+0xb8>
 8011252:	4b0e      	ldr	r3, [pc, #56]	; (801128c <tcp_pcb_remove+0xe4>)
 8011254:	f240 7254 	movw	r2, #1876	; 0x754
 8011258:	490f      	ldr	r1, [pc, #60]	; (8011298 <tcp_pcb_remove+0xf0>)
 801125a:	480e      	ldr	r0, [pc, #56]	; (8011294 <tcp_pcb_remove+0xec>)
 801125c:	f006 f8e8 	bl	8017430 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011264:	2b00      	cmp	r3, #0
 8011266:	d006      	beq.n	8011276 <tcp_pcb_remove+0xce>
 8011268:	4b08      	ldr	r3, [pc, #32]	; (801128c <tcp_pcb_remove+0xe4>)
 801126a:	f240 7256 	movw	r2, #1878	; 0x756
 801126e:	490b      	ldr	r1, [pc, #44]	; (801129c <tcp_pcb_remove+0xf4>)
 8011270:	4808      	ldr	r0, [pc, #32]	; (8011294 <tcp_pcb_remove+0xec>)
 8011272:	f006 f8dd 	bl	8017430 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	2200      	movs	r2, #0
 801127a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	2200      	movs	r2, #0
 8011280:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011282:	bf00      	nop
 8011284:	3710      	adds	r7, #16
 8011286:	46bd      	mov	sp, r7
 8011288:	bd80      	pop	{r7, pc}
 801128a:	bf00      	nop
 801128c:	08018eec 	.word	0x08018eec
 8011290:	080192a4 	.word	0x080192a4
 8011294:	08018f28 	.word	0x08018f28
 8011298:	080192bc 	.word	0x080192bc
 801129c:	080192d8 	.word	0x080192d8

080112a0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80112a0:	b480      	push	{r7}
 80112a2:	b083      	sub	sp, #12
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80112a8:	4b07      	ldr	r3, [pc, #28]	; (80112c8 <tcp_next_iss+0x28>)
 80112aa:	681a      	ldr	r2, [r3, #0]
 80112ac:	4b07      	ldr	r3, [pc, #28]	; (80112cc <tcp_next_iss+0x2c>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	4413      	add	r3, r2
 80112b2:	4a05      	ldr	r2, [pc, #20]	; (80112c8 <tcp_next_iss+0x28>)
 80112b4:	6013      	str	r3, [r2, #0]
  return iss;
 80112b6:	4b04      	ldr	r3, [pc, #16]	; (80112c8 <tcp_next_iss+0x28>)
 80112b8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80112ba:	4618      	mov	r0, r3
 80112bc:	370c      	adds	r7, #12
 80112be:	46bd      	mov	sp, r7
 80112c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c4:	4770      	bx	lr
 80112c6:	bf00      	nop
 80112c8:	24000028 	.word	0x24000028
 80112cc:	2400d8f4 	.word	0x2400d8f4

080112d0 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b084      	sub	sp, #16
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	4603      	mov	r3, r0
 80112d8:	6039      	str	r1, [r7, #0]
 80112da:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 80112dc:	6838      	ldr	r0, [r7, #0]
 80112de:	f004 fdd1 	bl	8015e84 <ip4_route>
 80112e2:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d101      	bne.n	80112ee <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 80112ea:	88fb      	ldrh	r3, [r7, #6]
 80112ec:	e010      	b.n	8011310 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80112f2:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80112f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d008      	beq.n	801130e <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80112fc:	897b      	ldrh	r3, [r7, #10]
 80112fe:	3b28      	subs	r3, #40	; 0x28
 8011300:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011302:	893a      	ldrh	r2, [r7, #8]
 8011304:	88fb      	ldrh	r3, [r7, #6]
 8011306:	4293      	cmp	r3, r2
 8011308:	bf28      	it	cs
 801130a:	4613      	movcs	r3, r2
 801130c:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 801130e:	88fb      	ldrh	r3, [r7, #6]
}
 8011310:	4618      	mov	r0, r3
 8011312:	3710      	adds	r7, #16
 8011314:	46bd      	mov	sp, r7
 8011316:	bd80      	pop	{r7, pc}

08011318 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b084      	sub	sp, #16
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
 8011320:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011322:	683b      	ldr	r3, [r7, #0]
 8011324:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011326:	e011      	b.n	801134c <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	681a      	ldr	r2, [r3, #0]
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	429a      	cmp	r2, r3
 8011332:	d108      	bne.n	8011346 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	68db      	ldr	r3, [r3, #12]
 8011338:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801133a:	68f8      	ldr	r0, [r7, #12]
 801133c:	f7ff f908 	bl	8010550 <tcp_abort>
      pcb = next;
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	60fb      	str	r3, [r7, #12]
 8011344:	e002      	b.n	801134c <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	68db      	ldr	r3, [r3, #12]
 801134a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d1ea      	bne.n	8011328 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8011352:	bf00      	nop
 8011354:	3710      	adds	r7, #16
 8011356:	46bd      	mov	sp, r7
 8011358:	bd80      	pop	{r7, pc}
	...

0801135c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b084      	sub	sp, #16
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
 8011364:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d02c      	beq.n	80113c6 <tcp_netif_ip_addr_changed+0x6a>
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d028      	beq.n	80113c6 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011374:	4b16      	ldr	r3, [pc, #88]	; (80113d0 <tcp_netif_ip_addr_changed+0x74>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	4619      	mov	r1, r3
 801137a:	6878      	ldr	r0, [r7, #4]
 801137c:	f7ff ffcc 	bl	8011318 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011380:	4b14      	ldr	r3, [pc, #80]	; (80113d4 <tcp_netif_ip_addr_changed+0x78>)
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	4619      	mov	r1, r3
 8011386:	6878      	ldr	r0, [r7, #4]
 8011388:	f7ff ffc6 	bl	8011318 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d019      	beq.n	80113c6 <tcp_netif_ip_addr_changed+0x6a>
 8011392:	683b      	ldr	r3, [r7, #0]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d015      	beq.n	80113c6 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801139a:	4b0f      	ldr	r3, [pc, #60]	; (80113d8 <tcp_netif_ip_addr_changed+0x7c>)
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	60fb      	str	r3, [r7, #12]
 80113a0:	e00e      	b.n	80113c0 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	68db      	ldr	r3, [r3, #12]
 80113a6:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	681a      	ldr	r2, [r3, #0]
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d103      	bne.n	80113bc <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	681a      	ldr	r2, [r3, #0]
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80113bc:	68bb      	ldr	r3, [r7, #8]
 80113be:	60fb      	str	r3, [r7, #12]
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d1ed      	bne.n	80113a2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80113c6:	bf00      	nop
 80113c8:	3710      	adds	r7, #16
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bd80      	pop	{r7, pc}
 80113ce:	bf00      	nop
 80113d0:	2400d8f0 	.word	0x2400d8f0
 80113d4:	2400d8fc 	.word	0x2400d8fc
 80113d8:	2400d8f8 	.word	0x2400d8f8

080113dc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80113dc:	b590      	push	{r4, r7, lr}
 80113de:	b08b      	sub	sp, #44	; 0x2c
 80113e0:	af02      	add	r7, sp, #8
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	685b      	ldr	r3, [r3, #4]
 80113ea:	4a82      	ldr	r2, [pc, #520]	; (80115f4 <tcp_input+0x218>)
 80113ec:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	895b      	ldrh	r3, [r3, #10]
 80113f2:	2b13      	cmp	r3, #19
 80113f4:	f240 838a 	bls.w	8011b0c <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80113f8:	4b7f      	ldr	r3, [pc, #508]	; (80115f8 <tcp_input+0x21c>)
 80113fa:	695a      	ldr	r2, [r3, #20]
 80113fc:	4b7e      	ldr	r3, [pc, #504]	; (80115f8 <tcp_input+0x21c>)
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	4619      	mov	r1, r3
 8011402:	4610      	mov	r0, r2
 8011404:	f004 ffb8 	bl	8016378 <ip4_addr_isbroadcast_u32>
 8011408:	4603      	mov	r3, r0
 801140a:	2b00      	cmp	r3, #0
 801140c:	f040 8380 	bne.w	8011b10 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011410:	4b79      	ldr	r3, [pc, #484]	; (80115f8 <tcp_input+0x21c>)
 8011412:	695b      	ldr	r3, [r3, #20]
 8011414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011418:	2be0      	cmp	r3, #224	; 0xe0
 801141a:	f000 8379 	beq.w	8011b10 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 801141e:	4b75      	ldr	r3, [pc, #468]	; (80115f4 <tcp_input+0x218>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	899b      	ldrh	r3, [r3, #12]
 8011424:	b29b      	uxth	r3, r3
 8011426:	4618      	mov	r0, r3
 8011428:	f7fd f8c0 	bl	800e5ac <lwip_htons>
 801142c:	4603      	mov	r3, r0
 801142e:	0b1b      	lsrs	r3, r3, #12
 8011430:	b29b      	uxth	r3, r3
 8011432:	b2db      	uxtb	r3, r3
 8011434:	009b      	lsls	r3, r3, #2
 8011436:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011438:	7cbb      	ldrb	r3, [r7, #18]
 801143a:	2b13      	cmp	r3, #19
 801143c:	f240 8368 	bls.w	8011b10 <tcp_input+0x734>
 8011440:	7cbb      	ldrb	r3, [r7, #18]
 8011442:	b29a      	uxth	r2, r3
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	891b      	ldrh	r3, [r3, #8]
 8011448:	429a      	cmp	r2, r3
 801144a:	f200 8361 	bhi.w	8011b10 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 801144e:	7cbb      	ldrb	r3, [r7, #18]
 8011450:	b29b      	uxth	r3, r3
 8011452:	3b14      	subs	r3, #20
 8011454:	b29a      	uxth	r2, r3
 8011456:	4b69      	ldr	r3, [pc, #420]	; (80115fc <tcp_input+0x220>)
 8011458:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801145a:	4b69      	ldr	r3, [pc, #420]	; (8011600 <tcp_input+0x224>)
 801145c:	2200      	movs	r2, #0
 801145e:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	895a      	ldrh	r2, [r3, #10]
 8011464:	7cbb      	ldrb	r3, [r7, #18]
 8011466:	b29b      	uxth	r3, r3
 8011468:	429a      	cmp	r2, r3
 801146a:	d30d      	bcc.n	8011488 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801146c:	4b63      	ldr	r3, [pc, #396]	; (80115fc <tcp_input+0x220>)
 801146e:	881a      	ldrh	r2, [r3, #0]
 8011470:	4b64      	ldr	r3, [pc, #400]	; (8011604 <tcp_input+0x228>)
 8011472:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8011474:	7cbb      	ldrb	r3, [r7, #18]
 8011476:	b29b      	uxth	r3, r3
 8011478:	425b      	negs	r3, r3
 801147a:	b29b      	uxth	r3, r3
 801147c:	b21b      	sxth	r3, r3
 801147e:	4619      	mov	r1, r3
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f7fe fb43 	bl	800fb0c <pbuf_header>
 8011486:	e055      	b.n	8011534 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d105      	bne.n	801149c <tcp_input+0xc0>
 8011490:	4b5d      	ldr	r3, [pc, #372]	; (8011608 <tcp_input+0x22c>)
 8011492:	22b2      	movs	r2, #178	; 0xb2
 8011494:	495d      	ldr	r1, [pc, #372]	; (801160c <tcp_input+0x230>)
 8011496:	485e      	ldr	r0, [pc, #376]	; (8011610 <tcp_input+0x234>)
 8011498:	f005 ffca 	bl	8017430 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 801149c:	f06f 0113 	mvn.w	r1, #19
 80114a0:	6878      	ldr	r0, [r7, #4]
 80114a2:	f7fe fb33 	bl	800fb0c <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	895a      	ldrh	r2, [r3, #10]
 80114aa:	4b56      	ldr	r3, [pc, #344]	; (8011604 <tcp_input+0x228>)
 80114ac:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 80114ae:	4b53      	ldr	r3, [pc, #332]	; (80115fc <tcp_input+0x220>)
 80114b0:	881a      	ldrh	r2, [r3, #0]
 80114b2:	4b54      	ldr	r3, [pc, #336]	; (8011604 <tcp_input+0x228>)
 80114b4:	881b      	ldrh	r3, [r3, #0]
 80114b6:	1ad3      	subs	r3, r2, r3
 80114b8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80114ba:	4b52      	ldr	r3, [pc, #328]	; (8011604 <tcp_input+0x228>)
 80114bc:	881b      	ldrh	r3, [r3, #0]
 80114be:	425b      	negs	r3, r3
 80114c0:	b29b      	uxth	r3, r3
 80114c2:	b21b      	sxth	r3, r3
 80114c4:	4619      	mov	r1, r3
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f7fe fb20 	bl	800fb0c <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	895b      	ldrh	r3, [r3, #10]
 80114d2:	8a3a      	ldrh	r2, [r7, #16]
 80114d4:	429a      	cmp	r2, r3
 80114d6:	f200 831d 	bhi.w	8011b14 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	685b      	ldr	r3, [r3, #4]
 80114e0:	4a47      	ldr	r2, [pc, #284]	; (8011600 <tcp_input+0x224>)
 80114e2:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	681a      	ldr	r2, [r3, #0]
 80114e8:	8a3b      	ldrh	r3, [r7, #16]
 80114ea:	425b      	negs	r3, r3
 80114ec:	b29b      	uxth	r3, r3
 80114ee:	b21b      	sxth	r3, r3
 80114f0:	4619      	mov	r1, r3
 80114f2:	4610      	mov	r0, r2
 80114f4:	f7fe fb0a 	bl	800fb0c <pbuf_header>
    p->tot_len -= opt2len;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	891a      	ldrh	r2, [r3, #8]
 80114fc:	8a3b      	ldrh	r3, [r7, #16]
 80114fe:	1ad3      	subs	r3, r2, r3
 8011500:	b29a      	uxth	r2, r3
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	895b      	ldrh	r3, [r3, #10]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d005      	beq.n	801151a <tcp_input+0x13e>
 801150e:	4b3e      	ldr	r3, [pc, #248]	; (8011608 <tcp_input+0x22c>)
 8011510:	22cf      	movs	r2, #207	; 0xcf
 8011512:	4940      	ldr	r1, [pc, #256]	; (8011614 <tcp_input+0x238>)
 8011514:	483e      	ldr	r0, [pc, #248]	; (8011610 <tcp_input+0x234>)
 8011516:	f005 ff8b 	bl	8017430 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	891a      	ldrh	r2, [r3, #8]
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	891b      	ldrh	r3, [r3, #8]
 8011524:	429a      	cmp	r2, r3
 8011526:	d005      	beq.n	8011534 <tcp_input+0x158>
 8011528:	4b37      	ldr	r3, [pc, #220]	; (8011608 <tcp_input+0x22c>)
 801152a:	22d0      	movs	r2, #208	; 0xd0
 801152c:	493a      	ldr	r1, [pc, #232]	; (8011618 <tcp_input+0x23c>)
 801152e:	4838      	ldr	r0, [pc, #224]	; (8011610 <tcp_input+0x234>)
 8011530:	f005 ff7e 	bl	8017430 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011534:	4b2f      	ldr	r3, [pc, #188]	; (80115f4 <tcp_input+0x218>)
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	881b      	ldrh	r3, [r3, #0]
 801153a:	b29a      	uxth	r2, r3
 801153c:	4b2d      	ldr	r3, [pc, #180]	; (80115f4 <tcp_input+0x218>)
 801153e:	681c      	ldr	r4, [r3, #0]
 8011540:	4610      	mov	r0, r2
 8011542:	f7fd f833 	bl	800e5ac <lwip_htons>
 8011546:	4603      	mov	r3, r0
 8011548:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801154a:	4b2a      	ldr	r3, [pc, #168]	; (80115f4 <tcp_input+0x218>)
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	885b      	ldrh	r3, [r3, #2]
 8011550:	b29a      	uxth	r2, r3
 8011552:	4b28      	ldr	r3, [pc, #160]	; (80115f4 <tcp_input+0x218>)
 8011554:	681c      	ldr	r4, [r3, #0]
 8011556:	4610      	mov	r0, r2
 8011558:	f7fd f828 	bl	800e5ac <lwip_htons>
 801155c:	4603      	mov	r3, r0
 801155e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011560:	4b24      	ldr	r3, [pc, #144]	; (80115f4 <tcp_input+0x218>)
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	685a      	ldr	r2, [r3, #4]
 8011566:	4b23      	ldr	r3, [pc, #140]	; (80115f4 <tcp_input+0x218>)
 8011568:	681c      	ldr	r4, [r3, #0]
 801156a:	4610      	mov	r0, r2
 801156c:	f7fd f82c 	bl	800e5c8 <lwip_htonl>
 8011570:	4603      	mov	r3, r0
 8011572:	6063      	str	r3, [r4, #4]
 8011574:	6863      	ldr	r3, [r4, #4]
 8011576:	4a29      	ldr	r2, [pc, #164]	; (801161c <tcp_input+0x240>)
 8011578:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801157a:	4b1e      	ldr	r3, [pc, #120]	; (80115f4 <tcp_input+0x218>)
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	689a      	ldr	r2, [r3, #8]
 8011580:	4b1c      	ldr	r3, [pc, #112]	; (80115f4 <tcp_input+0x218>)
 8011582:	681c      	ldr	r4, [r3, #0]
 8011584:	4610      	mov	r0, r2
 8011586:	f7fd f81f 	bl	800e5c8 <lwip_htonl>
 801158a:	4603      	mov	r3, r0
 801158c:	60a3      	str	r3, [r4, #8]
 801158e:	68a3      	ldr	r3, [r4, #8]
 8011590:	4a23      	ldr	r2, [pc, #140]	; (8011620 <tcp_input+0x244>)
 8011592:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011594:	4b17      	ldr	r3, [pc, #92]	; (80115f4 <tcp_input+0x218>)
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	89db      	ldrh	r3, [r3, #14]
 801159a:	b29a      	uxth	r2, r3
 801159c:	4b15      	ldr	r3, [pc, #84]	; (80115f4 <tcp_input+0x218>)
 801159e:	681c      	ldr	r4, [r3, #0]
 80115a0:	4610      	mov	r0, r2
 80115a2:	f7fd f803 	bl	800e5ac <lwip_htons>
 80115a6:	4603      	mov	r3, r0
 80115a8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80115aa:	4b12      	ldr	r3, [pc, #72]	; (80115f4 <tcp_input+0x218>)
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	899b      	ldrh	r3, [r3, #12]
 80115b0:	b29b      	uxth	r3, r3
 80115b2:	4618      	mov	r0, r3
 80115b4:	f7fc fffa 	bl	800e5ac <lwip_htons>
 80115b8:	4603      	mov	r3, r0
 80115ba:	b2db      	uxtb	r3, r3
 80115bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80115c0:	b2da      	uxtb	r2, r3
 80115c2:	4b18      	ldr	r3, [pc, #96]	; (8011624 <tcp_input+0x248>)
 80115c4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	891a      	ldrh	r2, [r3, #8]
 80115ca:	4b16      	ldr	r3, [pc, #88]	; (8011624 <tcp_input+0x248>)
 80115cc:	781b      	ldrb	r3, [r3, #0]
 80115ce:	f003 0303 	and.w	r3, r3, #3
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	bf14      	ite	ne
 80115d6:	2301      	movne	r3, #1
 80115d8:	2300      	moveq	r3, #0
 80115da:	b2db      	uxtb	r3, r3
 80115dc:	b29b      	uxth	r3, r3
 80115de:	4413      	add	r3, r2
 80115e0:	b29a      	uxth	r2, r3
 80115e2:	4b11      	ldr	r3, [pc, #68]	; (8011628 <tcp_input+0x24c>)
 80115e4:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80115e6:	2300      	movs	r3, #0
 80115e8:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80115ea:	4b10      	ldr	r3, [pc, #64]	; (801162c <tcp_input+0x250>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	61fb      	str	r3, [r7, #28]
 80115f0:	e082      	b.n	80116f8 <tcp_input+0x31c>
 80115f2:	bf00      	nop
 80115f4:	2400a40c 	.word	0x2400a40c
 80115f8:	2400a834 	.word	0x2400a834
 80115fc:	2400a410 	.word	0x2400a410
 8011600:	2400a414 	.word	0x2400a414
 8011604:	2400a412 	.word	0x2400a412
 8011608:	080192f0 	.word	0x080192f0
 801160c:	08019324 	.word	0x08019324
 8011610:	08019334 	.word	0x08019334
 8011614:	0801935c 	.word	0x0801935c
 8011618:	08019368 	.word	0x08019368
 801161c:	2400a41c 	.word	0x2400a41c
 8011620:	2400a420 	.word	0x2400a420
 8011624:	2400a428 	.word	0x2400a428
 8011628:	2400a426 	.word	0x2400a426
 801162c:	2400d8f0 	.word	0x2400d8f0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011630:	69fb      	ldr	r3, [r7, #28]
 8011632:	7d1b      	ldrb	r3, [r3, #20]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d105      	bne.n	8011644 <tcp_input+0x268>
 8011638:	4b8f      	ldr	r3, [pc, #572]	; (8011878 <tcp_input+0x49c>)
 801163a:	22e2      	movs	r2, #226	; 0xe2
 801163c:	498f      	ldr	r1, [pc, #572]	; (801187c <tcp_input+0x4a0>)
 801163e:	4890      	ldr	r0, [pc, #576]	; (8011880 <tcp_input+0x4a4>)
 8011640:	f005 fef6 	bl	8017430 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011644:	69fb      	ldr	r3, [r7, #28]
 8011646:	7d1b      	ldrb	r3, [r3, #20]
 8011648:	2b0a      	cmp	r3, #10
 801164a:	d105      	bne.n	8011658 <tcp_input+0x27c>
 801164c:	4b8a      	ldr	r3, [pc, #552]	; (8011878 <tcp_input+0x49c>)
 801164e:	22e3      	movs	r2, #227	; 0xe3
 8011650:	498c      	ldr	r1, [pc, #560]	; (8011884 <tcp_input+0x4a8>)
 8011652:	488b      	ldr	r0, [pc, #556]	; (8011880 <tcp_input+0x4a4>)
 8011654:	f005 feec 	bl	8017430 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011658:	69fb      	ldr	r3, [r7, #28]
 801165a:	7d1b      	ldrb	r3, [r3, #20]
 801165c:	2b01      	cmp	r3, #1
 801165e:	d105      	bne.n	801166c <tcp_input+0x290>
 8011660:	4b85      	ldr	r3, [pc, #532]	; (8011878 <tcp_input+0x49c>)
 8011662:	22e4      	movs	r2, #228	; 0xe4
 8011664:	4988      	ldr	r1, [pc, #544]	; (8011888 <tcp_input+0x4ac>)
 8011666:	4886      	ldr	r0, [pc, #536]	; (8011880 <tcp_input+0x4a4>)
 8011668:	f005 fee2 	bl	8017430 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 801166c:	69fb      	ldr	r3, [r7, #28]
 801166e:	8b1a      	ldrh	r2, [r3, #24]
 8011670:	4b86      	ldr	r3, [pc, #536]	; (801188c <tcp_input+0x4b0>)
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	881b      	ldrh	r3, [r3, #0]
 8011676:	b29b      	uxth	r3, r3
 8011678:	429a      	cmp	r2, r3
 801167a:	d138      	bne.n	80116ee <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 801167c:	69fb      	ldr	r3, [r7, #28]
 801167e:	8ada      	ldrh	r2, [r3, #22]
 8011680:	4b82      	ldr	r3, [pc, #520]	; (801188c <tcp_input+0x4b0>)
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	885b      	ldrh	r3, [r3, #2]
 8011686:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011688:	429a      	cmp	r2, r3
 801168a:	d130      	bne.n	80116ee <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801168c:	69fb      	ldr	r3, [r7, #28]
 801168e:	685a      	ldr	r2, [r3, #4]
 8011690:	4b7f      	ldr	r3, [pc, #508]	; (8011890 <tcp_input+0x4b4>)
 8011692:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011694:	429a      	cmp	r2, r3
 8011696:	d12a      	bne.n	80116ee <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011698:	69fb      	ldr	r3, [r7, #28]
 801169a:	681a      	ldr	r2, [r3, #0]
 801169c:	4b7c      	ldr	r3, [pc, #496]	; (8011890 <tcp_input+0x4b4>)
 801169e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80116a0:	429a      	cmp	r2, r3
 80116a2:	d124      	bne.n	80116ee <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80116a4:	69fb      	ldr	r3, [r7, #28]
 80116a6:	68db      	ldr	r3, [r3, #12]
 80116a8:	69fa      	ldr	r2, [r7, #28]
 80116aa:	429a      	cmp	r2, r3
 80116ac:	d105      	bne.n	80116ba <tcp_input+0x2de>
 80116ae:	4b72      	ldr	r3, [pc, #456]	; (8011878 <tcp_input+0x49c>)
 80116b0:	22ec      	movs	r2, #236	; 0xec
 80116b2:	4978      	ldr	r1, [pc, #480]	; (8011894 <tcp_input+0x4b8>)
 80116b4:	4872      	ldr	r0, [pc, #456]	; (8011880 <tcp_input+0x4a4>)
 80116b6:	f005 febb 	bl	8017430 <iprintf>
      if (prev != NULL) {
 80116ba:	69bb      	ldr	r3, [r7, #24]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d00a      	beq.n	80116d6 <tcp_input+0x2fa>
        prev->next = pcb->next;
 80116c0:	69fb      	ldr	r3, [r7, #28]
 80116c2:	68da      	ldr	r2, [r3, #12]
 80116c4:	69bb      	ldr	r3, [r7, #24]
 80116c6:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80116c8:	4b73      	ldr	r3, [pc, #460]	; (8011898 <tcp_input+0x4bc>)
 80116ca:	681a      	ldr	r2, [r3, #0]
 80116cc:	69fb      	ldr	r3, [r7, #28]
 80116ce:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80116d0:	4a71      	ldr	r2, [pc, #452]	; (8011898 <tcp_input+0x4bc>)
 80116d2:	69fb      	ldr	r3, [r7, #28]
 80116d4:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80116d6:	69fb      	ldr	r3, [r7, #28]
 80116d8:	68db      	ldr	r3, [r3, #12]
 80116da:	69fa      	ldr	r2, [r7, #28]
 80116dc:	429a      	cmp	r2, r3
 80116de:	d10f      	bne.n	8011700 <tcp_input+0x324>
 80116e0:	4b65      	ldr	r3, [pc, #404]	; (8011878 <tcp_input+0x49c>)
 80116e2:	22f4      	movs	r2, #244	; 0xf4
 80116e4:	496d      	ldr	r1, [pc, #436]	; (801189c <tcp_input+0x4c0>)
 80116e6:	4866      	ldr	r0, [pc, #408]	; (8011880 <tcp_input+0x4a4>)
 80116e8:	f005 fea2 	bl	8017430 <iprintf>
      break;
 80116ec:	e008      	b.n	8011700 <tcp_input+0x324>
    }
    prev = pcb;
 80116ee:	69fb      	ldr	r3, [r7, #28]
 80116f0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80116f2:	69fb      	ldr	r3, [r7, #28]
 80116f4:	68db      	ldr	r3, [r3, #12]
 80116f6:	61fb      	str	r3, [r7, #28]
 80116f8:	69fb      	ldr	r3, [r7, #28]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d198      	bne.n	8011630 <tcp_input+0x254>
 80116fe:	e000      	b.n	8011702 <tcp_input+0x326>
      break;
 8011700:	bf00      	nop
  }

  if (pcb == NULL) {
 8011702:	69fb      	ldr	r3, [r7, #28]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d173      	bne.n	80117f0 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011708:	4b65      	ldr	r3, [pc, #404]	; (80118a0 <tcp_input+0x4c4>)
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	61fb      	str	r3, [r7, #28]
 801170e:	e02f      	b.n	8011770 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011710:	69fb      	ldr	r3, [r7, #28]
 8011712:	7d1b      	ldrb	r3, [r3, #20]
 8011714:	2b0a      	cmp	r3, #10
 8011716:	d005      	beq.n	8011724 <tcp_input+0x348>
 8011718:	4b57      	ldr	r3, [pc, #348]	; (8011878 <tcp_input+0x49c>)
 801171a:	22fe      	movs	r2, #254	; 0xfe
 801171c:	4961      	ldr	r1, [pc, #388]	; (80118a4 <tcp_input+0x4c8>)
 801171e:	4858      	ldr	r0, [pc, #352]	; (8011880 <tcp_input+0x4a4>)
 8011720:	f005 fe86 	bl	8017430 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8011724:	69fb      	ldr	r3, [r7, #28]
 8011726:	8b1a      	ldrh	r2, [r3, #24]
 8011728:	4b58      	ldr	r3, [pc, #352]	; (801188c <tcp_input+0x4b0>)
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	881b      	ldrh	r3, [r3, #0]
 801172e:	b29b      	uxth	r3, r3
 8011730:	429a      	cmp	r2, r3
 8011732:	d11a      	bne.n	801176a <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 8011734:	69fb      	ldr	r3, [r7, #28]
 8011736:	8ada      	ldrh	r2, [r3, #22]
 8011738:	4b54      	ldr	r3, [pc, #336]	; (801188c <tcp_input+0x4b0>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	885b      	ldrh	r3, [r3, #2]
 801173e:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011740:	429a      	cmp	r2, r3
 8011742:	d112      	bne.n	801176a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011744:	69fb      	ldr	r3, [r7, #28]
 8011746:	685a      	ldr	r2, [r3, #4]
 8011748:	4b51      	ldr	r3, [pc, #324]	; (8011890 <tcp_input+0x4b4>)
 801174a:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801174c:	429a      	cmp	r2, r3
 801174e:	d10c      	bne.n	801176a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011750:	69fb      	ldr	r3, [r7, #28]
 8011752:	681a      	ldr	r2, [r3, #0]
 8011754:	4b4e      	ldr	r3, [pc, #312]	; (8011890 <tcp_input+0x4b4>)
 8011756:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011758:	429a      	cmp	r2, r3
 801175a:	d106      	bne.n	801176a <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 801175c:	69f8      	ldr	r0, [r7, #28]
 801175e:	f000 fb15 	bl	8011d8c <tcp_timewait_input>
        pbuf_free(p);
 8011762:	6878      	ldr	r0, [r7, #4]
 8011764:	f7fe f9f6 	bl	800fb54 <pbuf_free>
        return;
 8011768:	e1da      	b.n	8011b20 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801176a:	69fb      	ldr	r3, [r7, #28]
 801176c:	68db      	ldr	r3, [r3, #12]
 801176e:	61fb      	str	r3, [r7, #28]
 8011770:	69fb      	ldr	r3, [r7, #28]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d1cc      	bne.n	8011710 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011776:	2300      	movs	r3, #0
 8011778:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801177a:	4b4b      	ldr	r3, [pc, #300]	; (80118a8 <tcp_input+0x4cc>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	617b      	str	r3, [r7, #20]
 8011780:	e019      	b.n	80117b6 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	8ada      	ldrh	r2, [r3, #22]
 8011786:	4b41      	ldr	r3, [pc, #260]	; (801188c <tcp_input+0x4b0>)
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	885b      	ldrh	r3, [r3, #2]
 801178c:	b29b      	uxth	r3, r3
 801178e:	429a      	cmp	r2, r3
 8011790:	d10c      	bne.n	80117ac <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	681a      	ldr	r2, [r3, #0]
 8011796:	4b3e      	ldr	r3, [pc, #248]	; (8011890 <tcp_input+0x4b4>)
 8011798:	695b      	ldr	r3, [r3, #20]
 801179a:	429a      	cmp	r2, r3
 801179c:	d00f      	beq.n	80117be <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801179e:	697b      	ldr	r3, [r7, #20]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d00d      	beq.n	80117c0 <tcp_input+0x3e4>
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d009      	beq.n	80117c0 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80117ac:	697b      	ldr	r3, [r7, #20]
 80117ae:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80117b0:	697b      	ldr	r3, [r7, #20]
 80117b2:	68db      	ldr	r3, [r3, #12]
 80117b4:	617b      	str	r3, [r7, #20]
 80117b6:	697b      	ldr	r3, [r7, #20]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d1e2      	bne.n	8011782 <tcp_input+0x3a6>
 80117bc:	e000      	b.n	80117c0 <tcp_input+0x3e4>
            break;
 80117be:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80117c0:	697b      	ldr	r3, [r7, #20]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d014      	beq.n	80117f0 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80117c6:	69bb      	ldr	r3, [r7, #24]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d00a      	beq.n	80117e2 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80117cc:	697b      	ldr	r3, [r7, #20]
 80117ce:	68da      	ldr	r2, [r3, #12]
 80117d0:	69bb      	ldr	r3, [r7, #24]
 80117d2:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80117d4:	4b34      	ldr	r3, [pc, #208]	; (80118a8 <tcp_input+0x4cc>)
 80117d6:	681a      	ldr	r2, [r3, #0]
 80117d8:	697b      	ldr	r3, [r7, #20]
 80117da:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80117dc:	4a32      	ldr	r2, [pc, #200]	; (80118a8 <tcp_input+0x4cc>)
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 80117e2:	6978      	ldr	r0, [r7, #20]
 80117e4:	f000 f9f0 	bl	8011bc8 <tcp_listen_input>
      pbuf_free(p);
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	f7fe f9b3 	bl	800fb54 <pbuf_free>
      return;
 80117ee:	e197      	b.n	8011b20 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 80117f0:	69fb      	ldr	r3, [r7, #28]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	f000 8164 	beq.w	8011ac0 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80117f8:	4b2c      	ldr	r3, [pc, #176]	; (80118ac <tcp_input+0x4d0>)
 80117fa:	2200      	movs	r2, #0
 80117fc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	891a      	ldrh	r2, [r3, #8]
 8011802:	4b2a      	ldr	r3, [pc, #168]	; (80118ac <tcp_input+0x4d0>)
 8011804:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8011806:	4a29      	ldr	r2, [pc, #164]	; (80118ac <tcp_input+0x4d0>)
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801180c:	4b1f      	ldr	r3, [pc, #124]	; (801188c <tcp_input+0x4b0>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	4a26      	ldr	r2, [pc, #152]	; (80118ac <tcp_input+0x4d0>)
 8011812:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8011814:	4b26      	ldr	r3, [pc, #152]	; (80118b0 <tcp_input+0x4d4>)
 8011816:	2200      	movs	r2, #0
 8011818:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801181a:	4b26      	ldr	r3, [pc, #152]	; (80118b4 <tcp_input+0x4d8>)
 801181c:	2200      	movs	r2, #0
 801181e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011820:	4b25      	ldr	r3, [pc, #148]	; (80118b8 <tcp_input+0x4dc>)
 8011822:	2200      	movs	r2, #0
 8011824:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8011826:	4b25      	ldr	r3, [pc, #148]	; (80118bc <tcp_input+0x4e0>)
 8011828:	781b      	ldrb	r3, [r3, #0]
 801182a:	f003 0308 	and.w	r3, r3, #8
 801182e:	2b00      	cmp	r3, #0
 8011830:	d006      	beq.n	8011840 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	7b5b      	ldrb	r3, [r3, #13]
 8011836:	f043 0301 	orr.w	r3, r3, #1
 801183a:	b2da      	uxtb	r2, r3
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011840:	69fb      	ldr	r3, [r7, #28]
 8011842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011844:	2b00      	cmp	r3, #0
 8011846:	d03d      	beq.n	80118c4 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011848:	69f8      	ldr	r0, [r7, #28]
 801184a:	f7ff fa59 	bl	8010d00 <tcp_process_refused_data>
 801184e:	4603      	mov	r3, r0
 8011850:	f113 0f0d 	cmn.w	r3, #13
 8011854:	d007      	beq.n	8011866 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011856:	69fb      	ldr	r3, [r7, #28]
 8011858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801185a:	2b00      	cmp	r3, #0
 801185c:	d032      	beq.n	80118c4 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801185e:	4b18      	ldr	r3, [pc, #96]	; (80118c0 <tcp_input+0x4e4>)
 8011860:	881b      	ldrh	r3, [r3, #0]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d02e      	beq.n	80118c4 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011866:	69fb      	ldr	r3, [r7, #28]
 8011868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801186a:	2b00      	cmp	r3, #0
 801186c:	f040 8108 	bne.w	8011a80 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011870:	69f8      	ldr	r0, [r7, #28]
 8011872:	f002 fa0b 	bl	8013c8c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011876:	e103      	b.n	8011a80 <tcp_input+0x6a4>
 8011878:	080192f0 	.word	0x080192f0
 801187c:	08019388 	.word	0x08019388
 8011880:	08019334 	.word	0x08019334
 8011884:	080193b0 	.word	0x080193b0
 8011888:	080193dc 	.word	0x080193dc
 801188c:	2400a40c 	.word	0x2400a40c
 8011890:	2400a834 	.word	0x2400a834
 8011894:	08019404 	.word	0x08019404
 8011898:	2400d8f0 	.word	0x2400d8f0
 801189c:	08019430 	.word	0x08019430
 80118a0:	2400d900 	.word	0x2400d900
 80118a4:	0801945c 	.word	0x0801945c
 80118a8:	2400d8f8 	.word	0x2400d8f8
 80118ac:	2400a3fc 	.word	0x2400a3fc
 80118b0:	2400a42c 	.word	0x2400a42c
 80118b4:	2400a429 	.word	0x2400a429
 80118b8:	2400a424 	.word	0x2400a424
 80118bc:	2400a428 	.word	0x2400a428
 80118c0:	2400a426 	.word	0x2400a426
      }
    }
    tcp_input_pcb = pcb;
 80118c4:	4a98      	ldr	r2, [pc, #608]	; (8011b28 <tcp_input+0x74c>)
 80118c6:	69fb      	ldr	r3, [r7, #28]
 80118c8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80118ca:	69f8      	ldr	r0, [r7, #28]
 80118cc:	f000 fac6 	bl	8011e5c <tcp_process>
 80118d0:	4603      	mov	r3, r0
 80118d2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80118d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80118d8:	f113 0f0d 	cmn.w	r3, #13
 80118dc:	f000 80d2 	beq.w	8011a84 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 80118e0:	4b92      	ldr	r3, [pc, #584]	; (8011b2c <tcp_input+0x750>)
 80118e2:	781b      	ldrb	r3, [r3, #0]
 80118e4:	f003 0308 	and.w	r3, r3, #8
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d016      	beq.n	801191a <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80118ec:	69fb      	ldr	r3, [r7, #28]
 80118ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d008      	beq.n	8011908 <tcp_input+0x52c>
 80118f6:	69fb      	ldr	r3, [r7, #28]
 80118f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118fc:	69fa      	ldr	r2, [r7, #28]
 80118fe:	6912      	ldr	r2, [r2, #16]
 8011900:	f06f 010d 	mvn.w	r1, #13
 8011904:	4610      	mov	r0, r2
 8011906:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011908:	69f9      	ldr	r1, [r7, #28]
 801190a:	4889      	ldr	r0, [pc, #548]	; (8011b30 <tcp_input+0x754>)
 801190c:	f7ff fc4c 	bl	80111a8 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8011910:	69f9      	ldr	r1, [r7, #28]
 8011912:	2001      	movs	r0, #1
 8011914:	f7fd fb86 	bl	800f024 <memp_free>
 8011918:	e0bf      	b.n	8011a9a <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 801191a:	2300      	movs	r3, #0
 801191c:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801191e:	4b85      	ldr	r3, [pc, #532]	; (8011b34 <tcp_input+0x758>)
 8011920:	881b      	ldrh	r3, [r3, #0]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d01b      	beq.n	801195e <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011926:	4b83      	ldr	r3, [pc, #524]	; (8011b34 <tcp_input+0x758>)
 8011928:	881b      	ldrh	r3, [r3, #0]
 801192a:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801192c:	69fb      	ldr	r3, [r7, #28]
 801192e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011930:	2b00      	cmp	r3, #0
 8011932:	d009      	beq.n	8011948 <tcp_input+0x56c>
 8011934:	69fb      	ldr	r3, [r7, #28]
 8011936:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011938:	69fa      	ldr	r2, [r7, #28]
 801193a:	6910      	ldr	r0, [r2, #16]
 801193c:	89fa      	ldrh	r2, [r7, #14]
 801193e:	69f9      	ldr	r1, [r7, #28]
 8011940:	4798      	blx	r3
 8011942:	4603      	mov	r3, r0
 8011944:	74fb      	strb	r3, [r7, #19]
 8011946:	e001      	b.n	801194c <tcp_input+0x570>
 8011948:	2300      	movs	r3, #0
 801194a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801194c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011950:	f113 0f0d 	cmn.w	r3, #13
 8011954:	f000 8098 	beq.w	8011a88 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011958:	4b76      	ldr	r3, [pc, #472]	; (8011b34 <tcp_input+0x758>)
 801195a:	2200      	movs	r2, #0
 801195c:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801195e:	69f8      	ldr	r0, [r7, #28]
 8011960:	f000 f900 	bl	8011b64 <tcp_input_delayed_close>
 8011964:	4603      	mov	r3, r0
 8011966:	2b00      	cmp	r3, #0
 8011968:	f040 8090 	bne.w	8011a8c <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801196c:	4b72      	ldr	r3, [pc, #456]	; (8011b38 <tcp_input+0x75c>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d041      	beq.n	80119f8 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011974:	69fb      	ldr	r3, [r7, #28]
 8011976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011978:	2b00      	cmp	r3, #0
 801197a:	d006      	beq.n	801198a <tcp_input+0x5ae>
 801197c:	4b6f      	ldr	r3, [pc, #444]	; (8011b3c <tcp_input+0x760>)
 801197e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8011982:	496f      	ldr	r1, [pc, #444]	; (8011b40 <tcp_input+0x764>)
 8011984:	486f      	ldr	r0, [pc, #444]	; (8011b44 <tcp_input+0x768>)
 8011986:	f005 fd53 	bl	8017430 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801198a:	69fb      	ldr	r3, [r7, #28]
 801198c:	7e9b      	ldrb	r3, [r3, #26]
 801198e:	f003 0310 	and.w	r3, r3, #16
 8011992:	2b00      	cmp	r3, #0
 8011994:	d008      	beq.n	80119a8 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011996:	4b68      	ldr	r3, [pc, #416]	; (8011b38 <tcp_input+0x75c>)
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	4618      	mov	r0, r3
 801199c:	f7fe f8da 	bl	800fb54 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80119a0:	69f8      	ldr	r0, [r7, #28]
 80119a2:	f7fe fdd5 	bl	8010550 <tcp_abort>
            goto aborted;
 80119a6:	e078      	b.n	8011a9a <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80119a8:	69fb      	ldr	r3, [r7, #28]
 80119aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d00c      	beq.n	80119cc <tcp_input+0x5f0>
 80119b2:	69fb      	ldr	r3, [r7, #28]
 80119b4:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80119b8:	69fb      	ldr	r3, [r7, #28]
 80119ba:	6918      	ldr	r0, [r3, #16]
 80119bc:	4b5e      	ldr	r3, [pc, #376]	; (8011b38 <tcp_input+0x75c>)
 80119be:	681a      	ldr	r2, [r3, #0]
 80119c0:	2300      	movs	r3, #0
 80119c2:	69f9      	ldr	r1, [r7, #28]
 80119c4:	47a0      	blx	r4
 80119c6:	4603      	mov	r3, r0
 80119c8:	74fb      	strb	r3, [r7, #19]
 80119ca:	e008      	b.n	80119de <tcp_input+0x602>
 80119cc:	4b5a      	ldr	r3, [pc, #360]	; (8011b38 <tcp_input+0x75c>)
 80119ce:	681a      	ldr	r2, [r3, #0]
 80119d0:	2300      	movs	r3, #0
 80119d2:	69f9      	ldr	r1, [r7, #28]
 80119d4:	2000      	movs	r0, #0
 80119d6:	f7ff fa44 	bl	8010e62 <tcp_recv_null>
 80119da:	4603      	mov	r3, r0
 80119dc:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80119de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80119e2:	f113 0f0d 	cmn.w	r3, #13
 80119e6:	d053      	beq.n	8011a90 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80119e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d003      	beq.n	80119f8 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80119f0:	4b51      	ldr	r3, [pc, #324]	; (8011b38 <tcp_input+0x75c>)
 80119f2:	681a      	ldr	r2, [r3, #0]
 80119f4:	69fb      	ldr	r3, [r7, #28]
 80119f6:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80119f8:	4b4c      	ldr	r3, [pc, #304]	; (8011b2c <tcp_input+0x750>)
 80119fa:	781b      	ldrb	r3, [r3, #0]
 80119fc:	f003 0320 	and.w	r3, r3, #32
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d030      	beq.n	8011a66 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8011a04:	69fb      	ldr	r3, [r7, #28]
 8011a06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d009      	beq.n	8011a20 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011a0c:	69fb      	ldr	r3, [r7, #28]
 8011a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a10:	7b5a      	ldrb	r2, [r3, #13]
 8011a12:	69fb      	ldr	r3, [r7, #28]
 8011a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a16:	f042 0220 	orr.w	r2, r2, #32
 8011a1a:	b2d2      	uxtb	r2, r2
 8011a1c:	735a      	strb	r2, [r3, #13]
 8011a1e:	e022      	b.n	8011a66 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011a20:	69fb      	ldr	r3, [r7, #28]
 8011a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011a24:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011a28:	d005      	beq.n	8011a36 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 8011a2a:	69fb      	ldr	r3, [r7, #28]
 8011a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011a2e:	3301      	adds	r3, #1
 8011a30:	b29a      	uxth	r2, r3
 8011a32:	69fb      	ldr	r3, [r7, #28]
 8011a34:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011a36:	69fb      	ldr	r3, [r7, #28]
 8011a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d00b      	beq.n	8011a58 <tcp_input+0x67c>
 8011a40:	69fb      	ldr	r3, [r7, #28]
 8011a42:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8011a46:	69fb      	ldr	r3, [r7, #28]
 8011a48:	6918      	ldr	r0, [r3, #16]
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	69f9      	ldr	r1, [r7, #28]
 8011a50:	47a0      	blx	r4
 8011a52:	4603      	mov	r3, r0
 8011a54:	74fb      	strb	r3, [r7, #19]
 8011a56:	e001      	b.n	8011a5c <tcp_input+0x680>
 8011a58:	2300      	movs	r3, #0
 8011a5a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011a5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011a60:	f113 0f0d 	cmn.w	r3, #13
 8011a64:	d016      	beq.n	8011a94 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011a66:	4b30      	ldr	r3, [pc, #192]	; (8011b28 <tcp_input+0x74c>)
 8011a68:	2200      	movs	r2, #0
 8011a6a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011a6c:	69f8      	ldr	r0, [r7, #28]
 8011a6e:	f000 f879 	bl	8011b64 <tcp_input_delayed_close>
 8011a72:	4603      	mov	r3, r0
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d10f      	bne.n	8011a98 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011a78:	69f8      	ldr	r0, [r7, #28]
 8011a7a:	f002 f963 	bl	8013d44 <tcp_output>
 8011a7e:	e00c      	b.n	8011a9a <tcp_input+0x6be>
        goto aborted;
 8011a80:	bf00      	nop
 8011a82:	e00a      	b.n	8011a9a <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011a84:	bf00      	nop
 8011a86:	e008      	b.n	8011a9a <tcp_input+0x6be>
              goto aborted;
 8011a88:	bf00      	nop
 8011a8a:	e006      	b.n	8011a9a <tcp_input+0x6be>
          goto aborted;
 8011a8c:	bf00      	nop
 8011a8e:	e004      	b.n	8011a9a <tcp_input+0x6be>
            goto aborted;
 8011a90:	bf00      	nop
 8011a92:	e002      	b.n	8011a9a <tcp_input+0x6be>
              goto aborted;
 8011a94:	bf00      	nop
 8011a96:	e000      	b.n	8011a9a <tcp_input+0x6be>
          goto aborted;
 8011a98:	bf00      	nop
    tcp_input_pcb = NULL;
 8011a9a:	4b23      	ldr	r3, [pc, #140]	; (8011b28 <tcp_input+0x74c>)
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011aa0:	4b25      	ldr	r3, [pc, #148]	; (8011b38 <tcp_input+0x75c>)
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8011aa6:	4b28      	ldr	r3, [pc, #160]	; (8011b48 <tcp_input+0x76c>)
 8011aa8:	685b      	ldr	r3, [r3, #4]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d037      	beq.n	8011b1e <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 8011aae:	4b26      	ldr	r3, [pc, #152]	; (8011b48 <tcp_input+0x76c>)
 8011ab0:	685b      	ldr	r3, [r3, #4]
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f7fe f84e 	bl	800fb54 <pbuf_free>
      inseg.p = NULL;
 8011ab8:	4b23      	ldr	r3, [pc, #140]	; (8011b48 <tcp_input+0x76c>)
 8011aba:	2200      	movs	r2, #0
 8011abc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011abe:	e02e      	b.n	8011b1e <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011ac0:	4b22      	ldr	r3, [pc, #136]	; (8011b4c <tcp_input+0x770>)
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	899b      	ldrh	r3, [r3, #12]
 8011ac6:	b29b      	uxth	r3, r3
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f7fc fd6f 	bl	800e5ac <lwip_htons>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	f003 0304 	and.w	r3, r3, #4
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d115      	bne.n	8011b04 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ad8:	4b1d      	ldr	r3, [pc, #116]	; (8011b50 <tcp_input+0x774>)
 8011ada:	6818      	ldr	r0, [r3, #0]
 8011adc:	4b1d      	ldr	r3, [pc, #116]	; (8011b54 <tcp_input+0x778>)
 8011ade:	881b      	ldrh	r3, [r3, #0]
 8011ae0:	461a      	mov	r2, r3
 8011ae2:	4b1d      	ldr	r3, [pc, #116]	; (8011b58 <tcp_input+0x77c>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011ae8:	4b18      	ldr	r3, [pc, #96]	; (8011b4c <tcp_input+0x770>)
 8011aea:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011aec:	885b      	ldrh	r3, [r3, #2]
 8011aee:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011af0:	4a16      	ldr	r2, [pc, #88]	; (8011b4c <tcp_input+0x770>)
 8011af2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011af4:	8812      	ldrh	r2, [r2, #0]
 8011af6:	b292      	uxth	r2, r2
 8011af8:	9201      	str	r2, [sp, #4]
 8011afa:	9300      	str	r3, [sp, #0]
 8011afc:	4b17      	ldr	r3, [pc, #92]	; (8011b5c <tcp_input+0x780>)
 8011afe:	4a18      	ldr	r2, [pc, #96]	; (8011b60 <tcp_input+0x784>)
 8011b00:	f002 fbaa 	bl	8014258 <tcp_rst>
    pbuf_free(p);
 8011b04:	6878      	ldr	r0, [r7, #4]
 8011b06:	f7fe f825 	bl	800fb54 <pbuf_free>
  return;
 8011b0a:	e008      	b.n	8011b1e <tcp_input+0x742>
    goto dropped;
 8011b0c:	bf00      	nop
 8011b0e:	e002      	b.n	8011b16 <tcp_input+0x73a>
dropped:
 8011b10:	bf00      	nop
 8011b12:	e000      	b.n	8011b16 <tcp_input+0x73a>
      goto dropped;
 8011b14:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f7fe f81c 	bl	800fb54 <pbuf_free>
 8011b1c:	e000      	b.n	8011b20 <tcp_input+0x744>
  return;
 8011b1e:	bf00      	nop
}
 8011b20:	3724      	adds	r7, #36	; 0x24
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd90      	pop	{r4, r7, pc}
 8011b26:	bf00      	nop
 8011b28:	2400d904 	.word	0x2400d904
 8011b2c:	2400a429 	.word	0x2400a429
 8011b30:	2400d8f0 	.word	0x2400d8f0
 8011b34:	2400a424 	.word	0x2400a424
 8011b38:	2400a42c 	.word	0x2400a42c
 8011b3c:	080192f0 	.word	0x080192f0
 8011b40:	0801948c 	.word	0x0801948c
 8011b44:	08019334 	.word	0x08019334
 8011b48:	2400a3fc 	.word	0x2400a3fc
 8011b4c:	2400a40c 	.word	0x2400a40c
 8011b50:	2400a420 	.word	0x2400a420
 8011b54:	2400a426 	.word	0x2400a426
 8011b58:	2400a41c 	.word	0x2400a41c
 8011b5c:	2400a844 	.word	0x2400a844
 8011b60:	2400a848 	.word	0x2400a848

08011b64 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b082      	sub	sp, #8
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8011b6c:	4b14      	ldr	r3, [pc, #80]	; (8011bc0 <tcp_input_delayed_close+0x5c>)
 8011b6e:	781b      	ldrb	r3, [r3, #0]
 8011b70:	f003 0310 	and.w	r3, r3, #16
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d01d      	beq.n	8011bb4 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	7e9b      	ldrb	r3, [r3, #26]
 8011b7c:	f003 0310 	and.w	r3, r3, #16
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d10d      	bne.n	8011ba0 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d008      	beq.n	8011ba0 <tcp_input_delayed_close+0x3c>
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b94:	687a      	ldr	r2, [r7, #4]
 8011b96:	6912      	ldr	r2, [r2, #16]
 8011b98:	f06f 010e 	mvn.w	r1, #14
 8011b9c:	4610      	mov	r0, r2
 8011b9e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011ba0:	6879      	ldr	r1, [r7, #4]
 8011ba2:	4808      	ldr	r0, [pc, #32]	; (8011bc4 <tcp_input_delayed_close+0x60>)
 8011ba4:	f7ff fb00 	bl	80111a8 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8011ba8:	6879      	ldr	r1, [r7, #4]
 8011baa:	2001      	movs	r0, #1
 8011bac:	f7fd fa3a 	bl	800f024 <memp_free>
    return 1;
 8011bb0:	2301      	movs	r3, #1
 8011bb2:	e000      	b.n	8011bb6 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8011bb4:	2300      	movs	r3, #0
}
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	3708      	adds	r7, #8
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd80      	pop	{r7, pc}
 8011bbe:	bf00      	nop
 8011bc0:	2400a429 	.word	0x2400a429
 8011bc4:	2400d8f0 	.word	0x2400d8f0

08011bc8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b088      	sub	sp, #32
 8011bcc:	af02      	add	r7, sp, #8
 8011bce:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011bd0:	4b64      	ldr	r3, [pc, #400]	; (8011d64 <tcp_listen_input+0x19c>)
 8011bd2:	781b      	ldrb	r3, [r3, #0]
 8011bd4:	f003 0304 	and.w	r3, r3, #4
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	f040 80bc 	bne.w	8011d56 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011bde:	4b61      	ldr	r3, [pc, #388]	; (8011d64 <tcp_listen_input+0x19c>)
 8011be0:	781b      	ldrb	r3, [r3, #0]
 8011be2:	f003 0310 	and.w	r3, r3, #16
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d016      	beq.n	8011c18 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011bea:	4b5f      	ldr	r3, [pc, #380]	; (8011d68 <tcp_listen_input+0x1a0>)
 8011bec:	6818      	ldr	r0, [r3, #0]
 8011bee:	4b5f      	ldr	r3, [pc, #380]	; (8011d6c <tcp_listen_input+0x1a4>)
 8011bf0:	881b      	ldrh	r3, [r3, #0]
 8011bf2:	461a      	mov	r2, r3
 8011bf4:	4b5e      	ldr	r3, [pc, #376]	; (8011d70 <tcp_listen_input+0x1a8>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011bfa:	4b5e      	ldr	r3, [pc, #376]	; (8011d74 <tcp_listen_input+0x1ac>)
 8011bfc:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011bfe:	885b      	ldrh	r3, [r3, #2]
 8011c00:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c02:	4a5c      	ldr	r2, [pc, #368]	; (8011d74 <tcp_listen_input+0x1ac>)
 8011c04:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c06:	8812      	ldrh	r2, [r2, #0]
 8011c08:	b292      	uxth	r2, r2
 8011c0a:	9201      	str	r2, [sp, #4]
 8011c0c:	9300      	str	r3, [sp, #0]
 8011c0e:	4b5a      	ldr	r3, [pc, #360]	; (8011d78 <tcp_listen_input+0x1b0>)
 8011c10:	4a5a      	ldr	r2, [pc, #360]	; (8011d7c <tcp_listen_input+0x1b4>)
 8011c12:	f002 fb21 	bl	8014258 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011c16:	e0a0      	b.n	8011d5a <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 8011c18:	4b52      	ldr	r3, [pc, #328]	; (8011d64 <tcp_listen_input+0x19c>)
 8011c1a:	781b      	ldrb	r3, [r3, #0]
 8011c1c:	f003 0302 	and.w	r3, r3, #2
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	f000 809a 	beq.w	8011d5a <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	7d5b      	ldrb	r3, [r3, #21]
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7ff f9f8 	bl	8011020 <tcp_alloc>
 8011c30:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011c32:	697b      	ldr	r3, [r7, #20]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d111      	bne.n	8011c5c <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	699b      	ldr	r3, [r3, #24]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d00a      	beq.n	8011c56 <tcp_listen_input+0x8e>
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	699b      	ldr	r3, [r3, #24]
 8011c44:	687a      	ldr	r2, [r7, #4]
 8011c46:	6910      	ldr	r0, [r2, #16]
 8011c48:	f04f 32ff 	mov.w	r2, #4294967295
 8011c4c:	2100      	movs	r1, #0
 8011c4e:	4798      	blx	r3
 8011c50:	4603      	mov	r3, r0
 8011c52:	73bb      	strb	r3, [r7, #14]
      return;
 8011c54:	e082      	b.n	8011d5c <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011c56:	23f0      	movs	r3, #240	; 0xf0
 8011c58:	73bb      	strb	r3, [r7, #14]
      return;
 8011c5a:	e07f      	b.n	8011d5c <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011c5c:	4b48      	ldr	r3, [pc, #288]	; (8011d80 <tcp_listen_input+0x1b8>)
 8011c5e:	695a      	ldr	r2, [r3, #20]
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011c64:	4b46      	ldr	r3, [pc, #280]	; (8011d80 <tcp_listen_input+0x1b8>)
 8011c66:	691a      	ldr	r2, [r3, #16]
 8011c68:	697b      	ldr	r3, [r7, #20]
 8011c6a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	8ada      	ldrh	r2, [r3, #22]
 8011c70:	697b      	ldr	r3, [r7, #20]
 8011c72:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011c74:	4b3f      	ldr	r3, [pc, #252]	; (8011d74 <tcp_listen_input+0x1ac>)
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	881b      	ldrh	r3, [r3, #0]
 8011c7a:	b29a      	uxth	r2, r3
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011c80:	697b      	ldr	r3, [r7, #20]
 8011c82:	2203      	movs	r2, #3
 8011c84:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011c86:	4b3a      	ldr	r3, [pc, #232]	; (8011d70 <tcp_listen_input+0x1a8>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	1c5a      	adds	r2, r3, #1
 8011c8c:	697b      	ldr	r3, [r7, #20]
 8011c8e:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c94:	697b      	ldr	r3, [r7, #20]
 8011c96:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011c98:	6978      	ldr	r0, [r7, #20]
 8011c9a:	f7ff fb01 	bl	80112a0 <tcp_next_iss>
 8011c9e:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011ca0:	697b      	ldr	r3, [r7, #20]
 8011ca2:	693a      	ldr	r2, [r7, #16]
 8011ca4:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8011ca6:	697b      	ldr	r3, [r7, #20]
 8011ca8:	693a      	ldr	r2, [r7, #16]
 8011caa:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8011cac:	697b      	ldr	r3, [r7, #20]
 8011cae:	693a      	ldr	r2, [r7, #16]
 8011cb0:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011cb2:	697b      	ldr	r3, [r7, #20]
 8011cb4:	693a      	ldr	r2, [r7, #16]
 8011cb6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011cb8:	4b2d      	ldr	r3, [pc, #180]	; (8011d70 <tcp_listen_input+0x1a8>)
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	1e5a      	subs	r2, r3, #1
 8011cbe:	697b      	ldr	r3, [r7, #20]
 8011cc0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	691a      	ldr	r2, [r3, #16]
 8011cc6:	697b      	ldr	r3, [r7, #20]
 8011cc8:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011cca:	697b      	ldr	r3, [r7, #20]
 8011ccc:	687a      	ldr	r2, [r7, #4]
 8011cce:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	7a1b      	ldrb	r3, [r3, #8]
 8011cd4:	f003 030c 	and.w	r3, r3, #12
 8011cd8:	b2da      	uxtb	r2, r3
 8011cda:	697b      	ldr	r3, [r7, #20]
 8011cdc:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011cde:	4b29      	ldr	r3, [pc, #164]	; (8011d84 <tcp_listen_input+0x1bc>)
 8011ce0:	681a      	ldr	r2, [r3, #0]
 8011ce2:	697b      	ldr	r3, [r7, #20]
 8011ce4:	60da      	str	r2, [r3, #12]
 8011ce6:	4a27      	ldr	r2, [pc, #156]	; (8011d84 <tcp_listen_input+0x1bc>)
 8011ce8:	697b      	ldr	r3, [r7, #20]
 8011cea:	6013      	str	r3, [r2, #0]
 8011cec:	f002 fd06 	bl	80146fc <tcp_timer_needed>
 8011cf0:	4b25      	ldr	r3, [pc, #148]	; (8011d88 <tcp_listen_input+0x1c0>)
 8011cf2:	2201      	movs	r2, #1
 8011cf4:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011cf6:	6978      	ldr	r0, [r7, #20]
 8011cf8:	f001 fd14 	bl	8013724 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011cfc:	4b1d      	ldr	r3, [pc, #116]	; (8011d74 <tcp_listen_input+0x1ac>)
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	89db      	ldrh	r3, [r3, #14]
 8011d02:	b29a      	uxth	r2, r3
 8011d04:	697b      	ldr	r3, [r7, #20]
 8011d06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011d0a:	697b      	ldr	r3, [r7, #20]
 8011d0c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011d10:	697b      	ldr	r3, [r7, #20]
 8011d12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011d16:	697b      	ldr	r3, [r7, #20]
 8011d18:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011d1a:	697b      	ldr	r3, [r7, #20]
 8011d1c:	3304      	adds	r3, #4
 8011d1e:	4619      	mov	r1, r3
 8011d20:	4610      	mov	r0, r2
 8011d22:	f7ff fad5 	bl	80112d0 <tcp_eff_send_mss_impl>
 8011d26:	4603      	mov	r3, r0
 8011d28:	461a      	mov	r2, r3
 8011d2a:	697b      	ldr	r3, [r7, #20]
 8011d2c:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011d2e:	2112      	movs	r1, #18
 8011d30:	6978      	ldr	r0, [r7, #20]
 8011d32:	f001 feaf 	bl	8013a94 <tcp_enqueue_flags>
 8011d36:	4603      	mov	r3, r0
 8011d38:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d004      	beq.n	8011d4c <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8011d42:	2100      	movs	r1, #0
 8011d44:	6978      	ldr	r0, [r7, #20]
 8011d46:	f7fe fb51 	bl	80103ec <tcp_abandon>
      return;
 8011d4a:	e007      	b.n	8011d5c <tcp_listen_input+0x194>
    tcp_output(npcb);
 8011d4c:	6978      	ldr	r0, [r7, #20]
 8011d4e:	f001 fff9 	bl	8013d44 <tcp_output>
  return;
 8011d52:	bf00      	nop
 8011d54:	e001      	b.n	8011d5a <tcp_listen_input+0x192>
    return;
 8011d56:	bf00      	nop
 8011d58:	e000      	b.n	8011d5c <tcp_listen_input+0x194>
  return;
 8011d5a:	bf00      	nop
}
 8011d5c:	3718      	adds	r7, #24
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}
 8011d62:	bf00      	nop
 8011d64:	2400a428 	.word	0x2400a428
 8011d68:	2400a420 	.word	0x2400a420
 8011d6c:	2400a426 	.word	0x2400a426
 8011d70:	2400a41c 	.word	0x2400a41c
 8011d74:	2400a40c 	.word	0x2400a40c
 8011d78:	2400a844 	.word	0x2400a844
 8011d7c:	2400a848 	.word	0x2400a848
 8011d80:	2400a834 	.word	0x2400a834
 8011d84:	2400d8f0 	.word	0x2400d8f0
 8011d88:	2400d8ec 	.word	0x2400d8ec

08011d8c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b084      	sub	sp, #16
 8011d90:	af02      	add	r7, sp, #8
 8011d92:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011d94:	4b29      	ldr	r3, [pc, #164]	; (8011e3c <tcp_timewait_input+0xb0>)
 8011d96:	781b      	ldrb	r3, [r3, #0]
 8011d98:	f003 0304 	and.w	r3, r3, #4
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d147      	bne.n	8011e30 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011da0:	4b26      	ldr	r3, [pc, #152]	; (8011e3c <tcp_timewait_input+0xb0>)
 8011da2:	781b      	ldrb	r3, [r3, #0]
 8011da4:	f003 0302 	and.w	r3, r3, #2
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d027      	beq.n	8011dfc <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011dac:	4b24      	ldr	r3, [pc, #144]	; (8011e40 <tcp_timewait_input+0xb4>)
 8011dae:	681a      	ldr	r2, [r3, #0]
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011db4:	1ad3      	subs	r3, r2, r3
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	db2a      	blt.n	8011e10 <tcp_timewait_input+0x84>
 8011dba:	4b21      	ldr	r3, [pc, #132]	; (8011e40 <tcp_timewait_input+0xb4>)
 8011dbc:	681a      	ldr	r2, [r3, #0]
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dc2:	6879      	ldr	r1, [r7, #4]
 8011dc4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011dc6:	440b      	add	r3, r1
 8011dc8:	1ad3      	subs	r3, r2, r3
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	dc20      	bgt.n	8011e10 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011dce:	4b1d      	ldr	r3, [pc, #116]	; (8011e44 <tcp_timewait_input+0xb8>)
 8011dd0:	6818      	ldr	r0, [r3, #0]
 8011dd2:	4b1d      	ldr	r3, [pc, #116]	; (8011e48 <tcp_timewait_input+0xbc>)
 8011dd4:	881b      	ldrh	r3, [r3, #0]
 8011dd6:	461a      	mov	r2, r3
 8011dd8:	4b19      	ldr	r3, [pc, #100]	; (8011e40 <tcp_timewait_input+0xb4>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011dde:	4b1b      	ldr	r3, [pc, #108]	; (8011e4c <tcp_timewait_input+0xc0>)
 8011de0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011de2:	885b      	ldrh	r3, [r3, #2]
 8011de4:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011de6:	4a19      	ldr	r2, [pc, #100]	; (8011e4c <tcp_timewait_input+0xc0>)
 8011de8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8011dea:	8812      	ldrh	r2, [r2, #0]
 8011dec:	b292      	uxth	r2, r2
 8011dee:	9201      	str	r2, [sp, #4]
 8011df0:	9300      	str	r3, [sp, #0]
 8011df2:	4b17      	ldr	r3, [pc, #92]	; (8011e50 <tcp_timewait_input+0xc4>)
 8011df4:	4a17      	ldr	r2, [pc, #92]	; (8011e54 <tcp_timewait_input+0xc8>)
 8011df6:	f002 fa2f 	bl	8014258 <tcp_rst>
      return;
 8011dfa:	e01c      	b.n	8011e36 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 8011dfc:	4b0f      	ldr	r3, [pc, #60]	; (8011e3c <tcp_timewait_input+0xb0>)
 8011dfe:	781b      	ldrb	r3, [r3, #0]
 8011e00:	f003 0301 	and.w	r3, r3, #1
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d003      	beq.n	8011e10 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011e08:	4b13      	ldr	r3, [pc, #76]	; (8011e58 <tcp_timewait_input+0xcc>)
 8011e0a:	681a      	ldr	r2, [r3, #0]
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011e10:	4b0d      	ldr	r3, [pc, #52]	; (8011e48 <tcp_timewait_input+0xbc>)
 8011e12:	881b      	ldrh	r3, [r3, #0]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d00d      	beq.n	8011e34 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	7e9b      	ldrb	r3, [r3, #26]
 8011e1c:	f043 0302 	orr.w	r3, r3, #2
 8011e20:	b2da      	uxtb	r2, r3
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	f001 ff8c 	bl	8013d44 <tcp_output>
  }
  return;
 8011e2c:	bf00      	nop
 8011e2e:	e001      	b.n	8011e34 <tcp_timewait_input+0xa8>
    return;
 8011e30:	bf00      	nop
 8011e32:	e000      	b.n	8011e36 <tcp_timewait_input+0xaa>
  return;
 8011e34:	bf00      	nop
}
 8011e36:	3708      	adds	r7, #8
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd80      	pop	{r7, pc}
 8011e3c:	2400a428 	.word	0x2400a428
 8011e40:	2400a41c 	.word	0x2400a41c
 8011e44:	2400a420 	.word	0x2400a420
 8011e48:	2400a426 	.word	0x2400a426
 8011e4c:	2400a40c 	.word	0x2400a40c
 8011e50:	2400a844 	.word	0x2400a844
 8011e54:	2400a848 	.word	0x2400a848
 8011e58:	2400d8f4 	.word	0x2400d8f4

08011e5c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b08a      	sub	sp, #40	; 0x28
 8011e60:	af02      	add	r7, sp, #8
 8011e62:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011e64:	2300      	movs	r3, #0
 8011e66:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011e68:	2300      	movs	r3, #0
 8011e6a:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011e6c:	4ba4      	ldr	r3, [pc, #656]	; (8012100 <tcp_process+0x2a4>)
 8011e6e:	781b      	ldrb	r3, [r3, #0]
 8011e70:	f003 0304 	and.w	r3, r3, #4
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d04e      	beq.n	8011f16 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	7d1b      	ldrb	r3, [r3, #20]
 8011e7c:	2b02      	cmp	r3, #2
 8011e7e:	d108      	bne.n	8011e92 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011e84:	4b9f      	ldr	r3, [pc, #636]	; (8012104 <tcp_process+0x2a8>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	d123      	bne.n	8011ed4 <tcp_process+0x78>
        acceptable = 1;
 8011e8c:	2301      	movs	r3, #1
 8011e8e:	76fb      	strb	r3, [r7, #27]
 8011e90:	e020      	b.n	8011ed4 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e96:	4b9c      	ldr	r3, [pc, #624]	; (8012108 <tcp_process+0x2ac>)
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	d102      	bne.n	8011ea4 <tcp_process+0x48>
        acceptable = 1;
 8011e9e:	2301      	movs	r3, #1
 8011ea0:	76fb      	strb	r3, [r7, #27]
 8011ea2:	e017      	b.n	8011ed4 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011ea4:	4b98      	ldr	r3, [pc, #608]	; (8012108 <tcp_process+0x2ac>)
 8011ea6:	681a      	ldr	r2, [r3, #0]
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eac:	1ad3      	subs	r3, r2, r3
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	db10      	blt.n	8011ed4 <tcp_process+0x78>
 8011eb2:	4b95      	ldr	r3, [pc, #596]	; (8012108 <tcp_process+0x2ac>)
 8011eb4:	681a      	ldr	r2, [r3, #0]
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eba:	6879      	ldr	r1, [r7, #4]
 8011ebc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011ebe:	440b      	add	r3, r1
 8011ec0:	1ad3      	subs	r3, r2, r3
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	dc06      	bgt.n	8011ed4 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	7e9b      	ldrb	r3, [r3, #26]
 8011eca:	f043 0302 	orr.w	r3, r3, #2
 8011ece:	b2da      	uxtb	r2, r3
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011ed4:	7efb      	ldrb	r3, [r7, #27]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d01b      	beq.n	8011f12 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	7d1b      	ldrb	r3, [r3, #20]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d106      	bne.n	8011ef0 <tcp_process+0x94>
 8011ee2:	4b8a      	ldr	r3, [pc, #552]	; (801210c <tcp_process+0x2b0>)
 8011ee4:	f240 22e7 	movw	r2, #743	; 0x2e7
 8011ee8:	4989      	ldr	r1, [pc, #548]	; (8012110 <tcp_process+0x2b4>)
 8011eea:	488a      	ldr	r0, [pc, #552]	; (8012114 <tcp_process+0x2b8>)
 8011eec:	f005 faa0 	bl	8017430 <iprintf>
      recv_flags |= TF_RESET;
 8011ef0:	4b89      	ldr	r3, [pc, #548]	; (8012118 <tcp_process+0x2bc>)
 8011ef2:	781b      	ldrb	r3, [r3, #0]
 8011ef4:	f043 0308 	orr.w	r3, r3, #8
 8011ef8:	b2da      	uxtb	r2, r3
 8011efa:	4b87      	ldr	r3, [pc, #540]	; (8012118 <tcp_process+0x2bc>)
 8011efc:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	7e9b      	ldrb	r3, [r3, #26]
 8011f02:	f023 0301 	bic.w	r3, r3, #1
 8011f06:	b2da      	uxtb	r2, r3
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8011f0c:	f06f 030d 	mvn.w	r3, #13
 8011f10:	e34d      	b.n	80125ae <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011f12:	2300      	movs	r3, #0
 8011f14:	e34b      	b.n	80125ae <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011f16:	4b7a      	ldr	r3, [pc, #488]	; (8012100 <tcp_process+0x2a4>)
 8011f18:	781b      	ldrb	r3, [r3, #0]
 8011f1a:	f003 0302 	and.w	r3, r3, #2
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d010      	beq.n	8011f44 <tcp_process+0xe8>
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	7d1b      	ldrb	r3, [r3, #20]
 8011f26:	2b02      	cmp	r3, #2
 8011f28:	d00c      	beq.n	8011f44 <tcp_process+0xe8>
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	7d1b      	ldrb	r3, [r3, #20]
 8011f2e:	2b03      	cmp	r3, #3
 8011f30:	d008      	beq.n	8011f44 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	7e9b      	ldrb	r3, [r3, #26]
 8011f36:	f043 0302 	orr.w	r3, r3, #2
 8011f3a:	b2da      	uxtb	r2, r3
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8011f40:	2300      	movs	r3, #0
 8011f42:	e334      	b.n	80125ae <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	7e9b      	ldrb	r3, [r3, #26]
 8011f48:	f003 0310 	and.w	r3, r3, #16
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d103      	bne.n	8011f58 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011f50:	4b72      	ldr	r3, [pc, #456]	; (801211c <tcp_process+0x2c0>)
 8011f52:	681a      	ldr	r2, [r3, #0]
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8011f60:	6878      	ldr	r0, [r7, #4]
 8011f62:	f001 fbdf 	bl	8013724 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	7d1b      	ldrb	r3, [r3, #20]
 8011f6a:	3b02      	subs	r3, #2
 8011f6c:	2b07      	cmp	r3, #7
 8011f6e:	f200 830e 	bhi.w	801258e <tcp_process+0x732>
 8011f72:	a201      	add	r2, pc, #4	; (adr r2, 8011f78 <tcp_process+0x11c>)
 8011f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f78:	08011f99 	.word	0x08011f99
 8011f7c:	08012191 	.word	0x08012191
 8011f80:	080122e9 	.word	0x080122e9
 8011f84:	08012313 	.word	0x08012313
 8011f88:	0801243d 	.word	0x0801243d
 8011f8c:	080122e9 	.word	0x080122e9
 8011f90:	080124c9 	.word	0x080124c9
 8011f94:	08012559 	.word	0x08012559
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011f98:	4b59      	ldr	r3, [pc, #356]	; (8012100 <tcp_process+0x2a4>)
 8011f9a:	781b      	ldrb	r3, [r3, #0]
 8011f9c:	f003 0310 	and.w	r3, r3, #16
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	f000 80cb 	beq.w	801213c <tcp_process+0x2e0>
 8011fa6:	4b56      	ldr	r3, [pc, #344]	; (8012100 <tcp_process+0x2a4>)
 8011fa8:	781b      	ldrb	r3, [r3, #0]
 8011faa:	f003 0302 	and.w	r3, r3, #2
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	f000 80c4 	beq.w	801213c <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fb8:	1c5a      	adds	r2, r3, #1
 8011fba:	4b52      	ldr	r3, [pc, #328]	; (8012104 <tcp_process+0x2a8>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	429a      	cmp	r2, r3
 8011fc0:	f040 80bc 	bne.w	801213c <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8011fc4:	4b50      	ldr	r3, [pc, #320]	; (8012108 <tcp_process+0x2ac>)
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	1c5a      	adds	r2, r3, #1
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 8011fd6:	4b4b      	ldr	r3, [pc, #300]	; (8012104 <tcp_process+0x2a8>)
 8011fd8:	681a      	ldr	r2, [r3, #0]
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8011fde:	4b50      	ldr	r3, [pc, #320]	; (8012120 <tcp_process+0x2c4>)
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	89db      	ldrh	r3, [r3, #14]
 8011fe4:	b29a      	uxth	r2, r3
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011ff8:	4b43      	ldr	r3, [pc, #268]	; (8012108 <tcp_process+0x2ac>)
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	1e5a      	subs	r2, r3, #1
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	2204      	movs	r2, #4
 8012006:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	3304      	adds	r3, #4
 8012010:	4619      	mov	r1, r3
 8012012:	4610      	mov	r0, r2
 8012014:	f7ff f95c 	bl	80112d0 <tcp_eff_send_mss_impl>
 8012018:	4603      	mov	r3, r0
 801201a:	461a      	mov	r2, r3
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012024:	005b      	lsls	r3, r3, #1
 8012026:	f241 121c 	movw	r2, #4380	; 0x111c
 801202a:	429a      	cmp	r2, r3
 801202c:	bf38      	it	cc
 801202e:	461a      	movcc	r2, r3
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012034:	009b      	lsls	r3, r3, #2
 8012036:	4293      	cmp	r3, r2
 8012038:	bf28      	it	cs
 801203a:	4613      	movcs	r3, r2
 801203c:	b29a      	uxth	r2, r3
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801204a:	2b00      	cmp	r3, #0
 801204c:	d106      	bne.n	801205c <tcp_process+0x200>
 801204e:	4b2f      	ldr	r3, [pc, #188]	; (801210c <tcp_process+0x2b0>)
 8012050:	f240 321a 	movw	r2, #794	; 0x31a
 8012054:	4933      	ldr	r1, [pc, #204]	; (8012124 <tcp_process+0x2c8>)
 8012056:	482f      	ldr	r0, [pc, #188]	; (8012114 <tcp_process+0x2b8>)
 8012058:	f005 f9ea 	bl	8017430 <iprintf>
      --pcb->snd_queuelen;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012062:	3b01      	subs	r3, #1
 8012064:	b29a      	uxth	r2, r3
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012070:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8012072:	69fb      	ldr	r3, [r7, #28]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d111      	bne.n	801209c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801207c:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801207e:	69fb      	ldr	r3, [r7, #28]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d106      	bne.n	8012092 <tcp_process+0x236>
 8012084:	4b21      	ldr	r3, [pc, #132]	; (801210c <tcp_process+0x2b0>)
 8012086:	f240 3222 	movw	r2, #802	; 0x322
 801208a:	4927      	ldr	r1, [pc, #156]	; (8012128 <tcp_process+0x2cc>)
 801208c:	4821      	ldr	r0, [pc, #132]	; (8012114 <tcp_process+0x2b8>)
 801208e:	f005 f9cf 	bl	8017430 <iprintf>
        pcb->unsent = rseg->next;
 8012092:	69fb      	ldr	r3, [r7, #28]
 8012094:	681a      	ldr	r2, [r3, #0]
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	669a      	str	r2, [r3, #104]	; 0x68
 801209a:	e003      	b.n	80120a4 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 801209c:	69fb      	ldr	r3, [r7, #28]
 801209e:	681a      	ldr	r2, [r3, #0]
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 80120a4:	69f8      	ldr	r0, [r7, #28]
 80120a6:	f7fe fea8 	bl	8010dfa <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d104      	bne.n	80120bc <tcp_process+0x260>
        pcb->rtime = -1;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120b8:	861a      	strh	r2, [r3, #48]	; 0x30
 80120ba:	e006      	b.n	80120ca <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2200      	movs	r2, #0
 80120c0:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	2200      	movs	r2, #0
 80120c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d00a      	beq.n	80120ea <tcp_process+0x28e>
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80120da:	687a      	ldr	r2, [r7, #4]
 80120dc:	6910      	ldr	r0, [r2, #16]
 80120de:	2200      	movs	r2, #0
 80120e0:	6879      	ldr	r1, [r7, #4]
 80120e2:	4798      	blx	r3
 80120e4:	4603      	mov	r3, r0
 80120e6:	76bb      	strb	r3, [r7, #26]
 80120e8:	e001      	b.n	80120ee <tcp_process+0x292>
 80120ea:	2300      	movs	r3, #0
 80120ec:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 80120ee:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80120f2:	f113 0f0d 	cmn.w	r3, #13
 80120f6:	d119      	bne.n	801212c <tcp_process+0x2d0>
        return ERR_ABRT;
 80120f8:	f06f 030c 	mvn.w	r3, #12
 80120fc:	e257      	b.n	80125ae <tcp_process+0x752>
 80120fe:	bf00      	nop
 8012100:	2400a428 	.word	0x2400a428
 8012104:	2400a420 	.word	0x2400a420
 8012108:	2400a41c 	.word	0x2400a41c
 801210c:	080192f0 	.word	0x080192f0
 8012110:	080194a8 	.word	0x080194a8
 8012114:	08019334 	.word	0x08019334
 8012118:	2400a429 	.word	0x2400a429
 801211c:	2400d8f4 	.word	0x2400d8f4
 8012120:	2400a40c 	.word	0x2400a40c
 8012124:	080194c8 	.word	0x080194c8
 8012128:	080194e0 	.word	0x080194e0
      }
      tcp_ack_now(pcb);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	7e9b      	ldrb	r3, [r3, #26]
 8012130:	f043 0302 	orr.w	r3, r3, #2
 8012134:	b2da      	uxtb	r2, r3
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 801213a:	e22a      	b.n	8012592 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 801213c:	4b9f      	ldr	r3, [pc, #636]	; (80123bc <tcp_process+0x560>)
 801213e:	781b      	ldrb	r3, [r3, #0]
 8012140:	f003 0310 	and.w	r3, r3, #16
 8012144:	2b00      	cmp	r3, #0
 8012146:	f000 8224 	beq.w	8012592 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801214a:	4b9d      	ldr	r3, [pc, #628]	; (80123c0 <tcp_process+0x564>)
 801214c:	6818      	ldr	r0, [r3, #0]
 801214e:	4b9d      	ldr	r3, [pc, #628]	; (80123c4 <tcp_process+0x568>)
 8012150:	881b      	ldrh	r3, [r3, #0]
 8012152:	461a      	mov	r2, r3
 8012154:	4b9c      	ldr	r3, [pc, #624]	; (80123c8 <tcp_process+0x56c>)
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801215a:	4b9c      	ldr	r3, [pc, #624]	; (80123cc <tcp_process+0x570>)
 801215c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801215e:	885b      	ldrh	r3, [r3, #2]
 8012160:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012162:	4a9a      	ldr	r2, [pc, #616]	; (80123cc <tcp_process+0x570>)
 8012164:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012166:	8812      	ldrh	r2, [r2, #0]
 8012168:	b292      	uxth	r2, r2
 801216a:	9201      	str	r2, [sp, #4]
 801216c:	9300      	str	r3, [sp, #0]
 801216e:	4b98      	ldr	r3, [pc, #608]	; (80123d0 <tcp_process+0x574>)
 8012170:	4a98      	ldr	r2, [pc, #608]	; (80123d4 <tcp_process+0x578>)
 8012172:	f002 f871 	bl	8014258 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801217c:	2b05      	cmp	r3, #5
 801217e:	f200 8208 	bhi.w	8012592 <tcp_process+0x736>
        pcb->rtime = 0;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	2200      	movs	r2, #0
 8012186:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f002 f8db 	bl	8014344 <tcp_rexmit_rto>
    break;
 801218e:	e200      	b.n	8012592 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8012190:	4b8a      	ldr	r3, [pc, #552]	; (80123bc <tcp_process+0x560>)
 8012192:	781b      	ldrb	r3, [r3, #0]
 8012194:	f003 0310 	and.w	r3, r3, #16
 8012198:	2b00      	cmp	r3, #0
 801219a:	f000 8091 	beq.w	80122c0 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801219e:	4b88      	ldr	r3, [pc, #544]	; (80123c0 <tcp_process+0x564>)
 80121a0:	681a      	ldr	r2, [r3, #0]
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121a6:	1ad3      	subs	r3, r2, r3
 80121a8:	3b01      	subs	r3, #1
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	db71      	blt.n	8012292 <tcp_process+0x436>
 80121ae:	4b84      	ldr	r3, [pc, #528]	; (80123c0 <tcp_process+0x564>)
 80121b0:	681a      	ldr	r2, [r3, #0]
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80121b6:	1ad3      	subs	r3, r2, r3
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	dc6a      	bgt.n	8012292 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	2204      	movs	r2, #4
 80121c0:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d00b      	beq.n	80121e2 <tcp_process+0x386>
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80121ce:	699b      	ldr	r3, [r3, #24]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d106      	bne.n	80121e2 <tcp_process+0x386>
 80121d4:	4b80      	ldr	r3, [pc, #512]	; (80123d8 <tcp_process+0x57c>)
 80121d6:	f240 3251 	movw	r2, #849	; 0x351
 80121da:	4980      	ldr	r1, [pc, #512]	; (80123dc <tcp_process+0x580>)
 80121dc:	4880      	ldr	r0, [pc, #512]	; (80123e0 <tcp_process+0x584>)
 80121de:	f005 f927 	bl	8017430 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d102      	bne.n	80121f0 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 80121ea:	23fa      	movs	r3, #250	; 0xfa
 80121ec:	76bb      	strb	r3, [r7, #26]
 80121ee:	e011      	b.n	8012214 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80121f4:	699b      	ldr	r3, [r3, #24]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d00a      	beq.n	8012210 <tcp_process+0x3b4>
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80121fe:	699b      	ldr	r3, [r3, #24]
 8012200:	687a      	ldr	r2, [r7, #4]
 8012202:	6910      	ldr	r0, [r2, #16]
 8012204:	2200      	movs	r2, #0
 8012206:	6879      	ldr	r1, [r7, #4]
 8012208:	4798      	blx	r3
 801220a:	4603      	mov	r3, r0
 801220c:	76bb      	strb	r3, [r7, #26]
 801220e:	e001      	b.n	8012214 <tcp_process+0x3b8>
 8012210:	23f0      	movs	r3, #240	; 0xf0
 8012212:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8012214:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d00a      	beq.n	8012232 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 801221c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012220:	f113 0f0d 	cmn.w	r3, #13
 8012224:	d002      	beq.n	801222c <tcp_process+0x3d0>
            tcp_abort(pcb);
 8012226:	6878      	ldr	r0, [r7, #4]
 8012228:	f7fe f992 	bl	8010550 <tcp_abort>
          }
          return ERR_ABRT;
 801222c:	f06f 030c 	mvn.w	r3, #12
 8012230:	e1bd      	b.n	80125ae <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f000 fa42 	bl	80126bc <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8012238:	4b6a      	ldr	r3, [pc, #424]	; (80123e4 <tcp_process+0x588>)
 801223a:	881b      	ldrh	r3, [r3, #0]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d005      	beq.n	801224c <tcp_process+0x3f0>
          recv_acked--;
 8012240:	4b68      	ldr	r3, [pc, #416]	; (80123e4 <tcp_process+0x588>)
 8012242:	881b      	ldrh	r3, [r3, #0]
 8012244:	3b01      	subs	r3, #1
 8012246:	b29a      	uxth	r2, r3
 8012248:	4b66      	ldr	r3, [pc, #408]	; (80123e4 <tcp_process+0x588>)
 801224a:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012250:	005b      	lsls	r3, r3, #1
 8012252:	f241 121c 	movw	r2, #4380	; 0x111c
 8012256:	429a      	cmp	r2, r3
 8012258:	bf38      	it	cc
 801225a:	461a      	movcc	r2, r3
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012260:	009b      	lsls	r3, r3, #2
 8012262:	4293      	cmp	r3, r2
 8012264:	bf28      	it	cs
 8012266:	4613      	movcs	r3, r2
 8012268:	b29a      	uxth	r2, r3
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8012270:	4b5d      	ldr	r3, [pc, #372]	; (80123e8 <tcp_process+0x58c>)
 8012272:	781b      	ldrb	r3, [r3, #0]
 8012274:	f003 0320 	and.w	r3, r3, #32
 8012278:	2b00      	cmp	r3, #0
 801227a:	d034      	beq.n	80122e6 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	7e9b      	ldrb	r3, [r3, #26]
 8012280:	f043 0302 	orr.w	r3, r3, #2
 8012284:	b2da      	uxtb	r2, r3
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	2207      	movs	r2, #7
 801228e:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8012290:	e029      	b.n	80122e6 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012292:	4b4b      	ldr	r3, [pc, #300]	; (80123c0 <tcp_process+0x564>)
 8012294:	6818      	ldr	r0, [r3, #0]
 8012296:	4b4b      	ldr	r3, [pc, #300]	; (80123c4 <tcp_process+0x568>)
 8012298:	881b      	ldrh	r3, [r3, #0]
 801229a:	461a      	mov	r2, r3
 801229c:	4b4a      	ldr	r3, [pc, #296]	; (80123c8 <tcp_process+0x56c>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80122a2:	4b4a      	ldr	r3, [pc, #296]	; (80123cc <tcp_process+0x570>)
 80122a4:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80122a6:	885b      	ldrh	r3, [r3, #2]
 80122a8:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80122aa:	4a48      	ldr	r2, [pc, #288]	; (80123cc <tcp_process+0x570>)
 80122ac:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80122ae:	8812      	ldrh	r2, [r2, #0]
 80122b0:	b292      	uxth	r2, r2
 80122b2:	9201      	str	r2, [sp, #4]
 80122b4:	9300      	str	r3, [sp, #0]
 80122b6:	4b46      	ldr	r3, [pc, #280]	; (80123d0 <tcp_process+0x574>)
 80122b8:	4a46      	ldr	r2, [pc, #280]	; (80123d4 <tcp_process+0x578>)
 80122ba:	f001 ffcd 	bl	8014258 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 80122be:	e16a      	b.n	8012596 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80122c0:	4b3e      	ldr	r3, [pc, #248]	; (80123bc <tcp_process+0x560>)
 80122c2:	781b      	ldrb	r3, [r3, #0]
 80122c4:	f003 0302 	and.w	r3, r3, #2
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	f000 8164 	beq.w	8012596 <tcp_process+0x73a>
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122d2:	1e5a      	subs	r2, r3, #1
 80122d4:	4b3c      	ldr	r3, [pc, #240]	; (80123c8 <tcp_process+0x56c>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	429a      	cmp	r2, r3
 80122da:	f040 815c 	bne.w	8012596 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f002 f866 	bl	80143b0 <tcp_rexmit>
    break;
 80122e4:	e157      	b.n	8012596 <tcp_process+0x73a>
 80122e6:	e156      	b.n	8012596 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f000 f9e7 	bl	80126bc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80122ee:	4b3e      	ldr	r3, [pc, #248]	; (80123e8 <tcp_process+0x58c>)
 80122f0:	781b      	ldrb	r3, [r3, #0]
 80122f2:	f003 0320 	and.w	r3, r3, #32
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	f000 814f 	beq.w	801259a <tcp_process+0x73e>
      tcp_ack_now(pcb);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	7e9b      	ldrb	r3, [r3, #26]
 8012300:	f043 0302 	orr.w	r3, r3, #2
 8012304:	b2da      	uxtb	r2, r3
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	2207      	movs	r2, #7
 801230e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8012310:	e143      	b.n	801259a <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8012312:	6878      	ldr	r0, [r7, #4]
 8012314:	f000 f9d2 	bl	80126bc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8012318:	4b33      	ldr	r3, [pc, #204]	; (80123e8 <tcp_process+0x58c>)
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	f003 0320 	and.w	r3, r3, #32
 8012320:	2b00      	cmp	r3, #0
 8012322:	d074      	beq.n	801240e <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012324:	4b25      	ldr	r3, [pc, #148]	; (80123bc <tcp_process+0x560>)
 8012326:	781b      	ldrb	r3, [r3, #0]
 8012328:	f003 0310 	and.w	r3, r3, #16
 801232c:	2b00      	cmp	r3, #0
 801232e:	d063      	beq.n	80123f8 <tcp_process+0x59c>
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012334:	4b22      	ldr	r3, [pc, #136]	; (80123c0 <tcp_process+0x564>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	429a      	cmp	r2, r3
 801233a:	d15d      	bne.n	80123f8 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012340:	2b00      	cmp	r3, #0
 8012342:	d159      	bne.n	80123f8 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	7e9b      	ldrb	r3, [r3, #26]
 8012348:	f043 0302 	orr.w	r3, r3, #2
 801234c:	b2da      	uxtb	r2, r3
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f7fe fee6 	bl	8011124 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012358:	4b24      	ldr	r3, [pc, #144]	; (80123ec <tcp_process+0x590>)
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	687a      	ldr	r2, [r7, #4]
 801235e:	429a      	cmp	r2, r3
 8012360:	d105      	bne.n	801236e <tcp_process+0x512>
 8012362:	4b22      	ldr	r3, [pc, #136]	; (80123ec <tcp_process+0x590>)
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	68db      	ldr	r3, [r3, #12]
 8012368:	4a20      	ldr	r2, [pc, #128]	; (80123ec <tcp_process+0x590>)
 801236a:	6013      	str	r3, [r2, #0]
 801236c:	e013      	b.n	8012396 <tcp_process+0x53a>
 801236e:	4b1f      	ldr	r3, [pc, #124]	; (80123ec <tcp_process+0x590>)
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	617b      	str	r3, [r7, #20]
 8012374:	e00c      	b.n	8012390 <tcp_process+0x534>
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	68db      	ldr	r3, [r3, #12]
 801237a:	687a      	ldr	r2, [r7, #4]
 801237c:	429a      	cmp	r2, r3
 801237e:	d104      	bne.n	801238a <tcp_process+0x52e>
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	68da      	ldr	r2, [r3, #12]
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	60da      	str	r2, [r3, #12]
 8012388:	e005      	b.n	8012396 <tcp_process+0x53a>
 801238a:	697b      	ldr	r3, [r7, #20]
 801238c:	68db      	ldr	r3, [r3, #12]
 801238e:	617b      	str	r3, [r7, #20]
 8012390:	697b      	ldr	r3, [r7, #20]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d1ef      	bne.n	8012376 <tcp_process+0x51a>
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	2200      	movs	r2, #0
 801239a:	60da      	str	r2, [r3, #12]
 801239c:	4b14      	ldr	r3, [pc, #80]	; (80123f0 <tcp_process+0x594>)
 801239e:	2201      	movs	r2, #1
 80123a0:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	220a      	movs	r2, #10
 80123a6:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80123a8:	4b12      	ldr	r3, [pc, #72]	; (80123f4 <tcp_process+0x598>)
 80123aa:	681a      	ldr	r2, [r3, #0]
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	60da      	str	r2, [r3, #12]
 80123b0:	4a10      	ldr	r2, [pc, #64]	; (80123f4 <tcp_process+0x598>)
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	6013      	str	r3, [r2, #0]
 80123b6:	f002 f9a1 	bl	80146fc <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 80123ba:	e0f0      	b.n	801259e <tcp_process+0x742>
 80123bc:	2400a428 	.word	0x2400a428
 80123c0:	2400a420 	.word	0x2400a420
 80123c4:	2400a426 	.word	0x2400a426
 80123c8:	2400a41c 	.word	0x2400a41c
 80123cc:	2400a40c 	.word	0x2400a40c
 80123d0:	2400a844 	.word	0x2400a844
 80123d4:	2400a848 	.word	0x2400a848
 80123d8:	080192f0 	.word	0x080192f0
 80123dc:	080194f4 	.word	0x080194f4
 80123e0:	08019334 	.word	0x08019334
 80123e4:	2400a424 	.word	0x2400a424
 80123e8:	2400a429 	.word	0x2400a429
 80123ec:	2400d8f0 	.word	0x2400d8f0
 80123f0:	2400d8ec 	.word	0x2400d8ec
 80123f4:	2400d900 	.word	0x2400d900
        tcp_ack_now(pcb);
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	7e9b      	ldrb	r3, [r3, #26]
 80123fc:	f043 0302 	orr.w	r3, r3, #2
 8012400:	b2da      	uxtb	r2, r3
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	2208      	movs	r2, #8
 801240a:	751a      	strb	r2, [r3, #20]
    break;
 801240c:	e0c7      	b.n	801259e <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801240e:	4b6a      	ldr	r3, [pc, #424]	; (80125b8 <tcp_process+0x75c>)
 8012410:	781b      	ldrb	r3, [r3, #0]
 8012412:	f003 0310 	and.w	r3, r3, #16
 8012416:	2b00      	cmp	r3, #0
 8012418:	f000 80c1 	beq.w	801259e <tcp_process+0x742>
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012420:	4b66      	ldr	r3, [pc, #408]	; (80125bc <tcp_process+0x760>)
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	429a      	cmp	r2, r3
 8012426:	f040 80ba 	bne.w	801259e <tcp_process+0x742>
               pcb->unsent == NULL) {
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801242e:	2b00      	cmp	r3, #0
 8012430:	f040 80b5 	bne.w	801259e <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2206      	movs	r2, #6
 8012438:	751a      	strb	r2, [r3, #20]
    break;
 801243a:	e0b0      	b.n	801259e <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 801243c:	6878      	ldr	r0, [r7, #4]
 801243e:	f000 f93d 	bl	80126bc <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8012442:	4b5f      	ldr	r3, [pc, #380]	; (80125c0 <tcp_process+0x764>)
 8012444:	781b      	ldrb	r3, [r3, #0]
 8012446:	f003 0320 	and.w	r3, r3, #32
 801244a:	2b00      	cmp	r3, #0
 801244c:	f000 80a9 	beq.w	80125a2 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	7e9b      	ldrb	r3, [r3, #26]
 8012454:	f043 0302 	orr.w	r3, r3, #2
 8012458:	b2da      	uxtb	r2, r3
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 801245e:	6878      	ldr	r0, [r7, #4]
 8012460:	f7fe fe60 	bl	8011124 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012464:	4b57      	ldr	r3, [pc, #348]	; (80125c4 <tcp_process+0x768>)
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	687a      	ldr	r2, [r7, #4]
 801246a:	429a      	cmp	r2, r3
 801246c:	d105      	bne.n	801247a <tcp_process+0x61e>
 801246e:	4b55      	ldr	r3, [pc, #340]	; (80125c4 <tcp_process+0x768>)
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	68db      	ldr	r3, [r3, #12]
 8012474:	4a53      	ldr	r2, [pc, #332]	; (80125c4 <tcp_process+0x768>)
 8012476:	6013      	str	r3, [r2, #0]
 8012478:	e013      	b.n	80124a2 <tcp_process+0x646>
 801247a:	4b52      	ldr	r3, [pc, #328]	; (80125c4 <tcp_process+0x768>)
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	613b      	str	r3, [r7, #16]
 8012480:	e00c      	b.n	801249c <tcp_process+0x640>
 8012482:	693b      	ldr	r3, [r7, #16]
 8012484:	68db      	ldr	r3, [r3, #12]
 8012486:	687a      	ldr	r2, [r7, #4]
 8012488:	429a      	cmp	r2, r3
 801248a:	d104      	bne.n	8012496 <tcp_process+0x63a>
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	68da      	ldr	r2, [r3, #12]
 8012490:	693b      	ldr	r3, [r7, #16]
 8012492:	60da      	str	r2, [r3, #12]
 8012494:	e005      	b.n	80124a2 <tcp_process+0x646>
 8012496:	693b      	ldr	r3, [r7, #16]
 8012498:	68db      	ldr	r3, [r3, #12]
 801249a:	613b      	str	r3, [r7, #16]
 801249c:	693b      	ldr	r3, [r7, #16]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d1ef      	bne.n	8012482 <tcp_process+0x626>
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	2200      	movs	r2, #0
 80124a6:	60da      	str	r2, [r3, #12]
 80124a8:	4b47      	ldr	r3, [pc, #284]	; (80125c8 <tcp_process+0x76c>)
 80124aa:	2201      	movs	r2, #1
 80124ac:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	220a      	movs	r2, #10
 80124b2:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80124b4:	4b45      	ldr	r3, [pc, #276]	; (80125cc <tcp_process+0x770>)
 80124b6:	681a      	ldr	r2, [r3, #0]
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	60da      	str	r2, [r3, #12]
 80124bc:	4a43      	ldr	r2, [pc, #268]	; (80125cc <tcp_process+0x770>)
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	6013      	str	r3, [r2, #0]
 80124c2:	f002 f91b 	bl	80146fc <tcp_timer_needed>
    }
    break;
 80124c6:	e06c      	b.n	80125a2 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	f000 f8f7 	bl	80126bc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80124ce:	4b3a      	ldr	r3, [pc, #232]	; (80125b8 <tcp_process+0x75c>)
 80124d0:	781b      	ldrb	r3, [r3, #0]
 80124d2:	f003 0310 	and.w	r3, r3, #16
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d065      	beq.n	80125a6 <tcp_process+0x74a>
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80124de:	4b37      	ldr	r3, [pc, #220]	; (80125bc <tcp_process+0x760>)
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	429a      	cmp	r2, r3
 80124e4:	d15f      	bne.n	80125a6 <tcp_process+0x74a>
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d15b      	bne.n	80125a6 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f7fe fe18 	bl	8011124 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80124f4:	4b33      	ldr	r3, [pc, #204]	; (80125c4 <tcp_process+0x768>)
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	687a      	ldr	r2, [r7, #4]
 80124fa:	429a      	cmp	r2, r3
 80124fc:	d105      	bne.n	801250a <tcp_process+0x6ae>
 80124fe:	4b31      	ldr	r3, [pc, #196]	; (80125c4 <tcp_process+0x768>)
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	68db      	ldr	r3, [r3, #12]
 8012504:	4a2f      	ldr	r2, [pc, #188]	; (80125c4 <tcp_process+0x768>)
 8012506:	6013      	str	r3, [r2, #0]
 8012508:	e013      	b.n	8012532 <tcp_process+0x6d6>
 801250a:	4b2e      	ldr	r3, [pc, #184]	; (80125c4 <tcp_process+0x768>)
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	60fb      	str	r3, [r7, #12]
 8012510:	e00c      	b.n	801252c <tcp_process+0x6d0>
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	68db      	ldr	r3, [r3, #12]
 8012516:	687a      	ldr	r2, [r7, #4]
 8012518:	429a      	cmp	r2, r3
 801251a:	d104      	bne.n	8012526 <tcp_process+0x6ca>
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	68da      	ldr	r2, [r3, #12]
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	60da      	str	r2, [r3, #12]
 8012524:	e005      	b.n	8012532 <tcp_process+0x6d6>
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	68db      	ldr	r3, [r3, #12]
 801252a:	60fb      	str	r3, [r7, #12]
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d1ef      	bne.n	8012512 <tcp_process+0x6b6>
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	2200      	movs	r2, #0
 8012536:	60da      	str	r2, [r3, #12]
 8012538:	4b23      	ldr	r3, [pc, #140]	; (80125c8 <tcp_process+0x76c>)
 801253a:	2201      	movs	r2, #1
 801253c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	220a      	movs	r2, #10
 8012542:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8012544:	4b21      	ldr	r3, [pc, #132]	; (80125cc <tcp_process+0x770>)
 8012546:	681a      	ldr	r2, [r3, #0]
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	60da      	str	r2, [r3, #12]
 801254c:	4a1f      	ldr	r2, [pc, #124]	; (80125cc <tcp_process+0x770>)
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	6013      	str	r3, [r2, #0]
 8012552:	f002 f8d3 	bl	80146fc <tcp_timer_needed>
    }
    break;
 8012556:	e026      	b.n	80125a6 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 8012558:	6878      	ldr	r0, [r7, #4]
 801255a:	f000 f8af 	bl	80126bc <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801255e:	4b16      	ldr	r3, [pc, #88]	; (80125b8 <tcp_process+0x75c>)
 8012560:	781b      	ldrb	r3, [r3, #0]
 8012562:	f003 0310 	and.w	r3, r3, #16
 8012566:	2b00      	cmp	r3, #0
 8012568:	d01f      	beq.n	80125aa <tcp_process+0x74e>
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801256e:	4b13      	ldr	r3, [pc, #76]	; (80125bc <tcp_process+0x760>)
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	429a      	cmp	r2, r3
 8012574:	d119      	bne.n	80125aa <tcp_process+0x74e>
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801257a:	2b00      	cmp	r3, #0
 801257c:	d115      	bne.n	80125aa <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 801257e:	4b10      	ldr	r3, [pc, #64]	; (80125c0 <tcp_process+0x764>)
 8012580:	781b      	ldrb	r3, [r3, #0]
 8012582:	f043 0310 	orr.w	r3, r3, #16
 8012586:	b2da      	uxtb	r2, r3
 8012588:	4b0d      	ldr	r3, [pc, #52]	; (80125c0 <tcp_process+0x764>)
 801258a:	701a      	strb	r2, [r3, #0]
    }
    break;
 801258c:	e00d      	b.n	80125aa <tcp_process+0x74e>
  default:
    break;
 801258e:	bf00      	nop
 8012590:	e00c      	b.n	80125ac <tcp_process+0x750>
    break;
 8012592:	bf00      	nop
 8012594:	e00a      	b.n	80125ac <tcp_process+0x750>
    break;
 8012596:	bf00      	nop
 8012598:	e008      	b.n	80125ac <tcp_process+0x750>
    break;
 801259a:	bf00      	nop
 801259c:	e006      	b.n	80125ac <tcp_process+0x750>
    break;
 801259e:	bf00      	nop
 80125a0:	e004      	b.n	80125ac <tcp_process+0x750>
    break;
 80125a2:	bf00      	nop
 80125a4:	e002      	b.n	80125ac <tcp_process+0x750>
    break;
 80125a6:	bf00      	nop
 80125a8:	e000      	b.n	80125ac <tcp_process+0x750>
    break;
 80125aa:	bf00      	nop
  }
  return ERR_OK;
 80125ac:	2300      	movs	r3, #0
}
 80125ae:	4618      	mov	r0, r3
 80125b0:	3720      	adds	r7, #32
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bd80      	pop	{r7, pc}
 80125b6:	bf00      	nop
 80125b8:	2400a428 	.word	0x2400a428
 80125bc:	2400a420 	.word	0x2400a420
 80125c0:	2400a429 	.word	0x2400a429
 80125c4:	2400d8f0 	.word	0x2400d8f0
 80125c8:	2400d8ec 	.word	0x2400d8ec
 80125cc:	2400d900 	.word	0x2400d900

080125d0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80125d0:	b590      	push	{r4, r7, lr}
 80125d2:	b085      	sub	sp, #20
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
 80125d8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	68db      	ldr	r3, [r3, #12]
 80125de:	899b      	ldrh	r3, [r3, #12]
 80125e0:	b29b      	uxth	r3, r3
 80125e2:	4618      	mov	r0, r3
 80125e4:	f7fb ffe2 	bl	800e5ac <lwip_htons>
 80125e8:	4603      	mov	r3, r0
 80125ea:	f003 0301 	and.w	r3, r3, #1
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d027      	beq.n	8012642 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80125f2:	6838      	ldr	r0, [r7, #0]
 80125f4:	f7fe fbed 	bl	8010dd2 <tcp_segs_free>
    next = NULL;
 80125f8:	2300      	movs	r3, #0
 80125fa:	603b      	str	r3, [r7, #0]
 80125fc:	e055      	b.n	80126aa <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80125fe:	683b      	ldr	r3, [r7, #0]
 8012600:	68db      	ldr	r3, [r3, #12]
 8012602:	899b      	ldrh	r3, [r3, #12]
 8012604:	b29b      	uxth	r3, r3
 8012606:	4618      	mov	r0, r3
 8012608:	f7fb ffd0 	bl	800e5ac <lwip_htons>
 801260c:	4603      	mov	r3, r0
 801260e:	f003 0301 	and.w	r3, r3, #1
 8012612:	2b00      	cmp	r3, #0
 8012614:	d00d      	beq.n	8012632 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	68db      	ldr	r3, [r3, #12]
 801261a:	899b      	ldrh	r3, [r3, #12]
 801261c:	b29c      	uxth	r4, r3
 801261e:	2001      	movs	r0, #1
 8012620:	f7fb ffc4 	bl	800e5ac <lwip_htons>
 8012624:	4603      	mov	r3, r0
 8012626:	461a      	mov	r2, r3
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	68db      	ldr	r3, [r3, #12]
 801262c:	4322      	orrs	r2, r4
 801262e:	b292      	uxth	r2, r2
 8012630:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801263c:	68f8      	ldr	r0, [r7, #12]
 801263e:	f7fe fbdc 	bl	8010dfa <tcp_seg_free>
    while (next &&
 8012642:	683b      	ldr	r3, [r7, #0]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d00e      	beq.n	8012666 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	891b      	ldrh	r3, [r3, #8]
 801264c:	461a      	mov	r2, r3
 801264e:	4b1a      	ldr	r3, [pc, #104]	; (80126b8 <tcp_oos_insert_segment+0xe8>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	441a      	add	r2, r3
 8012654:	683b      	ldr	r3, [r7, #0]
 8012656:	68db      	ldr	r3, [r3, #12]
 8012658:	685b      	ldr	r3, [r3, #4]
 801265a:	6839      	ldr	r1, [r7, #0]
 801265c:	8909      	ldrh	r1, [r1, #8]
 801265e:	440b      	add	r3, r1
 8012660:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012662:	2b00      	cmp	r3, #0
 8012664:	dacb      	bge.n	80125fe <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d01e      	beq.n	80126aa <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	891b      	ldrh	r3, [r3, #8]
 8012670:	461a      	mov	r2, r3
 8012672:	4b11      	ldr	r3, [pc, #68]	; (80126b8 <tcp_oos_insert_segment+0xe8>)
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	441a      	add	r2, r3
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	68db      	ldr	r3, [r3, #12]
 801267c:	685b      	ldr	r3, [r3, #4]
 801267e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012680:	2b00      	cmp	r3, #0
 8012682:	dd12      	ble.n	80126aa <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012684:	683b      	ldr	r3, [r7, #0]
 8012686:	68db      	ldr	r3, [r3, #12]
 8012688:	685b      	ldr	r3, [r3, #4]
 801268a:	b29a      	uxth	r2, r3
 801268c:	4b0a      	ldr	r3, [pc, #40]	; (80126b8 <tcp_oos_insert_segment+0xe8>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	b29b      	uxth	r3, r3
 8012692:	1ad3      	subs	r3, r2, r3
 8012694:	b29a      	uxth	r2, r3
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	685a      	ldr	r2, [r3, #4]
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	891b      	ldrh	r3, [r3, #8]
 80126a2:	4619      	mov	r1, r3
 80126a4:	4610      	mov	r0, r2
 80126a6:	f7fd f8e1 	bl	800f86c <pbuf_realloc>
    }
  }
  cseg->next = next;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	683a      	ldr	r2, [r7, #0]
 80126ae:	601a      	str	r2, [r3, #0]
}
 80126b0:	bf00      	nop
 80126b2:	3714      	adds	r7, #20
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd90      	pop	{r4, r7, pc}
 80126b8:	2400a41c 	.word	0x2400a41c

080126bc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80126bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126be:	b08d      	sub	sp, #52	; 0x34
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 80126c4:	2300      	movs	r3, #0
 80126c6:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	7d1b      	ldrb	r3, [r3, #20]
 80126cc:	2b03      	cmp	r3, #3
 80126ce:	d806      	bhi.n	80126de <tcp_receive+0x22>
 80126d0:	4ba6      	ldr	r3, [pc, #664]	; (801296c <tcp_receive+0x2b0>)
 80126d2:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80126d6:	49a6      	ldr	r1, [pc, #664]	; (8012970 <tcp_receive+0x2b4>)
 80126d8:	48a6      	ldr	r0, [pc, #664]	; (8012974 <tcp_receive+0x2b8>)
 80126da:	f004 fea9 	bl	8017430 <iprintf>

  if (flags & TCP_ACK) {
 80126de:	4ba6      	ldr	r3, [pc, #664]	; (8012978 <tcp_receive+0x2bc>)
 80126e0:	781b      	ldrb	r3, [r3, #0]
 80126e2:	f003 0310 	and.w	r3, r3, #16
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	f000 82bf 	beq.w	8012c6a <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80126f2:	461a      	mov	r2, r3
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80126f8:	4413      	add	r3, r2
 80126fa:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012700:	4b9e      	ldr	r3, [pc, #632]	; (801297c <tcp_receive+0x2c0>)
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	1ad3      	subs	r3, r2, r3
 8012706:	2b00      	cmp	r3, #0
 8012708:	db1b      	blt.n	8012742 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801270e:	4b9b      	ldr	r3, [pc, #620]	; (801297c <tcp_receive+0x2c0>)
 8012710:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012712:	429a      	cmp	r2, r3
 8012714:	d106      	bne.n	8012724 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801271a:	4b99      	ldr	r3, [pc, #612]	; (8012980 <tcp_receive+0x2c4>)
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	1ad3      	subs	r3, r2, r3
 8012720:	2b00      	cmp	r3, #0
 8012722:	db0e      	blt.n	8012742 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012728:	4b95      	ldr	r3, [pc, #596]	; (8012980 <tcp_receive+0x2c4>)
 801272a:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801272c:	429a      	cmp	r2, r3
 801272e:	d141      	bne.n	80127b4 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012730:	4b94      	ldr	r3, [pc, #592]	; (8012984 <tcp_receive+0x2c8>)
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	89db      	ldrh	r3, [r3, #14]
 8012736:	b29a      	uxth	r2, r3
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801273e:	429a      	cmp	r2, r3
 8012740:	d938      	bls.n	80127b4 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012742:	4b90      	ldr	r3, [pc, #576]	; (8012984 <tcp_receive+0x2c8>)
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	89db      	ldrh	r3, [r3, #14]
 8012748:	b29a      	uxth	r2, r3
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801275c:	429a      	cmp	r2, r3
 801275e:	d205      	bcs.n	801276c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 801276c:	4b83      	ldr	r3, [pc, #524]	; (801297c <tcp_receive+0x2c0>)
 801276e:	681a      	ldr	r2, [r3, #0]
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8012774:	4b82      	ldr	r3, [pc, #520]	; (8012980 <tcp_receive+0x2c4>)
 8012776:	681a      	ldr	r2, [r3, #0]
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012782:	2b00      	cmp	r3, #0
 8012784:	d10d      	bne.n	80127a2 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801278c:	2b00      	cmp	r3, #0
 801278e:	d111      	bne.n	80127b4 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2200      	movs	r2, #0
 8012794:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	2201      	movs	r2, #1
 801279c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 80127a0:	e008      	b.n	80127b4 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d003      	beq.n	80127b4 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2200      	movs	r2, #0
 80127b0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80127b4:	4b72      	ldr	r3, [pc, #456]	; (8012980 <tcp_receive+0x2c4>)
 80127b6:	681a      	ldr	r2, [r3, #0]
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127bc:	1ad3      	subs	r3, r2, r3
 80127be:	2b00      	cmp	r3, #0
 80127c0:	dc53      	bgt.n	801286a <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 80127c2:	4b71      	ldr	r3, [pc, #452]	; (8012988 <tcp_receive+0x2cc>)
 80127c4:	881b      	ldrh	r3, [r3, #0]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d146      	bne.n	8012858 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80127ce:	687a      	ldr	r2, [r7, #4]
 80127d0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 80127d4:	4413      	add	r3, r2
 80127d6:	697a      	ldr	r2, [r7, #20]
 80127d8:	429a      	cmp	r2, r3
 80127da:	d13d      	bne.n	8012858 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	db38      	blt.n	8012858 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80127ea:	4b65      	ldr	r3, [pc, #404]	; (8012980 <tcp_receive+0x2c4>)
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	429a      	cmp	r2, r3
 80127f0:	d132      	bne.n	8012858 <tcp_receive+0x19c>
              found_dupack = 1;
 80127f2:	2301      	movs	r3, #1
 80127f4:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80127fc:	2bff      	cmp	r3, #255	; 0xff
 80127fe:	d007      	beq.n	8012810 <tcp_receive+0x154>
                ++pcb->dupacks;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012806:	3301      	adds	r3, #1
 8012808:	b2da      	uxtb	r2, r3
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012816:	2b03      	cmp	r3, #3
 8012818:	d916      	bls.n	8012848 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012824:	4413      	add	r3, r2
 8012826:	b29a      	uxth	r2, r3
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801282e:	429a      	cmp	r2, r3
 8012830:	d912      	bls.n	8012858 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801283c:	4413      	add	r3, r2
 801283e:	b29a      	uxth	r2, r3
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012846:	e007      	b.n	8012858 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801284e:	2b03      	cmp	r3, #3
 8012850:	d102      	bne.n	8012858 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8012852:	6878      	ldr	r0, [r7, #4]
 8012854:	f001 fdfc 	bl	8014450 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012858:	69fb      	ldr	r3, [r7, #28]
 801285a:	2b00      	cmp	r3, #0
 801285c:	f040 8169 	bne.w	8012b32 <tcp_receive+0x476>
        pcb->dupacks = 0;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2200      	movs	r2, #0
 8012864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012868:	e163      	b.n	8012b32 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801286a:	4b45      	ldr	r3, [pc, #276]	; (8012980 <tcp_receive+0x2c4>)
 801286c:	681a      	ldr	r2, [r3, #0]
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012872:	1ad3      	subs	r3, r2, r3
 8012874:	3b01      	subs	r3, #1
 8012876:	2b00      	cmp	r3, #0
 8012878:	f2c0 8107 	blt.w	8012a8a <tcp_receive+0x3ce>
 801287c:	4b40      	ldr	r3, [pc, #256]	; (8012980 <tcp_receive+0x2c4>)
 801287e:	681a      	ldr	r2, [r3, #0]
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012884:	1ad3      	subs	r3, r2, r3
 8012886:	2b00      	cmp	r3, #0
 8012888:	f300 80ff 	bgt.w	8012a8a <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	7e9b      	ldrb	r3, [r3, #26]
 8012890:	f003 0304 	and.w	r3, r3, #4
 8012894:	2b00      	cmp	r3, #0
 8012896:	d00c      	beq.n	80128b2 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	7e9b      	ldrb	r3, [r3, #26]
 801289c:	f023 0304 	bic.w	r3, r3, #4
 80128a0:	b2da      	uxtb	r2, r3
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	2200      	movs	r2, #0
 80128b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80128c0:	10db      	asrs	r3, r3, #3
 80128c2:	b21b      	sxth	r3, r3
 80128c4:	b29a      	uxth	r2, r3
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80128cc:	b29b      	uxth	r3, r3
 80128ce:	4413      	add	r3, r2
 80128d0:	b29b      	uxth	r3, r3
 80128d2:	b21a      	sxth	r2, r3
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	2200      	movs	r2, #0
 80128de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80128e2:	4b27      	ldr	r3, [pc, #156]	; (8012980 <tcp_receive+0x2c4>)
 80128e4:	681a      	ldr	r2, [r3, #0]
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	7d1b      	ldrb	r3, [r3, #20]
 80128ee:	2b03      	cmp	r3, #3
 80128f0:	f240 8094 	bls.w	8012a1c <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012900:	429a      	cmp	r2, r3
 8012902:	d216      	bcs.n	8012932 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801290e:	4413      	add	r3, r2
 8012910:	b29a      	uxth	r2, r3
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012918:	429a      	cmp	r2, r3
 801291a:	d97f      	bls.n	8012a1c <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012926:	4413      	add	r3, r2
 8012928:	b29a      	uxth	r2, r3
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012930:	e074      	b.n	8012a1c <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801293c:	4619      	mov	r1, r3
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012942:	fb03 f301 	mul.w	r3, r3, r1
 8012946:	6879      	ldr	r1, [r7, #4]
 8012948:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 801294c:	fb93 f3f1 	sdiv	r3, r3, r1
 8012950:	b29b      	uxth	r3, r3
 8012952:	4413      	add	r3, r2
 8012954:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801295c:	8a7a      	ldrh	r2, [r7, #18]
 801295e:	429a      	cmp	r2, r3
 8012960:	d95c      	bls.n	8012a1c <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	8a7a      	ldrh	r2, [r7, #18]
 8012966:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 801296a:	e057      	b.n	8012a1c <tcp_receive+0x360>
 801296c:	080192f0 	.word	0x080192f0
 8012970:	08019514 	.word	0x08019514
 8012974:	08019334 	.word	0x08019334
 8012978:	2400a428 	.word	0x2400a428
 801297c:	2400a41c 	.word	0x2400a41c
 8012980:	2400a420 	.word	0x2400a420
 8012984:	2400a40c 	.word	0x2400a40c
 8012988:	2400a426 	.word	0x2400a426
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012990:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012996:	681a      	ldr	r2, [r3, #0]
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 80129a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129a4:	685b      	ldr	r3, [r3, #4]
 80129a6:	4618      	mov	r0, r3
 80129a8:	f7fd f96e 	bl	800fc88 <pbuf_clen>
 80129ac:	4603      	mov	r3, r0
 80129ae:	429c      	cmp	r4, r3
 80129b0:	d206      	bcs.n	80129c0 <tcp_receive+0x304>
 80129b2:	4b70      	ldr	r3, [pc, #448]	; (8012b74 <tcp_receive+0x4b8>)
 80129b4:	f240 429e 	movw	r2, #1182	; 0x49e
 80129b8:	496f      	ldr	r1, [pc, #444]	; (8012b78 <tcp_receive+0x4bc>)
 80129ba:	4870      	ldr	r0, [pc, #448]	; (8012b7c <tcp_receive+0x4c0>)
 80129bc:	f004 fd38 	bl	8017430 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 80129c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129c2:	685b      	ldr	r3, [r3, #4]
 80129c4:	4618      	mov	r0, r3
 80129c6:	f7fd f95f 	bl	800fc88 <pbuf_clen>
 80129ca:	4603      	mov	r3, r0
 80129cc:	461a      	mov	r2, r3
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80129d4:	1a9b      	subs	r3, r3, r2
 80129d6:	b29a      	uxth	r2, r3
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 80129de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e0:	891a      	ldrh	r2, [r3, #8]
 80129e2:	4b67      	ldr	r3, [pc, #412]	; (8012b80 <tcp_receive+0x4c4>)
 80129e4:	881b      	ldrh	r3, [r3, #0]
 80129e6:	4413      	add	r3, r2
 80129e8:	b29a      	uxth	r2, r3
 80129ea:	4b65      	ldr	r3, [pc, #404]	; (8012b80 <tcp_receive+0x4c4>)
 80129ec:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 80129ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80129f0:	f7fe fa03 	bl	8010dfa <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d00e      	beq.n	8012a1c <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d10a      	bne.n	8012a1c <tcp_receive+0x360>
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d106      	bne.n	8012a1c <tcp_receive+0x360>
 8012a0e:	4b59      	ldr	r3, [pc, #356]	; (8012b74 <tcp_receive+0x4b8>)
 8012a10:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8012a14:	495b      	ldr	r1, [pc, #364]	; (8012b84 <tcp_receive+0x4c8>)
 8012a16:	4859      	ldr	r0, [pc, #356]	; (8012b7c <tcp_receive+0x4c0>)
 8012a18:	f004 fd0a 	bl	8017430 <iprintf>
      while (pcb->unacked != NULL &&
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d022      	beq.n	8012a6a <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a28:	68db      	ldr	r3, [r3, #12]
 8012a2a:	685b      	ldr	r3, [r3, #4]
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	f7fb fdcb 	bl	800e5c8 <lwip_htonl>
 8012a32:	4604      	mov	r4, r0
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a38:	891b      	ldrh	r3, [r3, #8]
 8012a3a:	461d      	mov	r5, r3
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a40:	68db      	ldr	r3, [r3, #12]
 8012a42:	899b      	ldrh	r3, [r3, #12]
 8012a44:	b29b      	uxth	r3, r3
 8012a46:	4618      	mov	r0, r3
 8012a48:	f7fb fdb0 	bl	800e5ac <lwip_htons>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	f003 0303 	and.w	r3, r3, #3
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d001      	beq.n	8012a5a <tcp_receive+0x39e>
 8012a56:	2301      	movs	r3, #1
 8012a58:	e000      	b.n	8012a5c <tcp_receive+0x3a0>
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	442b      	add	r3, r5
 8012a5e:	18e2      	adds	r2, r4, r3
 8012a60:	4b49      	ldr	r3, [pc, #292]	; (8012b88 <tcp_receive+0x4cc>)
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	dd90      	ble.n	801298c <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d104      	bne.n	8012a7c <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a78:	861a      	strh	r2, [r3, #48]	; 0x30
 8012a7a:	e002      	b.n	8012a82 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	2200      	movs	r2, #0
 8012a80:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	2200      	movs	r2, #0
 8012a86:	76da      	strb	r2, [r3, #27]
 8012a88:	e002      	b.n	8012a90 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012a8a:	6878      	ldr	r0, [r7, #4]
 8012a8c:	f001 f8fe 	bl	8013c8c <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8012a90:	e04f      	b.n	8012b32 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012a96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012a9c:	681a      	ldr	r2, [r3, #0]
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d103      	bne.n	8012ab2 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	2200      	movs	r2, #0
 8012aae:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8012ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aba:	685b      	ldr	r3, [r3, #4]
 8012abc:	4618      	mov	r0, r3
 8012abe:	f7fd f8e3 	bl	800fc88 <pbuf_clen>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	429c      	cmp	r4, r3
 8012ac6:	d206      	bcs.n	8012ad6 <tcp_receive+0x41a>
 8012ac8:	4b2a      	ldr	r3, [pc, #168]	; (8012b74 <tcp_receive+0x4b8>)
 8012aca:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8012ace:	492a      	ldr	r1, [pc, #168]	; (8012b78 <tcp_receive+0x4bc>)
 8012ad0:	482a      	ldr	r0, [pc, #168]	; (8012b7c <tcp_receive+0x4c0>)
 8012ad2:	f004 fcad 	bl	8017430 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8012ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ad8:	685b      	ldr	r3, [r3, #4]
 8012ada:	4618      	mov	r0, r3
 8012adc:	f7fd f8d4 	bl	800fc88 <pbuf_clen>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	461a      	mov	r2, r3
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012aea:	1a9b      	subs	r3, r3, r2
 8012aec:	b29a      	uxth	r2, r3
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8012af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012af6:	891a      	ldrh	r2, [r3, #8]
 8012af8:	4b21      	ldr	r3, [pc, #132]	; (8012b80 <tcp_receive+0x4c4>)
 8012afa:	881b      	ldrh	r3, [r3, #0]
 8012afc:	4413      	add	r3, r2
 8012afe:	b29a      	uxth	r2, r3
 8012b00:	4b1f      	ldr	r3, [pc, #124]	; (8012b80 <tcp_receive+0x4c4>)
 8012b02:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8012b04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b06:	f7fe f978 	bl	8010dfa <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d00e      	beq.n	8012b32 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d10a      	bne.n	8012b32 <tcp_receive+0x476>
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d106      	bne.n	8012b32 <tcp_receive+0x476>
 8012b24:	4b13      	ldr	r3, [pc, #76]	; (8012b74 <tcp_receive+0x4b8>)
 8012b26:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8012b2a:	4916      	ldr	r1, [pc, #88]	; (8012b84 <tcp_receive+0x4c8>)
 8012b2c:	4813      	ldr	r0, [pc, #76]	; (8012b7c <tcp_receive+0x4c0>)
 8012b2e:	f004 fc7f 	bl	8017430 <iprintf>
    while (pcb->unsent != NULL &&
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d036      	beq.n	8012ba8 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8012b3a:	4b13      	ldr	r3, [pc, #76]	; (8012b88 <tcp_receive+0x4cc>)
 8012b3c:	681c      	ldr	r4, [r3, #0]
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012b42:	68db      	ldr	r3, [r3, #12]
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	4618      	mov	r0, r3
 8012b48:	f7fb fd3e 	bl	800e5c8 <lwip_htonl>
 8012b4c:	4605      	mov	r5, r0
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012b52:	891b      	ldrh	r3, [r3, #8]
 8012b54:	461e      	mov	r6, r3
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012b5a:	68db      	ldr	r3, [r3, #12]
 8012b5c:	899b      	ldrh	r3, [r3, #12]
 8012b5e:	b29b      	uxth	r3, r3
 8012b60:	4618      	mov	r0, r3
 8012b62:	f7fb fd23 	bl	800e5ac <lwip_htons>
 8012b66:	4603      	mov	r3, r0
 8012b68:	f003 0303 	and.w	r3, r3, #3
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d00d      	beq.n	8012b8c <tcp_receive+0x4d0>
 8012b70:	2301      	movs	r3, #1
 8012b72:	e00c      	b.n	8012b8e <tcp_receive+0x4d2>
 8012b74:	080192f0 	.word	0x080192f0
 8012b78:	08019530 	.word	0x08019530
 8012b7c:	08019334 	.word	0x08019334
 8012b80:	2400a424 	.word	0x2400a424
 8012b84:	08019558 	.word	0x08019558
 8012b88:	2400a420 	.word	0x2400a420
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	4433      	add	r3, r6
 8012b90:	442b      	add	r3, r5
 8012b92:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	db07      	blt.n	8012ba8 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8012b98:	4b8d      	ldr	r3, [pc, #564]	; (8012dd0 <tcp_receive+0x714>)
 8012b9a:	681a      	ldr	r2, [r3, #0]
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ba0:	1ad3      	subs	r3, r2, r3
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	f77f af75 	ble.w	8012a92 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012bae:	4b89      	ldr	r3, [pc, #548]	; (8012dd4 <tcp_receive+0x718>)
 8012bb0:	881b      	ldrh	r3, [r3, #0]
 8012bb2:	4413      	add	r3, r2
 8012bb4:	b29a      	uxth	r2, r3
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d052      	beq.n	8012c6a <tcp_receive+0x5ae>
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012bc8:	4b81      	ldr	r3, [pc, #516]	; (8012dd0 <tcp_receive+0x714>)
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	1ad3      	subs	r3, r2, r3
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	da4b      	bge.n	8012c6a <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012bd2:	4b81      	ldr	r3, [pc, #516]	; (8012dd8 <tcp_receive+0x71c>)
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	b29a      	uxth	r2, r3
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bdc:	b29b      	uxth	r3, r3
 8012bde:	1ad3      	subs	r3, r2, r3
 8012be0:	b29b      	uxth	r3, r3
 8012be2:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8012be4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012bec:	10db      	asrs	r3, r3, #3
 8012bee:	b21b      	sxth	r3, r3
 8012bf0:	b29b      	uxth	r3, r3
 8012bf2:	1ad3      	subs	r3, r2, r3
 8012bf4:	b29b      	uxth	r3, r3
 8012bf6:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012bfe:	b29a      	uxth	r2, r3
 8012c00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012c02:	4413      	add	r3, r2
 8012c04:	b29b      	uxth	r3, r3
 8012c06:	b21a      	sxth	r2, r3
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012c0c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	da03      	bge.n	8012c1c <tcp_receive+0x560>
        m = -m;
 8012c14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012c16:	425b      	negs	r3, r3
 8012c18:	b29b      	uxth	r3, r3
 8012c1a:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8012c1c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012c24:	109b      	asrs	r3, r3, #2
 8012c26:	b21b      	sxth	r3, r3
 8012c28:	b29b      	uxth	r3, r3
 8012c2a:	1ad3      	subs	r3, r2, r3
 8012c2c:	b29b      	uxth	r3, r3
 8012c2e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012c36:	b29a      	uxth	r2, r3
 8012c38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012c3a:	4413      	add	r3, r2
 8012c3c:	b29b      	uxth	r3, r3
 8012c3e:	b21a      	sxth	r2, r3
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012c4a:	10db      	asrs	r3, r3, #3
 8012c4c:	b21b      	sxth	r3, r3
 8012c4e:	b29a      	uxth	r2, r3
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012c56:	b29b      	uxth	r3, r3
 8012c58:	4413      	add	r3, r2
 8012c5a:	b29b      	uxth	r3, r3
 8012c5c:	b21a      	sxth	r2, r3
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2200      	movs	r2, #0
 8012c68:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012c6a:	4b5c      	ldr	r3, [pc, #368]	; (8012ddc <tcp_receive+0x720>)
 8012c6c:	881b      	ldrh	r3, [r3, #0]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	f000 84f1 	beq.w	8013656 <tcp_receive+0xf9a>
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	7d1b      	ldrb	r3, [r3, #20]
 8012c78:	2b06      	cmp	r3, #6
 8012c7a:	f200 84ec 	bhi.w	8013656 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c82:	4b57      	ldr	r3, [pc, #348]	; (8012de0 <tcp_receive+0x724>)
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	1ad3      	subs	r3, r2, r3
 8012c88:	3b01      	subs	r3, #1
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	f2c0 80b8 	blt.w	8012e00 <tcp_receive+0x744>
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c94:	4b51      	ldr	r3, [pc, #324]	; (8012ddc <tcp_receive+0x720>)
 8012c96:	881b      	ldrh	r3, [r3, #0]
 8012c98:	4619      	mov	r1, r3
 8012c9a:	4b51      	ldr	r3, [pc, #324]	; (8012de0 <tcp_receive+0x724>)
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	440b      	add	r3, r1
 8012ca0:	1ad3      	subs	r3, r2, r3
 8012ca2:	3301      	adds	r3, #1
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	f300 80ab 	bgt.w	8012e00 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012caa:	4b4e      	ldr	r3, [pc, #312]	; (8012de4 <tcp_receive+0x728>)
 8012cac:	685b      	ldr	r3, [r3, #4]
 8012cae:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012cb4:	4b4a      	ldr	r3, [pc, #296]	; (8012de0 <tcp_receive+0x724>)
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	1ad3      	subs	r3, r2, r3
 8012cba:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012cbc:	4b49      	ldr	r3, [pc, #292]	; (8012de4 <tcp_receive+0x728>)
 8012cbe:	685b      	ldr	r3, [r3, #4]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d106      	bne.n	8012cd2 <tcp_receive+0x616>
 8012cc4:	4b48      	ldr	r3, [pc, #288]	; (8012de8 <tcp_receive+0x72c>)
 8012cc6:	f240 523c 	movw	r2, #1340	; 0x53c
 8012cca:	4948      	ldr	r1, [pc, #288]	; (8012dec <tcp_receive+0x730>)
 8012ccc:	4848      	ldr	r0, [pc, #288]	; (8012df0 <tcp_receive+0x734>)
 8012cce:	f004 fbaf 	bl	8017430 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8012cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd4:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8012cd8:	4293      	cmp	r3, r2
 8012cda:	dd06      	ble.n	8012cea <tcp_receive+0x62e>
 8012cdc:	4b42      	ldr	r3, [pc, #264]	; (8012de8 <tcp_receive+0x72c>)
 8012cde:	f240 523d 	movw	r2, #1341	; 0x53d
 8012ce2:	4944      	ldr	r1, [pc, #272]	; (8012df4 <tcp_receive+0x738>)
 8012ce4:	4842      	ldr	r0, [pc, #264]	; (8012df0 <tcp_receive+0x734>)
 8012ce6:	f004 fba3 	bl	8017430 <iprintf>
      if (inseg.p->len < off) {
 8012cea:	4b3e      	ldr	r3, [pc, #248]	; (8012de4 <tcp_receive+0x728>)
 8012cec:	685b      	ldr	r3, [r3, #4]
 8012cee:	895b      	ldrh	r3, [r3, #10]
 8012cf0:	461a      	mov	r2, r3
 8012cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cf4:	4293      	cmp	r3, r2
 8012cf6:	dd3e      	ble.n	8012d76 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012cf8:	4b3a      	ldr	r3, [pc, #232]	; (8012de4 <tcp_receive+0x728>)
 8012cfa:	685b      	ldr	r3, [r3, #4]
 8012cfc:	891b      	ldrh	r3, [r3, #8]
 8012cfe:	461a      	mov	r2, r3
 8012d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d02:	4293      	cmp	r3, r2
 8012d04:	dd06      	ble.n	8012d14 <tcp_receive+0x658>
 8012d06:	4b38      	ldr	r3, [pc, #224]	; (8012de8 <tcp_receive+0x72c>)
 8012d08:	f240 523f 	movw	r2, #1343	; 0x53f
 8012d0c:	493a      	ldr	r1, [pc, #232]	; (8012df8 <tcp_receive+0x73c>)
 8012d0e:	4838      	ldr	r0, [pc, #224]	; (8012df0 <tcp_receive+0x734>)
 8012d10:	f004 fb8e 	bl	8017430 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012d14:	4b33      	ldr	r3, [pc, #204]	; (8012de4 <tcp_receive+0x728>)
 8012d16:	685b      	ldr	r3, [r3, #4]
 8012d18:	891a      	ldrh	r2, [r3, #8]
 8012d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d1c:	b29b      	uxth	r3, r3
 8012d1e:	1ad3      	subs	r3, r2, r3
 8012d20:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8012d22:	e00e      	b.n	8012d42 <tcp_receive+0x686>
          off -= p->len;
 8012d24:	69bb      	ldr	r3, [r7, #24]
 8012d26:	895b      	ldrh	r3, [r3, #10]
 8012d28:	461a      	mov	r2, r3
 8012d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d2c:	1a9b      	subs	r3, r3, r2
 8012d2e:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8012d30:	69bb      	ldr	r3, [r7, #24]
 8012d32:	8a3a      	ldrh	r2, [r7, #16]
 8012d34:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8012d36:	69bb      	ldr	r3, [r7, #24]
 8012d38:	2200      	movs	r2, #0
 8012d3a:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8012d3c:	69bb      	ldr	r3, [r7, #24]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8012d42:	69bb      	ldr	r3, [r7, #24]
 8012d44:	895b      	ldrh	r3, [r3, #10]
 8012d46:	461a      	mov	r2, r3
 8012d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d4a:	4293      	cmp	r3, r2
 8012d4c:	dcea      	bgt.n	8012d24 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8012d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d50:	b29b      	uxth	r3, r3
 8012d52:	425b      	negs	r3, r3
 8012d54:	b29b      	uxth	r3, r3
 8012d56:	b21b      	sxth	r3, r3
 8012d58:	4619      	mov	r1, r3
 8012d5a:	69b8      	ldr	r0, [r7, #24]
 8012d5c:	f7fc fed6 	bl	800fb0c <pbuf_header>
 8012d60:	4603      	mov	r3, r0
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d01c      	beq.n	8012da0 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8012d66:	4b20      	ldr	r3, [pc, #128]	; (8012de8 <tcp_receive+0x72c>)
 8012d68:	f240 524c 	movw	r2, #1356	; 0x54c
 8012d6c:	4923      	ldr	r1, [pc, #140]	; (8012dfc <tcp_receive+0x740>)
 8012d6e:	4820      	ldr	r0, [pc, #128]	; (8012df0 <tcp_receive+0x734>)
 8012d70:	f004 fb5e 	bl	8017430 <iprintf>
 8012d74:	e014      	b.n	8012da0 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8012d76:	4b1b      	ldr	r3, [pc, #108]	; (8012de4 <tcp_receive+0x728>)
 8012d78:	685b      	ldr	r3, [r3, #4]
 8012d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d7c:	b292      	uxth	r2, r2
 8012d7e:	4252      	negs	r2, r2
 8012d80:	b292      	uxth	r2, r2
 8012d82:	b212      	sxth	r2, r2
 8012d84:	4611      	mov	r1, r2
 8012d86:	4618      	mov	r0, r3
 8012d88:	f7fc fec0 	bl	800fb0c <pbuf_header>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d006      	beq.n	8012da0 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8012d92:	4b15      	ldr	r3, [pc, #84]	; (8012de8 <tcp_receive+0x72c>)
 8012d94:	f240 5251 	movw	r2, #1361	; 0x551
 8012d98:	4918      	ldr	r1, [pc, #96]	; (8012dfc <tcp_receive+0x740>)
 8012d9a:	4815      	ldr	r0, [pc, #84]	; (8012df0 <tcp_receive+0x734>)
 8012d9c:	f004 fb48 	bl	8017430 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8012da0:	4b10      	ldr	r3, [pc, #64]	; (8012de4 <tcp_receive+0x728>)
 8012da2:	891a      	ldrh	r2, [r3, #8]
 8012da4:	4b0e      	ldr	r3, [pc, #56]	; (8012de0 <tcp_receive+0x724>)
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	b299      	uxth	r1, r3
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dae:	b29b      	uxth	r3, r3
 8012db0:	1acb      	subs	r3, r1, r3
 8012db2:	b29b      	uxth	r3, r3
 8012db4:	4413      	add	r3, r2
 8012db6:	b29a      	uxth	r2, r3
 8012db8:	4b0a      	ldr	r3, [pc, #40]	; (8012de4 <tcp_receive+0x728>)
 8012dba:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dc0:	4a07      	ldr	r2, [pc, #28]	; (8012de0 <tcp_receive+0x724>)
 8012dc2:	6013      	str	r3, [r2, #0]
 8012dc4:	4b07      	ldr	r3, [pc, #28]	; (8012de4 <tcp_receive+0x728>)
 8012dc6:	68db      	ldr	r3, [r3, #12]
 8012dc8:	4a05      	ldr	r2, [pc, #20]	; (8012de0 <tcp_receive+0x724>)
 8012dca:	6812      	ldr	r2, [r2, #0]
 8012dcc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012dce:	e025      	b.n	8012e1c <tcp_receive+0x760>
 8012dd0:	2400a420 	.word	0x2400a420
 8012dd4:	2400a424 	.word	0x2400a424
 8012dd8:	2400d8f4 	.word	0x2400d8f4
 8012ddc:	2400a426 	.word	0x2400a426
 8012de0:	2400a41c 	.word	0x2400a41c
 8012de4:	2400a3fc 	.word	0x2400a3fc
 8012de8:	080192f0 	.word	0x080192f0
 8012dec:	08019578 	.word	0x08019578
 8012df0:	08019334 	.word	0x08019334
 8012df4:	08019588 	.word	0x08019588
 8012df8:	08019598 	.word	0x08019598
 8012dfc:	080195a8 	.word	0x080195a8
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012e00:	4b87      	ldr	r3, [pc, #540]	; (8013020 <tcp_receive+0x964>)
 8012e02:	681a      	ldr	r2, [r3, #0]
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e08:	1ad3      	subs	r3, r2, r3
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	da06      	bge.n	8012e1c <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	7e9b      	ldrb	r3, [r3, #26]
 8012e12:	f043 0302 	orr.w	r3, r3, #2
 8012e16:	b2da      	uxtb	r2, r3
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012e1c:	4b80      	ldr	r3, [pc, #512]	; (8013020 <tcp_receive+0x964>)
 8012e1e:	681a      	ldr	r2, [r3, #0]
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e24:	1ad3      	subs	r3, r2, r3
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	f2c0 8410 	blt.w	801364c <tcp_receive+0xf90>
 8012e2c:	4b7c      	ldr	r3, [pc, #496]	; (8013020 <tcp_receive+0x964>)
 8012e2e:	681a      	ldr	r2, [r3, #0]
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e34:	6879      	ldr	r1, [r7, #4]
 8012e36:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012e38:	440b      	add	r3, r1
 8012e3a:	1ad3      	subs	r3, r2, r3
 8012e3c:	3301      	adds	r3, #1
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	f300 8404 	bgt.w	801364c <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012e48:	4b75      	ldr	r3, [pc, #468]	; (8013020 <tcp_receive+0x964>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	429a      	cmp	r2, r3
 8012e4e:	f040 8287 	bne.w	8013360 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012e52:	4b74      	ldr	r3, [pc, #464]	; (8013024 <tcp_receive+0x968>)
 8012e54:	891c      	ldrh	r4, [r3, #8]
 8012e56:	4b73      	ldr	r3, [pc, #460]	; (8013024 <tcp_receive+0x968>)
 8012e58:	68db      	ldr	r3, [r3, #12]
 8012e5a:	899b      	ldrh	r3, [r3, #12]
 8012e5c:	b29b      	uxth	r3, r3
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f7fb fba4 	bl	800e5ac <lwip_htons>
 8012e64:	4603      	mov	r3, r0
 8012e66:	f003 0303 	and.w	r3, r3, #3
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d001      	beq.n	8012e72 <tcp_receive+0x7b6>
 8012e6e:	2301      	movs	r3, #1
 8012e70:	e000      	b.n	8012e74 <tcp_receive+0x7b8>
 8012e72:	2300      	movs	r3, #0
 8012e74:	4423      	add	r3, r4
 8012e76:	b29a      	uxth	r2, r3
 8012e78:	4b6b      	ldr	r3, [pc, #428]	; (8013028 <tcp_receive+0x96c>)
 8012e7a:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012e80:	4b69      	ldr	r3, [pc, #420]	; (8013028 <tcp_receive+0x96c>)
 8012e82:	881b      	ldrh	r3, [r3, #0]
 8012e84:	429a      	cmp	r2, r3
 8012e86:	d26e      	bcs.n	8012f66 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012e88:	4b66      	ldr	r3, [pc, #408]	; (8013024 <tcp_receive+0x968>)
 8012e8a:	68db      	ldr	r3, [r3, #12]
 8012e8c:	899b      	ldrh	r3, [r3, #12]
 8012e8e:	b29b      	uxth	r3, r3
 8012e90:	4618      	mov	r0, r3
 8012e92:	f7fb fb8b 	bl	800e5ac <lwip_htons>
 8012e96:	4603      	mov	r3, r0
 8012e98:	f003 0301 	and.w	r3, r3, #1
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d01b      	beq.n	8012ed8 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012ea0:	4b60      	ldr	r3, [pc, #384]	; (8013024 <tcp_receive+0x968>)
 8012ea2:	68db      	ldr	r3, [r3, #12]
 8012ea4:	899b      	ldrh	r3, [r3, #12]
 8012ea6:	b29b      	uxth	r3, r3
 8012ea8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012eac:	b29c      	uxth	r4, r3
 8012eae:	4b5d      	ldr	r3, [pc, #372]	; (8013024 <tcp_receive+0x968>)
 8012eb0:	68db      	ldr	r3, [r3, #12]
 8012eb2:	899b      	ldrh	r3, [r3, #12]
 8012eb4:	b29b      	uxth	r3, r3
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f7fb fb78 	bl	800e5ac <lwip_htons>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012ec2:	b29b      	uxth	r3, r3
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f7fb fb71 	bl	800e5ac <lwip_htons>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	461a      	mov	r2, r3
 8012ece:	4b55      	ldr	r3, [pc, #340]	; (8013024 <tcp_receive+0x968>)
 8012ed0:	68db      	ldr	r3, [r3, #12]
 8012ed2:	4322      	orrs	r2, r4
 8012ed4:	b292      	uxth	r2, r2
 8012ed6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012edc:	4b51      	ldr	r3, [pc, #324]	; (8013024 <tcp_receive+0x968>)
 8012ede:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012ee0:	4b50      	ldr	r3, [pc, #320]	; (8013024 <tcp_receive+0x968>)
 8012ee2:	68db      	ldr	r3, [r3, #12]
 8012ee4:	899b      	ldrh	r3, [r3, #12]
 8012ee6:	b29b      	uxth	r3, r3
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7fb fb5f 	bl	800e5ac <lwip_htons>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	f003 0302 	and.w	r3, r3, #2
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d005      	beq.n	8012f04 <tcp_receive+0x848>
            inseg.len -= 1;
 8012ef8:	4b4a      	ldr	r3, [pc, #296]	; (8013024 <tcp_receive+0x968>)
 8012efa:	891b      	ldrh	r3, [r3, #8]
 8012efc:	3b01      	subs	r3, #1
 8012efe:	b29a      	uxth	r2, r3
 8012f00:	4b48      	ldr	r3, [pc, #288]	; (8013024 <tcp_receive+0x968>)
 8012f02:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012f04:	4b47      	ldr	r3, [pc, #284]	; (8013024 <tcp_receive+0x968>)
 8012f06:	685a      	ldr	r2, [r3, #4]
 8012f08:	4b46      	ldr	r3, [pc, #280]	; (8013024 <tcp_receive+0x968>)
 8012f0a:	891b      	ldrh	r3, [r3, #8]
 8012f0c:	4619      	mov	r1, r3
 8012f0e:	4610      	mov	r0, r2
 8012f10:	f7fc fcac 	bl	800f86c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012f14:	4b43      	ldr	r3, [pc, #268]	; (8013024 <tcp_receive+0x968>)
 8012f16:	891c      	ldrh	r4, [r3, #8]
 8012f18:	4b42      	ldr	r3, [pc, #264]	; (8013024 <tcp_receive+0x968>)
 8012f1a:	68db      	ldr	r3, [r3, #12]
 8012f1c:	899b      	ldrh	r3, [r3, #12]
 8012f1e:	b29b      	uxth	r3, r3
 8012f20:	4618      	mov	r0, r3
 8012f22:	f7fb fb43 	bl	800e5ac <lwip_htons>
 8012f26:	4603      	mov	r3, r0
 8012f28:	f003 0303 	and.w	r3, r3, #3
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d001      	beq.n	8012f34 <tcp_receive+0x878>
 8012f30:	2301      	movs	r3, #1
 8012f32:	e000      	b.n	8012f36 <tcp_receive+0x87a>
 8012f34:	2300      	movs	r3, #0
 8012f36:	4423      	add	r3, r4
 8012f38:	b29a      	uxth	r2, r3
 8012f3a:	4b3b      	ldr	r3, [pc, #236]	; (8013028 <tcp_receive+0x96c>)
 8012f3c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012f3e:	4b3a      	ldr	r3, [pc, #232]	; (8013028 <tcp_receive+0x96c>)
 8012f40:	881b      	ldrh	r3, [r3, #0]
 8012f42:	461a      	mov	r2, r3
 8012f44:	4b36      	ldr	r3, [pc, #216]	; (8013020 <tcp_receive+0x964>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	441a      	add	r2, r3
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f4e:	6879      	ldr	r1, [r7, #4]
 8012f50:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012f52:	440b      	add	r3, r1
 8012f54:	429a      	cmp	r2, r3
 8012f56:	d006      	beq.n	8012f66 <tcp_receive+0x8aa>
 8012f58:	4b34      	ldr	r3, [pc, #208]	; (801302c <tcp_receive+0x970>)
 8012f5a:	f240 527f 	movw	r2, #1407	; 0x57f
 8012f5e:	4934      	ldr	r1, [pc, #208]	; (8013030 <tcp_receive+0x974>)
 8012f60:	4834      	ldr	r0, [pc, #208]	; (8013034 <tcp_receive+0x978>)
 8012f62:	f004 fa65 	bl	8017430 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	f000 80e1 	beq.w	8013132 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012f70:	4b2c      	ldr	r3, [pc, #176]	; (8013024 <tcp_receive+0x968>)
 8012f72:	68db      	ldr	r3, [r3, #12]
 8012f74:	899b      	ldrh	r3, [r3, #12]
 8012f76:	b29b      	uxth	r3, r3
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7fb fb17 	bl	800e5ac <lwip_htons>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	f003 0301 	and.w	r3, r3, #1
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d010      	beq.n	8012faa <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012f88:	e00a      	b.n	8012fa0 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f8e:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f94:	681a      	ldr	r2, [r3, #0]
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8012f9a:	68b8      	ldr	r0, [r7, #8]
 8012f9c:	f7fd ff2d 	bl	8010dfa <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d1f0      	bne.n	8012f8a <tcp_receive+0x8ce>
 8012fa8:	e0c3      	b.n	8013132 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fae:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012fb0:	e04f      	b.n	8013052 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fb4:	68db      	ldr	r3, [r3, #12]
 8012fb6:	899b      	ldrh	r3, [r3, #12]
 8012fb8:	b29b      	uxth	r3, r3
 8012fba:	4618      	mov	r0, r3
 8012fbc:	f7fb faf6 	bl	800e5ac <lwip_htons>
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	f003 0301 	and.w	r3, r3, #1
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d03b      	beq.n	8013042 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012fca:	4b16      	ldr	r3, [pc, #88]	; (8013024 <tcp_receive+0x968>)
 8012fcc:	68db      	ldr	r3, [r3, #12]
 8012fce:	899b      	ldrh	r3, [r3, #12]
 8012fd0:	b29b      	uxth	r3, r3
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f7fb faea 	bl	800e5ac <lwip_htons>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d12f      	bne.n	8013042 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012fe2:	4b10      	ldr	r3, [pc, #64]	; (8013024 <tcp_receive+0x968>)
 8012fe4:	68db      	ldr	r3, [r3, #12]
 8012fe6:	899b      	ldrh	r3, [r3, #12]
 8012fe8:	b29c      	uxth	r4, r3
 8012fea:	2001      	movs	r0, #1
 8012fec:	f7fb fade 	bl	800e5ac <lwip_htons>
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	461a      	mov	r2, r3
 8012ff4:	4b0b      	ldr	r3, [pc, #44]	; (8013024 <tcp_receive+0x968>)
 8012ff6:	68db      	ldr	r3, [r3, #12]
 8012ff8:	4322      	orrs	r2, r4
 8012ffa:	b292      	uxth	r2, r2
 8012ffc:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012ffe:	4b09      	ldr	r3, [pc, #36]	; (8013024 <tcp_receive+0x968>)
 8013000:	891c      	ldrh	r4, [r3, #8]
 8013002:	4b08      	ldr	r3, [pc, #32]	; (8013024 <tcp_receive+0x968>)
 8013004:	68db      	ldr	r3, [r3, #12]
 8013006:	899b      	ldrh	r3, [r3, #12]
 8013008:	b29b      	uxth	r3, r3
 801300a:	4618      	mov	r0, r3
 801300c:	f7fb face 	bl	800e5ac <lwip_htons>
 8013010:	4603      	mov	r3, r0
 8013012:	f003 0303 	and.w	r3, r3, #3
 8013016:	2b00      	cmp	r3, #0
 8013018:	d00e      	beq.n	8013038 <tcp_receive+0x97c>
 801301a:	2301      	movs	r3, #1
 801301c:	e00d      	b.n	801303a <tcp_receive+0x97e>
 801301e:	bf00      	nop
 8013020:	2400a41c 	.word	0x2400a41c
 8013024:	2400a3fc 	.word	0x2400a3fc
 8013028:	2400a426 	.word	0x2400a426
 801302c:	080192f0 	.word	0x080192f0
 8013030:	080195bc 	.word	0x080195bc
 8013034:	08019334 	.word	0x08019334
 8013038:	2300      	movs	r3, #0
 801303a:	4423      	add	r3, r4
 801303c:	b29a      	uxth	r2, r3
 801303e:	4b95      	ldr	r3, [pc, #596]	; (8013294 <tcp_receive+0xbd8>)
 8013040:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8013042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013044:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8013046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 801304c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801304e:	f7fd fed4 	bl	8010dfa <tcp_seg_free>
            while (next &&
 8013052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013054:	2b00      	cmp	r3, #0
 8013056:	d00e      	beq.n	8013076 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013058:	4b8e      	ldr	r3, [pc, #568]	; (8013294 <tcp_receive+0xbd8>)
 801305a:	881b      	ldrh	r3, [r3, #0]
 801305c:	461a      	mov	r2, r3
 801305e:	4b8e      	ldr	r3, [pc, #568]	; (8013298 <tcp_receive+0xbdc>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	441a      	add	r2, r3
 8013064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013066:	68db      	ldr	r3, [r3, #12]
 8013068:	685b      	ldr	r3, [r3, #4]
 801306a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801306c:	8909      	ldrh	r1, [r1, #8]
 801306e:	440b      	add	r3, r1
 8013070:	1ad3      	subs	r3, r2, r3
            while (next &&
 8013072:	2b00      	cmp	r3, #0
 8013074:	da9d      	bge.n	8012fb2 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013078:	2b00      	cmp	r3, #0
 801307a:	d057      	beq.n	801312c <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 801307c:	4b85      	ldr	r3, [pc, #532]	; (8013294 <tcp_receive+0xbd8>)
 801307e:	881b      	ldrh	r3, [r3, #0]
 8013080:	461a      	mov	r2, r3
 8013082:	4b85      	ldr	r3, [pc, #532]	; (8013298 <tcp_receive+0xbdc>)
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	441a      	add	r2, r3
 8013088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801308a:	68db      	ldr	r3, [r3, #12]
 801308c:	685b      	ldr	r3, [r3, #4]
 801308e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013090:	2b00      	cmp	r3, #0
 8013092:	dd4b      	ble.n	801312c <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013096:	68db      	ldr	r3, [r3, #12]
 8013098:	685b      	ldr	r3, [r3, #4]
 801309a:	b29a      	uxth	r2, r3
 801309c:	4b7e      	ldr	r3, [pc, #504]	; (8013298 <tcp_receive+0xbdc>)
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	b29b      	uxth	r3, r3
 80130a2:	1ad3      	subs	r3, r2, r3
 80130a4:	b29a      	uxth	r2, r3
 80130a6:	4b7d      	ldr	r3, [pc, #500]	; (801329c <tcp_receive+0xbe0>)
 80130a8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80130aa:	4b7c      	ldr	r3, [pc, #496]	; (801329c <tcp_receive+0xbe0>)
 80130ac:	68db      	ldr	r3, [r3, #12]
 80130ae:	899b      	ldrh	r3, [r3, #12]
 80130b0:	b29b      	uxth	r3, r3
 80130b2:	4618      	mov	r0, r3
 80130b4:	f7fb fa7a 	bl	800e5ac <lwip_htons>
 80130b8:	4603      	mov	r3, r0
 80130ba:	f003 0302 	and.w	r3, r3, #2
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d005      	beq.n	80130ce <tcp_receive+0xa12>
                inseg.len -= 1;
 80130c2:	4b76      	ldr	r3, [pc, #472]	; (801329c <tcp_receive+0xbe0>)
 80130c4:	891b      	ldrh	r3, [r3, #8]
 80130c6:	3b01      	subs	r3, #1
 80130c8:	b29a      	uxth	r2, r3
 80130ca:	4b74      	ldr	r3, [pc, #464]	; (801329c <tcp_receive+0xbe0>)
 80130cc:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80130ce:	4b73      	ldr	r3, [pc, #460]	; (801329c <tcp_receive+0xbe0>)
 80130d0:	685a      	ldr	r2, [r3, #4]
 80130d2:	4b72      	ldr	r3, [pc, #456]	; (801329c <tcp_receive+0xbe0>)
 80130d4:	891b      	ldrh	r3, [r3, #8]
 80130d6:	4619      	mov	r1, r3
 80130d8:	4610      	mov	r0, r2
 80130da:	f7fc fbc7 	bl	800f86c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80130de:	4b6f      	ldr	r3, [pc, #444]	; (801329c <tcp_receive+0xbe0>)
 80130e0:	891c      	ldrh	r4, [r3, #8]
 80130e2:	4b6e      	ldr	r3, [pc, #440]	; (801329c <tcp_receive+0xbe0>)
 80130e4:	68db      	ldr	r3, [r3, #12]
 80130e6:	899b      	ldrh	r3, [r3, #12]
 80130e8:	b29b      	uxth	r3, r3
 80130ea:	4618      	mov	r0, r3
 80130ec:	f7fb fa5e 	bl	800e5ac <lwip_htons>
 80130f0:	4603      	mov	r3, r0
 80130f2:	f003 0303 	and.w	r3, r3, #3
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d001      	beq.n	80130fe <tcp_receive+0xa42>
 80130fa:	2301      	movs	r3, #1
 80130fc:	e000      	b.n	8013100 <tcp_receive+0xa44>
 80130fe:	2300      	movs	r3, #0
 8013100:	4423      	add	r3, r4
 8013102:	b29a      	uxth	r2, r3
 8013104:	4b63      	ldr	r3, [pc, #396]	; (8013294 <tcp_receive+0xbd8>)
 8013106:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013108:	4b62      	ldr	r3, [pc, #392]	; (8013294 <tcp_receive+0xbd8>)
 801310a:	881b      	ldrh	r3, [r3, #0]
 801310c:	461a      	mov	r2, r3
 801310e:	4b62      	ldr	r3, [pc, #392]	; (8013298 <tcp_receive+0xbdc>)
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	441a      	add	r2, r3
 8013114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013116:	68db      	ldr	r3, [r3, #12]
 8013118:	685b      	ldr	r3, [r3, #4]
 801311a:	429a      	cmp	r2, r3
 801311c:	d006      	beq.n	801312c <tcp_receive+0xa70>
 801311e:	4b60      	ldr	r3, [pc, #384]	; (80132a0 <tcp_receive+0xbe4>)
 8013120:	f240 52af 	movw	r2, #1455	; 0x5af
 8013124:	495f      	ldr	r1, [pc, #380]	; (80132a4 <tcp_receive+0xbe8>)
 8013126:	4860      	ldr	r0, [pc, #384]	; (80132a8 <tcp_receive+0xbec>)
 8013128:	f004 f982 	bl	8017430 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013130:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013132:	4b58      	ldr	r3, [pc, #352]	; (8013294 <tcp_receive+0xbd8>)
 8013134:	881b      	ldrh	r3, [r3, #0]
 8013136:	461a      	mov	r2, r3
 8013138:	4b57      	ldr	r3, [pc, #348]	; (8013298 <tcp_receive+0xbdc>)
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	441a      	add	r2, r3
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013146:	4b53      	ldr	r3, [pc, #332]	; (8013294 <tcp_receive+0xbd8>)
 8013148:	881b      	ldrh	r3, [r3, #0]
 801314a:	429a      	cmp	r2, r3
 801314c:	d206      	bcs.n	801315c <tcp_receive+0xaa0>
 801314e:	4b54      	ldr	r3, [pc, #336]	; (80132a0 <tcp_receive+0xbe4>)
 8013150:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013154:	4955      	ldr	r1, [pc, #340]	; (80132ac <tcp_receive+0xbf0>)
 8013156:	4854      	ldr	r0, [pc, #336]	; (80132a8 <tcp_receive+0xbec>)
 8013158:	f004 f96a 	bl	8017430 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013160:	4b4c      	ldr	r3, [pc, #304]	; (8013294 <tcp_receive+0xbd8>)
 8013162:	881b      	ldrh	r3, [r3, #0]
 8013164:	1ad3      	subs	r3, r2, r3
 8013166:	b29a      	uxth	r2, r3
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801316c:	6878      	ldr	r0, [r7, #4]
 801316e:	f7fd f9fb 	bl	8010568 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013172:	4b4a      	ldr	r3, [pc, #296]	; (801329c <tcp_receive+0xbe0>)
 8013174:	685b      	ldr	r3, [r3, #4]
 8013176:	891b      	ldrh	r3, [r3, #8]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d006      	beq.n	801318a <tcp_receive+0xace>
          recv_data = inseg.p;
 801317c:	4b47      	ldr	r3, [pc, #284]	; (801329c <tcp_receive+0xbe0>)
 801317e:	685b      	ldr	r3, [r3, #4]
 8013180:	4a4b      	ldr	r2, [pc, #300]	; (80132b0 <tcp_receive+0xbf4>)
 8013182:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013184:	4b45      	ldr	r3, [pc, #276]	; (801329c <tcp_receive+0xbe0>)
 8013186:	2200      	movs	r2, #0
 8013188:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801318a:	4b44      	ldr	r3, [pc, #272]	; (801329c <tcp_receive+0xbe0>)
 801318c:	68db      	ldr	r3, [r3, #12]
 801318e:	899b      	ldrh	r3, [r3, #12]
 8013190:	b29b      	uxth	r3, r3
 8013192:	4618      	mov	r0, r3
 8013194:	f7fb fa0a 	bl	800e5ac <lwip_htons>
 8013198:	4603      	mov	r3, r0
 801319a:	f003 0301 	and.w	r3, r3, #1
 801319e:	2b00      	cmp	r3, #0
 80131a0:	f000 80b4 	beq.w	801330c <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80131a4:	4b43      	ldr	r3, [pc, #268]	; (80132b4 <tcp_receive+0xbf8>)
 80131a6:	781b      	ldrb	r3, [r3, #0]
 80131a8:	f043 0320 	orr.w	r3, r3, #32
 80131ac:	b2da      	uxtb	r2, r3
 80131ae:	4b41      	ldr	r3, [pc, #260]	; (80132b4 <tcp_receive+0xbf8>)
 80131b0:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80131b2:	e0ab      	b.n	801330c <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131b8:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131be:	68db      	ldr	r3, [r3, #12]
 80131c0:	685b      	ldr	r3, [r3, #4]
 80131c2:	4a35      	ldr	r2, [pc, #212]	; (8013298 <tcp_receive+0xbdc>)
 80131c4:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	891b      	ldrh	r3, [r3, #8]
 80131ca:	461c      	mov	r4, r3
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	68db      	ldr	r3, [r3, #12]
 80131d0:	899b      	ldrh	r3, [r3, #12]
 80131d2:	b29b      	uxth	r3, r3
 80131d4:	4618      	mov	r0, r3
 80131d6:	f7fb f9e9 	bl	800e5ac <lwip_htons>
 80131da:	4603      	mov	r3, r0
 80131dc:	f003 0303 	and.w	r3, r3, #3
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d001      	beq.n	80131e8 <tcp_receive+0xb2c>
 80131e4:	2301      	movs	r3, #1
 80131e6:	e000      	b.n	80131ea <tcp_receive+0xb2e>
 80131e8:	2300      	movs	r3, #0
 80131ea:	191a      	adds	r2, r3, r4
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131f0:	441a      	add	r2, r3
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80131fa:	461c      	mov	r4, r3
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	891b      	ldrh	r3, [r3, #8]
 8013200:	461d      	mov	r5, r3
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	68db      	ldr	r3, [r3, #12]
 8013206:	899b      	ldrh	r3, [r3, #12]
 8013208:	b29b      	uxth	r3, r3
 801320a:	4618      	mov	r0, r3
 801320c:	f7fb f9ce 	bl	800e5ac <lwip_htons>
 8013210:	4603      	mov	r3, r0
 8013212:	f003 0303 	and.w	r3, r3, #3
 8013216:	2b00      	cmp	r3, #0
 8013218:	d001      	beq.n	801321e <tcp_receive+0xb62>
 801321a:	2301      	movs	r3, #1
 801321c:	e000      	b.n	8013220 <tcp_receive+0xb64>
 801321e:	2300      	movs	r3, #0
 8013220:	442b      	add	r3, r5
 8013222:	429c      	cmp	r4, r3
 8013224:	d206      	bcs.n	8013234 <tcp_receive+0xb78>
 8013226:	4b1e      	ldr	r3, [pc, #120]	; (80132a0 <tcp_receive+0xbe4>)
 8013228:	f240 52de 	movw	r2, #1502	; 0x5de
 801322c:	4922      	ldr	r1, [pc, #136]	; (80132b8 <tcp_receive+0xbfc>)
 801322e:	481e      	ldr	r0, [pc, #120]	; (80132a8 <tcp_receive+0xbec>)
 8013230:	f004 f8fe 	bl	8017430 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	891b      	ldrh	r3, [r3, #8]
 8013238:	461c      	mov	r4, r3
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	68db      	ldr	r3, [r3, #12]
 801323e:	899b      	ldrh	r3, [r3, #12]
 8013240:	b29b      	uxth	r3, r3
 8013242:	4618      	mov	r0, r3
 8013244:	f7fb f9b2 	bl	800e5ac <lwip_htons>
 8013248:	4603      	mov	r3, r0
 801324a:	f003 0303 	and.w	r3, r3, #3
 801324e:	2b00      	cmp	r3, #0
 8013250:	d001      	beq.n	8013256 <tcp_receive+0xb9a>
 8013252:	2301      	movs	r3, #1
 8013254:	e000      	b.n	8013258 <tcp_receive+0xb9c>
 8013256:	2300      	movs	r3, #0
 8013258:	1919      	adds	r1, r3, r4
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801325e:	b28b      	uxth	r3, r1
 8013260:	1ad3      	subs	r3, r2, r3
 8013262:	b29a      	uxth	r2, r3
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013268:	6878      	ldr	r0, [r7, #4]
 801326a:	f7fd f97d 	bl	8010568 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	685b      	ldr	r3, [r3, #4]
 8013272:	891b      	ldrh	r3, [r3, #8]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d028      	beq.n	80132ca <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013278:	4b0d      	ldr	r3, [pc, #52]	; (80132b0 <tcp_receive+0xbf4>)
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d01d      	beq.n	80132bc <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8013280:	4b0b      	ldr	r3, [pc, #44]	; (80132b0 <tcp_receive+0xbf4>)
 8013282:	681a      	ldr	r2, [r3, #0]
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	685b      	ldr	r3, [r3, #4]
 8013288:	4619      	mov	r1, r3
 801328a:	4610      	mov	r0, r2
 801328c:	f7fc fd3c 	bl	800fd08 <pbuf_cat>
 8013290:	e018      	b.n	80132c4 <tcp_receive+0xc08>
 8013292:	bf00      	nop
 8013294:	2400a426 	.word	0x2400a426
 8013298:	2400a41c 	.word	0x2400a41c
 801329c:	2400a3fc 	.word	0x2400a3fc
 80132a0:	080192f0 	.word	0x080192f0
 80132a4:	080195f4 	.word	0x080195f4
 80132a8:	08019334 	.word	0x08019334
 80132ac:	08019630 	.word	0x08019630
 80132b0:	2400a42c 	.word	0x2400a42c
 80132b4:	2400a429 	.word	0x2400a429
 80132b8:	08019650 	.word	0x08019650
            } else {
              recv_data = cseg->p;
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	685b      	ldr	r3, [r3, #4]
 80132c0:	4a71      	ldr	r2, [pc, #452]	; (8013488 <tcp_receive+0xdcc>)
 80132c2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	2200      	movs	r2, #0
 80132c8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	68db      	ldr	r3, [r3, #12]
 80132ce:	899b      	ldrh	r3, [r3, #12]
 80132d0:	b29b      	uxth	r3, r3
 80132d2:	4618      	mov	r0, r3
 80132d4:	f7fb f96a 	bl	800e5ac <lwip_htons>
 80132d8:	4603      	mov	r3, r0
 80132da:	f003 0301 	and.w	r3, r3, #1
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d00d      	beq.n	80132fe <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80132e2:	4b6a      	ldr	r3, [pc, #424]	; (801348c <tcp_receive+0xdd0>)
 80132e4:	781b      	ldrb	r3, [r3, #0]
 80132e6:	f043 0320 	orr.w	r3, r3, #32
 80132ea:	b2da      	uxtb	r2, r3
 80132ec:	4b67      	ldr	r3, [pc, #412]	; (801348c <tcp_receive+0xdd0>)
 80132ee:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	7d1b      	ldrb	r3, [r3, #20]
 80132f4:	2b04      	cmp	r3, #4
 80132f6:	d102      	bne.n	80132fe <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	2207      	movs	r2, #7
 80132fc:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	681a      	ldr	r2, [r3, #0]
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8013306:	68f8      	ldr	r0, [r7, #12]
 8013308:	f7fd fd77 	bl	8010dfa <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013310:	2b00      	cmp	r3, #0
 8013312:	d008      	beq.n	8013326 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013318:	68db      	ldr	r3, [r3, #12]
 801331a:	685a      	ldr	r2, [r3, #4]
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8013320:	429a      	cmp	r2, r3
 8013322:	f43f af47 	beq.w	80131b4 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	7e9b      	ldrb	r3, [r3, #26]
 801332a:	f003 0301 	and.w	r3, r3, #1
 801332e:	2b00      	cmp	r3, #0
 8013330:	d00e      	beq.n	8013350 <tcp_receive+0xc94>
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	7e9b      	ldrb	r3, [r3, #26]
 8013336:	f023 0301 	bic.w	r3, r3, #1
 801333a:	b2da      	uxtb	r2, r3
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	769a      	strb	r2, [r3, #26]
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	7e9b      	ldrb	r3, [r3, #26]
 8013344:	f043 0302 	orr.w	r3, r3, #2
 8013348:	b2da      	uxtb	r2, r3
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801334e:	e181      	b.n	8013654 <tcp_receive+0xf98>
        tcp_ack(pcb);
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	7e9b      	ldrb	r3, [r3, #26]
 8013354:	f043 0301 	orr.w	r3, r3, #1
 8013358:	b2da      	uxtb	r2, r3
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801335e:	e179      	b.n	8013654 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8013360:	6878      	ldr	r0, [r7, #4]
 8013362:	f000 fc93 	bl	8013c8c <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801336a:	2b00      	cmp	r3, #0
 801336c:	d106      	bne.n	801337c <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801336e:	4848      	ldr	r0, [pc, #288]	; (8013490 <tcp_receive+0xdd4>)
 8013370:	f7fd fd5b 	bl	8010e2a <tcp_seg_copy>
 8013374:	4602      	mov	r2, r0
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 801337a:	e16b      	b.n	8013654 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 801337c:	2300      	movs	r3, #0
 801337e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013386:	e150      	b.n	801362a <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8013388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801338a:	68db      	ldr	r3, [r3, #12]
 801338c:	685a      	ldr	r2, [r3, #4]
 801338e:	4b41      	ldr	r3, [pc, #260]	; (8013494 <tcp_receive+0xdd8>)
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	429a      	cmp	r2, r3
 8013394:	d11d      	bne.n	80133d2 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013396:	4b3e      	ldr	r3, [pc, #248]	; (8013490 <tcp_receive+0xdd4>)
 8013398:	891a      	ldrh	r2, [r3, #8]
 801339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801339c:	891b      	ldrh	r3, [r3, #8]
 801339e:	429a      	cmp	r2, r3
 80133a0:	f240 8148 	bls.w	8013634 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 80133a4:	483a      	ldr	r0, [pc, #232]	; (8013490 <tcp_receive+0xdd4>)
 80133a6:	f7fd fd40 	bl	8010e2a <tcp_seg_copy>
 80133aa:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	f000 8142 	beq.w	8013638 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 80133b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d003      	beq.n	80133c2 <tcp_receive+0xd06>
                    prev->next = cseg;
 80133ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133bc:	68fa      	ldr	r2, [r7, #12]
 80133be:	601a      	str	r2, [r3, #0]
 80133c0:	e002      	b.n	80133c8 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	68fa      	ldr	r2, [r7, #12]
 80133c6:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 80133c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80133ca:	68f8      	ldr	r0, [r7, #12]
 80133cc:	f7ff f900 	bl	80125d0 <tcp_oos_insert_segment>
                }
                break;
 80133d0:	e132      	b.n	8013638 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80133d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d117      	bne.n	8013408 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80133d8:	4b2e      	ldr	r3, [pc, #184]	; (8013494 <tcp_receive+0xdd8>)
 80133da:	681a      	ldr	r2, [r3, #0]
 80133dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133de:	68db      	ldr	r3, [r3, #12]
 80133e0:	685b      	ldr	r3, [r3, #4]
 80133e2:	1ad3      	subs	r3, r2, r3
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	da57      	bge.n	8013498 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80133e8:	4829      	ldr	r0, [pc, #164]	; (8013490 <tcp_receive+0xdd4>)
 80133ea:	f7fd fd1e 	bl	8010e2a <tcp_seg_copy>
 80133ee:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	f000 8122 	beq.w	801363c <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	68fa      	ldr	r2, [r7, #12]
 80133fc:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80133fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013400:	68f8      	ldr	r0, [r7, #12]
 8013402:	f7ff f8e5 	bl	80125d0 <tcp_oos_insert_segment>
                  }
                  break;
 8013406:	e119      	b.n	801363c <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8013408:	4b22      	ldr	r3, [pc, #136]	; (8013494 <tcp_receive+0xdd8>)
 801340a:	681a      	ldr	r2, [r3, #0]
 801340c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801340e:	68db      	ldr	r3, [r3, #12]
 8013410:	685b      	ldr	r3, [r3, #4]
 8013412:	1ad3      	subs	r3, r2, r3
 8013414:	3b01      	subs	r3, #1
 8013416:	2b00      	cmp	r3, #0
 8013418:	db3e      	blt.n	8013498 <tcp_receive+0xddc>
 801341a:	4b1e      	ldr	r3, [pc, #120]	; (8013494 <tcp_receive+0xdd8>)
 801341c:	681a      	ldr	r2, [r3, #0]
 801341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013420:	68db      	ldr	r3, [r3, #12]
 8013422:	685b      	ldr	r3, [r3, #4]
 8013424:	1ad3      	subs	r3, r2, r3
 8013426:	3301      	adds	r3, #1
 8013428:	2b00      	cmp	r3, #0
 801342a:	dc35      	bgt.n	8013498 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 801342c:	4818      	ldr	r0, [pc, #96]	; (8013490 <tcp_receive+0xdd4>)
 801342e:	f7fd fcfc 	bl	8010e2a <tcp_seg_copy>
 8013432:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	2b00      	cmp	r3, #0
 8013438:	f000 8102 	beq.w	8013640 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801343c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801343e:	68db      	ldr	r3, [r3, #12]
 8013440:	685b      	ldr	r3, [r3, #4]
 8013442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013444:	8912      	ldrh	r2, [r2, #8]
 8013446:	441a      	add	r2, r3
 8013448:	4b12      	ldr	r3, [pc, #72]	; (8013494 <tcp_receive+0xdd8>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	1ad3      	subs	r3, r2, r3
 801344e:	2b00      	cmp	r3, #0
 8013450:	dd12      	ble.n	8013478 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013452:	4b10      	ldr	r3, [pc, #64]	; (8013494 <tcp_receive+0xdd8>)
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	b29a      	uxth	r2, r3
 8013458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801345a:	68db      	ldr	r3, [r3, #12]
 801345c:	685b      	ldr	r3, [r3, #4]
 801345e:	b29b      	uxth	r3, r3
 8013460:	1ad3      	subs	r3, r2, r3
 8013462:	b29a      	uxth	r2, r3
 8013464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013466:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801346a:	685a      	ldr	r2, [r3, #4]
 801346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801346e:	891b      	ldrh	r3, [r3, #8]
 8013470:	4619      	mov	r1, r3
 8013472:	4610      	mov	r0, r2
 8013474:	f7fc f9fa 	bl	800f86c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801347a:	68fa      	ldr	r2, [r7, #12]
 801347c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801347e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013480:	68f8      	ldr	r0, [r7, #12]
 8013482:	f7ff f8a5 	bl	80125d0 <tcp_oos_insert_segment>
                  }
                  break;
 8013486:	e0db      	b.n	8013640 <tcp_receive+0xf84>
 8013488:	2400a42c 	.word	0x2400a42c
 801348c:	2400a429 	.word	0x2400a429
 8013490:	2400a3fc 	.word	0x2400a3fc
 8013494:	2400a41c 	.word	0x2400a41c
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	2b00      	cmp	r3, #0
 801349e:	f040 80bf 	bne.w	8013620 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80134a2:	4b7c      	ldr	r3, [pc, #496]	; (8013694 <tcp_receive+0xfd8>)
 80134a4:	681a      	ldr	r2, [r3, #0]
 80134a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134a8:	68db      	ldr	r3, [r3, #12]
 80134aa:	685b      	ldr	r3, [r3, #4]
 80134ac:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	f340 80b6 	ble.w	8013620 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80134b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134b6:	68db      	ldr	r3, [r3, #12]
 80134b8:	899b      	ldrh	r3, [r3, #12]
 80134ba:	b29b      	uxth	r3, r3
 80134bc:	4618      	mov	r0, r3
 80134be:	f7fb f875 	bl	800e5ac <lwip_htons>
 80134c2:	4603      	mov	r3, r0
 80134c4:	f003 0301 	and.w	r3, r3, #1
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	f040 80bb 	bne.w	8013644 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80134ce:	4872      	ldr	r0, [pc, #456]	; (8013698 <tcp_receive+0xfdc>)
 80134d0:	f7fd fcab 	bl	8010e2a <tcp_seg_copy>
 80134d4:	4602      	mov	r2, r0
 80134d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134d8:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80134da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	2b00      	cmp	r3, #0
 80134e0:	f000 80b2 	beq.w	8013648 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80134e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134e6:	68db      	ldr	r3, [r3, #12]
 80134e8:	685b      	ldr	r3, [r3, #4]
 80134ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134ec:	8912      	ldrh	r2, [r2, #8]
 80134ee:	441a      	add	r2, r3
 80134f0:	4b68      	ldr	r3, [pc, #416]	; (8013694 <tcp_receive+0xfd8>)
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	1ad3      	subs	r3, r2, r3
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	dd12      	ble.n	8013520 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80134fa:	4b66      	ldr	r3, [pc, #408]	; (8013694 <tcp_receive+0xfd8>)
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	b29a      	uxth	r2, r3
 8013500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013502:	68db      	ldr	r3, [r3, #12]
 8013504:	685b      	ldr	r3, [r3, #4]
 8013506:	b29b      	uxth	r3, r3
 8013508:	1ad3      	subs	r3, r2, r3
 801350a:	b29a      	uxth	r2, r3
 801350c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801350e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013512:	685a      	ldr	r2, [r3, #4]
 8013514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013516:	891b      	ldrh	r3, [r3, #8]
 8013518:	4619      	mov	r1, r3
 801351a:	4610      	mov	r0, r2
 801351c:	f7fc f9a6 	bl	800f86c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013520:	4b5e      	ldr	r3, [pc, #376]	; (801369c <tcp_receive+0xfe0>)
 8013522:	881b      	ldrh	r3, [r3, #0]
 8013524:	461a      	mov	r2, r3
 8013526:	4b5b      	ldr	r3, [pc, #364]	; (8013694 <tcp_receive+0xfd8>)
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	441a      	add	r2, r3
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013530:	6879      	ldr	r1, [r7, #4]
 8013532:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013534:	440b      	add	r3, r1
 8013536:	1ad3      	subs	r3, r2, r3
 8013538:	2b00      	cmp	r3, #0
 801353a:	f340 8085 	ble.w	8013648 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	68db      	ldr	r3, [r3, #12]
 8013544:	899b      	ldrh	r3, [r3, #12]
 8013546:	b29b      	uxth	r3, r3
 8013548:	4618      	mov	r0, r3
 801354a:	f7fb f82f 	bl	800e5ac <lwip_htons>
 801354e:	4603      	mov	r3, r0
 8013550:	f003 0301 	and.w	r3, r3, #1
 8013554:	2b00      	cmp	r3, #0
 8013556:	d01e      	beq.n	8013596 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	68db      	ldr	r3, [r3, #12]
 801355e:	899b      	ldrh	r3, [r3, #12]
 8013560:	b29b      	uxth	r3, r3
 8013562:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013566:	b29c      	uxth	r4, r3
 8013568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	68db      	ldr	r3, [r3, #12]
 801356e:	899b      	ldrh	r3, [r3, #12]
 8013570:	b29b      	uxth	r3, r3
 8013572:	4618      	mov	r0, r3
 8013574:	f7fb f81a 	bl	800e5ac <lwip_htons>
 8013578:	4603      	mov	r3, r0
 801357a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801357e:	b29b      	uxth	r3, r3
 8013580:	4618      	mov	r0, r3
 8013582:	f7fb f813 	bl	800e5ac <lwip_htons>
 8013586:	4603      	mov	r3, r0
 8013588:	461a      	mov	r2, r3
 801358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	68db      	ldr	r3, [r3, #12]
 8013590:	4322      	orrs	r2, r4
 8013592:	b292      	uxth	r2, r2
 8013594:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801359a:	b29a      	uxth	r2, r3
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80135a0:	4413      	add	r3, r2
 80135a2:	b299      	uxth	r1, r3
 80135a4:	4b3b      	ldr	r3, [pc, #236]	; (8013694 <tcp_receive+0xfd8>)
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	b29a      	uxth	r2, r3
 80135aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	1a8a      	subs	r2, r1, r2
 80135b0:	b292      	uxth	r2, r2
 80135b2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80135b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	685a      	ldr	r2, [r3, #4]
 80135ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	891b      	ldrh	r3, [r3, #8]
 80135c0:	4619      	mov	r1, r3
 80135c2:	4610      	mov	r0, r2
 80135c4:	f7fc f952 	bl	800f86c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80135c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	891c      	ldrh	r4, [r3, #8]
 80135ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	68db      	ldr	r3, [r3, #12]
 80135d4:	899b      	ldrh	r3, [r3, #12]
 80135d6:	b29b      	uxth	r3, r3
 80135d8:	4618      	mov	r0, r3
 80135da:	f7fa ffe7 	bl	800e5ac <lwip_htons>
 80135de:	4603      	mov	r3, r0
 80135e0:	f003 0303 	and.w	r3, r3, #3
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d001      	beq.n	80135ec <tcp_receive+0xf30>
 80135e8:	2301      	movs	r3, #1
 80135ea:	e000      	b.n	80135ee <tcp_receive+0xf32>
 80135ec:	2300      	movs	r3, #0
 80135ee:	4423      	add	r3, r4
 80135f0:	b29a      	uxth	r2, r3
 80135f2:	4b2a      	ldr	r3, [pc, #168]	; (801369c <tcp_receive+0xfe0>)
 80135f4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80135f6:	4b29      	ldr	r3, [pc, #164]	; (801369c <tcp_receive+0xfe0>)
 80135f8:	881b      	ldrh	r3, [r3, #0]
 80135fa:	461a      	mov	r2, r3
 80135fc:	4b25      	ldr	r3, [pc, #148]	; (8013694 <tcp_receive+0xfd8>)
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	441a      	add	r2, r3
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013606:	6879      	ldr	r1, [r7, #4]
 8013608:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801360a:	440b      	add	r3, r1
 801360c:	429a      	cmp	r2, r3
 801360e:	d01b      	beq.n	8013648 <tcp_receive+0xf8c>
 8013610:	4b23      	ldr	r3, [pc, #140]	; (80136a0 <tcp_receive+0xfe4>)
 8013612:	f240 627b 	movw	r2, #1659	; 0x67b
 8013616:	4923      	ldr	r1, [pc, #140]	; (80136a4 <tcp_receive+0xfe8>)
 8013618:	4823      	ldr	r0, [pc, #140]	; (80136a8 <tcp_receive+0xfec>)
 801361a:	f003 ff09 	bl	8017430 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801361e:	e013      	b.n	8013648 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 8013620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013622:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	62fb      	str	r3, [r7, #44]	; 0x2c
 801362a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801362c:	2b00      	cmp	r3, #0
 801362e:	f47f aeab 	bne.w	8013388 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 8013632:	e00f      	b.n	8013654 <tcp_receive+0xf98>
                break;
 8013634:	bf00      	nop
 8013636:	e00d      	b.n	8013654 <tcp_receive+0xf98>
                break;
 8013638:	bf00      	nop
 801363a:	e00b      	b.n	8013654 <tcp_receive+0xf98>
                  break;
 801363c:	bf00      	nop
 801363e:	e009      	b.n	8013654 <tcp_receive+0xf98>
                  break;
 8013640:	bf00      	nop
 8013642:	e007      	b.n	8013654 <tcp_receive+0xf98>
                  break;
 8013644:	bf00      	nop
 8013646:	e005      	b.n	8013654 <tcp_receive+0xf98>
                break;
 8013648:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 801364a:	e003      	b.n	8013654 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801364c:	6878      	ldr	r0, [r7, #4]
 801364e:	f000 fb1d 	bl	8013c8c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013652:	e01a      	b.n	801368a <tcp_receive+0xfce>
 8013654:	e019      	b.n	801368a <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013656:	4b0f      	ldr	r3, [pc, #60]	; (8013694 <tcp_receive+0xfd8>)
 8013658:	681a      	ldr	r2, [r3, #0]
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801365e:	1ad3      	subs	r3, r2, r3
 8013660:	2b00      	cmp	r3, #0
 8013662:	db0a      	blt.n	801367a <tcp_receive+0xfbe>
 8013664:	4b0b      	ldr	r3, [pc, #44]	; (8013694 <tcp_receive+0xfd8>)
 8013666:	681a      	ldr	r2, [r3, #0]
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801366c:	6879      	ldr	r1, [r7, #4]
 801366e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013670:	440b      	add	r3, r1
 8013672:	1ad3      	subs	r3, r2, r3
 8013674:	3301      	adds	r3, #1
 8013676:	2b00      	cmp	r3, #0
 8013678:	dd07      	ble.n	801368a <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	7e9b      	ldrb	r3, [r3, #26]
 801367e:	f043 0302 	orr.w	r3, r3, #2
 8013682:	b2da      	uxtb	r2, r3
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8013688:	e7ff      	b.n	801368a <tcp_receive+0xfce>
 801368a:	bf00      	nop
 801368c:	3734      	adds	r7, #52	; 0x34
 801368e:	46bd      	mov	sp, r7
 8013690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013692:	bf00      	nop
 8013694:	2400a41c 	.word	0x2400a41c
 8013698:	2400a3fc 	.word	0x2400a3fc
 801369c:	2400a426 	.word	0x2400a426
 80136a0:	080192f0 	.word	0x080192f0
 80136a4:	080195bc 	.word	0x080195bc
 80136a8:	08019334 	.word	0x08019334

080136ac <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 80136ac:	b480      	push	{r7}
 80136ae:	b083      	sub	sp, #12
 80136b0:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80136b2:	4b18      	ldr	r3, [pc, #96]	; (8013714 <tcp_getoptbyte+0x68>)
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d005      	beq.n	80136c6 <tcp_getoptbyte+0x1a>
 80136ba:	4b17      	ldr	r3, [pc, #92]	; (8013718 <tcp_getoptbyte+0x6c>)
 80136bc:	881a      	ldrh	r2, [r3, #0]
 80136be:	4b17      	ldr	r3, [pc, #92]	; (801371c <tcp_getoptbyte+0x70>)
 80136c0:	881b      	ldrh	r3, [r3, #0]
 80136c2:	429a      	cmp	r2, r3
 80136c4:	d20e      	bcs.n	80136e4 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 80136c6:	4b16      	ldr	r3, [pc, #88]	; (8013720 <tcp_getoptbyte+0x74>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	3314      	adds	r3, #20
 80136cc:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 80136ce:	4b12      	ldr	r3, [pc, #72]	; (8013718 <tcp_getoptbyte+0x6c>)
 80136d0:	881b      	ldrh	r3, [r3, #0]
 80136d2:	1c5a      	adds	r2, r3, #1
 80136d4:	b291      	uxth	r1, r2
 80136d6:	4a10      	ldr	r2, [pc, #64]	; (8013718 <tcp_getoptbyte+0x6c>)
 80136d8:	8011      	strh	r1, [r2, #0]
 80136da:	461a      	mov	r2, r3
 80136dc:	683b      	ldr	r3, [r7, #0]
 80136de:	4413      	add	r3, r2
 80136e0:	781b      	ldrb	r3, [r3, #0]
 80136e2:	e010      	b.n	8013706 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80136e4:	4b0c      	ldr	r3, [pc, #48]	; (8013718 <tcp_getoptbyte+0x6c>)
 80136e6:	881b      	ldrh	r3, [r3, #0]
 80136e8:	1c5a      	adds	r2, r3, #1
 80136ea:	b291      	uxth	r1, r2
 80136ec:	4a0a      	ldr	r2, [pc, #40]	; (8013718 <tcp_getoptbyte+0x6c>)
 80136ee:	8011      	strh	r1, [r2, #0]
 80136f0:	b2da      	uxtb	r2, r3
 80136f2:	4b0a      	ldr	r3, [pc, #40]	; (801371c <tcp_getoptbyte+0x70>)
 80136f4:	881b      	ldrh	r3, [r3, #0]
 80136f6:	b2db      	uxtb	r3, r3
 80136f8:	1ad3      	subs	r3, r2, r3
 80136fa:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 80136fc:	4b05      	ldr	r3, [pc, #20]	; (8013714 <tcp_getoptbyte+0x68>)
 80136fe:	681a      	ldr	r2, [r3, #0]
 8013700:	79fb      	ldrb	r3, [r7, #7]
 8013702:	4413      	add	r3, r2
 8013704:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013706:	4618      	mov	r0, r3
 8013708:	370c      	adds	r7, #12
 801370a:	46bd      	mov	sp, r7
 801370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013710:	4770      	bx	lr
 8013712:	bf00      	nop
 8013714:	2400a414 	.word	0x2400a414
 8013718:	2400a418 	.word	0x2400a418
 801371c:	2400a412 	.word	0x2400a412
 8013720:	2400a40c 	.word	0x2400a40c

08013724 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b084      	sub	sp, #16
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801372c:	4b2d      	ldr	r3, [pc, #180]	; (80137e4 <tcp_parseopt+0xc0>)
 801372e:	881b      	ldrh	r3, [r3, #0]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d053      	beq.n	80137dc <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013734:	4b2c      	ldr	r3, [pc, #176]	; (80137e8 <tcp_parseopt+0xc4>)
 8013736:	2200      	movs	r2, #0
 8013738:	801a      	strh	r2, [r3, #0]
 801373a:	e043      	b.n	80137c4 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 801373c:	f7ff ffb6 	bl	80136ac <tcp_getoptbyte>
 8013740:	4603      	mov	r3, r0
 8013742:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013744:	7bfb      	ldrb	r3, [r7, #15]
 8013746:	2b01      	cmp	r3, #1
 8013748:	d03c      	beq.n	80137c4 <tcp_parseopt+0xa0>
 801374a:	2b02      	cmp	r3, #2
 801374c:	d002      	beq.n	8013754 <tcp_parseopt+0x30>
 801374e:	2b00      	cmp	r3, #0
 8013750:	d03f      	beq.n	80137d2 <tcp_parseopt+0xae>
 8013752:	e026      	b.n	80137a2 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013754:	f7ff ffaa 	bl	80136ac <tcp_getoptbyte>
 8013758:	4603      	mov	r3, r0
 801375a:	2b04      	cmp	r3, #4
 801375c:	d13b      	bne.n	80137d6 <tcp_parseopt+0xb2>
 801375e:	4b22      	ldr	r3, [pc, #136]	; (80137e8 <tcp_parseopt+0xc4>)
 8013760:	881b      	ldrh	r3, [r3, #0]
 8013762:	3302      	adds	r3, #2
 8013764:	4a1f      	ldr	r2, [pc, #124]	; (80137e4 <tcp_parseopt+0xc0>)
 8013766:	8812      	ldrh	r2, [r2, #0]
 8013768:	4293      	cmp	r3, r2
 801376a:	dc34      	bgt.n	80137d6 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 801376c:	f7ff ff9e 	bl	80136ac <tcp_getoptbyte>
 8013770:	4603      	mov	r3, r0
 8013772:	b29b      	uxth	r3, r3
 8013774:	021b      	lsls	r3, r3, #8
 8013776:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8013778:	f7ff ff98 	bl	80136ac <tcp_getoptbyte>
 801377c:	4603      	mov	r3, r0
 801377e:	b29a      	uxth	r2, r3
 8013780:	89bb      	ldrh	r3, [r7, #12]
 8013782:	4313      	orrs	r3, r2
 8013784:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013786:	89bb      	ldrh	r3, [r7, #12]
 8013788:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801378c:	d804      	bhi.n	8013798 <tcp_parseopt+0x74>
 801378e:	89bb      	ldrh	r3, [r7, #12]
 8013790:	2b00      	cmp	r3, #0
 8013792:	d001      	beq.n	8013798 <tcp_parseopt+0x74>
 8013794:	89ba      	ldrh	r2, [r7, #12]
 8013796:	e001      	b.n	801379c <tcp_parseopt+0x78>
 8013798:	f44f 7206 	mov.w	r2, #536	; 0x218
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 80137a0:	e010      	b.n	80137c4 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 80137a2:	f7ff ff83 	bl	80136ac <tcp_getoptbyte>
 80137a6:	4603      	mov	r3, r0
 80137a8:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 80137aa:	7afb      	ldrb	r3, [r7, #11]
 80137ac:	2b01      	cmp	r3, #1
 80137ae:	d914      	bls.n	80137da <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 80137b0:	7afb      	ldrb	r3, [r7, #11]
 80137b2:	b29a      	uxth	r2, r3
 80137b4:	4b0c      	ldr	r3, [pc, #48]	; (80137e8 <tcp_parseopt+0xc4>)
 80137b6:	881b      	ldrh	r3, [r3, #0]
 80137b8:	4413      	add	r3, r2
 80137ba:	b29b      	uxth	r3, r3
 80137bc:	3b02      	subs	r3, #2
 80137be:	b29a      	uxth	r2, r3
 80137c0:	4b09      	ldr	r3, [pc, #36]	; (80137e8 <tcp_parseopt+0xc4>)
 80137c2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80137c4:	4b08      	ldr	r3, [pc, #32]	; (80137e8 <tcp_parseopt+0xc4>)
 80137c6:	881a      	ldrh	r2, [r3, #0]
 80137c8:	4b06      	ldr	r3, [pc, #24]	; (80137e4 <tcp_parseopt+0xc0>)
 80137ca:	881b      	ldrh	r3, [r3, #0]
 80137cc:	429a      	cmp	r2, r3
 80137ce:	d3b5      	bcc.n	801373c <tcp_parseopt+0x18>
 80137d0:	e004      	b.n	80137dc <tcp_parseopt+0xb8>
        return;
 80137d2:	bf00      	nop
 80137d4:	e002      	b.n	80137dc <tcp_parseopt+0xb8>
          return;
 80137d6:	bf00      	nop
 80137d8:	e000      	b.n	80137dc <tcp_parseopt+0xb8>
          return;
 80137da:	bf00      	nop
      }
    }
  }
}
 80137dc:	3710      	adds	r7, #16
 80137de:	46bd      	mov	sp, r7
 80137e0:	bd80      	pop	{r7, pc}
 80137e2:	bf00      	nop
 80137e4:	2400a410 	.word	0x2400a410
 80137e8:	2400a418 	.word	0x2400a418

080137ec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80137ec:	b480      	push	{r7}
 80137ee:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80137f0:	4b05      	ldr	r3, [pc, #20]	; (8013808 <tcp_trigger_input_pcb_close+0x1c>)
 80137f2:	781b      	ldrb	r3, [r3, #0]
 80137f4:	f043 0310 	orr.w	r3, r3, #16
 80137f8:	b2da      	uxtb	r2, r3
 80137fa:	4b03      	ldr	r3, [pc, #12]	; (8013808 <tcp_trigger_input_pcb_close+0x1c>)
 80137fc:	701a      	strb	r2, [r3, #0]
}
 80137fe:	bf00      	nop
 8013800:	46bd      	mov	sp, r7
 8013802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013806:	4770      	bx	lr
 8013808:	2400a429 	.word	0x2400a429

0801380c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b086      	sub	sp, #24
 8013810:	af00      	add	r7, sp, #0
 8013812:	60f8      	str	r0, [r7, #12]
 8013814:	607b      	str	r3, [r7, #4]
 8013816:	460b      	mov	r3, r1
 8013818:	817b      	strh	r3, [r7, #10]
 801381a:	4613      	mov	r3, r2
 801381c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801381e:	897a      	ldrh	r2, [r7, #10]
 8013820:	893b      	ldrh	r3, [r7, #8]
 8013822:	4413      	add	r3, r2
 8013824:	b29b      	uxth	r3, r3
 8013826:	3314      	adds	r3, #20
 8013828:	b29b      	uxth	r3, r3
 801382a:	2200      	movs	r2, #0
 801382c:	4619      	mov	r1, r3
 801382e:	2001      	movs	r0, #1
 8013830:	f7fb fe1e 	bl	800f470 <pbuf_alloc>
 8013834:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013836:	697b      	ldr	r3, [r7, #20]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d057      	beq.n	80138ec <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801383c:	697b      	ldr	r3, [r7, #20]
 801383e:	895b      	ldrh	r3, [r3, #10]
 8013840:	461a      	mov	r2, r3
 8013842:	897b      	ldrh	r3, [r7, #10]
 8013844:	3314      	adds	r3, #20
 8013846:	429a      	cmp	r2, r3
 8013848:	da05      	bge.n	8013856 <tcp_output_alloc_header+0x4a>
 801384a:	4b2b      	ldr	r3, [pc, #172]	; (80138f8 <tcp_output_alloc_header+0xec>)
 801384c:	2273      	movs	r2, #115	; 0x73
 801384e:	492b      	ldr	r1, [pc, #172]	; (80138fc <tcp_output_alloc_header+0xf0>)
 8013850:	482b      	ldr	r0, [pc, #172]	; (8013900 <tcp_output_alloc_header+0xf4>)
 8013852:	f003 fded 	bl	8017430 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013856:	697b      	ldr	r3, [r7, #20]
 8013858:	685b      	ldr	r3, [r3, #4]
 801385a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	8adb      	ldrh	r3, [r3, #22]
 8013860:	4618      	mov	r0, r3
 8013862:	f7fa fea3 	bl	800e5ac <lwip_htons>
 8013866:	4603      	mov	r3, r0
 8013868:	461a      	mov	r2, r3
 801386a:	693b      	ldr	r3, [r7, #16]
 801386c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	8b1b      	ldrh	r3, [r3, #24]
 8013872:	4618      	mov	r0, r3
 8013874:	f7fa fe9a 	bl	800e5ac <lwip_htons>
 8013878:	4603      	mov	r3, r0
 801387a:	461a      	mov	r2, r3
 801387c:	693b      	ldr	r3, [r7, #16]
 801387e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013880:	693b      	ldr	r3, [r7, #16]
 8013882:	687a      	ldr	r2, [r7, #4]
 8013884:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801388a:	4618      	mov	r0, r3
 801388c:	f7fa fe9c 	bl	800e5c8 <lwip_htonl>
 8013890:	4602      	mov	r2, r0
 8013892:	693b      	ldr	r3, [r7, #16]
 8013894:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8013896:	897b      	ldrh	r3, [r7, #10]
 8013898:	089b      	lsrs	r3, r3, #2
 801389a:	b29b      	uxth	r3, r3
 801389c:	3305      	adds	r3, #5
 801389e:	b29b      	uxth	r3, r3
 80138a0:	031b      	lsls	r3, r3, #12
 80138a2:	b29b      	uxth	r3, r3
 80138a4:	f043 0310 	orr.w	r3, r3, #16
 80138a8:	b29b      	uxth	r3, r3
 80138aa:	4618      	mov	r0, r3
 80138ac:	f7fa fe7e 	bl	800e5ac <lwip_htons>
 80138b0:	4603      	mov	r3, r0
 80138b2:	461a      	mov	r2, r3
 80138b4:	693b      	ldr	r3, [r7, #16]
 80138b6:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80138bc:	4618      	mov	r0, r3
 80138be:	f7fa fe75 	bl	800e5ac <lwip_htons>
 80138c2:	4603      	mov	r3, r0
 80138c4:	461a      	mov	r2, r3
 80138c6:	693b      	ldr	r3, [r7, #16]
 80138c8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80138ca:	693b      	ldr	r3, [r7, #16]
 80138cc:	2200      	movs	r2, #0
 80138ce:	741a      	strb	r2, [r3, #16]
 80138d0:	2200      	movs	r2, #0
 80138d2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	2200      	movs	r2, #0
 80138d8:	749a      	strb	r2, [r3, #18]
 80138da:	2200      	movs	r2, #0
 80138dc:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138e2:	68fa      	ldr	r2, [r7, #12]
 80138e4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80138e6:	441a      	add	r2, r3
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80138ec:	697b      	ldr	r3, [r7, #20]
}
 80138ee:	4618      	mov	r0, r3
 80138f0:	3718      	adds	r7, #24
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bd80      	pop	{r7, pc}
 80138f6:	bf00      	nop
 80138f8:	08019678 	.word	0x08019678
 80138fc:	080196ac 	.word	0x080196ac
 8013900:	080196dc 	.word	0x080196dc

08013904 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013904:	b590      	push	{r4, r7, lr}
 8013906:	b085      	sub	sp, #20
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013910:	2b00      	cmp	r3, #0
 8013912:	d02d      	beq.n	8013970 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013918:	60fb      	str	r3, [r7, #12]
 801391a:	e002      	b.n	8013922 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d1f8      	bne.n	801391c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	68db      	ldr	r3, [r3, #12]
 801392e:	899b      	ldrh	r3, [r3, #12]
 8013930:	b29b      	uxth	r3, r3
 8013932:	4618      	mov	r0, r3
 8013934:	f7fa fe3a 	bl	800e5ac <lwip_htons>
 8013938:	4603      	mov	r3, r0
 801393a:	f003 0307 	and.w	r3, r3, #7
 801393e:	2b00      	cmp	r3, #0
 8013940:	d116      	bne.n	8013970 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	68db      	ldr	r3, [r3, #12]
 8013946:	899b      	ldrh	r3, [r3, #12]
 8013948:	b29c      	uxth	r4, r3
 801394a:	2001      	movs	r0, #1
 801394c:	f7fa fe2e 	bl	800e5ac <lwip_htons>
 8013950:	4603      	mov	r3, r0
 8013952:	461a      	mov	r2, r3
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	68db      	ldr	r3, [r3, #12]
 8013958:	4322      	orrs	r2, r4
 801395a:	b292      	uxth	r2, r2
 801395c:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	7e9b      	ldrb	r3, [r3, #26]
 8013962:	f043 0320 	orr.w	r3, r3, #32
 8013966:	b2da      	uxtb	r2, r3
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 801396c:	2300      	movs	r3, #0
 801396e:	e004      	b.n	801397a <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013970:	2101      	movs	r1, #1
 8013972:	6878      	ldr	r0, [r7, #4]
 8013974:	f000 f88e 	bl	8013a94 <tcp_enqueue_flags>
 8013978:	4603      	mov	r3, r0
}
 801397a:	4618      	mov	r0, r3
 801397c:	3714      	adds	r7, #20
 801397e:	46bd      	mov	sp, r7
 8013980:	bd90      	pop	{r4, r7, pc}
	...

08013984 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8013984:	b590      	push	{r4, r7, lr}
 8013986:	b087      	sub	sp, #28
 8013988:	af00      	add	r7, sp, #0
 801398a:	60f8      	str	r0, [r7, #12]
 801398c:	60b9      	str	r1, [r7, #8]
 801398e:	603b      	str	r3, [r7, #0]
 8013990:	4613      	mov	r3, r2
 8013992:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013994:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013998:	009b      	lsls	r3, r3, #2
 801399a:	b2db      	uxtb	r3, r3
 801399c:	f003 0304 	and.w	r3, r3, #4
 80139a0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80139a2:	2003      	movs	r0, #3
 80139a4:	f7fb fac8 	bl	800ef38 <memp_malloc>
 80139a8:	6138      	str	r0, [r7, #16]
 80139aa:	693b      	ldr	r3, [r7, #16]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d104      	bne.n	80139ba <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80139b0:	68b8      	ldr	r0, [r7, #8]
 80139b2:	f7fc f8cf 	bl	800fb54 <pbuf_free>
    return NULL;
 80139b6:	2300      	movs	r3, #0
 80139b8:	e061      	b.n	8013a7e <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 80139ba:	693b      	ldr	r3, [r7, #16]
 80139bc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80139c0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80139c2:	693b      	ldr	r3, [r7, #16]
 80139c4:	2200      	movs	r2, #0
 80139c6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80139c8:	693b      	ldr	r3, [r7, #16]
 80139ca:	68ba      	ldr	r2, [r7, #8]
 80139cc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	891a      	ldrh	r2, [r3, #8]
 80139d2:	7dfb      	ldrb	r3, [r7, #23]
 80139d4:	b29b      	uxth	r3, r3
 80139d6:	429a      	cmp	r2, r3
 80139d8:	d205      	bcs.n	80139e6 <tcp_create_segment+0x62>
 80139da:	4b2b      	ldr	r3, [pc, #172]	; (8013a88 <tcp_create_segment+0x104>)
 80139dc:	22ba      	movs	r2, #186	; 0xba
 80139de:	492b      	ldr	r1, [pc, #172]	; (8013a8c <tcp_create_segment+0x108>)
 80139e0:	482b      	ldr	r0, [pc, #172]	; (8013a90 <tcp_create_segment+0x10c>)
 80139e2:	f003 fd25 	bl	8017430 <iprintf>
  seg->len = p->tot_len - optlen;
 80139e6:	68bb      	ldr	r3, [r7, #8]
 80139e8:	891a      	ldrh	r2, [r3, #8]
 80139ea:	7dfb      	ldrb	r3, [r7, #23]
 80139ec:	b29b      	uxth	r3, r3
 80139ee:	1ad3      	subs	r3, r2, r3
 80139f0:	b29a      	uxth	r2, r3
 80139f2:	693b      	ldr	r3, [r7, #16]
 80139f4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 80139f6:	2114      	movs	r1, #20
 80139f8:	68b8      	ldr	r0, [r7, #8]
 80139fa:	f7fc f887 	bl	800fb0c <pbuf_header>
 80139fe:	4603      	mov	r3, r0
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d004      	beq.n	8013a0e <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013a04:	6938      	ldr	r0, [r7, #16]
 8013a06:	f7fd f9f8 	bl	8010dfa <tcp_seg_free>
    return NULL;
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	e037      	b.n	8013a7e <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013a0e:	693b      	ldr	r3, [r7, #16]
 8013a10:	685b      	ldr	r3, [r3, #4]
 8013a12:	685a      	ldr	r2, [r3, #4]
 8013a14:	693b      	ldr	r3, [r7, #16]
 8013a16:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	8ada      	ldrh	r2, [r3, #22]
 8013a1c:	693b      	ldr	r3, [r7, #16]
 8013a1e:	68dc      	ldr	r4, [r3, #12]
 8013a20:	4610      	mov	r0, r2
 8013a22:	f7fa fdc3 	bl	800e5ac <lwip_htons>
 8013a26:	4603      	mov	r3, r0
 8013a28:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	8b1a      	ldrh	r2, [r3, #24]
 8013a2e:	693b      	ldr	r3, [r7, #16]
 8013a30:	68dc      	ldr	r4, [r3, #12]
 8013a32:	4610      	mov	r0, r2
 8013a34:	f7fa fdba 	bl	800e5ac <lwip_htons>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013a3c:	693b      	ldr	r3, [r7, #16]
 8013a3e:	68dc      	ldr	r4, [r3, #12]
 8013a40:	6838      	ldr	r0, [r7, #0]
 8013a42:	f7fa fdc1 	bl	800e5c8 <lwip_htonl>
 8013a46:	4603      	mov	r3, r0
 8013a48:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8013a4a:	7dfb      	ldrb	r3, [r7, #23]
 8013a4c:	089b      	lsrs	r3, r3, #2
 8013a4e:	b2db      	uxtb	r3, r3
 8013a50:	b29b      	uxth	r3, r3
 8013a52:	3305      	adds	r3, #5
 8013a54:	b29b      	uxth	r3, r3
 8013a56:	031b      	lsls	r3, r3, #12
 8013a58:	b29a      	uxth	r2, r3
 8013a5a:	79fb      	ldrb	r3, [r7, #7]
 8013a5c:	b29b      	uxth	r3, r3
 8013a5e:	4313      	orrs	r3, r2
 8013a60:	b29a      	uxth	r2, r3
 8013a62:	693b      	ldr	r3, [r7, #16]
 8013a64:	68dc      	ldr	r4, [r3, #12]
 8013a66:	4610      	mov	r0, r2
 8013a68:	f7fa fda0 	bl	800e5ac <lwip_htons>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013a70:	693b      	ldr	r3, [r7, #16]
 8013a72:	68db      	ldr	r3, [r3, #12]
 8013a74:	2200      	movs	r2, #0
 8013a76:	749a      	strb	r2, [r3, #18]
 8013a78:	2200      	movs	r2, #0
 8013a7a:	74da      	strb	r2, [r3, #19]
  return seg;
 8013a7c:	693b      	ldr	r3, [r7, #16]
}
 8013a7e:	4618      	mov	r0, r3
 8013a80:	371c      	adds	r7, #28
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd90      	pop	{r4, r7, pc}
 8013a86:	bf00      	nop
 8013a88:	08019678 	.word	0x08019678
 8013a8c:	08019704 	.word	0x08019704
 8013a90:	080196dc 	.word	0x080196dc

08013a94 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b08a      	sub	sp, #40	; 0x28
 8013a98:	af02      	add	r7, sp, #8
 8013a9a:	6078      	str	r0, [r7, #4]
 8013a9c:	460b      	mov	r3, r1
 8013a9e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013aa8:	78fb      	ldrb	r3, [r7, #3]
 8013aaa:	f003 0303 	and.w	r3, r3, #3
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d106      	bne.n	8013ac0 <tcp_enqueue_flags+0x2c>
 8013ab2:	4b6f      	ldr	r3, [pc, #444]	; (8013c70 <tcp_enqueue_flags+0x1dc>)
 8013ab4:	f240 321b 	movw	r2, #795	; 0x31b
 8013ab8:	496e      	ldr	r1, [pc, #440]	; (8013c74 <tcp_enqueue_flags+0x1e0>)
 8013aba:	486f      	ldr	r0, [pc, #444]	; (8013c78 <tcp_enqueue_flags+0x1e4>)
 8013abc:	f003 fcb8 	bl	8017430 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013ac6:	2b08      	cmp	r3, #8
 8013ac8:	d806      	bhi.n	8013ad8 <tcp_enqueue_flags+0x44>
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013ad0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8013ad4:	4293      	cmp	r3, r2
 8013ad6:	d90e      	bls.n	8013af6 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8013ad8:	78fb      	ldrb	r3, [r7, #3]
 8013ada:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d109      	bne.n	8013af6 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	7e9b      	ldrb	r3, [r3, #26]
 8013ae6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013aea:	b2da      	uxtb	r2, r3
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8013af0:	f04f 33ff 	mov.w	r3, #4294967295
 8013af4:	e0b7      	b.n	8013c66 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8013af6:	78fb      	ldrb	r3, [r7, #3]
 8013af8:	f003 0302 	and.w	r3, r3, #2
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d001      	beq.n	8013b04 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8013b00:	2301      	movs	r3, #1
 8013b02:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013b04:	7ffb      	ldrb	r3, [r7, #31]
 8013b06:	009b      	lsls	r3, r3, #2
 8013b08:	b2db      	uxtb	r3, r3
 8013b0a:	f003 0304 	and.w	r3, r3, #4
 8013b0e:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013b10:	7dfb      	ldrb	r3, [r7, #23]
 8013b12:	b29b      	uxth	r3, r3
 8013b14:	2200      	movs	r2, #0
 8013b16:	4619      	mov	r1, r3
 8013b18:	2000      	movs	r0, #0
 8013b1a:	f7fb fca9 	bl	800f470 <pbuf_alloc>
 8013b1e:	6138      	str	r0, [r7, #16]
 8013b20:	693b      	ldr	r3, [r7, #16]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d109      	bne.n	8013b3a <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	7e9b      	ldrb	r3, [r3, #26]
 8013b2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013b2e:	b2da      	uxtb	r2, r3
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013b34:	f04f 33ff 	mov.w	r3, #4294967295
 8013b38:	e095      	b.n	8013c66 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013b3a:	693b      	ldr	r3, [r7, #16]
 8013b3c:	895a      	ldrh	r2, [r3, #10]
 8013b3e:	7dfb      	ldrb	r3, [r7, #23]
 8013b40:	b29b      	uxth	r3, r3
 8013b42:	429a      	cmp	r2, r3
 8013b44:	d206      	bcs.n	8013b54 <tcp_enqueue_flags+0xc0>
 8013b46:	4b4a      	ldr	r3, [pc, #296]	; (8013c70 <tcp_enqueue_flags+0x1dc>)
 8013b48:	f240 3241 	movw	r2, #833	; 0x341
 8013b4c:	494b      	ldr	r1, [pc, #300]	; (8013c7c <tcp_enqueue_flags+0x1e8>)
 8013b4e:	484a      	ldr	r0, [pc, #296]	; (8013c78 <tcp_enqueue_flags+0x1e4>)
 8013b50:	f003 fc6e 	bl	8017430 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8013b58:	78fa      	ldrb	r2, [r7, #3]
 8013b5a:	7ffb      	ldrb	r3, [r7, #31]
 8013b5c:	9300      	str	r3, [sp, #0]
 8013b5e:	460b      	mov	r3, r1
 8013b60:	6939      	ldr	r1, [r7, #16]
 8013b62:	6878      	ldr	r0, [r7, #4]
 8013b64:	f7ff ff0e 	bl	8013984 <tcp_create_segment>
 8013b68:	60f8      	str	r0, [r7, #12]
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d109      	bne.n	8013b84 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	7e9b      	ldrb	r3, [r3, #26]
 8013b74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013b78:	b2da      	uxtb	r2, r3
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8013b82:	e070      	b.n	8013c66 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	68db      	ldr	r3, [r3, #12]
 8013b88:	f003 0303 	and.w	r3, r3, #3
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d006      	beq.n	8013b9e <tcp_enqueue_flags+0x10a>
 8013b90:	4b37      	ldr	r3, [pc, #220]	; (8013c70 <tcp_enqueue_flags+0x1dc>)
 8013b92:	f240 3249 	movw	r2, #841	; 0x349
 8013b96:	493a      	ldr	r1, [pc, #232]	; (8013c80 <tcp_enqueue_flags+0x1ec>)
 8013b98:	4837      	ldr	r0, [pc, #220]	; (8013c78 <tcp_enqueue_flags+0x1e4>)
 8013b9a:	f003 fc49 	bl	8017430 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	891b      	ldrh	r3, [r3, #8]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d006      	beq.n	8013bb4 <tcp_enqueue_flags+0x120>
 8013ba6:	4b32      	ldr	r3, [pc, #200]	; (8013c70 <tcp_enqueue_flags+0x1dc>)
 8013ba8:	f240 324a 	movw	r2, #842	; 0x34a
 8013bac:	4935      	ldr	r1, [pc, #212]	; (8013c84 <tcp_enqueue_flags+0x1f0>)
 8013bae:	4832      	ldr	r0, [pc, #200]	; (8013c78 <tcp_enqueue_flags+0x1e4>)
 8013bb0:	f003 fc3e 	bl	8017430 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d103      	bne.n	8013bc4 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	68fa      	ldr	r2, [r7, #12]
 8013bc0:	669a      	str	r2, [r3, #104]	; 0x68
 8013bc2:	e00d      	b.n	8013be0 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013bc8:	61bb      	str	r3, [r7, #24]
 8013bca:	e002      	b.n	8013bd2 <tcp_enqueue_flags+0x13e>
 8013bcc:	69bb      	ldr	r3, [r7, #24]
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	61bb      	str	r3, [r7, #24]
 8013bd2:	69bb      	ldr	r3, [r7, #24]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d1f8      	bne.n	8013bcc <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8013bda:	69bb      	ldr	r3, [r7, #24]
 8013bdc:	68fa      	ldr	r2, [r7, #12]
 8013bde:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	2200      	movs	r2, #0
 8013be4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013be8:	78fb      	ldrb	r3, [r7, #3]
 8013bea:	f003 0302 	and.w	r3, r3, #2
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d104      	bne.n	8013bfc <tcp_enqueue_flags+0x168>
 8013bf2:	78fb      	ldrb	r3, [r7, #3]
 8013bf4:	f003 0301 	and.w	r3, r3, #1
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d004      	beq.n	8013c06 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c00:	1c5a      	adds	r2, r3, #1
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013c06:	78fb      	ldrb	r3, [r7, #3]
 8013c08:	f003 0301 	and.w	r3, r3, #1
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d006      	beq.n	8013c1e <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	7e9b      	ldrb	r3, [r3, #26]
 8013c14:	f043 0320 	orr.w	r3, r3, #32
 8013c18:	b2da      	uxtb	r2, r3
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	685b      	ldr	r3, [r3, #4]
 8013c22:	4618      	mov	r0, r3
 8013c24:	f7fc f830 	bl	800fc88 <pbuf_clen>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	461a      	mov	r2, r3
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013c32:	4413      	add	r3, r2
 8013c34:	b29a      	uxth	r2, r3
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d00e      	beq.n	8013c64 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d10a      	bne.n	8013c64 <tcp_enqueue_flags+0x1d0>
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d106      	bne.n	8013c64 <tcp_enqueue_flags+0x1d0>
 8013c56:	4b06      	ldr	r3, [pc, #24]	; (8013c70 <tcp_enqueue_flags+0x1dc>)
 8013c58:	f240 326d 	movw	r2, #877	; 0x36d
 8013c5c:	490a      	ldr	r1, [pc, #40]	; (8013c88 <tcp_enqueue_flags+0x1f4>)
 8013c5e:	4806      	ldr	r0, [pc, #24]	; (8013c78 <tcp_enqueue_flags+0x1e4>)
 8013c60:	f003 fbe6 	bl	8017430 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013c64:	2300      	movs	r3, #0
}
 8013c66:	4618      	mov	r0, r3
 8013c68:	3720      	adds	r7, #32
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}
 8013c6e:	bf00      	nop
 8013c70:	08019678 	.word	0x08019678
 8013c74:	0801997c 	.word	0x0801997c
 8013c78:	080196dc 	.word	0x080196dc
 8013c7c:	080199d4 	.word	0x080199d4
 8013c80:	08019a10 	.word	0x08019a10
 8013c84:	08019a28 	.word	0x08019a28
 8013c88:	08019a54 	.word	0x08019a54

08013c8c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013c8c:	b590      	push	{r4, r7, lr}
 8013c8e:	b08b      	sub	sp, #44	; 0x2c
 8013c90:	af04      	add	r7, sp, #16
 8013c92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8013c94:	2300      	movs	r3, #0
 8013c96:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013c98:	7dbb      	ldrb	r3, [r7, #22]
 8013c9a:	b29c      	uxth	r4, r3
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f7fa fc91 	bl	800e5c8 <lwip_htonl>
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	2200      	movs	r2, #0
 8013caa:	4621      	mov	r1, r4
 8013cac:	6878      	ldr	r0, [r7, #4]
 8013cae:	f7ff fdad 	bl	801380c <tcp_output_alloc_header>
 8013cb2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013cb4:	693b      	ldr	r3, [r7, #16]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d109      	bne.n	8013cce <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	7e9b      	ldrb	r3, [r3, #26]
 8013cbe:	f043 0303 	orr.w	r3, r3, #3
 8013cc2:	b2da      	uxtb	r2, r3
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013cc8:	f06f 0301 	mvn.w	r3, #1
 8013ccc:	e036      	b.n	8013d3c <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	3304      	adds	r3, #4
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	f002 f8d6 	bl	8015e84 <ip4_route>
 8013cd8:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d102      	bne.n	8013ce6 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8013ce0:	23fc      	movs	r3, #252	; 0xfc
 8013ce2:	75fb      	strb	r3, [r7, #23]
 8013ce4:	e012      	b.n	8013d0c <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8013ce6:	6879      	ldr	r1, [r7, #4]
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	1d18      	adds	r0, r3, #4
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	7a9c      	ldrb	r4, [r3, #10]
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	7a5b      	ldrb	r3, [r3, #9]
 8013cf4:	68fa      	ldr	r2, [r7, #12]
 8013cf6:	9202      	str	r2, [sp, #8]
 8013cf8:	2206      	movs	r2, #6
 8013cfa:	9201      	str	r2, [sp, #4]
 8013cfc:	9300      	str	r3, [sp, #0]
 8013cfe:	4623      	mov	r3, r4
 8013d00:	4602      	mov	r2, r0
 8013d02:	6938      	ldr	r0, [r7, #16]
 8013d04:	f002 fa66 	bl	80161d4 <ip4_output_if>
 8013d08:	4603      	mov	r3, r0
 8013d0a:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8013d0c:	6938      	ldr	r0, [r7, #16]
 8013d0e:	f7fb ff21 	bl	800fb54 <pbuf_free>

  if (err != ERR_OK) {
 8013d12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d007      	beq.n	8013d2a <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	7e9b      	ldrb	r3, [r3, #26]
 8013d1e:	f043 0303 	orr.w	r3, r3, #3
 8013d22:	b2da      	uxtb	r2, r3
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	769a      	strb	r2, [r3, #26]
 8013d28:	e006      	b.n	8013d38 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	7e9b      	ldrb	r3, [r3, #26]
 8013d2e:	f023 0303 	bic.w	r3, r3, #3
 8013d32:	b2da      	uxtb	r2, r3
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8013d38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013d3c:	4618      	mov	r0, r3
 8013d3e:	371c      	adds	r7, #28
 8013d40:	46bd      	mov	sp, r7
 8013d42:	bd90      	pop	{r4, r7, pc}

08013d44 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013d44:	b5b0      	push	{r4, r5, r7, lr}
 8013d46:	b08a      	sub	sp, #40	; 0x28
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	7d1b      	ldrb	r3, [r3, #20]
 8013d50:	2b01      	cmp	r3, #1
 8013d52:	d106      	bne.n	8013d62 <tcp_output+0x1e>
 8013d54:	4b9b      	ldr	r3, [pc, #620]	; (8013fc4 <tcp_output+0x280>)
 8013d56:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8013d5a:	499b      	ldr	r1, [pc, #620]	; (8013fc8 <tcp_output+0x284>)
 8013d5c:	489b      	ldr	r0, [pc, #620]	; (8013fcc <tcp_output+0x288>)
 8013d5e:	f003 fb67 	bl	8017430 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013d62:	4b9b      	ldr	r3, [pc, #620]	; (8013fd0 <tcp_output+0x28c>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	687a      	ldr	r2, [r7, #4]
 8013d68:	429a      	cmp	r2, r3
 8013d6a:	d101      	bne.n	8013d70 <tcp_output+0x2c>
    return ERR_OK;
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	e1cf      	b.n	8014110 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013d7c:	429a      	cmp	r2, r3
 8013d7e:	d203      	bcs.n	8013d88 <tcp_output+0x44>
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013d86:	e002      	b.n	8013d8e <tcp_output+0x4a>
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013d8e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013d94:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	7e9b      	ldrb	r3, [r3, #26]
 8013d9a:	f003 0302 	and.w	r3, r3, #2
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d017      	beq.n	8013dd2 <tcp_output+0x8e>
 8013da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d00f      	beq.n	8013dc8 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8013da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013daa:	68db      	ldr	r3, [r3, #12]
 8013dac:	685b      	ldr	r3, [r3, #4]
 8013dae:	4618      	mov	r0, r3
 8013db0:	f7fa fc0a 	bl	800e5c8 <lwip_htonl>
 8013db4:	4602      	mov	r2, r0
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013dba:	1ad3      	subs	r3, r2, r3
 8013dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013dbe:	8912      	ldrh	r2, [r2, #8]
 8013dc0:	4413      	add	r3, r2
     (seg == NULL ||
 8013dc2:	69ba      	ldr	r2, [r7, #24]
 8013dc4:	429a      	cmp	r2, r3
 8013dc6:	d204      	bcs.n	8013dd2 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8013dc8:	6878      	ldr	r0, [r7, #4]
 8013dca:	f7ff ff5f 	bl	8013c8c <tcp_send_empty_ack>
 8013dce:	4603      	mov	r3, r0
 8013dd0:	e19e      	b.n	8014110 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013dd6:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013dd8:	6a3b      	ldr	r3, [r7, #32]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d007      	beq.n	8013dee <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8013dde:	e002      	b.n	8013de6 <tcp_output+0xa2>
 8013de0:	6a3b      	ldr	r3, [r7, #32]
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	623b      	str	r3, [r7, #32]
 8013de6:	6a3b      	ldr	r3, [r7, #32]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d1f8      	bne.n	8013de0 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	3304      	adds	r3, #4
 8013df2:	4618      	mov	r0, r3
 8013df4:	f002 f846 	bl	8015e84 <ip4_route>
 8013df8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013dfa:	697b      	ldr	r3, [r7, #20]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d102      	bne.n	8013e06 <tcp_output+0xc2>
    return ERR_RTE;
 8013e00:	f06f 0303 	mvn.w	r3, #3
 8013e04:	e184      	b.n	8014110 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d003      	beq.n	8013e14 <tcp_output+0xd0>
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d111      	bne.n	8013e38 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013e14:	697b      	ldr	r3, [r7, #20]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d002      	beq.n	8013e20 <tcp_output+0xdc>
 8013e1a:	697b      	ldr	r3, [r7, #20]
 8013e1c:	3304      	adds	r3, #4
 8013e1e:	e000      	b.n	8013e22 <tcp_output+0xde>
 8013e20:	2300      	movs	r3, #0
 8013e22:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013e24:	693b      	ldr	r3, [r7, #16]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d102      	bne.n	8013e30 <tcp_output+0xec>
      return ERR_RTE;
 8013e2a:	f06f 0303 	mvn.w	r3, #3
 8013e2e:	e16f      	b.n	8014110 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013e30:	693b      	ldr	r3, [r7, #16]
 8013e32:	681a      	ldr	r2, [r3, #0]
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8013e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	f000 813e 	beq.w	80140bc <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8013e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e42:	68db      	ldr	r3, [r3, #12]
 8013e44:	685b      	ldr	r3, [r3, #4]
 8013e46:	4618      	mov	r0, r3
 8013e48:	f7fa fbbe 	bl	800e5c8 <lwip_htonl>
 8013e4c:	4602      	mov	r2, r0
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e52:	1ad3      	subs	r3, r2, r3
 8013e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e56:	8912      	ldrh	r2, [r2, #8]
 8013e58:	4413      	add	r3, r2
  if (seg != NULL &&
 8013e5a:	69ba      	ldr	r2, [r7, #24]
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	f080 812d 	bcs.w	80140bc <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8013e62:	69bb      	ldr	r3, [r7, #24]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	f000 8129 	beq.w	80140bc <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013e70:	461a      	mov	r2, r3
 8013e72:	69bb      	ldr	r3, [r7, #24]
 8013e74:	4293      	cmp	r3, r2
 8013e76:	f040 8121 	bne.w	80140bc <tcp_output+0x378>
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	f040 811c 	bne.w	80140bc <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	f040 812b 	bne.w	80140e6 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	2200      	movs	r2, #0
 8013e94:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	2201      	movs	r2, #1
 8013e9c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8013ea0:	e121      	b.n	80140e6 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea4:	68db      	ldr	r3, [r3, #12]
 8013ea6:	899b      	ldrh	r3, [r3, #12]
 8013ea8:	b29b      	uxth	r3, r3
 8013eaa:	4618      	mov	r0, r3
 8013eac:	f7fa fb7e 	bl	800e5ac <lwip_htons>
 8013eb0:	4603      	mov	r3, r0
 8013eb2:	f003 0304 	and.w	r3, r3, #4
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d006      	beq.n	8013ec8 <tcp_output+0x184>
 8013eba:	4b42      	ldr	r3, [pc, #264]	; (8013fc4 <tcp_output+0x280>)
 8013ebc:	f240 4246 	movw	r2, #1094	; 0x446
 8013ec0:	4944      	ldr	r1, [pc, #272]	; (8013fd4 <tcp_output+0x290>)
 8013ec2:	4842      	ldr	r0, [pc, #264]	; (8013fcc <tcp_output+0x288>)
 8013ec4:	f003 fab4 	bl	8017430 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d01f      	beq.n	8013f10 <tcp_output+0x1cc>
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	7e9b      	ldrb	r3, [r3, #26]
 8013ed4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d119      	bne.n	8013f10 <tcp_output+0x1cc>
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d00b      	beq.n	8013efc <tcp_output+0x1b8>
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d110      	bne.n	8013f10 <tcp_output+0x1cc>
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013ef2:	891a      	ldrh	r2, [r3, #8]
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ef8:	429a      	cmp	r2, r3
 8013efa:	d209      	bcs.n	8013f10 <tcp_output+0x1cc>
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d004      	beq.n	8013f10 <tcp_output+0x1cc>
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013f0c:	2b08      	cmp	r3, #8
 8013f0e:	d901      	bls.n	8013f14 <tcp_output+0x1d0>
 8013f10:	2301      	movs	r3, #1
 8013f12:	e000      	b.n	8013f16 <tcp_output+0x1d2>
 8013f14:	2300      	movs	r3, #0
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d106      	bne.n	8013f28 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	7e9b      	ldrb	r3, [r3, #26]
 8013f1e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	f000 80e1 	beq.w	80140ea <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	7d1b      	ldrb	r3, [r3, #20]
 8013f2c:	2b02      	cmp	r3, #2
 8013f2e:	d00d      	beq.n	8013f4c <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f32:	68db      	ldr	r3, [r3, #12]
 8013f34:	899b      	ldrh	r3, [r3, #12]
 8013f36:	b29c      	uxth	r4, r3
 8013f38:	2010      	movs	r0, #16
 8013f3a:	f7fa fb37 	bl	800e5ac <lwip_htons>
 8013f3e:	4603      	mov	r3, r0
 8013f40:	461a      	mov	r2, r3
 8013f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f44:	68db      	ldr	r3, [r3, #12]
 8013f46:	4322      	orrs	r2, r4
 8013f48:	b292      	uxth	r2, r2
 8013f4a:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8013f4c:	697a      	ldr	r2, [r7, #20]
 8013f4e:	6879      	ldr	r1, [r7, #4]
 8013f50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013f52:	f000 f8e1 	bl	8014118 <tcp_output_segment>
 8013f56:	4603      	mov	r3, r0
 8013f58:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d009      	beq.n	8013f76 <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	7e9b      	ldrb	r3, [r3, #26]
 8013f66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013f6a:	b2da      	uxtb	r2, r3
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	769a      	strb	r2, [r3, #26]
      return err;
 8013f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f74:	e0cc      	b.n	8014110 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 8013f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f78:	681a      	ldr	r2, [r3, #0]
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	7d1b      	ldrb	r3, [r3, #20]
 8013f82:	2b02      	cmp	r3, #2
 8013f84:	d006      	beq.n	8013f94 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	7e9b      	ldrb	r3, [r3, #26]
 8013f8a:	f023 0303 	bic.w	r3, r3, #3
 8013f8e:	b2da      	uxtb	r2, r3
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f96:	68db      	ldr	r3, [r3, #12]
 8013f98:	685b      	ldr	r3, [r3, #4]
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f7fa fb14 	bl	800e5c8 <lwip_htonl>
 8013fa0:	4604      	mov	r4, r0
 8013fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fa4:	891b      	ldrh	r3, [r3, #8]
 8013fa6:	461d      	mov	r5, r3
 8013fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013faa:	68db      	ldr	r3, [r3, #12]
 8013fac:	899b      	ldrh	r3, [r3, #12]
 8013fae:	b29b      	uxth	r3, r3
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	f7fa fafb 	bl	800e5ac <lwip_htons>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	f003 0303 	and.w	r3, r3, #3
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d00b      	beq.n	8013fd8 <tcp_output+0x294>
 8013fc0:	2301      	movs	r3, #1
 8013fc2:	e00a      	b.n	8013fda <tcp_output+0x296>
 8013fc4:	08019678 	.word	0x08019678
 8013fc8:	08019a7c 	.word	0x08019a7c
 8013fcc:	080196dc 	.word	0x080196dc
 8013fd0:	2400d904 	.word	0x2400d904
 8013fd4:	08019aa4 	.word	0x08019aa4
 8013fd8:	2300      	movs	r3, #0
 8013fda:	442b      	add	r3, r5
 8013fdc:	4423      	add	r3, r4
 8013fde:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013fe4:	68bb      	ldr	r3, [r7, #8]
 8013fe6:	1ad3      	subs	r3, r2, r3
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	da02      	bge.n	8013ff2 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	68ba      	ldr	r2, [r7, #8]
 8013ff0:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff4:	891b      	ldrh	r3, [r3, #8]
 8013ff6:	461c      	mov	r4, r3
 8013ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ffa:	68db      	ldr	r3, [r3, #12]
 8013ffc:	899b      	ldrh	r3, [r3, #12]
 8013ffe:	b29b      	uxth	r3, r3
 8014000:	4618      	mov	r0, r3
 8014002:	f7fa fad3 	bl	800e5ac <lwip_htons>
 8014006:	4603      	mov	r3, r0
 8014008:	f003 0303 	and.w	r3, r3, #3
 801400c:	2b00      	cmp	r3, #0
 801400e:	d001      	beq.n	8014014 <tcp_output+0x2d0>
 8014010:	2301      	movs	r3, #1
 8014012:	e000      	b.n	8014016 <tcp_output+0x2d2>
 8014014:	2300      	movs	r3, #0
 8014016:	4423      	add	r3, r4
 8014018:	2b00      	cmp	r3, #0
 801401a:	d049      	beq.n	80140b0 <tcp_output+0x36c>
      seg->next = NULL;
 801401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801401e:	2200      	movs	r2, #0
 8014020:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014026:	2b00      	cmp	r3, #0
 8014028:	d105      	bne.n	8014036 <tcp_output+0x2f2>
        pcb->unacked = seg;
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801402e:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8014030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014032:	623b      	str	r3, [r7, #32]
 8014034:	e03f      	b.n	80140b6 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014038:	68db      	ldr	r3, [r3, #12]
 801403a:	685b      	ldr	r3, [r3, #4]
 801403c:	4618      	mov	r0, r3
 801403e:	f7fa fac3 	bl	800e5c8 <lwip_htonl>
 8014042:	4604      	mov	r4, r0
 8014044:	6a3b      	ldr	r3, [r7, #32]
 8014046:	68db      	ldr	r3, [r3, #12]
 8014048:	685b      	ldr	r3, [r3, #4]
 801404a:	4618      	mov	r0, r3
 801404c:	f7fa fabc 	bl	800e5c8 <lwip_htonl>
 8014050:	4603      	mov	r3, r0
 8014052:	1ae3      	subs	r3, r4, r3
 8014054:	2b00      	cmp	r3, #0
 8014056:	da24      	bge.n	80140a2 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	336c      	adds	r3, #108	; 0x6c
 801405c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801405e:	e002      	b.n	8014066 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8014060:	69fb      	ldr	r3, [r7, #28]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014066:	69fb      	ldr	r3, [r7, #28]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d011      	beq.n	8014092 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801406e:	69fb      	ldr	r3, [r7, #28]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	68db      	ldr	r3, [r3, #12]
 8014074:	685b      	ldr	r3, [r3, #4]
 8014076:	4618      	mov	r0, r3
 8014078:	f7fa faa6 	bl	800e5c8 <lwip_htonl>
 801407c:	4604      	mov	r4, r0
 801407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014080:	68db      	ldr	r3, [r3, #12]
 8014082:	685b      	ldr	r3, [r3, #4]
 8014084:	4618      	mov	r0, r3
 8014086:	f7fa fa9f 	bl	800e5c8 <lwip_htonl>
 801408a:	4603      	mov	r3, r0
 801408c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801408e:	2b00      	cmp	r3, #0
 8014090:	dbe6      	blt.n	8014060 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8014092:	69fb      	ldr	r3, [r7, #28]
 8014094:	681a      	ldr	r2, [r3, #0]
 8014096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014098:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801409a:	69fb      	ldr	r3, [r7, #28]
 801409c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801409e:	601a      	str	r2, [r3, #0]
 80140a0:	e009      	b.n	80140b6 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80140a2:	6a3b      	ldr	r3, [r7, #32]
 80140a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140a6:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80140a8:	6a3b      	ldr	r3, [r7, #32]
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	623b      	str	r3, [r7, #32]
 80140ae:	e002      	b.n	80140b6 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80140b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80140b2:	f7fc fea2 	bl	8010dfa <tcp_seg_free>
    }
    seg = pcb->unsent;
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80140ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80140bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d015      	beq.n	80140ee <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80140c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140c4:	68db      	ldr	r3, [r3, #12]
 80140c6:	685b      	ldr	r3, [r3, #4]
 80140c8:	4618      	mov	r0, r3
 80140ca:	f7fa fa7d 	bl	800e5c8 <lwip_htonl>
 80140ce:	4602      	mov	r2, r0
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140d4:	1ad3      	subs	r3, r2, r3
 80140d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140d8:	8912      	ldrh	r2, [r2, #8]
 80140da:	4413      	add	r3, r2
  while (seg != NULL &&
 80140dc:	69ba      	ldr	r2, [r7, #24]
 80140de:	429a      	cmp	r2, r3
 80140e0:	f4bf aedf 	bcs.w	8013ea2 <tcp_output+0x15e>
  }
output_done:
 80140e4:	e003      	b.n	80140ee <tcp_output+0x3aa>
    goto output_done;
 80140e6:	bf00      	nop
 80140e8:	e002      	b.n	80140f0 <tcp_output+0x3ac>
      break;
 80140ea:	bf00      	nop
 80140ec:	e000      	b.n	80140f0 <tcp_output+0x3ac>
output_done:
 80140ee:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d103      	bne.n	8014100 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	2200      	movs	r2, #0
 80140fc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	7e9b      	ldrb	r3, [r3, #26]
 8014104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014108:	b2da      	uxtb	r2, r3
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 801410e:	2300      	movs	r3, #0
}
 8014110:	4618      	mov	r0, r3
 8014112:	3728      	adds	r7, #40	; 0x28
 8014114:	46bd      	mov	sp, r7
 8014116:	bdb0      	pop	{r4, r5, r7, pc}

08014118 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014118:	b5b0      	push	{r4, r5, r7, lr}
 801411a:	b08c      	sub	sp, #48	; 0x30
 801411c:	af04      	add	r7, sp, #16
 801411e:	60f8      	str	r0, [r7, #12]
 8014120:	60b9      	str	r1, [r7, #8]
 8014122:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	685b      	ldr	r3, [r3, #4]
 8014128:	89db      	ldrh	r3, [r3, #14]
 801412a:	2b01      	cmp	r3, #1
 801412c:	d001      	beq.n	8014132 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 801412e:	2300      	movs	r3, #0
 8014130:	e08b      	b.n	801424a <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014132:	68bb      	ldr	r3, [r7, #8]
 8014134:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	68dc      	ldr	r4, [r3, #12]
 801413a:	4610      	mov	r0, r2
 801413c:	f7fa fa44 	bl	800e5c8 <lwip_htonl>
 8014140:	4603      	mov	r3, r0
 8014142:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014144:	68bb      	ldr	r3, [r7, #8]
 8014146:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	68dc      	ldr	r4, [r3, #12]
 801414c:	4610      	mov	r0, r2
 801414e:	f7fa fa2d 	bl	800e5ac <lwip_htons>
 8014152:	4603      	mov	r3, r0
 8014154:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014156:	68bb      	ldr	r3, [r7, #8]
 8014158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801415a:	68ba      	ldr	r2, [r7, #8]
 801415c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801415e:	441a      	add	r2, r3
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	68db      	ldr	r3, [r3, #12]
 8014168:	3314      	adds	r3, #20
 801416a:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	7a9b      	ldrb	r3, [r3, #10]
 8014170:	f003 0301 	and.w	r3, r3, #1
 8014174:	2b00      	cmp	r3, #0
 8014176:	d014      	beq.n	80141a2 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8014178:	68bb      	ldr	r3, [r7, #8]
 801417a:	3304      	adds	r3, #4
 801417c:	4619      	mov	r1, r3
 801417e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8014182:	f7fd f8a5 	bl	80112d0 <tcp_eff_send_mss_impl>
 8014186:	4603      	mov	r3, r0
 8014188:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801418a:	8b7b      	ldrh	r3, [r7, #26]
 801418c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8014190:	4618      	mov	r0, r3
 8014192:	f7fa fa19 	bl	800e5c8 <lwip_htonl>
 8014196:	4602      	mov	r2, r0
 8014198:	69fb      	ldr	r3, [r7, #28]
 801419a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801419c:	69fb      	ldr	r3, [r7, #28]
 801419e:	3304      	adds	r3, #4
 80141a0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80141a2:	68bb      	ldr	r3, [r7, #8]
 80141a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	da02      	bge.n	80141b2 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	2200      	movs	r2, #0
 80141b0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80141b2:	68bb      	ldr	r3, [r7, #8]
 80141b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d10c      	bne.n	80141d4 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 80141ba:	4b26      	ldr	r3, [pc, #152]	; (8014254 <tcp_output_segment+0x13c>)
 80141bc:	681a      	ldr	r2, [r3, #0]
 80141be:	68bb      	ldr	r3, [r7, #8]
 80141c0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	68db      	ldr	r3, [r3, #12]
 80141c6:	685b      	ldr	r3, [r3, #4]
 80141c8:	4618      	mov	r0, r3
 80141ca:	f7fa f9fd 	bl	800e5c8 <lwip_htonl>
 80141ce:	4602      	mov	r2, r0
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	68db      	ldr	r3, [r3, #12]
 80141d8:	461a      	mov	r2, r3
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	685b      	ldr	r3, [r3, #4]
 80141de:	685b      	ldr	r3, [r3, #4]
 80141e0:	1ad3      	subs	r3, r2, r3
 80141e2:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	685b      	ldr	r3, [r3, #4]
 80141e8:	8959      	ldrh	r1, [r3, #10]
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	685b      	ldr	r3, [r3, #4]
 80141ee:	8b3a      	ldrh	r2, [r7, #24]
 80141f0:	1a8a      	subs	r2, r1, r2
 80141f2:	b292      	uxth	r2, r2
 80141f4:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	685b      	ldr	r3, [r3, #4]
 80141fa:	8919      	ldrh	r1, [r3, #8]
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	685b      	ldr	r3, [r3, #4]
 8014200:	8b3a      	ldrh	r2, [r7, #24]
 8014202:	1a8a      	subs	r2, r1, r2
 8014204:	b292      	uxth	r2, r2
 8014206:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	685b      	ldr	r3, [r3, #4]
 801420c:	68fa      	ldr	r2, [r7, #12]
 801420e:	68d2      	ldr	r2, [r2, #12]
 8014210:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	68db      	ldr	r3, [r3, #12]
 8014216:	2200      	movs	r2, #0
 8014218:	741a      	strb	r2, [r3, #16]
 801421a:	2200      	movs	r2, #0
 801421c:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	6858      	ldr	r0, [r3, #4]
 8014222:	68b9      	ldr	r1, [r7, #8]
 8014224:	68bb      	ldr	r3, [r7, #8]
 8014226:	1d1c      	adds	r4, r3, #4
 8014228:	68bb      	ldr	r3, [r7, #8]
 801422a:	7a9d      	ldrb	r5, [r3, #10]
 801422c:	68bb      	ldr	r3, [r7, #8]
 801422e:	7a5b      	ldrb	r3, [r3, #9]
 8014230:	687a      	ldr	r2, [r7, #4]
 8014232:	9202      	str	r2, [sp, #8]
 8014234:	2206      	movs	r2, #6
 8014236:	9201      	str	r2, [sp, #4]
 8014238:	9300      	str	r3, [sp, #0]
 801423a:	462b      	mov	r3, r5
 801423c:	4622      	mov	r2, r4
 801423e:	f001 ffc9 	bl	80161d4 <ip4_output_if>
 8014242:	4603      	mov	r3, r0
 8014244:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8014246:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801424a:	4618      	mov	r0, r3
 801424c:	3720      	adds	r7, #32
 801424e:	46bd      	mov	sp, r7
 8014250:	bdb0      	pop	{r4, r5, r7, pc}
 8014252:	bf00      	nop
 8014254:	2400d8f4 	.word	0x2400d8f4

08014258 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b08c      	sub	sp, #48	; 0x30
 801425c:	af04      	add	r7, sp, #16
 801425e:	60f8      	str	r0, [r7, #12]
 8014260:	60b9      	str	r1, [r7, #8]
 8014262:	607a      	str	r2, [r7, #4]
 8014264:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8014266:	2200      	movs	r2, #0
 8014268:	2114      	movs	r1, #20
 801426a:	2001      	movs	r0, #1
 801426c:	f7fb f900 	bl	800f470 <pbuf_alloc>
 8014270:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8014272:	69fb      	ldr	r3, [r7, #28]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d05b      	beq.n	8014330 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014278:	69fb      	ldr	r3, [r7, #28]
 801427a:	895b      	ldrh	r3, [r3, #10]
 801427c:	2b13      	cmp	r3, #19
 801427e:	d806      	bhi.n	801428e <tcp_rst+0x36>
 8014280:	4b2d      	ldr	r3, [pc, #180]	; (8014338 <tcp_rst+0xe0>)
 8014282:	f240 524d 	movw	r2, #1357	; 0x54d
 8014286:	492d      	ldr	r1, [pc, #180]	; (801433c <tcp_rst+0xe4>)
 8014288:	482d      	ldr	r0, [pc, #180]	; (8014340 <tcp_rst+0xe8>)
 801428a:	f003 f8d1 	bl	8017430 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 801428e:	69fb      	ldr	r3, [r7, #28]
 8014290:	685b      	ldr	r3, [r3, #4]
 8014292:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8014294:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014296:	4618      	mov	r0, r3
 8014298:	f7fa f988 	bl	800e5ac <lwip_htons>
 801429c:	4603      	mov	r3, r0
 801429e:	461a      	mov	r2, r3
 80142a0:	69bb      	ldr	r3, [r7, #24]
 80142a2:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 80142a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80142a6:	4618      	mov	r0, r3
 80142a8:	f7fa f980 	bl	800e5ac <lwip_htons>
 80142ac:	4603      	mov	r3, r0
 80142ae:	461a      	mov	r2, r3
 80142b0:	69bb      	ldr	r3, [r7, #24]
 80142b2:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 80142b4:	68f8      	ldr	r0, [r7, #12]
 80142b6:	f7fa f987 	bl	800e5c8 <lwip_htonl>
 80142ba:	4602      	mov	r2, r0
 80142bc:	69bb      	ldr	r3, [r7, #24]
 80142be:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 80142c0:	68b8      	ldr	r0, [r7, #8]
 80142c2:	f7fa f981 	bl	800e5c8 <lwip_htonl>
 80142c6:	4602      	mov	r2, r0
 80142c8:	69bb      	ldr	r3, [r7, #24]
 80142ca:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 80142cc:	f245 0014 	movw	r0, #20500	; 0x5014
 80142d0:	f7fa f96c 	bl	800e5ac <lwip_htons>
 80142d4:	4603      	mov	r3, r0
 80142d6:	461a      	mov	r2, r3
 80142d8:	69bb      	ldr	r3, [r7, #24]
 80142da:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 80142dc:	69bb      	ldr	r3, [r7, #24]
 80142de:	2200      	movs	r2, #0
 80142e0:	f042 0208 	orr.w	r2, r2, #8
 80142e4:	739a      	strb	r2, [r3, #14]
 80142e6:	2200      	movs	r2, #0
 80142e8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80142ec:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 80142ee:	69bb      	ldr	r3, [r7, #24]
 80142f0:	2200      	movs	r2, #0
 80142f2:	741a      	strb	r2, [r3, #16]
 80142f4:	2200      	movs	r2, #0
 80142f6:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 80142f8:	69bb      	ldr	r3, [r7, #24]
 80142fa:	2200      	movs	r2, #0
 80142fc:	749a      	strb	r2, [r3, #18]
 80142fe:	2200      	movs	r2, #0
 8014300:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8014302:	6838      	ldr	r0, [r7, #0]
 8014304:	f001 fdbe 	bl	8015e84 <ip4_route>
 8014308:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 801430a:	697b      	ldr	r3, [r7, #20]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d00b      	beq.n	8014328 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8014310:	697b      	ldr	r3, [r7, #20]
 8014312:	9302      	str	r3, [sp, #8]
 8014314:	2306      	movs	r3, #6
 8014316:	9301      	str	r3, [sp, #4]
 8014318:	2300      	movs	r3, #0
 801431a:	9300      	str	r3, [sp, #0]
 801431c:	23ff      	movs	r3, #255	; 0xff
 801431e:	683a      	ldr	r2, [r7, #0]
 8014320:	6879      	ldr	r1, [r7, #4]
 8014322:	69f8      	ldr	r0, [r7, #28]
 8014324:	f001 ff56 	bl	80161d4 <ip4_output_if>
  }
  pbuf_free(p);
 8014328:	69f8      	ldr	r0, [r7, #28]
 801432a:	f7fb fc13 	bl	800fb54 <pbuf_free>
 801432e:	e000      	b.n	8014332 <tcp_rst+0xda>
    return;
 8014330:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014332:	3720      	adds	r7, #32
 8014334:	46bd      	mov	sp, r7
 8014336:	bd80      	pop	{r7, pc}
 8014338:	08019678 	.word	0x08019678
 801433c:	080196ac 	.word	0x080196ac
 8014340:	080196dc 	.word	0x080196dc

08014344 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b084      	sub	sp, #16
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014350:	2b00      	cmp	r3, #0
 8014352:	d029      	beq.n	80143a8 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014358:	60fb      	str	r3, [r7, #12]
 801435a:	e002      	b.n	8014362 <tcp_rexmit_rto+0x1e>
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	60fb      	str	r3, [r7, #12]
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d1f8      	bne.n	801435c <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	2200      	movs	r2, #0
 801437e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014386:	2bff      	cmp	r3, #255	; 0xff
 8014388:	d007      	beq.n	801439a <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014390:	3301      	adds	r3, #1
 8014392:	b2da      	uxtb	r2, r3
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	2200      	movs	r2, #0
 801439e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 80143a0:	6878      	ldr	r0, [r7, #4]
 80143a2:	f7ff fccf 	bl	8013d44 <tcp_output>
 80143a6:	e000      	b.n	80143aa <tcp_rexmit_rto+0x66>
    return;
 80143a8:	bf00      	nop
}
 80143aa:	3710      	adds	r7, #16
 80143ac:	46bd      	mov	sp, r7
 80143ae:	bd80      	pop	{r7, pc}

080143b0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 80143b0:	b590      	push	{r4, r7, lr}
 80143b2:	b085      	sub	sp, #20
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d043      	beq.n	8014448 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143c4:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 80143c6:	68bb      	ldr	r3, [r7, #8]
 80143c8:	681a      	ldr	r2, [r3, #0]
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	3368      	adds	r3, #104	; 0x68
 80143d2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80143d4:	e002      	b.n	80143dc <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d011      	beq.n	8014408 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	68db      	ldr	r3, [r3, #12]
 80143ea:	685b      	ldr	r3, [r3, #4]
 80143ec:	4618      	mov	r0, r3
 80143ee:	f7fa f8eb 	bl	800e5c8 <lwip_htonl>
 80143f2:	4604      	mov	r4, r0
 80143f4:	68bb      	ldr	r3, [r7, #8]
 80143f6:	68db      	ldr	r3, [r3, #12]
 80143f8:	685b      	ldr	r3, [r3, #4]
 80143fa:	4618      	mov	r0, r3
 80143fc:	f7fa f8e4 	bl	800e5c8 <lwip_htonl>
 8014400:	4603      	mov	r3, r0
 8014402:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014404:	2b00      	cmp	r3, #0
 8014406:	dbe6      	blt.n	80143d6 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	681a      	ldr	r2, [r3, #0]
 801440c:	68bb      	ldr	r3, [r7, #8]
 801440e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	68ba      	ldr	r2, [r7, #8]
 8014414:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014416:	68bb      	ldr	r3, [r7, #8]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d103      	bne.n	8014426 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	2200      	movs	r2, #0
 8014422:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801442c:	2bff      	cmp	r3, #255	; 0xff
 801442e:	d007      	beq.n	8014440 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014436:	3301      	adds	r3, #1
 8014438:	b2da      	uxtb	r2, r3
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	2200      	movs	r2, #0
 8014444:	635a      	str	r2, [r3, #52]	; 0x34
 8014446:	e000      	b.n	801444a <tcp_rexmit+0x9a>
    return;
 8014448:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 801444a:	3714      	adds	r7, #20
 801444c:	46bd      	mov	sp, r7
 801444e:	bd90      	pop	{r4, r7, pc}

08014450 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b082      	sub	sp, #8
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801445c:	2b00      	cmp	r3, #0
 801445e:	d04c      	beq.n	80144fa <tcp_rexmit_fast+0xaa>
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	7e9b      	ldrb	r3, [r3, #26]
 8014464:	f003 0304 	and.w	r3, r3, #4
 8014468:	2b00      	cmp	r3, #0
 801446a:	d146      	bne.n	80144fa <tcp_rexmit_fast+0xaa>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 801446c:	6878      	ldr	r0, [r7, #4]
 801446e:	f7ff ff9f 	bl	80143b0 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801447e:	429a      	cmp	r2, r3
 8014480:	d208      	bcs.n	8014494 <tcp_rexmit_fast+0x44>
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014488:	2b00      	cmp	r3, #0
 801448a:	da00      	bge.n	801448e <tcp_rexmit_fast+0x3e>
 801448c:	3301      	adds	r3, #1
 801448e:	105b      	asrs	r3, r3, #1
 8014490:	b29b      	uxth	r3, r3
 8014492:	e007      	b.n	80144a4 <tcp_rexmit_fast+0x54>
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801449a:	2b00      	cmp	r3, #0
 801449c:	da00      	bge.n	80144a0 <tcp_rexmit_fast+0x50>
 801449e:	3301      	adds	r3, #1
 80144a0:	105b      	asrs	r3, r3, #1
 80144a2:	b29b      	uxth	r3, r3
 80144a4:	687a      	ldr	r2, [r7, #4]
 80144a6:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80144b0:	461a      	mov	r2, r3
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144b6:	005b      	lsls	r3, r3, #1
 80144b8:	429a      	cmp	r2, r3
 80144ba:	d206      	bcs.n	80144ca <tcp_rexmit_fast+0x7a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144c0:	005b      	lsls	r3, r3, #1
 80144c2:	b29a      	uxth	r2, r3
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144d4:	4619      	mov	r1, r3
 80144d6:	0049      	lsls	r1, r1, #1
 80144d8:	440b      	add	r3, r1
 80144da:	b29b      	uxth	r3, r3
 80144dc:	4413      	add	r3, r2
 80144de:	b29a      	uxth	r2, r3
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	7e9b      	ldrb	r3, [r3, #26]
 80144ea:	f043 0304 	orr.w	r3, r3, #4
 80144ee:	b2da      	uxtb	r2, r3
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	2200      	movs	r2, #0
 80144f8:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 80144fa:	bf00      	nop
 80144fc:	3708      	adds	r7, #8
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd80      	pop	{r7, pc}

08014502 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014502:	b580      	push	{r7, lr}
 8014504:	b08a      	sub	sp, #40	; 0x28
 8014506:	af04      	add	r7, sp, #16
 8014508:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801450e:	3b01      	subs	r3, #1
 8014510:	4618      	mov	r0, r3
 8014512:	f7fa f859 	bl	800e5c8 <lwip_htonl>
 8014516:	4603      	mov	r3, r0
 8014518:	2200      	movs	r2, #0
 801451a:	2100      	movs	r1, #0
 801451c:	6878      	ldr	r0, [r7, #4]
 801451e:	f7ff f975 	bl	801380c <tcp_output_alloc_header>
 8014522:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014524:	693b      	ldr	r3, [r7, #16]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d102      	bne.n	8014530 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801452a:	f04f 33ff 	mov.w	r3, #4294967295
 801452e:	e021      	b.n	8014574 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	3304      	adds	r3, #4
 8014534:	4618      	mov	r0, r3
 8014536:	f001 fca5 	bl	8015e84 <ip4_route>
 801453a:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d102      	bne.n	8014548 <tcp_keepalive+0x46>
    err = ERR_RTE;
 8014542:	23fc      	movs	r3, #252	; 0xfc
 8014544:	75fb      	strb	r3, [r7, #23]
 8014546:	e010      	b.n	801456a <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8014548:	6879      	ldr	r1, [r7, #4]
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	1d1a      	adds	r2, r3, #4
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	7a98      	ldrb	r0, [r3, #10]
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	9302      	str	r3, [sp, #8]
 8014556:	2306      	movs	r3, #6
 8014558:	9301      	str	r3, [sp, #4]
 801455a:	2300      	movs	r3, #0
 801455c:	9300      	str	r3, [sp, #0]
 801455e:	4603      	mov	r3, r0
 8014560:	6938      	ldr	r0, [r7, #16]
 8014562:	f001 fe37 	bl	80161d4 <ip4_output_if>
 8014566:	4603      	mov	r3, r0
 8014568:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801456a:	6938      	ldr	r0, [r7, #16]
 801456c:	f7fb faf2 	bl	800fb54 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014570:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014574:	4618      	mov	r0, r3
 8014576:	3718      	adds	r7, #24
 8014578:	46bd      	mov	sp, r7
 801457a:	bd80      	pop	{r7, pc}

0801457c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801457c:	b590      	push	{r4, r7, lr}
 801457e:	b08f      	sub	sp, #60	; 0x3c
 8014580:	af04      	add	r7, sp, #16
 8014582:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014588:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 801458a:	6a3b      	ldr	r3, [r7, #32]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d102      	bne.n	8014596 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014594:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8014596:	6a3b      	ldr	r3, [r7, #32]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d101      	bne.n	80145a0 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 801459c:	2300      	movs	r3, #0
 801459e:	e085      	b.n	80146ac <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80145a0:	6a3b      	ldr	r3, [r7, #32]
 80145a2:	68db      	ldr	r3, [r3, #12]
 80145a4:	899b      	ldrh	r3, [r3, #12]
 80145a6:	b29b      	uxth	r3, r3
 80145a8:	4618      	mov	r0, r3
 80145aa:	f7f9 ffff 	bl	800e5ac <lwip_htons>
 80145ae:	4603      	mov	r3, r0
 80145b0:	f003 0301 	and.w	r3, r3, #1
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d005      	beq.n	80145c4 <tcp_zero_window_probe+0x48>
 80145b8:	6a3b      	ldr	r3, [r7, #32]
 80145ba:	891b      	ldrh	r3, [r3, #8]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d101      	bne.n	80145c4 <tcp_zero_window_probe+0x48>
 80145c0:	2301      	movs	r3, #1
 80145c2:	e000      	b.n	80145c6 <tcp_zero_window_probe+0x4a>
 80145c4:	2300      	movs	r3, #0
 80145c6:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80145c8:	7ffb      	ldrb	r3, [r7, #31]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	bf0c      	ite	eq
 80145ce:	2301      	moveq	r3, #1
 80145d0:	2300      	movne	r3, #0
 80145d2:	b2db      	uxtb	r3, r3
 80145d4:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 80145d6:	6a3b      	ldr	r3, [r7, #32]
 80145d8:	68db      	ldr	r3, [r3, #12]
 80145da:	685b      	ldr	r3, [r3, #4]
 80145dc:	8bba      	ldrh	r2, [r7, #28]
 80145de:	2100      	movs	r1, #0
 80145e0:	6878      	ldr	r0, [r7, #4]
 80145e2:	f7ff f913 	bl	801380c <tcp_output_alloc_header>
 80145e6:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80145e8:	69bb      	ldr	r3, [r7, #24]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d102      	bne.n	80145f4 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80145ee:	f04f 33ff 	mov.w	r3, #4294967295
 80145f2:	e05b      	b.n	80146ac <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80145f4:	69bb      	ldr	r3, [r7, #24]
 80145f6:	685b      	ldr	r3, [r3, #4]
 80145f8:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80145fa:	7ffb      	ldrb	r3, [r7, #31]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d00e      	beq.n	801461e <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014600:	697b      	ldr	r3, [r7, #20]
 8014602:	899b      	ldrh	r3, [r3, #12]
 8014604:	b29b      	uxth	r3, r3
 8014606:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801460a:	b29c      	uxth	r4, r3
 801460c:	2011      	movs	r0, #17
 801460e:	f7f9 ffcd 	bl	800e5ac <lwip_htons>
 8014612:	4603      	mov	r3, r0
 8014614:	4323      	orrs	r3, r4
 8014616:	b29a      	uxth	r2, r3
 8014618:	697b      	ldr	r3, [r7, #20]
 801461a:	819a      	strh	r2, [r3, #12]
 801461c:	e010      	b.n	8014640 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801461e:	69bb      	ldr	r3, [r7, #24]
 8014620:	685b      	ldr	r3, [r3, #4]
 8014622:	3314      	adds	r3, #20
 8014624:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014626:	6a3b      	ldr	r3, [r7, #32]
 8014628:	6858      	ldr	r0, [r3, #4]
 801462a:	6a3b      	ldr	r3, [r7, #32]
 801462c:	685b      	ldr	r3, [r3, #4]
 801462e:	891a      	ldrh	r2, [r3, #8]
 8014630:	6a3b      	ldr	r3, [r7, #32]
 8014632:	891b      	ldrh	r3, [r3, #8]
 8014634:	1ad3      	subs	r3, r2, r3
 8014636:	b29b      	uxth	r3, r3
 8014638:	2201      	movs	r2, #1
 801463a:	6939      	ldr	r1, [r7, #16]
 801463c:	f7fb fc86 	bl	800ff4c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014640:	6a3b      	ldr	r3, [r7, #32]
 8014642:	68db      	ldr	r3, [r3, #12]
 8014644:	685b      	ldr	r3, [r3, #4]
 8014646:	4618      	mov	r0, r3
 8014648:	f7f9 ffbe 	bl	800e5c8 <lwip_htonl>
 801464c:	4603      	mov	r3, r0
 801464e:	3301      	adds	r3, #1
 8014650:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	1ad3      	subs	r3, r2, r3
 801465a:	2b00      	cmp	r3, #0
 801465c:	da02      	bge.n	8014664 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	68fa      	ldr	r2, [r7, #12]
 8014662:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	3304      	adds	r3, #4
 8014668:	4618      	mov	r0, r3
 801466a:	f001 fc0b 	bl	8015e84 <ip4_route>
 801466e:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8014670:	68bb      	ldr	r3, [r7, #8]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d103      	bne.n	801467e <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8014676:	23fc      	movs	r3, #252	; 0xfc
 8014678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801467c:	e011      	b.n	80146a2 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801467e:	6879      	ldr	r1, [r7, #4]
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	1d1a      	adds	r2, r3, #4
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	7a98      	ldrb	r0, [r3, #10]
 8014688:	68bb      	ldr	r3, [r7, #8]
 801468a:	9302      	str	r3, [sp, #8]
 801468c:	2306      	movs	r3, #6
 801468e:	9301      	str	r3, [sp, #4]
 8014690:	2300      	movs	r3, #0
 8014692:	9300      	str	r3, [sp, #0]
 8014694:	4603      	mov	r3, r0
 8014696:	69b8      	ldr	r0, [r7, #24]
 8014698:	f001 fd9c 	bl	80161d4 <ip4_output_if>
 801469c:	4603      	mov	r3, r0
 801469e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 80146a2:	69b8      	ldr	r0, [r7, #24]
 80146a4:	f7fb fa56 	bl	800fb54 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80146a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80146ac:	4618      	mov	r0, r3
 80146ae:	372c      	adds	r7, #44	; 0x2c
 80146b0:	46bd      	mov	sp, r7
 80146b2:	bd90      	pop	{r4, r7, pc}

080146b4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80146b4:	b580      	push	{r7, lr}
 80146b6:	b082      	sub	sp, #8
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80146bc:	f7fb fcc8 	bl	8010050 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80146c0:	4b0a      	ldr	r3, [pc, #40]	; (80146ec <tcpip_tcp_timer+0x38>)
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d103      	bne.n	80146d0 <tcpip_tcp_timer+0x1c>
 80146c8:	4b09      	ldr	r3, [pc, #36]	; (80146f0 <tcpip_tcp_timer+0x3c>)
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d005      	beq.n	80146dc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80146d0:	2200      	movs	r2, #0
 80146d2:	4908      	ldr	r1, [pc, #32]	; (80146f4 <tcpip_tcp_timer+0x40>)
 80146d4:	20fa      	movs	r0, #250	; 0xfa
 80146d6:	f000 f86f 	bl	80147b8 <sys_timeout>
 80146da:	e002      	b.n	80146e2 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80146dc:	4b06      	ldr	r3, [pc, #24]	; (80146f8 <tcpip_tcp_timer+0x44>)
 80146de:	2200      	movs	r2, #0
 80146e0:	601a      	str	r2, [r3, #0]
  }
}
 80146e2:	bf00      	nop
 80146e4:	3708      	adds	r7, #8
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd80      	pop	{r7, pc}
 80146ea:	bf00      	nop
 80146ec:	2400d8f0 	.word	0x2400d8f0
 80146f0:	2400d900 	.word	0x2400d900
 80146f4:	080146b5 	.word	0x080146b5
 80146f8:	2400a438 	.word	0x2400a438

080146fc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014700:	4b0a      	ldr	r3, [pc, #40]	; (801472c <tcp_timer_needed+0x30>)
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d10f      	bne.n	8014728 <tcp_timer_needed+0x2c>
 8014708:	4b09      	ldr	r3, [pc, #36]	; (8014730 <tcp_timer_needed+0x34>)
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d103      	bne.n	8014718 <tcp_timer_needed+0x1c>
 8014710:	4b08      	ldr	r3, [pc, #32]	; (8014734 <tcp_timer_needed+0x38>)
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d007      	beq.n	8014728 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014718:	4b04      	ldr	r3, [pc, #16]	; (801472c <tcp_timer_needed+0x30>)
 801471a:	2201      	movs	r2, #1
 801471c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801471e:	2200      	movs	r2, #0
 8014720:	4905      	ldr	r1, [pc, #20]	; (8014738 <tcp_timer_needed+0x3c>)
 8014722:	20fa      	movs	r0, #250	; 0xfa
 8014724:	f000 f848 	bl	80147b8 <sys_timeout>
  }
}
 8014728:	bf00      	nop
 801472a:	bd80      	pop	{r7, pc}
 801472c:	2400a438 	.word	0x2400a438
 8014730:	2400d8f0 	.word	0x2400d8f0
 8014734:	2400d900 	.word	0x2400d900
 8014738:	080146b5 	.word	0x080146b5

0801473c <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b084      	sub	sp, #16
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	685b      	ldr	r3, [r3, #4]
 801474c:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	687a      	ldr	r2, [r7, #4]
 8014754:	4903      	ldr	r1, [pc, #12]	; (8014764 <cyclic_timer+0x28>)
 8014756:	4618      	mov	r0, r3
 8014758:	f000 f82e 	bl	80147b8 <sys_timeout>
}
 801475c:	bf00      	nop
 801475e:	3710      	adds	r7, #16
 8014760:	46bd      	mov	sp, r7
 8014762:	bd80      	pop	{r7, pc}
 8014764:	0801473d 	.word	0x0801473d

08014768 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014768:	b580      	push	{r7, lr}
 801476a:	b082      	sub	sp, #8
 801476c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801476e:	2301      	movs	r3, #1
 8014770:	607b      	str	r3, [r7, #4]
 8014772:	e00e      	b.n	8014792 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8014774:	4a0d      	ldr	r2, [pc, #52]	; (80147ac <sys_timeouts_init+0x44>)
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	00db      	lsls	r3, r3, #3
 8014780:	4a0a      	ldr	r2, [pc, #40]	; (80147ac <sys_timeouts_init+0x44>)
 8014782:	4413      	add	r3, r2
 8014784:	461a      	mov	r2, r3
 8014786:	490a      	ldr	r1, [pc, #40]	; (80147b0 <sys_timeouts_init+0x48>)
 8014788:	f000 f816 	bl	80147b8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	3301      	adds	r3, #1
 8014790:	607b      	str	r3, [r7, #4]
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	2b02      	cmp	r3, #2
 8014796:	d9ed      	bls.n	8014774 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8014798:	f7f6 f9ea 	bl	800ab70 <sys_now>
 801479c:	4602      	mov	r2, r0
 801479e:	4b05      	ldr	r3, [pc, #20]	; (80147b4 <sys_timeouts_init+0x4c>)
 80147a0:	601a      	str	r2, [r3, #0]
}
 80147a2:	bf00      	nop
 80147a4:	3708      	adds	r7, #8
 80147a6:	46bd      	mov	sp, r7
 80147a8:	bd80      	pop	{r7, pc}
 80147aa:	bf00      	nop
 80147ac:	0801a384 	.word	0x0801a384
 80147b0:	0801473d 	.word	0x0801473d
 80147b4:	2400a434 	.word	0x2400a434

080147b8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b088      	sub	sp, #32
 80147bc:	af00      	add	r7, sp, #0
 80147be:	60f8      	str	r0, [r7, #12]
 80147c0:	60b9      	str	r1, [r7, #8]
 80147c2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80147c4:	200a      	movs	r0, #10
 80147c6:	f7fa fbb7 	bl	800ef38 <memp_malloc>
 80147ca:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 80147cc:	697b      	ldr	r3, [r7, #20]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d10a      	bne.n	80147e8 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80147d2:	697b      	ldr	r3, [r7, #20]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	f040 8084 	bne.w	80148e2 <sys_timeout+0x12a>
 80147da:	4b44      	ldr	r3, [pc, #272]	; (80148ec <sys_timeout+0x134>)
 80147dc:	22d4      	movs	r2, #212	; 0xd4
 80147de:	4944      	ldr	r1, [pc, #272]	; (80148f0 <sys_timeout+0x138>)
 80147e0:	4844      	ldr	r0, [pc, #272]	; (80148f4 <sys_timeout+0x13c>)
 80147e2:	f002 fe25 	bl	8017430 <iprintf>
    return;
 80147e6:	e07c      	b.n	80148e2 <sys_timeout+0x12a>
  }

  now = sys_now();
 80147e8:	f7f6 f9c2 	bl	800ab70 <sys_now>
 80147ec:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 80147ee:	4b42      	ldr	r3, [pc, #264]	; (80148f8 <sys_timeout+0x140>)
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d105      	bne.n	8014802 <sys_timeout+0x4a>
    diff = 0;
 80147f6:	2300      	movs	r3, #0
 80147f8:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 80147fa:	4a40      	ldr	r2, [pc, #256]	; (80148fc <sys_timeout+0x144>)
 80147fc:	693b      	ldr	r3, [r7, #16]
 80147fe:	6013      	str	r3, [r2, #0]
 8014800:	e004      	b.n	801480c <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8014802:	4b3e      	ldr	r3, [pc, #248]	; (80148fc <sys_timeout+0x144>)
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	693a      	ldr	r2, [r7, #16]
 8014808:	1ad3      	subs	r3, r2, r3
 801480a:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 801480c:	697b      	ldr	r3, [r7, #20]
 801480e:	2200      	movs	r2, #0
 8014810:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014812:	697b      	ldr	r3, [r7, #20]
 8014814:	68ba      	ldr	r2, [r7, #8]
 8014816:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014818:	697b      	ldr	r3, [r7, #20]
 801481a:	687a      	ldr	r2, [r7, #4]
 801481c:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 801481e:	68fa      	ldr	r2, [r7, #12]
 8014820:	69bb      	ldr	r3, [r7, #24]
 8014822:	441a      	add	r2, r3
 8014824:	697b      	ldr	r3, [r7, #20]
 8014826:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014828:	4b33      	ldr	r3, [pc, #204]	; (80148f8 <sys_timeout+0x140>)
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d103      	bne.n	8014838 <sys_timeout+0x80>
    next_timeout = timeout;
 8014830:	4a31      	ldr	r2, [pc, #196]	; (80148f8 <sys_timeout+0x140>)
 8014832:	697b      	ldr	r3, [r7, #20]
 8014834:	6013      	str	r3, [r2, #0]
    return;
 8014836:	e055      	b.n	80148e4 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8014838:	4b2f      	ldr	r3, [pc, #188]	; (80148f8 <sys_timeout+0x140>)
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	685b      	ldr	r3, [r3, #4]
 801483e:	68fa      	ldr	r2, [r7, #12]
 8014840:	429a      	cmp	r2, r3
 8014842:	d20f      	bcs.n	8014864 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8014844:	4b2c      	ldr	r3, [pc, #176]	; (80148f8 <sys_timeout+0x140>)
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	6859      	ldr	r1, [r3, #4]
 801484a:	4b2b      	ldr	r3, [pc, #172]	; (80148f8 <sys_timeout+0x140>)
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	68fa      	ldr	r2, [r7, #12]
 8014850:	1a8a      	subs	r2, r1, r2
 8014852:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8014854:	4b28      	ldr	r3, [pc, #160]	; (80148f8 <sys_timeout+0x140>)
 8014856:	681a      	ldr	r2, [r3, #0]
 8014858:	697b      	ldr	r3, [r7, #20]
 801485a:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801485c:	4a26      	ldr	r2, [pc, #152]	; (80148f8 <sys_timeout+0x140>)
 801485e:	697b      	ldr	r3, [r7, #20]
 8014860:	6013      	str	r3, [r2, #0]
 8014862:	e03f      	b.n	80148e4 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014864:	4b24      	ldr	r3, [pc, #144]	; (80148f8 <sys_timeout+0x140>)
 8014866:	681b      	ldr	r3, [r3, #0]
 8014868:	61fb      	str	r3, [r7, #28]
 801486a:	e036      	b.n	80148da <sys_timeout+0x122>
      timeout->time -= t->time;
 801486c:	697b      	ldr	r3, [r7, #20]
 801486e:	685a      	ldr	r2, [r3, #4]
 8014870:	69fb      	ldr	r3, [r7, #28]
 8014872:	685b      	ldr	r3, [r3, #4]
 8014874:	1ad2      	subs	r2, r2, r3
 8014876:	697b      	ldr	r3, [r7, #20]
 8014878:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 801487a:	69fb      	ldr	r3, [r7, #28]
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d006      	beq.n	8014890 <sys_timeout+0xd8>
 8014882:	69fb      	ldr	r3, [r7, #28]
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	685a      	ldr	r2, [r3, #4]
 8014888:	697b      	ldr	r3, [r7, #20]
 801488a:	685b      	ldr	r3, [r3, #4]
 801488c:	429a      	cmp	r2, r3
 801488e:	d921      	bls.n	80148d4 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8014890:	69fb      	ldr	r3, [r7, #28]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d009      	beq.n	80148ac <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8014898:	69fb      	ldr	r3, [r7, #28]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	6859      	ldr	r1, [r3, #4]
 801489e:	697b      	ldr	r3, [r7, #20]
 80148a0:	685a      	ldr	r2, [r3, #4]
 80148a2:	69fb      	ldr	r3, [r7, #28]
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	1a8a      	subs	r2, r1, r2
 80148a8:	605a      	str	r2, [r3, #4]
 80148aa:	e00b      	b.n	80148c4 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 80148ac:	697b      	ldr	r3, [r7, #20]
 80148ae:	685b      	ldr	r3, [r3, #4]
 80148b0:	68fa      	ldr	r2, [r7, #12]
 80148b2:	429a      	cmp	r2, r3
 80148b4:	d206      	bcs.n	80148c4 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 80148b6:	4b10      	ldr	r3, [pc, #64]	; (80148f8 <sys_timeout+0x140>)
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	685a      	ldr	r2, [r3, #4]
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	441a      	add	r2, r3
 80148c0:	697b      	ldr	r3, [r7, #20]
 80148c2:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 80148c4:	69fb      	ldr	r3, [r7, #28]
 80148c6:	681a      	ldr	r2, [r3, #0]
 80148c8:	697b      	ldr	r3, [r7, #20]
 80148ca:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80148cc:	69fb      	ldr	r3, [r7, #28]
 80148ce:	697a      	ldr	r2, [r7, #20]
 80148d0:	601a      	str	r2, [r3, #0]
        break;
 80148d2:	e007      	b.n	80148e4 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 80148d4:	69fb      	ldr	r3, [r7, #28]
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	61fb      	str	r3, [r7, #28]
 80148da:	69fb      	ldr	r3, [r7, #28]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d1c5      	bne.n	801486c <sys_timeout+0xb4>
 80148e0:	e000      	b.n	80148e4 <sys_timeout+0x12c>
    return;
 80148e2:	bf00      	nop
      }
    }
  }
}
 80148e4:	3720      	adds	r7, #32
 80148e6:	46bd      	mov	sp, r7
 80148e8:	bd80      	pop	{r7, pc}
 80148ea:	bf00      	nop
 80148ec:	08019abc 	.word	0x08019abc
 80148f0:	08019af0 	.word	0x08019af0
 80148f4:	08019b30 	.word	0x08019b30
 80148f8:	2400a430 	.word	0x2400a430
 80148fc:	2400a434 	.word	0x2400a434

08014900 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b086      	sub	sp, #24
 8014904:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8014906:	4b24      	ldr	r3, [pc, #144]	; (8014998 <sys_check_timeouts+0x98>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d03f      	beq.n	801498e <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 801490e:	f7f6 f92f 	bl	800ab70 <sys_now>
 8014912:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8014914:	4b21      	ldr	r3, [pc, #132]	; (801499c <sys_check_timeouts+0x9c>)
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	68fa      	ldr	r2, [r7, #12]
 801491a:	1ad3      	subs	r3, r2, r3
 801491c:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 801491e:	2300      	movs	r3, #0
 8014920:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8014922:	4b1d      	ldr	r3, [pc, #116]	; (8014998 <sys_check_timeouts+0x98>)
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8014928:	68bb      	ldr	r3, [r7, #8]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d02c      	beq.n	8014988 <sys_check_timeouts+0x88>
 801492e:	68bb      	ldr	r3, [r7, #8]
 8014930:	685b      	ldr	r3, [r3, #4]
 8014932:	697a      	ldr	r2, [r7, #20]
 8014934:	429a      	cmp	r2, r3
 8014936:	d327      	bcc.n	8014988 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8014938:	2301      	movs	r3, #1
 801493a:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 801493c:	68bb      	ldr	r3, [r7, #8]
 801493e:	685a      	ldr	r2, [r3, #4]
 8014940:	4b16      	ldr	r3, [pc, #88]	; (801499c <sys_check_timeouts+0x9c>)
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	4413      	add	r3, r2
 8014946:	4a15      	ldr	r2, [pc, #84]	; (801499c <sys_check_timeouts+0x9c>)
 8014948:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 801494a:	68bb      	ldr	r3, [r7, #8]
 801494c:	685b      	ldr	r3, [r3, #4]
 801494e:	697a      	ldr	r2, [r7, #20]
 8014950:	1ad3      	subs	r3, r2, r3
 8014952:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8014954:	68bb      	ldr	r3, [r7, #8]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	4a0f      	ldr	r2, [pc, #60]	; (8014998 <sys_check_timeouts+0x98>)
 801495a:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	689b      	ldr	r3, [r3, #8]
 8014960:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8014962:	68bb      	ldr	r3, [r7, #8]
 8014964:	68db      	ldr	r3, [r3, #12]
 8014966:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014968:	68b9      	ldr	r1, [r7, #8]
 801496a:	200a      	movs	r0, #10
 801496c:	f7fa fb5a 	bl	800f024 <memp_free>
        if (handler != NULL) {
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d008      	beq.n	8014988 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 8014976:	480a      	ldr	r0, [pc, #40]	; (80149a0 <sys_check_timeouts+0xa0>)
 8014978:	f002 fcb4 	bl	80172e4 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	6838      	ldr	r0, [r7, #0]
 8014980:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8014982:	4807      	ldr	r0, [pc, #28]	; (80149a0 <sys_check_timeouts+0xa0>)
 8014984:	f002 fcbd 	bl	8017302 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8014988:	7cfb      	ldrb	r3, [r7, #19]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d1c7      	bne.n	801491e <sys_check_timeouts+0x1e>
  }
}
 801498e:	bf00      	nop
 8014990:	3718      	adds	r7, #24
 8014992:	46bd      	mov	sp, r7
 8014994:	bd80      	pop	{r7, pc}
 8014996:	bf00      	nop
 8014998:	2400a430 	.word	0x2400a430
 801499c:	2400a434 	.word	0x2400a434
 80149a0:	2400a830 	.word	0x2400a830

080149a4 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b082      	sub	sp, #8
 80149a8:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 80149aa:	4b0f      	ldr	r3, [pc, #60]	; (80149e8 <sys_timeouts_sleeptime+0x44>)
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d102      	bne.n	80149b8 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 80149b2:	f04f 33ff 	mov.w	r3, #4294967295
 80149b6:	e013      	b.n	80149e0 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 80149b8:	f7f6 f8da 	bl	800ab70 <sys_now>
 80149bc:	4602      	mov	r2, r0
 80149be:	4b0b      	ldr	r3, [pc, #44]	; (80149ec <sys_timeouts_sleeptime+0x48>)
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	1ad3      	subs	r3, r2, r3
 80149c4:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 80149c6:	4b08      	ldr	r3, [pc, #32]	; (80149e8 <sys_timeouts_sleeptime+0x44>)
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	685b      	ldr	r3, [r3, #4]
 80149cc:	687a      	ldr	r2, [r7, #4]
 80149ce:	429a      	cmp	r2, r3
 80149d0:	d901      	bls.n	80149d6 <sys_timeouts_sleeptime+0x32>
    return 0;
 80149d2:	2300      	movs	r3, #0
 80149d4:	e004      	b.n	80149e0 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 80149d6:	4b04      	ldr	r3, [pc, #16]	; (80149e8 <sys_timeouts_sleeptime+0x44>)
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	685a      	ldr	r2, [r3, #4]
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	1ad3      	subs	r3, r2, r3
  }
}
 80149e0:	4618      	mov	r0, r3
 80149e2:	3708      	adds	r7, #8
 80149e4:	46bd      	mov	sp, r7
 80149e6:	bd80      	pop	{r7, pc}
 80149e8:	2400a430 	.word	0x2400a430
 80149ec:	2400a434 	.word	0x2400a434

080149f0 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80149f0:	b580      	push	{r7, lr}
 80149f2:	b084      	sub	sp, #16
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
 80149f8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 80149fa:	4b0f      	ldr	r3, [pc, #60]	; (8014a38 <sys_timeouts_mbox_fetch+0x48>)
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d105      	bne.n	8014a0e <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8014a02:	2200      	movs	r2, #0
 8014a04:	6839      	ldr	r1, [r7, #0]
 8014a06:	6878      	ldr	r0, [r7, #4]
 8014a08:	f002 fbf1 	bl	80171ee <sys_arch_mbox_fetch>
    return;
 8014a0c:	e011      	b.n	8014a32 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8014a0e:	f7ff ffc9 	bl	80149a4 <sys_timeouts_sleeptime>
 8014a12:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d008      	beq.n	8014a2c <sys_timeouts_mbox_fetch+0x3c>
 8014a1a:	68fa      	ldr	r2, [r7, #12]
 8014a1c:	6839      	ldr	r1, [r7, #0]
 8014a1e:	6878      	ldr	r0, [r7, #4]
 8014a20:	f002 fbe5 	bl	80171ee <sys_arch_mbox_fetch>
 8014a24:	4603      	mov	r3, r0
 8014a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a2a:	d102      	bne.n	8014a32 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8014a2c:	f7ff ff68 	bl	8014900 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8014a30:	e7e3      	b.n	80149fa <sys_timeouts_mbox_fetch+0xa>
  }
}
 8014a32:	3710      	adds	r7, #16
 8014a34:	46bd      	mov	sp, r7
 8014a36:	bd80      	pop	{r7, pc}
 8014a38:	2400a430 	.word	0x2400a430

08014a3c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014a3c:	b480      	push	{r7}
 8014a3e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8014a40:	bf00      	nop
 8014a42:	46bd      	mov	sp, r7
 8014a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a48:	4770      	bx	lr
	...

08014a4c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014a4c:	b480      	push	{r7}
 8014a4e:	b085      	sub	sp, #20
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	60f8      	str	r0, [r7, #12]
 8014a54:	60b9      	str	r1, [r7, #8]
 8014a56:	4613      	mov	r3, r2
 8014a58:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014a5a:	79fb      	ldrb	r3, [r7, #7]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d018      	beq.n	8014a92 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d013      	beq.n	8014a8e <udp_input_local_match+0x42>
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d00f      	beq.n	8014a8e <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014a6e:	4b14      	ldr	r3, [pc, #80]	; (8014ac0 <udp_input_local_match+0x74>)
 8014a70:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a76:	d00a      	beq.n	8014a8e <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	681a      	ldr	r2, [r3, #0]
 8014a7c:	4b10      	ldr	r3, [pc, #64]	; (8014ac0 <udp_input_local_match+0x74>)
 8014a7e:	695b      	ldr	r3, [r3, #20]
 8014a80:	405a      	eors	r2, r3
 8014a82:	68bb      	ldr	r3, [r7, #8]
 8014a84:	3308      	adds	r3, #8
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d110      	bne.n	8014ab0 <udp_input_local_match+0x64>
          return 1;
 8014a8e:	2301      	movs	r3, #1
 8014a90:	e00f      	b.n	8014ab2 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d009      	beq.n	8014aac <udp_input_local_match+0x60>
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d005      	beq.n	8014aac <udp_input_local_match+0x60>
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	681a      	ldr	r2, [r3, #0]
 8014aa4:	4b06      	ldr	r3, [pc, #24]	; (8014ac0 <udp_input_local_match+0x74>)
 8014aa6:	695b      	ldr	r3, [r3, #20]
 8014aa8:	429a      	cmp	r2, r3
 8014aaa:	d101      	bne.n	8014ab0 <udp_input_local_match+0x64>
      return 1;
 8014aac:	2301      	movs	r3, #1
 8014aae:	e000      	b.n	8014ab2 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8014ab0:	2300      	movs	r3, #0
}
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	3714      	adds	r7, #20
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014abc:	4770      	bx	lr
 8014abe:	bf00      	nop
 8014ac0:	2400a834 	.word	0x2400a834

08014ac4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014ac4:	b590      	push	{r4, r7, lr}
 8014ac6:	b08d      	sub	sp, #52	; 0x34
 8014ac8:	af02      	add	r7, sp, #8
 8014aca:	6078      	str	r0, [r7, #4]
 8014acc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014ace:	2300      	movs	r3, #0
 8014ad0:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	895b      	ldrh	r3, [r3, #10]
 8014ad6:	2b07      	cmp	r3, #7
 8014ad8:	d803      	bhi.n	8014ae2 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014ada:	6878      	ldr	r0, [r7, #4]
 8014adc:	f7fb f83a 	bl	800fb54 <pbuf_free>
    goto end;
 8014ae0:	e0c6      	b.n	8014c70 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	685b      	ldr	r3, [r3, #4]
 8014ae6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014ae8:	4b63      	ldr	r3, [pc, #396]	; (8014c78 <udp_input+0x1b4>)
 8014aea:	695a      	ldr	r2, [r3, #20]
 8014aec:	4b62      	ldr	r3, [pc, #392]	; (8014c78 <udp_input+0x1b4>)
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	4619      	mov	r1, r3
 8014af2:	4610      	mov	r0, r2
 8014af4:	f001 fc40 	bl	8016378 <ip4_addr_isbroadcast_u32>
 8014af8:	4603      	mov	r3, r0
 8014afa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014afc:	697b      	ldr	r3, [r7, #20]
 8014afe:	881b      	ldrh	r3, [r3, #0]
 8014b00:	b29b      	uxth	r3, r3
 8014b02:	4618      	mov	r0, r3
 8014b04:	f7f9 fd52 	bl	800e5ac <lwip_htons>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014b0c:	697b      	ldr	r3, [r7, #20]
 8014b0e:	885b      	ldrh	r3, [r3, #2]
 8014b10:	b29b      	uxth	r3, r3
 8014b12:	4618      	mov	r0, r3
 8014b14:	f7f9 fd4a 	bl	800e5ac <lwip_htons>
 8014b18:	4603      	mov	r3, r0
 8014b1a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014b20:	2300      	movs	r3, #0
 8014b22:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014b24:	2300      	movs	r3, #0
 8014b26:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b28:	4b54      	ldr	r3, [pc, #336]	; (8014c7c <udp_input+0x1b8>)
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8014b2e:	e03b      	b.n	8014ba8 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b32:	8a5b      	ldrh	r3, [r3, #18]
 8014b34:	89fa      	ldrh	r2, [r7, #14]
 8014b36:	429a      	cmp	r2, r3
 8014b38:	d131      	bne.n	8014b9e <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014b3a:	7cfb      	ldrb	r3, [r7, #19]
 8014b3c:	461a      	mov	r2, r3
 8014b3e:	6839      	ldr	r1, [r7, #0]
 8014b40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014b42:	f7ff ff83 	bl	8014a4c <udp_input_local_match>
 8014b46:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d028      	beq.n	8014b9e <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8014b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b4e:	7c1b      	ldrb	r3, [r3, #16]
 8014b50:	f003 0304 	and.w	r3, r3, #4
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d104      	bne.n	8014b62 <udp_input+0x9e>
 8014b58:	69fb      	ldr	r3, [r7, #28]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d101      	bne.n	8014b62 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8014b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b60:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b64:	8a9b      	ldrh	r3, [r3, #20]
 8014b66:	8a3a      	ldrh	r2, [r7, #16]
 8014b68:	429a      	cmp	r2, r3
 8014b6a:	d118      	bne.n	8014b9e <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b6e:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d005      	beq.n	8014b80 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b76:	685a      	ldr	r2, [r3, #4]
 8014b78:	4b3f      	ldr	r3, [pc, #252]	; (8014c78 <udp_input+0x1b4>)
 8014b7a:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014b7c:	429a      	cmp	r2, r3
 8014b7e:	d10e      	bne.n	8014b9e <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014b80:	6a3b      	ldr	r3, [r7, #32]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d014      	beq.n	8014bb0 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b88:	68da      	ldr	r2, [r3, #12]
 8014b8a:	6a3b      	ldr	r3, [r7, #32]
 8014b8c:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014b8e:	4b3b      	ldr	r3, [pc, #236]	; (8014c7c <udp_input+0x1b8>)
 8014b90:	681a      	ldr	r2, [r3, #0]
 8014b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b94:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014b96:	4a39      	ldr	r2, [pc, #228]	; (8014c7c <udp_input+0x1b8>)
 8014b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b9a:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014b9c:	e008      	b.n	8014bb0 <udp_input+0xec>
      }
    }

    prev = pcb;
 8014b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ba0:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ba4:	68db      	ldr	r3, [r3, #12]
 8014ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8014ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d1c0      	bne.n	8014b30 <udp_input+0x6c>
 8014bae:	e000      	b.n	8014bb2 <udp_input+0xee>
        break;
 8014bb0:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d101      	bne.n	8014bbc <udp_input+0xf8>
    pcb = uncon_pcb;
 8014bb8:	69fb      	ldr	r3, [r7, #28]
 8014bba:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d002      	beq.n	8014bc8 <udp_input+0x104>
    for_us = 1;
 8014bc2:	2301      	movs	r3, #1
 8014bc4:	76fb      	strb	r3, [r7, #27]
 8014bc6:	e00a      	b.n	8014bde <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014bc8:	683b      	ldr	r3, [r7, #0]
 8014bca:	3304      	adds	r3, #4
 8014bcc:	681a      	ldr	r2, [r3, #0]
 8014bce:	4b2a      	ldr	r3, [pc, #168]	; (8014c78 <udp_input+0x1b4>)
 8014bd0:	695b      	ldr	r3, [r3, #20]
 8014bd2:	429a      	cmp	r2, r3
 8014bd4:	bf0c      	ite	eq
 8014bd6:	2301      	moveq	r3, #1
 8014bd8:	2300      	movne	r3, #0
 8014bda:	b2db      	uxtb	r3, r3
 8014bdc:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014bde:	7efb      	ldrb	r3, [r7, #27]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d042      	beq.n	8014c6a <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8014be4:	f06f 0107 	mvn.w	r1, #7
 8014be8:	6878      	ldr	r0, [r7, #4]
 8014bea:	f7fa ff8f 	bl	800fb0c <pbuf_header>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d00a      	beq.n	8014c0a <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8014bf4:	4b22      	ldr	r3, [pc, #136]	; (8014c80 <udp_input+0x1bc>)
 8014bf6:	f240 1255 	movw	r2, #341	; 0x155
 8014bfa:	4922      	ldr	r1, [pc, #136]	; (8014c84 <udp_input+0x1c0>)
 8014bfc:	4822      	ldr	r0, [pc, #136]	; (8014c88 <udp_input+0x1c4>)
 8014bfe:	f002 fc17 	bl	8017430 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014c02:	6878      	ldr	r0, [r7, #4]
 8014c04:	f7fa ffa6 	bl	800fb54 <pbuf_free>
      goto end;
 8014c08:	e032      	b.n	8014c70 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 8014c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d012      	beq.n	8014c36 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c12:	699b      	ldr	r3, [r3, #24]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d00a      	beq.n	8014c2e <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c1a:	699c      	ldr	r4, [r3, #24]
 8014c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c1e:	69d8      	ldr	r0, [r3, #28]
 8014c20:	8a3b      	ldrh	r3, [r7, #16]
 8014c22:	9300      	str	r3, [sp, #0]
 8014c24:	4b19      	ldr	r3, [pc, #100]	; (8014c8c <udp_input+0x1c8>)
 8014c26:	687a      	ldr	r2, [r7, #4]
 8014c28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014c2a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014c2c:	e021      	b.n	8014c72 <udp_input+0x1ae>
        pbuf_free(p);
 8014c2e:	6878      	ldr	r0, [r7, #4]
 8014c30:	f7fa ff90 	bl	800fb54 <pbuf_free>
        goto end;
 8014c34:	e01c      	b.n	8014c70 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014c36:	7cfb      	ldrb	r3, [r7, #19]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d112      	bne.n	8014c62 <udp_input+0x19e>
 8014c3c:	4b0e      	ldr	r3, [pc, #56]	; (8014c78 <udp_input+0x1b4>)
 8014c3e:	695b      	ldr	r3, [r3, #20]
 8014c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014c44:	2be0      	cmp	r3, #224	; 0xe0
 8014c46:	d00c      	beq.n	8014c62 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014c48:	4b0b      	ldr	r3, [pc, #44]	; (8014c78 <udp_input+0x1b4>)
 8014c4a:	899b      	ldrh	r3, [r3, #12]
 8014c4c:	3308      	adds	r3, #8
 8014c4e:	b29b      	uxth	r3, r3
 8014c50:	b21b      	sxth	r3, r3
 8014c52:	4619      	mov	r1, r3
 8014c54:	6878      	ldr	r0, [r7, #4]
 8014c56:	f7fa ff6b 	bl	800fb30 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8014c5a:	2103      	movs	r1, #3
 8014c5c:	6878      	ldr	r0, [r7, #4]
 8014c5e:	f001 f87f 	bl	8015d60 <icmp_dest_unreach>
      pbuf_free(p);
 8014c62:	6878      	ldr	r0, [r7, #4]
 8014c64:	f7fa ff76 	bl	800fb54 <pbuf_free>
  return;
 8014c68:	e003      	b.n	8014c72 <udp_input+0x1ae>
    pbuf_free(p);
 8014c6a:	6878      	ldr	r0, [r7, #4]
 8014c6c:	f7fa ff72 	bl	800fb54 <pbuf_free>
  return;
 8014c70:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014c72:	372c      	adds	r7, #44	; 0x2c
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd90      	pop	{r4, r7, pc}
 8014c78:	2400a834 	.word	0x2400a834
 8014c7c:	2400d908 	.word	0x2400d908
 8014c80:	08019b58 	.word	0x08019b58
 8014c84:	08019b88 	.word	0x08019b88
 8014c88:	08019b9c 	.word	0x08019b9c
 8014c8c:	2400a844 	.word	0x2400a844

08014c90 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8014c90:	b480      	push	{r7}
 8014c92:	b085      	sub	sp, #20
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
 8014c98:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d01e      	beq.n	8014cde <udp_netif_ip_addr_changed+0x4e>
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d01a      	beq.n	8014cde <udp_netif_ip_addr_changed+0x4e>
 8014ca8:	683b      	ldr	r3, [r7, #0]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d017      	beq.n	8014cde <udp_netif_ip_addr_changed+0x4e>
 8014cae:	683b      	ldr	r3, [r7, #0]
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d013      	beq.n	8014cde <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014cb6:	4b0d      	ldr	r3, [pc, #52]	; (8014cec <udp_netif_ip_addr_changed+0x5c>)
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	60fb      	str	r3, [r7, #12]
 8014cbc:	e00c      	b.n	8014cd8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	681a      	ldr	r2, [r3, #0]
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	429a      	cmp	r2, r3
 8014cc8:	d103      	bne.n	8014cd2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014cca:	683b      	ldr	r3, [r7, #0]
 8014ccc:	681a      	ldr	r2, [r3, #0]
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	68db      	ldr	r3, [r3, #12]
 8014cd6:	60fb      	str	r3, [r7, #12]
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d1ef      	bne.n	8014cbe <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014cde:	bf00      	nop
 8014ce0:	3714      	adds	r7, #20
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce8:	4770      	bx	lr
 8014cea:	bf00      	nop
 8014cec:	2400d908 	.word	0x2400d908

08014cf0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b082      	sub	sp, #8
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014cf8:	4915      	ldr	r1, [pc, #84]	; (8014d50 <etharp_free_entry+0x60>)
 8014cfa:	687a      	ldr	r2, [r7, #4]
 8014cfc:	4613      	mov	r3, r2
 8014cfe:	005b      	lsls	r3, r3, #1
 8014d00:	4413      	add	r3, r2
 8014d02:	00db      	lsls	r3, r3, #3
 8014d04:	440b      	add	r3, r1
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d013      	beq.n	8014d34 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014d0c:	4910      	ldr	r1, [pc, #64]	; (8014d50 <etharp_free_entry+0x60>)
 8014d0e:	687a      	ldr	r2, [r7, #4]
 8014d10:	4613      	mov	r3, r2
 8014d12:	005b      	lsls	r3, r3, #1
 8014d14:	4413      	add	r3, r2
 8014d16:	00db      	lsls	r3, r3, #3
 8014d18:	440b      	add	r3, r1
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	f7fa ff19 	bl	800fb54 <pbuf_free>
    arp_table[i].q = NULL;
 8014d22:	490b      	ldr	r1, [pc, #44]	; (8014d50 <etharp_free_entry+0x60>)
 8014d24:	687a      	ldr	r2, [r7, #4]
 8014d26:	4613      	mov	r3, r2
 8014d28:	005b      	lsls	r3, r3, #1
 8014d2a:	4413      	add	r3, r2
 8014d2c:	00db      	lsls	r3, r3, #3
 8014d2e:	440b      	add	r3, r1
 8014d30:	2200      	movs	r2, #0
 8014d32:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014d34:	4906      	ldr	r1, [pc, #24]	; (8014d50 <etharp_free_entry+0x60>)
 8014d36:	687a      	ldr	r2, [r7, #4]
 8014d38:	4613      	mov	r3, r2
 8014d3a:	005b      	lsls	r3, r3, #1
 8014d3c:	4413      	add	r3, r2
 8014d3e:	00db      	lsls	r3, r3, #3
 8014d40:	440b      	add	r3, r1
 8014d42:	3314      	adds	r3, #20
 8014d44:	2200      	movs	r2, #0
 8014d46:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014d48:	bf00      	nop
 8014d4a:	3708      	adds	r7, #8
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}
 8014d50:	2400a43c 	.word	0x2400a43c

08014d54 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b082      	sub	sp, #8
 8014d58:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	71fb      	strb	r3, [r7, #7]
 8014d5e:	e096      	b.n	8014e8e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014d60:	79fa      	ldrb	r2, [r7, #7]
 8014d62:	494f      	ldr	r1, [pc, #316]	; (8014ea0 <etharp_tmr+0x14c>)
 8014d64:	4613      	mov	r3, r2
 8014d66:	005b      	lsls	r3, r3, #1
 8014d68:	4413      	add	r3, r2
 8014d6a:	00db      	lsls	r3, r3, #3
 8014d6c:	440b      	add	r3, r1
 8014d6e:	3314      	adds	r3, #20
 8014d70:	781b      	ldrb	r3, [r3, #0]
 8014d72:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8014d74:	79bb      	ldrb	r3, [r7, #6]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	f000 8086 	beq.w	8014e88 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8014d7c:	79fa      	ldrb	r2, [r7, #7]
 8014d7e:	4948      	ldr	r1, [pc, #288]	; (8014ea0 <etharp_tmr+0x14c>)
 8014d80:	4613      	mov	r3, r2
 8014d82:	005b      	lsls	r3, r3, #1
 8014d84:	4413      	add	r3, r2
 8014d86:	00db      	lsls	r3, r3, #3
 8014d88:	440b      	add	r3, r1
 8014d8a:	3312      	adds	r3, #18
 8014d8c:	881b      	ldrh	r3, [r3, #0]
 8014d8e:	3301      	adds	r3, #1
 8014d90:	b298      	uxth	r0, r3
 8014d92:	4943      	ldr	r1, [pc, #268]	; (8014ea0 <etharp_tmr+0x14c>)
 8014d94:	4613      	mov	r3, r2
 8014d96:	005b      	lsls	r3, r3, #1
 8014d98:	4413      	add	r3, r2
 8014d9a:	00db      	lsls	r3, r3, #3
 8014d9c:	440b      	add	r3, r1
 8014d9e:	3312      	adds	r3, #18
 8014da0:	4602      	mov	r2, r0
 8014da2:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014da4:	79fa      	ldrb	r2, [r7, #7]
 8014da6:	493e      	ldr	r1, [pc, #248]	; (8014ea0 <etharp_tmr+0x14c>)
 8014da8:	4613      	mov	r3, r2
 8014daa:	005b      	lsls	r3, r3, #1
 8014dac:	4413      	add	r3, r2
 8014dae:	00db      	lsls	r3, r3, #3
 8014db0:	440b      	add	r3, r1
 8014db2:	3312      	adds	r3, #18
 8014db4:	881b      	ldrh	r3, [r3, #0]
 8014db6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014dba:	d215      	bcs.n	8014de8 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014dbc:	79fa      	ldrb	r2, [r7, #7]
 8014dbe:	4938      	ldr	r1, [pc, #224]	; (8014ea0 <etharp_tmr+0x14c>)
 8014dc0:	4613      	mov	r3, r2
 8014dc2:	005b      	lsls	r3, r3, #1
 8014dc4:	4413      	add	r3, r2
 8014dc6:	00db      	lsls	r3, r3, #3
 8014dc8:	440b      	add	r3, r1
 8014dca:	3314      	adds	r3, #20
 8014dcc:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014dce:	2b01      	cmp	r3, #1
 8014dd0:	d10f      	bne.n	8014df2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014dd2:	79fa      	ldrb	r2, [r7, #7]
 8014dd4:	4932      	ldr	r1, [pc, #200]	; (8014ea0 <etharp_tmr+0x14c>)
 8014dd6:	4613      	mov	r3, r2
 8014dd8:	005b      	lsls	r3, r3, #1
 8014dda:	4413      	add	r3, r2
 8014ddc:	00db      	lsls	r3, r3, #3
 8014dde:	440b      	add	r3, r1
 8014de0:	3312      	adds	r3, #18
 8014de2:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014de4:	2b04      	cmp	r3, #4
 8014de6:	d904      	bls.n	8014df2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014de8:	79fb      	ldrb	r3, [r7, #7]
 8014dea:	4618      	mov	r0, r3
 8014dec:	f7ff ff80 	bl	8014cf0 <etharp_free_entry>
 8014df0:	e04a      	b.n	8014e88 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014df2:	79fa      	ldrb	r2, [r7, #7]
 8014df4:	492a      	ldr	r1, [pc, #168]	; (8014ea0 <etharp_tmr+0x14c>)
 8014df6:	4613      	mov	r3, r2
 8014df8:	005b      	lsls	r3, r3, #1
 8014dfa:	4413      	add	r3, r2
 8014dfc:	00db      	lsls	r3, r3, #3
 8014dfe:	440b      	add	r3, r1
 8014e00:	3314      	adds	r3, #20
 8014e02:	781b      	ldrb	r3, [r3, #0]
 8014e04:	2b03      	cmp	r3, #3
 8014e06:	d10a      	bne.n	8014e1e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014e08:	79fa      	ldrb	r2, [r7, #7]
 8014e0a:	4925      	ldr	r1, [pc, #148]	; (8014ea0 <etharp_tmr+0x14c>)
 8014e0c:	4613      	mov	r3, r2
 8014e0e:	005b      	lsls	r3, r3, #1
 8014e10:	4413      	add	r3, r2
 8014e12:	00db      	lsls	r3, r3, #3
 8014e14:	440b      	add	r3, r1
 8014e16:	3314      	adds	r3, #20
 8014e18:	2204      	movs	r2, #4
 8014e1a:	701a      	strb	r2, [r3, #0]
 8014e1c:	e034      	b.n	8014e88 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014e1e:	79fa      	ldrb	r2, [r7, #7]
 8014e20:	491f      	ldr	r1, [pc, #124]	; (8014ea0 <etharp_tmr+0x14c>)
 8014e22:	4613      	mov	r3, r2
 8014e24:	005b      	lsls	r3, r3, #1
 8014e26:	4413      	add	r3, r2
 8014e28:	00db      	lsls	r3, r3, #3
 8014e2a:	440b      	add	r3, r1
 8014e2c:	3314      	adds	r3, #20
 8014e2e:	781b      	ldrb	r3, [r3, #0]
 8014e30:	2b04      	cmp	r3, #4
 8014e32:	d10a      	bne.n	8014e4a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014e34:	79fa      	ldrb	r2, [r7, #7]
 8014e36:	491a      	ldr	r1, [pc, #104]	; (8014ea0 <etharp_tmr+0x14c>)
 8014e38:	4613      	mov	r3, r2
 8014e3a:	005b      	lsls	r3, r3, #1
 8014e3c:	4413      	add	r3, r2
 8014e3e:	00db      	lsls	r3, r3, #3
 8014e40:	440b      	add	r3, r1
 8014e42:	3314      	adds	r3, #20
 8014e44:	2202      	movs	r2, #2
 8014e46:	701a      	strb	r2, [r3, #0]
 8014e48:	e01e      	b.n	8014e88 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014e4a:	79fa      	ldrb	r2, [r7, #7]
 8014e4c:	4914      	ldr	r1, [pc, #80]	; (8014ea0 <etharp_tmr+0x14c>)
 8014e4e:	4613      	mov	r3, r2
 8014e50:	005b      	lsls	r3, r3, #1
 8014e52:	4413      	add	r3, r2
 8014e54:	00db      	lsls	r3, r3, #3
 8014e56:	440b      	add	r3, r1
 8014e58:	3314      	adds	r3, #20
 8014e5a:	781b      	ldrb	r3, [r3, #0]
 8014e5c:	2b01      	cmp	r3, #1
 8014e5e:	d113      	bne.n	8014e88 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014e60:	79fa      	ldrb	r2, [r7, #7]
 8014e62:	490f      	ldr	r1, [pc, #60]	; (8014ea0 <etharp_tmr+0x14c>)
 8014e64:	4613      	mov	r3, r2
 8014e66:	005b      	lsls	r3, r3, #1
 8014e68:	4413      	add	r3, r2
 8014e6a:	00db      	lsls	r3, r3, #3
 8014e6c:	440b      	add	r3, r1
 8014e6e:	3308      	adds	r3, #8
 8014e70:	6818      	ldr	r0, [r3, #0]
 8014e72:	79fa      	ldrb	r2, [r7, #7]
 8014e74:	4613      	mov	r3, r2
 8014e76:	005b      	lsls	r3, r3, #1
 8014e78:	4413      	add	r3, r2
 8014e7a:	00db      	lsls	r3, r3, #3
 8014e7c:	4a08      	ldr	r2, [pc, #32]	; (8014ea0 <etharp_tmr+0x14c>)
 8014e7e:	4413      	add	r3, r2
 8014e80:	3304      	adds	r3, #4
 8014e82:	4619      	mov	r1, r3
 8014e84:	f000 fe38 	bl	8015af8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014e88:	79fb      	ldrb	r3, [r7, #7]
 8014e8a:	3301      	adds	r3, #1
 8014e8c:	71fb      	strb	r3, [r7, #7]
 8014e8e:	79fb      	ldrb	r3, [r7, #7]
 8014e90:	2b09      	cmp	r3, #9
 8014e92:	f67f af65 	bls.w	8014d60 <etharp_tmr+0xc>
      }
    }
  }
}
 8014e96:	bf00      	nop
 8014e98:	3708      	adds	r7, #8
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}
 8014e9e:	bf00      	nop
 8014ea0:	2400a43c 	.word	0x2400a43c

08014ea4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b088      	sub	sp, #32
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	60f8      	str	r0, [r7, #12]
 8014eac:	460b      	mov	r3, r1
 8014eae:	607a      	str	r2, [r7, #4]
 8014eb0:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014eb2:	230a      	movs	r3, #10
 8014eb4:	77fb      	strb	r3, [r7, #31]
 8014eb6:	230a      	movs	r3, #10
 8014eb8:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8014eba:	230a      	movs	r3, #10
 8014ebc:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8014ec2:	230a      	movs	r3, #10
 8014ec4:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	833b      	strh	r3, [r7, #24]
 8014eca:	2300      	movs	r3, #0
 8014ecc:	82fb      	strh	r3, [r7, #22]
 8014ece:	2300      	movs	r3, #0
 8014ed0:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	773b      	strb	r3, [r7, #28]
 8014ed6:	e093      	b.n	8015000 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8014ed8:	7f3a      	ldrb	r2, [r7, #28]
 8014eda:	4990      	ldr	r1, [pc, #576]	; (801511c <etharp_find_entry+0x278>)
 8014edc:	4613      	mov	r3, r2
 8014ede:	005b      	lsls	r3, r3, #1
 8014ee0:	4413      	add	r3, r2
 8014ee2:	00db      	lsls	r3, r3, #3
 8014ee4:	440b      	add	r3, r1
 8014ee6:	3314      	adds	r3, #20
 8014ee8:	781b      	ldrb	r3, [r3, #0]
 8014eea:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014eec:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014ef0:	2b0a      	cmp	r3, #10
 8014ef2:	d105      	bne.n	8014f00 <etharp_find_entry+0x5c>
 8014ef4:	7cfb      	ldrb	r3, [r7, #19]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d102      	bne.n	8014f00 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8014efa:	7f3b      	ldrb	r3, [r7, #28]
 8014efc:	777b      	strb	r3, [r7, #29]
 8014efe:	e07c      	b.n	8014ffa <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014f00:	7cfb      	ldrb	r3, [r7, #19]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d079      	beq.n	8014ffa <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014f06:	7cfb      	ldrb	r3, [r7, #19]
 8014f08:	2b01      	cmp	r3, #1
 8014f0a:	d009      	beq.n	8014f20 <etharp_find_entry+0x7c>
 8014f0c:	7cfb      	ldrb	r3, [r7, #19]
 8014f0e:	2b01      	cmp	r3, #1
 8014f10:	d806      	bhi.n	8014f20 <etharp_find_entry+0x7c>
 8014f12:	4b83      	ldr	r3, [pc, #524]	; (8015120 <etharp_find_entry+0x27c>)
 8014f14:	f44f 7293 	mov.w	r2, #294	; 0x126
 8014f18:	4982      	ldr	r1, [pc, #520]	; (8015124 <etharp_find_entry+0x280>)
 8014f1a:	4883      	ldr	r0, [pc, #524]	; (8015128 <etharp_find_entry+0x284>)
 8014f1c:	f002 fa88 	bl	8017430 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d00f      	beq.n	8014f46 <etharp_find_entry+0xa2>
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	6819      	ldr	r1, [r3, #0]
 8014f2a:	7f3a      	ldrb	r2, [r7, #28]
 8014f2c:	487b      	ldr	r0, [pc, #492]	; (801511c <etharp_find_entry+0x278>)
 8014f2e:	4613      	mov	r3, r2
 8014f30:	005b      	lsls	r3, r3, #1
 8014f32:	4413      	add	r3, r2
 8014f34:	00db      	lsls	r3, r3, #3
 8014f36:	4403      	add	r3, r0
 8014f38:	3304      	adds	r3, #4
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	4299      	cmp	r1, r3
 8014f3e:	d102      	bne.n	8014f46 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014f40:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8014f44:	e0e5      	b.n	8015112 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014f46:	7cfb      	ldrb	r3, [r7, #19]
 8014f48:	2b01      	cmp	r3, #1
 8014f4a:	d13b      	bne.n	8014fc4 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014f4c:	7f3a      	ldrb	r2, [r7, #28]
 8014f4e:	4973      	ldr	r1, [pc, #460]	; (801511c <etharp_find_entry+0x278>)
 8014f50:	4613      	mov	r3, r2
 8014f52:	005b      	lsls	r3, r3, #1
 8014f54:	4413      	add	r3, r2
 8014f56:	00db      	lsls	r3, r3, #3
 8014f58:	440b      	add	r3, r1
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d018      	beq.n	8014f92 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8014f60:	7f3a      	ldrb	r2, [r7, #28]
 8014f62:	496e      	ldr	r1, [pc, #440]	; (801511c <etharp_find_entry+0x278>)
 8014f64:	4613      	mov	r3, r2
 8014f66:	005b      	lsls	r3, r3, #1
 8014f68:	4413      	add	r3, r2
 8014f6a:	00db      	lsls	r3, r3, #3
 8014f6c:	440b      	add	r3, r1
 8014f6e:	3312      	adds	r3, #18
 8014f70:	881b      	ldrh	r3, [r3, #0]
 8014f72:	8b3a      	ldrh	r2, [r7, #24]
 8014f74:	429a      	cmp	r2, r3
 8014f76:	d840      	bhi.n	8014ffa <etharp_find_entry+0x156>
            old_queue = i;
 8014f78:	7f3b      	ldrb	r3, [r7, #28]
 8014f7a:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8014f7c:	7f3a      	ldrb	r2, [r7, #28]
 8014f7e:	4967      	ldr	r1, [pc, #412]	; (801511c <etharp_find_entry+0x278>)
 8014f80:	4613      	mov	r3, r2
 8014f82:	005b      	lsls	r3, r3, #1
 8014f84:	4413      	add	r3, r2
 8014f86:	00db      	lsls	r3, r3, #3
 8014f88:	440b      	add	r3, r1
 8014f8a:	3312      	adds	r3, #18
 8014f8c:	881b      	ldrh	r3, [r3, #0]
 8014f8e:	833b      	strh	r3, [r7, #24]
 8014f90:	e033      	b.n	8014ffa <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014f92:	7f3a      	ldrb	r2, [r7, #28]
 8014f94:	4961      	ldr	r1, [pc, #388]	; (801511c <etharp_find_entry+0x278>)
 8014f96:	4613      	mov	r3, r2
 8014f98:	005b      	lsls	r3, r3, #1
 8014f9a:	4413      	add	r3, r2
 8014f9c:	00db      	lsls	r3, r3, #3
 8014f9e:	440b      	add	r3, r1
 8014fa0:	3312      	adds	r3, #18
 8014fa2:	881b      	ldrh	r3, [r3, #0]
 8014fa4:	8afa      	ldrh	r2, [r7, #22]
 8014fa6:	429a      	cmp	r2, r3
 8014fa8:	d827      	bhi.n	8014ffa <etharp_find_entry+0x156>
            old_pending = i;
 8014faa:	7f3b      	ldrb	r3, [r7, #28]
 8014fac:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8014fae:	7f3a      	ldrb	r2, [r7, #28]
 8014fb0:	495a      	ldr	r1, [pc, #360]	; (801511c <etharp_find_entry+0x278>)
 8014fb2:	4613      	mov	r3, r2
 8014fb4:	005b      	lsls	r3, r3, #1
 8014fb6:	4413      	add	r3, r2
 8014fb8:	00db      	lsls	r3, r3, #3
 8014fba:	440b      	add	r3, r1
 8014fbc:	3312      	adds	r3, #18
 8014fbe:	881b      	ldrh	r3, [r3, #0]
 8014fc0:	82fb      	strh	r3, [r7, #22]
 8014fc2:	e01a      	b.n	8014ffa <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014fc4:	7cfb      	ldrb	r3, [r7, #19]
 8014fc6:	2b01      	cmp	r3, #1
 8014fc8:	d917      	bls.n	8014ffa <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014fca:	7f3a      	ldrb	r2, [r7, #28]
 8014fcc:	4953      	ldr	r1, [pc, #332]	; (801511c <etharp_find_entry+0x278>)
 8014fce:	4613      	mov	r3, r2
 8014fd0:	005b      	lsls	r3, r3, #1
 8014fd2:	4413      	add	r3, r2
 8014fd4:	00db      	lsls	r3, r3, #3
 8014fd6:	440b      	add	r3, r1
 8014fd8:	3312      	adds	r3, #18
 8014fda:	881b      	ldrh	r3, [r3, #0]
 8014fdc:	8aba      	ldrh	r2, [r7, #20]
 8014fde:	429a      	cmp	r2, r3
 8014fe0:	d80b      	bhi.n	8014ffa <etharp_find_entry+0x156>
            old_stable = i;
 8014fe2:	7f3b      	ldrb	r3, [r7, #28]
 8014fe4:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8014fe6:	7f3a      	ldrb	r2, [r7, #28]
 8014fe8:	494c      	ldr	r1, [pc, #304]	; (801511c <etharp_find_entry+0x278>)
 8014fea:	4613      	mov	r3, r2
 8014fec:	005b      	lsls	r3, r3, #1
 8014fee:	4413      	add	r3, r2
 8014ff0:	00db      	lsls	r3, r3, #3
 8014ff2:	440b      	add	r3, r1
 8014ff4:	3312      	adds	r3, #18
 8014ff6:	881b      	ldrh	r3, [r3, #0]
 8014ff8:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014ffa:	7f3b      	ldrb	r3, [r7, #28]
 8014ffc:	3301      	adds	r3, #1
 8014ffe:	773b      	strb	r3, [r7, #28]
 8015000:	7f3b      	ldrb	r3, [r7, #28]
 8015002:	2b09      	cmp	r3, #9
 8015004:	f67f af68 	bls.w	8014ed8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015008:	7afb      	ldrb	r3, [r7, #11]
 801500a:	f003 0302 	and.w	r3, r3, #2
 801500e:	2b00      	cmp	r3, #0
 8015010:	d108      	bne.n	8015024 <etharp_find_entry+0x180>
 8015012:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015016:	2b0a      	cmp	r3, #10
 8015018:	d107      	bne.n	801502a <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801501a:	7afb      	ldrb	r3, [r7, #11]
 801501c:	f003 0301 	and.w	r3, r3, #1
 8015020:	2b00      	cmp	r3, #0
 8015022:	d102      	bne.n	801502a <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8015024:	f04f 33ff 	mov.w	r3, #4294967295
 8015028:	e073      	b.n	8015112 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801502a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801502e:	2b09      	cmp	r3, #9
 8015030:	dc02      	bgt.n	8015038 <etharp_find_entry+0x194>
    i = empty;
 8015032:	7f7b      	ldrb	r3, [r7, #29]
 8015034:	773b      	strb	r3, [r7, #28]
 8015036:	e036      	b.n	80150a6 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015038:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801503c:	2b09      	cmp	r3, #9
 801503e:	dc13      	bgt.n	8015068 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8015040:	7fbb      	ldrb	r3, [r7, #30]
 8015042:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015044:	7f3a      	ldrb	r2, [r7, #28]
 8015046:	4935      	ldr	r1, [pc, #212]	; (801511c <etharp_find_entry+0x278>)
 8015048:	4613      	mov	r3, r2
 801504a:	005b      	lsls	r3, r3, #1
 801504c:	4413      	add	r3, r2
 801504e:	00db      	lsls	r3, r3, #3
 8015050:	440b      	add	r3, r1
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d018      	beq.n	801508a <etharp_find_entry+0x1e6>
 8015058:	4b31      	ldr	r3, [pc, #196]	; (8015120 <etharp_find_entry+0x27c>)
 801505a:	f240 126f 	movw	r2, #367	; 0x16f
 801505e:	4933      	ldr	r1, [pc, #204]	; (801512c <etharp_find_entry+0x288>)
 8015060:	4831      	ldr	r0, [pc, #196]	; (8015128 <etharp_find_entry+0x284>)
 8015062:	f002 f9e5 	bl	8017430 <iprintf>
 8015066:	e010      	b.n	801508a <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015068:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801506c:	2b09      	cmp	r3, #9
 801506e:	dc02      	bgt.n	8015076 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8015070:	7ffb      	ldrb	r3, [r7, #31]
 8015072:	773b      	strb	r3, [r7, #28]
 8015074:	e009      	b.n	801508a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015076:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801507a:	2b09      	cmp	r3, #9
 801507c:	dc02      	bgt.n	8015084 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801507e:	7efb      	ldrb	r3, [r7, #27]
 8015080:	773b      	strb	r3, [r7, #28]
 8015082:	e002      	b.n	801508a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8015084:	f04f 33ff 	mov.w	r3, #4294967295
 8015088:	e043      	b.n	8015112 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801508a:	7f3b      	ldrb	r3, [r7, #28]
 801508c:	2b09      	cmp	r3, #9
 801508e:	d906      	bls.n	801509e <etharp_find_entry+0x1fa>
 8015090:	4b23      	ldr	r3, [pc, #140]	; (8015120 <etharp_find_entry+0x27c>)
 8015092:	f240 1281 	movw	r2, #385	; 0x181
 8015096:	4926      	ldr	r1, [pc, #152]	; (8015130 <etharp_find_entry+0x28c>)
 8015098:	4823      	ldr	r0, [pc, #140]	; (8015128 <etharp_find_entry+0x284>)
 801509a:	f002 f9c9 	bl	8017430 <iprintf>
    etharp_free_entry(i);
 801509e:	7f3b      	ldrb	r3, [r7, #28]
 80150a0:	4618      	mov	r0, r3
 80150a2:	f7ff fe25 	bl	8014cf0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80150a6:	7f3b      	ldrb	r3, [r7, #28]
 80150a8:	2b09      	cmp	r3, #9
 80150aa:	d906      	bls.n	80150ba <etharp_find_entry+0x216>
 80150ac:	4b1c      	ldr	r3, [pc, #112]	; (8015120 <etharp_find_entry+0x27c>)
 80150ae:	f240 1285 	movw	r2, #389	; 0x185
 80150b2:	491f      	ldr	r1, [pc, #124]	; (8015130 <etharp_find_entry+0x28c>)
 80150b4:	481c      	ldr	r0, [pc, #112]	; (8015128 <etharp_find_entry+0x284>)
 80150b6:	f002 f9bb 	bl	8017430 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80150ba:	7f3a      	ldrb	r2, [r7, #28]
 80150bc:	4917      	ldr	r1, [pc, #92]	; (801511c <etharp_find_entry+0x278>)
 80150be:	4613      	mov	r3, r2
 80150c0:	005b      	lsls	r3, r3, #1
 80150c2:	4413      	add	r3, r2
 80150c4:	00db      	lsls	r3, r3, #3
 80150c6:	440b      	add	r3, r1
 80150c8:	3314      	adds	r3, #20
 80150ca:	781b      	ldrb	r3, [r3, #0]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d006      	beq.n	80150de <etharp_find_entry+0x23a>
 80150d0:	4b13      	ldr	r3, [pc, #76]	; (8015120 <etharp_find_entry+0x27c>)
 80150d2:	f240 1287 	movw	r2, #391	; 0x187
 80150d6:	4917      	ldr	r1, [pc, #92]	; (8015134 <etharp_find_entry+0x290>)
 80150d8:	4813      	ldr	r0, [pc, #76]	; (8015128 <etharp_find_entry+0x284>)
 80150da:	f002 f9a9 	bl	8017430 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d00a      	beq.n	80150fa <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80150e4:	7f3a      	ldrb	r2, [r7, #28]
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	6819      	ldr	r1, [r3, #0]
 80150ea:	480c      	ldr	r0, [pc, #48]	; (801511c <etharp_find_entry+0x278>)
 80150ec:	4613      	mov	r3, r2
 80150ee:	005b      	lsls	r3, r3, #1
 80150f0:	4413      	add	r3, r2
 80150f2:	00db      	lsls	r3, r3, #3
 80150f4:	4403      	add	r3, r0
 80150f6:	3304      	adds	r3, #4
 80150f8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80150fa:	7f3a      	ldrb	r2, [r7, #28]
 80150fc:	4907      	ldr	r1, [pc, #28]	; (801511c <etharp_find_entry+0x278>)
 80150fe:	4613      	mov	r3, r2
 8015100:	005b      	lsls	r3, r3, #1
 8015102:	4413      	add	r3, r2
 8015104:	00db      	lsls	r3, r3, #3
 8015106:	440b      	add	r3, r1
 8015108:	3312      	adds	r3, #18
 801510a:	2200      	movs	r2, #0
 801510c:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 801510e:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8015112:	4618      	mov	r0, r3
 8015114:	3720      	adds	r7, #32
 8015116:	46bd      	mov	sp, r7
 8015118:	bd80      	pop	{r7, pc}
 801511a:	bf00      	nop
 801511c:	2400a43c 	.word	0x2400a43c
 8015120:	08019bf4 	.word	0x08019bf4
 8015124:	08019c2c 	.word	0x08019c2c
 8015128:	08019c6c 	.word	0x08019c6c
 801512c:	08019c94 	.word	0x08019c94
 8015130:	08019cac 	.word	0x08019cac
 8015134:	08019cc0 	.word	0x08019cc0

08015138 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b088      	sub	sp, #32
 801513c:	af02      	add	r7, sp, #8
 801513e:	60f8      	str	r0, [r7, #12]
 8015140:	60b9      	str	r1, [r7, #8]
 8015142:	607a      	str	r2, [r7, #4]
 8015144:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801514c:	2b06      	cmp	r3, #6
 801514e:	d006      	beq.n	801515e <etharp_update_arp_entry+0x26>
 8015150:	4b48      	ldr	r3, [pc, #288]	; (8015274 <etharp_update_arp_entry+0x13c>)
 8015152:	f240 12ab 	movw	r2, #427	; 0x1ab
 8015156:	4948      	ldr	r1, [pc, #288]	; (8015278 <etharp_update_arp_entry+0x140>)
 8015158:	4848      	ldr	r0, [pc, #288]	; (801527c <etharp_update_arp_entry+0x144>)
 801515a:	f002 f969 	bl	8017430 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801515e:	68bb      	ldr	r3, [r7, #8]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d012      	beq.n	801518a <etharp_update_arp_entry+0x52>
 8015164:	68bb      	ldr	r3, [r7, #8]
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d00e      	beq.n	801518a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801516c:	68bb      	ldr	r3, [r7, #8]
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	68f9      	ldr	r1, [r7, #12]
 8015172:	4618      	mov	r0, r3
 8015174:	f001 f900 	bl	8016378 <ip4_addr_isbroadcast_u32>
 8015178:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801517a:	2b00      	cmp	r3, #0
 801517c:	d105      	bne.n	801518a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801517e:	68bb      	ldr	r3, [r7, #8]
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015186:	2be0      	cmp	r3, #224	; 0xe0
 8015188:	d102      	bne.n	8015190 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801518a:	f06f 030f 	mvn.w	r3, #15
 801518e:	e06c      	b.n	801526a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015190:	78fb      	ldrb	r3, [r7, #3]
 8015192:	68fa      	ldr	r2, [r7, #12]
 8015194:	4619      	mov	r1, r3
 8015196:	68b8      	ldr	r0, [r7, #8]
 8015198:	f7ff fe84 	bl	8014ea4 <etharp_find_entry>
 801519c:	4603      	mov	r3, r0
 801519e:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 80151a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	da02      	bge.n	80151ae <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80151a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80151ac:	e05d      	b.n	801526a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80151ae:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80151b2:	4933      	ldr	r1, [pc, #204]	; (8015280 <etharp_update_arp_entry+0x148>)
 80151b4:	4613      	mov	r3, r2
 80151b6:	005b      	lsls	r3, r3, #1
 80151b8:	4413      	add	r3, r2
 80151ba:	00db      	lsls	r3, r3, #3
 80151bc:	440b      	add	r3, r1
 80151be:	3314      	adds	r3, #20
 80151c0:	2202      	movs	r2, #2
 80151c2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80151c4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80151c8:	492d      	ldr	r1, [pc, #180]	; (8015280 <etharp_update_arp_entry+0x148>)
 80151ca:	4613      	mov	r3, r2
 80151cc:	005b      	lsls	r3, r3, #1
 80151ce:	4413      	add	r3, r2
 80151d0:	00db      	lsls	r3, r3, #3
 80151d2:	440b      	add	r3, r1
 80151d4:	3308      	adds	r3, #8
 80151d6:	68fa      	ldr	r2, [r7, #12]
 80151d8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80151da:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80151de:	4613      	mov	r3, r2
 80151e0:	005b      	lsls	r3, r3, #1
 80151e2:	4413      	add	r3, r2
 80151e4:	00db      	lsls	r3, r3, #3
 80151e6:	3308      	adds	r3, #8
 80151e8:	4a25      	ldr	r2, [pc, #148]	; (8015280 <etharp_update_arp_entry+0x148>)
 80151ea:	4413      	add	r3, r2
 80151ec:	3304      	adds	r3, #4
 80151ee:	2206      	movs	r2, #6
 80151f0:	6879      	ldr	r1, [r7, #4]
 80151f2:	4618      	mov	r0, r3
 80151f4:	f002 f909 	bl	801740a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80151f8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80151fc:	4920      	ldr	r1, [pc, #128]	; (8015280 <etharp_update_arp_entry+0x148>)
 80151fe:	4613      	mov	r3, r2
 8015200:	005b      	lsls	r3, r3, #1
 8015202:	4413      	add	r3, r2
 8015204:	00db      	lsls	r3, r3, #3
 8015206:	440b      	add	r3, r1
 8015208:	3312      	adds	r3, #18
 801520a:	2200      	movs	r2, #0
 801520c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801520e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015212:	491b      	ldr	r1, [pc, #108]	; (8015280 <etharp_update_arp_entry+0x148>)
 8015214:	4613      	mov	r3, r2
 8015216:	005b      	lsls	r3, r3, #1
 8015218:	4413      	add	r3, r2
 801521a:	00db      	lsls	r3, r3, #3
 801521c:	440b      	add	r3, r1
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d021      	beq.n	8015268 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015224:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015228:	4915      	ldr	r1, [pc, #84]	; (8015280 <etharp_update_arp_entry+0x148>)
 801522a:	4613      	mov	r3, r2
 801522c:	005b      	lsls	r3, r3, #1
 801522e:	4413      	add	r3, r2
 8015230:	00db      	lsls	r3, r3, #3
 8015232:	440b      	add	r3, r1
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015238:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801523c:	4910      	ldr	r1, [pc, #64]	; (8015280 <etharp_update_arp_entry+0x148>)
 801523e:	4613      	mov	r3, r2
 8015240:	005b      	lsls	r3, r3, #1
 8015242:	4413      	add	r3, r2
 8015244:	00db      	lsls	r3, r3, #3
 8015246:	440b      	add	r3, r1
 8015248:	2200      	movs	r2, #0
 801524a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8015252:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015256:	9300      	str	r3, [sp, #0]
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	6939      	ldr	r1, [r7, #16]
 801525c:	68f8      	ldr	r0, [r7, #12]
 801525e:	f001 ff2d 	bl	80170bc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015262:	6938      	ldr	r0, [r7, #16]
 8015264:	f7fa fc76 	bl	800fb54 <pbuf_free>
  }
  return ERR_OK;
 8015268:	2300      	movs	r3, #0
}
 801526a:	4618      	mov	r0, r3
 801526c:	3718      	adds	r7, #24
 801526e:	46bd      	mov	sp, r7
 8015270:	bd80      	pop	{r7, pc}
 8015272:	bf00      	nop
 8015274:	08019bf4 	.word	0x08019bf4
 8015278:	08019cec 	.word	0x08019cec
 801527c:	08019c6c 	.word	0x08019c6c
 8015280:	2400a43c 	.word	0x2400a43c

08015284 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015284:	b580      	push	{r7, lr}
 8015286:	b084      	sub	sp, #16
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801528c:	2300      	movs	r3, #0
 801528e:	73fb      	strb	r3, [r7, #15]
 8015290:	e01f      	b.n	80152d2 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8015292:	7bfa      	ldrb	r2, [r7, #15]
 8015294:	4912      	ldr	r1, [pc, #72]	; (80152e0 <etharp_cleanup_netif+0x5c>)
 8015296:	4613      	mov	r3, r2
 8015298:	005b      	lsls	r3, r3, #1
 801529a:	4413      	add	r3, r2
 801529c:	00db      	lsls	r3, r3, #3
 801529e:	440b      	add	r3, r1
 80152a0:	3314      	adds	r3, #20
 80152a2:	781b      	ldrb	r3, [r3, #0]
 80152a4:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80152a6:	7bbb      	ldrb	r3, [r7, #14]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d00f      	beq.n	80152cc <etharp_cleanup_netif+0x48>
 80152ac:	7bfa      	ldrb	r2, [r7, #15]
 80152ae:	490c      	ldr	r1, [pc, #48]	; (80152e0 <etharp_cleanup_netif+0x5c>)
 80152b0:	4613      	mov	r3, r2
 80152b2:	005b      	lsls	r3, r3, #1
 80152b4:	4413      	add	r3, r2
 80152b6:	00db      	lsls	r3, r3, #3
 80152b8:	440b      	add	r3, r1
 80152ba:	3308      	adds	r3, #8
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	687a      	ldr	r2, [r7, #4]
 80152c0:	429a      	cmp	r2, r3
 80152c2:	d103      	bne.n	80152cc <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 80152c4:	7bfb      	ldrb	r3, [r7, #15]
 80152c6:	4618      	mov	r0, r3
 80152c8:	f7ff fd12 	bl	8014cf0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80152cc:	7bfb      	ldrb	r3, [r7, #15]
 80152ce:	3301      	adds	r3, #1
 80152d0:	73fb      	strb	r3, [r7, #15]
 80152d2:	7bfb      	ldrb	r3, [r7, #15]
 80152d4:	2b09      	cmp	r3, #9
 80152d6:	d9dc      	bls.n	8015292 <etharp_cleanup_netif+0xe>
    }
  }
}
 80152d8:	bf00      	nop
 80152da:	3710      	adds	r7, #16
 80152dc:	46bd      	mov	sp, r7
 80152de:	bd80      	pop	{r7, pc}
 80152e0:	2400a43c 	.word	0x2400a43c

080152e4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80152e4:	b5b0      	push	{r4, r5, r7, lr}
 80152e6:	b08a      	sub	sp, #40	; 0x28
 80152e8:	af04      	add	r7, sp, #16
 80152ea:	6078      	str	r0, [r7, #4]
 80152ec:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80152ee:	683b      	ldr	r3, [r7, #0]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d107      	bne.n	8015304 <etharp_input+0x20>
 80152f4:	4b3d      	ldr	r3, [pc, #244]	; (80153ec <etharp_input+0x108>)
 80152f6:	f44f 7222 	mov.w	r2, #648	; 0x288
 80152fa:	493d      	ldr	r1, [pc, #244]	; (80153f0 <etharp_input+0x10c>)
 80152fc:	483d      	ldr	r0, [pc, #244]	; (80153f4 <etharp_input+0x110>)
 80152fe:	f002 f897 	bl	8017430 <iprintf>
 8015302:	e06f      	b.n	80153e4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	685b      	ldr	r3, [r3, #4]
 8015308:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801530a:	693b      	ldr	r3, [r7, #16]
 801530c:	881b      	ldrh	r3, [r3, #0]
 801530e:	b29b      	uxth	r3, r3
 8015310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015314:	d10c      	bne.n	8015330 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015316:	693b      	ldr	r3, [r7, #16]
 8015318:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801531a:	2b06      	cmp	r3, #6
 801531c:	d108      	bne.n	8015330 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801531e:	693b      	ldr	r3, [r7, #16]
 8015320:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015322:	2b04      	cmp	r3, #4
 8015324:	d104      	bne.n	8015330 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015326:	693b      	ldr	r3, [r7, #16]
 8015328:	885b      	ldrh	r3, [r3, #2]
 801532a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801532c:	2b08      	cmp	r3, #8
 801532e:	d003      	beq.n	8015338 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015330:	6878      	ldr	r0, [r7, #4]
 8015332:	f7fa fc0f 	bl	800fb54 <pbuf_free>
    return;
 8015336:	e055      	b.n	80153e4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8015338:	693b      	ldr	r3, [r7, #16]
 801533a:	330e      	adds	r3, #14
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8015340:	693b      	ldr	r3, [r7, #16]
 8015342:	3318      	adds	r3, #24
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015348:	683b      	ldr	r3, [r7, #0]
 801534a:	3304      	adds	r3, #4
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d102      	bne.n	8015358 <etharp_input+0x74>
    for_us = 0;
 8015352:	2300      	movs	r3, #0
 8015354:	75fb      	strb	r3, [r7, #23]
 8015356:	e009      	b.n	801536c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015358:	68ba      	ldr	r2, [r7, #8]
 801535a:	683b      	ldr	r3, [r7, #0]
 801535c:	3304      	adds	r3, #4
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	429a      	cmp	r2, r3
 8015362:	bf0c      	ite	eq
 8015364:	2301      	moveq	r3, #1
 8015366:	2300      	movne	r3, #0
 8015368:	b2db      	uxtb	r3, r3
 801536a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801536c:	693b      	ldr	r3, [r7, #16]
 801536e:	f103 0208 	add.w	r2, r3, #8
 8015372:	7dfb      	ldrb	r3, [r7, #23]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d001      	beq.n	801537c <etharp_input+0x98>
 8015378:	2301      	movs	r3, #1
 801537a:	e000      	b.n	801537e <etharp_input+0x9a>
 801537c:	2302      	movs	r3, #2
 801537e:	f107 010c 	add.w	r1, r7, #12
 8015382:	6838      	ldr	r0, [r7, #0]
 8015384:	f7ff fed8 	bl	8015138 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015388:	693b      	ldr	r3, [r7, #16]
 801538a:	88db      	ldrh	r3, [r3, #6]
 801538c:	b29b      	uxth	r3, r3
 801538e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015392:	d003      	beq.n	801539c <etharp_input+0xb8>
 8015394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015398:	d01e      	beq.n	80153d8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 801539a:	e020      	b.n	80153de <etharp_input+0xfa>
    if (for_us) {
 801539c:	7dfb      	ldrb	r3, [r7, #23]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d01c      	beq.n	80153dc <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80153a2:	683b      	ldr	r3, [r7, #0]
 80153a4:	f103 0025 	add.w	r0, r3, #37	; 0x25
 80153a8:	693b      	ldr	r3, [r7, #16]
 80153aa:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80153ae:	683b      	ldr	r3, [r7, #0]
 80153b0:	f103 0525 	add.w	r5, r3, #37	; 0x25
 80153b4:	683b      	ldr	r3, [r7, #0]
 80153b6:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 80153b8:	693a      	ldr	r2, [r7, #16]
 80153ba:	3208      	adds	r2, #8
      etharp_raw(netif,
 80153bc:	2102      	movs	r1, #2
 80153be:	9103      	str	r1, [sp, #12]
 80153c0:	f107 010c 	add.w	r1, r7, #12
 80153c4:	9102      	str	r1, [sp, #8]
 80153c6:	9201      	str	r2, [sp, #4]
 80153c8:	9300      	str	r3, [sp, #0]
 80153ca:	462b      	mov	r3, r5
 80153cc:	4622      	mov	r2, r4
 80153ce:	4601      	mov	r1, r0
 80153d0:	6838      	ldr	r0, [r7, #0]
 80153d2:	f000 fae3 	bl	801599c <etharp_raw>
    break;
 80153d6:	e001      	b.n	80153dc <etharp_input+0xf8>
    break;
 80153d8:	bf00      	nop
 80153da:	e000      	b.n	80153de <etharp_input+0xfa>
    break;
 80153dc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80153de:	6878      	ldr	r0, [r7, #4]
 80153e0:	f7fa fbb8 	bl	800fb54 <pbuf_free>
}
 80153e4:	3718      	adds	r7, #24
 80153e6:	46bd      	mov	sp, r7
 80153e8:	bdb0      	pop	{r4, r5, r7, pc}
 80153ea:	bf00      	nop
 80153ec:	08019bf4 	.word	0x08019bf4
 80153f0:	08019d44 	.word	0x08019d44
 80153f4:	08019c6c 	.word	0x08019c6c

080153f8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b086      	sub	sp, #24
 80153fc:	af02      	add	r7, sp, #8
 80153fe:	60f8      	str	r0, [r7, #12]
 8015400:	60b9      	str	r1, [r7, #8]
 8015402:	4613      	mov	r3, r2
 8015404:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015406:	79fa      	ldrb	r2, [r7, #7]
 8015408:	4944      	ldr	r1, [pc, #272]	; (801551c <etharp_output_to_arp_index+0x124>)
 801540a:	4613      	mov	r3, r2
 801540c:	005b      	lsls	r3, r3, #1
 801540e:	4413      	add	r3, r2
 8015410:	00db      	lsls	r3, r3, #3
 8015412:	440b      	add	r3, r1
 8015414:	3314      	adds	r3, #20
 8015416:	781b      	ldrb	r3, [r3, #0]
 8015418:	2b01      	cmp	r3, #1
 801541a:	d806      	bhi.n	801542a <etharp_output_to_arp_index+0x32>
 801541c:	4b40      	ldr	r3, [pc, #256]	; (8015520 <etharp_output_to_arp_index+0x128>)
 801541e:	f240 22ed 	movw	r2, #749	; 0x2ed
 8015422:	4940      	ldr	r1, [pc, #256]	; (8015524 <etharp_output_to_arp_index+0x12c>)
 8015424:	4840      	ldr	r0, [pc, #256]	; (8015528 <etharp_output_to_arp_index+0x130>)
 8015426:	f002 f803 	bl	8017430 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801542a:	79fa      	ldrb	r2, [r7, #7]
 801542c:	493b      	ldr	r1, [pc, #236]	; (801551c <etharp_output_to_arp_index+0x124>)
 801542e:	4613      	mov	r3, r2
 8015430:	005b      	lsls	r3, r3, #1
 8015432:	4413      	add	r3, r2
 8015434:	00db      	lsls	r3, r3, #3
 8015436:	440b      	add	r3, r1
 8015438:	3314      	adds	r3, #20
 801543a:	781b      	ldrb	r3, [r3, #0]
 801543c:	2b02      	cmp	r3, #2
 801543e:	d153      	bne.n	80154e8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015440:	79fa      	ldrb	r2, [r7, #7]
 8015442:	4936      	ldr	r1, [pc, #216]	; (801551c <etharp_output_to_arp_index+0x124>)
 8015444:	4613      	mov	r3, r2
 8015446:	005b      	lsls	r3, r3, #1
 8015448:	4413      	add	r3, r2
 801544a:	00db      	lsls	r3, r3, #3
 801544c:	440b      	add	r3, r1
 801544e:	3312      	adds	r3, #18
 8015450:	881b      	ldrh	r3, [r3, #0]
 8015452:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015456:	d919      	bls.n	801548c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015458:	79fa      	ldrb	r2, [r7, #7]
 801545a:	4613      	mov	r3, r2
 801545c:	005b      	lsls	r3, r3, #1
 801545e:	4413      	add	r3, r2
 8015460:	00db      	lsls	r3, r3, #3
 8015462:	4a2e      	ldr	r2, [pc, #184]	; (801551c <etharp_output_to_arp_index+0x124>)
 8015464:	4413      	add	r3, r2
 8015466:	3304      	adds	r3, #4
 8015468:	4619      	mov	r1, r3
 801546a:	68f8      	ldr	r0, [r7, #12]
 801546c:	f000 fb44 	bl	8015af8 <etharp_request>
 8015470:	4603      	mov	r3, r0
 8015472:	2b00      	cmp	r3, #0
 8015474:	d138      	bne.n	80154e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015476:	79fa      	ldrb	r2, [r7, #7]
 8015478:	4928      	ldr	r1, [pc, #160]	; (801551c <etharp_output_to_arp_index+0x124>)
 801547a:	4613      	mov	r3, r2
 801547c:	005b      	lsls	r3, r3, #1
 801547e:	4413      	add	r3, r2
 8015480:	00db      	lsls	r3, r3, #3
 8015482:	440b      	add	r3, r1
 8015484:	3314      	adds	r3, #20
 8015486:	2203      	movs	r2, #3
 8015488:	701a      	strb	r2, [r3, #0]
 801548a:	e02d      	b.n	80154e8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801548c:	79fa      	ldrb	r2, [r7, #7]
 801548e:	4923      	ldr	r1, [pc, #140]	; (801551c <etharp_output_to_arp_index+0x124>)
 8015490:	4613      	mov	r3, r2
 8015492:	005b      	lsls	r3, r3, #1
 8015494:	4413      	add	r3, r2
 8015496:	00db      	lsls	r3, r3, #3
 8015498:	440b      	add	r3, r1
 801549a:	3312      	adds	r3, #18
 801549c:	881b      	ldrh	r3, [r3, #0]
 801549e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80154a2:	d321      	bcc.n	80154e8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80154a4:	79fa      	ldrb	r2, [r7, #7]
 80154a6:	4613      	mov	r3, r2
 80154a8:	005b      	lsls	r3, r3, #1
 80154aa:	4413      	add	r3, r2
 80154ac:	00db      	lsls	r3, r3, #3
 80154ae:	4a1b      	ldr	r2, [pc, #108]	; (801551c <etharp_output_to_arp_index+0x124>)
 80154b0:	4413      	add	r3, r2
 80154b2:	1d19      	adds	r1, r3, #4
 80154b4:	79fa      	ldrb	r2, [r7, #7]
 80154b6:	4613      	mov	r3, r2
 80154b8:	005b      	lsls	r3, r3, #1
 80154ba:	4413      	add	r3, r2
 80154bc:	00db      	lsls	r3, r3, #3
 80154be:	3308      	adds	r3, #8
 80154c0:	4a16      	ldr	r2, [pc, #88]	; (801551c <etharp_output_to_arp_index+0x124>)
 80154c2:	4413      	add	r3, r2
 80154c4:	3304      	adds	r3, #4
 80154c6:	461a      	mov	r2, r3
 80154c8:	68f8      	ldr	r0, [r7, #12]
 80154ca:	f000 faf3 	bl	8015ab4 <etharp_request_dst>
 80154ce:	4603      	mov	r3, r0
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d109      	bne.n	80154e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80154d4:	79fa      	ldrb	r2, [r7, #7]
 80154d6:	4911      	ldr	r1, [pc, #68]	; (801551c <etharp_output_to_arp_index+0x124>)
 80154d8:	4613      	mov	r3, r2
 80154da:	005b      	lsls	r3, r3, #1
 80154dc:	4413      	add	r3, r2
 80154de:	00db      	lsls	r3, r3, #3
 80154e0:	440b      	add	r3, r1
 80154e2:	3314      	adds	r3, #20
 80154e4:	2203      	movs	r2, #3
 80154e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	f103 0125 	add.w	r1, r3, #37	; 0x25
 80154ee:	79fa      	ldrb	r2, [r7, #7]
 80154f0:	4613      	mov	r3, r2
 80154f2:	005b      	lsls	r3, r3, #1
 80154f4:	4413      	add	r3, r2
 80154f6:	00db      	lsls	r3, r3, #3
 80154f8:	3308      	adds	r3, #8
 80154fa:	4a08      	ldr	r2, [pc, #32]	; (801551c <etharp_output_to_arp_index+0x124>)
 80154fc:	4413      	add	r3, r2
 80154fe:	1d1a      	adds	r2, r3, #4
 8015500:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015504:	9300      	str	r3, [sp, #0]
 8015506:	4613      	mov	r3, r2
 8015508:	460a      	mov	r2, r1
 801550a:	68b9      	ldr	r1, [r7, #8]
 801550c:	68f8      	ldr	r0, [r7, #12]
 801550e:	f001 fdd5 	bl	80170bc <ethernet_output>
 8015512:	4603      	mov	r3, r0
}
 8015514:	4618      	mov	r0, r3
 8015516:	3710      	adds	r7, #16
 8015518:	46bd      	mov	sp, r7
 801551a:	bd80      	pop	{r7, pc}
 801551c:	2400a43c 	.word	0x2400a43c
 8015520:	08019bf4 	.word	0x08019bf4
 8015524:	08019d64 	.word	0x08019d64
 8015528:	08019c6c 	.word	0x08019c6c

0801552c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b08a      	sub	sp, #40	; 0x28
 8015530:	af02      	add	r7, sp, #8
 8015532:	60f8      	str	r0, [r7, #12]
 8015534:	60b9      	str	r1, [r7, #8]
 8015536:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d106      	bne.n	8015550 <etharp_output+0x24>
 8015542:	4b69      	ldr	r3, [pc, #420]	; (80156e8 <etharp_output+0x1bc>)
 8015544:	f240 321b 	movw	r2, #795	; 0x31b
 8015548:	4968      	ldr	r1, [pc, #416]	; (80156ec <etharp_output+0x1c0>)
 801554a:	4869      	ldr	r0, [pc, #420]	; (80156f0 <etharp_output+0x1c4>)
 801554c:	f001 ff70 	bl	8017430 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015550:	68bb      	ldr	r3, [r7, #8]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d106      	bne.n	8015564 <etharp_output+0x38>
 8015556:	4b64      	ldr	r3, [pc, #400]	; (80156e8 <etharp_output+0x1bc>)
 8015558:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801555c:	4965      	ldr	r1, [pc, #404]	; (80156f4 <etharp_output+0x1c8>)
 801555e:	4864      	ldr	r0, [pc, #400]	; (80156f0 <etharp_output+0x1c4>)
 8015560:	f001 ff66 	bl	8017430 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d106      	bne.n	8015578 <etharp_output+0x4c>
 801556a:	4b5f      	ldr	r3, [pc, #380]	; (80156e8 <etharp_output+0x1bc>)
 801556c:	f240 321d 	movw	r2, #797	; 0x31d
 8015570:	4961      	ldr	r1, [pc, #388]	; (80156f8 <etharp_output+0x1cc>)
 8015572:	485f      	ldr	r0, [pc, #380]	; (80156f0 <etharp_output+0x1c4>)
 8015574:	f001 ff5c 	bl	8017430 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	68f9      	ldr	r1, [r7, #12]
 801557e:	4618      	mov	r0, r3
 8015580:	f000 fefa 	bl	8016378 <ip4_addr_isbroadcast_u32>
 8015584:	4603      	mov	r3, r0
 8015586:	2b00      	cmp	r3, #0
 8015588:	d002      	beq.n	8015590 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801558a:	4b5c      	ldr	r3, [pc, #368]	; (80156fc <etharp_output+0x1d0>)
 801558c:	61fb      	str	r3, [r7, #28]
 801558e:	e09b      	b.n	80156c8 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015598:	2be0      	cmp	r3, #224	; 0xe0
 801559a:	d118      	bne.n	80155ce <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801559c:	2301      	movs	r3, #1
 801559e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80155a0:	2300      	movs	r3, #0
 80155a2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80155a4:	235e      	movs	r3, #94	; 0x5e
 80155a6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	3301      	adds	r3, #1
 80155ac:	781b      	ldrb	r3, [r3, #0]
 80155ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80155b2:	b2db      	uxtb	r3, r3
 80155b4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	3302      	adds	r3, #2
 80155ba:	781b      	ldrb	r3, [r3, #0]
 80155bc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	3303      	adds	r3, #3
 80155c2:	781b      	ldrb	r3, [r3, #0]
 80155c4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80155c6:	f107 0310 	add.w	r3, r7, #16
 80155ca:	61fb      	str	r3, [r7, #28]
 80155cc:	e07c      	b.n	80156c8 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	681a      	ldr	r2, [r3, #0]
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	3304      	adds	r3, #4
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	405a      	eors	r2, r3
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	3308      	adds	r3, #8
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	4013      	ands	r3, r2
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d012      	beq.n	801560c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80155ec:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80155f0:	4293      	cmp	r3, r2
 80155f2:	d00b      	beq.n	801560c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	330c      	adds	r3, #12
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d003      	beq.n	8015606 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	330c      	adds	r3, #12
 8015602:	61bb      	str	r3, [r7, #24]
 8015604:	e002      	b.n	801560c <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015606:	f06f 0303 	mvn.w	r3, #3
 801560a:	e069      	b.n	80156e0 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801560c:	4b3c      	ldr	r3, [pc, #240]	; (8015700 <etharp_output+0x1d4>)
 801560e:	781b      	ldrb	r3, [r3, #0]
 8015610:	4619      	mov	r1, r3
 8015612:	4a3c      	ldr	r2, [pc, #240]	; (8015704 <etharp_output+0x1d8>)
 8015614:	460b      	mov	r3, r1
 8015616:	005b      	lsls	r3, r3, #1
 8015618:	440b      	add	r3, r1
 801561a:	00db      	lsls	r3, r3, #3
 801561c:	4413      	add	r3, r2
 801561e:	3314      	adds	r3, #20
 8015620:	781b      	ldrb	r3, [r3, #0]
 8015622:	2b01      	cmp	r3, #1
 8015624:	d917      	bls.n	8015656 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015626:	69bb      	ldr	r3, [r7, #24]
 8015628:	681a      	ldr	r2, [r3, #0]
 801562a:	4b35      	ldr	r3, [pc, #212]	; (8015700 <etharp_output+0x1d4>)
 801562c:	781b      	ldrb	r3, [r3, #0]
 801562e:	4618      	mov	r0, r3
 8015630:	4934      	ldr	r1, [pc, #208]	; (8015704 <etharp_output+0x1d8>)
 8015632:	4603      	mov	r3, r0
 8015634:	005b      	lsls	r3, r3, #1
 8015636:	4403      	add	r3, r0
 8015638:	00db      	lsls	r3, r3, #3
 801563a:	440b      	add	r3, r1
 801563c:	3304      	adds	r3, #4
 801563e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015640:	429a      	cmp	r2, r3
 8015642:	d108      	bne.n	8015656 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015644:	4b2e      	ldr	r3, [pc, #184]	; (8015700 <etharp_output+0x1d4>)
 8015646:	781b      	ldrb	r3, [r3, #0]
 8015648:	461a      	mov	r2, r3
 801564a:	68b9      	ldr	r1, [r7, #8]
 801564c:	68f8      	ldr	r0, [r7, #12]
 801564e:	f7ff fed3 	bl	80153f8 <etharp_output_to_arp_index>
 8015652:	4603      	mov	r3, r0
 8015654:	e044      	b.n	80156e0 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015656:	2300      	movs	r3, #0
 8015658:	75fb      	strb	r3, [r7, #23]
 801565a:	e02a      	b.n	80156b2 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801565c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015660:	4928      	ldr	r1, [pc, #160]	; (8015704 <etharp_output+0x1d8>)
 8015662:	4613      	mov	r3, r2
 8015664:	005b      	lsls	r3, r3, #1
 8015666:	4413      	add	r3, r2
 8015668:	00db      	lsls	r3, r3, #3
 801566a:	440b      	add	r3, r1
 801566c:	3314      	adds	r3, #20
 801566e:	781b      	ldrb	r3, [r3, #0]
 8015670:	2b01      	cmp	r3, #1
 8015672:	d918      	bls.n	80156a6 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015674:	69bb      	ldr	r3, [r7, #24]
 8015676:	6819      	ldr	r1, [r3, #0]
 8015678:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801567c:	4821      	ldr	r0, [pc, #132]	; (8015704 <etharp_output+0x1d8>)
 801567e:	4613      	mov	r3, r2
 8015680:	005b      	lsls	r3, r3, #1
 8015682:	4413      	add	r3, r2
 8015684:	00db      	lsls	r3, r3, #3
 8015686:	4403      	add	r3, r0
 8015688:	3304      	adds	r3, #4
 801568a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801568c:	4299      	cmp	r1, r3
 801568e:	d10a      	bne.n	80156a6 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8015690:	7dfa      	ldrb	r2, [r7, #23]
 8015692:	4b1b      	ldr	r3, [pc, #108]	; (8015700 <etharp_output+0x1d4>)
 8015694:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015696:	7dfb      	ldrb	r3, [r7, #23]
 8015698:	461a      	mov	r2, r3
 801569a:	68b9      	ldr	r1, [r7, #8]
 801569c:	68f8      	ldr	r0, [r7, #12]
 801569e:	f7ff feab 	bl	80153f8 <etharp_output_to_arp_index>
 80156a2:	4603      	mov	r3, r0
 80156a4:	e01c      	b.n	80156e0 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80156a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80156aa:	b2db      	uxtb	r3, r3
 80156ac:	3301      	adds	r3, #1
 80156ae:	b2db      	uxtb	r3, r3
 80156b0:	75fb      	strb	r3, [r7, #23]
 80156b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80156b6:	2b09      	cmp	r3, #9
 80156b8:	ddd0      	ble.n	801565c <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80156ba:	68ba      	ldr	r2, [r7, #8]
 80156bc:	69b9      	ldr	r1, [r7, #24]
 80156be:	68f8      	ldr	r0, [r7, #12]
 80156c0:	f000 f822 	bl	8015708 <etharp_query>
 80156c4:	4603      	mov	r3, r0
 80156c6:	e00b      	b.n	80156e0 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	f103 0225 	add.w	r2, r3, #37	; 0x25
 80156ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80156d2:	9300      	str	r3, [sp, #0]
 80156d4:	69fb      	ldr	r3, [r7, #28]
 80156d6:	68b9      	ldr	r1, [r7, #8]
 80156d8:	68f8      	ldr	r0, [r7, #12]
 80156da:	f001 fcef 	bl	80170bc <ethernet_output>
 80156de:	4603      	mov	r3, r0
}
 80156e0:	4618      	mov	r0, r3
 80156e2:	3720      	adds	r7, #32
 80156e4:	46bd      	mov	sp, r7
 80156e6:	bd80      	pop	{r7, pc}
 80156e8:	08019bf4 	.word	0x08019bf4
 80156ec:	08019d44 	.word	0x08019d44
 80156f0:	08019c6c 	.word	0x08019c6c
 80156f4:	08019d94 	.word	0x08019d94
 80156f8:	08019d34 	.word	0x08019d34
 80156fc:	0801a3a0 	.word	0x0801a3a0
 8015700:	2400a52c 	.word	0x2400a52c
 8015704:	2400a43c 	.word	0x2400a43c

08015708 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015708:	b580      	push	{r7, lr}
 801570a:	b08c      	sub	sp, #48	; 0x30
 801570c:	af02      	add	r7, sp, #8
 801570e:	60f8      	str	r0, [r7, #12]
 8015710:	60b9      	str	r1, [r7, #8]
 8015712:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	3325      	adds	r3, #37	; 0x25
 8015718:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801571a:	23ff      	movs	r3, #255	; 0xff
 801571c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015720:	2300      	movs	r3, #0
 8015722:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015724:	68bb      	ldr	r3, [r7, #8]
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	68f9      	ldr	r1, [r7, #12]
 801572a:	4618      	mov	r0, r3
 801572c:	f000 fe24 	bl	8016378 <ip4_addr_isbroadcast_u32>
 8015730:	4603      	mov	r3, r0
 8015732:	2b00      	cmp	r3, #0
 8015734:	d10c      	bne.n	8015750 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015736:	68bb      	ldr	r3, [r7, #8]
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801573e:	2be0      	cmp	r3, #224	; 0xe0
 8015740:	d006      	beq.n	8015750 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015742:	68bb      	ldr	r3, [r7, #8]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d003      	beq.n	8015750 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015748:	68bb      	ldr	r3, [r7, #8]
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d102      	bne.n	8015756 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015750:	f06f 030f 	mvn.w	r3, #15
 8015754:	e10f      	b.n	8015976 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015756:	68fa      	ldr	r2, [r7, #12]
 8015758:	2101      	movs	r1, #1
 801575a:	68b8      	ldr	r0, [r7, #8]
 801575c:	f7ff fba2 	bl	8014ea4 <etharp_find_entry>
 8015760:	4603      	mov	r3, r0
 8015762:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8015764:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015768:	2b00      	cmp	r3, #0
 801576a:	da02      	bge.n	8015772 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 801576c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015770:	e101      	b.n	8015976 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015772:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015776:	4982      	ldr	r1, [pc, #520]	; (8015980 <etharp_query+0x278>)
 8015778:	4613      	mov	r3, r2
 801577a:	005b      	lsls	r3, r3, #1
 801577c:	4413      	add	r3, r2
 801577e:	00db      	lsls	r3, r3, #3
 8015780:	440b      	add	r3, r1
 8015782:	3314      	adds	r3, #20
 8015784:	781b      	ldrb	r3, [r3, #0]
 8015786:	2b00      	cmp	r3, #0
 8015788:	d117      	bne.n	80157ba <etharp_query+0xb2>
    is_new_entry = 1;
 801578a:	2301      	movs	r3, #1
 801578c:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801578e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015792:	497b      	ldr	r1, [pc, #492]	; (8015980 <etharp_query+0x278>)
 8015794:	4613      	mov	r3, r2
 8015796:	005b      	lsls	r3, r3, #1
 8015798:	4413      	add	r3, r2
 801579a:	00db      	lsls	r3, r3, #3
 801579c:	440b      	add	r3, r1
 801579e:	3314      	adds	r3, #20
 80157a0:	2201      	movs	r2, #1
 80157a2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80157a4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80157a8:	4975      	ldr	r1, [pc, #468]	; (8015980 <etharp_query+0x278>)
 80157aa:	4613      	mov	r3, r2
 80157ac:	005b      	lsls	r3, r3, #1
 80157ae:	4413      	add	r3, r2
 80157b0:	00db      	lsls	r3, r3, #3
 80157b2:	440b      	add	r3, r1
 80157b4:	3308      	adds	r3, #8
 80157b6:	68fa      	ldr	r2, [r7, #12]
 80157b8:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80157ba:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80157be:	4970      	ldr	r1, [pc, #448]	; (8015980 <etharp_query+0x278>)
 80157c0:	4613      	mov	r3, r2
 80157c2:	005b      	lsls	r3, r3, #1
 80157c4:	4413      	add	r3, r2
 80157c6:	00db      	lsls	r3, r3, #3
 80157c8:	440b      	add	r3, r1
 80157ca:	3314      	adds	r3, #20
 80157cc:	781b      	ldrb	r3, [r3, #0]
 80157ce:	2b01      	cmp	r3, #1
 80157d0:	d012      	beq.n	80157f8 <etharp_query+0xf0>
 80157d2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80157d6:	496a      	ldr	r1, [pc, #424]	; (8015980 <etharp_query+0x278>)
 80157d8:	4613      	mov	r3, r2
 80157da:	005b      	lsls	r3, r3, #1
 80157dc:	4413      	add	r3, r2
 80157de:	00db      	lsls	r3, r3, #3
 80157e0:	440b      	add	r3, r1
 80157e2:	3314      	adds	r3, #20
 80157e4:	781b      	ldrb	r3, [r3, #0]
 80157e6:	2b01      	cmp	r3, #1
 80157e8:	d806      	bhi.n	80157f8 <etharp_query+0xf0>
 80157ea:	4b66      	ldr	r3, [pc, #408]	; (8015984 <etharp_query+0x27c>)
 80157ec:	f240 32c9 	movw	r2, #969	; 0x3c9
 80157f0:	4965      	ldr	r1, [pc, #404]	; (8015988 <etharp_query+0x280>)
 80157f2:	4866      	ldr	r0, [pc, #408]	; (801598c <etharp_query+0x284>)
 80157f4:	f001 fe1c 	bl	8017430 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80157f8:	6a3b      	ldr	r3, [r7, #32]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d102      	bne.n	8015804 <etharp_query+0xfc>
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d10c      	bne.n	801581e <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015804:	68b9      	ldr	r1, [r7, #8]
 8015806:	68f8      	ldr	r0, [r7, #12]
 8015808:	f000 f976 	bl	8015af8 <etharp_request>
 801580c:	4603      	mov	r3, r0
 801580e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d102      	bne.n	801581e <etharp_query+0x116>
      return result;
 8015818:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801581c:	e0ab      	b.n	8015976 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d106      	bne.n	8015832 <etharp_query+0x12a>
 8015824:	4b57      	ldr	r3, [pc, #348]	; (8015984 <etharp_query+0x27c>)
 8015826:	f240 32db 	movw	r2, #987	; 0x3db
 801582a:	4959      	ldr	r1, [pc, #356]	; (8015990 <etharp_query+0x288>)
 801582c:	4857      	ldr	r0, [pc, #348]	; (801598c <etharp_query+0x284>)
 801582e:	f001 fdff 	bl	8017430 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015832:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015836:	4952      	ldr	r1, [pc, #328]	; (8015980 <etharp_query+0x278>)
 8015838:	4613      	mov	r3, r2
 801583a:	005b      	lsls	r3, r3, #1
 801583c:	4413      	add	r3, r2
 801583e:	00db      	lsls	r3, r3, #3
 8015840:	440b      	add	r3, r1
 8015842:	3314      	adds	r3, #20
 8015844:	781b      	ldrb	r3, [r3, #0]
 8015846:	2b01      	cmp	r3, #1
 8015848:	d919      	bls.n	801587e <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 801584a:	7cfa      	ldrb	r2, [r7, #19]
 801584c:	4b51      	ldr	r3, [pc, #324]	; (8015994 <etharp_query+0x28c>)
 801584e:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015850:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015854:	4613      	mov	r3, r2
 8015856:	005b      	lsls	r3, r3, #1
 8015858:	4413      	add	r3, r2
 801585a:	00db      	lsls	r3, r3, #3
 801585c:	3308      	adds	r3, #8
 801585e:	4a48      	ldr	r2, [pc, #288]	; (8015980 <etharp_query+0x278>)
 8015860:	4413      	add	r3, r2
 8015862:	1d1a      	adds	r2, r3, #4
 8015864:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015868:	9300      	str	r3, [sp, #0]
 801586a:	4613      	mov	r3, r2
 801586c:	697a      	ldr	r2, [r7, #20]
 801586e:	6879      	ldr	r1, [r7, #4]
 8015870:	68f8      	ldr	r0, [r7, #12]
 8015872:	f001 fc23 	bl	80170bc <ethernet_output>
 8015876:	4603      	mov	r3, r0
 8015878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801587c:	e079      	b.n	8015972 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801587e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015882:	493f      	ldr	r1, [pc, #252]	; (8015980 <etharp_query+0x278>)
 8015884:	4613      	mov	r3, r2
 8015886:	005b      	lsls	r3, r3, #1
 8015888:	4413      	add	r3, r2
 801588a:	00db      	lsls	r3, r3, #3
 801588c:	440b      	add	r3, r1
 801588e:	3314      	adds	r3, #20
 8015890:	781b      	ldrb	r3, [r3, #0]
 8015892:	2b01      	cmp	r3, #1
 8015894:	d16d      	bne.n	8015972 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015896:	2300      	movs	r3, #0
 8015898:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801589e:	e01a      	b.n	80158d6 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80158a0:	69fb      	ldr	r3, [r7, #28]
 80158a2:	895a      	ldrh	r2, [r3, #10]
 80158a4:	69fb      	ldr	r3, [r7, #28]
 80158a6:	891b      	ldrh	r3, [r3, #8]
 80158a8:	429a      	cmp	r2, r3
 80158aa:	d10a      	bne.n	80158c2 <etharp_query+0x1ba>
 80158ac:	69fb      	ldr	r3, [r7, #28]
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d006      	beq.n	80158c2 <etharp_query+0x1ba>
 80158b4:	4b33      	ldr	r3, [pc, #204]	; (8015984 <etharp_query+0x27c>)
 80158b6:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80158ba:	4937      	ldr	r1, [pc, #220]	; (8015998 <etharp_query+0x290>)
 80158bc:	4833      	ldr	r0, [pc, #204]	; (801598c <etharp_query+0x284>)
 80158be:	f001 fdb7 	bl	8017430 <iprintf>
      if (p->type != PBUF_ROM) {
 80158c2:	69fb      	ldr	r3, [r7, #28]
 80158c4:	7b1b      	ldrb	r3, [r3, #12]
 80158c6:	2b01      	cmp	r3, #1
 80158c8:	d002      	beq.n	80158d0 <etharp_query+0x1c8>
        copy_needed = 1;
 80158ca:	2301      	movs	r3, #1
 80158cc:	61bb      	str	r3, [r7, #24]
        break;
 80158ce:	e005      	b.n	80158dc <etharp_query+0x1d4>
      }
      p = p->next;
 80158d0:	69fb      	ldr	r3, [r7, #28]
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	61fb      	str	r3, [r7, #28]
    while (p) {
 80158d6:	69fb      	ldr	r3, [r7, #28]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d1e1      	bne.n	80158a0 <etharp_query+0x198>
    }
    if (copy_needed) {
 80158dc:	69bb      	ldr	r3, [r7, #24]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d017      	beq.n	8015912 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80158e2:	69fb      	ldr	r3, [r7, #28]
 80158e4:	891b      	ldrh	r3, [r3, #8]
 80158e6:	2200      	movs	r2, #0
 80158e8:	4619      	mov	r1, r3
 80158ea:	2002      	movs	r0, #2
 80158ec:	f7f9 fdc0 	bl	800f470 <pbuf_alloc>
 80158f0:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 80158f2:	69fb      	ldr	r3, [r7, #28]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d011      	beq.n	801591c <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 80158f8:	6879      	ldr	r1, [r7, #4]
 80158fa:	69f8      	ldr	r0, [r7, #28]
 80158fc:	f7fa fa5a 	bl	800fdb4 <pbuf_copy>
 8015900:	4603      	mov	r3, r0
 8015902:	2b00      	cmp	r3, #0
 8015904:	d00a      	beq.n	801591c <etharp_query+0x214>
          pbuf_free(p);
 8015906:	69f8      	ldr	r0, [r7, #28]
 8015908:	f7fa f924 	bl	800fb54 <pbuf_free>
          p = NULL;
 801590c:	2300      	movs	r3, #0
 801590e:	61fb      	str	r3, [r7, #28]
 8015910:	e004      	b.n	801591c <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015916:	69f8      	ldr	r0, [r7, #28]
 8015918:	f7fa f9ce 	bl	800fcb8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801591c:	69fb      	ldr	r3, [r7, #28]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d024      	beq.n	801596c <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015922:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015926:	4916      	ldr	r1, [pc, #88]	; (8015980 <etharp_query+0x278>)
 8015928:	4613      	mov	r3, r2
 801592a:	005b      	lsls	r3, r3, #1
 801592c:	4413      	add	r3, r2
 801592e:	00db      	lsls	r3, r3, #3
 8015930:	440b      	add	r3, r1
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d00b      	beq.n	8015950 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8015938:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801593c:	4910      	ldr	r1, [pc, #64]	; (8015980 <etharp_query+0x278>)
 801593e:	4613      	mov	r3, r2
 8015940:	005b      	lsls	r3, r3, #1
 8015942:	4413      	add	r3, r2
 8015944:	00db      	lsls	r3, r3, #3
 8015946:	440b      	add	r3, r1
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	4618      	mov	r0, r3
 801594c:	f7fa f902 	bl	800fb54 <pbuf_free>
      }
      arp_table[i].q = p;
 8015950:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015954:	490a      	ldr	r1, [pc, #40]	; (8015980 <etharp_query+0x278>)
 8015956:	4613      	mov	r3, r2
 8015958:	005b      	lsls	r3, r3, #1
 801595a:	4413      	add	r3, r2
 801595c:	00db      	lsls	r3, r3, #3
 801595e:	440b      	add	r3, r1
 8015960:	69fa      	ldr	r2, [r7, #28]
 8015962:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015964:	2300      	movs	r3, #0
 8015966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801596a:	e002      	b.n	8015972 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801596c:	23ff      	movs	r3, #255	; 0xff
 801596e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015972:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015976:	4618      	mov	r0, r3
 8015978:	3728      	adds	r7, #40	; 0x28
 801597a:	46bd      	mov	sp, r7
 801597c:	bd80      	pop	{r7, pc}
 801597e:	bf00      	nop
 8015980:	2400a43c 	.word	0x2400a43c
 8015984:	08019bf4 	.word	0x08019bf4
 8015988:	08019da0 	.word	0x08019da0
 801598c:	08019c6c 	.word	0x08019c6c
 8015990:	08019d94 	.word	0x08019d94
 8015994:	2400a52c 	.word	0x2400a52c
 8015998:	08019dc8 	.word	0x08019dc8

0801599c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801599c:	b580      	push	{r7, lr}
 801599e:	b08a      	sub	sp, #40	; 0x28
 80159a0:	af02      	add	r7, sp, #8
 80159a2:	60f8      	str	r0, [r7, #12]
 80159a4:	60b9      	str	r1, [r7, #8]
 80159a6:	607a      	str	r2, [r7, #4]
 80159a8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80159aa:	2300      	movs	r3, #0
 80159ac:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d106      	bne.n	80159c2 <etharp_raw+0x26>
 80159b4:	4b3a      	ldr	r3, [pc, #232]	; (8015aa0 <etharp_raw+0x104>)
 80159b6:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80159ba:	493a      	ldr	r1, [pc, #232]	; (8015aa4 <etharp_raw+0x108>)
 80159bc:	483a      	ldr	r0, [pc, #232]	; (8015aa8 <etharp_raw+0x10c>)
 80159be:	f001 fd37 	bl	8017430 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80159c2:	2200      	movs	r2, #0
 80159c4:	211c      	movs	r1, #28
 80159c6:	2002      	movs	r0, #2
 80159c8:	f7f9 fd52 	bl	800f470 <pbuf_alloc>
 80159cc:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80159ce:	69bb      	ldr	r3, [r7, #24]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d102      	bne.n	80159da <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80159d4:	f04f 33ff 	mov.w	r3, #4294967295
 80159d8:	e05d      	b.n	8015a96 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80159da:	69bb      	ldr	r3, [r7, #24]
 80159dc:	895b      	ldrh	r3, [r3, #10]
 80159de:	2b1b      	cmp	r3, #27
 80159e0:	d806      	bhi.n	80159f0 <etharp_raw+0x54>
 80159e2:	4b2f      	ldr	r3, [pc, #188]	; (8015aa0 <etharp_raw+0x104>)
 80159e4:	f240 4264 	movw	r2, #1124	; 0x464
 80159e8:	4930      	ldr	r1, [pc, #192]	; (8015aac <etharp_raw+0x110>)
 80159ea:	482f      	ldr	r0, [pc, #188]	; (8015aa8 <etharp_raw+0x10c>)
 80159ec:	f001 fd20 	bl	8017430 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80159f0:	69bb      	ldr	r3, [r7, #24]
 80159f2:	685b      	ldr	r3, [r3, #4]
 80159f4:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80159f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80159f8:	4618      	mov	r0, r3
 80159fa:	f7f8 fdd7 	bl	800e5ac <lwip_htons>
 80159fe:	4603      	mov	r3, r0
 8015a00:	461a      	mov	r2, r3
 8015a02:	697b      	ldr	r3, [r7, #20]
 8015a04:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8015a0c:	2b06      	cmp	r3, #6
 8015a0e:	d006      	beq.n	8015a1e <etharp_raw+0x82>
 8015a10:	4b23      	ldr	r3, [pc, #140]	; (8015aa0 <etharp_raw+0x104>)
 8015a12:	f240 426b 	movw	r2, #1131	; 0x46b
 8015a16:	4926      	ldr	r1, [pc, #152]	; (8015ab0 <etharp_raw+0x114>)
 8015a18:	4823      	ldr	r0, [pc, #140]	; (8015aa8 <etharp_raw+0x10c>)
 8015a1a:	f001 fd09 	bl	8017430 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8015a1e:	697b      	ldr	r3, [r7, #20]
 8015a20:	3308      	adds	r3, #8
 8015a22:	2206      	movs	r2, #6
 8015a24:	6839      	ldr	r1, [r7, #0]
 8015a26:	4618      	mov	r0, r3
 8015a28:	f001 fcef 	bl	801740a <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8015a2c:	697b      	ldr	r3, [r7, #20]
 8015a2e:	3312      	adds	r3, #18
 8015a30:	2206      	movs	r2, #6
 8015a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015a34:	4618      	mov	r0, r3
 8015a36:	f001 fce8 	bl	801740a <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8015a3a:	697b      	ldr	r3, [r7, #20]
 8015a3c:	330e      	adds	r3, #14
 8015a3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015a40:	6812      	ldr	r2, [r2, #0]
 8015a42:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8015a44:	697b      	ldr	r3, [r7, #20]
 8015a46:	3318      	adds	r3, #24
 8015a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a4a:	6812      	ldr	r2, [r2, #0]
 8015a4c:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8015a4e:	697b      	ldr	r3, [r7, #20]
 8015a50:	2200      	movs	r2, #0
 8015a52:	701a      	strb	r2, [r3, #0]
 8015a54:	2200      	movs	r2, #0
 8015a56:	f042 0201 	orr.w	r2, r2, #1
 8015a5a:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015a5c:	697b      	ldr	r3, [r7, #20]
 8015a5e:	2200      	movs	r2, #0
 8015a60:	f042 0208 	orr.w	r2, r2, #8
 8015a64:	709a      	strb	r2, [r3, #2]
 8015a66:	2200      	movs	r2, #0
 8015a68:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015a6a:	697b      	ldr	r3, [r7, #20]
 8015a6c:	2206      	movs	r2, #6
 8015a6e:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015a70:	697b      	ldr	r3, [r7, #20]
 8015a72:	2204      	movs	r2, #4
 8015a74:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015a76:	f640 0306 	movw	r3, #2054	; 0x806
 8015a7a:	9300      	str	r3, [sp, #0]
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	68ba      	ldr	r2, [r7, #8]
 8015a80:	69b9      	ldr	r1, [r7, #24]
 8015a82:	68f8      	ldr	r0, [r7, #12]
 8015a84:	f001 fb1a 	bl	80170bc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015a88:	69b8      	ldr	r0, [r7, #24]
 8015a8a:	f7fa f863 	bl	800fb54 <pbuf_free>
  p = NULL;
 8015a8e:	2300      	movs	r3, #0
 8015a90:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015a92:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015a96:	4618      	mov	r0, r3
 8015a98:	3720      	adds	r7, #32
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	bd80      	pop	{r7, pc}
 8015a9e:	bf00      	nop
 8015aa0:	08019bf4 	.word	0x08019bf4
 8015aa4:	08019d44 	.word	0x08019d44
 8015aa8:	08019c6c 	.word	0x08019c6c
 8015aac:	08019de4 	.word	0x08019de4
 8015ab0:	08019e18 	.word	0x08019e18

08015ab4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b088      	sub	sp, #32
 8015ab8:	af04      	add	r7, sp, #16
 8015aba:	60f8      	str	r0, [r7, #12]
 8015abc:	60b9      	str	r1, [r7, #8]
 8015abe:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	f103 0025 	add.w	r0, r3, #37	; 0x25
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015ad0:	2201      	movs	r2, #1
 8015ad2:	9203      	str	r2, [sp, #12]
 8015ad4:	68ba      	ldr	r2, [r7, #8]
 8015ad6:	9202      	str	r2, [sp, #8]
 8015ad8:	4a06      	ldr	r2, [pc, #24]	; (8015af4 <etharp_request_dst+0x40>)
 8015ada:	9201      	str	r2, [sp, #4]
 8015adc:	9300      	str	r3, [sp, #0]
 8015ade:	4603      	mov	r3, r0
 8015ae0:	687a      	ldr	r2, [r7, #4]
 8015ae2:	68f8      	ldr	r0, [r7, #12]
 8015ae4:	f7ff ff5a 	bl	801599c <etharp_raw>
 8015ae8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015aea:	4618      	mov	r0, r3
 8015aec:	3710      	adds	r7, #16
 8015aee:	46bd      	mov	sp, r7
 8015af0:	bd80      	pop	{r7, pc}
 8015af2:	bf00      	nop
 8015af4:	0801a3a8 	.word	0x0801a3a8

08015af8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b082      	sub	sp, #8
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
 8015b00:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015b02:	4a05      	ldr	r2, [pc, #20]	; (8015b18 <etharp_request+0x20>)
 8015b04:	6839      	ldr	r1, [r7, #0]
 8015b06:	6878      	ldr	r0, [r7, #4]
 8015b08:	f7ff ffd4 	bl	8015ab4 <etharp_request_dst>
 8015b0c:	4603      	mov	r3, r0
}
 8015b0e:	4618      	mov	r0, r3
 8015b10:	3708      	adds	r7, #8
 8015b12:	46bd      	mov	sp, r7
 8015b14:	bd80      	pop	{r7, pc}
 8015b16:	bf00      	nop
 8015b18:	0801a3a0 	.word	0x0801a3a0

08015b1c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b08e      	sub	sp, #56	; 0x38
 8015b20:	af04      	add	r7, sp, #16
 8015b22:	6078      	str	r0, [r7, #4]
 8015b24:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015b26:	4b88      	ldr	r3, [pc, #544]	; (8015d48 <icmp_input+0x22c>)
 8015b28:	689b      	ldr	r3, [r3, #8]
 8015b2a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8015b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b2e:	781b      	ldrb	r3, [r3, #0]
 8015b30:	b29b      	uxth	r3, r3
 8015b32:	f003 030f 	and.w	r3, r3, #15
 8015b36:	b29b      	uxth	r3, r3
 8015b38:	009b      	lsls	r3, r3, #2
 8015b3a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015b3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b3e:	2b13      	cmp	r3, #19
 8015b40:	f240 80ec 	bls.w	8015d1c <icmp_input+0x200>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	895b      	ldrh	r3, [r3, #10]
 8015b48:	2b03      	cmp	r3, #3
 8015b4a:	f240 80e9 	bls.w	8015d20 <icmp_input+0x204>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	685b      	ldr	r3, [r3, #4]
 8015b52:	781b      	ldrb	r3, [r3, #0]
 8015b54:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015b58:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	f000 80d6 	beq.w	8015d0e <icmp_input+0x1f2>
 8015b62:	2b08      	cmp	r3, #8
 8015b64:	f040 80d6 	bne.w	8015d14 <icmp_input+0x1f8>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8015b68:	4b78      	ldr	r3, [pc, #480]	; (8015d4c <icmp_input+0x230>)
 8015b6a:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015b6c:	4b76      	ldr	r3, [pc, #472]	; (8015d48 <icmp_input+0x22c>)
 8015b6e:	695b      	ldr	r3, [r3, #20]
 8015b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015b74:	2be0      	cmp	r3, #224	; 0xe0
 8015b76:	f000 80da 	beq.w	8015d2e <icmp_input+0x212>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015b7a:	4b73      	ldr	r3, [pc, #460]	; (8015d48 <icmp_input+0x22c>)
 8015b7c:	695a      	ldr	r2, [r3, #20]
 8015b7e:	4b72      	ldr	r3, [pc, #456]	; (8015d48 <icmp_input+0x22c>)
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	4619      	mov	r1, r3
 8015b84:	4610      	mov	r0, r2
 8015b86:	f000 fbf7 	bl	8016378 <ip4_addr_isbroadcast_u32>
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	f040 80d0 	bne.w	8015d32 <icmp_input+0x216>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	891b      	ldrh	r3, [r3, #8]
 8015b96:	2b07      	cmp	r3, #7
 8015b98:	f240 80c4 	bls.w	8015d24 <icmp_input+0x208>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
#if CHECKSUM_CHECK_ICMP
    IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
      if (inet_chksum_pbuf(p) != 0) {
 8015b9c:	6878      	ldr	r0, [r7, #4]
 8015b9e:	f7f8 fd9b 	bl	800e6d8 <inet_chksum_pbuf>
 8015ba2:	4603      	mov	r3, r0
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d003      	beq.n	8015bb0 <icmp_input+0x94>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
        pbuf_free(p);
 8015ba8:	6878      	ldr	r0, [r7, #4]
 8015baa:	f7f9 ffd3 	bl	800fb54 <pbuf_free>
        ICMP_STATS_INC(icmp.chkerr);
        MIB2_STATS_INC(mib2.icmpinerrors);
        return;
 8015bae:	e0c7      	b.n	8015d40 <icmp_input+0x224>
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8015bb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015bb2:	330e      	adds	r3, #14
 8015bb4:	b29b      	uxth	r3, r3
 8015bb6:	b21b      	sxth	r3, r3
 8015bb8:	4619      	mov	r1, r3
 8015bba:	6878      	ldr	r0, [r7, #4]
 8015bbc:	f7f9 ffa6 	bl	800fb0c <pbuf_header>
 8015bc0:	4603      	mov	r3, r0
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d046      	beq.n	8015c54 <icmp_input+0x138>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	891a      	ldrh	r2, [r3, #8]
 8015bca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015bcc:	4413      	add	r3, r2
 8015bce:	b29b      	uxth	r3, r3
 8015bd0:	2200      	movs	r2, #0
 8015bd2:	4619      	mov	r1, r3
 8015bd4:	2002      	movs	r0, #2
 8015bd6:	f7f9 fc4b 	bl	800f470 <pbuf_alloc>
 8015bda:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8015bdc:	69bb      	ldr	r3, [r7, #24]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	f000 80a9 	beq.w	8015d36 <icmp_input+0x21a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015be4:	69bb      	ldr	r3, [r7, #24]
 8015be6:	895b      	ldrh	r3, [r3, #10]
 8015be8:	461a      	mov	r2, r3
 8015bea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015bec:	3308      	adds	r3, #8
 8015bee:	429a      	cmp	r2, r3
 8015bf0:	d203      	bcs.n	8015bfa <icmp_input+0xde>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8015bf2:	69b8      	ldr	r0, [r7, #24]
 8015bf4:	f7f9 ffae 	bl	800fb54 <pbuf_free>
        goto icmperr;
 8015bf8:	e09e      	b.n	8015d38 <icmp_input+0x21c>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8015bfa:	69bb      	ldr	r3, [r7, #24]
 8015bfc:	685b      	ldr	r3, [r3, #4]
 8015bfe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015c00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015c02:	4618      	mov	r0, r3
 8015c04:	f001 fc01 	bl	801740a <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8015c08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015c0a:	425b      	negs	r3, r3
 8015c0c:	b29b      	uxth	r3, r3
 8015c0e:	b21b      	sxth	r3, r3
 8015c10:	4619      	mov	r1, r3
 8015c12:	69b8      	ldr	r0, [r7, #24]
 8015c14:	f7f9 ff7a 	bl	800fb0c <pbuf_header>
 8015c18:	4603      	mov	r3, r0
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d009      	beq.n	8015c32 <icmp_input+0x116>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015c1e:	4b4c      	ldr	r3, [pc, #304]	; (8015d50 <icmp_input+0x234>)
 8015c20:	22af      	movs	r2, #175	; 0xaf
 8015c22:	494c      	ldr	r1, [pc, #304]	; (8015d54 <icmp_input+0x238>)
 8015c24:	484c      	ldr	r0, [pc, #304]	; (8015d58 <icmp_input+0x23c>)
 8015c26:	f001 fc03 	bl	8017430 <iprintf>
        pbuf_free(r);
 8015c2a:	69b8      	ldr	r0, [r7, #24]
 8015c2c:	f7f9 ff92 	bl	800fb54 <pbuf_free>
        goto icmperr;
 8015c30:	e082      	b.n	8015d38 <icmp_input+0x21c>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8015c32:	6879      	ldr	r1, [r7, #4]
 8015c34:	69b8      	ldr	r0, [r7, #24]
 8015c36:	f7fa f8bd 	bl	800fdb4 <pbuf_copy>
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d003      	beq.n	8015c48 <icmp_input+0x12c>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8015c40:	69b8      	ldr	r0, [r7, #24]
 8015c42:	f7f9 ff87 	bl	800fb54 <pbuf_free>
        goto icmperr;
 8015c46:	e077      	b.n	8015d38 <icmp_input+0x21c>
      }
      /* free the original p */
      pbuf_free(p);
 8015c48:	6878      	ldr	r0, [r7, #4]
 8015c4a:	f7f9 ff83 	bl	800fb54 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8015c4e:	69bb      	ldr	r3, [r7, #24]
 8015c50:	607b      	str	r3, [r7, #4]
 8015c52:	e015      	b.n	8015c80 <icmp_input+0x164>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8015c54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015c56:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8015c5a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8015c5e:	33f2      	adds	r3, #242	; 0xf2
 8015c60:	b29b      	uxth	r3, r3
 8015c62:	b21b      	sxth	r3, r3
 8015c64:	4619      	mov	r1, r3
 8015c66:	6878      	ldr	r0, [r7, #4]
 8015c68:	f7f9 ff50 	bl	800fb0c <pbuf_header>
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d006      	beq.n	8015c80 <icmp_input+0x164>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015c72:	4b37      	ldr	r3, [pc, #220]	; (8015d50 <icmp_input+0x234>)
 8015c74:	22c0      	movs	r2, #192	; 0xc0
 8015c76:	4939      	ldr	r1, [pc, #228]	; (8015d5c <icmp_input+0x240>)
 8015c78:	4837      	ldr	r0, [pc, #220]	; (8015d58 <icmp_input+0x23c>)
 8015c7a:	f001 fbd9 	bl	8017430 <iprintf>
        goto icmperr;
 8015c7e:	e05b      	b.n	8015d38 <icmp_input+0x21c>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	685b      	ldr	r3, [r3, #4]
 8015c84:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8015c86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015c8a:	4619      	mov	r1, r3
 8015c8c:	6878      	ldr	r0, [r7, #4]
 8015c8e:	f7f9 ff3d 	bl	800fb0c <pbuf_header>
 8015c92:	4603      	mov	r3, r0
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d13c      	bne.n	8015d12 <icmp_input+0x1f6>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	685b      	ldr	r3, [r3, #4]
 8015c9c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8015c9e:	69fb      	ldr	r3, [r7, #28]
 8015ca0:	681a      	ldr	r2, [r3, #0]
 8015ca2:	693b      	ldr	r3, [r7, #16]
 8015ca4:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015ca6:	4b28      	ldr	r3, [pc, #160]	; (8015d48 <icmp_input+0x22c>)
 8015ca8:	691a      	ldr	r2, [r3, #16]
 8015caa:	693b      	ldr	r3, [r7, #16]
 8015cac:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015cae:	697b      	ldr	r3, [r7, #20]
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
        /* adjust the checksum */
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8015cb4:	697b      	ldr	r3, [r7, #20]
 8015cb6:	885b      	ldrh	r3, [r3, #2]
 8015cb8:	b29b      	uxth	r3, r3
 8015cba:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8015cbe:	4293      	cmp	r3, r2
 8015cc0:	d907      	bls.n	8015cd2 <icmp_input+0x1b6>
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
 8015cc2:	697b      	ldr	r3, [r7, #20]
 8015cc4:	885b      	ldrh	r3, [r3, #2]
 8015cc6:	b29b      	uxth	r3, r3
 8015cc8:	3309      	adds	r3, #9
 8015cca:	b29a      	uxth	r2, r3
 8015ccc:	697b      	ldr	r3, [r7, #20]
 8015cce:	805a      	strh	r2, [r3, #2]
 8015cd0:	e006      	b.n	8015ce0 <icmp_input+0x1c4>
        } else {
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
 8015cd2:	697b      	ldr	r3, [r7, #20]
 8015cd4:	885b      	ldrh	r3, [r3, #2]
 8015cd6:	b29b      	uxth	r3, r3
 8015cd8:	3308      	adds	r3, #8
 8015cda:	b29a      	uxth	r2, r3
 8015cdc:	697b      	ldr	r3, [r7, #20]
 8015cde:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8015ce0:	693b      	ldr	r3, [r7, #16]
 8015ce2:	22ff      	movs	r2, #255	; 0xff
 8015ce4:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8015ce6:	693b      	ldr	r3, [r7, #16]
 8015ce8:	2200      	movs	r2, #0
 8015cea:	729a      	strb	r2, [r3, #10]
 8015cec:	2200      	movs	r2, #0
 8015cee:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015cf0:	683b      	ldr	r3, [r7, #0]
 8015cf2:	9302      	str	r3, [sp, #8]
 8015cf4:	2301      	movs	r3, #1
 8015cf6:	9301      	str	r3, [sp, #4]
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	9300      	str	r3, [sp, #0]
 8015cfc:	23ff      	movs	r3, #255	; 0xff
 8015cfe:	2200      	movs	r2, #0
 8015d00:	69f9      	ldr	r1, [r7, #28]
 8015d02:	6878      	ldr	r0, [r7, #4]
 8015d04:	f000 fa66 	bl	80161d4 <ip4_output_if>
 8015d08:	4603      	mov	r3, r0
 8015d0a:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8015d0c:	e001      	b.n	8015d12 <icmp_input+0x1f6>
    break;
 8015d0e:	bf00      	nop
 8015d10:	e000      	b.n	8015d14 <icmp_input+0x1f8>
    break;
 8015d12:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015d14:	6878      	ldr	r0, [r7, #4]
 8015d16:	f7f9 ff1d 	bl	800fb54 <pbuf_free>
  return;
 8015d1a:	e011      	b.n	8015d40 <icmp_input+0x224>
    goto lenerr;
 8015d1c:	bf00      	nop
 8015d1e:	e002      	b.n	8015d26 <icmp_input+0x20a>
    goto lenerr;
 8015d20:	bf00      	nop
 8015d22:	e000      	b.n	8015d26 <icmp_input+0x20a>
      goto lenerr;
 8015d24:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015d26:	6878      	ldr	r0, [r7, #4]
 8015d28:	f7f9 ff14 	bl	800fb54 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015d2c:	e008      	b.n	8015d40 <icmp_input+0x224>
      goto icmperr;
 8015d2e:	bf00      	nop
 8015d30:	e002      	b.n	8015d38 <icmp_input+0x21c>
      goto icmperr;
 8015d32:	bf00      	nop
 8015d34:	e000      	b.n	8015d38 <icmp_input+0x21c>
        goto icmperr;
 8015d36:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015d38:	6878      	ldr	r0, [r7, #4]
 8015d3a:	f7f9 ff0b 	bl	800fb54 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015d3e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015d40:	3728      	adds	r7, #40	; 0x28
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bd80      	pop	{r7, pc}
 8015d46:	bf00      	nop
 8015d48:	2400a834 	.word	0x2400a834
 8015d4c:	2400a848 	.word	0x2400a848
 8015d50:	08019e5c 	.word	0x08019e5c
 8015d54:	08019e94 	.word	0x08019e94
 8015d58:	08019ecc 	.word	0x08019ecc
 8015d5c:	08019ef4 	.word	0x08019ef4

08015d60 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b082      	sub	sp, #8
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
 8015d68:	460b      	mov	r3, r1
 8015d6a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015d6c:	78fb      	ldrb	r3, [r7, #3]
 8015d6e:	461a      	mov	r2, r3
 8015d70:	2103      	movs	r1, #3
 8015d72:	6878      	ldr	r0, [r7, #4]
 8015d74:	f000 f814 	bl	8015da0 <icmp_send_response>
}
 8015d78:	bf00      	nop
 8015d7a:	3708      	adds	r7, #8
 8015d7c:	46bd      	mov	sp, r7
 8015d7e:	bd80      	pop	{r7, pc}

08015d80 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015d80:	b580      	push	{r7, lr}
 8015d82:	b082      	sub	sp, #8
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	6078      	str	r0, [r7, #4]
 8015d88:	460b      	mov	r3, r1
 8015d8a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015d8c:	78fb      	ldrb	r3, [r7, #3]
 8015d8e:	461a      	mov	r2, r3
 8015d90:	210b      	movs	r1, #11
 8015d92:	6878      	ldr	r0, [r7, #4]
 8015d94:	f000 f804 	bl	8015da0 <icmp_send_response>
}
 8015d98:	bf00      	nop
 8015d9a:	3708      	adds	r7, #8
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	bd80      	pop	{r7, pc}

08015da0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b08c      	sub	sp, #48	; 0x30
 8015da4:	af04      	add	r7, sp, #16
 8015da6:	6078      	str	r0, [r7, #4]
 8015da8:	460b      	mov	r3, r1
 8015daa:	70fb      	strb	r3, [r7, #3]
 8015dac:	4613      	mov	r3, r2
 8015dae:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015db0:	2200      	movs	r2, #0
 8015db2:	2124      	movs	r1, #36	; 0x24
 8015db4:	2001      	movs	r0, #1
 8015db6:	f7f9 fb5b 	bl	800f470 <pbuf_alloc>
 8015dba:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015dbc:	69fb      	ldr	r3, [r7, #28]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d056      	beq.n	8015e70 <icmp_send_response+0xd0>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015dc2:	69fb      	ldr	r3, [r7, #28]
 8015dc4:	895b      	ldrh	r3, [r3, #10]
 8015dc6:	2b23      	cmp	r3, #35	; 0x23
 8015dc8:	d806      	bhi.n	8015dd8 <icmp_send_response+0x38>
 8015dca:	4b2b      	ldr	r3, [pc, #172]	; (8015e78 <icmp_send_response+0xd8>)
 8015dcc:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8015dd0:	492a      	ldr	r1, [pc, #168]	; (8015e7c <icmp_send_response+0xdc>)
 8015dd2:	482b      	ldr	r0, [pc, #172]	; (8015e80 <icmp_send_response+0xe0>)
 8015dd4:	f001 fb2c 	bl	8017430 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	685b      	ldr	r3, [r3, #4]
 8015ddc:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015dde:	69fb      	ldr	r3, [r7, #28]
 8015de0:	685b      	ldr	r3, [r3, #4]
 8015de2:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015de4:	697b      	ldr	r3, [r7, #20]
 8015de6:	78fa      	ldrb	r2, [r7, #3]
 8015de8:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015dea:	697b      	ldr	r3, [r7, #20]
 8015dec:	78ba      	ldrb	r2, [r7, #2]
 8015dee:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015df0:	697b      	ldr	r3, [r7, #20]
 8015df2:	2200      	movs	r2, #0
 8015df4:	711a      	strb	r2, [r3, #4]
 8015df6:	2200      	movs	r2, #0
 8015df8:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015dfa:	697b      	ldr	r3, [r7, #20]
 8015dfc:	2200      	movs	r2, #0
 8015dfe:	719a      	strb	r2, [r3, #6]
 8015e00:	2200      	movs	r2, #0
 8015e02:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015e04:	69fb      	ldr	r3, [r7, #28]
 8015e06:	685b      	ldr	r3, [r3, #4]
 8015e08:	f103 0008 	add.w	r0, r3, #8
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	685b      	ldr	r3, [r3, #4]
 8015e10:	221c      	movs	r2, #28
 8015e12:	4619      	mov	r1, r3
 8015e14:	f001 faf9 	bl	801740a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015e18:	69bb      	ldr	r3, [r7, #24]
 8015e1a:	68db      	ldr	r3, [r3, #12]
 8015e1c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015e1e:	f107 030c 	add.w	r3, r7, #12
 8015e22:	4618      	mov	r0, r3
 8015e24:	f000 f82e 	bl	8015e84 <ip4_route>
 8015e28:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015e2a:	693b      	ldr	r3, [r7, #16]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d01b      	beq.n	8015e68 <icmp_send_response+0xc8>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015e30:	697b      	ldr	r3, [r7, #20]
 8015e32:	2200      	movs	r2, #0
 8015e34:	709a      	strb	r2, [r3, #2]
 8015e36:	2200      	movs	r2, #0
 8015e38:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8015e3a:	69fb      	ldr	r3, [r7, #28]
 8015e3c:	895b      	ldrh	r3, [r3, #10]
 8015e3e:	4619      	mov	r1, r3
 8015e40:	6978      	ldr	r0, [r7, #20]
 8015e42:	f7f8 fc37 	bl	800e6b4 <inet_chksum>
 8015e46:	4603      	mov	r3, r0
 8015e48:	461a      	mov	r2, r3
 8015e4a:	697b      	ldr	r3, [r7, #20]
 8015e4c:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015e4e:	f107 020c 	add.w	r2, r7, #12
 8015e52:	693b      	ldr	r3, [r7, #16]
 8015e54:	9302      	str	r3, [sp, #8]
 8015e56:	2301      	movs	r3, #1
 8015e58:	9301      	str	r3, [sp, #4]
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	9300      	str	r3, [sp, #0]
 8015e5e:	23ff      	movs	r3, #255	; 0xff
 8015e60:	2100      	movs	r1, #0
 8015e62:	69f8      	ldr	r0, [r7, #28]
 8015e64:	f000 f9b6 	bl	80161d4 <ip4_output_if>
  }
  pbuf_free(q);
 8015e68:	69f8      	ldr	r0, [r7, #28]
 8015e6a:	f7f9 fe73 	bl	800fb54 <pbuf_free>
 8015e6e:	e000      	b.n	8015e72 <icmp_send_response+0xd2>
    return;
 8015e70:	bf00      	nop
}
 8015e72:	3720      	adds	r7, #32
 8015e74:	46bd      	mov	sp, r7
 8015e76:	bd80      	pop	{r7, pc}
 8015e78:	08019e5c 	.word	0x08019e5c
 8015e7c:	08019f28 	.word	0x08019f28
 8015e80:	08019ecc 	.word	0x08019ecc

08015e84 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015e84:	b480      	push	{r7}
 8015e86:	b085      	sub	sp, #20
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8015e8c:	4b30      	ldr	r3, [pc, #192]	; (8015f50 <ip4_route+0xcc>)
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	60fb      	str	r3, [r7, #12]
 8015e92:	e036      	b.n	8015f02 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8015e9a:	f003 0301 	and.w	r3, r3, #1
 8015e9e:	b2db      	uxtb	r3, r3
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d02b      	beq.n	8015efc <ip4_route+0x78>
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8015eaa:	089b      	lsrs	r3, r3, #2
 8015eac:	f003 0301 	and.w	r3, r3, #1
 8015eb0:	b2db      	uxtb	r3, r3
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d022      	beq.n	8015efc <ip4_route+0x78>
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	3304      	adds	r3, #4
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d01d      	beq.n	8015efc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	681a      	ldr	r2, [r3, #0]
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	3304      	adds	r3, #4
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	405a      	eors	r2, r3
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	3308      	adds	r3, #8
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	4013      	ands	r3, r2
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d101      	bne.n	8015edc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	e033      	b.n	8015f44 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8015ee2:	f003 0302 	and.w	r3, r3, #2
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d108      	bne.n	8015efc <ip4_route+0x78>
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	681a      	ldr	r2, [r3, #0]
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	330c      	adds	r3, #12
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	429a      	cmp	r2, r3
 8015ef6:	d101      	bne.n	8015efc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	e023      	b.n	8015f44 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8015efc:	68fb      	ldr	r3, [r7, #12]
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	60fb      	str	r3, [r7, #12]
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d1c5      	bne.n	8015e94 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015f08:	4b12      	ldr	r3, [pc, #72]	; (8015f54 <ip4_route+0xd0>)
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d015      	beq.n	8015f3c <ip4_route+0xb8>
 8015f10:	4b10      	ldr	r3, [pc, #64]	; (8015f54 <ip4_route+0xd0>)
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8015f18:	f003 0301 	and.w	r3, r3, #1
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d00d      	beq.n	8015f3c <ip4_route+0xb8>
 8015f20:	4b0c      	ldr	r3, [pc, #48]	; (8015f54 <ip4_route+0xd0>)
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8015f28:	f003 0304 	and.w	r3, r3, #4
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d005      	beq.n	8015f3c <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8015f30:	4b08      	ldr	r3, [pc, #32]	; (8015f54 <ip4_route+0xd0>)
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	3304      	adds	r3, #4
 8015f36:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d101      	bne.n	8015f40 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015f3c:	2300      	movs	r3, #0
 8015f3e:	e001      	b.n	8015f44 <ip4_route+0xc0>
  }

  return netif_default;
 8015f40:	4b04      	ldr	r3, [pc, #16]	; (8015f54 <ip4_route+0xd0>)
 8015f42:	681b      	ldr	r3, [r3, #0]
}
 8015f44:	4618      	mov	r0, r3
 8015f46:	3714      	adds	r7, #20
 8015f48:	46bd      	mov	sp, r7
 8015f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f4e:	4770      	bx	lr
 8015f50:	2400d8e0 	.word	0x2400d8e0
 8015f54:	2400d8e4 	.word	0x2400d8e4

08015f58 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b086      	sub	sp, #24
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	6078      	str	r0, [r7, #4]
 8015f60:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	685b      	ldr	r3, [r3, #4]
 8015f66:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015f68:	697b      	ldr	r3, [r7, #20]
 8015f6a:	781b      	ldrb	r3, [r3, #0]
 8015f6c:	091b      	lsrs	r3, r3, #4
 8015f6e:	b2db      	uxtb	r3, r3
 8015f70:	2b04      	cmp	r3, #4
 8015f72:	d004      	beq.n	8015f7e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015f74:	6878      	ldr	r0, [r7, #4]
 8015f76:	f7f9 fded 	bl	800fb54 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015f7a:	2300      	movs	r3, #0
 8015f7c:	e122      	b.n	80161c4 <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8015f7e:	697b      	ldr	r3, [r7, #20]
 8015f80:	781b      	ldrb	r3, [r3, #0]
 8015f82:	b29b      	uxth	r3, r3
 8015f84:	f003 030f 	and.w	r3, r3, #15
 8015f88:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8015f8a:	897b      	ldrh	r3, [r7, #10]
 8015f8c:	009b      	lsls	r3, r3, #2
 8015f8e:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015f90:	697b      	ldr	r3, [r7, #20]
 8015f92:	885b      	ldrh	r3, [r3, #2]
 8015f94:	b29b      	uxth	r3, r3
 8015f96:	4618      	mov	r0, r3
 8015f98:	f7f8 fb08 	bl	800e5ac <lwip_htons>
 8015f9c:	4603      	mov	r3, r0
 8015f9e:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	891b      	ldrh	r3, [r3, #8]
 8015fa4:	893a      	ldrh	r2, [r7, #8]
 8015fa6:	429a      	cmp	r2, r3
 8015fa8:	d204      	bcs.n	8015fb4 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 8015faa:	893b      	ldrh	r3, [r7, #8]
 8015fac:	4619      	mov	r1, r3
 8015fae:	6878      	ldr	r0, [r7, #4]
 8015fb0:	f7f9 fc5c 	bl	800f86c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	895b      	ldrh	r3, [r3, #10]
 8015fb8:	897a      	ldrh	r2, [r7, #10]
 8015fba:	429a      	cmp	r2, r3
 8015fbc:	d807      	bhi.n	8015fce <ip4_input+0x76>
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	891b      	ldrh	r3, [r3, #8]
 8015fc2:	893a      	ldrh	r2, [r7, #8]
 8015fc4:	429a      	cmp	r2, r3
 8015fc6:	d802      	bhi.n	8015fce <ip4_input+0x76>
 8015fc8:	897b      	ldrh	r3, [r7, #10]
 8015fca:	2b13      	cmp	r3, #19
 8015fcc:	d804      	bhi.n	8015fd8 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015fce:	6878      	ldr	r0, [r7, #4]
 8015fd0:	f7f9 fdc0 	bl	800fb54 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	e0f5      	b.n	80161c4 <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015fd8:	697b      	ldr	r3, [r7, #20]
 8015fda:	691b      	ldr	r3, [r3, #16]
 8015fdc:	4a7b      	ldr	r2, [pc, #492]	; (80161cc <ip4_input+0x274>)
 8015fde:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015fe0:	697b      	ldr	r3, [r7, #20]
 8015fe2:	68db      	ldr	r3, [r3, #12]
 8015fe4:	4a79      	ldr	r2, [pc, #484]	; (80161cc <ip4_input+0x274>)
 8015fe6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015fe8:	4b78      	ldr	r3, [pc, #480]	; (80161cc <ip4_input+0x274>)
 8015fea:	695b      	ldr	r3, [r3, #20]
 8015fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015ff0:	2be0      	cmp	r3, #224	; 0xe0
 8015ff2:	d112      	bne.n	801601a <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015ff4:	683b      	ldr	r3, [r7, #0]
 8015ff6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8015ffa:	f003 0301 	and.w	r3, r3, #1
 8015ffe:	b2db      	uxtb	r3, r3
 8016000:	2b00      	cmp	r3, #0
 8016002:	d007      	beq.n	8016014 <ip4_input+0xbc>
 8016004:	683b      	ldr	r3, [r7, #0]
 8016006:	3304      	adds	r3, #4
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d002      	beq.n	8016014 <ip4_input+0xbc>
      netif = inp;
 801600e:	683b      	ldr	r3, [r7, #0]
 8016010:	613b      	str	r3, [r7, #16]
 8016012:	e041      	b.n	8016098 <ip4_input+0x140>
    } else {
      netif = NULL;
 8016014:	2300      	movs	r3, #0
 8016016:	613b      	str	r3, [r7, #16]
 8016018:	e03e      	b.n	8016098 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 801601a:	2301      	movs	r3, #1
 801601c:	60fb      	str	r3, [r7, #12]
    netif = inp;
 801601e:	683b      	ldr	r3, [r7, #0]
 8016020:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016022:	693b      	ldr	r3, [r7, #16]
 8016024:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8016028:	f003 0301 	and.w	r3, r3, #1
 801602c:	b2db      	uxtb	r3, r3
 801602e:	2b00      	cmp	r3, #0
 8016030:	d014      	beq.n	801605c <ip4_input+0x104>
 8016032:	693b      	ldr	r3, [r7, #16]
 8016034:	3304      	adds	r3, #4
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d00f      	beq.n	801605c <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801603c:	4b63      	ldr	r3, [pc, #396]	; (80161cc <ip4_input+0x274>)
 801603e:	695a      	ldr	r2, [r3, #20]
 8016040:	693b      	ldr	r3, [r7, #16]
 8016042:	3304      	adds	r3, #4
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	429a      	cmp	r2, r3
 8016048:	d026      	beq.n	8016098 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801604a:	4b60      	ldr	r3, [pc, #384]	; (80161cc <ip4_input+0x274>)
 801604c:	695b      	ldr	r3, [r3, #20]
 801604e:	6939      	ldr	r1, [r7, #16]
 8016050:	4618      	mov	r0, r3
 8016052:	f000 f991 	bl	8016378 <ip4_addr_isbroadcast_u32>
 8016056:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016058:	2b00      	cmp	r3, #0
 801605a:	d11d      	bne.n	8016098 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d00d      	beq.n	801607e <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8016062:	4b5a      	ldr	r3, [pc, #360]	; (80161cc <ip4_input+0x274>)
 8016064:	695b      	ldr	r3, [r3, #20]
 8016066:	b2db      	uxtb	r3, r3
 8016068:	2b7f      	cmp	r3, #127	; 0x7f
 801606a:	d102      	bne.n	8016072 <ip4_input+0x11a>
          netif = NULL;
 801606c:	2300      	movs	r3, #0
 801606e:	613b      	str	r3, [r7, #16]
          break;
 8016070:	e012      	b.n	8016098 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8016072:	2300      	movs	r3, #0
 8016074:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 8016076:	4b56      	ldr	r3, [pc, #344]	; (80161d0 <ip4_input+0x278>)
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	613b      	str	r3, [r7, #16]
 801607c:	e002      	b.n	8016084 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 801607e:	693b      	ldr	r3, [r7, #16]
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8016084:	693a      	ldr	r2, [r7, #16]
 8016086:	683b      	ldr	r3, [r7, #0]
 8016088:	429a      	cmp	r2, r3
 801608a:	d102      	bne.n	8016092 <ip4_input+0x13a>
        netif = netif->next;
 801608c:	693b      	ldr	r3, [r7, #16]
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8016092:	693b      	ldr	r3, [r7, #16]
 8016094:	2b00      	cmp	r3, #0
 8016096:	d1c4      	bne.n	8016022 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016098:	4b4c      	ldr	r3, [pc, #304]	; (80161cc <ip4_input+0x274>)
 801609a:	691b      	ldr	r3, [r3, #16]
 801609c:	6839      	ldr	r1, [r7, #0]
 801609e:	4618      	mov	r0, r3
 80160a0:	f000 f96a 	bl	8016378 <ip4_addr_isbroadcast_u32>
 80160a4:	4603      	mov	r3, r0
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d105      	bne.n	80160b6 <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80160aa:	4b48      	ldr	r3, [pc, #288]	; (80161cc <ip4_input+0x274>)
 80160ac:	691b      	ldr	r3, [r3, #16]
 80160ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80160b2:	2be0      	cmp	r3, #224	; 0xe0
 80160b4:	d104      	bne.n	80160c0 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80160b6:	6878      	ldr	r0, [r7, #4]
 80160b8:	f7f9 fd4c 	bl	800fb54 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80160bc:	2300      	movs	r3, #0
 80160be:	e081      	b.n	80161c4 <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80160c0:	693b      	ldr	r3, [r7, #16]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d104      	bne.n	80160d0 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80160c6:	6878      	ldr	r0, [r7, #4]
 80160c8:	f7f9 fd44 	bl	800fb54 <pbuf_free>
    return ERR_OK;
 80160cc:	2300      	movs	r3, #0
 80160ce:	e079      	b.n	80161c4 <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80160d0:	697b      	ldr	r3, [r7, #20]
 80160d2:	88db      	ldrh	r3, [r3, #6]
 80160d4:	b29b      	uxth	r3, r3
 80160d6:	461a      	mov	r2, r3
 80160d8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80160dc:	4013      	ands	r3, r2
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d00b      	beq.n	80160fa <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80160e2:	6878      	ldr	r0, [r7, #4]
 80160e4:	f000 fc8e 	bl	8016a04 <ip4_reass>
 80160e8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d101      	bne.n	80160f4 <ip4_input+0x19c>
      return ERR_OK;
 80160f0:	2300      	movs	r3, #0
 80160f2:	e067      	b.n	80161c4 <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	685b      	ldr	r3, [r3, #4]
 80160f8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80160fa:	4a34      	ldr	r2, [pc, #208]	; (80161cc <ip4_input+0x274>)
 80160fc:	693b      	ldr	r3, [r7, #16]
 80160fe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016100:	4a32      	ldr	r2, [pc, #200]	; (80161cc <ip4_input+0x274>)
 8016102:	683b      	ldr	r3, [r7, #0]
 8016104:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016106:	4a31      	ldr	r2, [pc, #196]	; (80161cc <ip4_input+0x274>)
 8016108:	697b      	ldr	r3, [r7, #20]
 801610a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 801610c:	697b      	ldr	r3, [r7, #20]
 801610e:	781b      	ldrb	r3, [r3, #0]
 8016110:	b29b      	uxth	r3, r3
 8016112:	f003 030f 	and.w	r3, r3, #15
 8016116:	b29b      	uxth	r3, r3
 8016118:	009b      	lsls	r3, r3, #2
 801611a:	b29a      	uxth	r2, r3
 801611c:	4b2b      	ldr	r3, [pc, #172]	; (80161cc <ip4_input+0x274>)
 801611e:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8016120:	897b      	ldrh	r3, [r7, #10]
 8016122:	425b      	negs	r3, r3
 8016124:	b29b      	uxth	r3, r3
 8016126:	b21b      	sxth	r3, r3
 8016128:	4619      	mov	r1, r3
 801612a:	6878      	ldr	r0, [r7, #4]
 801612c:	f7f9 fcee 	bl	800fb0c <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8016130:	697b      	ldr	r3, [r7, #20]
 8016132:	7a5b      	ldrb	r3, [r3, #9]
 8016134:	2b06      	cmp	r3, #6
 8016136:	d009      	beq.n	801614c <ip4_input+0x1f4>
 8016138:	2b11      	cmp	r3, #17
 801613a:	d002      	beq.n	8016142 <ip4_input+0x1ea>
 801613c:	2b01      	cmp	r3, #1
 801613e:	d00a      	beq.n	8016156 <ip4_input+0x1fe>
 8016140:	e00e      	b.n	8016160 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8016142:	6839      	ldr	r1, [r7, #0]
 8016144:	6878      	ldr	r0, [r7, #4]
 8016146:	f7fe fcbd 	bl	8014ac4 <udp_input>
      break;
 801614a:	e028      	b.n	801619e <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 801614c:	6839      	ldr	r1, [r7, #0]
 801614e:	6878      	ldr	r0, [r7, #4]
 8016150:	f7fb f944 	bl	80113dc <tcp_input>
      break;
 8016154:	e023      	b.n	801619e <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8016156:	6839      	ldr	r1, [r7, #0]
 8016158:	6878      	ldr	r0, [r7, #4]
 801615a:	f7ff fcdf 	bl	8015b1c <icmp_input>
      break;
 801615e:	e01e      	b.n	801619e <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016160:	4b1a      	ldr	r3, [pc, #104]	; (80161cc <ip4_input+0x274>)
 8016162:	695b      	ldr	r3, [r3, #20]
 8016164:	6939      	ldr	r1, [r7, #16]
 8016166:	4618      	mov	r0, r3
 8016168:	f000 f906 	bl	8016378 <ip4_addr_isbroadcast_u32>
 801616c:	4603      	mov	r3, r0
 801616e:	2b00      	cmp	r3, #0
 8016170:	d112      	bne.n	8016198 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016172:	4b16      	ldr	r3, [pc, #88]	; (80161cc <ip4_input+0x274>)
 8016174:	695b      	ldr	r3, [r3, #20]
 8016176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801617a:	2be0      	cmp	r3, #224	; 0xe0
 801617c:	d00c      	beq.n	8016198 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 801617e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016182:	4619      	mov	r1, r3
 8016184:	6878      	ldr	r0, [r7, #4]
 8016186:	f7f9 fcd3 	bl	800fb30 <pbuf_header_force>
        p->payload = iphdr;
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	697a      	ldr	r2, [r7, #20]
 801618e:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016190:	2102      	movs	r1, #2
 8016192:	6878      	ldr	r0, [r7, #4]
 8016194:	f7ff fde4 	bl	8015d60 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8016198:	6878      	ldr	r0, [r7, #4]
 801619a:	f7f9 fcdb 	bl	800fb54 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801619e:	4b0b      	ldr	r3, [pc, #44]	; (80161cc <ip4_input+0x274>)
 80161a0:	2200      	movs	r2, #0
 80161a2:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80161a4:	4b09      	ldr	r3, [pc, #36]	; (80161cc <ip4_input+0x274>)
 80161a6:	2200      	movs	r2, #0
 80161a8:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80161aa:	4b08      	ldr	r3, [pc, #32]	; (80161cc <ip4_input+0x274>)
 80161ac:	2200      	movs	r2, #0
 80161ae:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80161b0:	4b06      	ldr	r3, [pc, #24]	; (80161cc <ip4_input+0x274>)
 80161b2:	2200      	movs	r2, #0
 80161b4:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80161b6:	4b05      	ldr	r3, [pc, #20]	; (80161cc <ip4_input+0x274>)
 80161b8:	2200      	movs	r2, #0
 80161ba:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80161bc:	4b03      	ldr	r3, [pc, #12]	; (80161cc <ip4_input+0x274>)
 80161be:	2200      	movs	r2, #0
 80161c0:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80161c2:	2300      	movs	r3, #0
}
 80161c4:	4618      	mov	r0, r3
 80161c6:	3718      	adds	r7, #24
 80161c8:	46bd      	mov	sp, r7
 80161ca:	bd80      	pop	{r7, pc}
 80161cc:	2400a834 	.word	0x2400a834
 80161d0:	2400d8e0 	.word	0x2400d8e0

080161d4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80161d4:	b580      	push	{r7, lr}
 80161d6:	b08a      	sub	sp, #40	; 0x28
 80161d8:	af04      	add	r7, sp, #16
 80161da:	60f8      	str	r0, [r7, #12]
 80161dc:	60b9      	str	r1, [r7, #8]
 80161de:	607a      	str	r2, [r7, #4]
 80161e0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80161e2:	68bb      	ldr	r3, [r7, #8]
 80161e4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d009      	beq.n	8016200 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80161ec:	68bb      	ldr	r3, [r7, #8]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d003      	beq.n	80161fa <ip4_output_if+0x26>
 80161f2:	68bb      	ldr	r3, [r7, #8]
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d102      	bne.n	8016200 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80161fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161fc:	3304      	adds	r3, #4
 80161fe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016200:	78fa      	ldrb	r2, [r7, #3]
 8016202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016204:	9302      	str	r3, [sp, #8]
 8016206:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801620a:	9301      	str	r3, [sp, #4]
 801620c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016210:	9300      	str	r3, [sp, #0]
 8016212:	4613      	mov	r3, r2
 8016214:	687a      	ldr	r2, [r7, #4]
 8016216:	6979      	ldr	r1, [r7, #20]
 8016218:	68f8      	ldr	r0, [r7, #12]
 801621a:	f000 f805 	bl	8016228 <ip4_output_if_src>
 801621e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016220:	4618      	mov	r0, r3
 8016222:	3718      	adds	r7, #24
 8016224:	46bd      	mov	sp, r7
 8016226:	bd80      	pop	{r7, pc}

08016228 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b088      	sub	sp, #32
 801622c:	af00      	add	r7, sp, #0
 801622e:	60f8      	str	r0, [r7, #12]
 8016230:	60b9      	str	r1, [r7, #8]
 8016232:	607a      	str	r2, [r7, #4]
 8016234:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	89db      	ldrh	r3, [r3, #14]
 801623a:	2b01      	cmp	r3, #1
 801623c:	d006      	beq.n	801624c <ip4_output_if_src+0x24>
 801623e:	4b48      	ldr	r3, [pc, #288]	; (8016360 <ip4_output_if_src+0x138>)
 8016240:	f240 3233 	movw	r2, #819	; 0x333
 8016244:	4947      	ldr	r1, [pc, #284]	; (8016364 <ip4_output_if_src+0x13c>)
 8016246:	4848      	ldr	r0, [pc, #288]	; (8016368 <ip4_output_if_src+0x140>)
 8016248:	f001 f8f2 	bl	8017430 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	2b00      	cmp	r3, #0
 8016250:	d060      	beq.n	8016314 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016252:	2314      	movs	r3, #20
 8016254:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8016256:	2114      	movs	r1, #20
 8016258:	68f8      	ldr	r0, [r7, #12]
 801625a:	f7f9 fc57 	bl	800fb0c <pbuf_header>
 801625e:	4603      	mov	r3, r0
 8016260:	2b00      	cmp	r3, #0
 8016262:	d002      	beq.n	801626a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016264:	f06f 0301 	mvn.w	r3, #1
 8016268:	e075      	b.n	8016356 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	685b      	ldr	r3, [r3, #4]
 801626e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	895b      	ldrh	r3, [r3, #10]
 8016274:	2b13      	cmp	r3, #19
 8016276:	d806      	bhi.n	8016286 <ip4_output_if_src+0x5e>
 8016278:	4b39      	ldr	r3, [pc, #228]	; (8016360 <ip4_output_if_src+0x138>)
 801627a:	f240 3261 	movw	r2, #865	; 0x361
 801627e:	493b      	ldr	r1, [pc, #236]	; (801636c <ip4_output_if_src+0x144>)
 8016280:	4839      	ldr	r0, [pc, #228]	; (8016368 <ip4_output_if_src+0x140>)
 8016282:	f001 f8d5 	bl	8017430 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016286:	69fb      	ldr	r3, [r7, #28]
 8016288:	78fa      	ldrb	r2, [r7, #3]
 801628a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801628c:	69fb      	ldr	r3, [r7, #28]
 801628e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016292:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	681a      	ldr	r2, [r3, #0]
 8016298:	69fb      	ldr	r3, [r7, #28]
 801629a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801629c:	8b7b      	ldrh	r3, [r7, #26]
 801629e:	089b      	lsrs	r3, r3, #2
 80162a0:	b29b      	uxth	r3, r3
 80162a2:	b2db      	uxtb	r3, r3
 80162a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80162a8:	b2da      	uxtb	r2, r3
 80162aa:	69fb      	ldr	r3, [r7, #28]
 80162ac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80162ae:	69fb      	ldr	r3, [r7, #28]
 80162b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80162b4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	891b      	ldrh	r3, [r3, #8]
 80162ba:	4618      	mov	r0, r3
 80162bc:	f7f8 f976 	bl	800e5ac <lwip_htons>
 80162c0:	4603      	mov	r3, r0
 80162c2:	461a      	mov	r2, r3
 80162c4:	69fb      	ldr	r3, [r7, #28]
 80162c6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80162c8:	69fb      	ldr	r3, [r7, #28]
 80162ca:	2200      	movs	r2, #0
 80162cc:	719a      	strb	r2, [r3, #6]
 80162ce:	2200      	movs	r2, #0
 80162d0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80162d2:	4b27      	ldr	r3, [pc, #156]	; (8016370 <ip4_output_if_src+0x148>)
 80162d4:	881b      	ldrh	r3, [r3, #0]
 80162d6:	4618      	mov	r0, r3
 80162d8:	f7f8 f968 	bl	800e5ac <lwip_htons>
 80162dc:	4603      	mov	r3, r0
 80162de:	461a      	mov	r2, r3
 80162e0:	69fb      	ldr	r3, [r7, #28]
 80162e2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80162e4:	4b22      	ldr	r3, [pc, #136]	; (8016370 <ip4_output_if_src+0x148>)
 80162e6:	881b      	ldrh	r3, [r3, #0]
 80162e8:	3301      	adds	r3, #1
 80162ea:	b29a      	uxth	r2, r3
 80162ec:	4b20      	ldr	r3, [pc, #128]	; (8016370 <ip4_output_if_src+0x148>)
 80162ee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80162f0:	68bb      	ldr	r3, [r7, #8]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d104      	bne.n	8016300 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80162f6:	4b1f      	ldr	r3, [pc, #124]	; (8016374 <ip4_output_if_src+0x14c>)
 80162f8:	681a      	ldr	r2, [r3, #0]
 80162fa:	69fb      	ldr	r3, [r7, #28]
 80162fc:	60da      	str	r2, [r3, #12]
 80162fe:	e003      	b.n	8016308 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016300:	68bb      	ldr	r3, [r7, #8]
 8016302:	681a      	ldr	r2, [r3, #0]
 8016304:	69fb      	ldr	r3, [r7, #28]
 8016306:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016308:	69fb      	ldr	r3, [r7, #28]
 801630a:	2200      	movs	r2, #0
 801630c:	729a      	strb	r2, [r3, #10]
 801630e:	2200      	movs	r2, #0
 8016310:	72da      	strb	r2, [r3, #11]
 8016312:	e008      	b.n	8016326 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	685b      	ldr	r3, [r3, #4]
 8016318:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801631a:	69fb      	ldr	r3, [r7, #28]
 801631c:	691b      	ldr	r3, [r3, #16]
 801631e:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016320:	f107 0314 	add.w	r3, r7, #20
 8016324:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016328:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801632a:	2b00      	cmp	r3, #0
 801632c:	d00c      	beq.n	8016348 <ip4_output_if_src+0x120>
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	891a      	ldrh	r2, [r3, #8]
 8016332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016334:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016336:	429a      	cmp	r2, r3
 8016338:	d906      	bls.n	8016348 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 801633a:	687a      	ldr	r2, [r7, #4]
 801633c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801633e:	68f8      	ldr	r0, [r7, #12]
 8016340:	f000 fd0a 	bl	8016d58 <ip4_frag>
 8016344:	4603      	mov	r3, r0
 8016346:	e006      	b.n	8016356 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801634a:	695b      	ldr	r3, [r3, #20]
 801634c:	687a      	ldr	r2, [r7, #4]
 801634e:	68f9      	ldr	r1, [r7, #12]
 8016350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016352:	4798      	blx	r3
 8016354:	4603      	mov	r3, r0
}
 8016356:	4618      	mov	r0, r3
 8016358:	3720      	adds	r7, #32
 801635a:	46bd      	mov	sp, r7
 801635c:	bd80      	pop	{r7, pc}
 801635e:	bf00      	nop
 8016360:	08019f54 	.word	0x08019f54
 8016364:	08019f88 	.word	0x08019f88
 8016368:	08019f94 	.word	0x08019f94
 801636c:	08019fbc 	.word	0x08019fbc
 8016370:	2400a52e 	.word	0x2400a52e
 8016374:	0801a39c 	.word	0x0801a39c

08016378 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016378:	b480      	push	{r7}
 801637a:	b085      	sub	sp, #20
 801637c:	af00      	add	r7, sp, #0
 801637e:	6078      	str	r0, [r7, #4]
 8016380:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	f1b3 3fff 	cmp.w	r3, #4294967295
 801638c:	d002      	beq.n	8016394 <ip4_addr_isbroadcast_u32+0x1c>
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d101      	bne.n	8016398 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016394:	2301      	movs	r3, #1
 8016396:	e02a      	b.n	80163ee <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016398:	683b      	ldr	r3, [r7, #0]
 801639a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801639e:	f003 0302 	and.w	r3, r3, #2
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d101      	bne.n	80163aa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80163a6:	2300      	movs	r3, #0
 80163a8:	e021      	b.n	80163ee <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80163aa:	683b      	ldr	r3, [r7, #0]
 80163ac:	3304      	adds	r3, #4
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	687a      	ldr	r2, [r7, #4]
 80163b2:	429a      	cmp	r2, r3
 80163b4:	d101      	bne.n	80163ba <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80163b6:	2300      	movs	r3, #0
 80163b8:	e019      	b.n	80163ee <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80163ba:	68fa      	ldr	r2, [r7, #12]
 80163bc:	683b      	ldr	r3, [r7, #0]
 80163be:	3304      	adds	r3, #4
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	405a      	eors	r2, r3
 80163c4:	683b      	ldr	r3, [r7, #0]
 80163c6:	3308      	adds	r3, #8
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	4013      	ands	r3, r2
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d10d      	bne.n	80163ec <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80163d0:	683b      	ldr	r3, [r7, #0]
 80163d2:	3308      	adds	r3, #8
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	43da      	mvns	r2, r3
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80163dc:	683b      	ldr	r3, [r7, #0]
 80163de:	3308      	adds	r3, #8
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80163e4:	429a      	cmp	r2, r3
 80163e6:	d101      	bne.n	80163ec <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80163e8:	2301      	movs	r3, #1
 80163ea:	e000      	b.n	80163ee <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80163ec:	2300      	movs	r3, #0
  }
}
 80163ee:	4618      	mov	r0, r3
 80163f0:	3714      	adds	r7, #20
 80163f2:	46bd      	mov	sp, r7
 80163f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163f8:	4770      	bx	lr
	...

080163fc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80163fc:	b580      	push	{r7, lr}
 80163fe:	b084      	sub	sp, #16
 8016400:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016402:	2300      	movs	r3, #0
 8016404:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016406:	4b12      	ldr	r3, [pc, #72]	; (8016450 <ip_reass_tmr+0x54>)
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801640c:	e018      	b.n	8016440 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	7fdb      	ldrb	r3, [r3, #31]
 8016412:	2b00      	cmp	r3, #0
 8016414:	d00b      	beq.n	801642e <ip_reass_tmr+0x32>
      r->timer--;
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	7fdb      	ldrb	r3, [r3, #31]
 801641a:	3b01      	subs	r3, #1
 801641c:	b2da      	uxtb	r2, r3
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	60fb      	str	r3, [r7, #12]
 801642c:	e008      	b.n	8016440 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016438:	68b9      	ldr	r1, [r7, #8]
 801643a:	6878      	ldr	r0, [r7, #4]
 801643c:	f000 f80a 	bl	8016454 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	2b00      	cmp	r3, #0
 8016444:	d1e3      	bne.n	801640e <ip_reass_tmr+0x12>
     }
   }
}
 8016446:	bf00      	nop
 8016448:	3710      	adds	r7, #16
 801644a:	46bd      	mov	sp, r7
 801644c:	bd80      	pop	{r7, pc}
 801644e:	bf00      	nop
 8016450:	2400a530 	.word	0x2400a530

08016454 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016454:	b580      	push	{r7, lr}
 8016456:	b088      	sub	sp, #32
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
 801645c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801645e:	2300      	movs	r3, #0
 8016460:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016462:	683a      	ldr	r2, [r7, #0]
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	429a      	cmp	r2, r3
 8016468:	d105      	bne.n	8016476 <ip_reass_free_complete_datagram+0x22>
 801646a:	4b45      	ldr	r3, [pc, #276]	; (8016580 <ip_reass_free_complete_datagram+0x12c>)
 801646c:	22ab      	movs	r2, #171	; 0xab
 801646e:	4945      	ldr	r1, [pc, #276]	; (8016584 <ip_reass_free_complete_datagram+0x130>)
 8016470:	4845      	ldr	r0, [pc, #276]	; (8016588 <ip_reass_free_complete_datagram+0x134>)
 8016472:	f000 ffdd 	bl	8017430 <iprintf>
  if (prev != NULL) {
 8016476:	683b      	ldr	r3, [r7, #0]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d00a      	beq.n	8016492 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801647c:	683b      	ldr	r3, [r7, #0]
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	687a      	ldr	r2, [r7, #4]
 8016482:	429a      	cmp	r2, r3
 8016484:	d005      	beq.n	8016492 <ip_reass_free_complete_datagram+0x3e>
 8016486:	4b3e      	ldr	r3, [pc, #248]	; (8016580 <ip_reass_free_complete_datagram+0x12c>)
 8016488:	22ad      	movs	r2, #173	; 0xad
 801648a:	4940      	ldr	r1, [pc, #256]	; (801658c <ip_reass_free_complete_datagram+0x138>)
 801648c:	483e      	ldr	r0, [pc, #248]	; (8016588 <ip_reass_free_complete_datagram+0x134>)
 801648e:	f000 ffcf 	bl	8017430 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	685b      	ldr	r3, [r3, #4]
 8016496:	685b      	ldr	r3, [r3, #4]
 8016498:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801649a:	697b      	ldr	r3, [r7, #20]
 801649c:	889b      	ldrh	r3, [r3, #4]
 801649e:	b29b      	uxth	r3, r3
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d12a      	bne.n	80164fa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	685b      	ldr	r3, [r3, #4]
 80164a8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80164aa:	697b      	ldr	r3, [r7, #20]
 80164ac:	681a      	ldr	r2, [r3, #0]
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80164b2:	69bb      	ldr	r3, [r7, #24]
 80164b4:	6858      	ldr	r0, [r3, #4]
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	3308      	adds	r3, #8
 80164ba:	2214      	movs	r2, #20
 80164bc:	4619      	mov	r1, r3
 80164be:	f000 ffa4 	bl	801740a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80164c2:	2101      	movs	r1, #1
 80164c4:	69b8      	ldr	r0, [r7, #24]
 80164c6:	f7ff fc5b 	bl	8015d80 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80164ca:	69b8      	ldr	r0, [r7, #24]
 80164cc:	f7f9 fbdc 	bl	800fc88 <pbuf_clen>
 80164d0:	4603      	mov	r3, r0
 80164d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80164d4:	8bfa      	ldrh	r2, [r7, #30]
 80164d6:	8a7b      	ldrh	r3, [r7, #18]
 80164d8:	4413      	add	r3, r2
 80164da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80164de:	db05      	blt.n	80164ec <ip_reass_free_complete_datagram+0x98>
 80164e0:	4b27      	ldr	r3, [pc, #156]	; (8016580 <ip_reass_free_complete_datagram+0x12c>)
 80164e2:	22bc      	movs	r2, #188	; 0xbc
 80164e4:	492a      	ldr	r1, [pc, #168]	; (8016590 <ip_reass_free_complete_datagram+0x13c>)
 80164e6:	4828      	ldr	r0, [pc, #160]	; (8016588 <ip_reass_free_complete_datagram+0x134>)
 80164e8:	f000 ffa2 	bl	8017430 <iprintf>
    pbufs_freed += clen;
 80164ec:	8bfa      	ldrh	r2, [r7, #30]
 80164ee:	8a7b      	ldrh	r3, [r7, #18]
 80164f0:	4413      	add	r3, r2
 80164f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80164f4:	69b8      	ldr	r0, [r7, #24]
 80164f6:	f7f9 fb2d 	bl	800fb54 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	685b      	ldr	r3, [r3, #4]
 80164fe:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016500:	e01f      	b.n	8016542 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016502:	69bb      	ldr	r3, [r7, #24]
 8016504:	685b      	ldr	r3, [r3, #4]
 8016506:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016508:	69bb      	ldr	r3, [r7, #24]
 801650a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801650c:	697b      	ldr	r3, [r7, #20]
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016512:	68f8      	ldr	r0, [r7, #12]
 8016514:	f7f9 fbb8 	bl	800fc88 <pbuf_clen>
 8016518:	4603      	mov	r3, r0
 801651a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801651c:	8bfa      	ldrh	r2, [r7, #30]
 801651e:	8a7b      	ldrh	r3, [r7, #18]
 8016520:	4413      	add	r3, r2
 8016522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016526:	db05      	blt.n	8016534 <ip_reass_free_complete_datagram+0xe0>
 8016528:	4b15      	ldr	r3, [pc, #84]	; (8016580 <ip_reass_free_complete_datagram+0x12c>)
 801652a:	22cc      	movs	r2, #204	; 0xcc
 801652c:	4918      	ldr	r1, [pc, #96]	; (8016590 <ip_reass_free_complete_datagram+0x13c>)
 801652e:	4816      	ldr	r0, [pc, #88]	; (8016588 <ip_reass_free_complete_datagram+0x134>)
 8016530:	f000 ff7e 	bl	8017430 <iprintf>
    pbufs_freed += clen;
 8016534:	8bfa      	ldrh	r2, [r7, #30]
 8016536:	8a7b      	ldrh	r3, [r7, #18]
 8016538:	4413      	add	r3, r2
 801653a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801653c:	68f8      	ldr	r0, [r7, #12]
 801653e:	f7f9 fb09 	bl	800fb54 <pbuf_free>
  while (p != NULL) {
 8016542:	69bb      	ldr	r3, [r7, #24]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d1dc      	bne.n	8016502 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016548:	6839      	ldr	r1, [r7, #0]
 801654a:	6878      	ldr	r0, [r7, #4]
 801654c:	f000 f8c2 	bl	80166d4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8016550:	4b10      	ldr	r3, [pc, #64]	; (8016594 <ip_reass_free_complete_datagram+0x140>)
 8016552:	881b      	ldrh	r3, [r3, #0]
 8016554:	8bfa      	ldrh	r2, [r7, #30]
 8016556:	429a      	cmp	r2, r3
 8016558:	d905      	bls.n	8016566 <ip_reass_free_complete_datagram+0x112>
 801655a:	4b09      	ldr	r3, [pc, #36]	; (8016580 <ip_reass_free_complete_datagram+0x12c>)
 801655c:	22d2      	movs	r2, #210	; 0xd2
 801655e:	490e      	ldr	r1, [pc, #56]	; (8016598 <ip_reass_free_complete_datagram+0x144>)
 8016560:	4809      	ldr	r0, [pc, #36]	; (8016588 <ip_reass_free_complete_datagram+0x134>)
 8016562:	f000 ff65 	bl	8017430 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8016566:	4b0b      	ldr	r3, [pc, #44]	; (8016594 <ip_reass_free_complete_datagram+0x140>)
 8016568:	881a      	ldrh	r2, [r3, #0]
 801656a:	8bfb      	ldrh	r3, [r7, #30]
 801656c:	1ad3      	subs	r3, r2, r3
 801656e:	b29a      	uxth	r2, r3
 8016570:	4b08      	ldr	r3, [pc, #32]	; (8016594 <ip_reass_free_complete_datagram+0x140>)
 8016572:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016574:	8bfb      	ldrh	r3, [r7, #30]
}
 8016576:	4618      	mov	r0, r3
 8016578:	3720      	adds	r7, #32
 801657a:	46bd      	mov	sp, r7
 801657c:	bd80      	pop	{r7, pc}
 801657e:	bf00      	nop
 8016580:	08019fec 	.word	0x08019fec
 8016584:	0801a028 	.word	0x0801a028
 8016588:	0801a034 	.word	0x0801a034
 801658c:	0801a05c 	.word	0x0801a05c
 8016590:	0801a070 	.word	0x0801a070
 8016594:	2400a534 	.word	0x2400a534
 8016598:	0801a090 	.word	0x0801a090

0801659c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801659c:	b580      	push	{r7, lr}
 801659e:	b08a      	sub	sp, #40	; 0x28
 80165a0:	af00      	add	r7, sp, #0
 80165a2:	6078      	str	r0, [r7, #4]
 80165a4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80165a6:	2300      	movs	r3, #0
 80165a8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80165aa:	2300      	movs	r3, #0
 80165ac:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80165ae:	2300      	movs	r3, #0
 80165b0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80165b2:	2300      	movs	r3, #0
 80165b4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80165b6:	2300      	movs	r3, #0
 80165b8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80165ba:	4b28      	ldr	r3, [pc, #160]	; (801665c <ip_reass_remove_oldest_datagram+0xc0>)
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80165c0:	e030      	b.n	8016624 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80165c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165c4:	695a      	ldr	r2, [r3, #20]
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	68db      	ldr	r3, [r3, #12]
 80165ca:	429a      	cmp	r2, r3
 80165cc:	d10c      	bne.n	80165e8 <ip_reass_remove_oldest_datagram+0x4c>
 80165ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165d0:	699a      	ldr	r2, [r3, #24]
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	691b      	ldr	r3, [r3, #16]
 80165d6:	429a      	cmp	r2, r3
 80165d8:	d106      	bne.n	80165e8 <ip_reass_remove_oldest_datagram+0x4c>
 80165da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165dc:	899a      	ldrh	r2, [r3, #12]
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	889b      	ldrh	r3, [r3, #4]
 80165e2:	b29b      	uxth	r3, r3
 80165e4:	429a      	cmp	r2, r3
 80165e6:	d014      	beq.n	8016612 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80165e8:	693b      	ldr	r3, [r7, #16]
 80165ea:	3301      	adds	r3, #1
 80165ec:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80165ee:	6a3b      	ldr	r3, [r7, #32]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d104      	bne.n	80165fe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80165f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165f6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80165f8:	69fb      	ldr	r3, [r7, #28]
 80165fa:	61bb      	str	r3, [r7, #24]
 80165fc:	e009      	b.n	8016612 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80165fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016600:	7fda      	ldrb	r2, [r3, #31]
 8016602:	6a3b      	ldr	r3, [r7, #32]
 8016604:	7fdb      	ldrb	r3, [r3, #31]
 8016606:	429a      	cmp	r2, r3
 8016608:	d803      	bhi.n	8016612 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801660c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801660e:	69fb      	ldr	r3, [r7, #28]
 8016610:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d001      	beq.n	801661e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801661c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016626:	2b00      	cmp	r3, #0
 8016628:	d1cb      	bne.n	80165c2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801662a:	6a3b      	ldr	r3, [r7, #32]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d008      	beq.n	8016642 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016630:	69b9      	ldr	r1, [r7, #24]
 8016632:	6a38      	ldr	r0, [r7, #32]
 8016634:	f7ff ff0e 	bl	8016454 <ip_reass_free_complete_datagram>
 8016638:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801663a:	697a      	ldr	r2, [r7, #20]
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	4413      	add	r3, r2
 8016640:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016642:	697a      	ldr	r2, [r7, #20]
 8016644:	683b      	ldr	r3, [r7, #0]
 8016646:	429a      	cmp	r2, r3
 8016648:	da02      	bge.n	8016650 <ip_reass_remove_oldest_datagram+0xb4>
 801664a:	693b      	ldr	r3, [r7, #16]
 801664c:	2b01      	cmp	r3, #1
 801664e:	dcac      	bgt.n	80165aa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016650:	697b      	ldr	r3, [r7, #20]
}
 8016652:	4618      	mov	r0, r3
 8016654:	3728      	adds	r7, #40	; 0x28
 8016656:	46bd      	mov	sp, r7
 8016658:	bd80      	pop	{r7, pc}
 801665a:	bf00      	nop
 801665c:	2400a530 	.word	0x2400a530

08016660 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016660:	b580      	push	{r7, lr}
 8016662:	b084      	sub	sp, #16
 8016664:	af00      	add	r7, sp, #0
 8016666:	6078      	str	r0, [r7, #4]
 8016668:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801666a:	2004      	movs	r0, #4
 801666c:	f7f8 fc64 	bl	800ef38 <memp_malloc>
 8016670:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	2b00      	cmp	r3, #0
 8016676:	d110      	bne.n	801669a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016678:	6839      	ldr	r1, [r7, #0]
 801667a:	6878      	ldr	r0, [r7, #4]
 801667c:	f7ff ff8e 	bl	801659c <ip_reass_remove_oldest_datagram>
 8016680:	4602      	mov	r2, r0
 8016682:	683b      	ldr	r3, [r7, #0]
 8016684:	4293      	cmp	r3, r2
 8016686:	dc03      	bgt.n	8016690 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016688:	2004      	movs	r0, #4
 801668a:	f7f8 fc55 	bl	800ef38 <memp_malloc>
 801668e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d101      	bne.n	801669a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8016696:	2300      	movs	r3, #0
 8016698:	e016      	b.n	80166c8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801669a:	2220      	movs	r2, #32
 801669c:	2100      	movs	r1, #0
 801669e:	68f8      	ldr	r0, [r7, #12]
 80166a0:	f000 febe 	bl	8017420 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	2203      	movs	r2, #3
 80166a8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80166aa:	4b09      	ldr	r3, [pc, #36]	; (80166d0 <ip_reass_enqueue_new_datagram+0x70>)
 80166ac:	681a      	ldr	r2, [r3, #0]
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80166b2:	4a07      	ldr	r2, [pc, #28]	; (80166d0 <ip_reass_enqueue_new_datagram+0x70>)
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	3308      	adds	r3, #8
 80166bc:	2214      	movs	r2, #20
 80166be:	6879      	ldr	r1, [r7, #4]
 80166c0:	4618      	mov	r0, r3
 80166c2:	f000 fea2 	bl	801740a <memcpy>
  return ipr;
 80166c6:	68fb      	ldr	r3, [r7, #12]
}
 80166c8:	4618      	mov	r0, r3
 80166ca:	3710      	adds	r7, #16
 80166cc:	46bd      	mov	sp, r7
 80166ce:	bd80      	pop	{r7, pc}
 80166d0:	2400a530 	.word	0x2400a530

080166d4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b082      	sub	sp, #8
 80166d8:	af00      	add	r7, sp, #0
 80166da:	6078      	str	r0, [r7, #4]
 80166dc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80166de:	4b10      	ldr	r3, [pc, #64]	; (8016720 <ip_reass_dequeue_datagram+0x4c>)
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	687a      	ldr	r2, [r7, #4]
 80166e4:	429a      	cmp	r2, r3
 80166e6:	d104      	bne.n	80166f2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	4a0c      	ldr	r2, [pc, #48]	; (8016720 <ip_reass_dequeue_datagram+0x4c>)
 80166ee:	6013      	str	r3, [r2, #0]
 80166f0:	e00d      	b.n	801670e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80166f2:	683b      	ldr	r3, [r7, #0]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d106      	bne.n	8016706 <ip_reass_dequeue_datagram+0x32>
 80166f8:	4b0a      	ldr	r3, [pc, #40]	; (8016724 <ip_reass_dequeue_datagram+0x50>)
 80166fa:	f240 1245 	movw	r2, #325	; 0x145
 80166fe:	490a      	ldr	r1, [pc, #40]	; (8016728 <ip_reass_dequeue_datagram+0x54>)
 8016700:	480a      	ldr	r0, [pc, #40]	; (801672c <ip_reass_dequeue_datagram+0x58>)
 8016702:	f000 fe95 	bl	8017430 <iprintf>
    prev->next = ipr->next;
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	681a      	ldr	r2, [r3, #0]
 801670a:	683b      	ldr	r3, [r7, #0]
 801670c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801670e:	6879      	ldr	r1, [r7, #4]
 8016710:	2004      	movs	r0, #4
 8016712:	f7f8 fc87 	bl	800f024 <memp_free>
}
 8016716:	bf00      	nop
 8016718:	3708      	adds	r7, #8
 801671a:	46bd      	mov	sp, r7
 801671c:	bd80      	pop	{r7, pc}
 801671e:	bf00      	nop
 8016720:	2400a530 	.word	0x2400a530
 8016724:	08019fec 	.word	0x08019fec
 8016728:	0801a0ac 	.word	0x0801a0ac
 801672c:	0801a034 	.word	0x0801a034

08016730 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016730:	b580      	push	{r7, lr}
 8016732:	b08c      	sub	sp, #48	; 0x30
 8016734:	af00      	add	r7, sp, #0
 8016736:	60f8      	str	r0, [r7, #12]
 8016738:	60b9      	str	r1, [r7, #8]
 801673a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 801673c:	2300      	movs	r3, #0
 801673e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016740:	2301      	movs	r3, #1
 8016742:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8016744:	68bb      	ldr	r3, [r7, #8]
 8016746:	685b      	ldr	r3, [r3, #4]
 8016748:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801674a:	69fb      	ldr	r3, [r7, #28]
 801674c:	885b      	ldrh	r3, [r3, #2]
 801674e:	b29b      	uxth	r3, r3
 8016750:	4618      	mov	r0, r3
 8016752:	f7f7 ff2b 	bl	800e5ac <lwip_htons>
 8016756:	4603      	mov	r3, r0
 8016758:	461a      	mov	r2, r3
 801675a:	69fb      	ldr	r3, [r7, #28]
 801675c:	781b      	ldrb	r3, [r3, #0]
 801675e:	b29b      	uxth	r3, r3
 8016760:	f003 030f 	and.w	r3, r3, #15
 8016764:	b29b      	uxth	r3, r3
 8016766:	009b      	lsls	r3, r3, #2
 8016768:	b29b      	uxth	r3, r3
 801676a:	1ad3      	subs	r3, r2, r3
 801676c:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801676e:	69fb      	ldr	r3, [r7, #28]
 8016770:	88db      	ldrh	r3, [r3, #6]
 8016772:	b29b      	uxth	r3, r3
 8016774:	4618      	mov	r0, r3
 8016776:	f7f7 ff19 	bl	800e5ac <lwip_htons>
 801677a:	4603      	mov	r3, r0
 801677c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016780:	b29b      	uxth	r3, r3
 8016782:	00db      	lsls	r3, r3, #3
 8016784:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8016786:	68bb      	ldr	r3, [r7, #8]
 8016788:	685b      	ldr	r3, [r3, #4]
 801678a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801678c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801678e:	2200      	movs	r2, #0
 8016790:	701a      	strb	r2, [r3, #0]
 8016792:	2200      	movs	r2, #0
 8016794:	705a      	strb	r2, [r3, #1]
 8016796:	2200      	movs	r2, #0
 8016798:	709a      	strb	r2, [r3, #2]
 801679a:	2200      	movs	r2, #0
 801679c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167a0:	8b3a      	ldrh	r2, [r7, #24]
 80167a2:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 80167a4:	8b3a      	ldrh	r2, [r7, #24]
 80167a6:	8b7b      	ldrh	r3, [r7, #26]
 80167a8:	4413      	add	r3, r2
 80167aa:	b29a      	uxth	r2, r3
 80167ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167ae:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	685b      	ldr	r3, [r3, #4]
 80167b4:	627b      	str	r3, [r7, #36]	; 0x24
 80167b6:	e061      	b.n	801687c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 80167b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167ba:	685b      	ldr	r3, [r3, #4]
 80167bc:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 80167be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167c0:	889b      	ldrh	r3, [r3, #4]
 80167c2:	b29a      	uxth	r2, r3
 80167c4:	697b      	ldr	r3, [r7, #20]
 80167c6:	889b      	ldrh	r3, [r3, #4]
 80167c8:	b29b      	uxth	r3, r3
 80167ca:	429a      	cmp	r2, r3
 80167cc:	d232      	bcs.n	8016834 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80167ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80167d2:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80167d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d01f      	beq.n	801681a <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80167da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167dc:	889b      	ldrh	r3, [r3, #4]
 80167de:	b29a      	uxth	r2, r3
 80167e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167e2:	88db      	ldrh	r3, [r3, #6]
 80167e4:	b29b      	uxth	r3, r3
 80167e6:	429a      	cmp	r2, r3
 80167e8:	f0c0 80e3 	bcc.w	80169b2 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 80167ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167ee:	88db      	ldrh	r3, [r3, #6]
 80167f0:	b29a      	uxth	r2, r3
 80167f2:	697b      	ldr	r3, [r7, #20]
 80167f4:	889b      	ldrh	r3, [r3, #4]
 80167f6:	b29b      	uxth	r3, r3
 80167f8:	429a      	cmp	r2, r3
 80167fa:	f200 80da 	bhi.w	80169b2 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80167fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016800:	68ba      	ldr	r2, [r7, #8]
 8016802:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016806:	88db      	ldrh	r3, [r3, #6]
 8016808:	b29a      	uxth	r2, r3
 801680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801680c:	889b      	ldrh	r3, [r3, #4]
 801680e:	b29b      	uxth	r3, r3
 8016810:	429a      	cmp	r2, r3
 8016812:	d037      	beq.n	8016884 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016814:	2300      	movs	r3, #0
 8016816:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016818:	e034      	b.n	8016884 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 801681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801681c:	88db      	ldrh	r3, [r3, #6]
 801681e:	b29a      	uxth	r2, r3
 8016820:	697b      	ldr	r3, [r7, #20]
 8016822:	889b      	ldrh	r3, [r3, #4]
 8016824:	b29b      	uxth	r3, r3
 8016826:	429a      	cmp	r2, r3
 8016828:	f200 80c5 	bhi.w	80169b6 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	68ba      	ldr	r2, [r7, #8]
 8016830:	605a      	str	r2, [r3, #4]
      break;
 8016832:	e027      	b.n	8016884 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8016834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016836:	889b      	ldrh	r3, [r3, #4]
 8016838:	b29a      	uxth	r2, r3
 801683a:	697b      	ldr	r3, [r7, #20]
 801683c:	889b      	ldrh	r3, [r3, #4]
 801683e:	b29b      	uxth	r3, r3
 8016840:	429a      	cmp	r2, r3
 8016842:	f000 80ba 	beq.w	80169ba <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016848:	889b      	ldrh	r3, [r3, #4]
 801684a:	b29a      	uxth	r2, r3
 801684c:	697b      	ldr	r3, [r7, #20]
 801684e:	88db      	ldrh	r3, [r3, #6]
 8016850:	b29b      	uxth	r3, r3
 8016852:	429a      	cmp	r2, r3
 8016854:	f0c0 80b3 	bcc.w	80169be <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801685a:	2b00      	cmp	r3, #0
 801685c:	d009      	beq.n	8016872 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 801685e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016860:	88db      	ldrh	r3, [r3, #6]
 8016862:	b29a      	uxth	r2, r3
 8016864:	697b      	ldr	r3, [r7, #20]
 8016866:	889b      	ldrh	r3, [r3, #4]
 8016868:	b29b      	uxth	r3, r3
 801686a:	429a      	cmp	r2, r3
 801686c:	d001      	beq.n	8016872 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801686e:	2300      	movs	r3, #0
 8016870:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016872:	697b      	ldr	r3, [r7, #20]
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016878:	697b      	ldr	r3, [r7, #20]
 801687a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801687e:	2b00      	cmp	r3, #0
 8016880:	d19a      	bne.n	80167b8 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8016882:	e000      	b.n	8016886 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8016884:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016888:	2b00      	cmp	r3, #0
 801688a:	d12d      	bne.n	80168e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 801688c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801688e:	2b00      	cmp	r3, #0
 8016890:	d01c      	beq.n	80168cc <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016894:	88db      	ldrh	r3, [r3, #6]
 8016896:	b29a      	uxth	r2, r3
 8016898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801689a:	889b      	ldrh	r3, [r3, #4]
 801689c:	b29b      	uxth	r3, r3
 801689e:	429a      	cmp	r2, r3
 80168a0:	d906      	bls.n	80168b0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 80168a2:	4b51      	ldr	r3, [pc, #324]	; (80169e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80168a4:	f240 12ab 	movw	r2, #427	; 0x1ab
 80168a8:	4950      	ldr	r1, [pc, #320]	; (80169ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80168aa:	4851      	ldr	r0, [pc, #324]	; (80169f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80168ac:	f000 fdc0 	bl	8017430 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80168b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168b2:	68ba      	ldr	r2, [r7, #8]
 80168b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80168b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168b8:	88db      	ldrh	r3, [r3, #6]
 80168ba:	b29a      	uxth	r2, r3
 80168bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168be:	889b      	ldrh	r3, [r3, #4]
 80168c0:	b29b      	uxth	r3, r3
 80168c2:	429a      	cmp	r2, r3
 80168c4:	d010      	beq.n	80168e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 80168c6:	2300      	movs	r3, #0
 80168c8:	623b      	str	r3, [r7, #32]
 80168ca:	e00d      	b.n	80168e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	685b      	ldr	r3, [r3, #4]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d006      	beq.n	80168e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 80168d4:	4b44      	ldr	r3, [pc, #272]	; (80169e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80168d6:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80168da:	4946      	ldr	r1, [pc, #280]	; (80169f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80168dc:	4844      	ldr	r0, [pc, #272]	; (80169f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80168de:	f000 fda7 	bl	8017430 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	68ba      	ldr	r2, [r7, #8]
 80168e6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d105      	bne.n	80168fa <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	7f9b      	ldrb	r3, [r3, #30]
 80168f2:	f003 0301 	and.w	r3, r3, #1
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d059      	beq.n	80169ae <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 80168fa:	6a3b      	ldr	r3, [r7, #32]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d04f      	beq.n	80169a0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	685b      	ldr	r3, [r3, #4]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d006      	beq.n	8016916 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	685b      	ldr	r3, [r3, #4]
 801690c:	685b      	ldr	r3, [r3, #4]
 801690e:	889b      	ldrh	r3, [r3, #4]
 8016910:	b29b      	uxth	r3, r3
 8016912:	2b00      	cmp	r3, #0
 8016914:	d002      	beq.n	801691c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016916:	2300      	movs	r3, #0
 8016918:	623b      	str	r3, [r7, #32]
 801691a:	e041      	b.n	80169a0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801691e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016926:	e012      	b.n	801694e <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8016928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801692a:	685b      	ldr	r3, [r3, #4]
 801692c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016930:	88db      	ldrh	r3, [r3, #6]
 8016932:	b29a      	uxth	r2, r3
 8016934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016936:	889b      	ldrh	r3, [r3, #4]
 8016938:	b29b      	uxth	r3, r3
 801693a:	429a      	cmp	r2, r3
 801693c:	d002      	beq.n	8016944 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 801693e:	2300      	movs	r3, #0
 8016940:	623b      	str	r3, [r7, #32]
            break;
 8016942:	e007      	b.n	8016954 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8016944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016946:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016950:	2b00      	cmp	r3, #0
 8016952:	d1e9      	bne.n	8016928 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016954:	6a3b      	ldr	r3, [r7, #32]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d022      	beq.n	80169a0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	685b      	ldr	r3, [r3, #4]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d106      	bne.n	8016970 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8016962:	4b21      	ldr	r3, [pc, #132]	; (80169e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016964:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8016968:	4923      	ldr	r1, [pc, #140]	; (80169f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801696a:	4821      	ldr	r0, [pc, #132]	; (80169f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801696c:	f000 fd60 	bl	8017430 <iprintf>
          LWIP_ASSERT("sanity check",
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	685b      	ldr	r3, [r3, #4]
 8016974:	685b      	ldr	r3, [r3, #4]
 8016976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016978:	429a      	cmp	r2, r3
 801697a:	d106      	bne.n	801698a <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 801697c:	4b1a      	ldr	r3, [pc, #104]	; (80169e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801697e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8016982:	491d      	ldr	r1, [pc, #116]	; (80169f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016984:	481a      	ldr	r0, [pc, #104]	; (80169f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016986:	f000 fd53 	bl	8017430 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801698a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d006      	beq.n	80169a0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8016992:	4b15      	ldr	r3, [pc, #84]	; (80169e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016994:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8016998:	4918      	ldr	r1, [pc, #96]	; (80169fc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801699a:	4815      	ldr	r0, [pc, #84]	; (80169f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801699c:	f000 fd48 	bl	8017430 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80169a0:	6a3b      	ldr	r3, [r7, #32]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	bf14      	ite	ne
 80169a6:	2301      	movne	r3, #1
 80169a8:	2300      	moveq	r3, #0
 80169aa:	b2db      	uxtb	r3, r3
 80169ac:	e018      	b.n	80169e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80169ae:	2300      	movs	r3, #0
 80169b0:	e016      	b.n	80169e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 80169b2:	bf00      	nop
 80169b4:	e004      	b.n	80169c0 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 80169b6:	bf00      	nop
 80169b8:	e002      	b.n	80169c0 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80169ba:	bf00      	nop
 80169bc:	e000      	b.n	80169c0 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80169be:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80169c0:	68b8      	ldr	r0, [r7, #8]
 80169c2:	f7f9 f961 	bl	800fc88 <pbuf_clen>
 80169c6:	4603      	mov	r3, r0
 80169c8:	461a      	mov	r2, r3
 80169ca:	4b0d      	ldr	r3, [pc, #52]	; (8016a00 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80169cc:	881b      	ldrh	r3, [r3, #0]
 80169ce:	1a9b      	subs	r3, r3, r2
 80169d0:	b29a      	uxth	r2, r3
 80169d2:	4b0b      	ldr	r3, [pc, #44]	; (8016a00 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80169d4:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 80169d6:	68b8      	ldr	r0, [r7, #8]
 80169d8:	f7f9 f8bc 	bl	800fb54 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80169dc:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 80169e0:	4618      	mov	r0, r3
 80169e2:	3730      	adds	r7, #48	; 0x30
 80169e4:	46bd      	mov	sp, r7
 80169e6:	bd80      	pop	{r7, pc}
 80169e8:	08019fec 	.word	0x08019fec
 80169ec:	0801a0c8 	.word	0x0801a0c8
 80169f0:	0801a034 	.word	0x0801a034
 80169f4:	0801a0e8 	.word	0x0801a0e8
 80169f8:	0801a120 	.word	0x0801a120
 80169fc:	0801a130 	.word	0x0801a130
 8016a00:	2400a534 	.word	0x2400a534

08016a04 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b08e      	sub	sp, #56	; 0x38
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	685b      	ldr	r3, [r3, #4]
 8016a10:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8016a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a14:	781b      	ldrb	r3, [r3, #0]
 8016a16:	f003 030f 	and.w	r3, r3, #15
 8016a1a:	009b      	lsls	r3, r3, #2
 8016a1c:	2b14      	cmp	r3, #20
 8016a1e:	f040 8131 	bne.w	8016c84 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8016a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a24:	88db      	ldrh	r3, [r3, #6]
 8016a26:	b29b      	uxth	r3, r3
 8016a28:	4618      	mov	r0, r3
 8016a2a:	f7f7 fdbf 	bl	800e5ac <lwip_htons>
 8016a2e:	4603      	mov	r3, r0
 8016a30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016a34:	b29b      	uxth	r3, r3
 8016a36:	00db      	lsls	r3, r3, #3
 8016a38:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8016a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a3c:	885b      	ldrh	r3, [r3, #2]
 8016a3e:	b29b      	uxth	r3, r3
 8016a40:	4618      	mov	r0, r3
 8016a42:	f7f7 fdb3 	bl	800e5ac <lwip_htons>
 8016a46:	4603      	mov	r3, r0
 8016a48:	461a      	mov	r2, r3
 8016a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a4c:	781b      	ldrb	r3, [r3, #0]
 8016a4e:	b29b      	uxth	r3, r3
 8016a50:	f003 030f 	and.w	r3, r3, #15
 8016a54:	b29b      	uxth	r3, r3
 8016a56:	009b      	lsls	r3, r3, #2
 8016a58:	b29b      	uxth	r3, r3
 8016a5a:	1ad3      	subs	r3, r2, r3
 8016a5c:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016a5e:	6878      	ldr	r0, [r7, #4]
 8016a60:	f7f9 f912 	bl	800fc88 <pbuf_clen>
 8016a64:	4603      	mov	r3, r0
 8016a66:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016a68:	4b8d      	ldr	r3, [pc, #564]	; (8016ca0 <ip4_reass+0x29c>)
 8016a6a:	881b      	ldrh	r3, [r3, #0]
 8016a6c:	461a      	mov	r2, r3
 8016a6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016a70:	4413      	add	r3, r2
 8016a72:	2b0a      	cmp	r3, #10
 8016a74:	dd10      	ble.n	8016a98 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016a76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016a78:	4619      	mov	r1, r3
 8016a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016a7c:	f7ff fd8e 	bl	801659c <ip_reass_remove_oldest_datagram>
 8016a80:	4603      	mov	r3, r0
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	f000 8100 	beq.w	8016c88 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016a88:	4b85      	ldr	r3, [pc, #532]	; (8016ca0 <ip4_reass+0x29c>)
 8016a8a:	881b      	ldrh	r3, [r3, #0]
 8016a8c:	461a      	mov	r2, r3
 8016a8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016a90:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016a92:	2b0a      	cmp	r3, #10
 8016a94:	f300 80f8 	bgt.w	8016c88 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016a98:	4b82      	ldr	r3, [pc, #520]	; (8016ca4 <ip4_reass+0x2a0>)
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8016a9e:	e015      	b.n	8016acc <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aa2:	695a      	ldr	r2, [r3, #20]
 8016aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016aa6:	68db      	ldr	r3, [r3, #12]
 8016aa8:	429a      	cmp	r2, r3
 8016aaa:	d10c      	bne.n	8016ac6 <ip4_reass+0xc2>
 8016aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aae:	699a      	ldr	r2, [r3, #24]
 8016ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ab2:	691b      	ldr	r3, [r3, #16]
 8016ab4:	429a      	cmp	r2, r3
 8016ab6:	d106      	bne.n	8016ac6 <ip4_reass+0xc2>
 8016ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aba:	899a      	ldrh	r2, [r3, #12]
 8016abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016abe:	889b      	ldrh	r3, [r3, #4]
 8016ac0:	b29b      	uxth	r3, r3
 8016ac2:	429a      	cmp	r2, r3
 8016ac4:	d006      	beq.n	8016ad4 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	633b      	str	r3, [r7, #48]	; 0x30
 8016acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d1e6      	bne.n	8016aa0 <ip4_reass+0x9c>
 8016ad2:	e000      	b.n	8016ad6 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016ad4:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d109      	bne.n	8016af0 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016adc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016ade:	4619      	mov	r1, r3
 8016ae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016ae2:	f7ff fdbd 	bl	8016660 <ip_reass_enqueue_new_datagram>
 8016ae6:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d11c      	bne.n	8016b28 <ip4_reass+0x124>
      goto nullreturn;
 8016aee:	e0ce      	b.n	8016c8e <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016af2:	88db      	ldrh	r3, [r3, #6]
 8016af4:	b29b      	uxth	r3, r3
 8016af6:	4618      	mov	r0, r3
 8016af8:	f7f7 fd58 	bl	800e5ac <lwip_htons>
 8016afc:	4603      	mov	r3, r0
 8016afe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d110      	bne.n	8016b28 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b08:	89db      	ldrh	r3, [r3, #14]
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f7f7 fd4e 	bl	800e5ac <lwip_htons>
 8016b10:	4603      	mov	r3, r0
 8016b12:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d006      	beq.n	8016b28 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b1c:	3308      	adds	r3, #8
 8016b1e:	2214      	movs	r2, #20
 8016b20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016b22:	4618      	mov	r0, r3
 8016b24:	f000 fc71 	bl	801740a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b2a:	88db      	ldrh	r3, [r3, #6]
 8016b2c:	b29b      	uxth	r3, r3
 8016b2e:	f003 0320 	and.w	r3, r3, #32
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	bf0c      	ite	eq
 8016b36:	2301      	moveq	r3, #1
 8016b38:	2300      	movne	r3, #0
 8016b3a:	b2db      	uxtb	r3, r3
 8016b3c:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016b3e:	69fb      	ldr	r3, [r7, #28]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d00e      	beq.n	8016b62 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8016b44:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016b46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b48:	4413      	add	r3, r2
 8016b4a:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016b4c:	8b7a      	ldrh	r2, [r7, #26]
 8016b4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016b50:	429a      	cmp	r2, r3
 8016b52:	f0c0 8099 	bcc.w	8016c88 <ip4_reass+0x284>
 8016b56:	8b7b      	ldrh	r3, [r7, #26]
 8016b58:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016b5c:	4293      	cmp	r3, r2
 8016b5e:	f200 8093 	bhi.w	8016c88 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016b62:	69fa      	ldr	r2, [r7, #28]
 8016b64:	6879      	ldr	r1, [r7, #4]
 8016b66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016b68:	f7ff fde2 	bl	8016730 <ip_reass_chain_frag_into_datagram_and_validate>
 8016b6c:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016b6e:	697b      	ldr	r3, [r7, #20]
 8016b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b74:	f000 808a 	beq.w	8016c8c <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016b78:	4b49      	ldr	r3, [pc, #292]	; (8016ca0 <ip4_reass+0x29c>)
 8016b7a:	881a      	ldrh	r2, [r3, #0]
 8016b7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016b7e:	4413      	add	r3, r2
 8016b80:	b29a      	uxth	r2, r3
 8016b82:	4b47      	ldr	r3, [pc, #284]	; (8016ca0 <ip4_reass+0x29c>)
 8016b84:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016b86:	69fb      	ldr	r3, [r7, #28]
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d00d      	beq.n	8016ba8 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8016b8c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016b8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016b90:	4413      	add	r3, r2
 8016b92:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b96:	8a7a      	ldrh	r2, [r7, #18]
 8016b98:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b9c:	7f9b      	ldrb	r3, [r3, #30]
 8016b9e:	f043 0301 	orr.w	r3, r3, #1
 8016ba2:	b2da      	uxtb	r2, r3
 8016ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ba6:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016ba8:	697b      	ldr	r3, [r7, #20]
 8016baa:	2b01      	cmp	r3, #1
 8016bac:	d168      	bne.n	8016c80 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8016bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bb0:	8b9b      	ldrh	r3, [r3, #28]
 8016bb2:	3314      	adds	r3, #20
 8016bb4:	b29a      	uxth	r2, r3
 8016bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bb8:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8016bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bbc:	685b      	ldr	r3, [r3, #4]
 8016bbe:	685b      	ldr	r3, [r3, #4]
 8016bc0:	681b      	ldr	r3, [r3, #0]
 8016bc2:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8016bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bc6:	685b      	ldr	r3, [r3, #4]
 8016bc8:	685b      	ldr	r3, [r3, #4]
 8016bca:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bce:	3308      	adds	r3, #8
 8016bd0:	2214      	movs	r2, #20
 8016bd2:	4619      	mov	r1, r3
 8016bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016bd6:	f000 fc18 	bl	801740a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8016bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bdc:	8b9b      	ldrh	r3, [r3, #28]
 8016bde:	4618      	mov	r0, r3
 8016be0:	f7f7 fce4 	bl	800e5ac <lwip_htons>
 8016be4:	4603      	mov	r3, r0
 8016be6:	461a      	mov	r2, r3
 8016be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bea:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bee:	2200      	movs	r2, #0
 8016bf0:	719a      	strb	r2, [r3, #6]
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	729a      	strb	r2, [r3, #10]
 8016bfc:	2200      	movs	r2, #0
 8016bfe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c02:	685b      	ldr	r3, [r3, #4]
 8016c04:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016c06:	e00e      	b.n	8016c26 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8016c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c0a:	685b      	ldr	r3, [r3, #4]
 8016c0c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8016c0e:	f06f 0113 	mvn.w	r1, #19
 8016c12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016c14:	f7f8 ff7a 	bl	800fb0c <pbuf_header>
      pbuf_cat(p, r);
 8016c18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016c1a:	6878      	ldr	r0, [r7, #4]
 8016c1c:	f7f9 f874 	bl	800fd08 <pbuf_cat>
      r = iprh->next_pbuf;
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d1ed      	bne.n	8016c08 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016c2c:	4b1d      	ldr	r3, [pc, #116]	; (8016ca4 <ip4_reass+0x2a0>)
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c32:	429a      	cmp	r2, r3
 8016c34:	d102      	bne.n	8016c3c <ip4_reass+0x238>
      ipr_prev = NULL;
 8016c36:	2300      	movs	r3, #0
 8016c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016c3a:	e010      	b.n	8016c5e <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016c3c:	4b19      	ldr	r3, [pc, #100]	; (8016ca4 <ip4_reass+0x2a0>)
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016c42:	e007      	b.n	8016c54 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8016c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c4a:	429a      	cmp	r2, r3
 8016c4c:	d006      	beq.n	8016c5c <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d1f4      	bne.n	8016c44 <ip4_reass+0x240>
 8016c5a:	e000      	b.n	8016c5e <ip4_reass+0x25a>
          break;
 8016c5c:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016c5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016c60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016c62:	f7ff fd37 	bl	80166d4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8016c66:	6878      	ldr	r0, [r7, #4]
 8016c68:	f7f9 f80e 	bl	800fc88 <pbuf_clen>
 8016c6c:	4603      	mov	r3, r0
 8016c6e:	461a      	mov	r2, r3
 8016c70:	4b0b      	ldr	r3, [pc, #44]	; (8016ca0 <ip4_reass+0x29c>)
 8016c72:	881b      	ldrh	r3, [r3, #0]
 8016c74:	1a9b      	subs	r3, r3, r2
 8016c76:	b29a      	uxth	r2, r3
 8016c78:	4b09      	ldr	r3, [pc, #36]	; (8016ca0 <ip4_reass+0x29c>)
 8016c7a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	e00a      	b.n	8016c96 <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016c80:	2300      	movs	r3, #0
 8016c82:	e008      	b.n	8016c96 <ip4_reass+0x292>
    goto nullreturn;
 8016c84:	bf00      	nop
 8016c86:	e002      	b.n	8016c8e <ip4_reass+0x28a>

nullreturn:
 8016c88:	bf00      	nop
 8016c8a:	e000      	b.n	8016c8e <ip4_reass+0x28a>
    goto nullreturn;
 8016c8c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016c8e:	6878      	ldr	r0, [r7, #4]
 8016c90:	f7f8 ff60 	bl	800fb54 <pbuf_free>
  return NULL;
 8016c94:	2300      	movs	r3, #0
}
 8016c96:	4618      	mov	r0, r3
 8016c98:	3738      	adds	r7, #56	; 0x38
 8016c9a:	46bd      	mov	sp, r7
 8016c9c:	bd80      	pop	{r7, pc}
 8016c9e:	bf00      	nop
 8016ca0:	2400a534 	.word	0x2400a534
 8016ca4:	2400a530 	.word	0x2400a530

08016ca8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8016cac:	2005      	movs	r0, #5
 8016cae:	f7f8 f943 	bl	800ef38 <memp_malloc>
 8016cb2:	4603      	mov	r3, r0
}
 8016cb4:	4618      	mov	r0, r3
 8016cb6:	bd80      	pop	{r7, pc}

08016cb8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b082      	sub	sp, #8
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d106      	bne.n	8016cd4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016cc6:	4b07      	ldr	r3, [pc, #28]	; (8016ce4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016cc8:	f240 22ae 	movw	r2, #686	; 0x2ae
 8016ccc:	4906      	ldr	r1, [pc, #24]	; (8016ce8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016cce:	4807      	ldr	r0, [pc, #28]	; (8016cec <ip_frag_free_pbuf_custom_ref+0x34>)
 8016cd0:	f000 fbae 	bl	8017430 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016cd4:	6879      	ldr	r1, [r7, #4]
 8016cd6:	2005      	movs	r0, #5
 8016cd8:	f7f8 f9a4 	bl	800f024 <memp_free>
}
 8016cdc:	bf00      	nop
 8016cde:	3708      	adds	r7, #8
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	bd80      	pop	{r7, pc}
 8016ce4:	08019fec 	.word	0x08019fec
 8016ce8:	0801a154 	.word	0x0801a154
 8016cec:	0801a034 	.word	0x0801a034

08016cf0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016cf0:	b580      	push	{r7, lr}
 8016cf2:	b084      	sub	sp, #16
 8016cf4:	af00      	add	r7, sp, #0
 8016cf6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016cfc:	68fb      	ldr	r3, [r7, #12]
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d106      	bne.n	8016d10 <ipfrag_free_pbuf_custom+0x20>
 8016d02:	4b11      	ldr	r3, [pc, #68]	; (8016d48 <ipfrag_free_pbuf_custom+0x58>)
 8016d04:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8016d08:	4910      	ldr	r1, [pc, #64]	; (8016d4c <ipfrag_free_pbuf_custom+0x5c>)
 8016d0a:	4811      	ldr	r0, [pc, #68]	; (8016d50 <ipfrag_free_pbuf_custom+0x60>)
 8016d0c:	f000 fb90 	bl	8017430 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8016d10:	68fa      	ldr	r2, [r7, #12]
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	429a      	cmp	r2, r3
 8016d16:	d006      	beq.n	8016d26 <ipfrag_free_pbuf_custom+0x36>
 8016d18:	4b0b      	ldr	r3, [pc, #44]	; (8016d48 <ipfrag_free_pbuf_custom+0x58>)
 8016d1a:	f240 22b9 	movw	r2, #697	; 0x2b9
 8016d1e:	490d      	ldr	r1, [pc, #52]	; (8016d54 <ipfrag_free_pbuf_custom+0x64>)
 8016d20:	480b      	ldr	r0, [pc, #44]	; (8016d50 <ipfrag_free_pbuf_custom+0x60>)
 8016d22:	f000 fb85 	bl	8017430 <iprintf>
  if (pcr->original != NULL) {
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	695b      	ldr	r3, [r3, #20]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d004      	beq.n	8016d38 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	695b      	ldr	r3, [r3, #20]
 8016d32:	4618      	mov	r0, r3
 8016d34:	f7f8 ff0e 	bl	800fb54 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016d38:	68f8      	ldr	r0, [r7, #12]
 8016d3a:	f7ff ffbd 	bl	8016cb8 <ip_frag_free_pbuf_custom_ref>
}
 8016d3e:	bf00      	nop
 8016d40:	3710      	adds	r7, #16
 8016d42:	46bd      	mov	sp, r7
 8016d44:	bd80      	pop	{r7, pc}
 8016d46:	bf00      	nop
 8016d48:	08019fec 	.word	0x08019fec
 8016d4c:	0801a160 	.word	0x0801a160
 8016d50:	0801a034 	.word	0x0801a034
 8016d54:	0801a16c 	.word	0x0801a16c

08016d58 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b092      	sub	sp, #72	; 0x48
 8016d5c:	af02      	add	r7, sp, #8
 8016d5e:	60f8      	str	r0, [r7, #12]
 8016d60:	60b9      	str	r1, [r7, #8]
 8016d62:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016d64:	2300      	movs	r3, #0
 8016d66:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8016d68:	68bb      	ldr	r3, [r7, #8]
 8016d6a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016d6c:	3b14      	subs	r3, #20
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	da00      	bge.n	8016d74 <ip4_frag+0x1c>
 8016d72:	3307      	adds	r3, #7
 8016d74:	10db      	asrs	r3, r3, #3
 8016d76:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016d78:	2314      	movs	r3, #20
 8016d7a:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	685b      	ldr	r3, [r3, #4]
 8016d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8016d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d84:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8016d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d88:	781b      	ldrb	r3, [r3, #0]
 8016d8a:	f003 030f 	and.w	r3, r3, #15
 8016d8e:	009b      	lsls	r3, r3, #2
 8016d90:	2b14      	cmp	r3, #20
 8016d92:	d009      	beq.n	8016da8 <ip4_frag+0x50>
 8016d94:	4b79      	ldr	r3, [pc, #484]	; (8016f7c <ip4_frag+0x224>)
 8016d96:	f240 22e1 	movw	r2, #737	; 0x2e1
 8016d9a:	4979      	ldr	r1, [pc, #484]	; (8016f80 <ip4_frag+0x228>)
 8016d9c:	4879      	ldr	r0, [pc, #484]	; (8016f84 <ip4_frag+0x22c>)
 8016d9e:	f000 fb47 	bl	8017430 <iprintf>
 8016da2:	f06f 0305 	mvn.w	r3, #5
 8016da6:	e0e5      	b.n	8016f74 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016daa:	88db      	ldrh	r3, [r3, #6]
 8016dac:	b29b      	uxth	r3, r3
 8016dae:	4618      	mov	r0, r3
 8016db0:	f7f7 fbfc 	bl	800e5ac <lwip_htons>
 8016db4:	4603      	mov	r3, r0
 8016db6:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8016db8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016dba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016dbe:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8016dc0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d009      	beq.n	8016dde <ip4_frag+0x86>
 8016dca:	4b6c      	ldr	r3, [pc, #432]	; (8016f7c <ip4_frag+0x224>)
 8016dcc:	f240 22e6 	movw	r2, #742	; 0x2e6
 8016dd0:	496d      	ldr	r1, [pc, #436]	; (8016f88 <ip4_frag+0x230>)
 8016dd2:	486c      	ldr	r0, [pc, #432]	; (8016f84 <ip4_frag+0x22c>)
 8016dd4:	f000 fb2c 	bl	8017430 <iprintf>
 8016dd8:	f06f 0305 	mvn.w	r3, #5
 8016ddc:	e0ca      	b.n	8016f74 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	891b      	ldrh	r3, [r3, #8]
 8016de2:	3b14      	subs	r3, #20
 8016de4:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8016de6:	e0bc      	b.n	8016f62 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8016de8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8016dea:	00da      	lsls	r2, r3, #3
 8016dec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016dee:	4293      	cmp	r3, r2
 8016df0:	bfa8      	it	ge
 8016df2:	4613      	movge	r3, r2
 8016df4:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016df6:	2200      	movs	r2, #0
 8016df8:	2114      	movs	r1, #20
 8016dfa:	2002      	movs	r0, #2
 8016dfc:	f7f8 fb38 	bl	800f470 <pbuf_alloc>
 8016e00:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8016e02:	6a3b      	ldr	r3, [r7, #32]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	f000 80b2 	beq.w	8016f6e <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	895b      	ldrh	r3, [r3, #10]
 8016e0e:	2b13      	cmp	r3, #19
 8016e10:	d806      	bhi.n	8016e20 <ip4_frag+0xc8>
 8016e12:	4b5a      	ldr	r3, [pc, #360]	; (8016f7c <ip4_frag+0x224>)
 8016e14:	f240 3209 	movw	r2, #777	; 0x309
 8016e18:	495c      	ldr	r1, [pc, #368]	; (8016f8c <ip4_frag+0x234>)
 8016e1a:	485a      	ldr	r0, [pc, #360]	; (8016f84 <ip4_frag+0x22c>)
 8016e1c:	f000 fb08 	bl	8017430 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016e20:	6a3b      	ldr	r3, [r7, #32]
 8016e22:	685b      	ldr	r3, [r3, #4]
 8016e24:	2214      	movs	r2, #20
 8016e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016e28:	4618      	mov	r0, r3
 8016e2a:	f000 faee 	bl	801740a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016e2e:	6a3b      	ldr	r3, [r7, #32]
 8016e30:	685b      	ldr	r3, [r3, #4]
 8016e32:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8016e34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016e36:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8016e38:	e04f      	b.n	8016eda <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	895a      	ldrh	r2, [r3, #10]
 8016e3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016e40:	1ad3      	subs	r3, r2, r3
 8016e42:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016e44:	8b7a      	ldrh	r2, [r7, #26]
 8016e46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016e48:	4293      	cmp	r3, r2
 8016e4a:	bf28      	it	cs
 8016e4c:	4613      	movcs	r3, r2
 8016e4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016e50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d105      	bne.n	8016e62 <ip4_frag+0x10a>
        poff = 0;
 8016e56:	2300      	movs	r3, #0
 8016e58:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	60fb      	str	r3, [r7, #12]
        continue;
 8016e60:	e03b      	b.n	8016eda <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016e62:	f7ff ff21 	bl	8016ca8 <ip_frag_alloc_pbuf_custom_ref>
 8016e66:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8016e68:	697b      	ldr	r3, [r7, #20]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d103      	bne.n	8016e76 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8016e6e:	6a38      	ldr	r0, [r7, #32]
 8016e70:	f7f8 fe70 	bl	800fb54 <pbuf_free>
        goto memerr;
 8016e74:	e07c      	b.n	8016f70 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016e76:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016e7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016e7e:	4413      	add	r3, r2
 8016e80:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8016e82:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016e84:	9201      	str	r2, [sp, #4]
 8016e86:	9300      	str	r3, [sp, #0]
 8016e88:	4603      	mov	r3, r0
 8016e8a:	2202      	movs	r2, #2
 8016e8c:	2004      	movs	r0, #4
 8016e8e:	f7f8 fc83 	bl	800f798 <pbuf_alloced_custom>
 8016e92:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8016e94:	693b      	ldr	r3, [r7, #16]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d106      	bne.n	8016ea8 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016e9a:	6978      	ldr	r0, [r7, #20]
 8016e9c:	f7ff ff0c 	bl	8016cb8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016ea0:	6a38      	ldr	r0, [r7, #32]
 8016ea2:	f7f8 fe57 	bl	800fb54 <pbuf_free>
        goto memerr;
 8016ea6:	e063      	b.n	8016f70 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8016ea8:	68f8      	ldr	r0, [r7, #12]
 8016eaa:	f7f8 ff05 	bl	800fcb8 <pbuf_ref>
      pcr->original = p;
 8016eae:	697b      	ldr	r3, [r7, #20]
 8016eb0:	68fa      	ldr	r2, [r7, #12]
 8016eb2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016eb4:	697b      	ldr	r3, [r7, #20]
 8016eb6:	4a36      	ldr	r2, [pc, #216]	; (8016f90 <ip4_frag+0x238>)
 8016eb8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016eba:	6939      	ldr	r1, [r7, #16]
 8016ebc:	6a38      	ldr	r0, [r7, #32]
 8016ebe:	f7f8 ff23 	bl	800fd08 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8016ec2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8016ec4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016ec6:	1ad3      	subs	r3, r2, r3
 8016ec8:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8016eca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d004      	beq.n	8016eda <ip4_frag+0x182>
        poff = 0;
 8016ed0:	2300      	movs	r3, #0
 8016ed2:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8016ed4:	68fb      	ldr	r3, [r7, #12]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016eda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d1ac      	bne.n	8016e3a <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8016ee0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016ee2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016ee4:	4413      	add	r3, r2
 8016ee6:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016ee8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016eea:	68bb      	ldr	r3, [r7, #8]
 8016eec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8016eee:	3b14      	subs	r3, #20
 8016ef0:	429a      	cmp	r2, r3
 8016ef2:	bfd4      	ite	le
 8016ef4:	2301      	movle	r3, #1
 8016ef6:	2300      	movgt	r3, #0
 8016ef8:	b2db      	uxtb	r3, r3
 8016efa:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016efc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016efe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016f02:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8016f04:	69fb      	ldr	r3, [r7, #28]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d103      	bne.n	8016f12 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8016f0a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016f0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016f10:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016f12:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016f14:	4618      	mov	r0, r3
 8016f16:	f7f7 fb49 	bl	800e5ac <lwip_htons>
 8016f1a:	4603      	mov	r3, r0
 8016f1c:	461a      	mov	r2, r3
 8016f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f20:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8016f22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016f24:	3314      	adds	r3, #20
 8016f26:	b29b      	uxth	r3, r3
 8016f28:	4618      	mov	r0, r3
 8016f2a:	f7f7 fb3f 	bl	800e5ac <lwip_htons>
 8016f2e:	4603      	mov	r3, r0
 8016f30:	461a      	mov	r2, r3
 8016f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f34:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f38:	2200      	movs	r2, #0
 8016f3a:	729a      	strb	r2, [r3, #10]
 8016f3c:	2200      	movs	r2, #0
 8016f3e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016f40:	68bb      	ldr	r3, [r7, #8]
 8016f42:	695b      	ldr	r3, [r3, #20]
 8016f44:	687a      	ldr	r2, [r7, #4]
 8016f46:	6a39      	ldr	r1, [r7, #32]
 8016f48:	68b8      	ldr	r0, [r7, #8]
 8016f4a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016f4c:	6a38      	ldr	r0, [r7, #32]
 8016f4e:	f7f8 fe01 	bl	800fb54 <pbuf_free>
    left -= fragsize;
 8016f52:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016f54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016f56:	1ad3      	subs	r3, r2, r3
 8016f58:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8016f5a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8016f5c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8016f5e:	4413      	add	r3, r2
 8016f60:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8016f62:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	f47f af3f 	bne.w	8016de8 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	e002      	b.n	8016f74 <ip4_frag+0x21c>
      goto memerr;
 8016f6e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016f74:	4618      	mov	r0, r3
 8016f76:	3740      	adds	r7, #64	; 0x40
 8016f78:	46bd      	mov	sp, r7
 8016f7a:	bd80      	pop	{r7, pc}
 8016f7c:	08019fec 	.word	0x08019fec
 8016f80:	0801a178 	.word	0x0801a178
 8016f84:	0801a034 	.word	0x0801a034
 8016f88:	0801a1a0 	.word	0x0801a1a0
 8016f8c:	0801a1bc 	.word	0x0801a1bc
 8016f90:	08016cf1 	.word	0x08016cf1

08016f94 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016f94:	b580      	push	{r7, lr}
 8016f96:	b086      	sub	sp, #24
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	6078      	str	r0, [r7, #4]
 8016f9c:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8016f9e:	230e      	movs	r3, #14
 8016fa0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	895b      	ldrh	r3, [r3, #10]
 8016fa6:	2b0e      	cmp	r3, #14
 8016fa8:	d977      	bls.n	801709a <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	685b      	ldr	r3, [r3, #4]
 8016fae:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016fb0:	693b      	ldr	r3, [r7, #16]
 8016fb2:	7b1a      	ldrb	r2, [r3, #12]
 8016fb4:	7b5b      	ldrb	r3, [r3, #13]
 8016fb6:	021b      	lsls	r3, r3, #8
 8016fb8:	4313      	orrs	r3, r2
 8016fba:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016fbc:	693b      	ldr	r3, [r7, #16]
 8016fbe:	781b      	ldrb	r3, [r3, #0]
 8016fc0:	f003 0301 	and.w	r3, r3, #1
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d023      	beq.n	8017010 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016fc8:	693b      	ldr	r3, [r7, #16]
 8016fca:	781b      	ldrb	r3, [r3, #0]
 8016fcc:	2b01      	cmp	r3, #1
 8016fce:	d10f      	bne.n	8016ff0 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016fd0:	693b      	ldr	r3, [r7, #16]
 8016fd2:	785b      	ldrb	r3, [r3, #1]
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d11b      	bne.n	8017010 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016fd8:	693b      	ldr	r3, [r7, #16]
 8016fda:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016fdc:	2b5e      	cmp	r3, #94	; 0x5e
 8016fde:	d117      	bne.n	8017010 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	7b5b      	ldrb	r3, [r3, #13]
 8016fe4:	f043 0310 	orr.w	r3, r3, #16
 8016fe8:	b2da      	uxtb	r2, r3
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	735a      	strb	r2, [r3, #13]
 8016fee:	e00f      	b.n	8017010 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016ff0:	693b      	ldr	r3, [r7, #16]
 8016ff2:	2206      	movs	r2, #6
 8016ff4:	4930      	ldr	r1, [pc, #192]	; (80170b8 <ethernet_input+0x124>)
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	f000 f9f8 	bl	80173ec <memcmp>
 8016ffc:	4603      	mov	r3, r0
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d106      	bne.n	8017010 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	7b5b      	ldrb	r3, [r3, #13]
 8017006:	f043 0308 	orr.w	r3, r3, #8
 801700a:	b2da      	uxtb	r2, r3
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017010:	89fb      	ldrh	r3, [r7, #14]
 8017012:	2b08      	cmp	r3, #8
 8017014:	d003      	beq.n	801701e <ethernet_input+0x8a>
 8017016:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801701a:	d01e      	beq.n	801705a <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801701c:	e044      	b.n	80170a8 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801701e:	683b      	ldr	r3, [r7, #0]
 8017020:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017024:	f003 0308 	and.w	r3, r3, #8
 8017028:	2b00      	cmp	r3, #0
 801702a:	d038      	beq.n	801709e <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	895b      	ldrh	r3, [r3, #10]
 8017030:	461a      	mov	r2, r3
 8017032:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017036:	429a      	cmp	r2, r3
 8017038:	db33      	blt.n	80170a2 <ethernet_input+0x10e>
 801703a:	8afb      	ldrh	r3, [r7, #22]
 801703c:	425b      	negs	r3, r3
 801703e:	b29b      	uxth	r3, r3
 8017040:	b21b      	sxth	r3, r3
 8017042:	4619      	mov	r1, r3
 8017044:	6878      	ldr	r0, [r7, #4]
 8017046:	f7f8 fd61 	bl	800fb0c <pbuf_header>
 801704a:	4603      	mov	r3, r0
 801704c:	2b00      	cmp	r3, #0
 801704e:	d128      	bne.n	80170a2 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8017050:	6839      	ldr	r1, [r7, #0]
 8017052:	6878      	ldr	r0, [r7, #4]
 8017054:	f7fe ff80 	bl	8015f58 <ip4_input>
      break;
 8017058:	e01d      	b.n	8017096 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801705a:	683b      	ldr	r3, [r7, #0]
 801705c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017060:	f003 0308 	and.w	r3, r3, #8
 8017064:	2b00      	cmp	r3, #0
 8017066:	d01e      	beq.n	80170a6 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	895b      	ldrh	r3, [r3, #10]
 801706c:	461a      	mov	r2, r3
 801706e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017072:	429a      	cmp	r2, r3
 8017074:	db15      	blt.n	80170a2 <ethernet_input+0x10e>
 8017076:	8afb      	ldrh	r3, [r7, #22]
 8017078:	425b      	negs	r3, r3
 801707a:	b29b      	uxth	r3, r3
 801707c:	b21b      	sxth	r3, r3
 801707e:	4619      	mov	r1, r3
 8017080:	6878      	ldr	r0, [r7, #4]
 8017082:	f7f8 fd43 	bl	800fb0c <pbuf_header>
 8017086:	4603      	mov	r3, r0
 8017088:	2b00      	cmp	r3, #0
 801708a:	d10a      	bne.n	80170a2 <ethernet_input+0x10e>
        etharp_input(p, netif);
 801708c:	6839      	ldr	r1, [r7, #0]
 801708e:	6878      	ldr	r0, [r7, #4]
 8017090:	f7fe f928 	bl	80152e4 <etharp_input>
      break;
 8017094:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017096:	2300      	movs	r3, #0
 8017098:	e00a      	b.n	80170b0 <ethernet_input+0x11c>
    goto free_and_return;
 801709a:	bf00      	nop
 801709c:	e004      	b.n	80170a8 <ethernet_input+0x114>
        goto free_and_return;
 801709e:	bf00      	nop
 80170a0:	e002      	b.n	80170a8 <ethernet_input+0x114>

free_and_return:
 80170a2:	bf00      	nop
 80170a4:	e000      	b.n	80170a8 <ethernet_input+0x114>
        goto free_and_return;
 80170a6:	bf00      	nop
  pbuf_free(p);
 80170a8:	6878      	ldr	r0, [r7, #4]
 80170aa:	f7f8 fd53 	bl	800fb54 <pbuf_free>
  return ERR_OK;
 80170ae:	2300      	movs	r3, #0
}
 80170b0:	4618      	mov	r0, r3
 80170b2:	3718      	adds	r7, #24
 80170b4:	46bd      	mov	sp, r7
 80170b6:	bd80      	pop	{r7, pc}
 80170b8:	0801a3a0 	.word	0x0801a3a0

080170bc <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 80170bc:	b580      	push	{r7, lr}
 80170be:	b086      	sub	sp, #24
 80170c0:	af00      	add	r7, sp, #0
 80170c2:	60f8      	str	r0, [r7, #12]
 80170c4:	60b9      	str	r1, [r7, #8]
 80170c6:	607a      	str	r2, [r7, #4]
 80170c8:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80170ca:	8c3b      	ldrh	r3, [r7, #32]
 80170cc:	4618      	mov	r0, r3
 80170ce:	f7f7 fa6d 	bl	800e5ac <lwip_htons>
 80170d2:	4603      	mov	r3, r0
 80170d4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80170d6:	210e      	movs	r1, #14
 80170d8:	68b8      	ldr	r0, [r7, #8]
 80170da:	f7f8 fd17 	bl	800fb0c <pbuf_header>
 80170de:	4603      	mov	r3, r0
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d125      	bne.n	8017130 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 80170e4:	68bb      	ldr	r3, [r7, #8]
 80170e6:	685b      	ldr	r3, [r3, #4]
 80170e8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80170ea:	693b      	ldr	r3, [r7, #16]
 80170ec:	8afa      	ldrh	r2, [r7, #22]
 80170ee:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 80170f0:	693b      	ldr	r3, [r7, #16]
 80170f2:	2206      	movs	r2, #6
 80170f4:	6839      	ldr	r1, [r7, #0]
 80170f6:	4618      	mov	r0, r3
 80170f8:	f000 f987 	bl	801740a <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 80170fc:	693b      	ldr	r3, [r7, #16]
 80170fe:	3306      	adds	r3, #6
 8017100:	2206      	movs	r2, #6
 8017102:	6879      	ldr	r1, [r7, #4]
 8017104:	4618      	mov	r0, r3
 8017106:	f000 f980 	bl	801740a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017110:	2b06      	cmp	r3, #6
 8017112:	d006      	beq.n	8017122 <ethernet_output+0x66>
 8017114:	4b0a      	ldr	r3, [pc, #40]	; (8017140 <ethernet_output+0x84>)
 8017116:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801711a:	490a      	ldr	r1, [pc, #40]	; (8017144 <ethernet_output+0x88>)
 801711c:	480a      	ldr	r0, [pc, #40]	; (8017148 <ethernet_output+0x8c>)
 801711e:	f000 f987 	bl	8017430 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	699b      	ldr	r3, [r3, #24]
 8017126:	68b9      	ldr	r1, [r7, #8]
 8017128:	68f8      	ldr	r0, [r7, #12]
 801712a:	4798      	blx	r3
 801712c:	4603      	mov	r3, r0
 801712e:	e002      	b.n	8017136 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017130:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017132:	f06f 0301 	mvn.w	r3, #1
}
 8017136:	4618      	mov	r0, r3
 8017138:	3718      	adds	r7, #24
 801713a:	46bd      	mov	sp, r7
 801713c:	bd80      	pop	{r7, pc}
 801713e:	bf00      	nop
 8017140:	0801a1dc 	.word	0x0801a1dc
 8017144:	0801a214 	.word	0x0801a214
 8017148:	0801a248 	.word	0x0801a248

0801714c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801714c:	b580      	push	{r7, lr}
 801714e:	b086      	sub	sp, #24
 8017150:	af00      	add	r7, sp, #0
 8017152:	6078      	str	r0, [r7, #4]
 8017154:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017156:	683b      	ldr	r3, [r7, #0]
 8017158:	60bb      	str	r3, [r7, #8]
 801715a:	2304      	movs	r3, #4
 801715c:	60fb      	str	r3, [r7, #12]
 801715e:	2300      	movs	r3, #0
 8017160:	613b      	str	r3, [r7, #16]
 8017162:	2300      	movs	r3, #0
 8017164:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017166:	f107 0308 	add.w	r3, r7, #8
 801716a:	2100      	movs	r1, #0
 801716c:	4618      	mov	r0, r3
 801716e:	f7f3 ff2b 	bl	800afc8 <osMessageCreate>
 8017172:	4602      	mov	r2, r0
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d102      	bne.n	8017186 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017180:	f04f 33ff 	mov.w	r3, #4294967295
 8017184:	e000      	b.n	8017188 <sys_mbox_new+0x3c>

  return ERR_OK;
 8017186:	2300      	movs	r3, #0
}
 8017188:	4618      	mov	r0, r3
 801718a:	3718      	adds	r7, #24
 801718c:	46bd      	mov	sp, r7
 801718e:	bd80      	pop	{r7, pc}

08017190 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8017190:	b580      	push	{r7, lr}
 8017192:	b082      	sub	sp, #8
 8017194:	af00      	add	r7, sp, #0
 8017196:	6078      	str	r0, [r7, #4]
 8017198:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801719a:	bf00      	nop
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	6839      	ldr	r1, [r7, #0]
 80171a2:	f04f 32ff 	mov.w	r2, #4294967295
 80171a6:	4618      	mov	r0, r3
 80171a8:	f7f3 ff38 	bl	800b01c <osMessagePut>
 80171ac:	4603      	mov	r3, r0
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d1f4      	bne.n	801719c <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 80171b2:	bf00      	nop
 80171b4:	3708      	adds	r7, #8
 80171b6:	46bd      	mov	sp, r7
 80171b8:	bd80      	pop	{r7, pc}

080171ba <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80171ba:	b580      	push	{r7, lr}
 80171bc:	b084      	sub	sp, #16
 80171be:	af00      	add	r7, sp, #0
 80171c0:	6078      	str	r0, [r7, #4]
 80171c2:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	681b      	ldr	r3, [r3, #0]
 80171c8:	6839      	ldr	r1, [r7, #0]
 80171ca:	2200      	movs	r2, #0
 80171cc:	4618      	mov	r0, r3
 80171ce:	f7f3 ff25 	bl	800b01c <osMessagePut>
 80171d2:	4603      	mov	r3, r0
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d102      	bne.n	80171de <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80171d8:	2300      	movs	r3, #0
 80171da:	73fb      	strb	r3, [r7, #15]
 80171dc:	e001      	b.n	80171e2 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80171de:	23ff      	movs	r3, #255	; 0xff
 80171e0:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80171e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80171e6:	4618      	mov	r0, r3
 80171e8:	3710      	adds	r7, #16
 80171ea:	46bd      	mov	sp, r7
 80171ec:	bd80      	pop	{r7, pc}

080171ee <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80171ee:	b580      	push	{r7, lr}
 80171f0:	b08c      	sub	sp, #48	; 0x30
 80171f2:	af00      	add	r7, sp, #0
 80171f4:	61f8      	str	r0, [r7, #28]
 80171f6:	61b9      	str	r1, [r7, #24]
 80171f8:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80171fa:	f7f3 fd3f 	bl	800ac7c <osKernelSysTick>
 80171fe:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017200:	697b      	ldr	r3, [r7, #20]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d017      	beq.n	8017236 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017206:	69fb      	ldr	r3, [r7, #28]
 8017208:	6819      	ldr	r1, [r3, #0]
 801720a:	f107 0320 	add.w	r3, r7, #32
 801720e:	697a      	ldr	r2, [r7, #20]
 8017210:	4618      	mov	r0, r3
 8017212:	f7f3 ff43 	bl	800b09c <osMessageGet>

    if(event.status == osEventMessage)
 8017216:	6a3b      	ldr	r3, [r7, #32]
 8017218:	2b10      	cmp	r3, #16
 801721a:	d109      	bne.n	8017230 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801721e:	461a      	mov	r2, r3
 8017220:	69bb      	ldr	r3, [r7, #24]
 8017222:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017224:	f7f3 fd2a 	bl	800ac7c <osKernelSysTick>
 8017228:	4602      	mov	r2, r0
 801722a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801722c:	1ad3      	subs	r3, r2, r3
 801722e:	e019      	b.n	8017264 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017230:	f04f 33ff 	mov.w	r3, #4294967295
 8017234:	e016      	b.n	8017264 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8017236:	69fb      	ldr	r3, [r7, #28]
 8017238:	6819      	ldr	r1, [r3, #0]
 801723a:	463b      	mov	r3, r7
 801723c:	f04f 32ff 	mov.w	r2, #4294967295
 8017240:	4618      	mov	r0, r3
 8017242:	f7f3 ff2b 	bl	800b09c <osMessageGet>
 8017246:	f107 0320 	add.w	r3, r7, #32
 801724a:	463a      	mov	r2, r7
 801724c:	ca07      	ldmia	r2, {r0, r1, r2}
 801724e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017254:	461a      	mov	r2, r3
 8017256:	69bb      	ldr	r3, [r7, #24]
 8017258:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801725a:	f7f3 fd0f 	bl	800ac7c <osKernelSysTick>
 801725e:	4602      	mov	r2, r0
 8017260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017262:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017264:	4618      	mov	r0, r3
 8017266:	3730      	adds	r7, #48	; 0x30
 8017268:	46bd      	mov	sp, r7
 801726a:	bd80      	pop	{r7, pc}

0801726c <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801726c:	b480      	push	{r7}
 801726e:	b083      	sub	sp, #12
 8017270:	af00      	add	r7, sp, #0
 8017272:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	2b00      	cmp	r3, #0
 801727a:	d101      	bne.n	8017280 <sys_mbox_valid+0x14>
    return 0;
 801727c:	2300      	movs	r3, #0
 801727e:	e000      	b.n	8017282 <sys_mbox_valid+0x16>
  else
    return 1;
 8017280:	2301      	movs	r3, #1
}
 8017282:	4618      	mov	r0, r3
 8017284:	370c      	adds	r7, #12
 8017286:	46bd      	mov	sp, r7
 8017288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801728c:	4770      	bx	lr
	...

08017290 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017290:	b580      	push	{r7, lr}
 8017292:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017294:	4803      	ldr	r0, [pc, #12]	; (80172a4 <sys_init+0x14>)
 8017296:	f7f3 fd6d 	bl	800ad74 <osMutexCreate>
 801729a:	4602      	mov	r2, r0
 801729c:	4b02      	ldr	r3, [pc, #8]	; (80172a8 <sys_init+0x18>)
 801729e:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80172a0:	bf00      	nop
 80172a2:	bd80      	pop	{r7, pc}
 80172a4:	0801a3b0 	.word	0x0801a3b0
 80172a8:	2400d910 	.word	0x2400d910

080172ac <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80172ac:	b580      	push	{r7, lr}
 80172ae:	b084      	sub	sp, #16
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80172b4:	2300      	movs	r3, #0
 80172b6:	60bb      	str	r3, [r7, #8]
 80172b8:	2300      	movs	r3, #0
 80172ba:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80172bc:	f107 0308 	add.w	r3, r7, #8
 80172c0:	4618      	mov	r0, r3
 80172c2:	f7f3 fd57 	bl	800ad74 <osMutexCreate>
 80172c6:	4602      	mov	r2, r0
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	681b      	ldr	r3, [r3, #0]
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d102      	bne.n	80172da <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80172d4:	f04f 33ff 	mov.w	r3, #4294967295
 80172d8:	e000      	b.n	80172dc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80172da:	2300      	movs	r3, #0
}
 80172dc:	4618      	mov	r0, r3
 80172de:	3710      	adds	r7, #16
 80172e0:	46bd      	mov	sp, r7
 80172e2:	bd80      	pop	{r7, pc}

080172e4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80172e4:	b580      	push	{r7, lr}
 80172e6:	b082      	sub	sp, #8
 80172e8:	af00      	add	r7, sp, #0
 80172ea:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	f04f 31ff 	mov.w	r1, #4294967295
 80172f4:	4618      	mov	r0, r3
 80172f6:	f7f3 fd55 	bl	800ada4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80172fa:	bf00      	nop
 80172fc:	3708      	adds	r7, #8
 80172fe:	46bd      	mov	sp, r7
 8017300:	bd80      	pop	{r7, pc}

08017302 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017302:	b580      	push	{r7, lr}
 8017304:	b082      	sub	sp, #8
 8017306:	af00      	add	r7, sp, #0
 8017308:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	4618      	mov	r0, r3
 8017310:	f7f3 fd96 	bl	800ae40 <osMutexRelease>
}
 8017314:	bf00      	nop
 8017316:	3708      	adds	r7, #8
 8017318:	46bd      	mov	sp, r7
 801731a:	bd80      	pop	{r7, pc}

0801731c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801731c:	b580      	push	{r7, lr}
 801731e:	b08c      	sub	sp, #48	; 0x30
 8017320:	af00      	add	r7, sp, #0
 8017322:	60f8      	str	r0, [r7, #12]
 8017324:	60b9      	str	r1, [r7, #8]
 8017326:	607a      	str	r2, [r7, #4]
 8017328:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801732a:	f107 0314 	add.w	r3, r7, #20
 801732e:	2200      	movs	r2, #0
 8017330:	601a      	str	r2, [r3, #0]
 8017332:	605a      	str	r2, [r3, #4]
 8017334:	609a      	str	r2, [r3, #8]
 8017336:	60da      	str	r2, [r3, #12]
 8017338:	611a      	str	r2, [r3, #16]
 801733a:	615a      	str	r2, [r3, #20]
 801733c:	619a      	str	r2, [r3, #24]
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	617b      	str	r3, [r7, #20]
 8017342:	68bb      	ldr	r3, [r7, #8]
 8017344:	61bb      	str	r3, [r7, #24]
 8017346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017348:	b21b      	sxth	r3, r3
 801734a:	83bb      	strh	r3, [r7, #28]
 801734c:	683b      	ldr	r3, [r7, #0]
 801734e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017350:	f107 0314 	add.w	r3, r7, #20
 8017354:	6879      	ldr	r1, [r7, #4]
 8017356:	4618      	mov	r0, r3
 8017358:	f7f3 fca0 	bl	800ac9c <osThreadCreate>
 801735c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801735e:	4618      	mov	r0, r3
 8017360:	3730      	adds	r7, #48	; 0x30
 8017362:	46bd      	mov	sp, r7
 8017364:	bd80      	pop	{r7, pc}
	...

08017368 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017368:	b580      	push	{r7, lr}
 801736a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801736c:	4b04      	ldr	r3, [pc, #16]	; (8017380 <sys_arch_protect+0x18>)
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	f04f 31ff 	mov.w	r1, #4294967295
 8017374:	4618      	mov	r0, r3
 8017376:	f7f3 fd15 	bl	800ada4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801737a:	2301      	movs	r3, #1
}
 801737c:	4618      	mov	r0, r3
 801737e:	bd80      	pop	{r7, pc}
 8017380:	2400d910 	.word	0x2400d910

08017384 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017384:	b580      	push	{r7, lr}
 8017386:	b082      	sub	sp, #8
 8017388:	af00      	add	r7, sp, #0
 801738a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801738c:	4b04      	ldr	r3, [pc, #16]	; (80173a0 <sys_arch_unprotect+0x1c>)
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	4618      	mov	r0, r3
 8017392:	f7f3 fd55 	bl	800ae40 <osMutexRelease>
}
 8017396:	bf00      	nop
 8017398:	3708      	adds	r7, #8
 801739a:	46bd      	mov	sp, r7
 801739c:	bd80      	pop	{r7, pc}
 801739e:	bf00      	nop
 80173a0:	2400d910 	.word	0x2400d910

080173a4 <__libc_init_array>:
 80173a4:	b570      	push	{r4, r5, r6, lr}
 80173a6:	4e0d      	ldr	r6, [pc, #52]	; (80173dc <__libc_init_array+0x38>)
 80173a8:	4c0d      	ldr	r4, [pc, #52]	; (80173e0 <__libc_init_array+0x3c>)
 80173aa:	1ba4      	subs	r4, r4, r6
 80173ac:	10a4      	asrs	r4, r4, #2
 80173ae:	2500      	movs	r5, #0
 80173b0:	42a5      	cmp	r5, r4
 80173b2:	d109      	bne.n	80173c8 <__libc_init_array+0x24>
 80173b4:	4e0b      	ldr	r6, [pc, #44]	; (80173e4 <__libc_init_array+0x40>)
 80173b6:	4c0c      	ldr	r4, [pc, #48]	; (80173e8 <__libc_init_array+0x44>)
 80173b8:	f000 ff1e 	bl	80181f8 <_init>
 80173bc:	1ba4      	subs	r4, r4, r6
 80173be:	10a4      	asrs	r4, r4, #2
 80173c0:	2500      	movs	r5, #0
 80173c2:	42a5      	cmp	r5, r4
 80173c4:	d105      	bne.n	80173d2 <__libc_init_array+0x2e>
 80173c6:	bd70      	pop	{r4, r5, r6, pc}
 80173c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80173cc:	4798      	blx	r3
 80173ce:	3501      	adds	r5, #1
 80173d0:	e7ee      	b.n	80173b0 <__libc_init_array+0xc>
 80173d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80173d6:	4798      	blx	r3
 80173d8:	3501      	adds	r5, #1
 80173da:	e7f2      	b.n	80173c2 <__libc_init_array+0x1e>
 80173dc:	0801a458 	.word	0x0801a458
 80173e0:	0801a458 	.word	0x0801a458
 80173e4:	0801a458 	.word	0x0801a458
 80173e8:	0801a45c 	.word	0x0801a45c

080173ec <memcmp>:
 80173ec:	b530      	push	{r4, r5, lr}
 80173ee:	2400      	movs	r4, #0
 80173f0:	42a2      	cmp	r2, r4
 80173f2:	d101      	bne.n	80173f8 <memcmp+0xc>
 80173f4:	2000      	movs	r0, #0
 80173f6:	e007      	b.n	8017408 <memcmp+0x1c>
 80173f8:	5d03      	ldrb	r3, [r0, r4]
 80173fa:	3401      	adds	r4, #1
 80173fc:	190d      	adds	r5, r1, r4
 80173fe:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8017402:	42ab      	cmp	r3, r5
 8017404:	d0f4      	beq.n	80173f0 <memcmp+0x4>
 8017406:	1b58      	subs	r0, r3, r5
 8017408:	bd30      	pop	{r4, r5, pc}

0801740a <memcpy>:
 801740a:	b510      	push	{r4, lr}
 801740c:	1e43      	subs	r3, r0, #1
 801740e:	440a      	add	r2, r1
 8017410:	4291      	cmp	r1, r2
 8017412:	d100      	bne.n	8017416 <memcpy+0xc>
 8017414:	bd10      	pop	{r4, pc}
 8017416:	f811 4b01 	ldrb.w	r4, [r1], #1
 801741a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801741e:	e7f7      	b.n	8017410 <memcpy+0x6>

08017420 <memset>:
 8017420:	4402      	add	r2, r0
 8017422:	4603      	mov	r3, r0
 8017424:	4293      	cmp	r3, r2
 8017426:	d100      	bne.n	801742a <memset+0xa>
 8017428:	4770      	bx	lr
 801742a:	f803 1b01 	strb.w	r1, [r3], #1
 801742e:	e7f9      	b.n	8017424 <memset+0x4>

08017430 <iprintf>:
 8017430:	b40f      	push	{r0, r1, r2, r3}
 8017432:	4b0a      	ldr	r3, [pc, #40]	; (801745c <iprintf+0x2c>)
 8017434:	b513      	push	{r0, r1, r4, lr}
 8017436:	681c      	ldr	r4, [r3, #0]
 8017438:	b124      	cbz	r4, 8017444 <iprintf+0x14>
 801743a:	69a3      	ldr	r3, [r4, #24]
 801743c:	b913      	cbnz	r3, 8017444 <iprintf+0x14>
 801743e:	4620      	mov	r0, r4
 8017440:	f000 f84e 	bl	80174e0 <__sinit>
 8017444:	ab05      	add	r3, sp, #20
 8017446:	9a04      	ldr	r2, [sp, #16]
 8017448:	68a1      	ldr	r1, [r4, #8]
 801744a:	9301      	str	r3, [sp, #4]
 801744c:	4620      	mov	r0, r4
 801744e:	f000 f955 	bl	80176fc <_vfiprintf_r>
 8017452:	b002      	add	sp, #8
 8017454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017458:	b004      	add	sp, #16
 801745a:	4770      	bx	lr
 801745c:	2400002c 	.word	0x2400002c

08017460 <std>:
 8017460:	2300      	movs	r3, #0
 8017462:	b510      	push	{r4, lr}
 8017464:	4604      	mov	r4, r0
 8017466:	e9c0 3300 	strd	r3, r3, [r0]
 801746a:	6083      	str	r3, [r0, #8]
 801746c:	8181      	strh	r1, [r0, #12]
 801746e:	6643      	str	r3, [r0, #100]	; 0x64
 8017470:	81c2      	strh	r2, [r0, #14]
 8017472:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017476:	6183      	str	r3, [r0, #24]
 8017478:	4619      	mov	r1, r3
 801747a:	2208      	movs	r2, #8
 801747c:	305c      	adds	r0, #92	; 0x5c
 801747e:	f7ff ffcf 	bl	8017420 <memset>
 8017482:	4b05      	ldr	r3, [pc, #20]	; (8017498 <std+0x38>)
 8017484:	6263      	str	r3, [r4, #36]	; 0x24
 8017486:	4b05      	ldr	r3, [pc, #20]	; (801749c <std+0x3c>)
 8017488:	62a3      	str	r3, [r4, #40]	; 0x28
 801748a:	4b05      	ldr	r3, [pc, #20]	; (80174a0 <std+0x40>)
 801748c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801748e:	4b05      	ldr	r3, [pc, #20]	; (80174a4 <std+0x44>)
 8017490:	6224      	str	r4, [r4, #32]
 8017492:	6323      	str	r3, [r4, #48]	; 0x30
 8017494:	bd10      	pop	{r4, pc}
 8017496:	bf00      	nop
 8017498:	08017c59 	.word	0x08017c59
 801749c:	08017c7b 	.word	0x08017c7b
 80174a0:	08017cb3 	.word	0x08017cb3
 80174a4:	08017cd7 	.word	0x08017cd7

080174a8 <_cleanup_r>:
 80174a8:	4901      	ldr	r1, [pc, #4]	; (80174b0 <_cleanup_r+0x8>)
 80174aa:	f000 b885 	b.w	80175b8 <_fwalk_reent>
 80174ae:	bf00      	nop
 80174b0:	08017fb1 	.word	0x08017fb1

080174b4 <__sfmoreglue>:
 80174b4:	b570      	push	{r4, r5, r6, lr}
 80174b6:	1e4a      	subs	r2, r1, #1
 80174b8:	2568      	movs	r5, #104	; 0x68
 80174ba:	4355      	muls	r5, r2
 80174bc:	460e      	mov	r6, r1
 80174be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80174c2:	f000 f897 	bl	80175f4 <_malloc_r>
 80174c6:	4604      	mov	r4, r0
 80174c8:	b140      	cbz	r0, 80174dc <__sfmoreglue+0x28>
 80174ca:	2100      	movs	r1, #0
 80174cc:	e9c0 1600 	strd	r1, r6, [r0]
 80174d0:	300c      	adds	r0, #12
 80174d2:	60a0      	str	r0, [r4, #8]
 80174d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80174d8:	f7ff ffa2 	bl	8017420 <memset>
 80174dc:	4620      	mov	r0, r4
 80174de:	bd70      	pop	{r4, r5, r6, pc}

080174e0 <__sinit>:
 80174e0:	6983      	ldr	r3, [r0, #24]
 80174e2:	b510      	push	{r4, lr}
 80174e4:	4604      	mov	r4, r0
 80174e6:	bb33      	cbnz	r3, 8017536 <__sinit+0x56>
 80174e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80174ec:	6503      	str	r3, [r0, #80]	; 0x50
 80174ee:	4b12      	ldr	r3, [pc, #72]	; (8017538 <__sinit+0x58>)
 80174f0:	4a12      	ldr	r2, [pc, #72]	; (801753c <__sinit+0x5c>)
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	6282      	str	r2, [r0, #40]	; 0x28
 80174f6:	4298      	cmp	r0, r3
 80174f8:	bf04      	itt	eq
 80174fa:	2301      	moveq	r3, #1
 80174fc:	6183      	streq	r3, [r0, #24]
 80174fe:	f000 f81f 	bl	8017540 <__sfp>
 8017502:	6060      	str	r0, [r4, #4]
 8017504:	4620      	mov	r0, r4
 8017506:	f000 f81b 	bl	8017540 <__sfp>
 801750a:	60a0      	str	r0, [r4, #8]
 801750c:	4620      	mov	r0, r4
 801750e:	f000 f817 	bl	8017540 <__sfp>
 8017512:	2200      	movs	r2, #0
 8017514:	60e0      	str	r0, [r4, #12]
 8017516:	2104      	movs	r1, #4
 8017518:	6860      	ldr	r0, [r4, #4]
 801751a:	f7ff ffa1 	bl	8017460 <std>
 801751e:	2201      	movs	r2, #1
 8017520:	2109      	movs	r1, #9
 8017522:	68a0      	ldr	r0, [r4, #8]
 8017524:	f7ff ff9c 	bl	8017460 <std>
 8017528:	2202      	movs	r2, #2
 801752a:	2112      	movs	r1, #18
 801752c:	68e0      	ldr	r0, [r4, #12]
 801752e:	f7ff ff97 	bl	8017460 <std>
 8017532:	2301      	movs	r3, #1
 8017534:	61a3      	str	r3, [r4, #24]
 8017536:	bd10      	pop	{r4, pc}
 8017538:	0801a3b8 	.word	0x0801a3b8
 801753c:	080174a9 	.word	0x080174a9

08017540 <__sfp>:
 8017540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017542:	4b1b      	ldr	r3, [pc, #108]	; (80175b0 <__sfp+0x70>)
 8017544:	681e      	ldr	r6, [r3, #0]
 8017546:	69b3      	ldr	r3, [r6, #24]
 8017548:	4607      	mov	r7, r0
 801754a:	b913      	cbnz	r3, 8017552 <__sfp+0x12>
 801754c:	4630      	mov	r0, r6
 801754e:	f7ff ffc7 	bl	80174e0 <__sinit>
 8017552:	3648      	adds	r6, #72	; 0x48
 8017554:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017558:	3b01      	subs	r3, #1
 801755a:	d503      	bpl.n	8017564 <__sfp+0x24>
 801755c:	6833      	ldr	r3, [r6, #0]
 801755e:	b133      	cbz	r3, 801756e <__sfp+0x2e>
 8017560:	6836      	ldr	r6, [r6, #0]
 8017562:	e7f7      	b.n	8017554 <__sfp+0x14>
 8017564:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017568:	b16d      	cbz	r5, 8017586 <__sfp+0x46>
 801756a:	3468      	adds	r4, #104	; 0x68
 801756c:	e7f4      	b.n	8017558 <__sfp+0x18>
 801756e:	2104      	movs	r1, #4
 8017570:	4638      	mov	r0, r7
 8017572:	f7ff ff9f 	bl	80174b4 <__sfmoreglue>
 8017576:	6030      	str	r0, [r6, #0]
 8017578:	2800      	cmp	r0, #0
 801757a:	d1f1      	bne.n	8017560 <__sfp+0x20>
 801757c:	230c      	movs	r3, #12
 801757e:	603b      	str	r3, [r7, #0]
 8017580:	4604      	mov	r4, r0
 8017582:	4620      	mov	r0, r4
 8017584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017586:	4b0b      	ldr	r3, [pc, #44]	; (80175b4 <__sfp+0x74>)
 8017588:	6665      	str	r5, [r4, #100]	; 0x64
 801758a:	e9c4 5500 	strd	r5, r5, [r4]
 801758e:	60a5      	str	r5, [r4, #8]
 8017590:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017594:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017598:	2208      	movs	r2, #8
 801759a:	4629      	mov	r1, r5
 801759c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80175a0:	f7ff ff3e 	bl	8017420 <memset>
 80175a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80175a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80175ac:	e7e9      	b.n	8017582 <__sfp+0x42>
 80175ae:	bf00      	nop
 80175b0:	0801a3b8 	.word	0x0801a3b8
 80175b4:	ffff0001 	.word	0xffff0001

080175b8 <_fwalk_reent>:
 80175b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80175bc:	4680      	mov	r8, r0
 80175be:	4689      	mov	r9, r1
 80175c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80175c4:	2600      	movs	r6, #0
 80175c6:	b914      	cbnz	r4, 80175ce <_fwalk_reent+0x16>
 80175c8:	4630      	mov	r0, r6
 80175ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80175ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80175d2:	3f01      	subs	r7, #1
 80175d4:	d501      	bpl.n	80175da <_fwalk_reent+0x22>
 80175d6:	6824      	ldr	r4, [r4, #0]
 80175d8:	e7f5      	b.n	80175c6 <_fwalk_reent+0xe>
 80175da:	89ab      	ldrh	r3, [r5, #12]
 80175dc:	2b01      	cmp	r3, #1
 80175de:	d907      	bls.n	80175f0 <_fwalk_reent+0x38>
 80175e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80175e4:	3301      	adds	r3, #1
 80175e6:	d003      	beq.n	80175f0 <_fwalk_reent+0x38>
 80175e8:	4629      	mov	r1, r5
 80175ea:	4640      	mov	r0, r8
 80175ec:	47c8      	blx	r9
 80175ee:	4306      	orrs	r6, r0
 80175f0:	3568      	adds	r5, #104	; 0x68
 80175f2:	e7ee      	b.n	80175d2 <_fwalk_reent+0x1a>

080175f4 <_malloc_r>:
 80175f4:	b570      	push	{r4, r5, r6, lr}
 80175f6:	1ccd      	adds	r5, r1, #3
 80175f8:	f025 0503 	bic.w	r5, r5, #3
 80175fc:	3508      	adds	r5, #8
 80175fe:	2d0c      	cmp	r5, #12
 8017600:	bf38      	it	cc
 8017602:	250c      	movcc	r5, #12
 8017604:	2d00      	cmp	r5, #0
 8017606:	4606      	mov	r6, r0
 8017608:	db01      	blt.n	801760e <_malloc_r+0x1a>
 801760a:	42a9      	cmp	r1, r5
 801760c:	d903      	bls.n	8017616 <_malloc_r+0x22>
 801760e:	230c      	movs	r3, #12
 8017610:	6033      	str	r3, [r6, #0]
 8017612:	2000      	movs	r0, #0
 8017614:	bd70      	pop	{r4, r5, r6, pc}
 8017616:	f000 fd6b 	bl	80180f0 <__malloc_lock>
 801761a:	4a21      	ldr	r2, [pc, #132]	; (80176a0 <_malloc_r+0xac>)
 801761c:	6814      	ldr	r4, [r2, #0]
 801761e:	4621      	mov	r1, r4
 8017620:	b991      	cbnz	r1, 8017648 <_malloc_r+0x54>
 8017622:	4c20      	ldr	r4, [pc, #128]	; (80176a4 <_malloc_r+0xb0>)
 8017624:	6823      	ldr	r3, [r4, #0]
 8017626:	b91b      	cbnz	r3, 8017630 <_malloc_r+0x3c>
 8017628:	4630      	mov	r0, r6
 801762a:	f000 fb05 	bl	8017c38 <_sbrk_r>
 801762e:	6020      	str	r0, [r4, #0]
 8017630:	4629      	mov	r1, r5
 8017632:	4630      	mov	r0, r6
 8017634:	f000 fb00 	bl	8017c38 <_sbrk_r>
 8017638:	1c43      	adds	r3, r0, #1
 801763a:	d124      	bne.n	8017686 <_malloc_r+0x92>
 801763c:	230c      	movs	r3, #12
 801763e:	6033      	str	r3, [r6, #0]
 8017640:	4630      	mov	r0, r6
 8017642:	f000 fd56 	bl	80180f2 <__malloc_unlock>
 8017646:	e7e4      	b.n	8017612 <_malloc_r+0x1e>
 8017648:	680b      	ldr	r3, [r1, #0]
 801764a:	1b5b      	subs	r3, r3, r5
 801764c:	d418      	bmi.n	8017680 <_malloc_r+0x8c>
 801764e:	2b0b      	cmp	r3, #11
 8017650:	d90f      	bls.n	8017672 <_malloc_r+0x7e>
 8017652:	600b      	str	r3, [r1, #0]
 8017654:	50cd      	str	r5, [r1, r3]
 8017656:	18cc      	adds	r4, r1, r3
 8017658:	4630      	mov	r0, r6
 801765a:	f000 fd4a 	bl	80180f2 <__malloc_unlock>
 801765e:	f104 000b 	add.w	r0, r4, #11
 8017662:	1d23      	adds	r3, r4, #4
 8017664:	f020 0007 	bic.w	r0, r0, #7
 8017668:	1ac3      	subs	r3, r0, r3
 801766a:	d0d3      	beq.n	8017614 <_malloc_r+0x20>
 801766c:	425a      	negs	r2, r3
 801766e:	50e2      	str	r2, [r4, r3]
 8017670:	e7d0      	b.n	8017614 <_malloc_r+0x20>
 8017672:	428c      	cmp	r4, r1
 8017674:	684b      	ldr	r3, [r1, #4]
 8017676:	bf16      	itet	ne
 8017678:	6063      	strne	r3, [r4, #4]
 801767a:	6013      	streq	r3, [r2, #0]
 801767c:	460c      	movne	r4, r1
 801767e:	e7eb      	b.n	8017658 <_malloc_r+0x64>
 8017680:	460c      	mov	r4, r1
 8017682:	6849      	ldr	r1, [r1, #4]
 8017684:	e7cc      	b.n	8017620 <_malloc_r+0x2c>
 8017686:	1cc4      	adds	r4, r0, #3
 8017688:	f024 0403 	bic.w	r4, r4, #3
 801768c:	42a0      	cmp	r0, r4
 801768e:	d005      	beq.n	801769c <_malloc_r+0xa8>
 8017690:	1a21      	subs	r1, r4, r0
 8017692:	4630      	mov	r0, r6
 8017694:	f000 fad0 	bl	8017c38 <_sbrk_r>
 8017698:	3001      	adds	r0, #1
 801769a:	d0cf      	beq.n	801763c <_malloc_r+0x48>
 801769c:	6025      	str	r5, [r4, #0]
 801769e:	e7db      	b.n	8017658 <_malloc_r+0x64>
 80176a0:	2400a538 	.word	0x2400a538
 80176a4:	2400a53c 	.word	0x2400a53c

080176a8 <__sfputc_r>:
 80176a8:	6893      	ldr	r3, [r2, #8]
 80176aa:	3b01      	subs	r3, #1
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	b410      	push	{r4}
 80176b0:	6093      	str	r3, [r2, #8]
 80176b2:	da08      	bge.n	80176c6 <__sfputc_r+0x1e>
 80176b4:	6994      	ldr	r4, [r2, #24]
 80176b6:	42a3      	cmp	r3, r4
 80176b8:	db01      	blt.n	80176be <__sfputc_r+0x16>
 80176ba:	290a      	cmp	r1, #10
 80176bc:	d103      	bne.n	80176c6 <__sfputc_r+0x1e>
 80176be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176c2:	f000 bb0d 	b.w	8017ce0 <__swbuf_r>
 80176c6:	6813      	ldr	r3, [r2, #0]
 80176c8:	1c58      	adds	r0, r3, #1
 80176ca:	6010      	str	r0, [r2, #0]
 80176cc:	7019      	strb	r1, [r3, #0]
 80176ce:	4608      	mov	r0, r1
 80176d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176d4:	4770      	bx	lr

080176d6 <__sfputs_r>:
 80176d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176d8:	4606      	mov	r6, r0
 80176da:	460f      	mov	r7, r1
 80176dc:	4614      	mov	r4, r2
 80176de:	18d5      	adds	r5, r2, r3
 80176e0:	42ac      	cmp	r4, r5
 80176e2:	d101      	bne.n	80176e8 <__sfputs_r+0x12>
 80176e4:	2000      	movs	r0, #0
 80176e6:	e007      	b.n	80176f8 <__sfputs_r+0x22>
 80176e8:	463a      	mov	r2, r7
 80176ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176ee:	4630      	mov	r0, r6
 80176f0:	f7ff ffda 	bl	80176a8 <__sfputc_r>
 80176f4:	1c43      	adds	r3, r0, #1
 80176f6:	d1f3      	bne.n	80176e0 <__sfputs_r+0xa>
 80176f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080176fc <_vfiprintf_r>:
 80176fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017700:	460c      	mov	r4, r1
 8017702:	b09d      	sub	sp, #116	; 0x74
 8017704:	4617      	mov	r7, r2
 8017706:	461d      	mov	r5, r3
 8017708:	4606      	mov	r6, r0
 801770a:	b118      	cbz	r0, 8017714 <_vfiprintf_r+0x18>
 801770c:	6983      	ldr	r3, [r0, #24]
 801770e:	b90b      	cbnz	r3, 8017714 <_vfiprintf_r+0x18>
 8017710:	f7ff fee6 	bl	80174e0 <__sinit>
 8017714:	4b7c      	ldr	r3, [pc, #496]	; (8017908 <_vfiprintf_r+0x20c>)
 8017716:	429c      	cmp	r4, r3
 8017718:	d158      	bne.n	80177cc <_vfiprintf_r+0xd0>
 801771a:	6874      	ldr	r4, [r6, #4]
 801771c:	89a3      	ldrh	r3, [r4, #12]
 801771e:	0718      	lsls	r0, r3, #28
 8017720:	d55e      	bpl.n	80177e0 <_vfiprintf_r+0xe4>
 8017722:	6923      	ldr	r3, [r4, #16]
 8017724:	2b00      	cmp	r3, #0
 8017726:	d05b      	beq.n	80177e0 <_vfiprintf_r+0xe4>
 8017728:	2300      	movs	r3, #0
 801772a:	9309      	str	r3, [sp, #36]	; 0x24
 801772c:	2320      	movs	r3, #32
 801772e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017732:	2330      	movs	r3, #48	; 0x30
 8017734:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017738:	9503      	str	r5, [sp, #12]
 801773a:	f04f 0b01 	mov.w	fp, #1
 801773e:	46b8      	mov	r8, r7
 8017740:	4645      	mov	r5, r8
 8017742:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017746:	b10b      	cbz	r3, 801774c <_vfiprintf_r+0x50>
 8017748:	2b25      	cmp	r3, #37	; 0x25
 801774a:	d154      	bne.n	80177f6 <_vfiprintf_r+0xfa>
 801774c:	ebb8 0a07 	subs.w	sl, r8, r7
 8017750:	d00b      	beq.n	801776a <_vfiprintf_r+0x6e>
 8017752:	4653      	mov	r3, sl
 8017754:	463a      	mov	r2, r7
 8017756:	4621      	mov	r1, r4
 8017758:	4630      	mov	r0, r6
 801775a:	f7ff ffbc 	bl	80176d6 <__sfputs_r>
 801775e:	3001      	adds	r0, #1
 8017760:	f000 80c2 	beq.w	80178e8 <_vfiprintf_r+0x1ec>
 8017764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017766:	4453      	add	r3, sl
 8017768:	9309      	str	r3, [sp, #36]	; 0x24
 801776a:	f898 3000 	ldrb.w	r3, [r8]
 801776e:	2b00      	cmp	r3, #0
 8017770:	f000 80ba 	beq.w	80178e8 <_vfiprintf_r+0x1ec>
 8017774:	2300      	movs	r3, #0
 8017776:	f04f 32ff 	mov.w	r2, #4294967295
 801777a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801777e:	9304      	str	r3, [sp, #16]
 8017780:	9307      	str	r3, [sp, #28]
 8017782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017786:	931a      	str	r3, [sp, #104]	; 0x68
 8017788:	46a8      	mov	r8, r5
 801778a:	2205      	movs	r2, #5
 801778c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8017790:	485e      	ldr	r0, [pc, #376]	; (801790c <_vfiprintf_r+0x210>)
 8017792:	f7e8 fda5 	bl	80002e0 <memchr>
 8017796:	9b04      	ldr	r3, [sp, #16]
 8017798:	bb78      	cbnz	r0, 80177fa <_vfiprintf_r+0xfe>
 801779a:	06d9      	lsls	r1, r3, #27
 801779c:	bf44      	itt	mi
 801779e:	2220      	movmi	r2, #32
 80177a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80177a4:	071a      	lsls	r2, r3, #28
 80177a6:	bf44      	itt	mi
 80177a8:	222b      	movmi	r2, #43	; 0x2b
 80177aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80177ae:	782a      	ldrb	r2, [r5, #0]
 80177b0:	2a2a      	cmp	r2, #42	; 0x2a
 80177b2:	d02a      	beq.n	801780a <_vfiprintf_r+0x10e>
 80177b4:	9a07      	ldr	r2, [sp, #28]
 80177b6:	46a8      	mov	r8, r5
 80177b8:	2000      	movs	r0, #0
 80177ba:	250a      	movs	r5, #10
 80177bc:	4641      	mov	r1, r8
 80177be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80177c2:	3b30      	subs	r3, #48	; 0x30
 80177c4:	2b09      	cmp	r3, #9
 80177c6:	d969      	bls.n	801789c <_vfiprintf_r+0x1a0>
 80177c8:	b360      	cbz	r0, 8017824 <_vfiprintf_r+0x128>
 80177ca:	e024      	b.n	8017816 <_vfiprintf_r+0x11a>
 80177cc:	4b50      	ldr	r3, [pc, #320]	; (8017910 <_vfiprintf_r+0x214>)
 80177ce:	429c      	cmp	r4, r3
 80177d0:	d101      	bne.n	80177d6 <_vfiprintf_r+0xda>
 80177d2:	68b4      	ldr	r4, [r6, #8]
 80177d4:	e7a2      	b.n	801771c <_vfiprintf_r+0x20>
 80177d6:	4b4f      	ldr	r3, [pc, #316]	; (8017914 <_vfiprintf_r+0x218>)
 80177d8:	429c      	cmp	r4, r3
 80177da:	bf08      	it	eq
 80177dc:	68f4      	ldreq	r4, [r6, #12]
 80177de:	e79d      	b.n	801771c <_vfiprintf_r+0x20>
 80177e0:	4621      	mov	r1, r4
 80177e2:	4630      	mov	r0, r6
 80177e4:	f000 fae0 	bl	8017da8 <__swsetup_r>
 80177e8:	2800      	cmp	r0, #0
 80177ea:	d09d      	beq.n	8017728 <_vfiprintf_r+0x2c>
 80177ec:	f04f 30ff 	mov.w	r0, #4294967295
 80177f0:	b01d      	add	sp, #116	; 0x74
 80177f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177f6:	46a8      	mov	r8, r5
 80177f8:	e7a2      	b.n	8017740 <_vfiprintf_r+0x44>
 80177fa:	4a44      	ldr	r2, [pc, #272]	; (801790c <_vfiprintf_r+0x210>)
 80177fc:	1a80      	subs	r0, r0, r2
 80177fe:	fa0b f000 	lsl.w	r0, fp, r0
 8017802:	4318      	orrs	r0, r3
 8017804:	9004      	str	r0, [sp, #16]
 8017806:	4645      	mov	r5, r8
 8017808:	e7be      	b.n	8017788 <_vfiprintf_r+0x8c>
 801780a:	9a03      	ldr	r2, [sp, #12]
 801780c:	1d11      	adds	r1, r2, #4
 801780e:	6812      	ldr	r2, [r2, #0]
 8017810:	9103      	str	r1, [sp, #12]
 8017812:	2a00      	cmp	r2, #0
 8017814:	db01      	blt.n	801781a <_vfiprintf_r+0x11e>
 8017816:	9207      	str	r2, [sp, #28]
 8017818:	e004      	b.n	8017824 <_vfiprintf_r+0x128>
 801781a:	4252      	negs	r2, r2
 801781c:	f043 0302 	orr.w	r3, r3, #2
 8017820:	9207      	str	r2, [sp, #28]
 8017822:	9304      	str	r3, [sp, #16]
 8017824:	f898 3000 	ldrb.w	r3, [r8]
 8017828:	2b2e      	cmp	r3, #46	; 0x2e
 801782a:	d10e      	bne.n	801784a <_vfiprintf_r+0x14e>
 801782c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017830:	2b2a      	cmp	r3, #42	; 0x2a
 8017832:	d138      	bne.n	80178a6 <_vfiprintf_r+0x1aa>
 8017834:	9b03      	ldr	r3, [sp, #12]
 8017836:	1d1a      	adds	r2, r3, #4
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	9203      	str	r2, [sp, #12]
 801783c:	2b00      	cmp	r3, #0
 801783e:	bfb8      	it	lt
 8017840:	f04f 33ff 	movlt.w	r3, #4294967295
 8017844:	f108 0802 	add.w	r8, r8, #2
 8017848:	9305      	str	r3, [sp, #20]
 801784a:	4d33      	ldr	r5, [pc, #204]	; (8017918 <_vfiprintf_r+0x21c>)
 801784c:	f898 1000 	ldrb.w	r1, [r8]
 8017850:	2203      	movs	r2, #3
 8017852:	4628      	mov	r0, r5
 8017854:	f7e8 fd44 	bl	80002e0 <memchr>
 8017858:	b140      	cbz	r0, 801786c <_vfiprintf_r+0x170>
 801785a:	2340      	movs	r3, #64	; 0x40
 801785c:	1b40      	subs	r0, r0, r5
 801785e:	fa03 f000 	lsl.w	r0, r3, r0
 8017862:	9b04      	ldr	r3, [sp, #16]
 8017864:	4303      	orrs	r3, r0
 8017866:	f108 0801 	add.w	r8, r8, #1
 801786a:	9304      	str	r3, [sp, #16]
 801786c:	f898 1000 	ldrb.w	r1, [r8]
 8017870:	482a      	ldr	r0, [pc, #168]	; (801791c <_vfiprintf_r+0x220>)
 8017872:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017876:	2206      	movs	r2, #6
 8017878:	f108 0701 	add.w	r7, r8, #1
 801787c:	f7e8 fd30 	bl	80002e0 <memchr>
 8017880:	2800      	cmp	r0, #0
 8017882:	d037      	beq.n	80178f4 <_vfiprintf_r+0x1f8>
 8017884:	4b26      	ldr	r3, [pc, #152]	; (8017920 <_vfiprintf_r+0x224>)
 8017886:	bb1b      	cbnz	r3, 80178d0 <_vfiprintf_r+0x1d4>
 8017888:	9b03      	ldr	r3, [sp, #12]
 801788a:	3307      	adds	r3, #7
 801788c:	f023 0307 	bic.w	r3, r3, #7
 8017890:	3308      	adds	r3, #8
 8017892:	9303      	str	r3, [sp, #12]
 8017894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017896:	444b      	add	r3, r9
 8017898:	9309      	str	r3, [sp, #36]	; 0x24
 801789a:	e750      	b.n	801773e <_vfiprintf_r+0x42>
 801789c:	fb05 3202 	mla	r2, r5, r2, r3
 80178a0:	2001      	movs	r0, #1
 80178a2:	4688      	mov	r8, r1
 80178a4:	e78a      	b.n	80177bc <_vfiprintf_r+0xc0>
 80178a6:	2300      	movs	r3, #0
 80178a8:	f108 0801 	add.w	r8, r8, #1
 80178ac:	9305      	str	r3, [sp, #20]
 80178ae:	4619      	mov	r1, r3
 80178b0:	250a      	movs	r5, #10
 80178b2:	4640      	mov	r0, r8
 80178b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80178b8:	3a30      	subs	r2, #48	; 0x30
 80178ba:	2a09      	cmp	r2, #9
 80178bc:	d903      	bls.n	80178c6 <_vfiprintf_r+0x1ca>
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d0c3      	beq.n	801784a <_vfiprintf_r+0x14e>
 80178c2:	9105      	str	r1, [sp, #20]
 80178c4:	e7c1      	b.n	801784a <_vfiprintf_r+0x14e>
 80178c6:	fb05 2101 	mla	r1, r5, r1, r2
 80178ca:	2301      	movs	r3, #1
 80178cc:	4680      	mov	r8, r0
 80178ce:	e7f0      	b.n	80178b2 <_vfiprintf_r+0x1b6>
 80178d0:	ab03      	add	r3, sp, #12
 80178d2:	9300      	str	r3, [sp, #0]
 80178d4:	4622      	mov	r2, r4
 80178d6:	4b13      	ldr	r3, [pc, #76]	; (8017924 <_vfiprintf_r+0x228>)
 80178d8:	a904      	add	r1, sp, #16
 80178da:	4630      	mov	r0, r6
 80178dc:	f3af 8000 	nop.w
 80178e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80178e4:	4681      	mov	r9, r0
 80178e6:	d1d5      	bne.n	8017894 <_vfiprintf_r+0x198>
 80178e8:	89a3      	ldrh	r3, [r4, #12]
 80178ea:	065b      	lsls	r3, r3, #25
 80178ec:	f53f af7e 	bmi.w	80177ec <_vfiprintf_r+0xf0>
 80178f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80178f2:	e77d      	b.n	80177f0 <_vfiprintf_r+0xf4>
 80178f4:	ab03      	add	r3, sp, #12
 80178f6:	9300      	str	r3, [sp, #0]
 80178f8:	4622      	mov	r2, r4
 80178fa:	4b0a      	ldr	r3, [pc, #40]	; (8017924 <_vfiprintf_r+0x228>)
 80178fc:	a904      	add	r1, sp, #16
 80178fe:	4630      	mov	r0, r6
 8017900:	f000 f888 	bl	8017a14 <_printf_i>
 8017904:	e7ec      	b.n	80178e0 <_vfiprintf_r+0x1e4>
 8017906:	bf00      	nop
 8017908:	0801a3dc 	.word	0x0801a3dc
 801790c:	0801a41c 	.word	0x0801a41c
 8017910:	0801a3fc 	.word	0x0801a3fc
 8017914:	0801a3bc 	.word	0x0801a3bc
 8017918:	0801a422 	.word	0x0801a422
 801791c:	0801a426 	.word	0x0801a426
 8017920:	00000000 	.word	0x00000000
 8017924:	080176d7 	.word	0x080176d7

08017928 <_printf_common>:
 8017928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801792c:	4691      	mov	r9, r2
 801792e:	461f      	mov	r7, r3
 8017930:	688a      	ldr	r2, [r1, #8]
 8017932:	690b      	ldr	r3, [r1, #16]
 8017934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017938:	4293      	cmp	r3, r2
 801793a:	bfb8      	it	lt
 801793c:	4613      	movlt	r3, r2
 801793e:	f8c9 3000 	str.w	r3, [r9]
 8017942:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017946:	4606      	mov	r6, r0
 8017948:	460c      	mov	r4, r1
 801794a:	b112      	cbz	r2, 8017952 <_printf_common+0x2a>
 801794c:	3301      	adds	r3, #1
 801794e:	f8c9 3000 	str.w	r3, [r9]
 8017952:	6823      	ldr	r3, [r4, #0]
 8017954:	0699      	lsls	r1, r3, #26
 8017956:	bf42      	ittt	mi
 8017958:	f8d9 3000 	ldrmi.w	r3, [r9]
 801795c:	3302      	addmi	r3, #2
 801795e:	f8c9 3000 	strmi.w	r3, [r9]
 8017962:	6825      	ldr	r5, [r4, #0]
 8017964:	f015 0506 	ands.w	r5, r5, #6
 8017968:	d107      	bne.n	801797a <_printf_common+0x52>
 801796a:	f104 0a19 	add.w	sl, r4, #25
 801796e:	68e3      	ldr	r3, [r4, #12]
 8017970:	f8d9 2000 	ldr.w	r2, [r9]
 8017974:	1a9b      	subs	r3, r3, r2
 8017976:	42ab      	cmp	r3, r5
 8017978:	dc28      	bgt.n	80179cc <_printf_common+0xa4>
 801797a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801797e:	6822      	ldr	r2, [r4, #0]
 8017980:	3300      	adds	r3, #0
 8017982:	bf18      	it	ne
 8017984:	2301      	movne	r3, #1
 8017986:	0692      	lsls	r2, r2, #26
 8017988:	d42d      	bmi.n	80179e6 <_printf_common+0xbe>
 801798a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801798e:	4639      	mov	r1, r7
 8017990:	4630      	mov	r0, r6
 8017992:	47c0      	blx	r8
 8017994:	3001      	adds	r0, #1
 8017996:	d020      	beq.n	80179da <_printf_common+0xb2>
 8017998:	6823      	ldr	r3, [r4, #0]
 801799a:	68e5      	ldr	r5, [r4, #12]
 801799c:	f8d9 2000 	ldr.w	r2, [r9]
 80179a0:	f003 0306 	and.w	r3, r3, #6
 80179a4:	2b04      	cmp	r3, #4
 80179a6:	bf08      	it	eq
 80179a8:	1aad      	subeq	r5, r5, r2
 80179aa:	68a3      	ldr	r3, [r4, #8]
 80179ac:	6922      	ldr	r2, [r4, #16]
 80179ae:	bf0c      	ite	eq
 80179b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80179b4:	2500      	movne	r5, #0
 80179b6:	4293      	cmp	r3, r2
 80179b8:	bfc4      	itt	gt
 80179ba:	1a9b      	subgt	r3, r3, r2
 80179bc:	18ed      	addgt	r5, r5, r3
 80179be:	f04f 0900 	mov.w	r9, #0
 80179c2:	341a      	adds	r4, #26
 80179c4:	454d      	cmp	r5, r9
 80179c6:	d11a      	bne.n	80179fe <_printf_common+0xd6>
 80179c8:	2000      	movs	r0, #0
 80179ca:	e008      	b.n	80179de <_printf_common+0xb6>
 80179cc:	2301      	movs	r3, #1
 80179ce:	4652      	mov	r2, sl
 80179d0:	4639      	mov	r1, r7
 80179d2:	4630      	mov	r0, r6
 80179d4:	47c0      	blx	r8
 80179d6:	3001      	adds	r0, #1
 80179d8:	d103      	bne.n	80179e2 <_printf_common+0xba>
 80179da:	f04f 30ff 	mov.w	r0, #4294967295
 80179de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179e2:	3501      	adds	r5, #1
 80179e4:	e7c3      	b.n	801796e <_printf_common+0x46>
 80179e6:	18e1      	adds	r1, r4, r3
 80179e8:	1c5a      	adds	r2, r3, #1
 80179ea:	2030      	movs	r0, #48	; 0x30
 80179ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80179f0:	4422      	add	r2, r4
 80179f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80179f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80179fa:	3302      	adds	r3, #2
 80179fc:	e7c5      	b.n	801798a <_printf_common+0x62>
 80179fe:	2301      	movs	r3, #1
 8017a00:	4622      	mov	r2, r4
 8017a02:	4639      	mov	r1, r7
 8017a04:	4630      	mov	r0, r6
 8017a06:	47c0      	blx	r8
 8017a08:	3001      	adds	r0, #1
 8017a0a:	d0e6      	beq.n	80179da <_printf_common+0xb2>
 8017a0c:	f109 0901 	add.w	r9, r9, #1
 8017a10:	e7d8      	b.n	80179c4 <_printf_common+0x9c>
	...

08017a14 <_printf_i>:
 8017a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8017a1c:	460c      	mov	r4, r1
 8017a1e:	7e09      	ldrb	r1, [r1, #24]
 8017a20:	b085      	sub	sp, #20
 8017a22:	296e      	cmp	r1, #110	; 0x6e
 8017a24:	4617      	mov	r7, r2
 8017a26:	4606      	mov	r6, r0
 8017a28:	4698      	mov	r8, r3
 8017a2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017a2c:	f000 80b3 	beq.w	8017b96 <_printf_i+0x182>
 8017a30:	d822      	bhi.n	8017a78 <_printf_i+0x64>
 8017a32:	2963      	cmp	r1, #99	; 0x63
 8017a34:	d036      	beq.n	8017aa4 <_printf_i+0x90>
 8017a36:	d80a      	bhi.n	8017a4e <_printf_i+0x3a>
 8017a38:	2900      	cmp	r1, #0
 8017a3a:	f000 80b9 	beq.w	8017bb0 <_printf_i+0x19c>
 8017a3e:	2958      	cmp	r1, #88	; 0x58
 8017a40:	f000 8083 	beq.w	8017b4a <_printf_i+0x136>
 8017a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017a48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8017a4c:	e032      	b.n	8017ab4 <_printf_i+0xa0>
 8017a4e:	2964      	cmp	r1, #100	; 0x64
 8017a50:	d001      	beq.n	8017a56 <_printf_i+0x42>
 8017a52:	2969      	cmp	r1, #105	; 0x69
 8017a54:	d1f6      	bne.n	8017a44 <_printf_i+0x30>
 8017a56:	6820      	ldr	r0, [r4, #0]
 8017a58:	6813      	ldr	r3, [r2, #0]
 8017a5a:	0605      	lsls	r5, r0, #24
 8017a5c:	f103 0104 	add.w	r1, r3, #4
 8017a60:	d52a      	bpl.n	8017ab8 <_printf_i+0xa4>
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	6011      	str	r1, [r2, #0]
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	da03      	bge.n	8017a72 <_printf_i+0x5e>
 8017a6a:	222d      	movs	r2, #45	; 0x2d
 8017a6c:	425b      	negs	r3, r3
 8017a6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017a72:	486f      	ldr	r0, [pc, #444]	; (8017c30 <_printf_i+0x21c>)
 8017a74:	220a      	movs	r2, #10
 8017a76:	e039      	b.n	8017aec <_printf_i+0xd8>
 8017a78:	2973      	cmp	r1, #115	; 0x73
 8017a7a:	f000 809d 	beq.w	8017bb8 <_printf_i+0x1a4>
 8017a7e:	d808      	bhi.n	8017a92 <_printf_i+0x7e>
 8017a80:	296f      	cmp	r1, #111	; 0x6f
 8017a82:	d020      	beq.n	8017ac6 <_printf_i+0xb2>
 8017a84:	2970      	cmp	r1, #112	; 0x70
 8017a86:	d1dd      	bne.n	8017a44 <_printf_i+0x30>
 8017a88:	6823      	ldr	r3, [r4, #0]
 8017a8a:	f043 0320 	orr.w	r3, r3, #32
 8017a8e:	6023      	str	r3, [r4, #0]
 8017a90:	e003      	b.n	8017a9a <_printf_i+0x86>
 8017a92:	2975      	cmp	r1, #117	; 0x75
 8017a94:	d017      	beq.n	8017ac6 <_printf_i+0xb2>
 8017a96:	2978      	cmp	r1, #120	; 0x78
 8017a98:	d1d4      	bne.n	8017a44 <_printf_i+0x30>
 8017a9a:	2378      	movs	r3, #120	; 0x78
 8017a9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017aa0:	4864      	ldr	r0, [pc, #400]	; (8017c34 <_printf_i+0x220>)
 8017aa2:	e055      	b.n	8017b50 <_printf_i+0x13c>
 8017aa4:	6813      	ldr	r3, [r2, #0]
 8017aa6:	1d19      	adds	r1, r3, #4
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	6011      	str	r1, [r2, #0]
 8017aac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017ab0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017ab4:	2301      	movs	r3, #1
 8017ab6:	e08c      	b.n	8017bd2 <_printf_i+0x1be>
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	6011      	str	r1, [r2, #0]
 8017abc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017ac0:	bf18      	it	ne
 8017ac2:	b21b      	sxthne	r3, r3
 8017ac4:	e7cf      	b.n	8017a66 <_printf_i+0x52>
 8017ac6:	6813      	ldr	r3, [r2, #0]
 8017ac8:	6825      	ldr	r5, [r4, #0]
 8017aca:	1d18      	adds	r0, r3, #4
 8017acc:	6010      	str	r0, [r2, #0]
 8017ace:	0628      	lsls	r0, r5, #24
 8017ad0:	d501      	bpl.n	8017ad6 <_printf_i+0xc2>
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	e002      	b.n	8017adc <_printf_i+0xc8>
 8017ad6:	0668      	lsls	r0, r5, #25
 8017ad8:	d5fb      	bpl.n	8017ad2 <_printf_i+0xbe>
 8017ada:	881b      	ldrh	r3, [r3, #0]
 8017adc:	4854      	ldr	r0, [pc, #336]	; (8017c30 <_printf_i+0x21c>)
 8017ade:	296f      	cmp	r1, #111	; 0x6f
 8017ae0:	bf14      	ite	ne
 8017ae2:	220a      	movne	r2, #10
 8017ae4:	2208      	moveq	r2, #8
 8017ae6:	2100      	movs	r1, #0
 8017ae8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017aec:	6865      	ldr	r5, [r4, #4]
 8017aee:	60a5      	str	r5, [r4, #8]
 8017af0:	2d00      	cmp	r5, #0
 8017af2:	f2c0 8095 	blt.w	8017c20 <_printf_i+0x20c>
 8017af6:	6821      	ldr	r1, [r4, #0]
 8017af8:	f021 0104 	bic.w	r1, r1, #4
 8017afc:	6021      	str	r1, [r4, #0]
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d13d      	bne.n	8017b7e <_printf_i+0x16a>
 8017b02:	2d00      	cmp	r5, #0
 8017b04:	f040 808e 	bne.w	8017c24 <_printf_i+0x210>
 8017b08:	4665      	mov	r5, ip
 8017b0a:	2a08      	cmp	r2, #8
 8017b0c:	d10b      	bne.n	8017b26 <_printf_i+0x112>
 8017b0e:	6823      	ldr	r3, [r4, #0]
 8017b10:	07db      	lsls	r3, r3, #31
 8017b12:	d508      	bpl.n	8017b26 <_printf_i+0x112>
 8017b14:	6923      	ldr	r3, [r4, #16]
 8017b16:	6862      	ldr	r2, [r4, #4]
 8017b18:	429a      	cmp	r2, r3
 8017b1a:	bfde      	ittt	le
 8017b1c:	2330      	movle	r3, #48	; 0x30
 8017b1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017b22:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017b26:	ebac 0305 	sub.w	r3, ip, r5
 8017b2a:	6123      	str	r3, [r4, #16]
 8017b2c:	f8cd 8000 	str.w	r8, [sp]
 8017b30:	463b      	mov	r3, r7
 8017b32:	aa03      	add	r2, sp, #12
 8017b34:	4621      	mov	r1, r4
 8017b36:	4630      	mov	r0, r6
 8017b38:	f7ff fef6 	bl	8017928 <_printf_common>
 8017b3c:	3001      	adds	r0, #1
 8017b3e:	d14d      	bne.n	8017bdc <_printf_i+0x1c8>
 8017b40:	f04f 30ff 	mov.w	r0, #4294967295
 8017b44:	b005      	add	sp, #20
 8017b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b4a:	4839      	ldr	r0, [pc, #228]	; (8017c30 <_printf_i+0x21c>)
 8017b4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017b50:	6813      	ldr	r3, [r2, #0]
 8017b52:	6821      	ldr	r1, [r4, #0]
 8017b54:	1d1d      	adds	r5, r3, #4
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	6015      	str	r5, [r2, #0]
 8017b5a:	060a      	lsls	r2, r1, #24
 8017b5c:	d50b      	bpl.n	8017b76 <_printf_i+0x162>
 8017b5e:	07ca      	lsls	r2, r1, #31
 8017b60:	bf44      	itt	mi
 8017b62:	f041 0120 	orrmi.w	r1, r1, #32
 8017b66:	6021      	strmi	r1, [r4, #0]
 8017b68:	b91b      	cbnz	r3, 8017b72 <_printf_i+0x15e>
 8017b6a:	6822      	ldr	r2, [r4, #0]
 8017b6c:	f022 0220 	bic.w	r2, r2, #32
 8017b70:	6022      	str	r2, [r4, #0]
 8017b72:	2210      	movs	r2, #16
 8017b74:	e7b7      	b.n	8017ae6 <_printf_i+0xd2>
 8017b76:	064d      	lsls	r5, r1, #25
 8017b78:	bf48      	it	mi
 8017b7a:	b29b      	uxthmi	r3, r3
 8017b7c:	e7ef      	b.n	8017b5e <_printf_i+0x14a>
 8017b7e:	4665      	mov	r5, ip
 8017b80:	fbb3 f1f2 	udiv	r1, r3, r2
 8017b84:	fb02 3311 	mls	r3, r2, r1, r3
 8017b88:	5cc3      	ldrb	r3, [r0, r3]
 8017b8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8017b8e:	460b      	mov	r3, r1
 8017b90:	2900      	cmp	r1, #0
 8017b92:	d1f5      	bne.n	8017b80 <_printf_i+0x16c>
 8017b94:	e7b9      	b.n	8017b0a <_printf_i+0xf6>
 8017b96:	6813      	ldr	r3, [r2, #0]
 8017b98:	6825      	ldr	r5, [r4, #0]
 8017b9a:	6961      	ldr	r1, [r4, #20]
 8017b9c:	1d18      	adds	r0, r3, #4
 8017b9e:	6010      	str	r0, [r2, #0]
 8017ba0:	0628      	lsls	r0, r5, #24
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	d501      	bpl.n	8017baa <_printf_i+0x196>
 8017ba6:	6019      	str	r1, [r3, #0]
 8017ba8:	e002      	b.n	8017bb0 <_printf_i+0x19c>
 8017baa:	066a      	lsls	r2, r5, #25
 8017bac:	d5fb      	bpl.n	8017ba6 <_printf_i+0x192>
 8017bae:	8019      	strh	r1, [r3, #0]
 8017bb0:	2300      	movs	r3, #0
 8017bb2:	6123      	str	r3, [r4, #16]
 8017bb4:	4665      	mov	r5, ip
 8017bb6:	e7b9      	b.n	8017b2c <_printf_i+0x118>
 8017bb8:	6813      	ldr	r3, [r2, #0]
 8017bba:	1d19      	adds	r1, r3, #4
 8017bbc:	6011      	str	r1, [r2, #0]
 8017bbe:	681d      	ldr	r5, [r3, #0]
 8017bc0:	6862      	ldr	r2, [r4, #4]
 8017bc2:	2100      	movs	r1, #0
 8017bc4:	4628      	mov	r0, r5
 8017bc6:	f7e8 fb8b 	bl	80002e0 <memchr>
 8017bca:	b108      	cbz	r0, 8017bd0 <_printf_i+0x1bc>
 8017bcc:	1b40      	subs	r0, r0, r5
 8017bce:	6060      	str	r0, [r4, #4]
 8017bd0:	6863      	ldr	r3, [r4, #4]
 8017bd2:	6123      	str	r3, [r4, #16]
 8017bd4:	2300      	movs	r3, #0
 8017bd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017bda:	e7a7      	b.n	8017b2c <_printf_i+0x118>
 8017bdc:	6923      	ldr	r3, [r4, #16]
 8017bde:	462a      	mov	r2, r5
 8017be0:	4639      	mov	r1, r7
 8017be2:	4630      	mov	r0, r6
 8017be4:	47c0      	blx	r8
 8017be6:	3001      	adds	r0, #1
 8017be8:	d0aa      	beq.n	8017b40 <_printf_i+0x12c>
 8017bea:	6823      	ldr	r3, [r4, #0]
 8017bec:	079b      	lsls	r3, r3, #30
 8017bee:	d413      	bmi.n	8017c18 <_printf_i+0x204>
 8017bf0:	68e0      	ldr	r0, [r4, #12]
 8017bf2:	9b03      	ldr	r3, [sp, #12]
 8017bf4:	4298      	cmp	r0, r3
 8017bf6:	bfb8      	it	lt
 8017bf8:	4618      	movlt	r0, r3
 8017bfa:	e7a3      	b.n	8017b44 <_printf_i+0x130>
 8017bfc:	2301      	movs	r3, #1
 8017bfe:	464a      	mov	r2, r9
 8017c00:	4639      	mov	r1, r7
 8017c02:	4630      	mov	r0, r6
 8017c04:	47c0      	blx	r8
 8017c06:	3001      	adds	r0, #1
 8017c08:	d09a      	beq.n	8017b40 <_printf_i+0x12c>
 8017c0a:	3501      	adds	r5, #1
 8017c0c:	68e3      	ldr	r3, [r4, #12]
 8017c0e:	9a03      	ldr	r2, [sp, #12]
 8017c10:	1a9b      	subs	r3, r3, r2
 8017c12:	42ab      	cmp	r3, r5
 8017c14:	dcf2      	bgt.n	8017bfc <_printf_i+0x1e8>
 8017c16:	e7eb      	b.n	8017bf0 <_printf_i+0x1dc>
 8017c18:	2500      	movs	r5, #0
 8017c1a:	f104 0919 	add.w	r9, r4, #25
 8017c1e:	e7f5      	b.n	8017c0c <_printf_i+0x1f8>
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d1ac      	bne.n	8017b7e <_printf_i+0x16a>
 8017c24:	7803      	ldrb	r3, [r0, #0]
 8017c26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017c2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017c2e:	e76c      	b.n	8017b0a <_printf_i+0xf6>
 8017c30:	0801a42d 	.word	0x0801a42d
 8017c34:	0801a43e 	.word	0x0801a43e

08017c38 <_sbrk_r>:
 8017c38:	b538      	push	{r3, r4, r5, lr}
 8017c3a:	4c06      	ldr	r4, [pc, #24]	; (8017c54 <_sbrk_r+0x1c>)
 8017c3c:	2300      	movs	r3, #0
 8017c3e:	4605      	mov	r5, r0
 8017c40:	4608      	mov	r0, r1
 8017c42:	6023      	str	r3, [r4, #0]
 8017c44:	f7e9 f8fa 	bl	8000e3c <_sbrk>
 8017c48:	1c43      	adds	r3, r0, #1
 8017c4a:	d102      	bne.n	8017c52 <_sbrk_r+0x1a>
 8017c4c:	6823      	ldr	r3, [r4, #0]
 8017c4e:	b103      	cbz	r3, 8017c52 <_sbrk_r+0x1a>
 8017c50:	602b      	str	r3, [r5, #0]
 8017c52:	bd38      	pop	{r3, r4, r5, pc}
 8017c54:	2400d90c 	.word	0x2400d90c

08017c58 <__sread>:
 8017c58:	b510      	push	{r4, lr}
 8017c5a:	460c      	mov	r4, r1
 8017c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c60:	f000 fa96 	bl	8018190 <_read_r>
 8017c64:	2800      	cmp	r0, #0
 8017c66:	bfab      	itete	ge
 8017c68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017c6a:	89a3      	ldrhlt	r3, [r4, #12]
 8017c6c:	181b      	addge	r3, r3, r0
 8017c6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017c72:	bfac      	ite	ge
 8017c74:	6563      	strge	r3, [r4, #84]	; 0x54
 8017c76:	81a3      	strhlt	r3, [r4, #12]
 8017c78:	bd10      	pop	{r4, pc}

08017c7a <__swrite>:
 8017c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c7e:	461f      	mov	r7, r3
 8017c80:	898b      	ldrh	r3, [r1, #12]
 8017c82:	05db      	lsls	r3, r3, #23
 8017c84:	4605      	mov	r5, r0
 8017c86:	460c      	mov	r4, r1
 8017c88:	4616      	mov	r6, r2
 8017c8a:	d505      	bpl.n	8017c98 <__swrite+0x1e>
 8017c8c:	2302      	movs	r3, #2
 8017c8e:	2200      	movs	r2, #0
 8017c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c94:	f000 f9b6 	bl	8018004 <_lseek_r>
 8017c98:	89a3      	ldrh	r3, [r4, #12]
 8017c9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017ca2:	81a3      	strh	r3, [r4, #12]
 8017ca4:	4632      	mov	r2, r6
 8017ca6:	463b      	mov	r3, r7
 8017ca8:	4628      	mov	r0, r5
 8017caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017cae:	f000 b869 	b.w	8017d84 <_write_r>

08017cb2 <__sseek>:
 8017cb2:	b510      	push	{r4, lr}
 8017cb4:	460c      	mov	r4, r1
 8017cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cba:	f000 f9a3 	bl	8018004 <_lseek_r>
 8017cbe:	1c43      	adds	r3, r0, #1
 8017cc0:	89a3      	ldrh	r3, [r4, #12]
 8017cc2:	bf15      	itete	ne
 8017cc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8017cc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017cca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017cce:	81a3      	strheq	r3, [r4, #12]
 8017cd0:	bf18      	it	ne
 8017cd2:	81a3      	strhne	r3, [r4, #12]
 8017cd4:	bd10      	pop	{r4, pc}

08017cd6 <__sclose>:
 8017cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cda:	f000 b8d3 	b.w	8017e84 <_close_r>
	...

08017ce0 <__swbuf_r>:
 8017ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ce2:	460e      	mov	r6, r1
 8017ce4:	4614      	mov	r4, r2
 8017ce6:	4605      	mov	r5, r0
 8017ce8:	b118      	cbz	r0, 8017cf2 <__swbuf_r+0x12>
 8017cea:	6983      	ldr	r3, [r0, #24]
 8017cec:	b90b      	cbnz	r3, 8017cf2 <__swbuf_r+0x12>
 8017cee:	f7ff fbf7 	bl	80174e0 <__sinit>
 8017cf2:	4b21      	ldr	r3, [pc, #132]	; (8017d78 <__swbuf_r+0x98>)
 8017cf4:	429c      	cmp	r4, r3
 8017cf6:	d12a      	bne.n	8017d4e <__swbuf_r+0x6e>
 8017cf8:	686c      	ldr	r4, [r5, #4]
 8017cfa:	69a3      	ldr	r3, [r4, #24]
 8017cfc:	60a3      	str	r3, [r4, #8]
 8017cfe:	89a3      	ldrh	r3, [r4, #12]
 8017d00:	071a      	lsls	r2, r3, #28
 8017d02:	d52e      	bpl.n	8017d62 <__swbuf_r+0x82>
 8017d04:	6923      	ldr	r3, [r4, #16]
 8017d06:	b363      	cbz	r3, 8017d62 <__swbuf_r+0x82>
 8017d08:	6923      	ldr	r3, [r4, #16]
 8017d0a:	6820      	ldr	r0, [r4, #0]
 8017d0c:	1ac0      	subs	r0, r0, r3
 8017d0e:	6963      	ldr	r3, [r4, #20]
 8017d10:	b2f6      	uxtb	r6, r6
 8017d12:	4283      	cmp	r3, r0
 8017d14:	4637      	mov	r7, r6
 8017d16:	dc04      	bgt.n	8017d22 <__swbuf_r+0x42>
 8017d18:	4621      	mov	r1, r4
 8017d1a:	4628      	mov	r0, r5
 8017d1c:	f000 f948 	bl	8017fb0 <_fflush_r>
 8017d20:	bb28      	cbnz	r0, 8017d6e <__swbuf_r+0x8e>
 8017d22:	68a3      	ldr	r3, [r4, #8]
 8017d24:	3b01      	subs	r3, #1
 8017d26:	60a3      	str	r3, [r4, #8]
 8017d28:	6823      	ldr	r3, [r4, #0]
 8017d2a:	1c5a      	adds	r2, r3, #1
 8017d2c:	6022      	str	r2, [r4, #0]
 8017d2e:	701e      	strb	r6, [r3, #0]
 8017d30:	6963      	ldr	r3, [r4, #20]
 8017d32:	3001      	adds	r0, #1
 8017d34:	4283      	cmp	r3, r0
 8017d36:	d004      	beq.n	8017d42 <__swbuf_r+0x62>
 8017d38:	89a3      	ldrh	r3, [r4, #12]
 8017d3a:	07db      	lsls	r3, r3, #31
 8017d3c:	d519      	bpl.n	8017d72 <__swbuf_r+0x92>
 8017d3e:	2e0a      	cmp	r6, #10
 8017d40:	d117      	bne.n	8017d72 <__swbuf_r+0x92>
 8017d42:	4621      	mov	r1, r4
 8017d44:	4628      	mov	r0, r5
 8017d46:	f000 f933 	bl	8017fb0 <_fflush_r>
 8017d4a:	b190      	cbz	r0, 8017d72 <__swbuf_r+0x92>
 8017d4c:	e00f      	b.n	8017d6e <__swbuf_r+0x8e>
 8017d4e:	4b0b      	ldr	r3, [pc, #44]	; (8017d7c <__swbuf_r+0x9c>)
 8017d50:	429c      	cmp	r4, r3
 8017d52:	d101      	bne.n	8017d58 <__swbuf_r+0x78>
 8017d54:	68ac      	ldr	r4, [r5, #8]
 8017d56:	e7d0      	b.n	8017cfa <__swbuf_r+0x1a>
 8017d58:	4b09      	ldr	r3, [pc, #36]	; (8017d80 <__swbuf_r+0xa0>)
 8017d5a:	429c      	cmp	r4, r3
 8017d5c:	bf08      	it	eq
 8017d5e:	68ec      	ldreq	r4, [r5, #12]
 8017d60:	e7cb      	b.n	8017cfa <__swbuf_r+0x1a>
 8017d62:	4621      	mov	r1, r4
 8017d64:	4628      	mov	r0, r5
 8017d66:	f000 f81f 	bl	8017da8 <__swsetup_r>
 8017d6a:	2800      	cmp	r0, #0
 8017d6c:	d0cc      	beq.n	8017d08 <__swbuf_r+0x28>
 8017d6e:	f04f 37ff 	mov.w	r7, #4294967295
 8017d72:	4638      	mov	r0, r7
 8017d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d76:	bf00      	nop
 8017d78:	0801a3dc 	.word	0x0801a3dc
 8017d7c:	0801a3fc 	.word	0x0801a3fc
 8017d80:	0801a3bc 	.word	0x0801a3bc

08017d84 <_write_r>:
 8017d84:	b538      	push	{r3, r4, r5, lr}
 8017d86:	4c07      	ldr	r4, [pc, #28]	; (8017da4 <_write_r+0x20>)
 8017d88:	4605      	mov	r5, r0
 8017d8a:	4608      	mov	r0, r1
 8017d8c:	4611      	mov	r1, r2
 8017d8e:	2200      	movs	r2, #0
 8017d90:	6022      	str	r2, [r4, #0]
 8017d92:	461a      	mov	r2, r3
 8017d94:	f7e9 f801 	bl	8000d9a <_write>
 8017d98:	1c43      	adds	r3, r0, #1
 8017d9a:	d102      	bne.n	8017da2 <_write_r+0x1e>
 8017d9c:	6823      	ldr	r3, [r4, #0]
 8017d9e:	b103      	cbz	r3, 8017da2 <_write_r+0x1e>
 8017da0:	602b      	str	r3, [r5, #0]
 8017da2:	bd38      	pop	{r3, r4, r5, pc}
 8017da4:	2400d90c 	.word	0x2400d90c

08017da8 <__swsetup_r>:
 8017da8:	4b32      	ldr	r3, [pc, #200]	; (8017e74 <__swsetup_r+0xcc>)
 8017daa:	b570      	push	{r4, r5, r6, lr}
 8017dac:	681d      	ldr	r5, [r3, #0]
 8017dae:	4606      	mov	r6, r0
 8017db0:	460c      	mov	r4, r1
 8017db2:	b125      	cbz	r5, 8017dbe <__swsetup_r+0x16>
 8017db4:	69ab      	ldr	r3, [r5, #24]
 8017db6:	b913      	cbnz	r3, 8017dbe <__swsetup_r+0x16>
 8017db8:	4628      	mov	r0, r5
 8017dba:	f7ff fb91 	bl	80174e0 <__sinit>
 8017dbe:	4b2e      	ldr	r3, [pc, #184]	; (8017e78 <__swsetup_r+0xd0>)
 8017dc0:	429c      	cmp	r4, r3
 8017dc2:	d10f      	bne.n	8017de4 <__swsetup_r+0x3c>
 8017dc4:	686c      	ldr	r4, [r5, #4]
 8017dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017dca:	b29a      	uxth	r2, r3
 8017dcc:	0715      	lsls	r5, r2, #28
 8017dce:	d42c      	bmi.n	8017e2a <__swsetup_r+0x82>
 8017dd0:	06d0      	lsls	r0, r2, #27
 8017dd2:	d411      	bmi.n	8017df8 <__swsetup_r+0x50>
 8017dd4:	2209      	movs	r2, #9
 8017dd6:	6032      	str	r2, [r6, #0]
 8017dd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ddc:	81a3      	strh	r3, [r4, #12]
 8017dde:	f04f 30ff 	mov.w	r0, #4294967295
 8017de2:	e03e      	b.n	8017e62 <__swsetup_r+0xba>
 8017de4:	4b25      	ldr	r3, [pc, #148]	; (8017e7c <__swsetup_r+0xd4>)
 8017de6:	429c      	cmp	r4, r3
 8017de8:	d101      	bne.n	8017dee <__swsetup_r+0x46>
 8017dea:	68ac      	ldr	r4, [r5, #8]
 8017dec:	e7eb      	b.n	8017dc6 <__swsetup_r+0x1e>
 8017dee:	4b24      	ldr	r3, [pc, #144]	; (8017e80 <__swsetup_r+0xd8>)
 8017df0:	429c      	cmp	r4, r3
 8017df2:	bf08      	it	eq
 8017df4:	68ec      	ldreq	r4, [r5, #12]
 8017df6:	e7e6      	b.n	8017dc6 <__swsetup_r+0x1e>
 8017df8:	0751      	lsls	r1, r2, #29
 8017dfa:	d512      	bpl.n	8017e22 <__swsetup_r+0x7a>
 8017dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017dfe:	b141      	cbz	r1, 8017e12 <__swsetup_r+0x6a>
 8017e00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e04:	4299      	cmp	r1, r3
 8017e06:	d002      	beq.n	8017e0e <__swsetup_r+0x66>
 8017e08:	4630      	mov	r0, r6
 8017e0a:	f000 f973 	bl	80180f4 <_free_r>
 8017e0e:	2300      	movs	r3, #0
 8017e10:	6363      	str	r3, [r4, #52]	; 0x34
 8017e12:	89a3      	ldrh	r3, [r4, #12]
 8017e14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017e18:	81a3      	strh	r3, [r4, #12]
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	6063      	str	r3, [r4, #4]
 8017e1e:	6923      	ldr	r3, [r4, #16]
 8017e20:	6023      	str	r3, [r4, #0]
 8017e22:	89a3      	ldrh	r3, [r4, #12]
 8017e24:	f043 0308 	orr.w	r3, r3, #8
 8017e28:	81a3      	strh	r3, [r4, #12]
 8017e2a:	6923      	ldr	r3, [r4, #16]
 8017e2c:	b94b      	cbnz	r3, 8017e42 <__swsetup_r+0x9a>
 8017e2e:	89a3      	ldrh	r3, [r4, #12]
 8017e30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017e38:	d003      	beq.n	8017e42 <__swsetup_r+0x9a>
 8017e3a:	4621      	mov	r1, r4
 8017e3c:	4630      	mov	r0, r6
 8017e3e:	f000 f917 	bl	8018070 <__smakebuf_r>
 8017e42:	89a2      	ldrh	r2, [r4, #12]
 8017e44:	f012 0301 	ands.w	r3, r2, #1
 8017e48:	d00c      	beq.n	8017e64 <__swsetup_r+0xbc>
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	60a3      	str	r3, [r4, #8]
 8017e4e:	6963      	ldr	r3, [r4, #20]
 8017e50:	425b      	negs	r3, r3
 8017e52:	61a3      	str	r3, [r4, #24]
 8017e54:	6923      	ldr	r3, [r4, #16]
 8017e56:	b953      	cbnz	r3, 8017e6e <__swsetup_r+0xc6>
 8017e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e5c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017e60:	d1ba      	bne.n	8017dd8 <__swsetup_r+0x30>
 8017e62:	bd70      	pop	{r4, r5, r6, pc}
 8017e64:	0792      	lsls	r2, r2, #30
 8017e66:	bf58      	it	pl
 8017e68:	6963      	ldrpl	r3, [r4, #20]
 8017e6a:	60a3      	str	r3, [r4, #8]
 8017e6c:	e7f2      	b.n	8017e54 <__swsetup_r+0xac>
 8017e6e:	2000      	movs	r0, #0
 8017e70:	e7f7      	b.n	8017e62 <__swsetup_r+0xba>
 8017e72:	bf00      	nop
 8017e74:	2400002c 	.word	0x2400002c
 8017e78:	0801a3dc 	.word	0x0801a3dc
 8017e7c:	0801a3fc 	.word	0x0801a3fc
 8017e80:	0801a3bc 	.word	0x0801a3bc

08017e84 <_close_r>:
 8017e84:	b538      	push	{r3, r4, r5, lr}
 8017e86:	4c06      	ldr	r4, [pc, #24]	; (8017ea0 <_close_r+0x1c>)
 8017e88:	2300      	movs	r3, #0
 8017e8a:	4605      	mov	r5, r0
 8017e8c:	4608      	mov	r0, r1
 8017e8e:	6023      	str	r3, [r4, #0]
 8017e90:	f7e8 ff9f 	bl	8000dd2 <_close>
 8017e94:	1c43      	adds	r3, r0, #1
 8017e96:	d102      	bne.n	8017e9e <_close_r+0x1a>
 8017e98:	6823      	ldr	r3, [r4, #0]
 8017e9a:	b103      	cbz	r3, 8017e9e <_close_r+0x1a>
 8017e9c:	602b      	str	r3, [r5, #0]
 8017e9e:	bd38      	pop	{r3, r4, r5, pc}
 8017ea0:	2400d90c 	.word	0x2400d90c

08017ea4 <__sflush_r>:
 8017ea4:	898a      	ldrh	r2, [r1, #12]
 8017ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017eaa:	4605      	mov	r5, r0
 8017eac:	0710      	lsls	r0, r2, #28
 8017eae:	460c      	mov	r4, r1
 8017eb0:	d458      	bmi.n	8017f64 <__sflush_r+0xc0>
 8017eb2:	684b      	ldr	r3, [r1, #4]
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	dc05      	bgt.n	8017ec4 <__sflush_r+0x20>
 8017eb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	dc02      	bgt.n	8017ec4 <__sflush_r+0x20>
 8017ebe:	2000      	movs	r0, #0
 8017ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017ec6:	2e00      	cmp	r6, #0
 8017ec8:	d0f9      	beq.n	8017ebe <__sflush_r+0x1a>
 8017eca:	2300      	movs	r3, #0
 8017ecc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017ed0:	682f      	ldr	r7, [r5, #0]
 8017ed2:	6a21      	ldr	r1, [r4, #32]
 8017ed4:	602b      	str	r3, [r5, #0]
 8017ed6:	d032      	beq.n	8017f3e <__sflush_r+0x9a>
 8017ed8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017eda:	89a3      	ldrh	r3, [r4, #12]
 8017edc:	075a      	lsls	r2, r3, #29
 8017ede:	d505      	bpl.n	8017eec <__sflush_r+0x48>
 8017ee0:	6863      	ldr	r3, [r4, #4]
 8017ee2:	1ac0      	subs	r0, r0, r3
 8017ee4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017ee6:	b10b      	cbz	r3, 8017eec <__sflush_r+0x48>
 8017ee8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017eea:	1ac0      	subs	r0, r0, r3
 8017eec:	2300      	movs	r3, #0
 8017eee:	4602      	mov	r2, r0
 8017ef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017ef2:	6a21      	ldr	r1, [r4, #32]
 8017ef4:	4628      	mov	r0, r5
 8017ef6:	47b0      	blx	r6
 8017ef8:	1c43      	adds	r3, r0, #1
 8017efa:	89a3      	ldrh	r3, [r4, #12]
 8017efc:	d106      	bne.n	8017f0c <__sflush_r+0x68>
 8017efe:	6829      	ldr	r1, [r5, #0]
 8017f00:	291d      	cmp	r1, #29
 8017f02:	d848      	bhi.n	8017f96 <__sflush_r+0xf2>
 8017f04:	4a29      	ldr	r2, [pc, #164]	; (8017fac <__sflush_r+0x108>)
 8017f06:	40ca      	lsrs	r2, r1
 8017f08:	07d6      	lsls	r6, r2, #31
 8017f0a:	d544      	bpl.n	8017f96 <__sflush_r+0xf2>
 8017f0c:	2200      	movs	r2, #0
 8017f0e:	6062      	str	r2, [r4, #4]
 8017f10:	04d9      	lsls	r1, r3, #19
 8017f12:	6922      	ldr	r2, [r4, #16]
 8017f14:	6022      	str	r2, [r4, #0]
 8017f16:	d504      	bpl.n	8017f22 <__sflush_r+0x7e>
 8017f18:	1c42      	adds	r2, r0, #1
 8017f1a:	d101      	bne.n	8017f20 <__sflush_r+0x7c>
 8017f1c:	682b      	ldr	r3, [r5, #0]
 8017f1e:	b903      	cbnz	r3, 8017f22 <__sflush_r+0x7e>
 8017f20:	6560      	str	r0, [r4, #84]	; 0x54
 8017f22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017f24:	602f      	str	r7, [r5, #0]
 8017f26:	2900      	cmp	r1, #0
 8017f28:	d0c9      	beq.n	8017ebe <__sflush_r+0x1a>
 8017f2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017f2e:	4299      	cmp	r1, r3
 8017f30:	d002      	beq.n	8017f38 <__sflush_r+0x94>
 8017f32:	4628      	mov	r0, r5
 8017f34:	f000 f8de 	bl	80180f4 <_free_r>
 8017f38:	2000      	movs	r0, #0
 8017f3a:	6360      	str	r0, [r4, #52]	; 0x34
 8017f3c:	e7c0      	b.n	8017ec0 <__sflush_r+0x1c>
 8017f3e:	2301      	movs	r3, #1
 8017f40:	4628      	mov	r0, r5
 8017f42:	47b0      	blx	r6
 8017f44:	1c41      	adds	r1, r0, #1
 8017f46:	d1c8      	bne.n	8017eda <__sflush_r+0x36>
 8017f48:	682b      	ldr	r3, [r5, #0]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d0c5      	beq.n	8017eda <__sflush_r+0x36>
 8017f4e:	2b1d      	cmp	r3, #29
 8017f50:	d001      	beq.n	8017f56 <__sflush_r+0xb2>
 8017f52:	2b16      	cmp	r3, #22
 8017f54:	d101      	bne.n	8017f5a <__sflush_r+0xb6>
 8017f56:	602f      	str	r7, [r5, #0]
 8017f58:	e7b1      	b.n	8017ebe <__sflush_r+0x1a>
 8017f5a:	89a3      	ldrh	r3, [r4, #12]
 8017f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f60:	81a3      	strh	r3, [r4, #12]
 8017f62:	e7ad      	b.n	8017ec0 <__sflush_r+0x1c>
 8017f64:	690f      	ldr	r7, [r1, #16]
 8017f66:	2f00      	cmp	r7, #0
 8017f68:	d0a9      	beq.n	8017ebe <__sflush_r+0x1a>
 8017f6a:	0793      	lsls	r3, r2, #30
 8017f6c:	680e      	ldr	r6, [r1, #0]
 8017f6e:	bf08      	it	eq
 8017f70:	694b      	ldreq	r3, [r1, #20]
 8017f72:	600f      	str	r7, [r1, #0]
 8017f74:	bf18      	it	ne
 8017f76:	2300      	movne	r3, #0
 8017f78:	eba6 0807 	sub.w	r8, r6, r7
 8017f7c:	608b      	str	r3, [r1, #8]
 8017f7e:	f1b8 0f00 	cmp.w	r8, #0
 8017f82:	dd9c      	ble.n	8017ebe <__sflush_r+0x1a>
 8017f84:	4643      	mov	r3, r8
 8017f86:	463a      	mov	r2, r7
 8017f88:	6a21      	ldr	r1, [r4, #32]
 8017f8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017f8c:	4628      	mov	r0, r5
 8017f8e:	47b0      	blx	r6
 8017f90:	2800      	cmp	r0, #0
 8017f92:	dc06      	bgt.n	8017fa2 <__sflush_r+0xfe>
 8017f94:	89a3      	ldrh	r3, [r4, #12]
 8017f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f9a:	81a3      	strh	r3, [r4, #12]
 8017f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8017fa0:	e78e      	b.n	8017ec0 <__sflush_r+0x1c>
 8017fa2:	4407      	add	r7, r0
 8017fa4:	eba8 0800 	sub.w	r8, r8, r0
 8017fa8:	e7e9      	b.n	8017f7e <__sflush_r+0xda>
 8017faa:	bf00      	nop
 8017fac:	20400001 	.word	0x20400001

08017fb0 <_fflush_r>:
 8017fb0:	b538      	push	{r3, r4, r5, lr}
 8017fb2:	690b      	ldr	r3, [r1, #16]
 8017fb4:	4605      	mov	r5, r0
 8017fb6:	460c      	mov	r4, r1
 8017fb8:	b1db      	cbz	r3, 8017ff2 <_fflush_r+0x42>
 8017fba:	b118      	cbz	r0, 8017fc4 <_fflush_r+0x14>
 8017fbc:	6983      	ldr	r3, [r0, #24]
 8017fbe:	b90b      	cbnz	r3, 8017fc4 <_fflush_r+0x14>
 8017fc0:	f7ff fa8e 	bl	80174e0 <__sinit>
 8017fc4:	4b0c      	ldr	r3, [pc, #48]	; (8017ff8 <_fflush_r+0x48>)
 8017fc6:	429c      	cmp	r4, r3
 8017fc8:	d109      	bne.n	8017fde <_fflush_r+0x2e>
 8017fca:	686c      	ldr	r4, [r5, #4]
 8017fcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017fd0:	b17b      	cbz	r3, 8017ff2 <_fflush_r+0x42>
 8017fd2:	4621      	mov	r1, r4
 8017fd4:	4628      	mov	r0, r5
 8017fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017fda:	f7ff bf63 	b.w	8017ea4 <__sflush_r>
 8017fde:	4b07      	ldr	r3, [pc, #28]	; (8017ffc <_fflush_r+0x4c>)
 8017fe0:	429c      	cmp	r4, r3
 8017fe2:	d101      	bne.n	8017fe8 <_fflush_r+0x38>
 8017fe4:	68ac      	ldr	r4, [r5, #8]
 8017fe6:	e7f1      	b.n	8017fcc <_fflush_r+0x1c>
 8017fe8:	4b05      	ldr	r3, [pc, #20]	; (8018000 <_fflush_r+0x50>)
 8017fea:	429c      	cmp	r4, r3
 8017fec:	bf08      	it	eq
 8017fee:	68ec      	ldreq	r4, [r5, #12]
 8017ff0:	e7ec      	b.n	8017fcc <_fflush_r+0x1c>
 8017ff2:	2000      	movs	r0, #0
 8017ff4:	bd38      	pop	{r3, r4, r5, pc}
 8017ff6:	bf00      	nop
 8017ff8:	0801a3dc 	.word	0x0801a3dc
 8017ffc:	0801a3fc 	.word	0x0801a3fc
 8018000:	0801a3bc 	.word	0x0801a3bc

08018004 <_lseek_r>:
 8018004:	b538      	push	{r3, r4, r5, lr}
 8018006:	4c07      	ldr	r4, [pc, #28]	; (8018024 <_lseek_r+0x20>)
 8018008:	4605      	mov	r5, r0
 801800a:	4608      	mov	r0, r1
 801800c:	4611      	mov	r1, r2
 801800e:	2200      	movs	r2, #0
 8018010:	6022      	str	r2, [r4, #0]
 8018012:	461a      	mov	r2, r3
 8018014:	f7e8 ff04 	bl	8000e20 <_lseek>
 8018018:	1c43      	adds	r3, r0, #1
 801801a:	d102      	bne.n	8018022 <_lseek_r+0x1e>
 801801c:	6823      	ldr	r3, [r4, #0]
 801801e:	b103      	cbz	r3, 8018022 <_lseek_r+0x1e>
 8018020:	602b      	str	r3, [r5, #0]
 8018022:	bd38      	pop	{r3, r4, r5, pc}
 8018024:	2400d90c 	.word	0x2400d90c

08018028 <__swhatbuf_r>:
 8018028:	b570      	push	{r4, r5, r6, lr}
 801802a:	460e      	mov	r6, r1
 801802c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018030:	2900      	cmp	r1, #0
 8018032:	b096      	sub	sp, #88	; 0x58
 8018034:	4614      	mov	r4, r2
 8018036:	461d      	mov	r5, r3
 8018038:	da07      	bge.n	801804a <__swhatbuf_r+0x22>
 801803a:	2300      	movs	r3, #0
 801803c:	602b      	str	r3, [r5, #0]
 801803e:	89b3      	ldrh	r3, [r6, #12]
 8018040:	061a      	lsls	r2, r3, #24
 8018042:	d410      	bmi.n	8018066 <__swhatbuf_r+0x3e>
 8018044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018048:	e00e      	b.n	8018068 <__swhatbuf_r+0x40>
 801804a:	466a      	mov	r2, sp
 801804c:	f000 f8b2 	bl	80181b4 <_fstat_r>
 8018050:	2800      	cmp	r0, #0
 8018052:	dbf2      	blt.n	801803a <__swhatbuf_r+0x12>
 8018054:	9a01      	ldr	r2, [sp, #4]
 8018056:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801805a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801805e:	425a      	negs	r2, r3
 8018060:	415a      	adcs	r2, r3
 8018062:	602a      	str	r2, [r5, #0]
 8018064:	e7ee      	b.n	8018044 <__swhatbuf_r+0x1c>
 8018066:	2340      	movs	r3, #64	; 0x40
 8018068:	2000      	movs	r0, #0
 801806a:	6023      	str	r3, [r4, #0]
 801806c:	b016      	add	sp, #88	; 0x58
 801806e:	bd70      	pop	{r4, r5, r6, pc}

08018070 <__smakebuf_r>:
 8018070:	898b      	ldrh	r3, [r1, #12]
 8018072:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018074:	079d      	lsls	r5, r3, #30
 8018076:	4606      	mov	r6, r0
 8018078:	460c      	mov	r4, r1
 801807a:	d507      	bpl.n	801808c <__smakebuf_r+0x1c>
 801807c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018080:	6023      	str	r3, [r4, #0]
 8018082:	6123      	str	r3, [r4, #16]
 8018084:	2301      	movs	r3, #1
 8018086:	6163      	str	r3, [r4, #20]
 8018088:	b002      	add	sp, #8
 801808a:	bd70      	pop	{r4, r5, r6, pc}
 801808c:	ab01      	add	r3, sp, #4
 801808e:	466a      	mov	r2, sp
 8018090:	f7ff ffca 	bl	8018028 <__swhatbuf_r>
 8018094:	9900      	ldr	r1, [sp, #0]
 8018096:	4605      	mov	r5, r0
 8018098:	4630      	mov	r0, r6
 801809a:	f7ff faab 	bl	80175f4 <_malloc_r>
 801809e:	b948      	cbnz	r0, 80180b4 <__smakebuf_r+0x44>
 80180a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180a4:	059a      	lsls	r2, r3, #22
 80180a6:	d4ef      	bmi.n	8018088 <__smakebuf_r+0x18>
 80180a8:	f023 0303 	bic.w	r3, r3, #3
 80180ac:	f043 0302 	orr.w	r3, r3, #2
 80180b0:	81a3      	strh	r3, [r4, #12]
 80180b2:	e7e3      	b.n	801807c <__smakebuf_r+0xc>
 80180b4:	4b0d      	ldr	r3, [pc, #52]	; (80180ec <__smakebuf_r+0x7c>)
 80180b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80180b8:	89a3      	ldrh	r3, [r4, #12]
 80180ba:	6020      	str	r0, [r4, #0]
 80180bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80180c0:	81a3      	strh	r3, [r4, #12]
 80180c2:	9b00      	ldr	r3, [sp, #0]
 80180c4:	6163      	str	r3, [r4, #20]
 80180c6:	9b01      	ldr	r3, [sp, #4]
 80180c8:	6120      	str	r0, [r4, #16]
 80180ca:	b15b      	cbz	r3, 80180e4 <__smakebuf_r+0x74>
 80180cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80180d0:	4630      	mov	r0, r6
 80180d2:	f000 f881 	bl	80181d8 <_isatty_r>
 80180d6:	b128      	cbz	r0, 80180e4 <__smakebuf_r+0x74>
 80180d8:	89a3      	ldrh	r3, [r4, #12]
 80180da:	f023 0303 	bic.w	r3, r3, #3
 80180de:	f043 0301 	orr.w	r3, r3, #1
 80180e2:	81a3      	strh	r3, [r4, #12]
 80180e4:	89a3      	ldrh	r3, [r4, #12]
 80180e6:	431d      	orrs	r5, r3
 80180e8:	81a5      	strh	r5, [r4, #12]
 80180ea:	e7cd      	b.n	8018088 <__smakebuf_r+0x18>
 80180ec:	080174a9 	.word	0x080174a9

080180f0 <__malloc_lock>:
 80180f0:	4770      	bx	lr

080180f2 <__malloc_unlock>:
 80180f2:	4770      	bx	lr

080180f4 <_free_r>:
 80180f4:	b538      	push	{r3, r4, r5, lr}
 80180f6:	4605      	mov	r5, r0
 80180f8:	2900      	cmp	r1, #0
 80180fa:	d045      	beq.n	8018188 <_free_r+0x94>
 80180fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018100:	1f0c      	subs	r4, r1, #4
 8018102:	2b00      	cmp	r3, #0
 8018104:	bfb8      	it	lt
 8018106:	18e4      	addlt	r4, r4, r3
 8018108:	f7ff fff2 	bl	80180f0 <__malloc_lock>
 801810c:	4a1f      	ldr	r2, [pc, #124]	; (801818c <_free_r+0x98>)
 801810e:	6813      	ldr	r3, [r2, #0]
 8018110:	4610      	mov	r0, r2
 8018112:	b933      	cbnz	r3, 8018122 <_free_r+0x2e>
 8018114:	6063      	str	r3, [r4, #4]
 8018116:	6014      	str	r4, [r2, #0]
 8018118:	4628      	mov	r0, r5
 801811a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801811e:	f7ff bfe8 	b.w	80180f2 <__malloc_unlock>
 8018122:	42a3      	cmp	r3, r4
 8018124:	d90c      	bls.n	8018140 <_free_r+0x4c>
 8018126:	6821      	ldr	r1, [r4, #0]
 8018128:	1862      	adds	r2, r4, r1
 801812a:	4293      	cmp	r3, r2
 801812c:	bf04      	itt	eq
 801812e:	681a      	ldreq	r2, [r3, #0]
 8018130:	685b      	ldreq	r3, [r3, #4]
 8018132:	6063      	str	r3, [r4, #4]
 8018134:	bf04      	itt	eq
 8018136:	1852      	addeq	r2, r2, r1
 8018138:	6022      	streq	r2, [r4, #0]
 801813a:	6004      	str	r4, [r0, #0]
 801813c:	e7ec      	b.n	8018118 <_free_r+0x24>
 801813e:	4613      	mov	r3, r2
 8018140:	685a      	ldr	r2, [r3, #4]
 8018142:	b10a      	cbz	r2, 8018148 <_free_r+0x54>
 8018144:	42a2      	cmp	r2, r4
 8018146:	d9fa      	bls.n	801813e <_free_r+0x4a>
 8018148:	6819      	ldr	r1, [r3, #0]
 801814a:	1858      	adds	r0, r3, r1
 801814c:	42a0      	cmp	r0, r4
 801814e:	d10b      	bne.n	8018168 <_free_r+0x74>
 8018150:	6820      	ldr	r0, [r4, #0]
 8018152:	4401      	add	r1, r0
 8018154:	1858      	adds	r0, r3, r1
 8018156:	4282      	cmp	r2, r0
 8018158:	6019      	str	r1, [r3, #0]
 801815a:	d1dd      	bne.n	8018118 <_free_r+0x24>
 801815c:	6810      	ldr	r0, [r2, #0]
 801815e:	6852      	ldr	r2, [r2, #4]
 8018160:	605a      	str	r2, [r3, #4]
 8018162:	4401      	add	r1, r0
 8018164:	6019      	str	r1, [r3, #0]
 8018166:	e7d7      	b.n	8018118 <_free_r+0x24>
 8018168:	d902      	bls.n	8018170 <_free_r+0x7c>
 801816a:	230c      	movs	r3, #12
 801816c:	602b      	str	r3, [r5, #0]
 801816e:	e7d3      	b.n	8018118 <_free_r+0x24>
 8018170:	6820      	ldr	r0, [r4, #0]
 8018172:	1821      	adds	r1, r4, r0
 8018174:	428a      	cmp	r2, r1
 8018176:	bf04      	itt	eq
 8018178:	6811      	ldreq	r1, [r2, #0]
 801817a:	6852      	ldreq	r2, [r2, #4]
 801817c:	6062      	str	r2, [r4, #4]
 801817e:	bf04      	itt	eq
 8018180:	1809      	addeq	r1, r1, r0
 8018182:	6021      	streq	r1, [r4, #0]
 8018184:	605c      	str	r4, [r3, #4]
 8018186:	e7c7      	b.n	8018118 <_free_r+0x24>
 8018188:	bd38      	pop	{r3, r4, r5, pc}
 801818a:	bf00      	nop
 801818c:	2400a538 	.word	0x2400a538

08018190 <_read_r>:
 8018190:	b538      	push	{r3, r4, r5, lr}
 8018192:	4c07      	ldr	r4, [pc, #28]	; (80181b0 <_read_r+0x20>)
 8018194:	4605      	mov	r5, r0
 8018196:	4608      	mov	r0, r1
 8018198:	4611      	mov	r1, r2
 801819a:	2200      	movs	r2, #0
 801819c:	6022      	str	r2, [r4, #0]
 801819e:	461a      	mov	r2, r3
 80181a0:	f7e8 fdde 	bl	8000d60 <_read>
 80181a4:	1c43      	adds	r3, r0, #1
 80181a6:	d102      	bne.n	80181ae <_read_r+0x1e>
 80181a8:	6823      	ldr	r3, [r4, #0]
 80181aa:	b103      	cbz	r3, 80181ae <_read_r+0x1e>
 80181ac:	602b      	str	r3, [r5, #0]
 80181ae:	bd38      	pop	{r3, r4, r5, pc}
 80181b0:	2400d90c 	.word	0x2400d90c

080181b4 <_fstat_r>:
 80181b4:	b538      	push	{r3, r4, r5, lr}
 80181b6:	4c07      	ldr	r4, [pc, #28]	; (80181d4 <_fstat_r+0x20>)
 80181b8:	2300      	movs	r3, #0
 80181ba:	4605      	mov	r5, r0
 80181bc:	4608      	mov	r0, r1
 80181be:	4611      	mov	r1, r2
 80181c0:	6023      	str	r3, [r4, #0]
 80181c2:	f7e8 fe12 	bl	8000dea <_fstat>
 80181c6:	1c43      	adds	r3, r0, #1
 80181c8:	d102      	bne.n	80181d0 <_fstat_r+0x1c>
 80181ca:	6823      	ldr	r3, [r4, #0]
 80181cc:	b103      	cbz	r3, 80181d0 <_fstat_r+0x1c>
 80181ce:	602b      	str	r3, [r5, #0]
 80181d0:	bd38      	pop	{r3, r4, r5, pc}
 80181d2:	bf00      	nop
 80181d4:	2400d90c 	.word	0x2400d90c

080181d8 <_isatty_r>:
 80181d8:	b538      	push	{r3, r4, r5, lr}
 80181da:	4c06      	ldr	r4, [pc, #24]	; (80181f4 <_isatty_r+0x1c>)
 80181dc:	2300      	movs	r3, #0
 80181de:	4605      	mov	r5, r0
 80181e0:	4608      	mov	r0, r1
 80181e2:	6023      	str	r3, [r4, #0]
 80181e4:	f7e8 fe11 	bl	8000e0a <_isatty>
 80181e8:	1c43      	adds	r3, r0, #1
 80181ea:	d102      	bne.n	80181f2 <_isatty_r+0x1a>
 80181ec:	6823      	ldr	r3, [r4, #0]
 80181ee:	b103      	cbz	r3, 80181f2 <_isatty_r+0x1a>
 80181f0:	602b      	str	r3, [r5, #0]
 80181f2:	bd38      	pop	{r3, r4, r5, pc}
 80181f4:	2400d90c 	.word	0x2400d90c

080181f8 <_init>:
 80181f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181fa:	bf00      	nop
 80181fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181fe:	bc08      	pop	{r3}
 8018200:	469e      	mov	lr, r3
 8018202:	4770      	bx	lr

08018204 <_fini>:
 8018204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018206:	bf00      	nop
 8018208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801820a:	bc08      	pop	{r3}
 801820c:	469e      	mov	lr, r3
 801820e:	4770      	bx	lr
