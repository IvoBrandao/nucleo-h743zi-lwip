
Nucleo_H743ZI_UDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018844  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000231c  08018ae4  08018ae4  00028ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ae00  0801ae00  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  0801ae00  0801ae00  0002ae00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ae08  0801ae08  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ae08  0801ae08  0002ae08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ae0c  0801ae0c  0002ae0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  24000000  0801ae10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00024de0  24000090  0801aea0  00030090  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  24024e70  0801aea0  00034e70  2**0
                  ALLOC
 11 .lwip_sec     00041a00  30000000  30000000  00040000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00051daa  00000000  00000000  000300be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00008920  00000000  00000000  00081e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00002448  00000000  00000000  0008a788  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000021d0  00000000  00000000  0008cbd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000470d0  00000000  00000000  0008eda0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0003381a  00000000  00000000  000d5e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    001820bd  00000000  00000000  0010968a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0028b747  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000099a4  00000000  00000000  0028b7c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000090 	.word	0x24000090
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018acc 	.word	0x08018acc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000094 	.word	0x24000094
 80002dc:	08018acc 	.word	0x08018acc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
	...

08000690 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4a07      	ldr	r2, [pc, #28]	; (80006bc <vApplicationGetIdleTaskMemory+0x2c>)
 80006a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <vApplicationGetIdleTaskMemory+0x30>)
 80006a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ae:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	240000ac 	.word	0x240000ac
 80006c0:	24000100 	.word	0x24000100

080006c4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80006d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	4a06      	ldr	r2, [pc, #24]	; (80006f4 <vApplicationGetTimerTaskMemory+0x30>)
 80006da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006e2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80006e4:	bf00      	nop
 80006e6:	3714      	adds	r7, #20
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	24001100 	.word	0x24001100
 80006f4:	24001154 	.word	0x24001154

080006f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006f8:	b5b0      	push	{r4, r5, r7, lr}
 80006fa:	b09c      	sub	sp, #112	; 0x70
 80006fc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of StartupTask */
  osThreadDef(StartupTask, Task_Startup, osPriorityNormal, 0, 2048);
 80006fe:	4b27      	ldr	r3, [pc, #156]	; (800079c <MX_FREERTOS_Init+0xa4>)
 8000700:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000704:	461d      	mov	r5, r3
 8000706:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800070e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StartupTaskHandle = osThreadCreate(osThread(StartupTask), NULL);
 8000712:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f00a fdd4 	bl	800b2c6 <osThreadCreate>
 800071e:	4602      	mov	r2, r0
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_FREERTOS_Init+0xa8>)
 8000722:	601a      	str	r2, [r3, #0]

  /* definition and creation of HeartBeat_Task */
  osThreadDef(HeartBeat_Task, Task_HeartBeat, osPriorityNormal, 0, 2048);
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_FREERTOS_Init+0xac>)
 8000726:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800072a:	461d      	mov	r5, r3
 800072c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000730:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000734:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HeartBeat_TaskHandle = osThreadCreate(osThread(HeartBeat_Task), NULL);
 8000738:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f00a fdc1 	bl	800b2c6 <osThreadCreate>
 8000744:	4602      	mov	r2, r0
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <MX_FREERTOS_Init+0xb0>)
 8000748:	601a      	str	r2, [r3, #0]

  /* definition and creation of UdpServer_Task */
  osThreadDef(UdpServer_Task, Task_UdpServer, osPriorityBelowNormal, 0, 2048);
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_FREERTOS_Init+0xb4>)
 800074c:	f107 041c 	add.w	r4, r7, #28
 8000750:	461d      	mov	r5, r3
 8000752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000756:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800075a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UdpServer_TaskHandle = osThreadCreate(osThread(UdpServer_Task), NULL);
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f00a fdae 	bl	800b2c6 <osThreadCreate>
 800076a:	4602      	mov	r2, r0
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_FREERTOS_Init+0xb8>)
 800076e:	601a      	str	r2, [r3, #0]

  /* definition and creation of DHCP_Task */
  osThreadDef(DHCP_Task, TASK_DHCP, osPriorityNormal, 0, 1024);
 8000770:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_FREERTOS_Init+0xbc>)
 8000772:	463c      	mov	r4, r7
 8000774:	461d      	mov	r5, r3
 8000776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800077a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800077e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DHCP_TaskHandle = osThreadCreate(osThread(DHCP_Task), NULL);
 8000782:	463b      	mov	r3, r7
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f00a fd9d 	bl	800b2c6 <osThreadCreate>
 800078c:	4602      	mov	r2, r0
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_FREERTOS_Init+0xc0>)
 8000790:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000792:	bf00      	nop
 8000794:	3770      	adds	r7, #112	; 0x70
 8000796:	46bd      	mov	sp, r7
 8000798:	bdb0      	pop	{r4, r5, r7, pc}
 800079a:	bf00      	nop
 800079c:	08018af0 	.word	0x08018af0
 80007a0:	2402194c 	.word	0x2402194c
 80007a4:	08018b1c 	.word	0x08018b1c
 80007a8:	24021954 	.word	0x24021954
 80007ac:	08018b48 	.word	0x08018b48
 80007b0:	24021958 	.word	0x24021958
 80007b4:	08018b70 	.word	0x08018b70
 80007b8:	24021948 	.word	0x24021948

080007bc <Task_Startup>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_Task_Startup */
void Task_Startup(void const * argument)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80007c4:	f009 ff5a 	bl	800a67c <MX_LWIP_Init>
  /* Infinite loop */
  for(;;)
  {

	  // Terminate the current thread
 	osThreadTerminate(NULL);
 80007c8:	2000      	movs	r0, #0
 80007ca:	f00a fdc8 	bl	800b35e <osThreadTerminate>
 80007ce:	e7fb      	b.n	80007c8 <Task_Startup+0xc>

080007d0 <Task_HeartBeat>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_HeartBeat */
void Task_HeartBeat(void const * argument)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007dc:	4803      	ldr	r0, [pc, #12]	; (80007ec <Task_HeartBeat+0x1c>)
 80007de:	f003 fb07 	bl	8003df0 <HAL_GPIO_TogglePin>
    osDelay(100);
 80007e2:	2064      	movs	r0, #100	; 0x64
 80007e4:	f00a fdc7 	bl	800b376 <osDelay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007e8:	e7f6      	b.n	80007d8 <Task_HeartBeat+0x8>
 80007ea:	bf00      	nop
 80007ec:	58020400 	.word	0x58020400

080007f0 <Task_UdpServer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_UdpServer */
void Task_UdpServer(void const * argument)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	udp_connect(my_udp, &PC_IPADDR, 55151);
	struct pbuf* udp_buffer = NULL;
#endif
	/* Infinite loop */
	for (;;) {
	  osDelay(1000);
 80007f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007fc:	f00a fdbb 	bl	800b376 <osDelay>
 8000800:	e7fa      	b.n	80007f8 <Task_UdpServer+0x8>

08000802 <TASK_DHCP>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TASK_DHCP */
void TASK_DHCP(void const * argument)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
	    break;
	    default: break;
	    }
#endif
	    /* wait 500 ms */
	    osDelay(500);
 800080a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800080e:	f00a fdb2 	bl	800b376 <osDelay>
 8000812:	e7fa      	b.n	800080a <TASK_DHCP+0x8>

08000814 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	; 0x30
 8000818:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 031c 	add.w	r3, r7, #28
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800082a:	4b57      	ldr	r3, [pc, #348]	; (8000988 <MX_GPIO_Init+0x174>)
 800082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000830:	4a55      	ldr	r2, [pc, #340]	; (8000988 <MX_GPIO_Init+0x174>)
 8000832:	f043 0310 	orr.w	r3, r3, #16
 8000836:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083a:	4b53      	ldr	r3, [pc, #332]	; (8000988 <MX_GPIO_Init+0x174>)
 800083c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000840:	f003 0310 	and.w	r3, r3, #16
 8000844:	61bb      	str	r3, [r7, #24]
 8000846:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000848:	4b4f      	ldr	r3, [pc, #316]	; (8000988 <MX_GPIO_Init+0x174>)
 800084a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084e:	4a4e      	ldr	r2, [pc, #312]	; (8000988 <MX_GPIO_Init+0x174>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000858:	4b4b      	ldr	r3, [pc, #300]	; (8000988 <MX_GPIO_Init+0x174>)
 800085a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	4b48      	ldr	r3, [pc, #288]	; (8000988 <MX_GPIO_Init+0x174>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086c:	4a46      	ldr	r2, [pc, #280]	; (8000988 <MX_GPIO_Init+0x174>)
 800086e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000872:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000876:	4b44      	ldr	r3, [pc, #272]	; (8000988 <MX_GPIO_Init+0x174>)
 8000878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000884:	4b40      	ldr	r3, [pc, #256]	; (8000988 <MX_GPIO_Init+0x174>)
 8000886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088a:	4a3f      	ldr	r2, [pc, #252]	; (8000988 <MX_GPIO_Init+0x174>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000894:	4b3c      	ldr	r3, [pc, #240]	; (8000988 <MX_GPIO_Init+0x174>)
 8000896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	4b39      	ldr	r3, [pc, #228]	; (8000988 <MX_GPIO_Init+0x174>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a8:	4a37      	ldr	r2, [pc, #220]	; (8000988 <MX_GPIO_Init+0x174>)
 80008aa:	f043 0302 	orr.w	r3, r3, #2
 80008ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b2:	4b35      	ldr	r3, [pc, #212]	; (8000988 <MX_GPIO_Init+0x174>)
 80008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b8:	f003 0302 	and.w	r3, r3, #2
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c0:	4b31      	ldr	r3, [pc, #196]	; (8000988 <MX_GPIO_Init+0x174>)
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c6:	4a30      	ldr	r2, [pc, #192]	; (8000988 <MX_GPIO_Init+0x174>)
 80008c8:	f043 0308 	orr.w	r3, r3, #8
 80008cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d0:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <MX_GPIO_Init+0x174>)
 80008d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d6:	f003 0308 	and.w	r3, r3, #8
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008de:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <MX_GPIO_Init+0x174>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e4:	4a28      	ldr	r2, [pc, #160]	; (8000988 <MX_GPIO_Init+0x174>)
 80008e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ee:	4b26      	ldr	r3, [pc, #152]	; (8000988 <MX_GPIO_Init+0x174>)
 80008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000902:	4822      	ldr	r0, [pc, #136]	; (800098c <MX_GPIO_Init+0x178>)
 8000904:	f003 fa40 	bl	8003d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	2140      	movs	r1, #64	; 0x40
 800090c:	4820      	ldr	r0, [pc, #128]	; (8000990 <MX_GPIO_Init+0x17c>)
 800090e:	f003 fa3b 	bl	8003d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000918:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <MX_GPIO_Init+0x180>)
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	481c      	ldr	r0, [pc, #112]	; (8000998 <MX_GPIO_Init+0x184>)
 8000928:	f002 ff7e 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800092c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4811      	ldr	r0, [pc, #68]	; (800098c <MX_GPIO_Init+0x178>)
 8000946:	f002 ff6f 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800094a:	2340      	movs	r3, #64	; 0x40
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	480b      	ldr	r0, [pc, #44]	; (8000990 <MX_GPIO_Init+0x17c>)
 8000962:	f002 ff61 	bl	8003828 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000966:	2380      	movs	r3, #128	; 0x80
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_GPIO_Init+0x17c>)
 800097a:	f002 ff55 	bl	8003828 <HAL_GPIO_Init>

}
 800097e:	bf00      	nop
 8000980:	3730      	adds	r7, #48	; 0x30
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	58024400 	.word	0x58024400
 800098c:	58020400 	.word	0x58020400
 8000990:	58021800 	.word	0x58021800
 8000994:	11110000 	.word	0x11110000
 8000998:	58020800 	.word	0x58020800

0800099c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009a4:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009a8:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <SCB_EnableICache+0x3c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009b4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <SCB_EnableICache+0x3c>)
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	4a06      	ldr	r2, [pc, #24]	; (80009d8 <SCB_EnableICache+0x3c>)
 80009be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009c8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <SCB_EnableDCache+0x7c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80009ea:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <SCB_EnableDCache+0x7c>)
 80009f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80009f4:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	0b5b      	lsrs	r3, r3, #13
 80009fa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80009fe:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	08db      	lsrs	r3, r3, #3
 8000a04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a08:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	015a      	lsls	r2, r3, #5
 8000a0e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a12:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a14:	68ba      	ldr	r2, [r7, #8]
 8000a16:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a18:	490f      	ldr	r1, [pc, #60]	; (8000a58 <SCB_EnableDCache+0x7c>)
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	1e5a      	subs	r2, r3, #1
 8000a24:	60ba      	str	r2, [r7, #8]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d1ef      	bne.n	8000a0a <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	1e5a      	subs	r2, r3, #1
 8000a2e:	60fa      	str	r2, [r7, #12]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1e5      	bne.n	8000a00 <SCB_EnableDCache+0x24>
 8000a34:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <SCB_EnableDCache+0x7c>)
 8000a3a:	695b      	ldr	r3, [r3, #20]
 8000a3c:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <SCB_EnableDCache+0x7c>)
 8000a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a42:	6153      	str	r3, [r2, #20]
 8000a44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a48:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a60:	f000 f8c2 	bl	8000be8 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000a64:	f7ff ff9a 	bl	800099c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000a68:	f7ff ffb8 	bl	80009dc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6c:	f000 fd1c 	bl	80014a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a70:	f000 f80a 	bl	8000a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a74:	f7ff fece 	bl	8000814 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a78:	f000 faf6 	bl	8001068 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000a7c:	f7ff fe3c 	bl	80006f8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000a80:	f00a fc0a 	bl	800b298 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <main+0x28>
	...

08000a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b0cc      	sub	sp, #304	; 0x130
 8000a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a92:	224c      	movs	r2, #76	; 0x4c
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f017 f92c 	bl	8017cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a9c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000aa0:	2220      	movs	r2, #32
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f017 f925 	bl	8017cf4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	4618      	mov	r0, r3
 8000ab0:	23bc      	movs	r3, #188	; 0xbc
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f017 f91d 	bl	8017cf4 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000aba:	2002      	movs	r0, #2
 8000abc:	f003 f9c2 	bl	8003e44 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	4b46      	ldr	r3, [pc, #280]	; (8000be0 <SystemClock_Config+0x158>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	4a45      	ldr	r2, [pc, #276]	; (8000be0 <SystemClock_Config+0x158>)
 8000acc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ad0:	6193      	str	r3, [r2, #24]
 8000ad2:	4b43      	ldr	r3, [pc, #268]	; (8000be0 <SystemClock_Config+0x158>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	4b41      	ldr	r3, [pc, #260]	; (8000be4 <SystemClock_Config+0x15c>)
 8000ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae2:	4a40      	ldr	r2, [pc, #256]	; (8000be4 <SystemClock_Config+0x15c>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000aea:	4b3e      	ldr	r3, [pc, #248]	; (8000be4 <SystemClock_Config+0x15c>)
 8000aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aee:	f003 0201 	and.w	r2, r3, #1
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000afa:	bf00      	nop
 8000afc:	4b38      	ldr	r3, [pc, #224]	; (8000be0 <SystemClock_Config+0x158>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b08:	d1f8      	bne.n	8000afc <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b24:	2301      	movs	r3, #1
 8000b26:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000b2a:	2378      	movs	r3, #120	; 0x78
 8000b2c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b30:	2302      	movs	r3, #2
 8000b32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b36:	2304      	movs	r3, #4
 8000b38:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b42:	230c      	movs	r3, #12
 8000b44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b54:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f003 f9b9 	bl	8003ed0 <HAL_RCC_OscConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000b64:	f000 f8b6 	bl	8000cd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b68:	233f      	movs	r3, #63	; 0x3f
 8000b6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b7a:	2308      	movs	r3, #8
 8000b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b80:	2340      	movs	r3, #64	; 0x40
 8000b82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b86:	2340      	movs	r3, #64	; 0x40
 8000b88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b94:	2340      	movs	r3, #64	; 0x40
 8000b96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b9a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b9e:	2104      	movs	r1, #4
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 fe93 	bl	80048cc <HAL_RCC_ClockConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000bac:	f000 f892 	bl	8000cd4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f004 fc01 	bl	80053cc <HAL_RCCEx_PeriphCLKConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SystemClock_Config+0x14c>
  {
    Error_Handler();
 8000bd0:	f000 f880 	bl	8000cd4 <Error_Handler>
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	58024800 	.word	0x58024800
 8000be4:	58000400 	.word	0x58000400

08000be8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bee:	463b      	mov	r3, r7
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bfa:	f000 fded 	bl	80017d8 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000c06:	4b28      	ldr	r3, [pc, #160]	; (8000ca8 <MPU_Config+0xc0>)
 8000c08:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000c0a:	2307      	movs	r3, #7
 8000c0c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c16:	2303      	movs	r3, #3
 8000c18:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000c26:	2301      	movs	r3, #1
 8000c28:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 fe07 	bl	8001840 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c32:	2301      	movs	r3, #1
 8000c34:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c36:	2301      	movs	r3, #1
 8000c38:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <MPU_Config+0xc4>)
 8000c3c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000c3e:	230d      	movs	r3, #13
 8000c40:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c52:	2301      	movs	r3, #1
 8000c54:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c5e:	463b      	mov	r3, r7
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 fded 	bl	8001840 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c66:	2301      	movs	r3, #1
 8000c68:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <MPU_Config+0xc0>)
 8000c70:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000c72:	230d      	movs	r3, #13
 8000c74:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c92:	463b      	mov	r3, r7
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 fdd3 	bl	8001840 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c9a:	2004      	movs	r0, #4
 8000c9c:	f000 fdb2 	bl	8001804 <HAL_MPU_Enable>

}
 8000ca0:	bf00      	nop
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	30040000 	.word	0x30040000
 8000cac:	30044000 	.word	0x30044000

08000cb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d101      	bne.n	8000cc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cc2:	f000 fc2d 	bl	8001520 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40010000 	.word	0x40010000

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
 8000cea:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_MspInit+0x38>)
 8000d00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d04:	4a0a      	ldr	r2, [pc, #40]	; (8000d30 <HAL_MspInit+0x38>)
 8000d06:	f043 0302 	orr.w	r3, r3, #2
 8000d0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_MspInit+0x38>)
 8000d10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	210f      	movs	r1, #15
 8000d20:	f06f 0001 	mvn.w	r0, #1
 8000d24:	f000 fd16 	bl	8001754 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	58024400 	.word	0x58024400

08000d34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08e      	sub	sp, #56	; 0x38
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8000d44:	2200      	movs	r2, #0
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	2019      	movs	r0, #25
 8000d4a:	f000 fd03 	bl	8001754 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8000d4e:	2019      	movs	r0, #25
 8000d50:	f000 fd2a 	bl	80017a8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d54:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <HAL_InitTick+0xa8>)
 8000d56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d5a:	4a20      	ldr	r2, [pc, #128]	; (8000ddc <HAL_InitTick+0xa8>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d64:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <HAL_InitTick+0xa8>)
 8000d66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d72:	f107 020c 	add.w	r2, r7, #12
 8000d76:	f107 0310 	add.w	r3, r7, #16
 8000d7a:	4611      	mov	r1, r2
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f004 fae3 	bl	8005348 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d82:	f004 facb 	bl	800531c <HAL_RCC_GetPCLK2Freq>
 8000d86:	4603      	mov	r3, r0
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	637b      	str	r3, [r7, #52]	; 0x34
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d8e:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <HAL_InitTick+0xac>)
 8000d90:	fba2 2303 	umull	r2, r3, r2, r3
 8000d94:	0c9b      	lsrs	r3, r3, #18
 8000d96:	3b01      	subs	r3, #1
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_InitTick+0xb0>)
 8000d9c:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <HAL_InitTick+0xb4>)
 8000d9e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000da0:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_InitTick+0xb0>)
 8000da2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000da6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000da8:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <HAL_InitTick+0xb0>)
 8000daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dac:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <HAL_InitTick+0xb0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <HAL_InitTick+0xb0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000dba:	480a      	ldr	r0, [pc, #40]	; (8000de4 <HAL_InitTick+0xb0>)
 8000dbc:	f006 f97c 	bl	80070b8 <HAL_TIM_Base_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d104      	bne.n	8000dd0 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000dc6:	4807      	ldr	r0, [pc, #28]	; (8000de4 <HAL_InitTick+0xb0>)
 8000dc8:	f006 fa4c 	bl	8007264 <HAL_TIM_Base_Start_IT>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	e000      	b.n	8000dd2 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3738      	adds	r7, #56	; 0x38
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	58024400 	.word	0x58024400
 8000de0:	431bde83 	.word	0x431bde83
 8000de4:	2402195c 	.word	0x2402195c
 8000de8:	40010000 	.word	0x40010000

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__BKPT();
 8000dfe:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <HardFault_Handler+0x6>

08000e02 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <MemManage_Handler+0x4>

08000e08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <BusFault_Handler+0x4>

08000e0e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <UsageFault_Handler+0x4>

08000e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <TIM1_UP_IRQHandler+0x10>)
 8000e2a:	f006 faab 	bl	8007384 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	2402195c 	.word	0x2402195c

08000e38 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <ETH_IRQHandler+0x10>)
 8000e3e:	f001 fb4f 	bl	80024e0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	24021b6c 	.word	0x24021b6c

08000e4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	e00a      	b.n	8000e74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e5e:	f3af 8000 	nop.w
 8000e62:	4601      	mov	r1, r0
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	60ba      	str	r2, [r7, #8]
 8000e6a:	b2ca      	uxtb	r2, r1
 8000e6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	dbf0      	blt.n	8000e5e <_read+0x12>
	}

return len;
 8000e7c:	687b      	ldr	r3, [r7, #4]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	60f8      	str	r0, [r7, #12]
 8000e8e:	60b9      	str	r1, [r7, #8]
 8000e90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	e009      	b.n	8000eac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	60ba      	str	r2, [r7, #8]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	dbf1      	blt.n	8000e98 <_write+0x12>
	}
	return len;
 8000eb4:	687b      	ldr	r3, [r7, #4]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <_close>:

int _close(int file)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ee6:	605a      	str	r2, [r3, #4]
	return 0;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <_isatty>:

int _isatty(int file)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
	return 1;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
	return 0;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <_sbrk+0x50>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d102      	bne.n	8000f3e <_sbrk+0x16>
		heap_end = &end;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <_sbrk+0x50>)
 8000f3a:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <_sbrk+0x54>)
 8000f3c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <_sbrk+0x50>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <_sbrk+0x50>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	466a      	mov	r2, sp
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d905      	bls.n	8000f5e <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <_sbrk+0x58>)
 8000f54:	220c      	movs	r2, #12
 8000f56:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000f58:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5c:	e006      	b.n	8000f6c <_sbrk+0x44>
	}

	heap_end += incr;
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <_sbrk+0x50>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <_sbrk+0x50>)
 8000f68:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	24002154 	.word	0x24002154
 8000f7c:	24024e70 	.word	0x24024e70
 8000f80:	24024e68 	.word	0x24024e68

08000f84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f8a:	4b31      	ldr	r3, [pc, #196]	; (8001050 <SystemInit+0xcc>)
 8000f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f90:	4a2f      	ldr	r2, [pc, #188]	; (8001050 <SystemInit+0xcc>)
 8000f92:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f96:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f9a:	4b2e      	ldr	r3, [pc, #184]	; (8001054 <SystemInit+0xd0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a2d      	ldr	r2, [pc, #180]	; (8001054 <SystemInit+0xd0>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fa6:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <SystemInit+0xd0>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fac:	4b29      	ldr	r3, [pc, #164]	; (8001054 <SystemInit+0xd0>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4928      	ldr	r1, [pc, #160]	; (8001054 <SystemInit+0xd0>)
 8000fb2:	4b29      	ldr	r3, [pc, #164]	; (8001058 <SystemInit+0xd4>)
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fb8:	4b26      	ldr	r3, [pc, #152]	; (8001054 <SystemInit+0xd0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fbe:	4b25      	ldr	r3, [pc, #148]	; (8001054 <SystemInit+0xd0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fc4:	4b23      	ldr	r3, [pc, #140]	; (8001054 <SystemInit+0xd0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000fca:	4b22      	ldr	r3, [pc, #136]	; (8001054 <SystemInit+0xd0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000fd0:	4b20      	ldr	r3, [pc, #128]	; (8001054 <SystemInit+0xd0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <SystemInit+0xd0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <SystemInit+0xd0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <SystemInit+0xd0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <SystemInit+0xd0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000fee:	4b19      	ldr	r3, [pc, #100]	; (8001054 <SystemInit+0xd0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <SystemInit+0xd0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ffa:	4b16      	ldr	r3, [pc, #88]	; (8001054 <SystemInit+0xd0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a15      	ldr	r2, [pc, #84]	; (8001054 <SystemInit+0xd0>)
 8001000:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001004:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <SystemInit+0xd0>)
 8001008:	2200      	movs	r2, #0
 800100a:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <SystemInit+0xd8>)
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <SystemInit+0xdc>)
 8001012:	4013      	ands	r3, r2
 8001014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001018:	d202      	bcs.n	8001020 <SystemInit+0x9c>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <SystemInit+0xe0>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
#endif

#if defined (DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM) , enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <SystemInit+0xd0>)
 8001022:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <SystemInit+0xd0>)
 8001028:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 800102c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <SystemInit+0xd0>)
 8001032:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001036:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8001038:	687b      	ldr	r3, [r7, #4]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <SystemInit+0xcc>)
 800103c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001040:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00
 8001054:	58024400 	.word	0x58024400
 8001058:	eaf6ed7f 	.word	0xeaf6ed7f
 800105c:	5c001000 	.word	0x5c001000
 8001060:	ffff0000 	.word	0xffff0000
 8001064:	51008108 	.word	0x51008108

08001068 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 800106e:	4a23      	ldr	r2, [pc, #140]	; (80010fc <MX_USART3_UART_Init+0x94>)
 8001070:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001072:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 8001074:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001078:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800107a:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001086:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 800108e:	220c      	movs	r2, #12
 8001090:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001098:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010b0:	4811      	ldr	r0, [pc, #68]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 80010b2:	f006 fb67 	bl	8007784 <HAL_UART_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010bc:	f7ff fe0a 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010c0:	2100      	movs	r1, #0
 80010c2:	480d      	ldr	r0, [pc, #52]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 80010c4:	f009 f93e 	bl	800a344 <HAL_UARTEx_SetTxFifoThreshold>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010ce:	f7ff fe01 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010d2:	2100      	movs	r1, #0
 80010d4:	4808      	ldr	r0, [pc, #32]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 80010d6:	f009 f9cf 	bl	800a478 <HAL_UARTEx_SetRxFifoThreshold>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010e0:	f7ff fdf8 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010e4:	4804      	ldr	r0, [pc, #16]	; (80010f8 <MX_USART3_UART_Init+0x90>)
 80010e6:	f009 f8b7 	bl	800a258 <HAL_UARTEx_DisableFifoMode>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010f0:	f7ff fdf0 	bl	8000cd4 <Error_Handler>
  }

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	2402199c 	.word	0x2402199c
 80010fc:	40004800 	.word	0x40004800

08001100 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a1a      	ldr	r2, [pc, #104]	; (8001188 <HAL_UART_MspInit+0x88>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d12e      	bne.n	8001180 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001122:	4b1a      	ldr	r3, [pc, #104]	; (800118c <HAL_UART_MspInit+0x8c>)
 8001124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001128:	4a18      	ldr	r2, [pc, #96]	; (800118c <HAL_UART_MspInit+0x8c>)
 800112a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <HAL_UART_MspInit+0x8c>)
 8001134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_UART_MspInit+0x8c>)
 8001142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001146:	4a11      	ldr	r2, [pc, #68]	; (800118c <HAL_UART_MspInit+0x8c>)
 8001148:	f043 0308 	orr.w	r3, r3, #8
 800114c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <HAL_UART_MspInit+0x8c>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800115e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001170:	2307      	movs	r3, #7
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <HAL_UART_MspInit+0x90>)
 800117c:	f002 fb54 	bl	8003828 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001180:	bf00      	nop
 8001182:	3728      	adds	r7, #40	; 0x28
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40004800 	.word	0x40004800
 800118c:	58024400 	.word	0x58024400
 8001190:	58020c00 	.word	0x58020c00

08001194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001198:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800119a:	e003      	b.n	80011a4 <LoopCopyDataInit>

0800119c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800119e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011a2:	3104      	adds	r1, #4

080011a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80011a4:	480b      	ldr	r0, [pc, #44]	; (80011d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80011a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80011aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80011ac:	d3f6      	bcc.n	800119c <CopyDataInit>
  ldr  r2, =_sbss
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80011b0:	e002      	b.n	80011b8 <LoopFillZerobss>

080011b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80011b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011b4:	f842 3b04 	str.w	r3, [r2], #4

080011b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011bc:	d3f9      	bcc.n	80011b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011be:	f7ff fee1 	bl	8000f84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011c2:	f016 fd59 	bl	8017c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011c6:	f7ff fc49 	bl	8000a5c <main>
  bx  lr    
 80011ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011cc:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80011d0:	0801ae10 	.word	0x0801ae10
  ldr  r0, =_sdata
 80011d4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80011d8:	24000090 	.word	0x24000090
  ldr  r2, =_sbss
 80011dc:	24000090 	.word	0x24000090
  ldr  r3, = _ebss
 80011e0:	24024e70 	.word	0x24024e70

080011e4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC3_IRQHandler>

080011e6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00b      	beq.n	800120e <LAN8742_RegisterBusIO+0x28>
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d007      	beq.n	800120e <LAN8742_RegisterBusIO+0x28>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <LAN8742_RegisterBusIO+0x28>
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	e014      	b.n	800123e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d17c      	bne.n	8001364 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d002      	beq.n	8001278 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2220      	movs	r2, #32
 800127c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	e01c      	b.n	80012be <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	f107 0208 	add.w	r2, r7, #8
 800128c:	2112      	movs	r1, #18
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	4798      	blx	r3
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	da03      	bge.n	80012a0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001298:	f06f 0304 	mvn.w	r3, #4
 800129c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800129e:	e00b      	b.n	80012b8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	f003 031f 	and.w	r3, r3, #31
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d105      	bne.n	80012b8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
         break;
 80012b6:	e005      	b.n	80012c4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	3301      	adds	r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2b1f      	cmp	r3, #31
 80012c2:	d9df      	bls.n	8001284 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b1f      	cmp	r3, #31
 80012ca:	d902      	bls.n	80012d2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80012cc:	f06f 0302 	mvn.w	r3, #2
 80012d0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d145      	bne.n	8001364 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6810      	ldr	r0, [r2, #0]
 80012e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012e4:	2100      	movs	r1, #0
 80012e6:	4798      	blx	r3
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	db37      	blt.n	800135e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6810      	ldr	r0, [r2, #0]
 80012f6:	f107 0208 	add.w	r2, r7, #8
 80012fa:	2100      	movs	r1, #0
 80012fc:	4798      	blx	r3
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	db28      	blt.n	8001356 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	4798      	blx	r3
 800130a:	4603      	mov	r3, r0
 800130c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800130e:	e01c      	b.n	800134a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4798      	blx	r3
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001322:	d80e      	bhi.n	8001342 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6810      	ldr	r0, [r2, #0]
 800132c:	f107 0208 	add.w	r2, r7, #8
 8001330:	2100      	movs	r1, #0
 8001332:	4798      	blx	r3
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	da07      	bge.n	800134a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800133a:	f06f 0304 	mvn.w	r3, #4
 800133e:	613b      	str	r3, [r7, #16]
                 break;
 8001340:	e010      	b.n	8001364 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001342:	f06f 0301 	mvn.w	r3, #1
 8001346:	613b      	str	r3, [r7, #16]
               break;
 8001348:	e00c      	b.n	8001364 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1dd      	bne.n	8001310 <LAN8742_Init+0xc6>
 8001354:	e006      	b.n	8001364 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001356:	f06f 0304 	mvn.w	r3, #4
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	e002      	b.n	8001364 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800135e:	f06f 0303 	mvn.w	r3, #3
 8001362:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d112      	bne.n	8001390 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	4798      	blx	r3
 8001370:	4603      	mov	r3, r0
 8001372:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001374:	bf00      	nop
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	4798      	blx	r3
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001388:	d9f5      	bls.n	8001376 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001390:	693b      	ldr	r3, [r7, #16]
 }
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6810      	ldr	r0, [r2, #0]
 80013ae:	f107 020c 	add.w	r2, r7, #12
 80013b2:	2101      	movs	r1, #1
 80013b4:	4798      	blx	r3
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da02      	bge.n	80013c2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80013bc:	f06f 0304 	mvn.w	r3, #4
 80013c0:	e06e      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6810      	ldr	r0, [r2, #0]
 80013ca:	f107 020c 	add.w	r2, r7, #12
 80013ce:	2101      	movs	r1, #1
 80013d0:	4798      	blx	r3
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	da02      	bge.n	80013de <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80013d8:	f06f 0304 	mvn.w	r3, #4
 80013dc:	e060      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80013e8:	2301      	movs	r3, #1
 80013ea:	e059      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6810      	ldr	r0, [r2, #0]
 80013f4:	f107 020c 	add.w	r2, r7, #12
 80013f8:	2100      	movs	r1, #0
 80013fa:	4798      	blx	r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	da02      	bge.n	8001408 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001402:	f06f 0304 	mvn.w	r3, #4
 8001406:	e04b      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d11b      	bne.n	800144a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d006      	beq.n	800142a <LAN8742_GetLinkState+0x90>
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001426:	2302      	movs	r3, #2
 8001428:	e03a      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001434:	2303      	movs	r3, #3
 8001436:	e033      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001442:	2304      	movs	r3, #4
 8001444:	e02c      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001446:	2305      	movs	r3, #5
 8001448:	e02a      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6810      	ldr	r0, [r2, #0]
 8001452:	f107 020c 	add.w	r2, r7, #12
 8001456:	211f      	movs	r1, #31
 8001458:	4798      	blx	r3
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	da02      	bge.n	8001466 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001460:	f06f 0304 	mvn.w	r3, #4
 8001464:	e01c      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001470:	2306      	movs	r3, #6
 8001472:	e015      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 031c 	and.w	r3, r3, #28
 800147a:	2b18      	cmp	r3, #24
 800147c:	d101      	bne.n	8001482 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800147e:	2302      	movs	r3, #2
 8001480:	e00e      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f003 031c 	and.w	r3, r3, #28
 8001488:	2b08      	cmp	r3, #8
 800148a:	d101      	bne.n	8001490 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800148c:	2303      	movs	r3, #3
 800148e:	e007      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 031c 	and.w	r3, r3, #28
 8001496:	2b14      	cmp	r3, #20
 8001498:	d101      	bne.n	800149e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800149a:	2304      	movs	r3, #4
 800149c:	e000      	b.n	80014a0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800149e:	2305      	movs	r3, #5
    }				
  }
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ae:	2003      	movs	r0, #3
 80014b0:	f000 f930 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014b4:	f003 fd7a 	bl	8004fac <HAL_RCC_GetSysClockFreq>
 80014b8:	4601      	mov	r1, r0
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_Init+0x68>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	0a1b      	lsrs	r3, r3, #8
 80014c0:	f003 030f 	and.w	r3, r3, #15
 80014c4:	4a13      	ldr	r2, [pc, #76]	; (8001514 <HAL_Init+0x6c>)
 80014c6:	5cd3      	ldrb	r3, [r2, r3]
 80014c8:	f003 031f 	and.w	r3, r3, #31
 80014cc:	fa21 f303 	lsr.w	r3, r1, r3
 80014d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_Init+0x68>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	4a0e      	ldr	r2, [pc, #56]	; (8001514 <HAL_Init+0x6c>)
 80014dc:	5cd3      	ldrb	r3, [r2, r3]
 80014de:	f003 031f 	and.w	r3, r3, #31
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	fa22 f303 	lsr.w	r3, r2, r3
 80014e8:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <HAL_Init+0x70>)
 80014ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014ec:	4a0b      	ldr	r2, [pc, #44]	; (800151c <HAL_Init+0x74>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014f2:	2000      	movs	r0, #0
 80014f4:	f7ff fc1e 	bl	8000d34 <HAL_InitTick>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e002      	b.n	8001508 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001502:	f7ff fbf9 	bl	8000cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	58024400 	.word	0x58024400
 8001514:	0801ac10 	.word	0x0801ac10
 8001518:	24000004 	.word	0x24000004
 800151c:	24000000 	.word	0x24000000

08001520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_IncTick+0x20>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_IncTick+0x24>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_IncTick+0x24>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	2400000c 	.word	0x2400000c
 8001544:	24021a28 	.word	0x24021a28

08001548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_GetTick+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	24021a28 	.word	0x24021a28

08001560 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <HAL_GetREVID+0x14>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	0c1b      	lsrs	r3, r3, #16
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	5c001000 	.word	0x5c001000

08001578 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d008      	beq.n	8001598 <HAL_SYSCFG_ETHInterfaceSelect+0x20>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800158c:	d004      	beq.n	8001598 <HAL_SYSCFG_ETHInterfaceSelect+0x20>
 800158e:	f240 215b 	movw	r1, #603	; 0x25b
 8001592:	4807      	ldr	r0, [pc, #28]	; (80015b0 <HAL_SYSCFG_ETHInterfaceSelect+0x38>)
 8001594:	f7ff fba5 	bl	8000ce2 <assert_failed>

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_SYSCFG_ETHInterfaceSelect+0x3c>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80015a0:	4904      	ldr	r1, [pc, #16]	; (80015b4 <HAL_SYSCFG_ETHInterfaceSelect+0x3c>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	08018b8c 	.word	0x08018b8c
 80015b4:	58000400 	.word	0x58000400

080015b8 <__NVIC_SetPriorityGrouping>:
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <__NVIC_SetPriorityGrouping+0x40>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d4:	4013      	ands	r3, r2
 80015d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e6:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <__NVIC_SetPriorityGrouping+0x40>)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	60d3      	str	r3, [r2, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00
 80015fc:	05fa0000 	.word	0x05fa0000

08001600 <__NVIC_GetPriorityGrouping>:
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <__NVIC_GetPriorityGrouping+0x18>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	f003 0307 	and.w	r3, r3, #7
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_EnableIRQ>:
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001626:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800162a:	2b00      	cmp	r3, #0
 800162c:	db0b      	blt.n	8001646 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	f003 021f 	and.w	r2, r3, #31
 8001634:	4907      	ldr	r1, [pc, #28]	; (8001654 <__NVIC_EnableIRQ+0x38>)
 8001636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	2001      	movs	r0, #1
 800163e:	fa00 f202 	lsl.w	r2, r0, r2
 8001642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000e100 	.word	0xe000e100

08001658 <__NVIC_SetPriority>:
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	; (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	; (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b07      	cmp	r3, #7
 8001720:	d00f      	beq.n	8001742 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b06      	cmp	r3, #6
 8001726:	d00c      	beq.n	8001742 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b05      	cmp	r3, #5
 800172c:	d009      	beq.n	8001742 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b04      	cmp	r3, #4
 8001732:	d006      	beq.n	8001742 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b03      	cmp	r3, #3
 8001738:	d003      	beq.n	8001742 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800173a:	2192      	movs	r1, #146	; 0x92
 800173c:	4804      	ldr	r0, [pc, #16]	; (8001750 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800173e:	f7ff fad0 	bl	8000ce2 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ff38 	bl	80015b8 <__NVIC_SetPriorityGrouping>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	08018bc0 	.word	0x08018bc0

08001754 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d903      	bls.n	8001770 <HAL_NVIC_SetPriority+0x1c>
 8001768:	21aa      	movs	r1, #170	; 0xaa
 800176a:	480e      	ldr	r0, [pc, #56]	; (80017a4 <HAL_NVIC_SetPriority+0x50>)
 800176c:	f7ff fab9 	bl	8000ce2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	2b0f      	cmp	r3, #15
 8001774:	d903      	bls.n	800177e <HAL_NVIC_SetPriority+0x2a>
 8001776:	21ab      	movs	r1, #171	; 0xab
 8001778:	480a      	ldr	r0, [pc, #40]	; (80017a4 <HAL_NVIC_SetPriority+0x50>)
 800177a:	f7ff fab2 	bl	8000ce2 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 800177e:	f7ff ff3f 	bl	8001600 <__NVIC_GetPriorityGrouping>
 8001782:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	68b9      	ldr	r1, [r7, #8]
 8001788:	6978      	ldr	r0, [r7, #20]
 800178a:	f7ff ff8f 	bl	80016ac <NVIC_EncodePriority>
 800178e:	4602      	mov	r2, r0
 8001790:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001794:	4611      	mov	r1, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ff5e 	bl	8001658 <__NVIC_SetPriority>
}
 800179c:	bf00      	nop
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	08018bc0 	.word	0x08018bc0

080017a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80017b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	da03      	bge.n	80017c2 <HAL_NVIC_EnableIRQ+0x1a>
 80017ba:	21be      	movs	r1, #190	; 0xbe
 80017bc:	4805      	ldr	r0, [pc, #20]	; (80017d4 <HAL_NVIC_EnableIRQ+0x2c>)
 80017be:	f7ff fa90 	bl	8000ce2 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff28 	bl	800161c <__NVIC_EnableIRQ>
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	08018bc0 	.word	0x08018bc0

080017d8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80017dc:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_MPU_Disable+0x24>)
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	4a05      	ldr	r2, [pc, #20]	; (80017fc <HAL_MPU_Disable+0x24>)
 80017e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ea:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <HAL_MPU_Disable+0x28>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	605a      	str	r2, [r3, #4]
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00
 8001800:	e000ed90 	.word	0xe000ed90

08001804 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800180c:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_MPU_Enable+0x34>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_MPU_Enable+0x38>)
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <HAL_MPU_Enable+0x38>)
 800181c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001820:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001822:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001826:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed90 	.word	0xe000ed90
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	785b      	ldrb	r3, [r3, #1]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d040      	beq.n	80018d2 <HAL_MPU_ConfigRegion+0x92>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	785b      	ldrb	r3, [r3, #1]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d03c      	beq.n	80018d2 <HAL_MPU_ConfigRegion+0x92>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	785b      	ldrb	r3, [r3, #1]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d038      	beq.n	80018d2 <HAL_MPU_ConfigRegion+0x92>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	785b      	ldrb	r3, [r3, #1]
 8001864:	2b03      	cmp	r3, #3
 8001866:	d034      	beq.n	80018d2 <HAL_MPU_ConfigRegion+0x92>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	785b      	ldrb	r3, [r3, #1]
 800186c:	2b04      	cmp	r3, #4
 800186e:	d030      	beq.n	80018d2 <HAL_MPU_ConfigRegion+0x92>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	785b      	ldrb	r3, [r3, #1]
 8001874:	2b05      	cmp	r3, #5
 8001876:	d02c      	beq.n	80018d2 <HAL_MPU_ConfigRegion+0x92>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	785b      	ldrb	r3, [r3, #1]
 800187c:	2b06      	cmp	r3, #6
 800187e:	d028      	beq.n	80018d2 <HAL_MPU_ConfigRegion+0x92>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	785b      	ldrb	r3, [r3, #1]
 8001884:	2b07      	cmp	r3, #7
 8001886:	d024      	beq.n	80018d2 <HAL_MPU_ConfigRegion+0x92>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	785b      	ldrb	r3, [r3, #1]
 800188c:	2b08      	cmp	r3, #8
 800188e:	d020      	beq.n	80018d2 <HAL_MPU_ConfigRegion+0x92>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	785b      	ldrb	r3, [r3, #1]
 8001894:	2b09      	cmp	r3, #9
 8001896:	d01c      	beq.n	80018d2 <HAL_MPU_ConfigRegion+0x92>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	785b      	ldrb	r3, [r3, #1]
 800189c:	2b0a      	cmp	r3, #10
 800189e:	d018      	beq.n	80018d2 <HAL_MPU_ConfigRegion+0x92>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	785b      	ldrb	r3, [r3, #1]
 80018a4:	2b0b      	cmp	r3, #11
 80018a6:	d014      	beq.n	80018d2 <HAL_MPU_ConfigRegion+0x92>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	785b      	ldrb	r3, [r3, #1]
 80018ac:	2b0c      	cmp	r3, #12
 80018ae:	d010      	beq.n	80018d2 <HAL_MPU_ConfigRegion+0x92>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	785b      	ldrb	r3, [r3, #1]
 80018b4:	2b0d      	cmp	r3, #13
 80018b6:	d00c      	beq.n	80018d2 <HAL_MPU_ConfigRegion+0x92>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	785b      	ldrb	r3, [r3, #1]
 80018bc:	2b0e      	cmp	r3, #14
 80018be:	d008      	beq.n	80018d2 <HAL_MPU_ConfigRegion+0x92>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	785b      	ldrb	r3, [r3, #1]
 80018c4:	2b0f      	cmp	r3, #15
 80018c6:	d004      	beq.n	80018d2 <HAL_MPU_ConfigRegion+0x92>
 80018c8:	f240 112d 	movw	r1, #301	; 0x12d
 80018cc:	4896      	ldr	r0, [pc, #600]	; (8001b28 <HAL_MPU_ConfigRegion+0x2e8>)
 80018ce:	f7ff fa08 	bl	8000ce2 <assert_failed>
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d008      	beq.n	80018ec <HAL_MPU_ConfigRegion+0xac>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d004      	beq.n	80018ec <HAL_MPU_ConfigRegion+0xac>
 80018e2:	f44f 7197 	mov.w	r1, #302	; 0x12e
 80018e6:	4890      	ldr	r0, [pc, #576]	; (8001b28 <HAL_MPU_ConfigRegion+0x2e8>)
 80018e8:	f7ff f9fb 	bl	8000ce2 <assert_failed>

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	785a      	ldrb	r2, [r3, #1]
 80018f0:	4b8e      	ldr	r3, [pc, #568]	; (8001b2c <HAL_MPU_ConfigRegion+0x2ec>)
 80018f2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 810a 	beq.w	8001b12 <HAL_MPU_ConfigRegion+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	7b1b      	ldrb	r3, [r3, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d008      	beq.n	8001918 <HAL_MPU_ConfigRegion+0xd8>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	7b1b      	ldrb	r3, [r3, #12]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d004      	beq.n	8001918 <HAL_MPU_ConfigRegion+0xd8>
 800190e:	f44f 719b 	mov.w	r1, #310	; 0x136
 8001912:	4885      	ldr	r0, [pc, #532]	; (8001b28 <HAL_MPU_ConfigRegion+0x2e8>)
 8001914:	f7ff f9e5 	bl	8000ce2 <assert_failed>
    assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7adb      	ldrb	r3, [r3, #11]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d018      	beq.n	8001952 <HAL_MPU_ConfigRegion+0x112>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	7adb      	ldrb	r3, [r3, #11]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d014      	beq.n	8001952 <HAL_MPU_ConfigRegion+0x112>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7adb      	ldrb	r3, [r3, #11]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d010      	beq.n	8001952 <HAL_MPU_ConfigRegion+0x112>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	7adb      	ldrb	r3, [r3, #11]
 8001934:	2b03      	cmp	r3, #3
 8001936:	d00c      	beq.n	8001952 <HAL_MPU_ConfigRegion+0x112>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7adb      	ldrb	r3, [r3, #11]
 800193c:	2b05      	cmp	r3, #5
 800193e:	d008      	beq.n	8001952 <HAL_MPU_ConfigRegion+0x112>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7adb      	ldrb	r3, [r3, #11]
 8001944:	2b06      	cmp	r3, #6
 8001946:	d004      	beq.n	8001952 <HAL_MPU_ConfigRegion+0x112>
 8001948:	f240 1137 	movw	r1, #311	; 0x137
 800194c:	4876      	ldr	r0, [pc, #472]	; (8001b28 <HAL_MPU_ConfigRegion+0x2e8>)
 800194e:	f7ff f9c8 	bl	8000ce2 <assert_failed>
    assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	7a9b      	ldrb	r3, [r3, #10]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00c      	beq.n	8001974 <HAL_MPU_ConfigRegion+0x134>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	7a9b      	ldrb	r3, [r3, #10]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d008      	beq.n	8001974 <HAL_MPU_ConfigRegion+0x134>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	7a9b      	ldrb	r3, [r3, #10]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d004      	beq.n	8001974 <HAL_MPU_ConfigRegion+0x134>
 800196a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800196e:	486e      	ldr	r0, [pc, #440]	; (8001b28 <HAL_MPU_ConfigRegion+0x2e8>)
 8001970:	f7ff f9b7 	bl	8000ce2 <assert_failed>
    assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7b5b      	ldrb	r3, [r3, #13]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d008      	beq.n	800198e <HAL_MPU_ConfigRegion+0x14e>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	7b5b      	ldrb	r3, [r3, #13]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d004      	beq.n	800198e <HAL_MPU_ConfigRegion+0x14e>
 8001984:	f240 1139 	movw	r1, #313	; 0x139
 8001988:	4867      	ldr	r0, [pc, #412]	; (8001b28 <HAL_MPU_ConfigRegion+0x2e8>)
 800198a:	f7ff f9aa 	bl	8000ce2 <assert_failed>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7b9b      	ldrb	r3, [r3, #14]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d008      	beq.n	80019a8 <HAL_MPU_ConfigRegion+0x168>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7b9b      	ldrb	r3, [r3, #14]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <HAL_MPU_ConfigRegion+0x168>
 800199e:	f44f 719d 	mov.w	r1, #314	; 0x13a
 80019a2:	4861      	ldr	r0, [pc, #388]	; (8001b28 <HAL_MPU_ConfigRegion+0x2e8>)
 80019a4:	f7ff f99d 	bl	8000ce2 <assert_failed>
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	7bdb      	ldrb	r3, [r3, #15]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d008      	beq.n	80019c2 <HAL_MPU_ConfigRegion+0x182>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	7bdb      	ldrb	r3, [r3, #15]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d004      	beq.n	80019c2 <HAL_MPU_ConfigRegion+0x182>
 80019b8:	f240 113b 	movw	r1, #315	; 0x13b
 80019bc:	485a      	ldr	r0, [pc, #360]	; (8001b28 <HAL_MPU_ConfigRegion+0x2e8>)
 80019be:	f7ff f990 	bl	8000ce2 <assert_failed>
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7a5b      	ldrb	r3, [r3, #9]
 80019c6:	2bff      	cmp	r3, #255	; 0xff
 80019c8:	d104      	bne.n	80019d4 <HAL_MPU_ConfigRegion+0x194>
 80019ca:	f44f 719e 	mov.w	r1, #316	; 0x13c
 80019ce:	4856      	ldr	r0, [pc, #344]	; (8001b28 <HAL_MPU_ConfigRegion+0x2e8>)
 80019d0:	f7ff f987 	bl	8000ce2 <assert_failed>
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7a1b      	ldrb	r3, [r3, #8]
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d070      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	7a1b      	ldrb	r3, [r3, #8]
 80019e0:	2b05      	cmp	r3, #5
 80019e2:	d06c      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7a1b      	ldrb	r3, [r3, #8]
 80019e8:	2b06      	cmp	r3, #6
 80019ea:	d068      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7a1b      	ldrb	r3, [r3, #8]
 80019f0:	2b07      	cmp	r3, #7
 80019f2:	d064      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7a1b      	ldrb	r3, [r3, #8]
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d060      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7a1b      	ldrb	r3, [r3, #8]
 8001a00:	2b09      	cmp	r3, #9
 8001a02:	d05c      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7a1b      	ldrb	r3, [r3, #8]
 8001a08:	2b0a      	cmp	r3, #10
 8001a0a:	d058      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	7a1b      	ldrb	r3, [r3, #8]
 8001a10:	2b0b      	cmp	r3, #11
 8001a12:	d054      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7a1b      	ldrb	r3, [r3, #8]
 8001a18:	2b0c      	cmp	r3, #12
 8001a1a:	d050      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7a1b      	ldrb	r3, [r3, #8]
 8001a20:	2b0d      	cmp	r3, #13
 8001a22:	d04c      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	7a1b      	ldrb	r3, [r3, #8]
 8001a28:	2b0e      	cmp	r3, #14
 8001a2a:	d048      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7a1b      	ldrb	r3, [r3, #8]
 8001a30:	2b0f      	cmp	r3, #15
 8001a32:	d044      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7a1b      	ldrb	r3, [r3, #8]
 8001a38:	2b10      	cmp	r3, #16
 8001a3a:	d040      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7a1b      	ldrb	r3, [r3, #8]
 8001a40:	2b11      	cmp	r3, #17
 8001a42:	d03c      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7a1b      	ldrb	r3, [r3, #8]
 8001a48:	2b12      	cmp	r3, #18
 8001a4a:	d038      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7a1b      	ldrb	r3, [r3, #8]
 8001a50:	2b13      	cmp	r3, #19
 8001a52:	d034      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	7a1b      	ldrb	r3, [r3, #8]
 8001a58:	2b14      	cmp	r3, #20
 8001a5a:	d030      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7a1b      	ldrb	r3, [r3, #8]
 8001a60:	2b15      	cmp	r3, #21
 8001a62:	d02c      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	7a1b      	ldrb	r3, [r3, #8]
 8001a68:	2b16      	cmp	r3, #22
 8001a6a:	d028      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7a1b      	ldrb	r3, [r3, #8]
 8001a70:	2b17      	cmp	r3, #23
 8001a72:	d024      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7a1b      	ldrb	r3, [r3, #8]
 8001a78:	2b18      	cmp	r3, #24
 8001a7a:	d020      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	7a1b      	ldrb	r3, [r3, #8]
 8001a80:	2b19      	cmp	r3, #25
 8001a82:	d01c      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	7a1b      	ldrb	r3, [r3, #8]
 8001a88:	2b1a      	cmp	r3, #26
 8001a8a:	d018      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	7a1b      	ldrb	r3, [r3, #8]
 8001a90:	2b1b      	cmp	r3, #27
 8001a92:	d014      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	7a1b      	ldrb	r3, [r3, #8]
 8001a98:	2b1c      	cmp	r3, #28
 8001a9a:	d010      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7a1b      	ldrb	r3, [r3, #8]
 8001aa0:	2b1d      	cmp	r3, #29
 8001aa2:	d00c      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	7a1b      	ldrb	r3, [r3, #8]
 8001aa8:	2b1e      	cmp	r3, #30
 8001aaa:	d008      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7a1b      	ldrb	r3, [r3, #8]
 8001ab0:	2b1f      	cmp	r3, #31
 8001ab2:	d004      	beq.n	8001abe <HAL_MPU_ConfigRegion+0x27e>
 8001ab4:	f240 113d 	movw	r1, #317	; 0x13d
 8001ab8:	481b      	ldr	r0, [pc, #108]	; (8001b28 <HAL_MPU_ConfigRegion+0x2e8>)
 8001aba:	f7ff f912 	bl	8000ce2 <assert_failed>

    MPU->RBAR = MPU_Init->BaseAddress;
 8001abe:	4a1b      	ldr	r2, [pc, #108]	; (8001b2c <HAL_MPU_ConfigRegion+0x2ec>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7b1b      	ldrb	r3, [r3, #12]
 8001aca:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7adb      	ldrb	r3, [r3, #11]
 8001ad0:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ad2:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7a9b      	ldrb	r3, [r3, #10]
 8001ad8:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ada:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	7b5b      	ldrb	r3, [r3, #13]
 8001ae0:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ae2:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	7b9b      	ldrb	r3, [r3, #14]
 8001ae8:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001aea:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	7bdb      	ldrb	r3, [r3, #15]
 8001af0:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001af2:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7a5b      	ldrb	r3, [r3, #9]
 8001af8:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001afa:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7a1b      	ldrb	r3, [r3, #8]
 8001b00:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b02:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	7812      	ldrb	r2, [r2, #0]
 8001b08:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b0a:	4a08      	ldr	r2, [pc, #32]	; (8001b2c <HAL_MPU_ConfigRegion+0x2ec>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b0c:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b0e:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001b10:	e005      	b.n	8001b1e <HAL_MPU_ConfigRegion+0x2de>
    MPU->RBAR = 0x00;
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_MPU_ConfigRegion+0x2ec>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <HAL_MPU_ConfigRegion+0x2ec>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	08018bc0 	.word	0x08018bc0
 8001b2c:	e000ed90 	.word	0xe000ed90

08001b30 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e0c6      	b.n	8001cd0 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d102      	bne.n	8001b50 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f008 ff20 	bl	800a990 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2223      	movs	r2, #35	; 0x23
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	4b60      	ldr	r3, [pc, #384]	; (8001cd8 <HAL_ETH_Init+0x1a8>)
 8001b58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b5c:	4a5e      	ldr	r2, [pc, #376]	; (8001cd8 <HAL_ETH_Init+0x1a8>)
 8001b5e:	f043 0302 	orr.w	r3, r3, #2
 8001b62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b66:	4b5c      	ldr	r3, [pc, #368]	; (8001cd8 <HAL_ETH_Init+0x1a8>)
 8001b68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7a1b      	ldrb	r3, [r3, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d103      	bne.n	8001b84 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f7ff fcfb 	bl	8001578 <HAL_SYSCFG_ETHInterfaceSelect>
 8001b82:	e003      	b.n	8001b8c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001b84:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001b88:	f7ff fcf6 	bl	8001578 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0201 	orr.w	r2, r2, #1
 8001b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ba4:	f7ff fcd0 	bl	8001548 <HAL_GetTick>
 8001ba8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001baa:	e00f      	b.n	8001bcc <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001bac:	f7ff fccc 	bl	8001548 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bba:	d907      	bls.n	8001bcc <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	22e0      	movs	r2, #224	; 0xe0
 8001bc6:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e081      	b.n	8001cd0 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1e6      	bne.n	8001bac <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f001 fad2 	bl	8003188 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001be4:	f003 fb54 	bl	8005290 <HAL_RCC_GetHCLKFreq>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4b3c      	ldr	r3, [pc, #240]	; (8001cdc <HAL_ETH_Init+0x1ac>)
 8001bec:	fba3 2302 	umull	r2, r3, r3, r2
 8001bf0:	0c9a      	lsrs	r2, r3, #18
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	3a01      	subs	r2, #1
 8001bf8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f001 fa25 	bl	800304c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001c18:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001c1c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d007      	beq.n	8001c3a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	22e0      	movs	r2, #224	; 0xe0
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e04a      	b.n	8001cd0 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001c42:	4413      	add	r3, r2
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <HAL_ETH_Init+0x1b0>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6952      	ldr	r2, [r2, #20]
 8001c4e:	0052      	lsls	r2, r2, #1
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	6809      	ldr	r1, [r1, #0]
 8001c54:	431a      	orrs	r2, r3
 8001c56:	f241 1308 	movw	r3, #4360	; 0x1108
 8001c5a:	440b      	add	r3, r1
 8001c5c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f001 faea 	bl	8003238 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f001 fb2e 	bl	80032c6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	3305      	adds	r3, #5
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	021a      	lsls	r2, r3, #8
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	3303      	adds	r3, #3
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	061a      	lsls	r2, r3, #24
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	3302      	adds	r3, #2
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	041b      	lsls	r3, r3, #16
 8001c9c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ca8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001cb6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001cb8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2210      	movs	r2, #16
 8001ccc:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	58024400 	.word	0x58024400
 8001cdc:	431bde83 	.word	0x431bde83
 8001ce0:	ffff8001 	.word	0xffff8001

08001ce4 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	330a      	adds	r3, #10
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d002      	beq.n	8001d0c <HAL_ETH_DescAssignMemory+0x28>
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d904      	bls.n	8001d16 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e021      	b.n	8001d5a <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d00b      	beq.n	8001d4c <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	371c      	adds	r7, #28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b087      	sub	sp, #28
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  uint32_t descindex = 0, counter;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	330a      	adds	r3, #10
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	60fb      	str	r3, [r7, #12]

  if(heth->gState == HAL_ETH_STATE_READY)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d84:	2b10      	cmp	r3, #16
 8001d86:	d17d      	bne.n	8001e84 <HAL_ETH_Start_IT+0x11e>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2223      	movs	r2, #35	; 0x23
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	e018      	b.n	8001dc6 <HAL_ETH_Start_IT+0x60>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	60da      	str	r2, [r3, #12]
      INCR_RX_DESC_INDEX(descindex, 1U);
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	3301      	adds	r3, #1
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d902      	bls.n	8001db2 <HAL_ETH_Start_IT+0x4c>
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	3b04      	subs	r3, #4
 8001db0:	617b      	str	r3, [r7, #20]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	330a      	adds	r3, #10
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	60fb      	str	r3, [r7, #12]
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d9e3      	bls.n	8001d94 <HAL_ETH_Start_IT+0x2e>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 0202 	orr.w	r2, r2, #2
 8001de0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0201 	orr.w	r2, r2, #1
 8001df0:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e0e:	4413      	add	r3, r2
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6811      	ldr	r1, [r2, #0]
 8001e16:	f043 0201 	orr.w	r2, r3, #1
 8001e1a:	f241 1304 	movw	r3, #4356	; 0x1104
 8001e1e:	440b      	add	r3, r1
 8001e20:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e2a:	4413      	add	r3, r2
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6811      	ldr	r1, [r2, #0]
 8001e32:	f043 0201 	orr.w	r2, r3, #1
 8001e36:	f241 1308 	movw	r3, #4360	; 0x1108
 8001e3a:	440b      	add	r3, r1
 8001e3c:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8001e50:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001e54:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2210      	movs	r2, #16
 8001e5a:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2222      	movs	r2, #34	; 0x22
 8001e60:	659a      	str	r2, [r3, #88]	; 0x58
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	f241 1334 	movw	r3, #4404	; 0x1134
 8001e6a:	4413      	add	r3, r2
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6811      	ldr	r1, [r2, #0]
 8001e72:	f24d 0241 	movw	r2, #53313	; 0xd041
 8001e76:	431a      	orrs	r2, r3
 8001e78:	f241 1334 	movw	r3, #4404	; 0x1134
 8001e7c:	440b      	add	r3, r1
 8001e7e:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    return HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	e000      	b.n	8001e86 <HAL_ETH_Start_IT+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
  }
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	371c      	adds	r7, #28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[0];
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea0:	60bb      	str	r3, [r7, #8]
  uint32_t index;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d060      	beq.n	8001f6c <HAL_ETH_Stop_IT+0xd8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2223      	movs	r2, #35	; 0x23
 8001eae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable intrrupts:
    - Tx complete interrupt
    - Rx complete interrupt     */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMA_NORMAL_IT | ETH_DMA_RX_IT | ETH_DMA_TX_IT));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	f241 1334 	movw	r3, #4404	; 0x1134
 8001eb8:	4413      	add	r3, r2
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6811      	ldr	r1, [r2, #0]
 8001ec0:	4a2e      	ldr	r2, [pc, #184]	; (8001f7c <HAL_ETH_Stop_IT+0xe8>)
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	f241 1334 	movw	r3, #4404	; 0x1134
 8001ec8:	440b      	add	r3, r1
 8001eca:	601a      	str	r2, [r3, #0]

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	f241 1304 	movw	r3, #4356	; 0x1104
 8001ed4:	4413      	add	r3, r2
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6811      	ldr	r1, [r2, #0]
 8001edc:	f023 0201 	bic.w	r2, r3, #1
 8001ee0:	f241 1304 	movw	r3, #4356	; 0x1104
 8001ee4:	440b      	add	r3, r1
 8001ee6:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	f241 1308 	movw	r3, #4360	; 0x1108
 8001ef0:	4413      	add	r3, r2
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6811      	ldr	r1, [r2, #0]
 8001ef8:	f023 0201 	bic.w	r2, r3, #1
 8001efc:	f241 1308 	movw	r3, #4360	; 0x1108
 8001f00:	440b      	add	r3, r1
 8001f02:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0201 	bic.w	r2, r2, #1
 8001f12:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f042 0201 	orr.w	r2, r2, #1
 8001f24:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0202 	bic.w	r2, r2, #2
 8001f36:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(index = 0; index < (uint32_t)ETH_RX_DESC_CNT; index++)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	e008      	b.n	8001f50 <HAL_ETH_Stop_IT+0xbc>
    {
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	60da      	str	r2, [r3, #12]
    for(index = 0; index < (uint32_t)ETH_RX_DESC_CNT; index++)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d9f3      	bls.n	8001f3e <HAL_ETH_Stop_IT+0xaa>
    }

    heth->RxDescList.ItMode = 0U;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	64da      	str	r2, [r3, #76]	; 0x4c

    heth->gState = HAL_ETH_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2210      	movs	r2, #16
 8001f60:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2210      	movs	r2, #16
 8001f66:	659a      	str	r2, [r3, #88]	; 0x58

    /* Return function status */
    return HAL_OK;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e000      	b.n	8001f6e <HAL_ETH_Stop_IT+0xda>
  }
  else
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
  }
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	ffff7fbe 	.word	0xffff7fbe

08001f80 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d107      	bne.n	8001fa2 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f96:	f043 0201 	orr.w	r2, r3, #1
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e076      	b.n	8002090 <HAL_ETH_Transmit+0x110>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa6:	2b10      	cmp	r3, #16
 8001fa8:	d171      	bne.n	800208e <HAL_ETH_Transmit+0x10e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001faa:	2200      	movs	r2, #0
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f001 f9e6 	bl	8003380 <ETH_Prepare_Tx_Descriptors>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d007      	beq.n	8001fca <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fbe:	f043 0202 	orr.w	r2, r3, #2
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e062      	b.n	8002090 <HAL_ETH_Transmit+0x110>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3206      	adds	r2, #6
 8001fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	629a      	str	r2, [r3, #40]	; 0x28
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d904      	bls.n	8001ff4 <HAL_ETH_Transmit+0x74>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fee:	1f1a      	subs	r2, r3, #4
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	3106      	adds	r1, #6
 8002000:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002004:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002008:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 800200a:	f7ff fa9d 	bl	8001548 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002010:	e034      	b.n	800207c <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d011      	beq.n	8002048 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002028:	f043 0208 	orr.w	r2, r3, #8
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	22e0      	movs	r2, #224	; 0xe0
 8002042:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e023      	b.n	8002090 <HAL_ETH_Transmit+0x110>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204e:	d015      	beq.n	800207c <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8002050:	f7ff fa7a 	bl	8001548 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	429a      	cmp	r2, r3
 800205e:	d302      	bcc.n	8002066 <HAL_ETH_Transmit+0xe6>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10a      	bne.n	800207c <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206a:	f043 0204 	orr.w	r2, r3, #4
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_READY;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2210      	movs	r2, #16
 8002076:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e009      	b.n	8002090 <HAL_ETH_Transmit+0x110>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	dbc6      	blt.n	8002012 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Set ETH HAL State to Ready */
    heth->gState = HAL_ETH_STATE_READY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2210      	movs	r2, #16
 8002088:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	e000      	b.n	8002090 <HAL_ETH_Transmit+0x110>
  }
  else
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
  }
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	; 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	332c      	adds	r3, #44	; 0x2c
 80020a4:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b4:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d06b      	beq.n	80021a2 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	e0bc      	b.n	8002248 <HAL_ETH_IsRxDataAvailable+0x1b0>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	3301      	adds	r3, #1
 80020d2:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d036      	beq.n	800214e <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	3301      	adds	r3, #1
 80020e4:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	3301      	adds	r3, #1
 80020f4:	61fb      	str	r3, [r7, #28]
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d902      	bls.n	8002102 <HAL_ETH_IsRxDataAvailable+0x6a>
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	3b04      	subs	r3, #4
 8002100:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	69fa      	ldr	r2, [r7, #28]
 8002106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800210a:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	db11      	blt.n	8002138 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00b      	beq.n	8002138 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2201      	movs	r2, #1
 8002124:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3301      	adds	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2b03      	cmp	r3, #3
 8002130:	d902      	bls.n	8002138 <HAL_ETH_IsRxDataAvailable+0xa0>
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3b04      	subs	r3, #4
 8002136:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 800214a:	2301      	movs	r3, #1
 800214c:	e07c      	b.n	8002248 <HAL_ETH_IsRxDataAvailable+0x1b0>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d012      	beq.n	8002180 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 800215e:	2301      	movs	r3, #1
 8002160:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3301      	adds	r3, #1
 8002166:	61fb      	str	r3, [r7, #28]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	2b03      	cmp	r3, #3
 800216c:	d902      	bls.n	8002174 <HAL_ETH_IsRxDataAvailable+0xdc>
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3b04      	subs	r3, #4
 8002172:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	69fa      	ldr	r2, [r7, #28]
 8002178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	e010      	b.n	80021a2 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	3301      	adds	r3, #1
 8002184:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3301      	adds	r3, #1
 800218a:	61fb      	str	r3, [r7, #28]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d902      	bls.n	8002198 <HAL_ETH_IsRxDataAvailable+0x100>
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3b04      	subs	r3, #4
 8002196:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	69fa      	ldr	r2, [r7, #28]
 800219c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a0:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	db02      	blt.n	80021b0 <HAL_ETH_IsRxDataAvailable+0x118>
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d98e      	bls.n	80020ce <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d044      	beq.n	8002240 <HAL_ETH_IsRxDataAvailable+0x1a8>
  {
    descidx = firstappdescidx;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	69fa      	ldr	r2, [r7, #28]
 80021be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c2:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	e036      	b.n	8002238 <HAL_ETH_IsRxDataAvailable+0x1a0>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	691a      	ldr	r2, [r3, #16]
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021d8:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <HAL_ETH_IsRxDataAvailable+0x15e>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <HAL_ETH_IsRxDataAvailable+0x17e>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	60da      	str	r2, [r3, #12]
      }

      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3301      	adds	r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b03      	cmp	r3, #3
 8002220:	d902      	bls.n	8002228 <HAL_ETH_IsRxDataAvailable+0x190>
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3b04      	subs	r3, #4
 8002226:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	69fa      	ldr	r2, [r7, #28]
 800222c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002230:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	3301      	adds	r3, #1
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	429a      	cmp	r2, r3
 800223e:	d3c4      	bcc.n	80021ca <HAL_ETH_IsRxDataAvailable+0x132>
    }
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2200      	movs	r2, #0
 8002244:	619a      	str	r2, [r3, #24]

  return 0;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3724      	adds	r7, #36	; 0x24
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	; 0x28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	332c      	adds	r3, #44	; 0x2c
 8002262:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002276:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d104      	bne.n	800228c <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e07d      	b.n	8002388 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10f      	bne.n	80022b4 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff feff 	bl	8002098 <HAL_ETH_IsRxDataAvailable>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e071      	b.n	8002388 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b2:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80022b4:	2300      	movs	r3, #0
 80022b6:	623b      	str	r3, [r7, #32]
 80022b8:	e031      	b.n	800231e <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	461a      	mov	r2, r3
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00b      	beq.n	80022ec <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	695b      	ldr	r3, [r3, #20]
 80022de:	461a      	mov	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	695a      	ldr	r2, [r3, #20]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80022f4:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	3301      	adds	r3, #1
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d902      	bls.n	8002308 <HAL_ETH_GetRxDataBuffer+0xb4>
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	3b04      	subs	r3, #4
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800230c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002310:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	3301      	adds	r3, #1
 800231c:	623b      	str	r3, [r7, #32]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	3b01      	subs	r3, #1
 8002324:	6a3a      	ldr	r2, [r7, #32]
 8002326:	429a      	cmp	r2, r3
 8002328:	d3c7      	bcc.n	80022ba <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	461a      	mov	r2, r3
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	429a      	cmp	r2, r3
 800234a:	d803      	bhi.n	8002354 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	e018      	b.n	8002386 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d012      	beq.n	8002382 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	695a      	ldr	r2, [r3, #20]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	461a      	mov	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	1ad2      	subs	r2, r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	605a      	str	r2, [r3, #4]
 8002380:	e001      	b.n	8002386 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3728      	adds	r7, #40	; 0x28
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	332c      	adds	r3, #44	; 0x2c
 800239e:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d107      	bne.n	80023be <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff fe72 	bl	8002098 <HAL_ETH_IsRxDataAvailable>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e017      	b.n	80023ee <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	4413      	add	r3, r2
 80023c6:	3b01      	subs	r3, #1
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d902      	bls.n	80023d6 <HAL_ETH_GetRxDataLength+0x46>
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3b04      	subs	r3, #4
 80023d4:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023de:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b089      	sub	sp, #36	; 0x24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	332c      	adds	r3, #44	; 0x2c
 8002402:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002412:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e055      	b.n	80024d2 <HAL_ETH_BuildRxDescriptors+0xdc>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	3301      	adds	r3, #1
 8002432:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002434:	2300      	movs	r3, #0
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	e03c      	b.n	80024b4 <HAL_ETH_BuildRxDescriptors+0xbe>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002448:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d009      	beq.n	8002466 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (dmarxdesclist->AppDescNbr - 1U))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	3b01      	subs	r3, #1
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	429a      	cmp	r2, r3
 8002490:	d20d      	bcs.n	80024ae <HAL_ETH_BuildRxDescriptors+0xb8>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3301      	adds	r3, #1
 8002496:	61fb      	str	r3, [r7, #28]
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	2b03      	cmp	r3, #3
 800249c:	d902      	bls.n	80024a4 <HAL_ETH_BuildRxDescriptors+0xae>
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3b04      	subs	r3, #4
 80024a2:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ac:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	3301      	adds	r3, #1
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d3be      	bcc.n	800243a <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6819      	ldr	r1, [r3, #0]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	f241 1328 	movw	r3, #4392	; 0x1128
 80024c6:	440b      	add	r3, r1
 80024c8:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3724      	adds	r7, #36	; 0x24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f6:	2b40      	cmp	r3, #64	; 0x40
 80024f8:	d113      	bne.n	8002522 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	f241 1334 	movw	r3, #4404	; 0x1134
 8002502:	4413      	add	r3, r2
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250a:	2b40      	cmp	r3, #64	; 0x40
 800250c:	d109      	bne.n	8002522 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f008 fb34 	bl	800ab7c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800251c:	f248 0240 	movw	r2, #32832	; 0x8040
 8002520:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b01      	cmp	r3, #1
 8002532:	d113      	bne.n	800255c <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	f241 1334 	movw	r3, #4404	; 0x1134
 800253c:	4413      	add	r3, r2
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b01      	cmp	r3, #1
 8002546:	d109      	bne.n	800255c <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f8b3 	bl	80026b4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002556:	f248 0201 	movw	r2, #32769	; 0x8001
 800255a:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800256e:	d149      	bne.n	8002604 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	f241 1334 	movw	r3, #4404	; 0x1134
 8002578:	4413      	add	r3, r2
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002580:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002584:	d13e      	bne.n	8002604 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258a:	f043 0208 	orr.w	r2, r3, #8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a4:	d11b      	bne.n	80025de <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	f241 1302 	movw	r3, #4354	; 0x1102
 80025b4:	4013      	ands	r3, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	f241 1334 	movw	r3, #4404	; 0x1134
 80025c2:	4413      	add	r3, r2
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6811      	ldr	r1, [r2, #0]
 80025ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025ce:	f241 1334 	movw	r3, #4404	; 0x1134
 80025d2:	440b      	add	r3, r1
 80025d4:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	22e0      	movs	r2, #224	; 0xe0
 80025da:	655a      	str	r2, [r3, #84]	; 0x54
 80025dc:	e00f      	b.n	80025fe <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80025f8:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 80025fc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f862 	bl	80026c8 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800260c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8002610:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002614:	d10e      	bne.n	8002634 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	22e0      	movs	r2, #224	; 0xe0
 8002626:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f857 	bl	80026dc <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800263c:	f003 0310 	and.w	r3, r3, #16
 8002640:	2b10      	cmp	r3, #16
 8002642:	d10d      	bne.n	8002660 <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800264c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f84b 	bl	80026f0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b20      	cmp	r3, #32
 800266e:	d10d      	bne.n	800268c <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002678:	f003 020f 	and.w	r2, r3, #15
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f83f 	bl	8002704 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	66da      	str	r2, [r3, #108]	; 0x6c
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800268c:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <HAL_ETH_IRQHandler+0x1d0>)
 800268e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002690:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d006      	beq.n	80026a6 <HAL_ETH_IRQHandler+0x1c6>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_ETH_IRQHandler+0x1d0>)
 800269a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f839 	bl	8002718 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	58000080 	.word	0x58000080

080026b4 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e03e      	b.n	80027cc <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002756:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	055b      	lsls	r3, r3, #21
 8002762:	4313      	orrs	r3, r2
 8002764:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	041b      	lsls	r3, r3, #16
 8002770:	4313      	orrs	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f043 030c 	orr.w	r3, r3, #12
 800277a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 800278e:	f7fe fedb 	bl	8001548 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002794:	e009      	b.n	80027aa <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002796:	f7fe fed7 	bl	8001548 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027a4:	d901      	bls.n	80027aa <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e010      	b.n	80027cc <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1ed      	bne.n	8002796 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e03c      	b.n	8002870 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027fe:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	055b      	lsls	r3, r3, #21
 800280a:	4313      	orrs	r3, r2
 800280c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	041b      	lsls	r3, r3, #16
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f023 030c 	bic.w	r3, r3, #12
 8002822:	f043 0304 	orr.w	r3, r3, #4
 8002826:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	b29a      	uxth	r2, r3
 8002834:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_ETH_WritePHYRegister+0xa4>)
 8002836:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800283a:	4a0f      	ldr	r2, [pc, #60]	; (8002878 <HAL_ETH_WritePHYRegister+0xa4>)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002842:	f7fe fe81 	bl	8001548 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002848:	e009      	b.n	800285e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800284a:	f7fe fe7d 	bl	8001548 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002858:	d901      	bls.n	800285e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e008      	b.n	8002870 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1ed      	bne.n	800284a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40028000 	.word	0x40028000

0800287c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e1c3      	b.n	8002c18 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 020c 	and.w	r2, r3, #12
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf14      	ite	ne
 80028ac:	2301      	movne	r3, #1
 80028ae:	2300      	moveq	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	461a      	mov	r2, r3
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	bf0c      	ite	eq
 80028d6:	2301      	moveq	r3, #1
 80028d8:	2300      	movne	r3, #0
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bf14      	ite	ne
 80028f2:	2301      	movne	r3, #1
 80028f4:	2300      	moveq	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf0c      	ite	eq
 800290c:	2301      	moveq	r3, #1
 800290e:	2300      	movne	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002922:	2b00      	cmp	r3, #0
 8002924:	bf14      	ite	ne
 8002926:	2301      	movne	r3, #1
 8002928:	2300      	moveq	r3, #0
 800292a:	b2db      	uxtb	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf14      	ite	ne
 8002940:	2301      	movne	r3, #1
 8002942:	2300      	moveq	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002972:	2b00      	cmp	r3, #0
 8002974:	bf14      	ite	ne
 8002976:	2301      	movne	r3, #1
 8002978:	2300      	moveq	r3, #0
 800297a:	b2db      	uxtb	r3, r3
 800297c:	461a      	mov	r2, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf0c      	ite	eq
 8002990:	2301      	moveq	r3, #1
 8002992:	2300      	movne	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	461a      	mov	r2, r3
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	bf0c      	ite	eq
 80029aa:	2301      	moveq	r3, #1
 80029ac:	2300      	movne	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	461a      	mov	r2, r3
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	bf14      	ite	ne
 80029c4:	2301      	movne	r3, #1
 80029c6:	2300      	moveq	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	bf14      	ite	ne
 80029de:	2301      	movne	r3, #1
 80029e0:	2300      	moveq	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf14      	ite	ne
 80029f8:	2301      	movne	r3, #1
 80029fa:	2300      	moveq	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	461a      	mov	r2, r3
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	bf14      	ite	ne
 8002a12:	2301      	movne	r3, #1
 8002a14:	2300      	moveq	r3, #0
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	461a      	mov	r2, r3
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	bf14      	ite	ne
 8002a3a:	2301      	movne	r3, #1
 8002a3c:	2300      	moveq	r3, #0
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	461a      	mov	r2, r3
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bf0c      	ite	eq
 8002a70:	2301      	moveq	r3, #1
 8002a72:	2300      	movne	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	461a      	mov	r2, r3
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bf14      	ite	ne
 8002a8c:	2301      	movne	r3, #1
 8002a8e:	2300      	moveq	r3, #0
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	bf14      	ite	ne
 8002aa8:	2301      	movne	r3, #1
 8002aaa:	2300      	moveq	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	bf14      	ite	ne
 8002ac4:	2301      	movne	r3, #1
 8002ac6:	2300      	moveq	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	0e5b      	lsrs	r3, r3, #25
 8002ada:	f003 021f 	and.w	r2, r3, #31
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	bf14      	ite	ne
 8002af0:	2301      	movne	r3, #1
 8002af2:	2300      	moveq	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	461a      	mov	r2, r3
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 020f 	and.w	r2, r3, #15
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	bf14      	ite	ne
 8002b1a:	2301      	movne	r3, #1
 8002b1c:	2300      	moveq	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	461a      	mov	r2, r3
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	bf0c      	ite	eq
 8002b36:	2301      	moveq	r3, #1
 8002b38:	2300      	movne	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	0c1b      	lsrs	r3, r3, #16
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	bf14      	ite	ne
 8002b70:	2301      	movne	r3, #1
 8002b72:	2300      	moveq	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	bf14      	ite	ne
 8002b8e:	2301      	movne	r3, #1
 8002b90:	2300      	moveq	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	461a      	mov	r2, r3
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002ba4:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002bb4:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bf14      	ite	ne
 8002bcc:	2301      	movne	r3, #1
 8002bce:	2300      	moveq	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002be2:	f003 0310 	and.w	r3, r3, #16
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	bf14      	ite	ne
 8002bea:	2301      	movne	r3, #1
 8002bec:	2300      	moveq	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bf0c      	ite	eq
 8002c08:	2301      	moveq	r3, #1
 8002c0a:	2300      	movne	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e00a      	b.n	8002c4e <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3c:	2b10      	cmp	r3, #16
 8002c3e:	d105      	bne.n	8002c4c <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8002c40:	6839      	ldr	r1, [r7, #0]
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f860 	bl	8002d08 <ETH_SetMACConfig>

    return HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	e000      	b.n	8002c4e <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
  }
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c68:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c70:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002c72:	f002 fb0d 	bl	8005290 <HAL_RCC_GetHCLKFreq>
 8002c76:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4a1e      	ldr	r2, [pc, #120]	; (8002cf4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d908      	bls.n	8002c92 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4a1d      	ldr	r2, [pc, #116]	; (8002cf8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d804      	bhi.n	8002c92 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	e027      	b.n	8002ce2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d908      	bls.n	8002cac <HAL_ETH_SetMDIOClockRange+0x54>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	4a17      	ldr	r2, [pc, #92]	; (8002cfc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d804      	bhi.n	8002cac <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	e01a      	b.n	8002ce2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4a13      	ldr	r2, [pc, #76]	; (8002cfc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d903      	bls.n	8002cbc <HAL_ETH_SetMDIOClockRange+0x64>
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d911      	bls.n	8002ce0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4a10      	ldr	r2, [pc, #64]	; (8002d00 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d908      	bls.n	8002cd6 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4a0f      	ldr	r2, [pc, #60]	; (8002d04 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d804      	bhi.n	8002cd6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	e005      	b.n	8002ce2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	e000      	b.n	8002ce2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002ce0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002cec:	bf00      	nop
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	01312cff 	.word	0x01312cff
 8002cf8:	02160ebf 	.word	0x02160ebf
 8002cfc:	039386ff 	.word	0x039386ff
 8002d00:	05f5e0ff 	.word	0x05f5e0ff
 8002d04:	08f0d17f 	.word	0x08f0d17f

08002d08 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002d1a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	791b      	ldrb	r3, [r3, #4]
 8002d20:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002d22:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	7b1b      	ldrb	r3, [r3, #12]
 8002d28:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002d2a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	7b5b      	ldrb	r3, [r3, #13]
 8002d30:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002d32:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	7b9b      	ldrb	r3, [r3, #14]
 8002d38:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002d3a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	7bdb      	ldrb	r3, [r3, #15]
 8002d40:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002d42:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	7c12      	ldrb	r2, [r2, #16]
 8002d48:	2a00      	cmp	r2, #0
 8002d4a:	d102      	bne.n	8002d52 <ETH_SetMACConfig+0x4a>
 8002d4c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d50:	e000      	b.n	8002d54 <ETH_SetMACConfig+0x4c>
 8002d52:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002d54:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	7c52      	ldrb	r2, [r2, #17]
 8002d5a:	2a00      	cmp	r2, #0
 8002d5c:	d102      	bne.n	8002d64 <ETH_SetMACConfig+0x5c>
 8002d5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d62:	e000      	b.n	8002d66 <ETH_SetMACConfig+0x5e>
 8002d64:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002d66:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	7c9b      	ldrb	r3, [r3, #18]
 8002d6c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002d6e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002d74:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002d7a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	7f1b      	ldrb	r3, [r3, #28]
 8002d80:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002d82:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	7f5b      	ldrb	r3, [r3, #29]
 8002d88:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002d8a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	7f92      	ldrb	r2, [r2, #30]
 8002d90:	2a00      	cmp	r2, #0
 8002d92:	d102      	bne.n	8002d9a <ETH_SetMACConfig+0x92>
 8002d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d98:	e000      	b.n	8002d9c <ETH_SetMACConfig+0x94>
 8002d9a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002d9c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	7fdb      	ldrb	r3, [r3, #31]
 8002da2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002da4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002dac:	2a00      	cmp	r2, #0
 8002dae:	d102      	bne.n	8002db6 <ETH_SetMACConfig+0xae>
 8002db0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002db4:	e000      	b.n	8002db8 <ETH_SetMACConfig+0xb0>
 8002db6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002db8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002dbe:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002dc6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002dc8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4b56      	ldr	r3, [pc, #344]	; (8002f34 <ETH_SetMACConfig+0x22c>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	68f9      	ldr	r1, [r7, #12]
 8002de2:	430b      	orrs	r3, r1
 8002de4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dea:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002df2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002df4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dfc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002dfe:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002e06:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002e08:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002e10:	2a00      	cmp	r2, #0
 8002e12:	d102      	bne.n	8002e1a <ETH_SetMACConfig+0x112>
 8002e14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e18:	e000      	b.n	8002e1c <ETH_SetMACConfig+0x114>
 8002e1a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002e1c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	4b42      	ldr	r3, [pc, #264]	; (8002f38 <ETH_SetMACConfig+0x230>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	68f9      	ldr	r1, [r7, #12]
 8002e36:	430b      	orrs	r3, r1
 8002e38:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e40:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	4b3a      	ldr	r3, [pc, #232]	; (8002f3c <ETH_SetMACConfig+0x234>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	68f9      	ldr	r1, [r7, #12]
 8002e5a:	430b      	orrs	r3, r1
 8002e5c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002e64:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e6a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002e72:	2a00      	cmp	r2, #0
 8002e74:	d101      	bne.n	8002e7a <ETH_SetMACConfig+0x172>
 8002e76:	2280      	movs	r2, #128	; 0x80
 8002e78:	e000      	b.n	8002e7c <ETH_SetMACConfig+0x174>
 8002e7a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002e7c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e82:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e8e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002e92:	4013      	ands	r3, r2
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6812      	ldr	r2, [r2, #0]
 8002e98:	68f9      	ldr	r1, [r7, #12]
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002ea4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002eac:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eba:	f023 0103 	bic.w	r1, r3, #3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002ed2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002eee:	2a00      	cmp	r2, #0
 8002ef0:	d101      	bne.n	8002ef6 <ETH_SetMACConfig+0x1ee>
 8002ef2:	2240      	movs	r2, #64	; 0x40
 8002ef4:	e000      	b.n	8002ef8 <ETH_SetMACConfig+0x1f0>
 8002ef6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002ef8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002f00:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002f02:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002f0a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002f18:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002f28:	bf00      	nop
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	00048083 	.word	0x00048083
 8002f38:	c0f88000 	.word	0xc0f88000
 8002f3c:	fffffef0 	.word	0xfffffef0

08002f40 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4b38      	ldr	r3, [pc, #224]	; (8003038 <ETH_SetDMAConfig+0xf8>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	6809      	ldr	r1, [r1, #0]
 8002f60:	431a      	orrs	r2, r3
 8002f62:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002f66:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	791b      	ldrb	r3, [r3, #4]
 8002f6c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002f72:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	7b1b      	ldrb	r3, [r3, #12]
 8002f78:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	f241 0304 	movw	r3, #4100	; 0x1004
 8002f86:	4413      	add	r3, r2
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b2c      	ldr	r3, [pc, #176]	; (800303c <ETH_SetDMAConfig+0xfc>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6811      	ldr	r1, [r2, #0]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	f241 0304 	movw	r3, #4100	; 0x1004
 8002f9a:	440b      	add	r3, r1
 8002f9c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	7b5b      	ldrb	r3, [r3, #13]
 8002fa2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	4b22      	ldr	r3, [pc, #136]	; (8003040 <ETH_SetDMAConfig+0x100>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6811      	ldr	r1, [r2, #0]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002fc6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	7d1b      	ldrb	r3, [r3, #20]
 8002fd0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002fd2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	7f5b      	ldrb	r3, [r3, #29]
 8002fd8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	f241 1304 	movw	r3, #4356	; 0x1104
 8002fe6:	4413      	add	r3, r2
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	4b16      	ldr	r3, [pc, #88]	; (8003044 <ETH_SetDMAConfig+0x104>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6811      	ldr	r1, [r2, #0]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	f241 1304 	movw	r3, #4356	; 0x1104
 8002ffa:	440b      	add	r3, r1
 8002ffc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	7f1b      	ldrb	r3, [r3, #28]
 8003002:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003008:	4313      	orrs	r3, r2
 800300a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	f241 1308 	movw	r3, #4360	; 0x1108
 8003014:	4413      	add	r3, r2
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <ETH_SetDMAConfig+0x108>)
 800301a:	4013      	ands	r3, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6811      	ldr	r1, [r2, #0]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	431a      	orrs	r2, r3
 8003024:	f241 1308 	movw	r3, #4360	; 0x1108
 8003028:	440b      	add	r3, r1
 800302a:	601a      	str	r2, [r3, #0]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	ffff87fd 	.word	0xffff87fd
 800303c:	ffff2ffe 	.word	0xffff2ffe
 8003040:	fffec000 	.word	0xfffec000
 8003044:	ffc0efef 	.word	0xffc0efef
 8003048:	7fc0ffff 	.word	0x7fc0ffff

0800304c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b0a4      	sub	sp, #144	; 0x90
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003054:	2301      	movs	r3, #1
 8003056:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800305a:	2300      	movs	r3, #0
 800305c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800305e:	2300      	movs	r3, #0
 8003060:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003064:	2300      	movs	r3, #0
 8003066:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800306a:	2301      	movs	r3, #1
 800306c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003070:	2301      	movs	r3, #1
 8003072:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003076:	2301      	movs	r3, #1
 8003078:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800307c:	2300      	movs	r3, #0
 800307e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003082:	2301      	movs	r3, #1
 8003084:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003088:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800308c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800308e:	2300      	movs	r3, #0
 8003090:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003094:	2300      	movs	r3, #0
 8003096:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003098:	2300      	movs	r3, #0
 800309a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800309e:	2300      	movs	r3, #0
 80030a0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80030a4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80030a8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80030b0:	2300      	movs	r3, #0
 80030b2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80030b4:	2301      	movs	r3, #1
 80030b6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80030c0:	2300      	movs	r3, #0
 80030c2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80030c6:	2300      	movs	r3, #0
 80030c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80030ce:	2300      	movs	r3, #0
 80030d0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80030d8:	2300      	movs	r3, #0
 80030da:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80030de:	2301      	movs	r3, #1
 80030e0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80030e4:	2320      	movs	r3, #32
 80030e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80030ea:	2301      	movs	r3, #1
 80030ec:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80030f0:	2300      	movs	r3, #0
 80030f2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80030f6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80030fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80030fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003100:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003102:	2300      	movs	r3, #0
 8003104:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003108:	2302      	movs	r3, #2
 800310a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800310e:	2300      	movs	r3, #0
 8003110:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003114:	2300      	movs	r3, #0
 8003116:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800311a:	2300      	movs	r3, #0
 800311c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003120:	2301      	movs	r3, #1
 8003122:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003126:	2300      	movs	r3, #0
 8003128:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800312a:	2301      	movs	r3, #1
 800312c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003130:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003134:	4619      	mov	r1, r3
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff fde6 	bl	8002d08 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800313c:	2301      	movs	r3, #1
 800313e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003140:	2301      	movs	r3, #1
 8003142:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003144:	2300      	movs	r3, #0
 8003146:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003148:	2300      	movs	r3, #0
 800314a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800314e:	2300      	movs	r3, #0
 8003150:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003152:	2300      	movs	r3, #0
 8003154:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003156:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800315a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800315c:	2300      	movs	r3, #0
 800315e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003160:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003164:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003166:	2300      	movs	r3, #0
 8003168:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800316c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003170:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003172:	f107 0308 	add.w	r3, r7, #8
 8003176:	4619      	mov	r1, r3
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff fee1 	bl	8002f40 <ETH_SetDMAConfig>
}
 800317e:	bf00      	nop
 8003180:	3790      	adds	r7, #144	; 0x90
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003198:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031a0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80031a2:	f002 f875 	bl	8005290 <HAL_RCC_GetHCLKFreq>
 80031a6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4a1e      	ldr	r2, [pc, #120]	; (8003224 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d908      	bls.n	80031c2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4a1d      	ldr	r2, [pc, #116]	; (8003228 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d804      	bhi.n	80031c2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	e027      	b.n	8003212 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4a18      	ldr	r2, [pc, #96]	; (8003228 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d908      	bls.n	80031dc <ETH_MAC_MDIO_ClkConfig+0x54>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	4a17      	ldr	r2, [pc, #92]	; (800322c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d804      	bhi.n	80031dc <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	e01a      	b.n	8003212 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4a13      	ldr	r2, [pc, #76]	; (800322c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d903      	bls.n	80031ec <ETH_MAC_MDIO_ClkConfig+0x64>
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	4a12      	ldr	r2, [pc, #72]	; (8003230 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d911      	bls.n	8003210 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4a10      	ldr	r2, [pc, #64]	; (8003230 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d908      	bls.n	8003206 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4a0f      	ldr	r2, [pc, #60]	; (8003234 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d804      	bhi.n	8003206 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	e005      	b.n	8003212 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	e000      	b.n	8003212 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003210:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	01312cff 	.word	0x01312cff
 8003228:	02160ebf 	.word	0x02160ebf
 800322c:	039386ff 	.word	0x039386ff
 8003230:	05f5e0ff 	.word	0x05f5e0ff
 8003234:	08f0d17f 	.word	0x08f0d17f

08003238 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	e01d      	b.n	8003282 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68d9      	ldr	r1, [r3, #12]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4613      	mov	r3, r2
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4413      	add	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	440b      	add	r3, r1
 8003256:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2200      	movs	r2, #0
 8003262:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2200      	movs	r2, #0
 800326e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	3206      	adds	r2, #6
 8003278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3301      	adds	r3, #1
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b03      	cmp	r3, #3
 8003286:	d9de      	bls.n	8003246 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	f241 132c 	movw	r3, #4396	; 0x112c
 8003296:	4413      	add	r3, r2
 8003298:	2203      	movs	r2, #3
 800329a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68d9      	ldr	r1, [r3, #12]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	f241 1314 	movw	r3, #4372	; 0x1114
 80032a8:	4413      	add	r3, r2
 80032aa:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80032b8:	601a      	str	r2, [r3, #0]
}
 80032ba:	bf00      	nop
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b085      	sub	sp, #20
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	e024      	b.n	800331e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6919      	ldr	r1, [r3, #16]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	4613      	mov	r3, r2
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	440b      	add	r3, r1
 80032e4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2200      	movs	r2, #0
 80032f0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2200      	movs	r2, #0
 80032f6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2200      	movs	r2, #0
 80032fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2200      	movs	r2, #0
 8003302:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2200      	movs	r2, #0
 8003308:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	330a      	adds	r3, #10
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	3301      	adds	r3, #1
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b03      	cmp	r3, #3
 8003322:	d9d7      	bls.n	80032d4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	f241 1330 	movw	r3, #4400	; 0x1130
 800334a:	4413      	add	r3, r2
 800334c:	2203      	movs	r2, #3
 800334e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6919      	ldr	r1, [r3, #16]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	f241 131c 	movw	r3, #4380	; 0x111c
 800335c:	4413      	add	r3, r2
 800335e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	f241 1328 	movw	r3, #4392	; 0x1128
 8003370:	4413      	add	r3, r2
 8003372:	6019      	str	r1, [r3, #0]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003380:	b480      	push	{r7}
 8003382:	b08d      	sub	sp, #52	; 0x34
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	3318      	adds	r3, #24
 8003390:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 800339e:	2300      	movs	r3, #0
 80033a0:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033aa:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033be:	d101      	bne.n	80033c4 <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 80033c0:	2302      	movs	r3, #2
 80033c2:	e223      	b.n	800380c <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d044      	beq.n	800345a <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	4b72      	ldr	r3, [pc, #456]	; (80035a0 <ETH_Prepare_Tx_Descriptors+0x220>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033dc:	431a      	orrs	r2, r3
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80033fc:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d027      	beq.n	800345a <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	b29a      	uxth	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	041b      	lsls	r3, r3, #16
 8003416:	431a      	orrs	r2, r3
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003428:	6a3b      	ldr	r3, [r7, #32]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	431a      	orrs	r2, r3
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003448:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003458:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0310 	and.w	r3, r3, #16
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00e      	beq.n	8003484 <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	4b4e      	ldr	r3, [pc, #312]	; (80035a4 <ETH_Prepare_Tx_Descriptors+0x224>)
 800346c:	4013      	ands	r3, r2
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	6992      	ldr	r2, [r2, #24]
 8003472:	431a      	orrs	r2, r3
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d105      	bne.n	800349c <ETH_Prepare_Tx_Descriptors+0x11c>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b00      	cmp	r3, #0
 800349a:	d030      	beq.n	80034fe <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80034b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b6:	3301      	adds	r3, #1
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d902      	bls.n	80034c6 <ETH_Prepare_Tx_Descriptors+0x146>
 80034c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c2:	3b04      	subs	r3, #4
 80034c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ce:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	3301      	adds	r3, #1
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034e2:	d10c      	bne.n	80034fe <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ec:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80034fa:	2302      	movs	r3, #2
 80034fc:	e186      	b.n	800380c <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003500:	3301      	adds	r3, #1
 8003502:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	689a      	ldr	r2, [r3, #8]
 8003512:	4b24      	ldr	r3, [pc, #144]	; (80035a4 <ETH_Prepare_Tx_Descriptors+0x224>)
 8003514:	4013      	ands	r3, r2
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	6852      	ldr	r2, [r2, #4]
 800351a:	431a      	orrs	r2, r3
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d012      	beq.n	800354e <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	4b1a      	ldr	r3, [pc, #104]	; (80035a8 <ETH_Prepare_Tx_Descriptors+0x228>)
 800353e:	4013      	ands	r3, r2
 8003540:	69fa      	ldr	r2, [r7, #28]
 8003542:	6852      	ldr	r2, [r2, #4]
 8003544:	0412      	lsls	r2, r2, #16
 8003546:	431a      	orrs	r2, r3
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	e008      	b.n	8003560 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	2200      	movs	r2, #0
 8003552:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <ETH_Prepare_Tx_Descriptors+0x228>)
 800355a:	4013      	ands	r3, r2
 800355c:	6a3a      	ldr	r2, [r7, #32]
 800355e:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0310 	and.w	r3, r3, #16
 8003568:	2b00      	cmp	r3, #0
 800356a:	d021      	beq.n	80035b0 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	04db      	lsls	r3, r3, #19
 800357a:	431a      	orrs	r2, r3
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003580:	6a3b      	ldr	r3, [r7, #32]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	4b09      	ldr	r3, [pc, #36]	; (80035ac <ETH_Prepare_Tx_Descriptors+0x22c>)
 8003586:	4013      	ands	r3, r2
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	69d2      	ldr	r2, [r2, #28]
 800358c:	431a      	orrs	r2, r3
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	e02e      	b.n	80035fe <ETH_Prepare_Tx_Descriptors+0x27e>
 80035a0:	ffff0000 	.word	0xffff0000
 80035a4:	ffffc000 	.word	0xffffc000
 80035a8:	c000ffff 	.word	0xc000ffff
 80035ac:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	4b98      	ldr	r3, [pc, #608]	; (8003818 <ETH_Prepare_Tx_Descriptors+0x498>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	6852      	ldr	r2, [r2, #4]
 80035bc:	431a      	orrs	r2, r3
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d008      	beq.n	80035e0 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	431a      	orrs	r2, r3
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0320 	and.w	r3, r3, #32
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d008      	beq.n	80035fe <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b00      	cmp	r3, #0
 8003608:	d008      	beq.n	800361c <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003616:	431a      	orrs	r2, r3
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 80c0 	beq.w	80037ce <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	431a      	orrs	r2, r3
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003660:	e0b5      	b.n	80037ce <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003670:	3301      	adds	r3, #1
 8003672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003676:	2b03      	cmp	r3, #3
 8003678:	d902      	bls.n	8003680 <ETH_Prepare_Tx_Descriptors+0x300>
 800367a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367c:	3b04      	subs	r3, #4
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003688:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800369e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036a2:	d126      	bne.n	80036f2 <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 80036b2:	2300      	movs	r3, #0
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
 80036b6:	e016      	b.n	80036e6 <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c6:	3301      	adds	r3, #1
 80036c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d902      	bls.n	80036d6 <ETH_Prepare_Tx_Descriptors+0x356>
 80036d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d2:	3b04      	subs	r3, #4
 80036d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036de:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	3301      	adds	r3, #1
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
 80036e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d3e4      	bcc.n	80036b8 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 80036ee:	2302      	movs	r3, #2
 80036f0:	e08c      	b.n	800380c <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 80036f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f4:	3301      	adds	r3, #1
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	461a      	mov	r2, r3
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	4b43      	ldr	r3, [pc, #268]	; (800381c <ETH_Prepare_Tx_Descriptors+0x49c>)
 800370e:	4013      	ands	r3, r2
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	6852      	ldr	r2, [r2, #4]
 8003714:	431a      	orrs	r2, r3
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d012      	beq.n	8003748 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	4b3a      	ldr	r3, [pc, #232]	; (8003820 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003738:	4013      	ands	r3, r2
 800373a:	69fa      	ldr	r2, [r7, #28]
 800373c:	6852      	ldr	r2, [r2, #4]
 800373e:	0412      	lsls	r2, r2, #16
 8003740:	431a      	orrs	r2, r3
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	609a      	str	r2, [r3, #8]
 8003746:	e008      	b.n	800375a <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	2200      	movs	r2, #0
 800374c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	4b33      	ldr	r3, [pc, #204]	; (8003820 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003754:	4013      	ands	r3, r2
 8003756:	6a3a      	ldr	r2, [r7, #32]
 8003758:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00f      	beq.n	8003786 <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	4b2e      	ldr	r3, [pc, #184]	; (8003824 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 800376c:	4013      	ands	r3, r2
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	69d2      	ldr	r2, [r2, #28]
 8003772:	431a      	orrs	r2, r3
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	60da      	str	r2, [r3, #12]
 8003784:	e017      	b.n	80037b6 <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	4b23      	ldr	r3, [pc, #140]	; (8003818 <ETH_Prepare_Tx_Descriptors+0x498>)
 800378c:	4013      	ands	r3, r2
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	6852      	ldr	r2, [r2, #4]
 8003792:	431a      	orrs	r2, r3
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	431a      	orrs	r2, r3
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f47f af45 	bne.w	8003662 <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d006      	beq.n	80037ec <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	609a      	str	r2, [r3, #8]
 80037ea:	e005      	b.n	80037f8 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003808:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3734      	adds	r7, #52	; 0x34
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	ffff8000 	.word	0xffff8000
 800381c:	ffffc000 	.word	0xffffc000
 8003820:	c000ffff 	.word	0xc000ffff
 8003824:	fffc0000 	.word	0xfffc0000

08003828 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003836:	4b47      	ldr	r3, [pc, #284]	; (8003954 <HAL_GPIO_Init+0x12c>)
 8003838:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a46      	ldr	r2, [pc, #280]	; (8003958 <HAL_GPIO_Init+0x130>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d02b      	beq.n	800389a <HAL_GPIO_Init+0x72>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a45      	ldr	r2, [pc, #276]	; (800395c <HAL_GPIO_Init+0x134>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d027      	beq.n	800389a <HAL_GPIO_Init+0x72>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a44      	ldr	r2, [pc, #272]	; (8003960 <HAL_GPIO_Init+0x138>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d023      	beq.n	800389a <HAL_GPIO_Init+0x72>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a43      	ldr	r2, [pc, #268]	; (8003964 <HAL_GPIO_Init+0x13c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d01f      	beq.n	800389a <HAL_GPIO_Init+0x72>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a42      	ldr	r2, [pc, #264]	; (8003968 <HAL_GPIO_Init+0x140>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d01b      	beq.n	800389a <HAL_GPIO_Init+0x72>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a41      	ldr	r2, [pc, #260]	; (800396c <HAL_GPIO_Init+0x144>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d017      	beq.n	800389a <HAL_GPIO_Init+0x72>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a40      	ldr	r2, [pc, #256]	; (8003970 <HAL_GPIO_Init+0x148>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d013      	beq.n	800389a <HAL_GPIO_Init+0x72>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a3f      	ldr	r2, [pc, #252]	; (8003974 <HAL_GPIO_Init+0x14c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00f      	beq.n	800389a <HAL_GPIO_Init+0x72>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a3e      	ldr	r2, [pc, #248]	; (8003978 <HAL_GPIO_Init+0x150>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00b      	beq.n	800389a <HAL_GPIO_Init+0x72>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a3d      	ldr	r2, [pc, #244]	; (800397c <HAL_GPIO_Init+0x154>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d007      	beq.n	800389a <HAL_GPIO_Init+0x72>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a3c      	ldr	r2, [pc, #240]	; (8003980 <HAL_GPIO_Init+0x158>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x72>
 8003892:	21bb      	movs	r1, #187	; 0xbb
 8003894:	483b      	ldr	r0, [pc, #236]	; (8003984 <HAL_GPIO_Init+0x15c>)
 8003896:	f7fd fa24 	bl	8000ce2 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_GPIO_Init+0x88>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	4b37      	ldr	r3, [pc, #220]	; (8003988 <HAL_GPIO_Init+0x160>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_GPIO_Init+0x90>
 80038b0:	21bc      	movs	r1, #188	; 0xbc
 80038b2:	4834      	ldr	r0, [pc, #208]	; (8003984 <HAL_GPIO_Init+0x15c>)
 80038b4:	f7fd fa15 	bl	8000ce2 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d035      	beq.n	800392c <HAL_GPIO_Init+0x104>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d031      	beq.n	800392c <HAL_GPIO_Init+0x104>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b11      	cmp	r3, #17
 80038ce:	d02d      	beq.n	800392c <HAL_GPIO_Init+0x104>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d029      	beq.n	800392c <HAL_GPIO_Init+0x104>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b12      	cmp	r3, #18
 80038de:	d025      	beq.n	800392c <HAL_GPIO_Init+0x104>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	4a29      	ldr	r2, [pc, #164]	; (800398c <HAL_GPIO_Init+0x164>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d020      	beq.n	800392c <HAL_GPIO_Init+0x104>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	4a28      	ldr	r2, [pc, #160]	; (8003990 <HAL_GPIO_Init+0x168>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d01b      	beq.n	800392c <HAL_GPIO_Init+0x104>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	4a26      	ldr	r2, [pc, #152]	; (8003994 <HAL_GPIO_Init+0x16c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d016      	beq.n	800392c <HAL_GPIO_Init+0x104>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	4a25      	ldr	r2, [pc, #148]	; (8003998 <HAL_GPIO_Init+0x170>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d011      	beq.n	800392c <HAL_GPIO_Init+0x104>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4a23      	ldr	r2, [pc, #140]	; (800399c <HAL_GPIO_Init+0x174>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00c      	beq.n	800392c <HAL_GPIO_Init+0x104>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	4a22      	ldr	r2, [pc, #136]	; (80039a0 <HAL_GPIO_Init+0x178>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d007      	beq.n	800392c <HAL_GPIO_Init+0x104>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	2b03      	cmp	r3, #3
 8003922:	d003      	beq.n	800392c <HAL_GPIO_Init+0x104>
 8003924:	21bd      	movs	r1, #189	; 0xbd
 8003926:	4817      	ldr	r0, [pc, #92]	; (8003984 <HAL_GPIO_Init+0x15c>)
 8003928:	f7fd f9db 	bl	8000ce2 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 821a 	beq.w	8003d6a <HAL_GPIO_Init+0x542>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b01      	cmp	r3, #1
 800393c:	f000 8215 	beq.w	8003d6a <HAL_GPIO_Init+0x542>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b02      	cmp	r3, #2
 8003946:	f000 8210 	beq.w	8003d6a <HAL_GPIO_Init+0x542>
 800394a:	21be      	movs	r1, #190	; 0xbe
 800394c:	480d      	ldr	r0, [pc, #52]	; (8003984 <HAL_GPIO_Init+0x15c>)
 800394e:	f7fd f9c8 	bl	8000ce2 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003952:	e20a      	b.n	8003d6a <HAL_GPIO_Init+0x542>
 8003954:	58000080 	.word	0x58000080
 8003958:	58020000 	.word	0x58020000
 800395c:	58020400 	.word	0x58020400
 8003960:	58020800 	.word	0x58020800
 8003964:	58020c00 	.word	0x58020c00
 8003968:	58021000 	.word	0x58021000
 800396c:	58021400 	.word	0x58021400
 8003970:	58021800 	.word	0x58021800
 8003974:	58021c00 	.word	0x58021c00
 8003978:	58022000 	.word	0x58022000
 800397c:	58022400 	.word	0x58022400
 8003980:	58022800 	.word	0x58022800
 8003984:	08018bfc 	.word	0x08018bfc
 8003988:	ffff0000 	.word	0xffff0000
 800398c:	11110000 	.word	0x11110000
 8003990:	11210000 	.word	0x11210000
 8003994:	11310000 	.word	0x11310000
 8003998:	11120000 	.word	0x11120000
 800399c:	11220000 	.word	0x11220000
 80039a0:	11320000 	.word	0x11320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	2101      	movs	r1, #1
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	fa01 f303 	lsl.w	r3, r1, r3
 80039b0:	4013      	ands	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 81d4 	beq.w	8003d64 <HAL_GPIO_Init+0x53c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d00b      	beq.n	80039dc <HAL_GPIO_Init+0x1b4>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d007      	beq.n	80039dc <HAL_GPIO_Init+0x1b4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039d0:	2b11      	cmp	r3, #17
 80039d2:	d003      	beq.n	80039dc <HAL_GPIO_Init+0x1b4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b12      	cmp	r3, #18
 80039da:	d144      	bne.n	8003a66 <HAL_GPIO_Init+0x23e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00f      	beq.n	8003a04 <HAL_GPIO_Init+0x1dc>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d00b      	beq.n	8003a04 <HAL_GPIO_Init+0x1dc>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d007      	beq.n	8003a04 <HAL_GPIO_Init+0x1dc>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d003      	beq.n	8003a04 <HAL_GPIO_Init+0x1dc>
 80039fc:	21ce      	movs	r1, #206	; 0xce
 80039fe:	4897      	ldr	r0, [pc, #604]	; (8003c5c <HAL_GPIO_Init+0x434>)
 8003a00:	f7fd f96f 	bl	8000ce2 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	2203      	movs	r2, #3
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43db      	mvns	r3, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4013      	ands	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	091b      	lsrs	r3, r3, #4
 8003a50:	f003 0201 	and.w	r2, r3, #1
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	2203      	movs	r2, #3
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	43db      	mvns	r3, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d003      	beq.n	8003aa6 <HAL_GPIO_Init+0x27e>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b12      	cmp	r3, #18
 8003aa4:	d15b      	bne.n	8003b5e <HAL_GPIO_Init+0x336>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a6d      	ldr	r2, [pc, #436]	; (8003c60 <HAL_GPIO_Init+0x438>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d02b      	beq.n	8003b06 <HAL_GPIO_Init+0x2de>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a6c      	ldr	r2, [pc, #432]	; (8003c64 <HAL_GPIO_Init+0x43c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d027      	beq.n	8003b06 <HAL_GPIO_Init+0x2de>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a6b      	ldr	r2, [pc, #428]	; (8003c68 <HAL_GPIO_Init+0x440>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d023      	beq.n	8003b06 <HAL_GPIO_Init+0x2de>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a6a      	ldr	r2, [pc, #424]	; (8003c6c <HAL_GPIO_Init+0x444>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d01f      	beq.n	8003b06 <HAL_GPIO_Init+0x2de>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a69      	ldr	r2, [pc, #420]	; (8003c70 <HAL_GPIO_Init+0x448>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d01b      	beq.n	8003b06 <HAL_GPIO_Init+0x2de>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a68      	ldr	r2, [pc, #416]	; (8003c74 <HAL_GPIO_Init+0x44c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d017      	beq.n	8003b06 <HAL_GPIO_Init+0x2de>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a67      	ldr	r2, [pc, #412]	; (8003c78 <HAL_GPIO_Init+0x450>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d013      	beq.n	8003b06 <HAL_GPIO_Init+0x2de>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a66      	ldr	r2, [pc, #408]	; (8003c7c <HAL_GPIO_Init+0x454>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00f      	beq.n	8003b06 <HAL_GPIO_Init+0x2de>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a65      	ldr	r2, [pc, #404]	; (8003c80 <HAL_GPIO_Init+0x458>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00b      	beq.n	8003b06 <HAL_GPIO_Init+0x2de>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a64      	ldr	r2, [pc, #400]	; (8003c84 <HAL_GPIO_Init+0x45c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d007      	beq.n	8003b06 <HAL_GPIO_Init+0x2de>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a63      	ldr	r2, [pc, #396]	; (8003c88 <HAL_GPIO_Init+0x460>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d003      	beq.n	8003b06 <HAL_GPIO_Init+0x2de>
 8003afe:	21e6      	movs	r1, #230	; 0xe6
 8003b00:	4856      	ldr	r0, [pc, #344]	; (8003c5c <HAL_GPIO_Init+0x434>)
 8003b02:	f7fd f8ee 	bl	8000ce2 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b0f      	cmp	r3, #15
 8003b0c:	d903      	bls.n	8003b16 <HAL_GPIO_Init+0x2ee>
 8003b0e:	21e7      	movs	r1, #231	; 0xe7
 8003b10:	4852      	ldr	r0, [pc, #328]	; (8003c5c <HAL_GPIO_Init+0x434>)
 8003b12:	f7fd f8e6 	bl	8000ce2 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	08da      	lsrs	r2, r3, #3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3208      	adds	r2, #8
 8003b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	220f      	movs	r2, #15
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4013      	ands	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	08da      	lsrs	r2, r3, #3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3208      	adds	r2, #8
 8003b58:	69b9      	ldr	r1, [r7, #24]
 8003b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	2203      	movs	r2, #3
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4013      	ands	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f003 0203 	and.w	r2, r3, #3
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 80e2 	beq.w	8003d64 <HAL_GPIO_Init+0x53c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ba0:	4b3a      	ldr	r3, [pc, #232]	; (8003c8c <HAL_GPIO_Init+0x464>)
 8003ba2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ba6:	4a39      	ldr	r2, [pc, #228]	; (8003c8c <HAL_GPIO_Init+0x464>)
 8003ba8:	f043 0302 	orr.w	r3, r3, #2
 8003bac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003bb0:	4b36      	ldr	r3, [pc, #216]	; (8003c8c <HAL_GPIO_Init+0x464>)
 8003bb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	60fb      	str	r3, [r7, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bbe:	4a34      	ldr	r2, [pc, #208]	; (8003c90 <HAL_GPIO_Init+0x468>)
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	089b      	lsrs	r3, r3, #2
 8003bc4:	3302      	adds	r3, #2
 8003bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	220f      	movs	r2, #15
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4013      	ands	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a1e      	ldr	r2, [pc, #120]	; (8003c60 <HAL_GPIO_Init+0x438>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d054      	beq.n	8003c94 <HAL_GPIO_Init+0x46c>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a1d      	ldr	r2, [pc, #116]	; (8003c64 <HAL_GPIO_Init+0x43c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d031      	beq.n	8003c56 <HAL_GPIO_Init+0x42e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a1c      	ldr	r2, [pc, #112]	; (8003c68 <HAL_GPIO_Init+0x440>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d02b      	beq.n	8003c52 <HAL_GPIO_Init+0x42a>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a1b      	ldr	r2, [pc, #108]	; (8003c6c <HAL_GPIO_Init+0x444>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d025      	beq.n	8003c4e <HAL_GPIO_Init+0x426>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a1a      	ldr	r2, [pc, #104]	; (8003c70 <HAL_GPIO_Init+0x448>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01f      	beq.n	8003c4a <HAL_GPIO_Init+0x422>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a19      	ldr	r2, [pc, #100]	; (8003c74 <HAL_GPIO_Init+0x44c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d019      	beq.n	8003c46 <HAL_GPIO_Init+0x41e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <HAL_GPIO_Init+0x450>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d013      	beq.n	8003c42 <HAL_GPIO_Init+0x41a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a17      	ldr	r2, [pc, #92]	; (8003c7c <HAL_GPIO_Init+0x454>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00d      	beq.n	8003c3e <HAL_GPIO_Init+0x416>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a16      	ldr	r2, [pc, #88]	; (8003c80 <HAL_GPIO_Init+0x458>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d007      	beq.n	8003c3a <HAL_GPIO_Init+0x412>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a15      	ldr	r2, [pc, #84]	; (8003c84 <HAL_GPIO_Init+0x45c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d101      	bne.n	8003c36 <HAL_GPIO_Init+0x40e>
 8003c32:	2309      	movs	r3, #9
 8003c34:	e02f      	b.n	8003c96 <HAL_GPIO_Init+0x46e>
 8003c36:	230a      	movs	r3, #10
 8003c38:	e02d      	b.n	8003c96 <HAL_GPIO_Init+0x46e>
 8003c3a:	2308      	movs	r3, #8
 8003c3c:	e02b      	b.n	8003c96 <HAL_GPIO_Init+0x46e>
 8003c3e:	2307      	movs	r3, #7
 8003c40:	e029      	b.n	8003c96 <HAL_GPIO_Init+0x46e>
 8003c42:	2306      	movs	r3, #6
 8003c44:	e027      	b.n	8003c96 <HAL_GPIO_Init+0x46e>
 8003c46:	2305      	movs	r3, #5
 8003c48:	e025      	b.n	8003c96 <HAL_GPIO_Init+0x46e>
 8003c4a:	2304      	movs	r3, #4
 8003c4c:	e023      	b.n	8003c96 <HAL_GPIO_Init+0x46e>
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e021      	b.n	8003c96 <HAL_GPIO_Init+0x46e>
 8003c52:	2302      	movs	r3, #2
 8003c54:	e01f      	b.n	8003c96 <HAL_GPIO_Init+0x46e>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e01d      	b.n	8003c96 <HAL_GPIO_Init+0x46e>
 8003c5a:	bf00      	nop
 8003c5c:	08018bfc 	.word	0x08018bfc
 8003c60:	58020000 	.word	0x58020000
 8003c64:	58020400 	.word	0x58020400
 8003c68:	58020800 	.word	0x58020800
 8003c6c:	58020c00 	.word	0x58020c00
 8003c70:	58021000 	.word	0x58021000
 8003c74:	58021400 	.word	0x58021400
 8003c78:	58021800 	.word	0x58021800
 8003c7c:	58021c00 	.word	0x58021c00
 8003c80:	58022000 	.word	0x58022000
 8003c84:	58022400 	.word	0x58022400
 8003c88:	58022800 	.word	0x58022800
 8003c8c:	58024400 	.word	0x58024400
 8003c90:	58000400 	.word	0x58000400
 8003c94:	2300      	movs	r3, #0
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	f002 0203 	and.w	r2, r2, #3
 8003c9c:	0092      	lsls	r2, r2, #2
 8003c9e:	4093      	lsls	r3, r2
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ca6:	4937      	ldr	r1, [pc, #220]	; (8003d84 <HAL_GPIO_Init+0x55c>)
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	089b      	lsrs	r3, r3, #2
 8003cac:	3302      	adds	r3, #2
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_GPIO_Init+0x4b0>
        {
          temp |= iocurrent;
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4013      	ands	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_Init+0x4da>
        {
          temp |= iocurrent;
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	43db      	mvns	r3, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4013      	ands	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_GPIO_Init+0x506>
        {
          temp |= iocurrent;
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003d2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	43db      	mvns	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_GPIO_Init+0x534>
        {
          temp |= iocurrent;
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	3301      	adds	r3, #1
 8003d68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	fa22 f303 	lsr.w	r3, r2, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f47f ae15 	bne.w	80039a4 <HAL_GPIO_Init+0x17c>
  }
}
 8003d7a:	bf00      	nop
 8003d7c:	3720      	adds	r7, #32
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	58000400 	.word	0x58000400

08003d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	460b      	mov	r3, r1
 8003d92:	807b      	strh	r3, [r7, #2]
 8003d94:	4613      	mov	r3, r2
 8003d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003d98:	887b      	ldrh	r3, [r7, #2]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d004      	beq.n	8003da8 <HAL_GPIO_WritePin+0x20>
 8003d9e:	887a      	ldrh	r2, [r7, #2]
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <HAL_GPIO_WritePin+0x60>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d004      	beq.n	8003db2 <HAL_GPIO_WritePin+0x2a>
 8003da8:	f240 11ad 	movw	r1, #429	; 0x1ad
 8003dac:	480f      	ldr	r0, [pc, #60]	; (8003dec <HAL_GPIO_WritePin+0x64>)
 8003dae:	f7fc ff98 	bl	8000ce2 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003db2:	787b      	ldrb	r3, [r7, #1]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d007      	beq.n	8003dc8 <HAL_GPIO_WritePin+0x40>
 8003db8:	787b      	ldrb	r3, [r7, #1]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d004      	beq.n	8003dc8 <HAL_GPIO_WritePin+0x40>
 8003dbe:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003dc2:	480a      	ldr	r0, [pc, #40]	; (8003dec <HAL_GPIO_WritePin+0x64>)
 8003dc4:	f7fc ff8d 	bl	8000ce2 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003dc8:	787b      	ldrb	r3, [r7, #1]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dce:	887a      	ldrh	r2, [r7, #2]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003dd4:	e003      	b.n	8003dde <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003dd6:	887b      	ldrh	r3, [r7, #2]
 8003dd8:	041a      	lsls	r2, r3, #16
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	619a      	str	r2, [r3, #24]
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	ffff0000 	.word	0xffff0000
 8003dec:	08018bfc 	.word	0x08018bfc

08003df0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003dfc:	887b      	ldrh	r3, [r7, #2]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d004      	beq.n	8003e0c <HAL_GPIO_TogglePin+0x1c>
 8003e02:	887a      	ldrh	r2, [r7, #2]
 8003e04:	4b0d      	ldr	r3, [pc, #52]	; (8003e3c <HAL_GPIO_TogglePin+0x4c>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d004      	beq.n	8003e16 <HAL_GPIO_TogglePin+0x26>
 8003e0c:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003e10:	480b      	ldr	r0, [pc, #44]	; (8003e40 <HAL_GPIO_TogglePin+0x50>)
 8003e12:	f7fc ff66 	bl	8000ce2 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	887b      	ldrh	r3, [r7, #2]
 8003e1c:	401a      	ands	r2, r3
 8003e1e:	887b      	ldrh	r3, [r7, #2]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d104      	bne.n	8003e2e <HAL_GPIO_TogglePin+0x3e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003e24:	887b      	ldrh	r3, [r7, #2]
 8003e26:	041a      	lsls	r2, r3, #16
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003e2c:	e002      	b.n	8003e34 <HAL_GPIO_TogglePin+0x44>
    GPIOx->BSRR = GPIO_Pin;
 8003e2e:	887a      	ldrh	r2, [r7, #2]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	619a      	str	r2, [r3, #24]
}
 8003e34:	bf00      	nop
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	ffff0000 	.word	0xffff0000
 8003e40:	08018bfc 	.word	0x08018bfc

08003e44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d007      	beq.n	8003e62 <HAL_PWREx_ConfigSupply+0x1e>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d004      	beq.n	8003e62 <HAL_PWREx_ConfigSupply+0x1e>
 8003e58:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8003e5c:	481a      	ldr	r0, [pc, #104]	; (8003ec8 <HAL_PWREx_ConfigSupply+0x84>)
 8003e5e:	f7fc ff40 	bl	8000ce2 <assert_failed>

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003e62:	4b1a      	ldr	r3, [pc, #104]	; (8003ecc <HAL_PWREx_ConfigSupply+0x88>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f003 0304 	and.w	r3, r3, #4
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d00a      	beq.n	8003e84 <HAL_PWREx_ConfigSupply+0x40>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003e6e:	4b17      	ldr	r3, [pc, #92]	; (8003ecc <HAL_PWREx_ConfigSupply+0x88>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_PWREx_ConfigSupply+0x3c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e01f      	b.n	8003ec0 <HAL_PWREx_ConfigSupply+0x7c>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	e01d      	b.n	8003ec0 <HAL_PWREx_ConfigSupply+0x7c>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003e84:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <HAL_PWREx_ConfigSupply+0x88>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f023 0207 	bic.w	r2, r3, #7
 8003e8c:	490f      	ldr	r1, [pc, #60]	; (8003ecc <HAL_PWREx_ConfigSupply+0x88>)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003e94:	f7fd fb58 	bl	8001548 <HAL_GetTick>
 8003e98:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003e9a:	e009      	b.n	8003eb0 <HAL_PWREx_ConfigSupply+0x6c>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003e9c:	f7fd fb54 	bl	8001548 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003eaa:	d901      	bls.n	8003eb0 <HAL_PWREx_ConfigSupply+0x6c>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e007      	b.n	8003ec0 <HAL_PWREx_ConfigSupply+0x7c>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003eb0:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <HAL_PWREx_ConfigSupply+0x88>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ebc:	d1ee      	bne.n	8003e9c <HAL_PWREx_ConfigSupply+0x58>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	08018c38 	.word	0x08018c38
 8003ecc:	58024800 	.word	0x58024800

08003ed0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08c      	sub	sp, #48	; 0x30
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d102      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f000 bce9 	b.w	80048b6 <HAL_RCC_OscConfig+0x9e6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d028      	beq.n	8003f3e <HAL_RCC_OscConfig+0x6e>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d122      	bne.n	8003f3e <HAL_RCC_OscConfig+0x6e>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d11c      	bne.n	8003f3e <HAL_RCC_OscConfig+0x6e>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d116      	bne.n	8003f3e <HAL_RCC_OscConfig+0x6e>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d110      	bne.n	8003f3e <HAL_RCC_OscConfig+0x6e>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <HAL_RCC_OscConfig+0x6e>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0320 	and.w	r3, r3, #32
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d104      	bne.n	8003f3e <HAL_RCC_OscConfig+0x6e>
 8003f34:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8003f38:	48a0      	ldr	r0, [pc, #640]	; (80041bc <HAL_RCC_OscConfig+0x2ec>)
 8003f3a:	f7fc fed2 	bl	8000ce2 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 809d 	beq.w	8004086 <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00e      	beq.n	8003f72 <HAL_RCC_OscConfig+0xa2>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f5c:	d009      	beq.n	8003f72 <HAL_RCC_OscConfig+0xa2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f66:	d004      	beq.n	8003f72 <HAL_RCC_OscConfig+0xa2>
 8003f68:	f240 11a3 	movw	r1, #419	; 0x1a3
 8003f6c:	4893      	ldr	r0, [pc, #588]	; (80041bc <HAL_RCC_OscConfig+0x2ec>)
 8003f6e:	f7fc feb8 	bl	8000ce2 <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f72:	4b93      	ldr	r3, [pc, #588]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003f7c:	4b90      	ldr	r3, [pc, #576]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f84:	2b10      	cmp	r3, #16
 8003f86:	d007      	beq.n	8003f98 <HAL_RCC_OscConfig+0xc8>
 8003f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8a:	2b18      	cmp	r3, #24
 8003f8c:	d111      	bne.n	8003fb2 <HAL_RCC_OscConfig+0xe2>
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	f003 0303 	and.w	r3, r3, #3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d10c      	bne.n	8003fb2 <HAL_RCC_OscConfig+0xe2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f98:	4b89      	ldr	r3, [pc, #548]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d06f      	beq.n	8004084 <HAL_RCC_OscConfig+0x1b4>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d16b      	bne.n	8004084 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	f000 bc82 	b.w	80048b6 <HAL_RCC_OscConfig+0x9e6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fba:	d106      	bne.n	8003fca <HAL_RCC_OscConfig+0xfa>
 8003fbc:	4b80      	ldr	r3, [pc, #512]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a7f      	ldr	r2, [pc, #508]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8003fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	e02e      	b.n	8004028 <HAL_RCC_OscConfig+0x158>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCC_OscConfig+0x11c>
 8003fd2:	4b7b      	ldr	r3, [pc, #492]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a7a      	ldr	r2, [pc, #488]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8003fd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	4b78      	ldr	r3, [pc, #480]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a77      	ldr	r2, [pc, #476]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8003fe4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e01d      	b.n	8004028 <HAL_RCC_OscConfig+0x158>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ff4:	d10c      	bne.n	8004010 <HAL_RCC_OscConfig+0x140>
 8003ff6:	4b72      	ldr	r3, [pc, #456]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a71      	ldr	r2, [pc, #452]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8003ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	4b6f      	ldr	r3, [pc, #444]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a6e      	ldr	r2, [pc, #440]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8004008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	e00b      	b.n	8004028 <HAL_RCC_OscConfig+0x158>
 8004010:	4b6b      	ldr	r3, [pc, #428]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a6a      	ldr	r2, [pc, #424]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8004016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	4b68      	ldr	r3, [pc, #416]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a67      	ldr	r2, [pc, #412]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8004022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d014      	beq.n	800405a <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7fd fa8a 	bl	8001548 <HAL_GetTick>
 8004034:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004036:	e009      	b.n	800404c <HAL_RCC_OscConfig+0x17c>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004038:	f7fd fa86 	bl	8001548 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b64      	cmp	r3, #100	; 0x64
 8004044:	d902      	bls.n	800404c <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	f000 bc35 	b.w	80048b6 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800404c:	4b5c      	ldr	r3, [pc, #368]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0ef      	beq.n	8004038 <HAL_RCC_OscConfig+0x168>
 8004058:	e015      	b.n	8004086 <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405a:	f7fd fa75 	bl	8001548 <HAL_GetTick>
 800405e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004060:	e009      	b.n	8004076 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004062:	f7fd fa71 	bl	8001548 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b64      	cmp	r3, #100	; 0x64
 800406e:	d902      	bls.n	8004076 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	f000 bc20 	b.w	80048b6 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004076:	4b52      	ldr	r3, [pc, #328]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1ef      	bne.n	8004062 <HAL_RCC_OscConfig+0x192>
 8004082:	e000      	b.n	8004086 <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 80bc 	beq.w	800420c <HAL_RCC_OscConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d018      	beq.n	80040ce <HAL_RCC_OscConfig+0x1fe>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d014      	beq.n	80040ce <HAL_RCC_OscConfig+0x1fe>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d010      	beq.n	80040ce <HAL_RCC_OscConfig+0x1fe>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	2b09      	cmp	r3, #9
 80040b2:	d00c      	beq.n	80040ce <HAL_RCC_OscConfig+0x1fe>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2b11      	cmp	r3, #17
 80040ba:	d008      	beq.n	80040ce <HAL_RCC_OscConfig+0x1fe>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2b19      	cmp	r3, #25
 80040c2:	d004      	beq.n	80040ce <HAL_RCC_OscConfig+0x1fe>
 80040c4:	f240 11d7 	movw	r1, #471	; 0x1d7
 80040c8:	483c      	ldr	r0, [pc, #240]	; (80041bc <HAL_RCC_OscConfig+0x2ec>)
 80040ca:	f7fc fe0a 	bl	8000ce2 <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b7f      	cmp	r3, #127	; 0x7f
 80040d4:	d904      	bls.n	80040e0 <HAL_RCC_OscConfig+0x210>
 80040d6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80040da:	4838      	ldr	r0, [pc, #224]	; (80041bc <HAL_RCC_OscConfig+0x2ec>)
 80040dc:	f7fc fe01 	bl	8000ce2 <assert_failed>

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040e0:	4b37      	ldr	r3, [pc, #220]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040ea:	4b35      	ldr	r3, [pc, #212]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 80040ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ee:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d007      	beq.n	8004106 <HAL_RCC_OscConfig+0x236>
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	2b18      	cmp	r3, #24
 80040fa:	d12d      	bne.n	8004158 <HAL_RCC_OscConfig+0x288>
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d128      	bne.n	8004158 <HAL_RCC_OscConfig+0x288>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004106:	4b2e      	ldr	r3, [pc, #184]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	d005      	beq.n	800411e <HAL_RCC_OscConfig+0x24e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_RCC_OscConfig+0x24e>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e3cb      	b.n	80048b6 <HAL_RCC_OscConfig+0x9e6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411e:	f7fd fa1f 	bl	8001560 <HAL_GetREVID>
 8004122:	4602      	mov	r2, r0
 8004124:	f241 0303 	movw	r3, #4099	; 0x1003
 8004128:	429a      	cmp	r2, r3
 800412a:	d80a      	bhi.n	8004142 <HAL_RCC_OscConfig+0x272>
 800412c:	4b24      	ldr	r3, [pc, #144]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	031b      	lsls	r3, r3, #12
 800413a:	4921      	ldr	r1, [pc, #132]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 800413c:	4313      	orrs	r3, r2
 800413e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004140:	e064      	b.n	800420c <HAL_RCC_OscConfig+0x33c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004142:	4b1f      	ldr	r3, [pc, #124]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	061b      	lsls	r3, r3, #24
 8004150:	491b      	ldr	r1, [pc, #108]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8004152:	4313      	orrs	r3, r2
 8004154:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004156:	e059      	b.n	800420c <HAL_RCC_OscConfig+0x33c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d03c      	beq.n	80041da <HAL_RCC_OscConfig+0x30a>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004160:	4b17      	ldr	r3, [pc, #92]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f023 0219 	bic.w	r2, r3, #25
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4914      	ldr	r1, [pc, #80]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 800416e:	4313      	orrs	r3, r2
 8004170:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004172:	f7fd f9e9 	bl	8001548 <HAL_GetTick>
 8004176:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x2bc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800417a:	f7fd f9e5 	bl	8001548 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x2bc>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e394      	b.n	80048b6 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800418c:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f0      	beq.n	800417a <HAL_RCC_OscConfig+0x2aa>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004198:	f7fd f9e2 	bl	8001560 <HAL_GetREVID>
 800419c:	4602      	mov	r2, r0
 800419e:	f241 0303 	movw	r3, #4099	; 0x1003
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d80e      	bhi.n	80041c4 <HAL_RCC_OscConfig+0x2f4>
 80041a6:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	031b      	lsls	r3, r3, #12
 80041b4:	4902      	ldr	r1, [pc, #8]	; (80041c0 <HAL_RCC_OscConfig+0x2f0>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	604b      	str	r3, [r1, #4]
 80041ba:	e027      	b.n	800420c <HAL_RCC_OscConfig+0x33c>
 80041bc:	08018c74 	.word	0x08018c74
 80041c0:	58024400 	.word	0x58024400
 80041c4:	4ba5      	ldr	r3, [pc, #660]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	061b      	lsls	r3, r3, #24
 80041d2:	49a2      	ldr	r1, [pc, #648]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	604b      	str	r3, [r1, #4]
 80041d8:	e018      	b.n	800420c <HAL_RCC_OscConfig+0x33c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041da:	4ba0      	ldr	r3, [pc, #640]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a9f      	ldr	r2, [pc, #636]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 80041e0:	f023 0301 	bic.w	r3, r3, #1
 80041e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e6:	f7fd f9af 	bl	8001548 <HAL_GetTick>
 80041ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x330>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041ee:	f7fd f9ab 	bl	8001548 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e35a      	b.n	80048b6 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004200:	4b96      	ldr	r3, [pc, #600]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1f0      	bne.n	80041ee <HAL_RCC_OscConfig+0x31e>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 80a5 	beq.w	8004364 <HAL_RCC_OscConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d008      	beq.n	8004234 <HAL_RCC_OscConfig+0x364>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	2b80      	cmp	r3, #128	; 0x80
 8004228:	d004      	beq.n	8004234 <HAL_RCC_OscConfig+0x364>
 800422a:	f240 211a 	movw	r1, #538	; 0x21a
 800422e:	488c      	ldr	r0, [pc, #560]	; (8004460 <HAL_RCC_OscConfig+0x590>)
 8004230:	f7fc fd57 	bl	8000ce2 <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	2b3f      	cmp	r3, #63	; 0x3f
 800423a:	d904      	bls.n	8004246 <HAL_RCC_OscConfig+0x376>
 800423c:	f240 211b 	movw	r1, #539	; 0x21b
 8004240:	4887      	ldr	r0, [pc, #540]	; (8004460 <HAL_RCC_OscConfig+0x590>)
 8004242:	f7fc fd4e 	bl	8000ce2 <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004246:	4b85      	ldr	r3, [pc, #532]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800424e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004250:	4b82      	ldr	r3, [pc, #520]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 8004252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004254:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d007      	beq.n	800426c <HAL_RCC_OscConfig+0x39c>
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	2b18      	cmp	r3, #24
 8004260:	d12d      	bne.n	80042be <HAL_RCC_OscConfig+0x3ee>
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f003 0303 	and.w	r3, r3, #3
 8004268:	2b01      	cmp	r3, #1
 800426a:	d128      	bne.n	80042be <HAL_RCC_OscConfig+0x3ee>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800426c:	4b7b      	ldr	r3, [pc, #492]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_RCC_OscConfig+0x3b4>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	2b80      	cmp	r3, #128	; 0x80
 800427e:	d001      	beq.n	8004284 <HAL_RCC_OscConfig+0x3b4>
      {
        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e318      	b.n	80048b6 <HAL_RCC_OscConfig+0x9e6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004284:	f7fd f96c 	bl	8001560 <HAL_GetREVID>
 8004288:	4602      	mov	r2, r0
 800428a:	f241 0303 	movw	r3, #4099	; 0x1003
 800428e:	429a      	cmp	r2, r3
 8004290:	d80a      	bhi.n	80042a8 <HAL_RCC_OscConfig+0x3d8>
 8004292:	4b72      	ldr	r3, [pc, #456]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	069b      	lsls	r3, r3, #26
 80042a0:	496e      	ldr	r1, [pc, #440]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042a6:	e05d      	b.n	8004364 <HAL_RCC_OscConfig+0x494>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042a8:	4b6c      	ldr	r3, [pc, #432]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	061b      	lsls	r3, r3, #24
 80042b6:	4969      	ldr	r1, [pc, #420]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80042bc:	e052      	b.n	8004364 <HAL_RCC_OscConfig+0x494>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d035      	beq.n	8004332 <HAL_RCC_OscConfig+0x462>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80042c6:	4b65      	ldr	r3, [pc, #404]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a64      	ldr	r2, [pc, #400]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 80042cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d2:	f7fd f939 	bl	8001548 <HAL_GetTick>
 80042d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x41c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80042da:	f7fd f935 	bl	8001548 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e2e4      	b.n	80048b6 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80042ec:	4b5b      	ldr	r3, [pc, #364]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0f0      	beq.n	80042da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042f8:	f7fd f932 	bl	8001560 <HAL_GetREVID>
 80042fc:	4602      	mov	r2, r0
 80042fe:	f241 0303 	movw	r3, #4099	; 0x1003
 8004302:	429a      	cmp	r2, r3
 8004304:	d80a      	bhi.n	800431c <HAL_RCC_OscConfig+0x44c>
 8004306:	4b55      	ldr	r3, [pc, #340]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	069b      	lsls	r3, r3, #26
 8004314:	4951      	ldr	r1, [pc, #324]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 8004316:	4313      	orrs	r3, r2
 8004318:	604b      	str	r3, [r1, #4]
 800431a:	e023      	b.n	8004364 <HAL_RCC_OscConfig+0x494>
 800431c:	4b4f      	ldr	r3, [pc, #316]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	061b      	lsls	r3, r3, #24
 800432a:	494c      	ldr	r1, [pc, #304]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 800432c:	4313      	orrs	r3, r2
 800432e:	60cb      	str	r3, [r1, #12]
 8004330:	e018      	b.n	8004364 <HAL_RCC_OscConfig+0x494>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004332:	4b4a      	ldr	r3, [pc, #296]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a49      	ldr	r2, [pc, #292]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 8004338:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800433c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433e:	f7fd f903 	bl	8001548 <HAL_GetTick>
 8004342:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004346:	f7fd f8ff 	bl	8001548 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e2ae      	b.n	80048b6 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004358:	4b40      	ldr	r3, [pc, #256]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f0      	bne.n	8004346 <HAL_RCC_OscConfig+0x476>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	d043      	beq.n	80043f8 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d008      	beq.n	800438a <HAL_RCC_OscConfig+0x4ba>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d004      	beq.n	800438a <HAL_RCC_OscConfig+0x4ba>
 8004380:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8004384:	4836      	ldr	r0, [pc, #216]	; (8004460 <HAL_RCC_OscConfig+0x590>)
 8004386:	f7fc fcac 	bl	8000ce2 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d019      	beq.n	80043c6 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004392:	4b32      	ldr	r3, [pc, #200]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 8004394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004396:	4a31      	ldr	r2, [pc, #196]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 8004398:	f043 0301 	orr.w	r3, r3, #1
 800439c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439e:	f7fd f8d3 	bl	8001548 <HAL_GetTick>
 80043a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043a6:	f7fd f8cf 	bl	8001548 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e27e      	b.n	80048b6 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80043b8:	4b28      	ldr	r3, [pc, #160]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 80043ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f0      	beq.n	80043a6 <HAL_RCC_OscConfig+0x4d6>
 80043c4:	e018      	b.n	80043f8 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c6:	4b25      	ldr	r3, [pc, #148]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 80043c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ca:	4a24      	ldr	r2, [pc, #144]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 80043cc:	f023 0301 	bic.w	r3, r3, #1
 80043d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d2:	f7fd f8b9 	bl	8001548 <HAL_GetTick>
 80043d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x51c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043da:	f7fd f8b5 	bl	8001548 <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x51c>
        {
          return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e264      	b.n	80048b6 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80043ec:	4b1b      	ldr	r3, [pc, #108]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 80043ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1f0      	bne.n	80043da <HAL_RCC_OscConfig+0x50a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b00      	cmp	r3, #0
 8004402:	d048      	beq.n	8004496 <HAL_RCC_OscConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <HAL_RCC_OscConfig+0x54e>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d004      	beq.n	800441e <HAL_RCC_OscConfig+0x54e>
 8004414:	f240 2187 	movw	r1, #647	; 0x287
 8004418:	4811      	ldr	r0, [pc, #68]	; (8004460 <HAL_RCC_OscConfig+0x590>)
 800441a:	f7fc fc62 	bl	8000ce2 <assert_failed>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d01e      	beq.n	8004464 <HAL_RCC_OscConfig+0x594>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004426:	4b0d      	ldr	r3, [pc, #52]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a0c      	ldr	r2, [pc, #48]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 800442c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004430:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004432:	f7fd f889 	bl	8001548 <HAL_GetTick>
 8004436:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x57c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800443a:	f7fd f885 	bl	8001548 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x57c>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e234      	b.n	80048b6 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800444c:	4b03      	ldr	r3, [pc, #12]	; (800445c <HAL_RCC_OscConfig+0x58c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x56a>
 8004458:	e01d      	b.n	8004496 <HAL_RCC_OscConfig+0x5c6>
 800445a:	bf00      	nop
 800445c:	58024400 	.word	0x58024400
 8004460:	08018c74 	.word	0x08018c74
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004464:	4ba3      	ldr	r3, [pc, #652]	; (80046f4 <HAL_RCC_OscConfig+0x824>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4aa2      	ldr	r2, [pc, #648]	; (80046f4 <HAL_RCC_OscConfig+0x824>)
 800446a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800446e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004470:	f7fd f86a 	bl	8001548 <HAL_GetTick>
 8004474:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x5ba>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004478:	f7fd f866 	bl	8001548 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x5ba>
        {
          return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e215      	b.n	80048b6 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800448a:	4b9a      	ldr	r3, [pc, #616]	; (80046f4 <HAL_RCC_OscConfig+0x824>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0x5a8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 8092 	beq.w	80045c8 <HAL_RCC_OscConfig+0x6f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00c      	beq.n	80044c6 <HAL_RCC_OscConfig+0x5f6>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d008      	beq.n	80044c6 <HAL_RCC_OscConfig+0x5f6>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b05      	cmp	r3, #5
 80044ba:	d004      	beq.n	80044c6 <HAL_RCC_OscConfig+0x5f6>
 80044bc:	f240 21b1 	movw	r1, #689	; 0x2b1
 80044c0:	488d      	ldr	r0, [pc, #564]	; (80046f8 <HAL_RCC_OscConfig+0x828>)
 80044c2:	f7fc fc0e 	bl	8000ce2 <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044c6:	4b8d      	ldr	r3, [pc, #564]	; (80046fc <HAL_RCC_OscConfig+0x82c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a8c      	ldr	r2, [pc, #560]	; (80046fc <HAL_RCC_OscConfig+0x82c>)
 80044cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044d2:	f7fd f839 	bl	8001548 <HAL_GetTick>
 80044d6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x61c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044da:	f7fd f835 	bl	8001548 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b64      	cmp	r3, #100	; 0x64
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x61c>
      {
        return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e1e4      	b.n	80048b6 <HAL_RCC_OscConfig+0x9e6>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044ec:	4b83      	ldr	r3, [pc, #524]	; (80046fc <HAL_RCC_OscConfig+0x82c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0f0      	beq.n	80044da <HAL_RCC_OscConfig+0x60a>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d106      	bne.n	800450e <HAL_RCC_OscConfig+0x63e>
 8004500:	4b7c      	ldr	r3, [pc, #496]	; (80046f4 <HAL_RCC_OscConfig+0x824>)
 8004502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004504:	4a7b      	ldr	r2, [pc, #492]	; (80046f4 <HAL_RCC_OscConfig+0x824>)
 8004506:	f043 0301 	orr.w	r3, r3, #1
 800450a:	6713      	str	r3, [r2, #112]	; 0x70
 800450c:	e02d      	b.n	800456a <HAL_RCC_OscConfig+0x69a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10c      	bne.n	8004530 <HAL_RCC_OscConfig+0x660>
 8004516:	4b77      	ldr	r3, [pc, #476]	; (80046f4 <HAL_RCC_OscConfig+0x824>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451a:	4a76      	ldr	r2, [pc, #472]	; (80046f4 <HAL_RCC_OscConfig+0x824>)
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	6713      	str	r3, [r2, #112]	; 0x70
 8004522:	4b74      	ldr	r3, [pc, #464]	; (80046f4 <HAL_RCC_OscConfig+0x824>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	4a73      	ldr	r2, [pc, #460]	; (80046f4 <HAL_RCC_OscConfig+0x824>)
 8004528:	f023 0304 	bic.w	r3, r3, #4
 800452c:	6713      	str	r3, [r2, #112]	; 0x70
 800452e:	e01c      	b.n	800456a <HAL_RCC_OscConfig+0x69a>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	2b05      	cmp	r3, #5
 8004536:	d10c      	bne.n	8004552 <HAL_RCC_OscConfig+0x682>
 8004538:	4b6e      	ldr	r3, [pc, #440]	; (80046f4 <HAL_RCC_OscConfig+0x824>)
 800453a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453c:	4a6d      	ldr	r2, [pc, #436]	; (80046f4 <HAL_RCC_OscConfig+0x824>)
 800453e:	f043 0304 	orr.w	r3, r3, #4
 8004542:	6713      	str	r3, [r2, #112]	; 0x70
 8004544:	4b6b      	ldr	r3, [pc, #428]	; (80046f4 <HAL_RCC_OscConfig+0x824>)
 8004546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004548:	4a6a      	ldr	r2, [pc, #424]	; (80046f4 <HAL_RCC_OscConfig+0x824>)
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	6713      	str	r3, [r2, #112]	; 0x70
 8004550:	e00b      	b.n	800456a <HAL_RCC_OscConfig+0x69a>
 8004552:	4b68      	ldr	r3, [pc, #416]	; (80046f4 <HAL_RCC_OscConfig+0x824>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004556:	4a67      	ldr	r2, [pc, #412]	; (80046f4 <HAL_RCC_OscConfig+0x824>)
 8004558:	f023 0301 	bic.w	r3, r3, #1
 800455c:	6713      	str	r3, [r2, #112]	; 0x70
 800455e:	4b65      	ldr	r3, [pc, #404]	; (80046f4 <HAL_RCC_OscConfig+0x824>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004562:	4a64      	ldr	r2, [pc, #400]	; (80046f4 <HAL_RCC_OscConfig+0x824>)
 8004564:	f023 0304 	bic.w	r3, r3, #4
 8004568:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d015      	beq.n	800459e <HAL_RCC_OscConfig+0x6ce>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004572:	f7fc ffe9 	bl	8001548 <HAL_GetTick>
 8004576:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004578:	e00a      	b.n	8004590 <HAL_RCC_OscConfig+0x6c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800457a:	f7fc ffe5 	bl	8001548 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	f241 3288 	movw	r2, #5000	; 0x1388
 8004588:	4293      	cmp	r3, r2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x6c0>
        {
          return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e192      	b.n	80048b6 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004590:	4b58      	ldr	r3, [pc, #352]	; (80046f4 <HAL_RCC_OscConfig+0x824>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0ee      	beq.n	800457a <HAL_RCC_OscConfig+0x6aa>
 800459c:	e014      	b.n	80045c8 <HAL_RCC_OscConfig+0x6f8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459e:	f7fc ffd3 	bl	8001548 <HAL_GetTick>
 80045a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80045a4:	e00a      	b.n	80045bc <HAL_RCC_OscConfig+0x6ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045a6:	f7fc ffcf 	bl	8001548 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x6ec>
        {
          return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e17c      	b.n	80048b6 <HAL_RCC_OscConfig+0x9e6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80045bc:	4b4d      	ldr	r3, [pc, #308]	; (80046f4 <HAL_RCC_OscConfig+0x824>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1ee      	bne.n	80045a6 <HAL_RCC_OscConfig+0x6d6>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00c      	beq.n	80045ea <HAL_RCC_OscConfig+0x71a>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d008      	beq.n	80045ea <HAL_RCC_OscConfig+0x71a>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d004      	beq.n	80045ea <HAL_RCC_OscConfig+0x71a>
 80045e0:	f240 21e3 	movw	r1, #739	; 0x2e3
 80045e4:	4844      	ldr	r0, [pc, #272]	; (80046f8 <HAL_RCC_OscConfig+0x828>)
 80045e6:	f7fc fb7c 	bl	8000ce2 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 8160 	beq.w	80048b4 <HAL_RCC_OscConfig+0x9e4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80045f4:	4b3f      	ldr	r3, [pc, #252]	; (80046f4 <HAL_RCC_OscConfig+0x824>)
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045fc:	2b18      	cmp	r3, #24
 80045fe:	f000 811b 	beq.w	8004838 <HAL_RCC_OscConfig+0x968>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	2b02      	cmp	r3, #2
 8004608:	f040 80fc 	bne.w	8004804 <HAL_RCC_OscConfig+0x934>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	2b01      	cmp	r3, #1
 8004612:	d010      	beq.n	8004636 <HAL_RCC_OscConfig+0x766>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00c      	beq.n	8004636 <HAL_RCC_OscConfig+0x766>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	2b03      	cmp	r3, #3
 8004622:	d008      	beq.n	8004636 <HAL_RCC_OscConfig+0x766>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004628:	2b02      	cmp	r3, #2
 800462a:	d004      	beq.n	8004636 <HAL_RCC_OscConfig+0x766>
 800462c:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 8004630:	4831      	ldr	r0, [pc, #196]	; (80046f8 <HAL_RCC_OscConfig+0x828>)
 8004632:	f7fc fb56 	bl	8000ce2 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_RCC_OscConfig+0x776>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	2b3f      	cmp	r3, #63	; 0x3f
 8004644:	d904      	bls.n	8004650 <HAL_RCC_OscConfig+0x780>
 8004646:	f240 21ed 	movw	r1, #749	; 0x2ed
 800464a:	482b      	ldr	r0, [pc, #172]	; (80046f8 <HAL_RCC_OscConfig+0x828>)
 800464c:	f7fc fb49 	bl	8000ce2 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	2b03      	cmp	r3, #3
 8004656:	d904      	bls.n	8004662 <HAL_RCC_OscConfig+0x792>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004660:	d904      	bls.n	800466c <HAL_RCC_OscConfig+0x79c>
 8004662:	f240 21ee 	movw	r1, #750	; 0x2ee
 8004666:	4824      	ldr	r0, [pc, #144]	; (80046f8 <HAL_RCC_OscConfig+0x828>)
 8004668:	f7fc fb3b 	bl	8000ce2 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_RCC_OscConfig+0x7ac>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004678:	2b80      	cmp	r3, #128	; 0x80
 800467a:	d904      	bls.n	8004686 <HAL_RCC_OscConfig+0x7b6>
 800467c:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004680:	481d      	ldr	r0, [pc, #116]	; (80046f8 <HAL_RCC_OscConfig+0x828>)
 8004682:	f7fc fb2e 	bl	8000ce2 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_RCC_OscConfig+0x7c6>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	2b80      	cmp	r3, #128	; 0x80
 8004694:	d904      	bls.n	80046a0 <HAL_RCC_OscConfig+0x7d0>
 8004696:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 800469a:	4817      	ldr	r0, [pc, #92]	; (80046f8 <HAL_RCC_OscConfig+0x828>)
 800469c:	f7fc fb21 	bl	8000ce2 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <HAL_RCC_OscConfig+0x7e0>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ac:	2b80      	cmp	r3, #128	; 0x80
 80046ae:	d904      	bls.n	80046ba <HAL_RCC_OscConfig+0x7ea>
 80046b0:	f240 21f1 	movw	r1, #753	; 0x2f1
 80046b4:	4810      	ldr	r0, [pc, #64]	; (80046f8 <HAL_RCC_OscConfig+0x828>)
 80046b6:	f7fc fb14 	bl	8000ce2 <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c2:	d304      	bcc.n	80046ce <HAL_RCC_OscConfig+0x7fe>
 80046c4:	f240 21f2 	movw	r1, #754	; 0x2f2
 80046c8:	480b      	ldr	r0, [pc, #44]	; (80046f8 <HAL_RCC_OscConfig+0x828>)
 80046ca:	f7fc fb0a 	bl	8000ce2 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ce:	4b09      	ldr	r3, [pc, #36]	; (80046f4 <HAL_RCC_OscConfig+0x824>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a08      	ldr	r2, [pc, #32]	; (80046f4 <HAL_RCC_OscConfig+0x824>)
 80046d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046da:	f7fc ff35 	bl	8001548 <HAL_GetTick>
 80046de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046e0:	e00e      	b.n	8004700 <HAL_RCC_OscConfig+0x830>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e2:	f7fc ff31 	bl	8001548 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d907      	bls.n	8004700 <HAL_RCC_OscConfig+0x830>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e0e0      	b.n	80048b6 <HAL_RCC_OscConfig+0x9e6>
 80046f4:	58024400 	.word	0x58024400
 80046f8:	08018c74 	.word	0x08018c74
 80046fc:	58024800 	.word	0x58024800
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004700:	4b6f      	ldr	r3, [pc, #444]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1ea      	bne.n	80046e2 <HAL_RCC_OscConfig+0x812>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800470c:	4b6c      	ldr	r3, [pc, #432]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 800470e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004710:	4b6c      	ldr	r3, [pc, #432]	; (80048c4 <HAL_RCC_OscConfig+0x9f4>)
 8004712:	4013      	ands	r3, r2
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800471c:	0112      	lsls	r2, r2, #4
 800471e:	430a      	orrs	r2, r1
 8004720:	4967      	ldr	r1, [pc, #412]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 8004722:	4313      	orrs	r3, r2
 8004724:	628b      	str	r3, [r1, #40]	; 0x28
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	3b01      	subs	r3, #1
 800472c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004734:	3b01      	subs	r3, #1
 8004736:	025b      	lsls	r3, r3, #9
 8004738:	b29b      	uxth	r3, r3
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	3b01      	subs	r3, #1
 8004742:	041b      	lsls	r3, r3, #16
 8004744:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004748:	431a      	orrs	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474e:	3b01      	subs	r3, #1
 8004750:	061b      	lsls	r3, r3, #24
 8004752:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004756:	495a      	ldr	r1, [pc, #360]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 8004758:	4313      	orrs	r3, r2
 800475a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800475c:	4b58      	ldr	r3, [pc, #352]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	4a57      	ldr	r2, [pc, #348]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 8004762:	f023 0301 	bic.w	r3, r3, #1
 8004766:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004768:	4b55      	ldr	r3, [pc, #340]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 800476a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800476c:	4b56      	ldr	r3, [pc, #344]	; (80048c8 <HAL_RCC_OscConfig+0x9f8>)
 800476e:	4013      	ands	r3, r2
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004774:	00d2      	lsls	r2, r2, #3
 8004776:	4952      	ldr	r1, [pc, #328]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 8004778:	4313      	orrs	r3, r2
 800477a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800477c:	4b50      	ldr	r3, [pc, #320]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	f023 020c 	bic.w	r2, r3, #12
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	494d      	ldr	r1, [pc, #308]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 800478a:	4313      	orrs	r3, r2
 800478c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800478e:	4b4c      	ldr	r3, [pc, #304]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004792:	f023 0202 	bic.w	r2, r3, #2
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479a:	4949      	ldr	r1, [pc, #292]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 800479c:	4313      	orrs	r3, r2
 800479e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80047a0:	4b47      	ldr	r3, [pc, #284]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	4a46      	ldr	r2, [pc, #280]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 80047a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047ac:	4b44      	ldr	r3, [pc, #272]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	4a43      	ldr	r2, [pc, #268]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 80047b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80047b8:	4b41      	ldr	r3, [pc, #260]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	4a40      	ldr	r2, [pc, #256]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 80047be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80047c4:	4b3e      	ldr	r3, [pc, #248]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	4a3d      	ldr	r2, [pc, #244]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047d0:	4b3b      	ldr	r3, [pc, #236]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a3a      	ldr	r2, [pc, #232]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 80047d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047dc:	f7fc feb4 	bl	8001548 <HAL_GetTick>
 80047e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x926>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e4:	f7fc feb0 	bl	8001548 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x926>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e05f      	b.n	80048b6 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047f6:	4b32      	ldr	r3, [pc, #200]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d0f0      	beq.n	80047e4 <HAL_RCC_OscConfig+0x914>
 8004802:	e057      	b.n	80048b4 <HAL_RCC_OscConfig+0x9e4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004804:	4b2e      	ldr	r3, [pc, #184]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a2d      	ldr	r2, [pc, #180]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 800480a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800480e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004810:	f7fc fe9a 	bl	8001548 <HAL_GetTick>
 8004814:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x95a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004818:	f7fc fe96 	bl	8001548 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x95a>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e045      	b.n	80048b6 <HAL_RCC_OscConfig+0x9e6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800482a:	4b25      	ldr	r3, [pc, #148]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1f0      	bne.n	8004818 <HAL_RCC_OscConfig+0x948>
 8004836:	e03d      	b.n	80048b4 <HAL_RCC_OscConfig+0x9e4>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004838:	4b21      	ldr	r3, [pc, #132]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 800483a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800483e:	4b20      	ldr	r3, [pc, #128]	; (80048c0 <HAL_RCC_OscConfig+0x9f0>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	2b01      	cmp	r3, #1
 800484a:	d031      	beq.n	80048b0 <HAL_RCC_OscConfig+0x9e0>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	f003 0203 	and.w	r2, r3, #3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004856:	429a      	cmp	r2, r3
 8004858:	d12a      	bne.n	80048b0 <HAL_RCC_OscConfig+0x9e0>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	091b      	lsrs	r3, r3, #4
 800485e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004866:	429a      	cmp	r2, r3
 8004868:	d122      	bne.n	80048b0 <HAL_RCC_OscConfig+0x9e0>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004876:	429a      	cmp	r2, r3
 8004878:	d11a      	bne.n	80048b0 <HAL_RCC_OscConfig+0x9e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	0a5b      	lsrs	r3, r3, #9
 800487e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004886:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004888:	429a      	cmp	r2, r3
 800488a:	d111      	bne.n	80048b0 <HAL_RCC_OscConfig+0x9e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	0c1b      	lsrs	r3, r3, #16
 8004890:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800489a:	429a      	cmp	r2, r3
 800489c:	d108      	bne.n	80048b0 <HAL_RCC_OscConfig+0x9e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	0e1b      	lsrs	r3, r3, #24
 80048a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048aa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d001      	beq.n	80048b4 <HAL_RCC_OscConfig+0x9e4>
      {
        return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <HAL_RCC_OscConfig+0x9e6>
      }
    }
  }
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3730      	adds	r7, #48	; 0x30
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	58024400 	.word	0x58024400
 80048c4:	fffffc0c 	.word	0xfffffc0c
 80048c8:	ffff0007 	.word	0xffff0007

080048cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e354      	b.n	8004f8a <HAL_RCC_ClockConfig+0x6be>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x24>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b3f      	cmp	r3, #63	; 0x3f
 80048ee:	d904      	bls.n	80048fa <HAL_RCC_ClockConfig+0x2e>
 80048f0:	f240 317f 	movw	r1, #895	; 0x37f
 80048f4:	4827      	ldr	r0, [pc, #156]	; (8004994 <HAL_RCC_ClockConfig+0xc8>)
 80048f6:	f7fc f9f4 	bl	8000ce2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d031      	beq.n	8004964 <HAL_RCC_ClockConfig+0x98>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d02e      	beq.n	8004964 <HAL_RCC_ClockConfig+0x98>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b02      	cmp	r3, #2
 800490a:	d02b      	beq.n	8004964 <HAL_RCC_ClockConfig+0x98>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b03      	cmp	r3, #3
 8004910:	d028      	beq.n	8004964 <HAL_RCC_ClockConfig+0x98>
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b04      	cmp	r3, #4
 8004916:	d025      	beq.n	8004964 <HAL_RCC_ClockConfig+0x98>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	2b05      	cmp	r3, #5
 800491c:	d022      	beq.n	8004964 <HAL_RCC_ClockConfig+0x98>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b06      	cmp	r3, #6
 8004922:	d01f      	beq.n	8004964 <HAL_RCC_ClockConfig+0x98>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b07      	cmp	r3, #7
 8004928:	d01c      	beq.n	8004964 <HAL_RCC_ClockConfig+0x98>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b08      	cmp	r3, #8
 800492e:	d019      	beq.n	8004964 <HAL_RCC_ClockConfig+0x98>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b09      	cmp	r3, #9
 8004934:	d016      	beq.n	8004964 <HAL_RCC_ClockConfig+0x98>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b0a      	cmp	r3, #10
 800493a:	d013      	beq.n	8004964 <HAL_RCC_ClockConfig+0x98>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b0b      	cmp	r3, #11
 8004940:	d010      	beq.n	8004964 <HAL_RCC_ClockConfig+0x98>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b0c      	cmp	r3, #12
 8004946:	d00d      	beq.n	8004964 <HAL_RCC_ClockConfig+0x98>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2b0d      	cmp	r3, #13
 800494c:	d00a      	beq.n	8004964 <HAL_RCC_ClockConfig+0x98>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b0e      	cmp	r3, #14
 8004952:	d007      	beq.n	8004964 <HAL_RCC_ClockConfig+0x98>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b0f      	cmp	r3, #15
 8004958:	d004      	beq.n	8004964 <HAL_RCC_ClockConfig+0x98>
 800495a:	f44f 7160 	mov.w	r1, #896	; 0x380
 800495e:	480d      	ldr	r0, [pc, #52]	; (8004994 <HAL_RCC_ClockConfig+0xc8>)
 8004960:	f7fc f9bf 	bl	8000ce2 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004964:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <HAL_RCC_ClockConfig+0xcc>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 030f 	and.w	r3, r3, #15
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d914      	bls.n	800499c <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004972:	4b09      	ldr	r3, [pc, #36]	; (8004998 <HAL_RCC_ClockConfig+0xcc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f023 020f 	bic.w	r2, r3, #15
 800497a:	4907      	ldr	r1, [pc, #28]	; (8004998 <HAL_RCC_ClockConfig+0xcc>)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	4313      	orrs	r3, r2
 8004980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004982:	4b05      	ldr	r3, [pc, #20]	; (8004998 <HAL_RCC_ClockConfig+0xcc>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d005      	beq.n	800499c <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e2fa      	b.n	8004f8a <HAL_RCC_ClockConfig+0x6be>
 8004994:	08018c74 	.word	0x08018c74
 8004998:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d029      	beq.n	80049fc <HAL_RCC_ClockConfig+0x130>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	4b9a      	ldr	r3, [pc, #616]	; (8004c18 <HAL_RCC_ClockConfig+0x34c>)
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d921      	bls.n	80049fc <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d014      	beq.n	80049ea <HAL_RCC_ClockConfig+0x11e>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	2b40      	cmp	r3, #64	; 0x40
 80049c6:	d010      	beq.n	80049ea <HAL_RCC_ClockConfig+0x11e>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	2b50      	cmp	r3, #80	; 0x50
 80049ce:	d00c      	beq.n	80049ea <HAL_RCC_ClockConfig+0x11e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	2b60      	cmp	r3, #96	; 0x60
 80049d6:	d008      	beq.n	80049ea <HAL_RCC_ClockConfig+0x11e>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	2b70      	cmp	r3, #112	; 0x70
 80049de:	d004      	beq.n	80049ea <HAL_RCC_ClockConfig+0x11e>
 80049e0:	f44f 7167 	mov.w	r1, #924	; 0x39c
 80049e4:	488d      	ldr	r0, [pc, #564]	; (8004c1c <HAL_RCC_ClockConfig+0x350>)
 80049e6:	f7fc f97c 	bl	8000ce2 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049ea:	4b8b      	ldr	r3, [pc, #556]	; (8004c18 <HAL_RCC_ClockConfig+0x34c>)
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	4988      	ldr	r1, [pc, #544]	; (8004c18 <HAL_RCC_ClockConfig+0x34c>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0308 	and.w	r3, r3, #8
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d029      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x190>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	695a      	ldr	r2, [r3, #20]
 8004a0c:	4b82      	ldr	r3, [pc, #520]	; (8004c18 <HAL_RCC_ClockConfig+0x34c>)
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d921      	bls.n	8004a5c <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d014      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x17e>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	2b40      	cmp	r3, #64	; 0x40
 8004a26:	d010      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x17e>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	2b50      	cmp	r3, #80	; 0x50
 8004a2e:	d00c      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x17e>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	2b60      	cmp	r3, #96	; 0x60
 8004a36:	d008      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x17e>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	2b70      	cmp	r3, #112	; 0x70
 8004a3e:	d004      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x17e>
 8004a40:	f240 31ae 	movw	r1, #942	; 0x3ae
 8004a44:	4875      	ldr	r0, [pc, #468]	; (8004c1c <HAL_RCC_ClockConfig+0x350>)
 8004a46:	f7fc f94c 	bl	8000ce2 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a4a:	4b73      	ldr	r3, [pc, #460]	; (8004c18 <HAL_RCC_ClockConfig+0x34c>)
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	4970      	ldr	r1, [pc, #448]	; (8004c18 <HAL_RCC_ClockConfig+0x34c>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0310 	and.w	r3, r3, #16
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d02d      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x1f8>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699a      	ldr	r2, [r3, #24]
 8004a6c:	4b6a      	ldr	r3, [pc, #424]	; (8004c18 <HAL_RCC_ClockConfig+0x34c>)
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d925      	bls.n	8004ac4 <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d018      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x1e6>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a88:	d013      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x1e6>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004a92:	d00e      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x1e6>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a9c:	d009      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x1e6>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004aa6:	d004      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x1e6>
 8004aa8:	f240 31bf 	movw	r1, #959	; 0x3bf
 8004aac:	485b      	ldr	r0, [pc, #364]	; (8004c1c <HAL_RCC_ClockConfig+0x350>)
 8004aae:	f7fc f918 	bl	8000ce2 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ab2:	4b59      	ldr	r3, [pc, #356]	; (8004c18 <HAL_RCC_ClockConfig+0x34c>)
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	4956      	ldr	r1, [pc, #344]	; (8004c18 <HAL_RCC_ClockConfig+0x34c>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d029      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x258>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	4b50      	ldr	r3, [pc, #320]	; (8004c18 <HAL_RCC_ClockConfig+0x34c>)
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d921      	bls.n	8004b24 <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d014      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x246>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	2b40      	cmp	r3, #64	; 0x40
 8004aee:	d010      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x246>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	2b50      	cmp	r3, #80	; 0x50
 8004af6:	d00c      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x246>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	2b60      	cmp	r3, #96	; 0x60
 8004afe:	d008      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x246>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	2b70      	cmp	r3, #112	; 0x70
 8004b06:	d004      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x246>
 8004b08:	f240 31d1 	movw	r1, #977	; 0x3d1
 8004b0c:	4843      	ldr	r0, [pc, #268]	; (8004c1c <HAL_RCC_ClockConfig+0x350>)
 8004b0e:	f7fc f8e8 	bl	8000ce2 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004b12:	4b41      	ldr	r3, [pc, #260]	; (8004c18 <HAL_RCC_ClockConfig+0x34c>)
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	493e      	ldr	r1, [pc, #248]	; (8004c18 <HAL_RCC_ClockConfig+0x34c>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d039      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x2d8>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	4b38      	ldr	r3, [pc, #224]	; (8004c18 <HAL_RCC_ClockConfig+0x34c>)
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d931      	bls.n	8004ba4 <HAL_RCC_ClockConfig+0x2d8>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d024      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x2c6>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d020      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x2c6>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2b09      	cmp	r3, #9
 8004b56:	d01c      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x2c6>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	2b0a      	cmp	r3, #10
 8004b5e:	d018      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x2c6>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	2b0b      	cmp	r3, #11
 8004b66:	d014      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x2c6>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	2b0c      	cmp	r3, #12
 8004b6e:	d010      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x2c6>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	2b0d      	cmp	r3, #13
 8004b76:	d00c      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x2c6>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	2b0e      	cmp	r3, #14
 8004b7e:	d008      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x2c6>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	2b0f      	cmp	r3, #15
 8004b86:	d004      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x2c6>
 8004b88:	f44f 7179 	mov.w	r1, #996	; 0x3e4
 8004b8c:	4823      	ldr	r0, [pc, #140]	; (8004c1c <HAL_RCC_ClockConfig+0x350>)
 8004b8e:	f7fc f8a8 	bl	8000ce2 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b92:	4b21      	ldr	r3, [pc, #132]	; (8004c18 <HAL_RCC_ClockConfig+0x34c>)
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	f023 020f 	bic.w	r2, r3, #15
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	491e      	ldr	r1, [pc, #120]	; (8004c18 <HAL_RCC_ClockConfig+0x34c>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 80a2 	beq.w	8004cf6 <HAL_RCC_ClockConfig+0x42a>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d032      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x354>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bc2:	d02d      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x354>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004bcc:	d028      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x354>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004bd6:	d023      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x354>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004be0:	d01e      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x354>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bea:	d019      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x354>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004bf4:	d014      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x354>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004bfe:	d00f      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x354>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c08:	d00a      	beq.n	8004c20 <HAL_RCC_ClockConfig+0x354>
 8004c0a:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 8004c0e:	4803      	ldr	r0, [pc, #12]	; (8004c1c <HAL_RCC_ClockConfig+0x350>)
 8004c10:	f7fc f867 	bl	8000ce2 <assert_failed>
 8004c14:	e004      	b.n	8004c20 <HAL_RCC_ClockConfig+0x354>
 8004c16:	bf00      	nop
 8004c18:	58024400 	.word	0x58024400
 8004c1c:	08018c74 	.word	0x08018c74
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d010      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x37e>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00c      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x37e>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d008      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x37e>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b03      	cmp	r3, #3
 8004c3e:	d004      	beq.n	8004c4a <HAL_RCC_ClockConfig+0x37e>
 8004c40:	f240 31f5 	movw	r1, #1013	; 0x3f5
 8004c44:	4858      	ldr	r0, [pc, #352]	; (8004da8 <HAL_RCC_ClockConfig+0x4dc>)
 8004c46:	f7fc f84c 	bl	8000ce2 <assert_failed>
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004c4a:	4b58      	ldr	r3, [pc, #352]	; (8004dac <HAL_RCC_ClockConfig+0x4e0>)
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	4955      	ldr	r1, [pc, #340]	; (8004dac <HAL_RCC_ClockConfig+0x4e0>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d107      	bne.n	8004c74 <HAL_RCC_ClockConfig+0x3a8>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c64:	4b51      	ldr	r3, [pc, #324]	; (8004dac <HAL_RCC_ClockConfig+0x4e0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d121      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e18a      	b.n	8004f8a <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2b03      	cmp	r3, #3
 8004c7a:	d107      	bne.n	8004c8c <HAL_RCC_ClockConfig+0x3c0>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c7c:	4b4b      	ldr	r3, [pc, #300]	; (8004dac <HAL_RCC_ClockConfig+0x4e0>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d115      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e17e      	b.n	8004f8a <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d107      	bne.n	8004ca4 <HAL_RCC_ClockConfig+0x3d8>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c94:	4b45      	ldr	r3, [pc, #276]	; (8004dac <HAL_RCC_ClockConfig+0x4e0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d109      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e172      	b.n	8004f8a <HAL_RCC_ClockConfig+0x6be>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ca4:	4b41      	ldr	r3, [pc, #260]	; (8004dac <HAL_RCC_ClockConfig+0x4e0>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e16a      	b.n	8004f8a <HAL_RCC_ClockConfig+0x6be>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cb4:	4b3d      	ldr	r3, [pc, #244]	; (8004dac <HAL_RCC_ClockConfig+0x4e0>)
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f023 0207 	bic.w	r2, r3, #7
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	493a      	ldr	r1, [pc, #232]	; (8004dac <HAL_RCC_ClockConfig+0x4e0>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc6:	f7fc fc3f 	bl	8001548 <HAL_GetTick>
 8004cca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ccc:	e00a      	b.n	8004ce4 <HAL_RCC_ClockConfig+0x418>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cce:	f7fc fc3b 	bl	8001548 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_ClockConfig+0x418>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e152      	b.n	8004f8a <HAL_RCC_ClockConfig+0x6be>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce4:	4b31      	ldr	r3, [pc, #196]	; (8004dac <HAL_RCC_ClockConfig+0x4e0>)
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d1eb      	bne.n	8004cce <HAL_RCC_ClockConfig+0x402>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d039      	beq.n	8004d76 <HAL_RCC_ClockConfig+0x4aa>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	4b29      	ldr	r3, [pc, #164]	; (8004dac <HAL_RCC_ClockConfig+0x4e0>)
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d231      	bcs.n	8004d76 <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d024      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x498>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	2b08      	cmp	r3, #8
 8004d20:	d020      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x498>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	2b09      	cmp	r3, #9
 8004d28:	d01c      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x498>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	2b0a      	cmp	r3, #10
 8004d30:	d018      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x498>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	2b0b      	cmp	r3, #11
 8004d38:	d014      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x498>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	2b0c      	cmp	r3, #12
 8004d40:	d010      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x498>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	2b0d      	cmp	r3, #13
 8004d48:	d00c      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x498>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	2b0e      	cmp	r3, #14
 8004d50:	d008      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x498>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	2b0f      	cmp	r3, #15
 8004d58:	d004      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x498>
 8004d5a:	f240 4136 	movw	r1, #1078	; 0x436
 8004d5e:	4812      	ldr	r0, [pc, #72]	; (8004da8 <HAL_RCC_ClockConfig+0x4dc>)
 8004d60:	f7fb ffbf 	bl	8000ce2 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d64:	4b11      	ldr	r3, [pc, #68]	; (8004dac <HAL_RCC_ClockConfig+0x4e0>)
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	f023 020f 	bic.w	r2, r3, #15
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	490e      	ldr	r1, [pc, #56]	; (8004dac <HAL_RCC_ClockConfig+0x4e0>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d76:	4b0e      	ldr	r3, [pc, #56]	; (8004db0 <HAL_RCC_ClockConfig+0x4e4>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d217      	bcs.n	8004db4 <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d84:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <HAL_RCC_ClockConfig+0x4e4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f023 020f 	bic.w	r2, r3, #15
 8004d8c:	4908      	ldr	r1, [pc, #32]	; (8004db0 <HAL_RCC_ClockConfig+0x4e4>)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d94:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <HAL_RCC_ClockConfig+0x4e4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 030f 	and.w	r3, r3, #15
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d008      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e0f1      	b.n	8004f8a <HAL_RCC_ClockConfig+0x6be>
 8004da6:	bf00      	nop
 8004da8:	08018c74 	.word	0x08018c74
 8004dac:	58024400 	.word	0x58024400
 8004db0:	52002000 	.word	0x52002000
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d029      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x548>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	4b73      	ldr	r3, [pc, #460]	; (8004f94 <HAL_RCC_ClockConfig+0x6c8>)
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d221      	bcs.n	8004e14 <HAL_RCC_ClockConfig+0x548>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d014      	beq.n	8004e02 <HAL_RCC_ClockConfig+0x536>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	2b40      	cmp	r3, #64	; 0x40
 8004dde:	d010      	beq.n	8004e02 <HAL_RCC_ClockConfig+0x536>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2b50      	cmp	r3, #80	; 0x50
 8004de6:	d00c      	beq.n	8004e02 <HAL_RCC_ClockConfig+0x536>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	2b60      	cmp	r3, #96	; 0x60
 8004dee:	d008      	beq.n	8004e02 <HAL_RCC_ClockConfig+0x536>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	2b70      	cmp	r3, #112	; 0x70
 8004df6:	d004      	beq.n	8004e02 <HAL_RCC_ClockConfig+0x536>
 8004df8:	f240 4157 	movw	r1, #1111	; 0x457
 8004dfc:	4866      	ldr	r0, [pc, #408]	; (8004f98 <HAL_RCC_ClockConfig+0x6cc>)
 8004dfe:	f7fb ff70 	bl	8000ce2 <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e02:	4b64      	ldr	r3, [pc, #400]	; (8004f94 <HAL_RCC_ClockConfig+0x6c8>)
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	4961      	ldr	r1, [pc, #388]	; (8004f94 <HAL_RCC_ClockConfig+0x6c8>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0308 	and.w	r3, r3, #8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d029      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x5a8>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	695a      	ldr	r2, [r3, #20]
 8004e24:	4b5b      	ldr	r3, [pc, #364]	; (8004f94 <HAL_RCC_ClockConfig+0x6c8>)
 8004e26:	69db      	ldr	r3, [r3, #28]
 8004e28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d221      	bcs.n	8004e74 <HAL_RCC_ClockConfig+0x5a8>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d014      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x596>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	2b40      	cmp	r3, #64	; 0x40
 8004e3e:	d010      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x596>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	2b50      	cmp	r3, #80	; 0x50
 8004e46:	d00c      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x596>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	2b60      	cmp	r3, #96	; 0x60
 8004e4e:	d008      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x596>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	2b70      	cmp	r3, #112	; 0x70
 8004e56:	d004      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x596>
 8004e58:	f240 4169 	movw	r1, #1129	; 0x469
 8004e5c:	484e      	ldr	r0, [pc, #312]	; (8004f98 <HAL_RCC_ClockConfig+0x6cc>)
 8004e5e:	f7fb ff40 	bl	8000ce2 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e62:	4b4c      	ldr	r3, [pc, #304]	; (8004f94 <HAL_RCC_ClockConfig+0x6c8>)
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	4949      	ldr	r1, [pc, #292]	; (8004f94 <HAL_RCC_ClockConfig+0x6c8>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d02d      	beq.n	8004edc <HAL_RCC_ClockConfig+0x610>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699a      	ldr	r2, [r3, #24]
 8004e84:	4b43      	ldr	r3, [pc, #268]	; (8004f94 <HAL_RCC_ClockConfig+0x6c8>)
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d225      	bcs.n	8004edc <HAL_RCC_ClockConfig+0x610>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d018      	beq.n	8004eca <HAL_RCC_ClockConfig+0x5fe>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea0:	d013      	beq.n	8004eca <HAL_RCC_ClockConfig+0x5fe>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004eaa:	d00e      	beq.n	8004eca <HAL_RCC_ClockConfig+0x5fe>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004eb4:	d009      	beq.n	8004eca <HAL_RCC_ClockConfig+0x5fe>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ebe:	d004      	beq.n	8004eca <HAL_RCC_ClockConfig+0x5fe>
 8004ec0:	f240 417b 	movw	r1, #1147	; 0x47b
 8004ec4:	4834      	ldr	r0, [pc, #208]	; (8004f98 <HAL_RCC_ClockConfig+0x6cc>)
 8004ec6:	f7fb ff0c 	bl	8000ce2 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004eca:	4b32      	ldr	r3, [pc, #200]	; (8004f94 <HAL_RCC_ClockConfig+0x6c8>)
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	492f      	ldr	r1, [pc, #188]	; (8004f94 <HAL_RCC_ClockConfig+0x6c8>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0320 	and.w	r3, r3, #32
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d029      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x670>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	69da      	ldr	r2, [r3, #28]
 8004eec:	4b29      	ldr	r3, [pc, #164]	; (8004f94 <HAL_RCC_ClockConfig+0x6c8>)
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d221      	bcs.n	8004f3c <HAL_RCC_ClockConfig+0x670>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d014      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x65e>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	2b40      	cmp	r3, #64	; 0x40
 8004f06:	d010      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x65e>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	2b50      	cmp	r3, #80	; 0x50
 8004f0e:	d00c      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x65e>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	2b60      	cmp	r3, #96	; 0x60
 8004f16:	d008      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x65e>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	2b70      	cmp	r3, #112	; 0x70
 8004f1e:	d004      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x65e>
 8004f20:	f240 418d 	movw	r1, #1165	; 0x48d
 8004f24:	481c      	ldr	r0, [pc, #112]	; (8004f98 <HAL_RCC_ClockConfig+0x6cc>)
 8004f26:	f7fb fedc 	bl	8000ce2 <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004f2a:	4b1a      	ldr	r3, [pc, #104]	; (8004f94 <HAL_RCC_ClockConfig+0x6c8>)
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	4917      	ldr	r1, [pc, #92]	; (8004f94 <HAL_RCC_ClockConfig+0x6c8>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f3c:	f000 f836 	bl	8004fac <HAL_RCC_GetSysClockFreq>
 8004f40:	4601      	mov	r1, r0
 8004f42:	4b14      	ldr	r3, [pc, #80]	; (8004f94 <HAL_RCC_ClockConfig+0x6c8>)
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	0a1b      	lsrs	r3, r3, #8
 8004f48:	f003 030f 	and.w	r3, r3, #15
 8004f4c:	4a13      	ldr	r2, [pc, #76]	; (8004f9c <HAL_RCC_ClockConfig+0x6d0>)
 8004f4e:	5cd3      	ldrb	r3, [r2, r3]
 8004f50:	f003 031f 	and.w	r3, r3, #31
 8004f54:	fa21 f303 	lsr.w	r3, r1, r3
 8004f58:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f5a:	4b0e      	ldr	r3, [pc, #56]	; (8004f94 <HAL_RCC_ClockConfig+0x6c8>)
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	4a0e      	ldr	r2, [pc, #56]	; (8004f9c <HAL_RCC_ClockConfig+0x6d0>)
 8004f64:	5cd3      	ldrb	r3, [r2, r3]
 8004f66:	f003 031f 	and.w	r3, r3, #31
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f70:	4a0b      	ldr	r2, [pc, #44]	; (8004fa0 <HAL_RCC_ClockConfig+0x6d4>)
 8004f72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f74:	4a0b      	ldr	r2, [pc, #44]	; (8004fa4 <HAL_RCC_ClockConfig+0x6d8>)
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004f7a:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <HAL_RCC_ClockConfig+0x6dc>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fb fed8 	bl	8000d34 <HAL_InitTick>
 8004f84:	4603      	mov	r3, r0
 8004f86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	58024400 	.word	0x58024400
 8004f98:	08018c74 	.word	0x08018c74
 8004f9c:	0801ac10 	.word	0x0801ac10
 8004fa0:	24000004 	.word	0x24000004
 8004fa4:	24000000 	.word	0x24000000
 8004fa8:	24000008 	.word	0x24000008

08004fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b089      	sub	sp, #36	; 0x24
 8004fb0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fb2:	4baf      	ldr	r3, [pc, #700]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fba:	2b18      	cmp	r3, #24
 8004fbc:	f200 814e 	bhi.w	800525c <HAL_RCC_GetSysClockFreq+0x2b0>
 8004fc0:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc6:	bf00      	nop
 8004fc8:	0800502d 	.word	0x0800502d
 8004fcc:	0800525d 	.word	0x0800525d
 8004fd0:	0800525d 	.word	0x0800525d
 8004fd4:	0800525d 	.word	0x0800525d
 8004fd8:	0800525d 	.word	0x0800525d
 8004fdc:	0800525d 	.word	0x0800525d
 8004fe0:	0800525d 	.word	0x0800525d
 8004fe4:	0800525d 	.word	0x0800525d
 8004fe8:	08005053 	.word	0x08005053
 8004fec:	0800525d 	.word	0x0800525d
 8004ff0:	0800525d 	.word	0x0800525d
 8004ff4:	0800525d 	.word	0x0800525d
 8004ff8:	0800525d 	.word	0x0800525d
 8004ffc:	0800525d 	.word	0x0800525d
 8005000:	0800525d 	.word	0x0800525d
 8005004:	0800525d 	.word	0x0800525d
 8005008:	08005059 	.word	0x08005059
 800500c:	0800525d 	.word	0x0800525d
 8005010:	0800525d 	.word	0x0800525d
 8005014:	0800525d 	.word	0x0800525d
 8005018:	0800525d 	.word	0x0800525d
 800501c:	0800525d 	.word	0x0800525d
 8005020:	0800525d 	.word	0x0800525d
 8005024:	0800525d 	.word	0x0800525d
 8005028:	0800505f 	.word	0x0800505f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800502c:	4b90      	ldr	r3, [pc, #576]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	d009      	beq.n	800504c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005038:	4b8d      	ldr	r3, [pc, #564]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	08db      	lsrs	r3, r3, #3
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	4a8c      	ldr	r2, [pc, #560]	; (8005274 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005044:	fa22 f303 	lsr.w	r3, r2, r3
 8005048:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800504a:	e10a      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800504c:	4b89      	ldr	r3, [pc, #548]	; (8005274 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800504e:	61bb      	str	r3, [r7, #24]
    break;
 8005050:	e107      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005052:	4b89      	ldr	r3, [pc, #548]	; (8005278 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005054:	61bb      	str	r3, [r7, #24]
    break;
 8005056:	e104      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005058:	4b88      	ldr	r3, [pc, #544]	; (800527c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800505a:	61bb      	str	r3, [r7, #24]
    break;
 800505c:	e101      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800505e:	4b84      	ldr	r3, [pc, #528]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005068:	4b81      	ldr	r3, [pc, #516]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800506a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506c:	091b      	lsrs	r3, r3, #4
 800506e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005072:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005074:	4b7e      	ldr	r3, [pc, #504]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800507e:	4b7c      	ldr	r3, [pc, #496]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005082:	08db      	lsrs	r3, r3, #3
 8005084:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	fb02 f303 	mul.w	r3, r2, r3
 800508e:	ee07 3a90 	vmov	s15, r3
 8005092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005096:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 80da 	beq.w	8005256 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d05a      	beq.n	800515e <HAL_RCC_GetSysClockFreq+0x1b2>
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d302      	bcc.n	80050b2 <HAL_RCC_GetSysClockFreq+0x106>
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d078      	beq.n	80051a2 <HAL_RCC_GetSysClockFreq+0x1f6>
 80050b0:	e099      	b.n	80051e6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050b2:	4b6f      	ldr	r3, [pc, #444]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d02d      	beq.n	800511a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050be:	4b6c      	ldr	r3, [pc, #432]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	08db      	lsrs	r3, r3, #3
 80050c4:	f003 0303 	and.w	r3, r3, #3
 80050c8:	4a6a      	ldr	r2, [pc, #424]	; (8005274 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80050ca:	fa22 f303 	lsr.w	r3, r2, r3
 80050ce:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	ee07 3a90 	vmov	s15, r3
 80050e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050e8:	4b61      	ldr	r3, [pc, #388]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f0:	ee07 3a90 	vmov	s15, r3
 80050f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80050fc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005280 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005100:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005104:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005108:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800510c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005114:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005118:	e087      	b.n	800522a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	ee07 3a90 	vmov	s15, r3
 8005120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005124:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005284 <HAL_RCC_GetSysClockFreq+0x2d8>
 8005128:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800512c:	4b50      	ldr	r3, [pc, #320]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800512e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005134:	ee07 3a90 	vmov	s15, r3
 8005138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800513c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005140:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005280 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005144:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005148:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800514c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005150:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005158:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800515c:	e065      	b.n	800522a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	ee07 3a90 	vmov	s15, r3
 8005164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005168:	eddf 6a47 	vldr	s13, [pc, #284]	; 8005288 <HAL_RCC_GetSysClockFreq+0x2dc>
 800516c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005170:	4b3f      	ldr	r3, [pc, #252]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005178:	ee07 3a90 	vmov	s15, r3
 800517c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005180:	ed97 6a02 	vldr	s12, [r7, #8]
 8005184:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005280 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005188:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800518c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005190:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005194:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800519c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051a0:	e043      	b.n	800522a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	ee07 3a90 	vmov	s15, r3
 80051a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ac:	eddf 6a37 	vldr	s13, [pc, #220]	; 800528c <HAL_RCC_GetSysClockFreq+0x2e0>
 80051b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051b4:	4b2e      	ldr	r3, [pc, #184]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80051b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051bc:	ee07 3a90 	vmov	s15, r3
 80051c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051c4:	ed97 6a02 	vldr	s12, [r7, #8]
 80051c8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005280 <HAL_RCC_GetSysClockFreq+0x2d4>
 80051cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051e4:	e021      	b.n	800522a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	ee07 3a90 	vmov	s15, r3
 80051ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005288 <HAL_RCC_GetSysClockFreq+0x2dc>
 80051f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051f8:	4b1d      	ldr	r3, [pc, #116]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80051fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005200:	ee07 3a90 	vmov	s15, r3
 8005204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005208:	ed97 6a02 	vldr	s12, [r7, #8]
 800520c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005280 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005210:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005214:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005218:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800521c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005224:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005228:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800522a:	4b11      	ldr	r3, [pc, #68]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800522c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522e:	0a5b      	lsrs	r3, r3, #9
 8005230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005234:	3301      	adds	r3, #1
 8005236:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005242:	edd7 6a07 	vldr	s13, [r7, #28]
 8005246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800524a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800524e:	ee17 3a90 	vmov	r3, s15
 8005252:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005254:	e005      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	61bb      	str	r3, [r7, #24]
    break;
 800525a:	e002      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800525c:	4b06      	ldr	r3, [pc, #24]	; (8005278 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800525e:	61bb      	str	r3, [r7, #24]
    break;
 8005260:	bf00      	nop
  }

  return sysclockfreq;
 8005262:	69bb      	ldr	r3, [r7, #24]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3724      	adds	r7, #36	; 0x24
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	58024400 	.word	0x58024400
 8005274:	03d09000 	.word	0x03d09000
 8005278:	003d0900 	.word	0x003d0900
 800527c:	007a1200 	.word	0x007a1200
 8005280:	46000000 	.word	0x46000000
 8005284:	4c742400 	.word	0x4c742400
 8005288:	4a742400 	.word	0x4a742400
 800528c:	4af42400 	.word	0x4af42400

08005290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005296:	f7ff fe89 	bl	8004fac <HAL_RCC_GetSysClockFreq>
 800529a:	4601      	mov	r1, r0
 800529c:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	0a1b      	lsrs	r3, r3, #8
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	4a0f      	ldr	r2, [pc, #60]	; (80052e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80052a8:	5cd3      	ldrb	r3, [r2, r3]
 80052aa:	f003 031f 	and.w	r3, r3, #31
 80052ae:	fa21 f303 	lsr.w	r3, r1, r3
 80052b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80052b4:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	f003 030f 	and.w	r3, r3, #15
 80052bc:	4a09      	ldr	r2, [pc, #36]	; (80052e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80052be:	5cd3      	ldrb	r3, [r2, r3]
 80052c0:	f003 031f 	and.w	r3, r3, #31
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ca:	4a07      	ldr	r2, [pc, #28]	; (80052e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80052cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052ce:	4a07      	ldr	r2, [pc, #28]	; (80052ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80052d4:	4b04      	ldr	r3, [pc, #16]	; (80052e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80052d6:	681b      	ldr	r3, [r3, #0]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	58024400 	.word	0x58024400
 80052e4:	0801ac10 	.word	0x0801ac10
 80052e8:	24000004 	.word	0x24000004
 80052ec:	24000000 	.word	0x24000000

080052f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80052f4:	f7ff ffcc 	bl	8005290 <HAL_RCC_GetHCLKFreq>
 80052f8:	4601      	mov	r1, r0
 80052fa:	4b06      	ldr	r3, [pc, #24]	; (8005314 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	091b      	lsrs	r3, r3, #4
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	4a04      	ldr	r2, [pc, #16]	; (8005318 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005306:	5cd3      	ldrb	r3, [r2, r3]
 8005308:	f003 031f 	and.w	r3, r3, #31
 800530c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005310:	4618      	mov	r0, r3
 8005312:	bd80      	pop	{r7, pc}
 8005314:	58024400 	.word	0x58024400
 8005318:	0801ac10 	.word	0x0801ac10

0800531c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005320:	f7ff ffb6 	bl	8005290 <HAL_RCC_GetHCLKFreq>
 8005324:	4601      	mov	r1, r0
 8005326:	4b06      	ldr	r3, [pc, #24]	; (8005340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	0a1b      	lsrs	r3, r3, #8
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	4a04      	ldr	r2, [pc, #16]	; (8005344 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005332:	5cd3      	ldrb	r3, [r2, r3]
 8005334:	f003 031f 	and.w	r3, r3, #31
 8005338:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800533c:	4618      	mov	r0, r3
 800533e:	bd80      	pop	{r7, pc}
 8005340:	58024400 	.word	0x58024400
 8005344:	0801ac10 	.word	0x0801ac10

08005348 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	223f      	movs	r2, #63	; 0x3f
 8005356:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005358:	4b1a      	ldr	r3, [pc, #104]	; (80053c4 <HAL_RCC_GetClockConfig+0x7c>)
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	f003 0207 	and.w	r2, r3, #7
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005364:	4b17      	ldr	r3, [pc, #92]	; (80053c4 <HAL_RCC_GetClockConfig+0x7c>)
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005370:	4b14      	ldr	r3, [pc, #80]	; (80053c4 <HAL_RCC_GetClockConfig+0x7c>)
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	f003 020f 	and.w	r2, r3, #15
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800537c:	4b11      	ldr	r3, [pc, #68]	; (80053c4 <HAL_RCC_GetClockConfig+0x7c>)
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005388:	4b0e      	ldr	r3, [pc, #56]	; (80053c4 <HAL_RCC_GetClockConfig+0x7c>)
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005394:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <HAL_RCC_GetClockConfig+0x7c>)
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80053a0:	4b08      	ldr	r3, [pc, #32]	; (80053c4 <HAL_RCC_GetClockConfig+0x7c>)
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053ac:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <HAL_RCC_GetClockConfig+0x80>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 020f 	and.w	r2, r3, #15
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	601a      	str	r2, [r3, #0]
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	58024400 	.word	0x58024400
 80053c8:	52002000 	.word	0x52002000

080053cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053d4:	2300      	movs	r3, #0
 80053d6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053d8:	2300      	movs	r3, #0
 80053da:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d03d      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053f0:	d013      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80053f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053f6:	d802      	bhi.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x32>
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d007      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x40>
 80053fc:	e01f      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80053fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005402:	d013      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005404:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005408:	d01c      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800540a:	e018      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800540c:	4baf      	ldr	r3, [pc, #700]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	4aae      	ldr	r2, [pc, #696]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005416:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005418:	e015      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3304      	adds	r3, #4
 800541e:	2102      	movs	r1, #2
 8005420:	4618      	mov	r0, r3
 8005422:	f001 fc01 	bl	8006c28 <RCCEx_PLL2_Config>
 8005426:	4603      	mov	r3, r0
 8005428:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800542a:	e00c      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	3324      	adds	r3, #36	; 0x24
 8005430:	2102      	movs	r1, #2
 8005432:	4618      	mov	r0, r3
 8005434:	f001 fd1a 	bl	8006e6c <RCCEx_PLL3_Config>
 8005438:	4603      	mov	r3, r0
 800543a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800543c:	e003      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	75fb      	strb	r3, [r7, #23]
      break;
 8005442:	e000      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005444:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005446:	7dfb      	ldrb	r3, [r7, #23]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d109      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800544c:	4b9f      	ldr	r3, [pc, #636]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800544e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005450:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005458:	499c      	ldr	r1, [pc, #624]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800545a:	4313      	orrs	r3, r2
 800545c:	650b      	str	r3, [r1, #80]	; 0x50
 800545e:	e001      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005460:	7dfb      	ldrb	r3, [r7, #23]
 8005462:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546c:	2b00      	cmp	r3, #0
 800546e:	d03d      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005474:	2b04      	cmp	r3, #4
 8005476:	d826      	bhi.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8005478:	a201      	add	r2, pc, #4	; (adr r2, 8005480 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800547a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547e:	bf00      	nop
 8005480:	08005495 	.word	0x08005495
 8005484:	080054a3 	.word	0x080054a3
 8005488:	080054b5 	.word	0x080054b5
 800548c:	080054cd 	.word	0x080054cd
 8005490:	080054cd 	.word	0x080054cd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005494:	4b8d      	ldr	r3, [pc, #564]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	4a8c      	ldr	r2, [pc, #560]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800549a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800549e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054a0:	e015      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3304      	adds	r3, #4
 80054a6:	2100      	movs	r1, #0
 80054a8:	4618      	mov	r0, r3
 80054aa:	f001 fbbd 	bl	8006c28 <RCCEx_PLL2_Config>
 80054ae:	4603      	mov	r3, r0
 80054b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054b2:	e00c      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3324      	adds	r3, #36	; 0x24
 80054b8:	2100      	movs	r1, #0
 80054ba:	4618      	mov	r0, r3
 80054bc:	f001 fcd6 	bl	8006e6c <RCCEx_PLL3_Config>
 80054c0:	4603      	mov	r3, r0
 80054c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054c4:	e003      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	75fb      	strb	r3, [r7, #23]
      break;
 80054ca:	e000      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80054cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ce:	7dfb      	ldrb	r3, [r7, #23]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d109      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054d4:	4b7d      	ldr	r3, [pc, #500]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80054d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054d8:	f023 0207 	bic.w	r2, r3, #7
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e0:	497a      	ldr	r1, [pc, #488]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	650b      	str	r3, [r1, #80]	; 0x50
 80054e6:	e001      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e8:	7dfb      	ldrb	r3, [r7, #23]
 80054ea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d03e      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fc:	2b80      	cmp	r3, #128	; 0x80
 80054fe:	d01c      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005500:	2b80      	cmp	r3, #128	; 0x80
 8005502:	d804      	bhi.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005504:	2b00      	cmp	r3, #0
 8005506:	d008      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005508:	2b40      	cmp	r3, #64	; 0x40
 800550a:	d00d      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800550c:	e01e      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800550e:	2bc0      	cmp	r3, #192	; 0xc0
 8005510:	d01f      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005516:	d01e      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005518:	e018      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800551a:	4b6c      	ldr	r3, [pc, #432]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800551c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551e:	4a6b      	ldr	r2, [pc, #428]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005524:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005526:	e017      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3304      	adds	r3, #4
 800552c:	2100      	movs	r1, #0
 800552e:	4618      	mov	r0, r3
 8005530:	f001 fb7a 	bl	8006c28 <RCCEx_PLL2_Config>
 8005534:	4603      	mov	r3, r0
 8005536:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005538:	e00e      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3324      	adds	r3, #36	; 0x24
 800553e:	2100      	movs	r1, #0
 8005540:	4618      	mov	r0, r3
 8005542:	f001 fc93 	bl	8006e6c <RCCEx_PLL3_Config>
 8005546:	4603      	mov	r3, r0
 8005548:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800554a:	e005      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	75fb      	strb	r3, [r7, #23]
      break;
 8005550:	e002      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005552:	bf00      	nop
 8005554:	e000      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005556:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005558:	7dfb      	ldrb	r3, [r7, #23]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d109      	bne.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800555e:	4b5b      	ldr	r3, [pc, #364]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005562:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556a:	4958      	ldr	r1, [pc, #352]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800556c:	4313      	orrs	r3, r2
 800556e:	650b      	str	r3, [r1, #80]	; 0x50
 8005570:	e001      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005572:	7dfb      	ldrb	r3, [r7, #23]
 8005574:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800557e:	2b00      	cmp	r3, #0
 8005580:	d044      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800558c:	d01f      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x202>
 800558e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005592:	d805      	bhi.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00a      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005598:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800559c:	d00e      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800559e:	e01f      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80055a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80055a4:	d01f      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80055a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055aa:	d01e      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80055ac:	e018      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ae:	4b47      	ldr	r3, [pc, #284]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	4a46      	ldr	r2, [pc, #280]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80055b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055ba:	e017      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3304      	adds	r3, #4
 80055c0:	2100      	movs	r1, #0
 80055c2:	4618      	mov	r0, r3
 80055c4:	f001 fb30 	bl	8006c28 <RCCEx_PLL2_Config>
 80055c8:	4603      	mov	r3, r0
 80055ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80055cc:	e00e      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	3324      	adds	r3, #36	; 0x24
 80055d2:	2100      	movs	r1, #0
 80055d4:	4618      	mov	r0, r3
 80055d6:	f001 fc49 	bl	8006e6c <RCCEx_PLL3_Config>
 80055da:	4603      	mov	r3, r0
 80055dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055de:	e005      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	75fb      	strb	r3, [r7, #23]
      break;
 80055e4:	e002      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80055e6:	bf00      	nop
 80055e8:	e000      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80055ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055ec:	7dfb      	ldrb	r3, [r7, #23]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10a      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80055f2:	4b36      	ldr	r3, [pc, #216]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80055f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005600:	4932      	ldr	r1, [pc, #200]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005602:	4313      	orrs	r3, r2
 8005604:	658b      	str	r3, [r1, #88]	; 0x58
 8005606:	e001      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005608:	7dfb      	ldrb	r3, [r7, #23]
 800560a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005614:	2b00      	cmp	r3, #0
 8005616:	d044      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800561e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005622:	d01f      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005624:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005628:	d805      	bhi.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800562e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005632:	d00e      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005634:	e01f      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8005636:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800563a:	d01f      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800563c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005640:	d01e      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005642:	e018      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005644:	4b21      	ldr	r3, [pc, #132]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	4a20      	ldr	r2, [pc, #128]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800564a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800564e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005650:	e017      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	3304      	adds	r3, #4
 8005656:	2100      	movs	r1, #0
 8005658:	4618      	mov	r0, r3
 800565a:	f001 fae5 	bl	8006c28 <RCCEx_PLL2_Config>
 800565e:	4603      	mov	r3, r0
 8005660:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005662:	e00e      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3324      	adds	r3, #36	; 0x24
 8005668:	2100      	movs	r1, #0
 800566a:	4618      	mov	r0, r3
 800566c:	f001 fbfe 	bl	8006e6c <RCCEx_PLL3_Config>
 8005670:	4603      	mov	r3, r0
 8005672:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005674:	e005      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	75fb      	strb	r3, [r7, #23]
      break;
 800567a:	e002      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800567c:	bf00      	nop
 800567e:	e000      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005682:	7dfb      	ldrb	r3, [r7, #23]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10a      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005688:	4b10      	ldr	r3, [pc, #64]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800568a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005696:	490d      	ldr	r1, [pc, #52]	; (80056cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005698:	4313      	orrs	r3, r2
 800569a:	658b      	str	r3, [r1, #88]	; 0x58
 800569c:	e001      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569e:	7dfb      	ldrb	r3, [r7, #23]
 80056a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d035      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b2:	2b10      	cmp	r3, #16
 80056b4:	d00c      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80056b6:	2b10      	cmp	r3, #16
 80056b8:	d802      	bhi.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d01b      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80056be:	e017      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80056c0:	2b20      	cmp	r3, #32
 80056c2:	d00c      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x312>
 80056c4:	2b30      	cmp	r3, #48	; 0x30
 80056c6:	d018      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80056c8:	e012      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80056ca:	bf00      	nop
 80056cc:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d0:	4baf      	ldr	r3, [pc, #700]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	4aae      	ldr	r2, [pc, #696]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80056d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80056dc:	e00e      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3304      	adds	r3, #4
 80056e2:	2102      	movs	r1, #2
 80056e4:	4618      	mov	r0, r3
 80056e6:	f001 fa9f 	bl	8006c28 <RCCEx_PLL2_Config>
 80056ea:	4603      	mov	r3, r0
 80056ec:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80056ee:	e005      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	75fb      	strb	r3, [r7, #23]
      break;
 80056f4:	e002      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80056f6:	bf00      	nop
 80056f8:	e000      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80056fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056fc:	7dfb      	ldrb	r3, [r7, #23]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d109      	bne.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005702:	4ba3      	ldr	r3, [pc, #652]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005706:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800570e:	49a0      	ldr	r1, [pc, #640]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005710:	4313      	orrs	r3, r2
 8005712:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005714:	e001      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005716:	7dfb      	ldrb	r3, [r7, #23]
 8005718:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d042      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800572a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800572e:	d01f      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005734:	d805      	bhi.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800573a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800573e:	d00e      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005740:	e01f      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005742:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005746:	d01f      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800574c:	d01e      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800574e:	e018      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005750:	4b8f      	ldr	r3, [pc, #572]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005754:	4a8e      	ldr	r2, [pc, #568]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800575a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800575c:	e017      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3304      	adds	r3, #4
 8005762:	2100      	movs	r1, #0
 8005764:	4618      	mov	r0, r3
 8005766:	f001 fa5f 	bl	8006c28 <RCCEx_PLL2_Config>
 800576a:	4603      	mov	r3, r0
 800576c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800576e:	e00e      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3324      	adds	r3, #36	; 0x24
 8005774:	2100      	movs	r1, #0
 8005776:	4618      	mov	r0, r3
 8005778:	f001 fb78 	bl	8006e6c <RCCEx_PLL3_Config>
 800577c:	4603      	mov	r3, r0
 800577e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005780:	e005      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	75fb      	strb	r3, [r7, #23]
      break;
 8005786:	e002      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005788:	bf00      	nop
 800578a:	e000      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800578c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800578e:	7dfb      	ldrb	r3, [r7, #23]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d109      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005794:	4b7e      	ldr	r3, [pc, #504]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005798:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a0:	497b      	ldr	r1, [pc, #492]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	650b      	str	r3, [r1, #80]	; 0x50
 80057a6:	e001      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a8:	7dfb      	ldrb	r3, [r7, #23]
 80057aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d042      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057c0:	d01b      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80057c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057c6:	d805      	bhi.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d022      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80057cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d0:	d00a      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80057d2:	e01b      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x440>
 80057d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057d8:	d01d      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80057da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057de:	d01c      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80057e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057e4:	d01b      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x452>
 80057e6:	e011      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3304      	adds	r3, #4
 80057ec:	2101      	movs	r1, #1
 80057ee:	4618      	mov	r0, r3
 80057f0:	f001 fa1a 	bl	8006c28 <RCCEx_PLL2_Config>
 80057f4:	4603      	mov	r3, r0
 80057f6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80057f8:	e012      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3324      	adds	r3, #36	; 0x24
 80057fe:	2101      	movs	r1, #1
 8005800:	4618      	mov	r0, r3
 8005802:	f001 fb33 	bl	8006e6c <RCCEx_PLL3_Config>
 8005806:	4603      	mov	r3, r0
 8005808:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800580a:	e009      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	75fb      	strb	r3, [r7, #23]
      break;
 8005810:	e006      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005812:	bf00      	nop
 8005814:	e004      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005816:	bf00      	nop
 8005818:	e002      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800581a:	bf00      	nop
 800581c:	e000      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800581e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005820:	7dfb      	ldrb	r3, [r7, #23]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d109      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005826:	4b5a      	ldr	r3, [pc, #360]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005832:	4957      	ldr	r1, [pc, #348]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005834:	4313      	orrs	r3, r2
 8005836:	650b      	str	r3, [r1, #80]	; 0x50
 8005838:	e001      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583a:	7dfb      	ldrb	r3, [r7, #23]
 800583c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d044      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005854:	d01b      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800585a:	d805      	bhi.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d022      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005860:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005864:	d00a      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005866:	e01b      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586c:	d01d      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800586e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005872:	d01c      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005874:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005878:	d01b      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800587a:	e011      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3304      	adds	r3, #4
 8005880:	2101      	movs	r1, #1
 8005882:	4618      	mov	r0, r3
 8005884:	f001 f9d0 	bl	8006c28 <RCCEx_PLL2_Config>
 8005888:	4603      	mov	r3, r0
 800588a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800588c:	e012      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3324      	adds	r3, #36	; 0x24
 8005892:	2101      	movs	r1, #1
 8005894:	4618      	mov	r0, r3
 8005896:	f001 fae9 	bl	8006e6c <RCCEx_PLL3_Config>
 800589a:	4603      	mov	r3, r0
 800589c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800589e:	e009      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	75fb      	strb	r3, [r7, #23]
      break;
 80058a4:	e006      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80058a6:	bf00      	nop
 80058a8:	e004      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80058aa:	bf00      	nop
 80058ac:	e002      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80058ae:	bf00      	nop
 80058b0:	e000      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80058b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058b4:	7dfb      	ldrb	r3, [r7, #23]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d10a      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80058ba:	4b35      	ldr	r3, [pc, #212]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80058bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058be:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80058c8:	4931      	ldr	r1, [pc, #196]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	658b      	str	r3, [r1, #88]	; 0x58
 80058ce:	e001      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
 80058d2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d02d      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058e8:	d005      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80058ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ee:	d009      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d013      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x550>
 80058f4:	e00f      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058f6:	4b26      	ldr	r3, [pc, #152]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	4a25      	ldr	r2, [pc, #148]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80058fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005900:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005902:	e00c      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3304      	adds	r3, #4
 8005908:	2101      	movs	r1, #1
 800590a:	4618      	mov	r0, r3
 800590c:	f001 f98c 	bl	8006c28 <RCCEx_PLL2_Config>
 8005910:	4603      	mov	r3, r0
 8005912:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005914:	e003      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	75fb      	strb	r3, [r7, #23]
      break;
 800591a:	e000      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800591c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800591e:	7dfb      	ldrb	r3, [r7, #23]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d109      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005924:	4b1a      	ldr	r3, [pc, #104]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005928:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005930:	4917      	ldr	r1, [pc, #92]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005932:	4313      	orrs	r3, r2
 8005934:	650b      	str	r3, [r1, #80]	; 0x50
 8005936:	e001      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005938:	7dfb      	ldrb	r3, [r7, #23]
 800593a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d037      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594c:	2b03      	cmp	r3, #3
 800594e:	d81b      	bhi.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005950:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8005952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005956:	bf00      	nop
 8005958:	08005995 	.word	0x08005995
 800595c:	08005969 	.word	0x08005969
 8005960:	08005977 	.word	0x08005977
 8005964:	08005995 	.word	0x08005995
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005968:	4b09      	ldr	r3, [pc, #36]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	4a08      	ldr	r2, [pc, #32]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800596e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005972:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005974:	e00f      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3304      	adds	r3, #4
 800597a:	2102      	movs	r1, #2
 800597c:	4618      	mov	r0, r3
 800597e:	f001 f953 	bl	8006c28 <RCCEx_PLL2_Config>
 8005982:	4603      	mov	r3, r0
 8005984:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005986:	e006      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	75fb      	strb	r3, [r7, #23]
      break;
 800598c:	e003      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800598e:	bf00      	nop
 8005990:	58024400 	.word	0x58024400
      break;
 8005994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005996:	7dfb      	ldrb	r3, [r7, #23]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10b      	bne.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800599c:	4b04      	ldr	r3, [pc, #16]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800599e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059a0:	f023 0203 	bic.w	r2, r3, #3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a8:	4901      	ldr	r1, [pc, #4]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	64cb      	str	r3, [r1, #76]	; 0x4c
 80059ae:	e003      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 80059b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b4:	7dfb      	ldrb	r3, [r7, #23]
 80059b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 829b 	beq.w	8005efc <HAL_RCCEx_PeriphCLKConfig+0xb30>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d0:	f000 81a9 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059de:	f000 81a2 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059e8:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 80059ec:	f000 819b 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059f6:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 80059fa:	f000 8194 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a04:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 8005a08:	f000 818d 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a12:	f5b3 4fa6 	cmp.w	r3, #21248	; 0x5300
 8005a16:	f000 8186 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a20:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 8005a24:	f000 817f 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a2e:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 8005a32:	f000 8178 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a3c:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8005a40:	f000 8171 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a4a:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8005a4e:	f000 816a 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a58:	f5b3 4f23 	cmp.w	r3, #41728	; 0xa300
 8005a5c:	f000 8163 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a66:	f5b3 4f33 	cmp.w	r3, #45824	; 0xb300
 8005a6a:	f000 815c 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a74:	f5b3 4f43 	cmp.w	r3, #49920	; 0xc300
 8005a78:	f000 8155 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a82:	f5b3 4f53 	cmp.w	r3, #54016	; 0xd300
 8005a86:	f000 814e 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a90:	f5b3 4f63 	cmp.w	r3, #58112	; 0xe300
 8005a94:	f000 8147 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a9e:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 8005aa2:	f000 8140 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005aac:	4aa8      	ldr	r2, [pc, #672]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	f000 8139 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005aba:	4aa6      	ldr	r2, [pc, #664]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	f000 8132 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ac8:	4aa3      	ldr	r2, [pc, #652]	; (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x98c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	f000 812b 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ad6:	4aa1      	ldr	r2, [pc, #644]	; (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x990>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	f000 8124 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ae4:	4a9e      	ldr	r2, [pc, #632]	; (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	f000 811d 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005af2:	4a9c      	ldr	r2, [pc, #624]	; (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x998>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	f000 8116 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b00:	4a99      	ldr	r2, [pc, #612]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	f000 810f 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b0e:	4a97      	ldr	r2, [pc, #604]	; (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	f000 8108 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b1c:	4a94      	ldr	r2, [pc, #592]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	f000 8101 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b2a:	4a92      	ldr	r2, [pc, #584]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	f000 80fa 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b38:	4a8f      	ldr	r2, [pc, #572]	; (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	f000 80f3 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b46:	4a8d      	ldr	r2, [pc, #564]	; (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x9b0>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	f000 80ec 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b54:	4a8a      	ldr	r2, [pc, #552]	; (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	f000 80e5 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b62:	4a88      	ldr	r2, [pc, #544]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	f000 80de 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b70:	4a85      	ldr	r2, [pc, #532]	; (8005d88 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	f000 80d7 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b7e:	4a83      	ldr	r2, [pc, #524]	; (8005d8c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	f000 80d0 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b8c:	4a80      	ldr	r2, [pc, #512]	; (8005d90 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	f000 80c9 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b9a:	4a7e      	ldr	r2, [pc, #504]	; (8005d94 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	f000 80c2 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ba8:	4a7b      	ldr	r2, [pc, #492]	; (8005d98 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	f000 80bb 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bb6:	4a79      	ldr	r2, [pc, #484]	; (8005d9c <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	f000 80b4 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bc4:	4a76      	ldr	r2, [pc, #472]	; (8005da0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	f000 80ad 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bd2:	4a74      	ldr	r2, [pc, #464]	; (8005da4 <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	f000 80a6 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005be0:	4a71      	ldr	r2, [pc, #452]	; (8005da8 <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	f000 809f 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bee:	4a6f      	ldr	r2, [pc, #444]	; (8005dac <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	f000 8098 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bfc:	4a6c      	ldr	r2, [pc, #432]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	f000 8091 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c0a:	4a6a      	ldr	r2, [pc, #424]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	f000 808a 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c18:	4a67      	ldr	r2, [pc, #412]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	f000 8083 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c26:	4a65      	ldr	r2, [pc, #404]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d07c      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c32:	4a63      	ldr	r2, [pc, #396]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x9f4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d076      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c3e:	4a61      	ldr	r2, [pc, #388]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x9f8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d070      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c4a:	4a5f      	ldr	r2, [pc, #380]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d06a      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c56:	4a5d      	ldr	r2, [pc, #372]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0xa00>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d064      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c62:	4a5b      	ldr	r2, [pc, #364]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xa04>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d05e      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c6e:	4a59      	ldr	r2, [pc, #356]	; (8005dd4 <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d058      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c7a:	4a57      	ldr	r2, [pc, #348]	; (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d052      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c86:	4a55      	ldr	r2, [pc, #340]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d04c      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c92:	4a53      	ldr	r2, [pc, #332]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0xa14>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d046      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005c9e:	4a51      	ldr	r2, [pc, #324]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d040      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005caa:	4a4f      	ldr	r2, [pc, #316]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0xa1c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d03a      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cb6:	4a4d      	ldr	r2, [pc, #308]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0xa20>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d034      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cc2:	4a4b      	ldr	r2, [pc, #300]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d02e      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cce:	4a49      	ldr	r2, [pc, #292]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d028      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cda:	4a47      	ldr	r2, [pc, #284]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0xa2c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d022      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ce6:	4a45      	ldr	r2, [pc, #276]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d01c      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cf2:	4a43      	ldr	r2, [pc, #268]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d016      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cfe:	4a41      	ldr	r2, [pc, #260]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d010      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d0a:	4a3f      	ldr	r2, [pc, #252]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00a      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d16:	4a3d      	ldr	r2, [pc, #244]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d004      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005d1c:	f44f 715a 	mov.w	r1, #872	; 0x368
 8005d20:	483b      	ldr	r0, [pc, #236]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 8005d22:	f7fa ffde 	bl	8000ce2 <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d26:	4b3b      	ldr	r3, [pc, #236]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a3a      	ldr	r2, [pc, #232]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8005d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d32:	f7fb fc09 	bl	8001548 <HAL_GetTick>
 8005d36:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d38:	e06e      	b.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d3a:	f7fb fc05 	bl	8001548 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b64      	cmp	r3, #100	; 0x64
 8005d46:	d967      	bls.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
      {
        ret = HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	75fb      	strb	r3, [r7, #23]
        break;
 8005d4c:	e06a      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8005d4e:	bf00      	nop
 8005d50:	00010300 	.word	0x00010300
 8005d54:	00011300 	.word	0x00011300
 8005d58:	00012300 	.word	0x00012300
 8005d5c:	00013300 	.word	0x00013300
 8005d60:	00014300 	.word	0x00014300
 8005d64:	00015300 	.word	0x00015300
 8005d68:	00016300 	.word	0x00016300
 8005d6c:	00017300 	.word	0x00017300
 8005d70:	00018300 	.word	0x00018300
 8005d74:	00019300 	.word	0x00019300
 8005d78:	0001a300 	.word	0x0001a300
 8005d7c:	0001b300 	.word	0x0001b300
 8005d80:	0001c300 	.word	0x0001c300
 8005d84:	0001d300 	.word	0x0001d300
 8005d88:	0001e300 	.word	0x0001e300
 8005d8c:	0001f300 	.word	0x0001f300
 8005d90:	00020300 	.word	0x00020300
 8005d94:	00021300 	.word	0x00021300
 8005d98:	00022300 	.word	0x00022300
 8005d9c:	00023300 	.word	0x00023300
 8005da0:	00024300 	.word	0x00024300
 8005da4:	00025300 	.word	0x00025300
 8005da8:	00026300 	.word	0x00026300
 8005dac:	00027300 	.word	0x00027300
 8005db0:	00028300 	.word	0x00028300
 8005db4:	00029300 	.word	0x00029300
 8005db8:	0002a300 	.word	0x0002a300
 8005dbc:	0002b300 	.word	0x0002b300
 8005dc0:	0002c300 	.word	0x0002c300
 8005dc4:	0002d300 	.word	0x0002d300
 8005dc8:	0002e300 	.word	0x0002e300
 8005dcc:	0002f300 	.word	0x0002f300
 8005dd0:	00030300 	.word	0x00030300
 8005dd4:	00031300 	.word	0x00031300
 8005dd8:	00032300 	.word	0x00032300
 8005ddc:	00033300 	.word	0x00033300
 8005de0:	00034300 	.word	0x00034300
 8005de4:	00035300 	.word	0x00035300
 8005de8:	00036300 	.word	0x00036300
 8005dec:	00037300 	.word	0x00037300
 8005df0:	00038300 	.word	0x00038300
 8005df4:	00039300 	.word	0x00039300
 8005df8:	0003a300 	.word	0x0003a300
 8005dfc:	0003b300 	.word	0x0003b300
 8005e00:	0003c300 	.word	0x0003c300
 8005e04:	0003d300 	.word	0x0003d300
 8005e08:	0003e300 	.word	0x0003e300
 8005e0c:	0003f300 	.word	0x0003f300
 8005e10:	08018cac 	.word	0x08018cac
 8005e14:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e18:	4bb9      	ldr	r3, [pc, #740]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d08a      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x96e>
      }
    }

    if(ret == HAL_OK)
 8005e24:	7dfb      	ldrb	r3, [r7, #23]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d166      	bne.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xb2c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e2a:	4bb6      	ldr	r3, [pc, #728]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e34:	4053      	eors	r3, r2
 8005e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d013      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e3e:	4bb1      	ldr	r3, [pc, #708]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e46:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e48:	4bae      	ldr	r3, [pc, #696]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4c:	4aad      	ldr	r2, [pc, #692]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e52:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e54:	4bab      	ldr	r3, [pc, #684]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e58:	4aaa      	ldr	r2, [pc, #680]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e5e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e60:	4aa8      	ldr	r2, [pc, #672]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e70:	d115      	bne.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e72:	f7fb fb69 	bl	8001548 <HAL_GetTick>
 8005e76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e78:	e00b      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0xac6>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e7a:	f7fb fb65 	bl	8001548 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d902      	bls.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0xac6>
          {
            ret = HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	75fb      	strb	r3, [r7, #23]
            break;
 8005e90:	e005      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xad2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e92:	4b9c      	ldr	r3, [pc, #624]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0ed      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xaae>
          }
        }
      }

      if(ret == HAL_OK)
 8005e9e:	7dfb      	ldrb	r3, [r7, #23]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d126      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eb2:	d10d      	bne.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8005eb4:	4b93      	ldr	r3, [pc, #588]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ec2:	0919      	lsrs	r1, r3, #4
 8005ec4:	4b90      	ldr	r3, [pc, #576]	; (8006108 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8005ec6:	400b      	ands	r3, r1
 8005ec8:	498e      	ldr	r1, [pc, #568]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	610b      	str	r3, [r1, #16]
 8005ece:	e005      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0xb10>
 8005ed0:	4b8c      	ldr	r3, [pc, #560]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	4a8b      	ldr	r2, [pc, #556]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ed6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005eda:	6113      	str	r3, [r2, #16]
 8005edc:	4b89      	ldr	r3, [pc, #548]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ede:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eea:	4986      	ldr	r1, [pc, #536]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	670b      	str	r3, [r1, #112]	; 0x70
 8005ef0:	e004      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
 8005ef4:	75bb      	strb	r3, [r7, #22]
 8005ef6:	e001      	b.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef8:	7dfb      	ldrb	r3, [r7, #23]
 8005efa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d07e      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xc3a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f0c:	2b28      	cmp	r3, #40	; 0x28
 8005f0e:	d867      	bhi.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xc14>
 8005f10:	a201      	add	r2, pc, #4	; (adr r2, 8005f18 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
 8005f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f16:	bf00      	nop
 8005f18:	08005fe7 	.word	0x08005fe7
 8005f1c:	08005fe1 	.word	0x08005fe1
 8005f20:	08005fe1 	.word	0x08005fe1
 8005f24:	08005fe1 	.word	0x08005fe1
 8005f28:	08005fe1 	.word	0x08005fe1
 8005f2c:	08005fe1 	.word	0x08005fe1
 8005f30:	08005fe1 	.word	0x08005fe1
 8005f34:	08005fe1 	.word	0x08005fe1
 8005f38:	08005fbd 	.word	0x08005fbd
 8005f3c:	08005fe1 	.word	0x08005fe1
 8005f40:	08005fe1 	.word	0x08005fe1
 8005f44:	08005fe1 	.word	0x08005fe1
 8005f48:	08005fe1 	.word	0x08005fe1
 8005f4c:	08005fe1 	.word	0x08005fe1
 8005f50:	08005fe1 	.word	0x08005fe1
 8005f54:	08005fe1 	.word	0x08005fe1
 8005f58:	08005fcf 	.word	0x08005fcf
 8005f5c:	08005fe1 	.word	0x08005fe1
 8005f60:	08005fe1 	.word	0x08005fe1
 8005f64:	08005fe1 	.word	0x08005fe1
 8005f68:	08005fe1 	.word	0x08005fe1
 8005f6c:	08005fe1 	.word	0x08005fe1
 8005f70:	08005fe1 	.word	0x08005fe1
 8005f74:	08005fe1 	.word	0x08005fe1
 8005f78:	08005fe7 	.word	0x08005fe7
 8005f7c:	08005fe1 	.word	0x08005fe1
 8005f80:	08005fe1 	.word	0x08005fe1
 8005f84:	08005fe1 	.word	0x08005fe1
 8005f88:	08005fe1 	.word	0x08005fe1
 8005f8c:	08005fe1 	.word	0x08005fe1
 8005f90:	08005fe1 	.word	0x08005fe1
 8005f94:	08005fe1 	.word	0x08005fe1
 8005f98:	08005fe7 	.word	0x08005fe7
 8005f9c:	08005fe1 	.word	0x08005fe1
 8005fa0:	08005fe1 	.word	0x08005fe1
 8005fa4:	08005fe1 	.word	0x08005fe1
 8005fa8:	08005fe1 	.word	0x08005fe1
 8005fac:	08005fe1 	.word	0x08005fe1
 8005fb0:	08005fe1 	.word	0x08005fe1
 8005fb4:	08005fe1 	.word	0x08005fe1
 8005fb8:	08005fe7 	.word	0x08005fe7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 fe30 	bl	8006c28 <RCCEx_PLL2_Config>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005fcc:	e00c      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3324      	adds	r3, #36	; 0x24
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 ff49 	bl	8006e6c <RCCEx_PLL3_Config>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005fde:	e003      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe4:	e000      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8005fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fe8:	7dfb      	ldrb	r3, [r7, #23]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d109      	bne.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xc36>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005fee:	4b45      	ldr	r3, [pc, #276]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ffa:	4942      	ldr	r1, [pc, #264]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	654b      	str	r3, [r1, #84]	; 0x54
 8006000:	e001      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xc3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006002:	7dfb      	ldrb	r3, [r7, #23]
 8006004:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d037      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006016:	2b05      	cmp	r3, #5
 8006018:	d820      	bhi.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xc90>
 800601a:	a201      	add	r2, pc, #4	; (adr r2, 8006020 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 800601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006020:	08006063 	.word	0x08006063
 8006024:	08006039 	.word	0x08006039
 8006028:	0800604b 	.word	0x0800604b
 800602c:	08006063 	.word	0x08006063
 8006030:	08006063 	.word	0x08006063
 8006034:	08006063 	.word	0x08006063
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3304      	adds	r3, #4
 800603c:	2101      	movs	r1, #1
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fdf2 	bl	8006c28 <RCCEx_PLL2_Config>
 8006044:	4603      	mov	r3, r0
 8006046:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006048:	e00c      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xc98>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	3324      	adds	r3, #36	; 0x24
 800604e:	2101      	movs	r1, #1
 8006050:	4618      	mov	r0, r3
 8006052:	f000 ff0b 	bl	8006e6c <RCCEx_PLL3_Config>
 8006056:	4603      	mov	r3, r0
 8006058:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800605a:	e003      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	75fb      	strb	r3, [r7, #23]
      break;
 8006060:	e000      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xc98>
      break;
 8006062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006064:	7dfb      	ldrb	r3, [r7, #23]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d109      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800606a:	4b26      	ldr	r3, [pc, #152]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800606c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606e:	f023 0207 	bic.w	r2, r3, #7
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006076:	4923      	ldr	r1, [pc, #140]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006078:	4313      	orrs	r3, r2
 800607a:	654b      	str	r3, [r1, #84]	; 0x54
 800607c:	e001      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800607e:	7dfb      	ldrb	r3, [r7, #23]
 8006080:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0304 	and.w	r3, r3, #4
 800608a:	2b00      	cmp	r3, #0
 800608c:	d040      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006094:	2b05      	cmp	r3, #5
 8006096:	d821      	bhi.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006098:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <HAL_RCCEx_PeriphCLKConfig+0xcd4>)
 800609a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609e:	bf00      	nop
 80060a0:	080060e3 	.word	0x080060e3
 80060a4:	080060b9 	.word	0x080060b9
 80060a8:	080060cb 	.word	0x080060cb
 80060ac:	080060e3 	.word	0x080060e3
 80060b0:	080060e3 	.word	0x080060e3
 80060b4:	080060e3 	.word	0x080060e3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	3304      	adds	r3, #4
 80060bc:	2101      	movs	r1, #1
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fdb2 	bl	8006c28 <RCCEx_PLL2_Config>
 80060c4:	4603      	mov	r3, r0
 80060c6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80060c8:	e00c      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd18>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3324      	adds	r3, #36	; 0x24
 80060ce:	2101      	movs	r1, #1
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 fecb 	bl	8006e6c <RCCEx_PLL3_Config>
 80060d6:	4603      	mov	r3, r0
 80060d8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80060da:	e003      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	75fb      	strb	r3, [r7, #23]
      break;
 80060e0:	e000      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 80060e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060e4:	7dfb      	ldrb	r3, [r7, #23]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d110      	bne.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060ea:	4b06      	ldr	r3, [pc, #24]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ee:	f023 0207 	bic.w	r2, r3, #7
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f8:	4902      	ldr	r1, [pc, #8]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	658b      	str	r3, [r1, #88]	; 0x58
 80060fe:	e007      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006100:	58024800 	.word	0x58024800
 8006104:	58024400 	.word	0x58024400
 8006108:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800610c:	7dfb      	ldrb	r3, [r7, #23]
 800610e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0320 	and.w	r3, r3, #32
 8006118:	2b00      	cmp	r3, #0
 800611a:	d044      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006126:	d01b      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8006128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800612c:	d805      	bhi.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d022      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8006132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006136:	d00a      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006138:	e01b      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xda6>
 800613a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800613e:	d01d      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 8006140:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006144:	d01c      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8006146:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800614a:	d01b      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0xdb8>
 800614c:	e011      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xda6>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	3304      	adds	r3, #4
 8006152:	2100      	movs	r1, #0
 8006154:	4618      	mov	r0, r3
 8006156:	f000 fd67 	bl	8006c28 <RCCEx_PLL2_Config>
 800615a:	4603      	mov	r3, r0
 800615c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800615e:	e012      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xdba>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3324      	adds	r3, #36	; 0x24
 8006164:	2102      	movs	r1, #2
 8006166:	4618      	mov	r0, r3
 8006168:	f000 fe80 	bl	8006e6c <RCCEx_PLL3_Config>
 800616c:	4603      	mov	r3, r0
 800616e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006170:	e009      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	75fb      	strb	r3, [r7, #23]
      break;
 8006176:	e006      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8006178:	bf00      	nop
 800617a:	e004      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 800617c:	bf00      	nop
 800617e:	e002      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8006180:	bf00      	nop
 8006182:	e000      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 8006184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006186:	7dfb      	ldrb	r3, [r7, #23]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10a      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800618c:	4bb6      	ldr	r3, [pc, #728]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 800618e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006190:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800619a:	49b3      	ldr	r1, [pc, #716]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 800619c:	4313      	orrs	r3, r2
 800619e:	654b      	str	r3, [r1, #84]	; 0x54
 80061a0:	e001      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a2:	7dfb      	ldrb	r3, [r7, #23]
 80061a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d044      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xe70>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061bc:	d01b      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xe2a>
 80061be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061c2:	d805      	bhi.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xe04>
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d022      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xe42>
 80061c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061cc:	d00a      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 80061ce:	e01b      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 80061d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061d4:	d01d      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xe46>
 80061d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061da:	d01c      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xe4a>
 80061dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061e0:	d01b      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0xe4e>
 80061e2:	e011      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3304      	adds	r3, #4
 80061e8:	2100      	movs	r1, #0
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fd1c 	bl	8006c28 <RCCEx_PLL2_Config>
 80061f0:	4603      	mov	r3, r0
 80061f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80061f4:	e012      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xe50>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	3324      	adds	r3, #36	; 0x24
 80061fa:	2102      	movs	r1, #2
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 fe35 	bl	8006e6c <RCCEx_PLL3_Config>
 8006202:	4603      	mov	r3, r0
 8006204:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006206:	e009      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	75fb      	strb	r3, [r7, #23]
      break;
 800620c:	e006      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 800620e:	bf00      	nop
 8006210:	e004      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8006212:	bf00      	nop
 8006214:	e002      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8006216:	bf00      	nop
 8006218:	e000      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 800621a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800621c:	7dfb      	ldrb	r3, [r7, #23]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006222:	4b91      	ldr	r3, [pc, #580]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8006224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006226:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006230:	498d      	ldr	r1, [pc, #564]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8006232:	4313      	orrs	r3, r2
 8006234:	658b      	str	r3, [r1, #88]	; 0x58
 8006236:	e001      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xe70>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006238:	7dfb      	ldrb	r3, [r7, #23]
 800623a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006244:	2b00      	cmp	r3, #0
 8006246:	d044      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xf06>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800624e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006252:	d01b      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xec0>
 8006254:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006258:	d805      	bhi.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xe9a>
 800625a:	2b00      	cmp	r3, #0
 800625c:	d022      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xed8>
 800625e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006262:	d00a      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0xeae>
 8006264:	e01b      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xed2>
 8006266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800626a:	d01d      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 800626c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006270:	d01c      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xee0>
 8006272:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006276:	d01b      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xee4>
 8006278:	e011      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	3304      	adds	r3, #4
 800627e:	2100      	movs	r1, #0
 8006280:	4618      	mov	r0, r3
 8006282:	f000 fcd1 	bl	8006c28 <RCCEx_PLL2_Config>
 8006286:	4603      	mov	r3, r0
 8006288:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800628a:	e012      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xee6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	3324      	adds	r3, #36	; 0x24
 8006290:	2102      	movs	r1, #2
 8006292:	4618      	mov	r0, r3
 8006294:	f000 fdea 	bl	8006e6c <RCCEx_PLL3_Config>
 8006298:	4603      	mov	r3, r0
 800629a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800629c:	e009      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	75fb      	strb	r3, [r7, #23]
      break;
 80062a2:	e006      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 80062a4:	bf00      	nop
 80062a6:	e004      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 80062a8:	bf00      	nop
 80062aa:	e002      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 80062ac:	bf00      	nop
 80062ae:	e000      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 80062b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10a      	bne.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0xf02>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80062b8:	4b6b      	ldr	r3, [pc, #428]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 80062ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062c6:	4968      	ldr	r1, [pc, #416]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	658b      	str	r3, [r1, #88]	; 0x58
 80062cc:	e001      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xf06>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ce:	7dfb      	ldrb	r3, [r7, #23]
 80062d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0308 	and.w	r3, r3, #8
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d036      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xf80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062e8:	d015      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062f4:	d00f      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00a      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006306:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800630a:	d004      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 800630c:	f240 41e6 	movw	r1, #1254	; 0x4e6
 8006310:	4856      	ldr	r0, [pc, #344]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8006312:	f7fa fce6 	bl	8000ce2 <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800631c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006320:	d10a      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	3324      	adds	r3, #36	; 0x24
 8006326:	2102      	movs	r1, #2
 8006328:	4618      	mov	r0, r3
 800632a:	f000 fd9f 	bl	8006e6c <RCCEx_PLL3_Config>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
        {
          status = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006338:	4b4b      	ldr	r3, [pc, #300]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 800633a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006346:	4948      	ldr	r1, [pc, #288]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8006348:	4313      	orrs	r3, r2
 800634a:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0310 	and.w	r3, r3, #16
 8006354:	2b00      	cmp	r3, #0
 8006356:	d036      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xffa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800635e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006362:	d015      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800636a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800636e:	d00f      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006380:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006384:	d004      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 8006386:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
 800638a:	4838      	ldr	r0, [pc, #224]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800638c:	f7fa fca9 	bl	8000ce2 <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800639a:	d10a      	bne.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xfe6>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3324      	adds	r3, #36	; 0x24
 80063a0:	2102      	movs	r1, #2
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fd62 	bl	8006e6c <RCCEx_PLL3_Config>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xfe6>
      {
        status = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063b2:	4b2d      	ldr	r3, [pc, #180]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 80063b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063c0:	4929      	ldr	r1, [pc, #164]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d030      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x1068>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80063d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063dc:	d00d      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x102e>
 80063de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063e2:	d016      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x1046>
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d111      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x1040>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	3304      	adds	r3, #4
 80063ec:	2100      	movs	r1, #0
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 fc1a 	bl	8006c28 <RCCEx_PLL2_Config>
 80063f4:	4603      	mov	r3, r0
 80063f6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80063f8:	e00c      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x1048>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	3324      	adds	r3, #36	; 0x24
 80063fe:	2102      	movs	r1, #2
 8006400:	4618      	mov	r0, r3
 8006402:	f000 fd33 	bl	8006e6c <RCCEx_PLL3_Config>
 8006406:	4603      	mov	r3, r0
 8006408:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800640a:	e003      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x1048>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	75fb      	strb	r3, [r7, #23]
      break;
 8006410:	e000      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x1048>
      break;
 8006412:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006414:	7dfb      	ldrb	r3, [r7, #23]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10a      	bne.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x1064>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800641a:	4b13      	ldr	r3, [pc, #76]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 800641c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800641e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006428:	490f      	ldr	r1, [pc, #60]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 800642a:	4313      	orrs	r3, r2
 800642c:	658b      	str	r3, [r1, #88]	; 0x58
 800642e:	e001      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x1068>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006430:	7dfb      	ldrb	r3, [r7, #23]
 8006432:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d034      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x10de>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006446:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800644a:	d011      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
 800644c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006450:	d01a      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006456:	d114      	bne.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006458:	4b03      	ldr	r3, [pc, #12]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	4a02      	ldr	r2, [pc, #8]	; (8006468 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 800645e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006462:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006464:	e011      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x10be>
 8006466:	bf00      	nop
 8006468:	58024400 	.word	0x58024400
 800646c:	08018cac 	.word	0x08018cac

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3324      	adds	r3, #36	; 0x24
 8006474:	2101      	movs	r1, #1
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fcf8 	bl	8006e6c <RCCEx_PLL3_Config>
 800647c:	4603      	mov	r3, r0
 800647e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006480:	e003      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x10be>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	75fb      	strb	r3, [r7, #23]
      break;
 8006486:	e000      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x10be>
      break;
 8006488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800648a:	7dfb      	ldrb	r3, [r7, #23]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10a      	bne.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x10da>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006490:	4b8c      	ldr	r3, [pc, #560]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006494:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800649e:	4989      	ldr	r1, [pc, #548]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	654b      	str	r3, [r1, #84]	; 0x54
 80064a4:	e001      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x10de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a6:	7dfb      	ldrb	r3, [r7, #23]
 80064a8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d037      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x115a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d009      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x1106>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c6:	d004      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x1106>
 80064c8:	f240 515e 	movw	r1, #1374	; 0x55e
 80064cc:	487e      	ldr	r0, [pc, #504]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 80064ce:	f7fa fc08 	bl	8000ce2 <assert_failed>

    switch(PeriphClkInit->SdmmcClockSelection)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80064da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064de:	d007      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1124>
 80064e0:	e00f      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064e2:	4b78      	ldr	r3, [pc, #480]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80064e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e6:	4a77      	ldr	r2, [pc, #476]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80064e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80064ee:	e00b      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x113c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3304      	adds	r3, #4
 80064f4:	2102      	movs	r1, #2
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 fb96 	bl	8006c28 <RCCEx_PLL2_Config>
 80064fc:	4603      	mov	r3, r0
 80064fe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006500:	e002      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x113c>

    default:
      ret = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	75fb      	strb	r3, [r7, #23]
      break;
 8006506:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006508:	7dfb      	ldrb	r3, [r7, #23]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d109      	bne.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x1156>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800650e:	4b6d      	ldr	r3, [pc, #436]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006512:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800651a:	496a      	ldr	r1, [pc, #424]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800651c:	4313      	orrs	r3, r2
 800651e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006520:	e001      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x115a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006522:	7dfb      	ldrb	r3, [r7, #23]
 8006524:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x117c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	3324      	adds	r3, #36	; 0x24
 8006536:	2102      	movs	r1, #2
 8006538:	4618      	mov	r0, r3
 800653a:	f000 fc97 	bl	8006e6c <RCCEx_PLL3_Config>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x117c>
    {
      status=HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d02f      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800655c:	d00c      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x11ac>
 800655e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006562:	d802      	bhi.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x119e>
 8006564:	2b00      	cmp	r3, #0
 8006566:	d011      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
 8006568:	e00d      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
 800656a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800656e:	d00f      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x11c4>
 8006570:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006574:	d00e      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8006576:	e006      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006578:	4b52      	ldr	r3, [pc, #328]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	4a51      	ldr	r2, [pc, #324]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800657e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006582:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006584:	e007      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	75fb      	strb	r3, [r7, #23]
      break;
 800658a:	e004      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      break;
 800658c:	bf00      	nop
 800658e:	e002      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      break;
 8006590:	bf00      	nop
 8006592:	e000      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      break;
 8006594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006596:	7dfb      	ldrb	r3, [r7, #23]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d109      	bne.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x11e4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800659c:	4b49      	ldr	r3, [pc, #292]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800659e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065a8:	4946      	ldr	r1, [pc, #280]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	654b      	str	r3, [r1, #84]	; 0x54
 80065ae:	e001      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b0:	7dfb      	ldrb	r3, [r7, #23]
 80065b2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d016      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x1222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d009      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x1210>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065d0:	d004      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x1210>
 80065d2:	f240 51bd 	movw	r1, #1469	; 0x5bd
 80065d6:	483c      	ldr	r0, [pc, #240]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 80065d8:	f7fa fb83 	bl	8000ce2 <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80065dc:	4b39      	ldr	r3, [pc, #228]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80065de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e8:	4936      	ldr	r1, [pc, #216]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d016      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d009      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x124a>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006606:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800660a:	d004      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x124a>
 800660c:	f240 51d1 	movw	r1, #1489	; 0x5d1
 8006610:	482d      	ldr	r0, [pc, #180]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 8006612:	f7fa fb66 	bl	8000ce2 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006616:	4b2b      	ldr	r3, [pc, #172]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006622:	4928      	ldr	r1, [pc, #160]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006624:	4313      	orrs	r3, r2
 8006626:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d01d      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x12a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00a      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x1288>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006648:	d004      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x1288>
 800664a:	f240 51e7 	movw	r1, #1511	; 0x5e7
 800664e:	481e      	ldr	r0, [pc, #120]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 8006650:	f7fa fb47 	bl	8000ce2 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006654:	4b1b      	ldr	r3, [pc, #108]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	4a1a      	ldr	r2, [pc, #104]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800665a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800665e:	6113      	str	r3, [r2, #16]
 8006660:	4b18      	ldr	r3, [pc, #96]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 8006662:	691a      	ldr	r2, [r3, #16]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800666a:	4916      	ldr	r1, [pc, #88]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 800666c:	4313      	orrs	r3, r2
 800666e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	da1b      	bge.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x12e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00e      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x12d2>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006684:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006688:	d009      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x12d2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800668e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006692:	d004      	beq.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x12d2>
 8006694:	f240 51f1 	movw	r1, #1521	; 0x5f1
 8006698:	480b      	ldr	r0, [pc, #44]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>)
 800669a:	f7fa fb22 	bl	8000ce2 <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800669e:	4b09      	ldr	r3, [pc, #36]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80066a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066aa:	4906      	ldr	r1, [pc, #24]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80066b0:	7dbb      	ldrb	r3, [r7, #22]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x12ee>
  {
    return HAL_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	e000      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x12f0>
  }
  return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	58024400 	.word	0x58024400
 80066c8:	08018cac 	.word	0x08018cac

080066cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80066d0:	f7fe fdde 	bl	8005290 <HAL_RCC_GetHCLKFreq>
 80066d4:	4601      	mov	r1, r0
 80066d6:	4b06      	ldr	r3, [pc, #24]	; (80066f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	091b      	lsrs	r3, r3, #4
 80066dc:	f003 0307 	and.w	r3, r3, #7
 80066e0:	4a04      	ldr	r2, [pc, #16]	; (80066f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80066e2:	5cd3      	ldrb	r3, [r2, r3]
 80066e4:	f003 031f 	and.w	r3, r3, #31
 80066e8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	58024400 	.word	0x58024400
 80066f4:	0801ac10 	.word	0x0801ac10

080066f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b089      	sub	sp, #36	; 0x24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006700:	4b9d      	ldr	r3, [pc, #628]	; (8006978 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006704:	f003 0303 	and.w	r3, r3, #3
 8006708:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800670a:	4b9b      	ldr	r3, [pc, #620]	; (8006978 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800670c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670e:	0b1b      	lsrs	r3, r3, #12
 8006710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006714:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006716:	4b98      	ldr	r3, [pc, #608]	; (8006978 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671a:	091b      	lsrs	r3, r3, #4
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006722:	4b95      	ldr	r3, [pc, #596]	; (8006978 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006726:	08db      	lsrs	r3, r3, #3
 8006728:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	fb02 f303 	mul.w	r3, r2, r3
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800673a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 810a 	beq.w	800695a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d05a      	beq.n	8006802 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800674c:	2b01      	cmp	r3, #1
 800674e:	d302      	bcc.n	8006756 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8006750:	2b02      	cmp	r3, #2
 8006752:	d078      	beq.n	8006846 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8006754:	e099      	b.n	800688a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006756:	4b88      	ldr	r3, [pc, #544]	; (8006978 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0320 	and.w	r3, r3, #32
 800675e:	2b00      	cmp	r3, #0
 8006760:	d02d      	beq.n	80067be <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006762:	4b85      	ldr	r3, [pc, #532]	; (8006978 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	08db      	lsrs	r3, r3, #3
 8006768:	f003 0303 	and.w	r3, r3, #3
 800676c:	4a83      	ldr	r2, [pc, #524]	; (800697c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800676e:	fa22 f303 	lsr.w	r3, r2, r3
 8006772:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	ee07 3a90 	vmov	s15, r3
 800677a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	ee07 3a90 	vmov	s15, r3
 8006784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006788:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800678c:	4b7a      	ldr	r3, [pc, #488]	; (8006978 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800678e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006794:	ee07 3a90 	vmov	s15, r3
 8006798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800679c:	ed97 6a03 	vldr	s12, [r7, #12]
 80067a0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006980 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80067a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80067bc:	e087      	b.n	80068ce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	ee07 3a90 	vmov	s15, r3
 80067c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067c8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006984 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80067cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067d0:	4b69      	ldr	r3, [pc, #420]	; (8006978 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80067d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d8:	ee07 3a90 	vmov	s15, r3
 80067dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80067e4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006980 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80067e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006800:	e065      	b.n	80068ce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	ee07 3a90 	vmov	s15, r3
 8006808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006810:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006814:	4b58      	ldr	r3, [pc, #352]	; (8006978 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800681c:	ee07 3a90 	vmov	s15, r3
 8006820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006824:	ed97 6a03 	vldr	s12, [r7, #12]
 8006828:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006980 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800682c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006830:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006834:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006838:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800683c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006840:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006844:	e043      	b.n	80068ce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	ee07 3a90 	vmov	s15, r3
 800684c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006850:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800698c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006858:	4b47      	ldr	r3, [pc, #284]	; (8006978 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006860:	ee07 3a90 	vmov	s15, r3
 8006864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006868:	ed97 6a03 	vldr	s12, [r7, #12]
 800686c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006980 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006870:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006874:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006878:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800687c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006884:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006888:	e021      	b.n	80068ce <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	ee07 3a90 	vmov	s15, r3
 8006890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006894:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006898:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800689c:	4b36      	ldr	r3, [pc, #216]	; (8006978 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800689e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a4:	ee07 3a90 	vmov	s15, r3
 80068a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80068b0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006980 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80068b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068c8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068cc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80068ce:	4b2a      	ldr	r3, [pc, #168]	; (8006978 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	0a5b      	lsrs	r3, r3, #9
 80068d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068d8:	ee07 3a90 	vmov	s15, r3
 80068dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80068ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068f4:	ee17 2a90 	vmov	r2, s15
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80068fc:	4b1e      	ldr	r3, [pc, #120]	; (8006978 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80068fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006900:	0c1b      	lsrs	r3, r3, #16
 8006902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006906:	ee07 3a90 	vmov	s15, r3
 800690a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800690e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006912:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006916:	edd7 6a07 	vldr	s13, [r7, #28]
 800691a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800691e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006922:	ee17 2a90 	vmov	r2, s15
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800692a:	4b13      	ldr	r3, [pc, #76]	; (8006978 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800692c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692e:	0e1b      	lsrs	r3, r3, #24
 8006930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006934:	ee07 3a90 	vmov	s15, r3
 8006938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800693c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006940:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006944:	edd7 6a07 	vldr	s13, [r7, #28]
 8006948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800694c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006950:	ee17 2a90 	vmov	r2, s15
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006958:	e008      	b.n	800696c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	609a      	str	r2, [r3, #8]
}
 800696c:	bf00      	nop
 800696e:	3724      	adds	r7, #36	; 0x24
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	58024400 	.word	0x58024400
 800697c:	03d09000 	.word	0x03d09000
 8006980:	46000000 	.word	0x46000000
 8006984:	4c742400 	.word	0x4c742400
 8006988:	4a742400 	.word	0x4a742400
 800698c:	4af42400 	.word	0x4af42400

08006990 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006990:	b480      	push	{r7}
 8006992:	b089      	sub	sp, #36	; 0x24
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006998:	4b9d      	ldr	r3, [pc, #628]	; (8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800699a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699c:	f003 0303 	and.w	r3, r3, #3
 80069a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80069a2:	4b9b      	ldr	r3, [pc, #620]	; (8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80069a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a6:	0d1b      	lsrs	r3, r3, #20
 80069a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80069ae:	4b98      	ldr	r3, [pc, #608]	; (8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80069b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b2:	0a1b      	lsrs	r3, r3, #8
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80069ba:	4b95      	ldr	r3, [pc, #596]	; (8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80069bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069be:	08db      	lsrs	r3, r3, #3
 80069c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	fb02 f303 	mul.w	r3, r2, r3
 80069ca:	ee07 3a90 	vmov	s15, r3
 80069ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 810a 	beq.w	8006bf2 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d05a      	beq.n	8006a9a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d302      	bcc.n	80069ee <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d078      	beq.n	8006ade <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80069ec:	e099      	b.n	8006b22 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069ee:	4b88      	ldr	r3, [pc, #544]	; (8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0320 	and.w	r3, r3, #32
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d02d      	beq.n	8006a56 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069fa:	4b85      	ldr	r3, [pc, #532]	; (8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	08db      	lsrs	r3, r3, #3
 8006a00:	f003 0303 	and.w	r3, r3, #3
 8006a04:	4a83      	ldr	r2, [pc, #524]	; (8006c14 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006a06:	fa22 f303 	lsr.w	r3, r2, r3
 8006a0a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	ee07 3a90 	vmov	s15, r3
 8006a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	ee07 3a90 	vmov	s15, r3
 8006a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a24:	4b7a      	ldr	r3, [pc, #488]	; (8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a2c:	ee07 3a90 	vmov	s15, r3
 8006a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a34:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a38:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006c18 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006a3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a50:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006a54:	e087      	b.n	8006b66 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	ee07 3a90 	vmov	s15, r3
 8006a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a60:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8006a64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a68:	4b69      	ldr	r3, [pc, #420]	; (8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a70:	ee07 3a90 	vmov	s15, r3
 8006a74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a78:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a7c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006c18 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006a80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a98:	e065      	b.n	8006b66 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	ee07 3a90 	vmov	s15, r3
 8006aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006aa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aac:	4b58      	ldr	r3, [pc, #352]	; (8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab4:	ee07 3a90 	vmov	s15, r3
 8006ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006abc:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ac0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006c18 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006ac4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ac8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006acc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ad0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006adc:	e043      	b.n	8006b66 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	ee07 3a90 	vmov	s15, r3
 8006ae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006aec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006af0:	4b47      	ldr	r3, [pc, #284]	; (8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af8:	ee07 3a90 	vmov	s15, r3
 8006afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b00:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b04:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006c18 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006b08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b20:	e021      	b.n	8006b66 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	ee07 3a90 	vmov	s15, r3
 8006b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006c20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006b30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b34:	4b36      	ldr	r3, [pc, #216]	; (8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b3c:	ee07 3a90 	vmov	s15, r3
 8006b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b44:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b48:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006c18 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006b4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b64:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006b66:	4b2a      	ldr	r3, [pc, #168]	; (8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	0a5b      	lsrs	r3, r3, #9
 8006b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b70:	ee07 3a90 	vmov	s15, r3
 8006b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b80:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b8c:	ee17 2a90 	vmov	r2, s15
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006b94:	4b1e      	ldr	r3, [pc, #120]	; (8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	0c1b      	lsrs	r3, r3, #16
 8006b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006baa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bae:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bba:	ee17 2a90 	vmov	r2, s15
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006bc2:	4b13      	ldr	r3, [pc, #76]	; (8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc6:	0e1b      	lsrs	r3, r3, #24
 8006bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bcc:	ee07 3a90 	vmov	s15, r3
 8006bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006be8:	ee17 2a90 	vmov	r2, s15
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006bf0:	e008      	b.n	8006c04 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	609a      	str	r2, [r3, #8]
}
 8006c04:	bf00      	nop
 8006c06:	3724      	adds	r7, #36	; 0x24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	58024400 	.word	0x58024400
 8006c14:	03d09000 	.word	0x03d09000
 8006c18:	46000000 	.word	0x46000000
 8006c1c:	4c742400 	.word	0x4c742400
 8006c20:	4a742400 	.word	0x4a742400
 8006c24:	4af42400 	.word	0x4af42400

08006c28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <RCCEx_PLL2_Config+0x1e>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b3f      	cmp	r3, #63	; 0x3f
 8006c44:	d904      	bls.n	8006c50 <RCCEx_PLL2_Config+0x28>
 8006c46:	f640 417f 	movw	r1, #3199	; 0xc7f
 8006c4a:	4885      	ldr	r0, [pc, #532]	; (8006e60 <RCCEx_PLL2_Config+0x238>)
 8006c4c:	f7fa f849 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d904      	bls.n	8006c62 <RCCEx_PLL2_Config+0x3a>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c60:	d904      	bls.n	8006c6c <RCCEx_PLL2_Config+0x44>
 8006c62:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8006c66:	487e      	ldr	r0, [pc, #504]	; (8006e60 <RCCEx_PLL2_Config+0x238>)
 8006c68:	f7fa f83b 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d003      	beq.n	8006c7c <RCCEx_PLL2_Config+0x54>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	2b80      	cmp	r3, #128	; 0x80
 8006c7a:	d904      	bls.n	8006c86 <RCCEx_PLL2_Config+0x5e>
 8006c7c:	f640 4181 	movw	r1, #3201	; 0xc81
 8006c80:	4877      	ldr	r0, [pc, #476]	; (8006e60 <RCCEx_PLL2_Config+0x238>)
 8006c82:	f7fa f82e 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <RCCEx_PLL2_Config+0x6e>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	2b80      	cmp	r3, #128	; 0x80
 8006c94:	d904      	bls.n	8006ca0 <RCCEx_PLL2_Config+0x78>
 8006c96:	f640 4182 	movw	r1, #3202	; 0xc82
 8006c9a:	4871      	ldr	r0, [pc, #452]	; (8006e60 <RCCEx_PLL2_Config+0x238>)
 8006c9c:	f7fa f821 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d003      	beq.n	8006cb0 <RCCEx_PLL2_Config+0x88>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	2b80      	cmp	r3, #128	; 0x80
 8006cae:	d904      	bls.n	8006cba <RCCEx_PLL2_Config+0x92>
 8006cb0:	f640 4183 	movw	r1, #3203	; 0xc83
 8006cb4:	486a      	ldr	r0, [pc, #424]	; (8006e60 <RCCEx_PLL2_Config+0x238>)
 8006cb6:	f7fa f814 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d010      	beq.n	8006ce4 <RCCEx_PLL2_Config+0xbc>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	2b40      	cmp	r3, #64	; 0x40
 8006cc8:	d00c      	beq.n	8006ce4 <RCCEx_PLL2_Config+0xbc>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	2b80      	cmp	r3, #128	; 0x80
 8006cd0:	d008      	beq.n	8006ce4 <RCCEx_PLL2_Config+0xbc>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	2bc0      	cmp	r3, #192	; 0xc0
 8006cd8:	d004      	beq.n	8006ce4 <RCCEx_PLL2_Config+0xbc>
 8006cda:	f640 4184 	movw	r1, #3204	; 0xc84
 8006cde:	4860      	ldr	r0, [pc, #384]	; (8006e60 <RCCEx_PLL2_Config+0x238>)
 8006ce0:	f7f9 ffff 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d008      	beq.n	8006cfe <RCCEx_PLL2_Config+0xd6>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	2b20      	cmp	r3, #32
 8006cf2:	d004      	beq.n	8006cfe <RCCEx_PLL2_Config+0xd6>
 8006cf4:	f640 4185 	movw	r1, #3205	; 0xc85
 8006cf8:	4859      	ldr	r0, [pc, #356]	; (8006e60 <RCCEx_PLL2_Config+0x238>)
 8006cfa:	f7f9 fff2 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d06:	d304      	bcc.n	8006d12 <RCCEx_PLL2_Config+0xea>
 8006d08:	f640 4186 	movw	r1, #3206	; 0xc86
 8006d0c:	4854      	ldr	r0, [pc, #336]	; (8006e60 <RCCEx_PLL2_Config+0x238>)
 8006d0e:	f7f9 ffe8 	bl	8000ce2 <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d12:	4b54      	ldr	r3, [pc, #336]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d16:	f003 0303 	and.w	r3, r3, #3
 8006d1a:	2b03      	cmp	r3, #3
 8006d1c:	d101      	bne.n	8006d22 <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e099      	b.n	8006e56 <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006d22:	4b50      	ldr	r3, [pc, #320]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a4f      	ldr	r2, [pc, #316]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006d28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d2e:	f7fa fc0b 	bl	8001548 <HAL_GetTick>
 8006d32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d34:	e008      	b.n	8006d48 <RCCEx_PLL2_Config+0x120>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006d36:	f7fa fc07 	bl	8001548 <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d901      	bls.n	8006d48 <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e086      	b.n	8006e56 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d48:	4b46      	ldr	r3, [pc, #280]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1f0      	bne.n	8006d36 <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006d54:	4b43      	ldr	r3, [pc, #268]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d58:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	031b      	lsls	r3, r3, #12
 8006d62:	4940      	ldr	r1, [pc, #256]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	628b      	str	r3, [r1, #40]	; 0x28
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	3b01      	subs	r3, #1
 8006d78:	025b      	lsls	r3, r3, #9
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	3b01      	subs	r3, #1
 8006d84:	041b      	lsls	r3, r3, #16
 8006d86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	3b01      	subs	r3, #1
 8006d92:	061b      	lsls	r3, r3, #24
 8006d94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d98:	4932      	ldr	r1, [pc, #200]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d9e:	4b31      	ldr	r3, [pc, #196]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	492e      	ldr	r1, [pc, #184]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006db0:	4b2c      	ldr	r3, [pc, #176]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db4:	f023 0220 	bic.w	r2, r3, #32
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	4929      	ldr	r1, [pc, #164]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006dc2:	4b28      	ldr	r3, [pc, #160]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc6:	4a27      	ldr	r2, [pc, #156]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006dc8:	f023 0310 	bic.w	r3, r3, #16
 8006dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006dce:	4b25      	ldr	r3, [pc, #148]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006dd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dd2:	4b25      	ldr	r3, [pc, #148]	; (8006e68 <RCCEx_PLL2_Config+0x240>)
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	69d2      	ldr	r2, [r2, #28]
 8006dda:	00d2      	lsls	r2, r2, #3
 8006ddc:	4921      	ldr	r1, [pc, #132]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006de2:	4b20      	ldr	r3, [pc, #128]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de6:	4a1f      	ldr	r2, [pc, #124]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006de8:	f043 0310 	orr.w	r3, r3, #16
 8006dec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d106      	bne.n	8006e02 <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006df4:	4b1b      	ldr	r3, [pc, #108]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	4a1a      	ldr	r2, [pc, #104]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006dfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006dfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e00:	e00f      	b.n	8006e22 <RCCEx_PLL2_Config+0x1fa>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d106      	bne.n	8006e16 <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e08:	4b16      	ldr	r3, [pc, #88]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0c:	4a15      	ldr	r2, [pc, #84]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006e0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e14:	e005      	b.n	8006e22 <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e16:	4b13      	ldr	r3, [pc, #76]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1a:	4a12      	ldr	r2, [pc, #72]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006e1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e20:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e22:	4b10      	ldr	r3, [pc, #64]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a0f      	ldr	r2, [pc, #60]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006e28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e2e:	f7fa fb8b 	bl	8001548 <HAL_GetTick>
 8006e32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e34:	e008      	b.n	8006e48 <RCCEx_PLL2_Config+0x220>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006e36:	f7fa fb87 	bl	8001548 <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d901      	bls.n	8006e48 <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e006      	b.n	8006e56 <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e48:	4b06      	ldr	r3, [pc, #24]	; (8006e64 <RCCEx_PLL2_Config+0x23c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d0f0      	beq.n	8006e36 <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	08018cac 	.word	0x08018cac
 8006e64:	58024400 	.word	0x58024400
 8006e68:	ffff0007 	.word	0xffff0007

08006e6c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d003      	beq.n	8006e8a <RCCEx_PLL3_Config+0x1e>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b3f      	cmp	r3, #63	; 0x3f
 8006e88:	d904      	bls.n	8006e94 <RCCEx_PLL3_Config+0x28>
 8006e8a:	f640 41e7 	movw	r1, #3303	; 0xce7
 8006e8e:	4887      	ldr	r0, [pc, #540]	; (80070ac <RCCEx_PLL3_Config+0x240>)
 8006e90:	f7f9 ff27 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	2b03      	cmp	r3, #3
 8006e9a:	d904      	bls.n	8006ea6 <RCCEx_PLL3_Config+0x3a>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ea4:	d904      	bls.n	8006eb0 <RCCEx_PLL3_Config+0x44>
 8006ea6:	f640 41e8 	movw	r1, #3304	; 0xce8
 8006eaa:	4880      	ldr	r0, [pc, #512]	; (80070ac <RCCEx_PLL3_Config+0x240>)
 8006eac:	f7f9 ff19 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <RCCEx_PLL3_Config+0x54>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	2b80      	cmp	r3, #128	; 0x80
 8006ebe:	d904      	bls.n	8006eca <RCCEx_PLL3_Config+0x5e>
 8006ec0:	f640 41e9 	movw	r1, #3305	; 0xce9
 8006ec4:	4879      	ldr	r0, [pc, #484]	; (80070ac <RCCEx_PLL3_Config+0x240>)
 8006ec6:	f7f9 ff0c 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d003      	beq.n	8006eda <RCCEx_PLL3_Config+0x6e>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	2b80      	cmp	r3, #128	; 0x80
 8006ed8:	d904      	bls.n	8006ee4 <RCCEx_PLL3_Config+0x78>
 8006eda:	f640 41ea 	movw	r1, #3306	; 0xcea
 8006ede:	4873      	ldr	r0, [pc, #460]	; (80070ac <RCCEx_PLL3_Config+0x240>)
 8006ee0:	f7f9 feff 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <RCCEx_PLL3_Config+0x88>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	2b80      	cmp	r3, #128	; 0x80
 8006ef2:	d904      	bls.n	8006efe <RCCEx_PLL3_Config+0x92>
 8006ef4:	f640 41eb 	movw	r1, #3307	; 0xceb
 8006ef8:	486c      	ldr	r0, [pc, #432]	; (80070ac <RCCEx_PLL3_Config+0x240>)
 8006efa:	f7f9 fef2 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d013      	beq.n	8006f2e <RCCEx_PLL3_Config+0xc2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f0e:	d00e      	beq.n	8006f2e <RCCEx_PLL3_Config+0xc2>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	695b      	ldr	r3, [r3, #20]
 8006f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f18:	d009      	beq.n	8006f2e <RCCEx_PLL3_Config+0xc2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f22:	d004      	beq.n	8006f2e <RCCEx_PLL3_Config+0xc2>
 8006f24:	f640 41ec 	movw	r1, #3308	; 0xcec
 8006f28:	4860      	ldr	r0, [pc, #384]	; (80070ac <RCCEx_PLL3_Config+0x240>)
 8006f2a:	f7f9 feda 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d009      	beq.n	8006f4a <RCCEx_PLL3_Config+0xde>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f3e:	d004      	beq.n	8006f4a <RCCEx_PLL3_Config+0xde>
 8006f40:	f640 41ed 	movw	r1, #3309	; 0xced
 8006f44:	4859      	ldr	r0, [pc, #356]	; (80070ac <RCCEx_PLL3_Config+0x240>)
 8006f46:	f7f9 fecc 	bl	8000ce2 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f52:	d304      	bcc.n	8006f5e <RCCEx_PLL3_Config+0xf2>
 8006f54:	f640 41ee 	movw	r1, #3310	; 0xcee
 8006f58:	4854      	ldr	r0, [pc, #336]	; (80070ac <RCCEx_PLL3_Config+0x240>)
 8006f5a:	f7f9 fec2 	bl	8000ce2 <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f5e:	4b54      	ldr	r3, [pc, #336]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 8006f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f62:	f003 0303 	and.w	r3, r3, #3
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d101      	bne.n	8006f6e <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e099      	b.n	80070a2 <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006f6e:	4b50      	ldr	r3, [pc, #320]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a4f      	ldr	r2, [pc, #316]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 8006f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f7a:	f7fa fae5 	bl	8001548 <HAL_GetTick>
 8006f7e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f80:	e008      	b.n	8006f94 <RCCEx_PLL3_Config+0x128>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006f82:	f7fa fae1 	bl	8001548 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d901      	bls.n	8006f94 <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e086      	b.n	80070a2 <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f94:	4b46      	ldr	r3, [pc, #280]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1f0      	bne.n	8006f82 <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006fa0:	4b43      	ldr	r3, [pc, #268]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	051b      	lsls	r3, r3, #20
 8006fae:	4940      	ldr	r1, [pc, #256]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	628b      	str	r3, [r1, #40]	; 0x28
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	025b      	lsls	r3, r3, #9
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	041b      	lsls	r3, r3, #16
 8006fd2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	061b      	lsls	r3, r3, #24
 8006fe0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006fe4:	4932      	ldr	r1, [pc, #200]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006fea:	4b31      	ldr	r3, [pc, #196]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 8006fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	492e      	ldr	r1, [pc, #184]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006ffc:	4b2c      	ldr	r3, [pc, #176]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	4929      	ldr	r1, [pc, #164]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 800700a:	4313      	orrs	r3, r2
 800700c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800700e:	4b28      	ldr	r3, [pc, #160]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 8007010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007012:	4a27      	ldr	r2, [pc, #156]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 8007014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007018:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800701a:	4b25      	ldr	r3, [pc, #148]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 800701c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800701e:	4b25      	ldr	r3, [pc, #148]	; (80070b4 <RCCEx_PLL3_Config+0x248>)
 8007020:	4013      	ands	r3, r2
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	69d2      	ldr	r2, [r2, #28]
 8007026:	00d2      	lsls	r2, r2, #3
 8007028:	4921      	ldr	r1, [pc, #132]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 800702a:	4313      	orrs	r3, r2
 800702c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800702e:	4b20      	ldr	r3, [pc, #128]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 8007030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007032:	4a1f      	ldr	r2, [pc, #124]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 8007034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007038:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d106      	bne.n	800704e <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007040:	4b1b      	ldr	r3, [pc, #108]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 8007042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007044:	4a1a      	ldr	r2, [pc, #104]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 8007046:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800704a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800704c:	e00f      	b.n	800706e <RCCEx_PLL3_Config+0x202>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	2b01      	cmp	r3, #1
 8007052:	d106      	bne.n	8007062 <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007054:	4b16      	ldr	r3, [pc, #88]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 8007056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007058:	4a15      	ldr	r2, [pc, #84]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 800705a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800705e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007060:	e005      	b.n	800706e <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007062:	4b13      	ldr	r3, [pc, #76]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 8007064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007066:	4a12      	ldr	r2, [pc, #72]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 8007068:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800706c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800706e:	4b10      	ldr	r3, [pc, #64]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a0f      	ldr	r2, [pc, #60]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 8007074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800707a:	f7fa fa65 	bl	8001548 <HAL_GetTick>
 800707e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007080:	e008      	b.n	8007094 <RCCEx_PLL3_Config+0x228>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007082:	f7fa fa61 	bl	8001548 <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	2b02      	cmp	r3, #2
 800708e:	d901      	bls.n	8007094 <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e006      	b.n	80070a2 <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007094:	4b06      	ldr	r3, [pc, #24]	; (80070b0 <RCCEx_PLL3_Config+0x244>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0f0      	beq.n	8007082 <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	08018cac 	.word	0x08018cac
 80070b0:	58024400 	.word	0x58024400
 80070b4:	ffff0007 	.word	0xffff0007

080070b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e0a1      	b.n	800720e <HAL_TIM_Base_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a52      	ldr	r2, [pc, #328]	; (8007218 <HAL_TIM_Base_Init+0x160>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d045      	beq.n	8007160 <HAL_TIM_Base_Init+0xa8>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070dc:	d040      	beq.n	8007160 <HAL_TIM_Base_Init+0xa8>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a4e      	ldr	r2, [pc, #312]	; (800721c <HAL_TIM_Base_Init+0x164>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d03b      	beq.n	8007160 <HAL_TIM_Base_Init+0xa8>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a4c      	ldr	r2, [pc, #304]	; (8007220 <HAL_TIM_Base_Init+0x168>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d036      	beq.n	8007160 <HAL_TIM_Base_Init+0xa8>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a4b      	ldr	r2, [pc, #300]	; (8007224 <HAL_TIM_Base_Init+0x16c>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d031      	beq.n	8007160 <HAL_TIM_Base_Init+0xa8>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a49      	ldr	r2, [pc, #292]	; (8007228 <HAL_TIM_Base_Init+0x170>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d02c      	beq.n	8007160 <HAL_TIM_Base_Init+0xa8>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a48      	ldr	r2, [pc, #288]	; (800722c <HAL_TIM_Base_Init+0x174>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d027      	beq.n	8007160 <HAL_TIM_Base_Init+0xa8>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a46      	ldr	r2, [pc, #280]	; (8007230 <HAL_TIM_Base_Init+0x178>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d022      	beq.n	8007160 <HAL_TIM_Base_Init+0xa8>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a45      	ldr	r2, [pc, #276]	; (8007234 <HAL_TIM_Base_Init+0x17c>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d01d      	beq.n	8007160 <HAL_TIM_Base_Init+0xa8>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a43      	ldr	r2, [pc, #268]	; (8007238 <HAL_TIM_Base_Init+0x180>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d018      	beq.n	8007160 <HAL_TIM_Base_Init+0xa8>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a42      	ldr	r2, [pc, #264]	; (800723c <HAL_TIM_Base_Init+0x184>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d013      	beq.n	8007160 <HAL_TIM_Base_Init+0xa8>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a40      	ldr	r2, [pc, #256]	; (8007240 <HAL_TIM_Base_Init+0x188>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d00e      	beq.n	8007160 <HAL_TIM_Base_Init+0xa8>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a3f      	ldr	r2, [pc, #252]	; (8007244 <HAL_TIM_Base_Init+0x18c>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d009      	beq.n	8007160 <HAL_TIM_Base_Init+0xa8>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a3d      	ldr	r2, [pc, #244]	; (8007248 <HAL_TIM_Base_Init+0x190>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d004      	beq.n	8007160 <HAL_TIM_Base_Init+0xa8>
 8007156:	f240 1115 	movw	r1, #277	; 0x115
 800715a:	483c      	ldr	r0, [pc, #240]	; (800724c <HAL_TIM_Base_Init+0x194>)
 800715c:	f7f9 fdc1 	bl	8000ce2 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d014      	beq.n	8007192 <HAL_TIM_Base_Init+0xda>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	2b10      	cmp	r3, #16
 800716e:	d010      	beq.n	8007192 <HAL_TIM_Base_Init+0xda>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	2b20      	cmp	r3, #32
 8007176:	d00c      	beq.n	8007192 <HAL_TIM_Base_Init+0xda>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	2b40      	cmp	r3, #64	; 0x40
 800717e:	d008      	beq.n	8007192 <HAL_TIM_Base_Init+0xda>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	2b60      	cmp	r3, #96	; 0x60
 8007186:	d004      	beq.n	8007192 <HAL_TIM_Base_Init+0xda>
 8007188:	f44f 718b 	mov.w	r1, #278	; 0x116
 800718c:	482f      	ldr	r0, [pc, #188]	; (800724c <HAL_TIM_Base_Init+0x194>)
 800718e:	f7f9 fda8 	bl	8000ce2 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00e      	beq.n	80071b8 <HAL_TIM_Base_Init+0x100>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071a2:	d009      	beq.n	80071b8 <HAL_TIM_Base_Init+0x100>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071ac:	d004      	beq.n	80071b8 <HAL_TIM_Base_Init+0x100>
 80071ae:	f240 1117 	movw	r1, #279	; 0x117
 80071b2:	4826      	ldr	r0, [pc, #152]	; (800724c <HAL_TIM_Base_Init+0x194>)
 80071b4:	f7f9 fd95 	bl	8000ce2 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d008      	beq.n	80071d2 <HAL_TIM_Base_Init+0x11a>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	2b80      	cmp	r3, #128	; 0x80
 80071c6:	d004      	beq.n	80071d2 <HAL_TIM_Base_Init+0x11a>
 80071c8:	f44f 718c 	mov.w	r1, #280	; 0x118
 80071cc:	481f      	ldr	r0, [pc, #124]	; (800724c <HAL_TIM_Base_Init+0x194>)
 80071ce:	f7f9 fd88 	bl	8000ce2 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d106      	bne.n	80071ec <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f832 	bl	8007250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3304      	adds	r3, #4
 80071fc:	4619      	mov	r1, r3
 80071fe:	4610      	mov	r0, r2
 8007200:	f000 fa08 	bl	8007614 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	40010000 	.word	0x40010000
 800721c:	40000400 	.word	0x40000400
 8007220:	40000800 	.word	0x40000800
 8007224:	40000c00 	.word	0x40000c00
 8007228:	40001000 	.word	0x40001000
 800722c:	40001400 	.word	0x40001400
 8007230:	40010400 	.word	0x40010400
 8007234:	40001800 	.word	0x40001800
 8007238:	40001c00 	.word	0x40001c00
 800723c:	40002000 	.word	0x40002000
 8007240:	40014000 	.word	0x40014000
 8007244:	40014400 	.word	0x40014400
 8007248:	40014800 	.word	0x40014800
 800724c:	08018ce8 	.word	0x08018ce8

08007250 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a35      	ldr	r2, [pc, #212]	; (8007348 <HAL_TIM_Base_Start_IT+0xe4>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d045      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x9e>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800727e:	d040      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x9e>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a31      	ldr	r2, [pc, #196]	; (800734c <HAL_TIM_Base_Start_IT+0xe8>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d03b      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x9e>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a30      	ldr	r2, [pc, #192]	; (8007350 <HAL_TIM_Base_Start_IT+0xec>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d036      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x9e>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a2e      	ldr	r2, [pc, #184]	; (8007354 <HAL_TIM_Base_Start_IT+0xf0>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d031      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x9e>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a2d      	ldr	r2, [pc, #180]	; (8007358 <HAL_TIM_Base_Start_IT+0xf4>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d02c      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x9e>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a2b      	ldr	r2, [pc, #172]	; (800735c <HAL_TIM_Base_Start_IT+0xf8>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d027      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x9e>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a2a      	ldr	r2, [pc, #168]	; (8007360 <HAL_TIM_Base_Start_IT+0xfc>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d022      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x9e>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a28      	ldr	r2, [pc, #160]	; (8007364 <HAL_TIM_Base_Start_IT+0x100>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d01d      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x9e>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a27      	ldr	r2, [pc, #156]	; (8007368 <HAL_TIM_Base_Start_IT+0x104>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d018      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x9e>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a25      	ldr	r2, [pc, #148]	; (800736c <HAL_TIM_Base_Start_IT+0x108>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d013      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x9e>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a24      	ldr	r2, [pc, #144]	; (8007370 <HAL_TIM_Base_Start_IT+0x10c>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d00e      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x9e>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a22      	ldr	r2, [pc, #136]	; (8007374 <HAL_TIM_Base_Start_IT+0x110>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d009      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x9e>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a21      	ldr	r2, [pc, #132]	; (8007378 <HAL_TIM_Base_Start_IT+0x114>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d004      	beq.n	8007302 <HAL_TIM_Base_Start_IT+0x9e>
 80072f8:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80072fc:	481f      	ldr	r0, [pc, #124]	; (800737c <HAL_TIM_Base_Start_IT+0x118>)
 80072fe:	f7f9 fcf0 	bl	8000ce2 <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68da      	ldr	r2, [r3, #12]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f042 0201 	orr.w	r2, r2, #1
 8007310:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	4b19      	ldr	r3, [pc, #100]	; (8007380 <HAL_TIM_Base_Start_IT+0x11c>)
 800731a:	4013      	ands	r3, r2
 800731c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2b06      	cmp	r3, #6
 8007322:	d00b      	beq.n	800733c <HAL_TIM_Base_Start_IT+0xd8>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800732a:	d007      	beq.n	800733c <HAL_TIM_Base_Start_IT+0xd8>
  {
    __HAL_TIM_ENABLE(htim);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f042 0201 	orr.w	r2, r2, #1
 800733a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	40010000 	.word	0x40010000
 800734c:	40000400 	.word	0x40000400
 8007350:	40000800 	.word	0x40000800
 8007354:	40000c00 	.word	0x40000c00
 8007358:	40001000 	.word	0x40001000
 800735c:	40001400 	.word	0x40001400
 8007360:	40010400 	.word	0x40010400
 8007364:	40001800 	.word	0x40001800
 8007368:	40001c00 	.word	0x40001c00
 800736c:	40002000 	.word	0x40002000
 8007370:	40014000 	.word	0x40014000
 8007374:	40014400 	.word	0x40014400
 8007378:	40014800 	.word	0x40014800
 800737c:	08018ce8 	.word	0x08018ce8
 8007380:	00010007 	.word	0x00010007

08007384 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	f003 0302 	and.w	r3, r3, #2
 8007396:	2b02      	cmp	r3, #2
 8007398:	d122      	bne.n	80073e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d11b      	bne.n	80073e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f06f 0202 	mvn.w	r2, #2
 80073b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	f003 0303 	and.w	r3, r3, #3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f905 	bl	80075d6 <HAL_TIM_IC_CaptureCallback>
 80073cc:	e005      	b.n	80073da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f8f7 	bl	80075c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f908 	bl	80075ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	f003 0304 	and.w	r3, r3, #4
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	d122      	bne.n	8007434 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b04      	cmp	r3, #4
 80073fa:	d11b      	bne.n	8007434 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f06f 0204 	mvn.w	r2, #4
 8007404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2202      	movs	r2, #2
 800740a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f8db 	bl	80075d6 <HAL_TIM_IC_CaptureCallback>
 8007420:	e005      	b.n	800742e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f8cd 	bl	80075c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f8de 	bl	80075ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f003 0308 	and.w	r3, r3, #8
 800743e:	2b08      	cmp	r3, #8
 8007440:	d122      	bne.n	8007488 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f003 0308 	and.w	r3, r3, #8
 800744c:	2b08      	cmp	r3, #8
 800744e:	d11b      	bne.n	8007488 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f06f 0208 	mvn.w	r2, #8
 8007458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2204      	movs	r2, #4
 800745e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	f003 0303 	and.w	r3, r3, #3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d003      	beq.n	8007476 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f8b1 	bl	80075d6 <HAL_TIM_IC_CaptureCallback>
 8007474:	e005      	b.n	8007482 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f8a3 	bl	80075c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f8b4 	bl	80075ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	f003 0310 	and.w	r3, r3, #16
 8007492:	2b10      	cmp	r3, #16
 8007494:	d122      	bne.n	80074dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	f003 0310 	and.w	r3, r3, #16
 80074a0:	2b10      	cmp	r3, #16
 80074a2:	d11b      	bne.n	80074dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f06f 0210 	mvn.w	r2, #16
 80074ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2208      	movs	r2, #8
 80074b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f887 	bl	80075d6 <HAL_TIM_IC_CaptureCallback>
 80074c8:	e005      	b.n	80074d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f879 	bl	80075c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f88a 	bl	80075ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d10e      	bne.n	8007508 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d107      	bne.n	8007508 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f06f 0201 	mvn.w	r2, #1
 8007500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7f9 fbd4 	bl	8000cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007512:	2b80      	cmp	r3, #128	; 0x80
 8007514:	d10e      	bne.n	8007534 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007520:	2b80      	cmp	r3, #128	; 0x80
 8007522:	d107      	bne.n	8007534 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800752c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f914 	bl	800775c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800753e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007542:	d10e      	bne.n	8007562 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800754e:	2b80      	cmp	r3, #128	; 0x80
 8007550:	d107      	bne.n	8007562 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800755a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f907 	bl	8007770 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756c:	2b40      	cmp	r3, #64	; 0x40
 800756e:	d10e      	bne.n	800758e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757a:	2b40      	cmp	r3, #64	; 0x40
 800757c:	d107      	bne.n	800758e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f838 	bl	80075fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	f003 0320 	and.w	r3, r3, #32
 8007598:	2b20      	cmp	r3, #32
 800759a:	d10e      	bne.n	80075ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	f003 0320 	and.w	r3, r3, #32
 80075a6:	2b20      	cmp	r3, #32
 80075a8:	d107      	bne.n	80075ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f06f 0220 	mvn.w	r2, #32
 80075b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f8c7 	bl	8007748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075ba:	bf00      	nop
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b083      	sub	sp, #12
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075ca:	bf00      	nop
 80075cc:	370c      	adds	r7, #12
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80075de:	bf00      	nop
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b083      	sub	sp, #12
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075f2:	bf00      	nop
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075fe:	b480      	push	{r7}
 8007600:	b083      	sub	sp, #12
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007606:	bf00      	nop
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
	...

08007614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a40      	ldr	r2, [pc, #256]	; (8007728 <TIM_Base_SetConfig+0x114>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d013      	beq.n	8007654 <TIM_Base_SetConfig+0x40>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007632:	d00f      	beq.n	8007654 <TIM_Base_SetConfig+0x40>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a3d      	ldr	r2, [pc, #244]	; (800772c <TIM_Base_SetConfig+0x118>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d00b      	beq.n	8007654 <TIM_Base_SetConfig+0x40>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a3c      	ldr	r2, [pc, #240]	; (8007730 <TIM_Base_SetConfig+0x11c>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d007      	beq.n	8007654 <TIM_Base_SetConfig+0x40>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a3b      	ldr	r2, [pc, #236]	; (8007734 <TIM_Base_SetConfig+0x120>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d003      	beq.n	8007654 <TIM_Base_SetConfig+0x40>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a3a      	ldr	r2, [pc, #232]	; (8007738 <TIM_Base_SetConfig+0x124>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d108      	bne.n	8007666 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800765a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a2f      	ldr	r2, [pc, #188]	; (8007728 <TIM_Base_SetConfig+0x114>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d01f      	beq.n	80076ae <TIM_Base_SetConfig+0x9a>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007674:	d01b      	beq.n	80076ae <TIM_Base_SetConfig+0x9a>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a2c      	ldr	r2, [pc, #176]	; (800772c <TIM_Base_SetConfig+0x118>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d017      	beq.n	80076ae <TIM_Base_SetConfig+0x9a>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a2b      	ldr	r2, [pc, #172]	; (8007730 <TIM_Base_SetConfig+0x11c>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d013      	beq.n	80076ae <TIM_Base_SetConfig+0x9a>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a2a      	ldr	r2, [pc, #168]	; (8007734 <TIM_Base_SetConfig+0x120>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d00f      	beq.n	80076ae <TIM_Base_SetConfig+0x9a>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a29      	ldr	r2, [pc, #164]	; (8007738 <TIM_Base_SetConfig+0x124>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d00b      	beq.n	80076ae <TIM_Base_SetConfig+0x9a>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a28      	ldr	r2, [pc, #160]	; (800773c <TIM_Base_SetConfig+0x128>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d007      	beq.n	80076ae <TIM_Base_SetConfig+0x9a>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a27      	ldr	r2, [pc, #156]	; (8007740 <TIM_Base_SetConfig+0x12c>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d003      	beq.n	80076ae <TIM_Base_SetConfig+0x9a>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a26      	ldr	r2, [pc, #152]	; (8007744 <TIM_Base_SetConfig+0x130>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d108      	bne.n	80076c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	4313      	orrs	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	689a      	ldr	r2, [r3, #8]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a10      	ldr	r2, [pc, #64]	; (8007728 <TIM_Base_SetConfig+0x114>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d00f      	beq.n	800770c <TIM_Base_SetConfig+0xf8>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a12      	ldr	r2, [pc, #72]	; (8007738 <TIM_Base_SetConfig+0x124>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d00b      	beq.n	800770c <TIM_Base_SetConfig+0xf8>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a11      	ldr	r2, [pc, #68]	; (800773c <TIM_Base_SetConfig+0x128>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d007      	beq.n	800770c <TIM_Base_SetConfig+0xf8>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a10      	ldr	r2, [pc, #64]	; (8007740 <TIM_Base_SetConfig+0x12c>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d003      	beq.n	800770c <TIM_Base_SetConfig+0xf8>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a0f      	ldr	r2, [pc, #60]	; (8007744 <TIM_Base_SetConfig+0x130>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d103      	bne.n	8007714 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	691a      	ldr	r2, [r3, #16]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	615a      	str	r2, [r3, #20]
}
 800771a:	bf00      	nop
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	40010000 	.word	0x40010000
 800772c:	40000400 	.word	0x40000400
 8007730:	40000800 	.word	0x40000800
 8007734:	40000c00 	.word	0x40000c00
 8007738:	40010400 	.word	0x40010400
 800773c:	40014000 	.word	0x40014000
 8007740:	40014400 	.word	0x40014400
 8007744:	40014800 	.word	0x40014800

08007748 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e0ab      	b.n	80078ee <HAL_UART_Init+0x16a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d032      	beq.n	8007804 <HAL_UART_Init+0x80>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a55      	ldr	r2, [pc, #340]	; (80078f8 <HAL_UART_Init+0x174>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d05f      	beq.n	8007868 <HAL_UART_Init+0xe4>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a53      	ldr	r2, [pc, #332]	; (80078fc <HAL_UART_Init+0x178>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d05a      	beq.n	8007868 <HAL_UART_Init+0xe4>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a52      	ldr	r2, [pc, #328]	; (8007900 <HAL_UART_Init+0x17c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d055      	beq.n	8007868 <HAL_UART_Init+0xe4>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a50      	ldr	r2, [pc, #320]	; (8007904 <HAL_UART_Init+0x180>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d050      	beq.n	8007868 <HAL_UART_Init+0xe4>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a4f      	ldr	r2, [pc, #316]	; (8007908 <HAL_UART_Init+0x184>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d04b      	beq.n	8007868 <HAL_UART_Init+0xe4>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a4d      	ldr	r2, [pc, #308]	; (800790c <HAL_UART_Init+0x188>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d046      	beq.n	8007868 <HAL_UART_Init+0xe4>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a4c      	ldr	r2, [pc, #304]	; (8007910 <HAL_UART_Init+0x18c>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d041      	beq.n	8007868 <HAL_UART_Init+0xe4>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a4a      	ldr	r2, [pc, #296]	; (8007914 <HAL_UART_Init+0x190>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d03c      	beq.n	8007868 <HAL_UART_Init+0xe4>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a49      	ldr	r2, [pc, #292]	; (8007918 <HAL_UART_Init+0x194>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d037      	beq.n	8007868 <HAL_UART_Init+0xe4>
 80077f8:	f44f 7199 	mov.w	r1, #306	; 0x132
 80077fc:	4847      	ldr	r0, [pc, #284]	; (800791c <HAL_UART_Init+0x198>)
 80077fe:	f7f9 fa70 	bl	8000ce2 <assert_failed>
 8007802:	e031      	b.n	8007868 <HAL_UART_Init+0xe4>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a3b      	ldr	r2, [pc, #236]	; (80078f8 <HAL_UART_Init+0x174>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d02c      	beq.n	8007868 <HAL_UART_Init+0xe4>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a3a      	ldr	r2, [pc, #232]	; (80078fc <HAL_UART_Init+0x178>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d027      	beq.n	8007868 <HAL_UART_Init+0xe4>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a38      	ldr	r2, [pc, #224]	; (8007900 <HAL_UART_Init+0x17c>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d022      	beq.n	8007868 <HAL_UART_Init+0xe4>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a37      	ldr	r2, [pc, #220]	; (8007904 <HAL_UART_Init+0x180>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d01d      	beq.n	8007868 <HAL_UART_Init+0xe4>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a35      	ldr	r2, [pc, #212]	; (8007908 <HAL_UART_Init+0x184>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d018      	beq.n	8007868 <HAL_UART_Init+0xe4>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a34      	ldr	r2, [pc, #208]	; (800790c <HAL_UART_Init+0x188>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d013      	beq.n	8007868 <HAL_UART_Init+0xe4>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a32      	ldr	r2, [pc, #200]	; (8007910 <HAL_UART_Init+0x18c>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d00e      	beq.n	8007868 <HAL_UART_Init+0xe4>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a31      	ldr	r2, [pc, #196]	; (8007914 <HAL_UART_Init+0x190>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d009      	beq.n	8007868 <HAL_UART_Init+0xe4>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a2f      	ldr	r2, [pc, #188]	; (8007918 <HAL_UART_Init+0x194>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d004      	beq.n	8007868 <HAL_UART_Init+0xe4>
 800785e:	f240 1137 	movw	r1, #311	; 0x137
 8007862:	482e      	ldr	r0, [pc, #184]	; (800791c <HAL_UART_Init+0x198>)
 8007864:	f7f9 fa3d 	bl	8000ce2 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800786e:	2b00      	cmp	r3, #0
 8007870:	d106      	bne.n	8007880 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7f9 fc40 	bl	8001100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2224      	movs	r2, #36	; 0x24
 8007884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f022 0201 	bic.w	r2, r2, #1
 8007896:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f841 	bl	8007920 <UART_SetConfig>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <HAL_UART_Init+0x124>
  {
    return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e022      	b.n	80078ee <HAL_UART_Init+0x16a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <HAL_UART_Init+0x132>
  {
    UART_AdvFeatureConfig(huart);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f002 fa93 	bl	8009ddc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689a      	ldr	r2, [r3, #8]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f042 0201 	orr.w	r2, r2, #1
 80078e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f002 fbee 	bl	800a0c8 <UART_CheckIdleState>
 80078ec:	4603      	mov	r3, r0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	40011000 	.word	0x40011000
 80078fc:	40004400 	.word	0x40004400
 8007900:	40004800 	.word	0x40004800
 8007904:	40004c00 	.word	0x40004c00
 8007908:	40005000 	.word	0x40005000
 800790c:	40011400 	.word	0x40011400
 8007910:	40007800 	.word	0x40007800
 8007914:	40007c00 	.word	0x40007c00
 8007918:	58000c00 	.word	0x58000c00
 800791c:	08018d20 	.word	0x08018d20

08007920 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007920:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007924:	b090      	sub	sp, #64	; 0x40
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800792a:	2300      	movs	r3, #0
 800792c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007934:	2300      	movs	r3, #0
 8007936:	62fb      	str	r3, [r7, #44]	; 0x2c
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	4a17      	ldr	r2, [pc, #92]	; (800799c <UART_SetConfig+0x7c>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d904      	bls.n	800794c <UART_SetConfig+0x2c>
 8007942:	f640 3134 	movw	r1, #2868	; 0xb34
 8007946:	4816      	ldr	r0, [pc, #88]	; (80079a0 <UART_SetConfig+0x80>)
 8007948:	f7f9 f9cb 	bl	8000ce2 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007954:	d00d      	beq.n	8007972 <UART_SetConfig+0x52>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d009      	beq.n	8007972 <UART_SetConfig+0x52>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007966:	d004      	beq.n	8007972 <UART_SetConfig+0x52>
 8007968:	f640 3135 	movw	r1, #2869	; 0xb35
 800796c:	480c      	ldr	r0, [pc, #48]	; (80079a0 <UART_SetConfig+0x80>)
 800796e:	f7f9 f9b8 	bl	8000ce2 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a0b      	ldr	r2, [pc, #44]	; (80079a4 <UART_SetConfig+0x84>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d115      	bne.n	80079a8 <UART_SetConfig+0x88>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d037      	beq.n	80079f4 <UART_SetConfig+0xd4>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800798c:	d032      	beq.n	80079f4 <UART_SetConfig+0xd4>
 800798e:	f640 3138 	movw	r1, #2872	; 0xb38
 8007992:	4803      	ldr	r0, [pc, #12]	; (80079a0 <UART_SetConfig+0x80>)
 8007994:	f7f9 f9a5 	bl	8000ce2 <assert_failed>
 8007998:	e02c      	b.n	80079f4 <UART_SetConfig+0xd4>
 800799a:	bf00      	nop
 800799c:	00bebc20 	.word	0x00bebc20
 80079a0:	08018d20 	.word	0x08018d20
 80079a4:	58000c00 	.word	0x58000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079b0:	d012      	beq.n	80079d8 <UART_SetConfig+0xb8>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00e      	beq.n	80079d8 <UART_SetConfig+0xb8>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80079c2:	d009      	beq.n	80079d8 <UART_SetConfig+0xb8>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079cc:	d004      	beq.n	80079d8 <UART_SetConfig+0xb8>
 80079ce:	f640 313c 	movw	r1, #2876	; 0xb3c
 80079d2:	48aa      	ldr	r0, [pc, #680]	; (8007c7c <UART_SetConfig+0x35c>)
 80079d4:	f7f9 f985 	bl	8000ce2 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d009      	beq.n	80079f4 <UART_SetConfig+0xd4>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a1b      	ldr	r3, [r3, #32]
 80079e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079e8:	d004      	beq.n	80079f4 <UART_SetConfig+0xd4>
 80079ea:	f640 313d 	movw	r1, #2877	; 0xb3d
 80079ee:	48a3      	ldr	r0, [pc, #652]	; (8007c7c <UART_SetConfig+0x35c>)
 80079f0:	f7f9 f977 	bl	8000ce2 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00e      	beq.n	8007a1a <UART_SetConfig+0xfa>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a04:	d009      	beq.n	8007a1a <UART_SetConfig+0xfa>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007a0e:	d004      	beq.n	8007a1a <UART_SetConfig+0xfa>
 8007a10:	f44f 6134 	mov.w	r1, #2880	; 0xb40
 8007a14:	4899      	ldr	r0, [pc, #612]	; (8007c7c <UART_SetConfig+0x35c>)
 8007a16:	f7f9 f964 	bl	8000ce2 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	f023 030c 	bic.w	r3, r3, #12
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d103      	bne.n	8007a2e <UART_SetConfig+0x10e>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d104      	bne.n	8007a38 <UART_SetConfig+0x118>
 8007a2e:	f640 3141 	movw	r1, #2881	; 0xb41
 8007a32:	4892      	ldr	r0, [pc, #584]	; (8007c7c <UART_SetConfig+0x35c>)
 8007a34:	f7f9 f955 	bl	8000ce2 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d013      	beq.n	8007a68 <UART_SetConfig+0x148>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a48:	d00e      	beq.n	8007a68 <UART_SetConfig+0x148>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a52:	d009      	beq.n	8007a68 <UART_SetConfig+0x148>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a5c:	d004      	beq.n	8007a68 <UART_SetConfig+0x148>
 8007a5e:	f640 3142 	movw	r1, #2882	; 0xb42
 8007a62:	4886      	ldr	r0, [pc, #536]	; (8007c7c <UART_SetConfig+0x35c>)
 8007a64:	f7f9 f93d 	bl	8000ce2 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	69db      	ldr	r3, [r3, #28]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d009      	beq.n	8007a84 <UART_SetConfig+0x164>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	69db      	ldr	r3, [r3, #28]
 8007a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a78:	d004      	beq.n	8007a84 <UART_SetConfig+0x164>
 8007a7a:	f640 3143 	movw	r1, #2883	; 0xb43
 8007a7e:	487f      	ldr	r0, [pc, #508]	; (8007c7c <UART_SetConfig+0x35c>)
 8007a80:	f7f9 f92f 	bl	8000ce2 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d030      	beq.n	8007aee <UART_SetConfig+0x1ce>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d02c      	beq.n	8007aee <UART_SetConfig+0x1ce>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d028      	beq.n	8007aee <UART_SetConfig+0x1ce>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d024      	beq.n	8007aee <UART_SetConfig+0x1ce>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa8:	2b04      	cmp	r3, #4
 8007aaa:	d020      	beq.n	8007aee <UART_SetConfig+0x1ce>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab0:	2b05      	cmp	r3, #5
 8007ab2:	d01c      	beq.n	8007aee <UART_SetConfig+0x1ce>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	2b06      	cmp	r3, #6
 8007aba:	d018      	beq.n	8007aee <UART_SetConfig+0x1ce>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	2b07      	cmp	r3, #7
 8007ac2:	d014      	beq.n	8007aee <UART_SetConfig+0x1ce>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	2b08      	cmp	r3, #8
 8007aca:	d010      	beq.n	8007aee <UART_SetConfig+0x1ce>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad0:	2b09      	cmp	r3, #9
 8007ad2:	d00c      	beq.n	8007aee <UART_SetConfig+0x1ce>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad8:	2b0a      	cmp	r3, #10
 8007ada:	d008      	beq.n	8007aee <UART_SetConfig+0x1ce>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae0:	2b0b      	cmp	r3, #11
 8007ae2:	d004      	beq.n	8007aee <UART_SetConfig+0x1ce>
 8007ae4:	f640 3144 	movw	r1, #2884	; 0xb44
 8007ae8:	4864      	ldr	r0, [pc, #400]	; (8007c7c <UART_SetConfig+0x35c>)
 8007aea:	f7f9 f8fa 	bl	8000ce2 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	689a      	ldr	r2, [r3, #8]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	431a      	orrs	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	431a      	orrs	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	4b5a      	ldr	r3, [pc, #360]	; (8007c80 <UART_SetConfig+0x360>)
 8007b18:	4013      	ands	r3, r2
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	6812      	ldr	r2, [r2, #0]
 8007b1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b20:	430b      	orrs	r3, r1
 8007b22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a4f      	ldr	r2, [pc, #316]	; (8007c84 <UART_SetConfig+0x364>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d004      	beq.n	8007b54 <UART_SetConfig+0x234>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b50:	4313      	orrs	r3, r2
 8007b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	689a      	ldr	r2, [r3, #8]
 8007b5a:	4b4b      	ldr	r3, [pc, #300]	; (8007c88 <UART_SetConfig+0x368>)
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	6812      	ldr	r2, [r2, #0]
 8007b62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b64:	430b      	orrs	r3, r1
 8007b66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6e:	f023 010f 	bic.w	r1, r3, #15
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a42      	ldr	r2, [pc, #264]	; (8007c8c <UART_SetConfig+0x36c>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	f040 8085 	bne.w	8007c94 <UART_SetConfig+0x374>
 8007b8a:	4b41      	ldr	r3, [pc, #260]	; (8007c90 <UART_SetConfig+0x370>)
 8007b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b92:	2b28      	cmp	r3, #40	; 0x28
 8007b94:	d86c      	bhi.n	8007c70 <UART_SetConfig+0x350>
 8007b96:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <UART_SetConfig+0x27c>)
 8007b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9c:	08007c41 	.word	0x08007c41
 8007ba0:	08007c71 	.word	0x08007c71
 8007ba4:	08007c71 	.word	0x08007c71
 8007ba8:	08007c71 	.word	0x08007c71
 8007bac:	08007c71 	.word	0x08007c71
 8007bb0:	08007c71 	.word	0x08007c71
 8007bb4:	08007c71 	.word	0x08007c71
 8007bb8:	08007c71 	.word	0x08007c71
 8007bbc:	08007c49 	.word	0x08007c49
 8007bc0:	08007c71 	.word	0x08007c71
 8007bc4:	08007c71 	.word	0x08007c71
 8007bc8:	08007c71 	.word	0x08007c71
 8007bcc:	08007c71 	.word	0x08007c71
 8007bd0:	08007c71 	.word	0x08007c71
 8007bd4:	08007c71 	.word	0x08007c71
 8007bd8:	08007c71 	.word	0x08007c71
 8007bdc:	08007c51 	.word	0x08007c51
 8007be0:	08007c71 	.word	0x08007c71
 8007be4:	08007c71 	.word	0x08007c71
 8007be8:	08007c71 	.word	0x08007c71
 8007bec:	08007c71 	.word	0x08007c71
 8007bf0:	08007c71 	.word	0x08007c71
 8007bf4:	08007c71 	.word	0x08007c71
 8007bf8:	08007c71 	.word	0x08007c71
 8007bfc:	08007c59 	.word	0x08007c59
 8007c00:	08007c71 	.word	0x08007c71
 8007c04:	08007c71 	.word	0x08007c71
 8007c08:	08007c71 	.word	0x08007c71
 8007c0c:	08007c71 	.word	0x08007c71
 8007c10:	08007c71 	.word	0x08007c71
 8007c14:	08007c71 	.word	0x08007c71
 8007c18:	08007c71 	.word	0x08007c71
 8007c1c:	08007c61 	.word	0x08007c61
 8007c20:	08007c71 	.word	0x08007c71
 8007c24:	08007c71 	.word	0x08007c71
 8007c28:	08007c71 	.word	0x08007c71
 8007c2c:	08007c71 	.word	0x08007c71
 8007c30:	08007c71 	.word	0x08007c71
 8007c34:	08007c71 	.word	0x08007c71
 8007c38:	08007c71 	.word	0x08007c71
 8007c3c:	08007c69 	.word	0x08007c69
 8007c40:	2301      	movs	r3, #1
 8007c42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c46:	e23b      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007c48:	2304      	movs	r3, #4
 8007c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c4e:	e237      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007c50:	2308      	movs	r3, #8
 8007c52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c56:	e233      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007c58:	2310      	movs	r3, #16
 8007c5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c5e:	e22f      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007c60:	2320      	movs	r3, #32
 8007c62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c66:	e22b      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007c68:	2340      	movs	r3, #64	; 0x40
 8007c6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c6e:	e227      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007c70:	2380      	movs	r3, #128	; 0x80
 8007c72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c76:	bf00      	nop
 8007c78:	e222      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007c7a:	bf00      	nop
 8007c7c:	08018d20 	.word	0x08018d20
 8007c80:	cfff69f3 	.word	0xcfff69f3
 8007c84:	58000c00 	.word	0x58000c00
 8007c88:	11fff4ff 	.word	0x11fff4ff
 8007c8c:	40011000 	.word	0x40011000
 8007c90:	58024400 	.word	0x58024400
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4ac9      	ldr	r2, [pc, #804]	; (8007fc0 <UART_SetConfig+0x6a0>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d131      	bne.n	8007d02 <UART_SetConfig+0x3e2>
 8007c9e:	4bc9      	ldr	r3, [pc, #804]	; (8007fc4 <UART_SetConfig+0x6a4>)
 8007ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca2:	f003 0307 	and.w	r3, r3, #7
 8007ca6:	2b05      	cmp	r3, #5
 8007ca8:	d826      	bhi.n	8007cf8 <UART_SetConfig+0x3d8>
 8007caa:	a201      	add	r2, pc, #4	; (adr r2, 8007cb0 <UART_SetConfig+0x390>)
 8007cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb0:	08007cc9 	.word	0x08007cc9
 8007cb4:	08007cd1 	.word	0x08007cd1
 8007cb8:	08007cd9 	.word	0x08007cd9
 8007cbc:	08007ce1 	.word	0x08007ce1
 8007cc0:	08007ce9 	.word	0x08007ce9
 8007cc4:	08007cf1 	.word	0x08007cf1
 8007cc8:	2300      	movs	r3, #0
 8007cca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cce:	e1f7      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007cd0:	2304      	movs	r3, #4
 8007cd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cd6:	e1f3      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007cd8:	2308      	movs	r3, #8
 8007cda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cde:	e1ef      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007ce0:	2310      	movs	r3, #16
 8007ce2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ce6:	e1eb      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007ce8:	2320      	movs	r3, #32
 8007cea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cee:	e1e7      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007cf0:	2340      	movs	r3, #64	; 0x40
 8007cf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cf6:	e1e3      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007cf8:	2380      	movs	r3, #128	; 0x80
 8007cfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cfe:	bf00      	nop
 8007d00:	e1de      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4ab0      	ldr	r2, [pc, #704]	; (8007fc8 <UART_SetConfig+0x6a8>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d132      	bne.n	8007d72 <UART_SetConfig+0x452>
 8007d0c:	4bad      	ldr	r3, [pc, #692]	; (8007fc4 <UART_SetConfig+0x6a4>)
 8007d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d10:	f003 0307 	and.w	r3, r3, #7
 8007d14:	2b05      	cmp	r3, #5
 8007d16:	d827      	bhi.n	8007d68 <UART_SetConfig+0x448>
 8007d18:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <UART_SetConfig+0x400>)
 8007d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1e:	bf00      	nop
 8007d20:	08007d39 	.word	0x08007d39
 8007d24:	08007d41 	.word	0x08007d41
 8007d28:	08007d49 	.word	0x08007d49
 8007d2c:	08007d51 	.word	0x08007d51
 8007d30:	08007d59 	.word	0x08007d59
 8007d34:	08007d61 	.word	0x08007d61
 8007d38:	2300      	movs	r3, #0
 8007d3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d3e:	e1bf      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007d40:	2304      	movs	r3, #4
 8007d42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d46:	e1bb      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007d48:	2308      	movs	r3, #8
 8007d4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d4e:	e1b7      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007d50:	2310      	movs	r3, #16
 8007d52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d56:	e1b3      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007d58:	2320      	movs	r3, #32
 8007d5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d5e:	e1af      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007d60:	2340      	movs	r3, #64	; 0x40
 8007d62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d66:	e1ab      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007d68:	2380      	movs	r3, #128	; 0x80
 8007d6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d6e:	bf00      	nop
 8007d70:	e1a6      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a95      	ldr	r2, [pc, #596]	; (8007fcc <UART_SetConfig+0x6ac>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d132      	bne.n	8007de2 <UART_SetConfig+0x4c2>
 8007d7c:	4b91      	ldr	r3, [pc, #580]	; (8007fc4 <UART_SetConfig+0x6a4>)
 8007d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d80:	f003 0307 	and.w	r3, r3, #7
 8007d84:	2b05      	cmp	r3, #5
 8007d86:	d827      	bhi.n	8007dd8 <UART_SetConfig+0x4b8>
 8007d88:	a201      	add	r2, pc, #4	; (adr r2, 8007d90 <UART_SetConfig+0x470>)
 8007d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8e:	bf00      	nop
 8007d90:	08007da9 	.word	0x08007da9
 8007d94:	08007db1 	.word	0x08007db1
 8007d98:	08007db9 	.word	0x08007db9
 8007d9c:	08007dc1 	.word	0x08007dc1
 8007da0:	08007dc9 	.word	0x08007dc9
 8007da4:	08007dd1 	.word	0x08007dd1
 8007da8:	2300      	movs	r3, #0
 8007daa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dae:	e187      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007db0:	2304      	movs	r3, #4
 8007db2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007db6:	e183      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007db8:	2308      	movs	r3, #8
 8007dba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dbe:	e17f      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007dc0:	2310      	movs	r3, #16
 8007dc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dc6:	e17b      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007dc8:	2320      	movs	r3, #32
 8007dca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dce:	e177      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007dd0:	2340      	movs	r3, #64	; 0x40
 8007dd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dd6:	e173      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007dd8:	2380      	movs	r3, #128	; 0x80
 8007dda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007dde:	bf00      	nop
 8007de0:	e16e      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a7a      	ldr	r2, [pc, #488]	; (8007fd0 <UART_SetConfig+0x6b0>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d132      	bne.n	8007e52 <UART_SetConfig+0x532>
 8007dec:	4b75      	ldr	r3, [pc, #468]	; (8007fc4 <UART_SetConfig+0x6a4>)
 8007dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df0:	f003 0307 	and.w	r3, r3, #7
 8007df4:	2b05      	cmp	r3, #5
 8007df6:	d827      	bhi.n	8007e48 <UART_SetConfig+0x528>
 8007df8:	a201      	add	r2, pc, #4	; (adr r2, 8007e00 <UART_SetConfig+0x4e0>)
 8007dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfe:	bf00      	nop
 8007e00:	08007e19 	.word	0x08007e19
 8007e04:	08007e21 	.word	0x08007e21
 8007e08:	08007e29 	.word	0x08007e29
 8007e0c:	08007e31 	.word	0x08007e31
 8007e10:	08007e39 	.word	0x08007e39
 8007e14:	08007e41 	.word	0x08007e41
 8007e18:	2300      	movs	r3, #0
 8007e1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007e1e:	e14f      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007e20:	2304      	movs	r3, #4
 8007e22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007e26:	e14b      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007e28:	2308      	movs	r3, #8
 8007e2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007e2e:	e147      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007e30:	2310      	movs	r3, #16
 8007e32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007e36:	e143      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007e38:	2320      	movs	r3, #32
 8007e3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007e3e:	e13f      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007e40:	2340      	movs	r3, #64	; 0x40
 8007e42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007e46:	e13b      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007e48:	2380      	movs	r3, #128	; 0x80
 8007e4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007e4e:	bf00      	nop
 8007e50:	e136      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a5f      	ldr	r2, [pc, #380]	; (8007fd4 <UART_SetConfig+0x6b4>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d178      	bne.n	8007f4e <UART_SetConfig+0x62e>
 8007e5c:	4b59      	ldr	r3, [pc, #356]	; (8007fc4 <UART_SetConfig+0x6a4>)
 8007e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e64:	2b28      	cmp	r3, #40	; 0x28
 8007e66:	d86d      	bhi.n	8007f44 <UART_SetConfig+0x624>
 8007e68:	a201      	add	r2, pc, #4	; (adr r2, 8007e70 <UART_SetConfig+0x550>)
 8007e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6e:	bf00      	nop
 8007e70:	08007f15 	.word	0x08007f15
 8007e74:	08007f45 	.word	0x08007f45
 8007e78:	08007f45 	.word	0x08007f45
 8007e7c:	08007f45 	.word	0x08007f45
 8007e80:	08007f45 	.word	0x08007f45
 8007e84:	08007f45 	.word	0x08007f45
 8007e88:	08007f45 	.word	0x08007f45
 8007e8c:	08007f45 	.word	0x08007f45
 8007e90:	08007f1d 	.word	0x08007f1d
 8007e94:	08007f45 	.word	0x08007f45
 8007e98:	08007f45 	.word	0x08007f45
 8007e9c:	08007f45 	.word	0x08007f45
 8007ea0:	08007f45 	.word	0x08007f45
 8007ea4:	08007f45 	.word	0x08007f45
 8007ea8:	08007f45 	.word	0x08007f45
 8007eac:	08007f45 	.word	0x08007f45
 8007eb0:	08007f25 	.word	0x08007f25
 8007eb4:	08007f45 	.word	0x08007f45
 8007eb8:	08007f45 	.word	0x08007f45
 8007ebc:	08007f45 	.word	0x08007f45
 8007ec0:	08007f45 	.word	0x08007f45
 8007ec4:	08007f45 	.word	0x08007f45
 8007ec8:	08007f45 	.word	0x08007f45
 8007ecc:	08007f45 	.word	0x08007f45
 8007ed0:	08007f2d 	.word	0x08007f2d
 8007ed4:	08007f45 	.word	0x08007f45
 8007ed8:	08007f45 	.word	0x08007f45
 8007edc:	08007f45 	.word	0x08007f45
 8007ee0:	08007f45 	.word	0x08007f45
 8007ee4:	08007f45 	.word	0x08007f45
 8007ee8:	08007f45 	.word	0x08007f45
 8007eec:	08007f45 	.word	0x08007f45
 8007ef0:	08007f35 	.word	0x08007f35
 8007ef4:	08007f45 	.word	0x08007f45
 8007ef8:	08007f45 	.word	0x08007f45
 8007efc:	08007f45 	.word	0x08007f45
 8007f00:	08007f45 	.word	0x08007f45
 8007f04:	08007f45 	.word	0x08007f45
 8007f08:	08007f45 	.word	0x08007f45
 8007f0c:	08007f45 	.word	0x08007f45
 8007f10:	08007f3d 	.word	0x08007f3d
 8007f14:	2301      	movs	r3, #1
 8007f16:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f1a:	e0d1      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007f1c:	2304      	movs	r3, #4
 8007f1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f22:	e0cd      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007f24:	2308      	movs	r3, #8
 8007f26:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f2a:	e0c9      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007f2c:	2310      	movs	r3, #16
 8007f2e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f32:	e0c5      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007f34:	2320      	movs	r3, #32
 8007f36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f3a:	e0c1      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007f3c:	2340      	movs	r3, #64	; 0x40
 8007f3e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f42:	e0bd      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007f44:	2380      	movs	r3, #128	; 0x80
 8007f46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f4a:	bf00      	nop
 8007f4c:	e0b8      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a21      	ldr	r2, [pc, #132]	; (8007fd8 <UART_SetConfig+0x6b8>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d141      	bne.n	8007fdc <UART_SetConfig+0x6bc>
 8007f58:	4b1a      	ldr	r3, [pc, #104]	; (8007fc4 <UART_SetConfig+0x6a4>)
 8007f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f5c:	f003 0307 	and.w	r3, r3, #7
 8007f60:	2b05      	cmp	r3, #5
 8007f62:	d827      	bhi.n	8007fb4 <UART_SetConfig+0x694>
 8007f64:	a201      	add	r2, pc, #4	; (adr r2, 8007f6c <UART_SetConfig+0x64c>)
 8007f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6a:	bf00      	nop
 8007f6c:	08007f85 	.word	0x08007f85
 8007f70:	08007f8d 	.word	0x08007f8d
 8007f74:	08007f95 	.word	0x08007f95
 8007f78:	08007f9d 	.word	0x08007f9d
 8007f7c:	08007fa5 	.word	0x08007fa5
 8007f80:	08007fad 	.word	0x08007fad
 8007f84:	2300      	movs	r3, #0
 8007f86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f8a:	e099      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007f8c:	2304      	movs	r3, #4
 8007f8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f92:	e095      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007f94:	2308      	movs	r3, #8
 8007f96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007f9a:	e091      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007f9c:	2310      	movs	r3, #16
 8007f9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007fa2:	e08d      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007fa4:	2320      	movs	r3, #32
 8007fa6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007faa:	e089      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007fac:	2340      	movs	r3, #64	; 0x40
 8007fae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007fb2:	e085      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007fb4:	2380      	movs	r3, #128	; 0x80
 8007fb6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007fba:	bf00      	nop
 8007fbc:	e080      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8007fbe:	bf00      	nop
 8007fc0:	40004400 	.word	0x40004400
 8007fc4:	58024400 	.word	0x58024400
 8007fc8:	40004800 	.word	0x40004800
 8007fcc:	40004c00 	.word	0x40004c00
 8007fd0:	40005000 	.word	0x40005000
 8007fd4:	40011400 	.word	0x40011400
 8007fd8:	40007800 	.word	0x40007800
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a98      	ldr	r2, [pc, #608]	; (8008244 <UART_SetConfig+0x924>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d131      	bne.n	800804a <UART_SetConfig+0x72a>
 8007fe6:	4b98      	ldr	r3, [pc, #608]	; (8008248 <UART_SetConfig+0x928>)
 8007fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fea:	f003 0307 	and.w	r3, r3, #7
 8007fee:	2b05      	cmp	r3, #5
 8007ff0:	d826      	bhi.n	8008040 <UART_SetConfig+0x720>
 8007ff2:	a201      	add	r2, pc, #4	; (adr r2, 8007ff8 <UART_SetConfig+0x6d8>)
 8007ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff8:	08008011 	.word	0x08008011
 8007ffc:	08008019 	.word	0x08008019
 8008000:	08008021 	.word	0x08008021
 8008004:	08008029 	.word	0x08008029
 8008008:	08008031 	.word	0x08008031
 800800c:	08008039 	.word	0x08008039
 8008010:	2300      	movs	r3, #0
 8008012:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008016:	e053      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8008018:	2304      	movs	r3, #4
 800801a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800801e:	e04f      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8008020:	2308      	movs	r3, #8
 8008022:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008026:	e04b      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8008028:	2310      	movs	r3, #16
 800802a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800802e:	e047      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8008030:	2320      	movs	r3, #32
 8008032:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008036:	e043      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8008038:	2340      	movs	r3, #64	; 0x40
 800803a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800803e:	e03f      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8008040:	2380      	movs	r3, #128	; 0x80
 8008042:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008046:	bf00      	nop
 8008048:	e03a      	b.n	80080c0 <UART_SetConfig+0x7a0>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a7f      	ldr	r2, [pc, #508]	; (800824c <UART_SetConfig+0x92c>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d132      	bne.n	80080ba <UART_SetConfig+0x79a>
 8008054:	4b7c      	ldr	r3, [pc, #496]	; (8008248 <UART_SetConfig+0x928>)
 8008056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008058:	f003 0307 	and.w	r3, r3, #7
 800805c:	2b05      	cmp	r3, #5
 800805e:	d827      	bhi.n	80080b0 <UART_SetConfig+0x790>
 8008060:	a201      	add	r2, pc, #4	; (adr r2, 8008068 <UART_SetConfig+0x748>)
 8008062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008066:	bf00      	nop
 8008068:	08008081 	.word	0x08008081
 800806c:	08008089 	.word	0x08008089
 8008070:	08008091 	.word	0x08008091
 8008074:	08008099 	.word	0x08008099
 8008078:	080080a1 	.word	0x080080a1
 800807c:	080080a9 	.word	0x080080a9
 8008080:	2302      	movs	r3, #2
 8008082:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008086:	e01b      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8008088:	2304      	movs	r3, #4
 800808a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800808e:	e017      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8008090:	2308      	movs	r3, #8
 8008092:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8008096:	e013      	b.n	80080c0 <UART_SetConfig+0x7a0>
 8008098:	2310      	movs	r3, #16
 800809a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800809e:	e00f      	b.n	80080c0 <UART_SetConfig+0x7a0>
 80080a0:	2320      	movs	r3, #32
 80080a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80080a6:	e00b      	b.n	80080c0 <UART_SetConfig+0x7a0>
 80080a8:	2340      	movs	r3, #64	; 0x40
 80080aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80080ae:	e007      	b.n	80080c0 <UART_SetConfig+0x7a0>
 80080b0:	2380      	movs	r3, #128	; 0x80
 80080b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80080b6:	bf00      	nop
 80080b8:	e002      	b.n	80080c0 <UART_SetConfig+0x7a0>
 80080ba:	2380      	movs	r3, #128	; 0x80
 80080bc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a61      	ldr	r2, [pc, #388]	; (800824c <UART_SetConfig+0x92c>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	f040 86f3 	bne.w	8008eb2 <UART_SetConfig+0x1592>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80080cc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80080d0:	2b08      	cmp	r3, #8
 80080d2:	f000 80bd 	beq.w	8008250 <UART_SetConfig+0x930>
 80080d6:	2b08      	cmp	r3, #8
 80080d8:	dc04      	bgt.n	80080e4 <UART_SetConfig+0x7c4>
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d00c      	beq.n	80080f8 <UART_SetConfig+0x7d8>
 80080de:	2b04      	cmp	r3, #4
 80080e0:	d05b      	beq.n	800819a <UART_SetConfig+0x87a>
 80080e2:	e276      	b.n	80085d2 <UART_SetConfig+0xcb2>
 80080e4:	2b20      	cmp	r3, #32
 80080e6:	f000 81ad 	beq.w	8008444 <UART_SetConfig+0xb24>
 80080ea:	2b40      	cmp	r3, #64	; 0x40
 80080ec:	f000 821a 	beq.w	8008524 <UART_SetConfig+0xc04>
 80080f0:	2b10      	cmp	r3, #16
 80080f2:	f000 8101 	beq.w	80082f8 <UART_SetConfig+0x9d8>
 80080f6:	e26c      	b.n	80085d2 <UART_SetConfig+0xcb2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80080f8:	f7fe fae8 	bl	80066cc <HAL_RCCEx_GetD3PCLK1Freq>
 80080fc:	4602      	mov	r2, r0
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	2b00      	cmp	r3, #0
 8008104:	d044      	beq.n	8008190 <UART_SetConfig+0x870>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810a:	2b01      	cmp	r3, #1
 800810c:	d03e      	beq.n	800818c <UART_SetConfig+0x86c>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008112:	2b02      	cmp	r3, #2
 8008114:	d038      	beq.n	8008188 <UART_SetConfig+0x868>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811a:	2b03      	cmp	r3, #3
 800811c:	d032      	beq.n	8008184 <UART_SetConfig+0x864>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	2b04      	cmp	r3, #4
 8008124:	d02c      	beq.n	8008180 <UART_SetConfig+0x860>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812a:	2b05      	cmp	r3, #5
 800812c:	d026      	beq.n	800817c <UART_SetConfig+0x85c>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008132:	2b06      	cmp	r3, #6
 8008134:	d020      	beq.n	8008178 <UART_SetConfig+0x858>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813a:	2b07      	cmp	r3, #7
 800813c:	d01a      	beq.n	8008174 <UART_SetConfig+0x854>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008142:	2b08      	cmp	r3, #8
 8008144:	d014      	beq.n	8008170 <UART_SetConfig+0x850>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814a:	2b09      	cmp	r3, #9
 800814c:	d00e      	beq.n	800816c <UART_SetConfig+0x84c>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008152:	2b0a      	cmp	r3, #10
 8008154:	d008      	beq.n	8008168 <UART_SetConfig+0x848>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815a:	2b0b      	cmp	r3, #11
 800815c:	d102      	bne.n	8008164 <UART_SetConfig+0x844>
 800815e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008162:	e016      	b.n	8008192 <UART_SetConfig+0x872>
 8008164:	2301      	movs	r3, #1
 8008166:	e014      	b.n	8008192 <UART_SetConfig+0x872>
 8008168:	2380      	movs	r3, #128	; 0x80
 800816a:	e012      	b.n	8008192 <UART_SetConfig+0x872>
 800816c:	2340      	movs	r3, #64	; 0x40
 800816e:	e010      	b.n	8008192 <UART_SetConfig+0x872>
 8008170:	2320      	movs	r3, #32
 8008172:	e00e      	b.n	8008192 <UART_SetConfig+0x872>
 8008174:	2310      	movs	r3, #16
 8008176:	e00c      	b.n	8008192 <UART_SetConfig+0x872>
 8008178:	230c      	movs	r3, #12
 800817a:	e00a      	b.n	8008192 <UART_SetConfig+0x872>
 800817c:	230a      	movs	r3, #10
 800817e:	e008      	b.n	8008192 <UART_SetConfig+0x872>
 8008180:	2308      	movs	r3, #8
 8008182:	e006      	b.n	8008192 <UART_SetConfig+0x872>
 8008184:	2306      	movs	r3, #6
 8008186:	e004      	b.n	8008192 <UART_SetConfig+0x872>
 8008188:	2304      	movs	r3, #4
 800818a:	e002      	b.n	8008192 <UART_SetConfig+0x872>
 800818c:	2302      	movs	r3, #2
 800818e:	e000      	b.n	8008192 <UART_SetConfig+0x872>
 8008190:	2301      	movs	r3, #1
 8008192:	fbb2 f3f3 	udiv	r3, r2, r3
 8008196:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008198:	e21f      	b.n	80085da <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800819a:	f107 0318 	add.w	r3, r7, #24
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fe faaa 	bl	80066f8 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80081a4:	69fa      	ldr	r2, [r7, #28]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d044      	beq.n	8008238 <UART_SetConfig+0x918>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d03e      	beq.n	8008234 <UART_SetConfig+0x914>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d038      	beq.n	8008230 <UART_SetConfig+0x910>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c2:	2b03      	cmp	r3, #3
 80081c4:	d032      	beq.n	800822c <UART_SetConfig+0x90c>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ca:	2b04      	cmp	r3, #4
 80081cc:	d02c      	beq.n	8008228 <UART_SetConfig+0x908>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d2:	2b05      	cmp	r3, #5
 80081d4:	d026      	beq.n	8008224 <UART_SetConfig+0x904>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081da:	2b06      	cmp	r3, #6
 80081dc:	d020      	beq.n	8008220 <UART_SetConfig+0x900>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e2:	2b07      	cmp	r3, #7
 80081e4:	d01a      	beq.n	800821c <UART_SetConfig+0x8fc>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ea:	2b08      	cmp	r3, #8
 80081ec:	d014      	beq.n	8008218 <UART_SetConfig+0x8f8>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f2:	2b09      	cmp	r3, #9
 80081f4:	d00e      	beq.n	8008214 <UART_SetConfig+0x8f4>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	2b0a      	cmp	r3, #10
 80081fc:	d008      	beq.n	8008210 <UART_SetConfig+0x8f0>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	2b0b      	cmp	r3, #11
 8008204:	d102      	bne.n	800820c <UART_SetConfig+0x8ec>
 8008206:	f44f 7380 	mov.w	r3, #256	; 0x100
 800820a:	e016      	b.n	800823a <UART_SetConfig+0x91a>
 800820c:	2301      	movs	r3, #1
 800820e:	e014      	b.n	800823a <UART_SetConfig+0x91a>
 8008210:	2380      	movs	r3, #128	; 0x80
 8008212:	e012      	b.n	800823a <UART_SetConfig+0x91a>
 8008214:	2340      	movs	r3, #64	; 0x40
 8008216:	e010      	b.n	800823a <UART_SetConfig+0x91a>
 8008218:	2320      	movs	r3, #32
 800821a:	e00e      	b.n	800823a <UART_SetConfig+0x91a>
 800821c:	2310      	movs	r3, #16
 800821e:	e00c      	b.n	800823a <UART_SetConfig+0x91a>
 8008220:	230c      	movs	r3, #12
 8008222:	e00a      	b.n	800823a <UART_SetConfig+0x91a>
 8008224:	230a      	movs	r3, #10
 8008226:	e008      	b.n	800823a <UART_SetConfig+0x91a>
 8008228:	2308      	movs	r3, #8
 800822a:	e006      	b.n	800823a <UART_SetConfig+0x91a>
 800822c:	2306      	movs	r3, #6
 800822e:	e004      	b.n	800823a <UART_SetConfig+0x91a>
 8008230:	2304      	movs	r3, #4
 8008232:	e002      	b.n	800823a <UART_SetConfig+0x91a>
 8008234:	2302      	movs	r3, #2
 8008236:	e000      	b.n	800823a <UART_SetConfig+0x91a>
 8008238:	2301      	movs	r3, #1
 800823a:	fbb2 f3f3 	udiv	r3, r2, r3
 800823e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008240:	e1cb      	b.n	80085da <UART_SetConfig+0xcba>
 8008242:	bf00      	nop
 8008244:	40007c00 	.word	0x40007c00
 8008248:	58024400 	.word	0x58024400
 800824c:	58000c00 	.word	0x58000c00
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008250:	f107 030c 	add.w	r3, r7, #12
 8008254:	4618      	mov	r0, r3
 8008256:	f7fe fb9b 	bl	8006990 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	2b00      	cmp	r3, #0
 8008262:	d044      	beq.n	80082ee <UART_SetConfig+0x9ce>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	2b01      	cmp	r3, #1
 800826a:	d03e      	beq.n	80082ea <UART_SetConfig+0x9ca>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008270:	2b02      	cmp	r3, #2
 8008272:	d038      	beq.n	80082e6 <UART_SetConfig+0x9c6>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008278:	2b03      	cmp	r3, #3
 800827a:	d032      	beq.n	80082e2 <UART_SetConfig+0x9c2>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008280:	2b04      	cmp	r3, #4
 8008282:	d02c      	beq.n	80082de <UART_SetConfig+0x9be>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	2b05      	cmp	r3, #5
 800828a:	d026      	beq.n	80082da <UART_SetConfig+0x9ba>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008290:	2b06      	cmp	r3, #6
 8008292:	d020      	beq.n	80082d6 <UART_SetConfig+0x9b6>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008298:	2b07      	cmp	r3, #7
 800829a:	d01a      	beq.n	80082d2 <UART_SetConfig+0x9b2>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	2b08      	cmp	r3, #8
 80082a2:	d014      	beq.n	80082ce <UART_SetConfig+0x9ae>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	2b09      	cmp	r3, #9
 80082aa:	d00e      	beq.n	80082ca <UART_SetConfig+0x9aa>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	2b0a      	cmp	r3, #10
 80082b2:	d008      	beq.n	80082c6 <UART_SetConfig+0x9a6>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b8:	2b0b      	cmp	r3, #11
 80082ba:	d102      	bne.n	80082c2 <UART_SetConfig+0x9a2>
 80082bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082c0:	e016      	b.n	80082f0 <UART_SetConfig+0x9d0>
 80082c2:	2301      	movs	r3, #1
 80082c4:	e014      	b.n	80082f0 <UART_SetConfig+0x9d0>
 80082c6:	2380      	movs	r3, #128	; 0x80
 80082c8:	e012      	b.n	80082f0 <UART_SetConfig+0x9d0>
 80082ca:	2340      	movs	r3, #64	; 0x40
 80082cc:	e010      	b.n	80082f0 <UART_SetConfig+0x9d0>
 80082ce:	2320      	movs	r3, #32
 80082d0:	e00e      	b.n	80082f0 <UART_SetConfig+0x9d0>
 80082d2:	2310      	movs	r3, #16
 80082d4:	e00c      	b.n	80082f0 <UART_SetConfig+0x9d0>
 80082d6:	230c      	movs	r3, #12
 80082d8:	e00a      	b.n	80082f0 <UART_SetConfig+0x9d0>
 80082da:	230a      	movs	r3, #10
 80082dc:	e008      	b.n	80082f0 <UART_SetConfig+0x9d0>
 80082de:	2308      	movs	r3, #8
 80082e0:	e006      	b.n	80082f0 <UART_SetConfig+0x9d0>
 80082e2:	2306      	movs	r3, #6
 80082e4:	e004      	b.n	80082f0 <UART_SetConfig+0x9d0>
 80082e6:	2304      	movs	r3, #4
 80082e8:	e002      	b.n	80082f0 <UART_SetConfig+0x9d0>
 80082ea:	2302      	movs	r3, #2
 80082ec:	e000      	b.n	80082f0 <UART_SetConfig+0x9d0>
 80082ee:	2301      	movs	r3, #1
 80082f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80082f6:	e170      	b.n	80085da <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082f8:	4b79      	ldr	r3, [pc, #484]	; (80084e0 <UART_SetConfig+0xbc0>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0320 	and.w	r3, r3, #32
 8008300:	2b00      	cmp	r3, #0
 8008302:	d054      	beq.n	80083ae <UART_SetConfig+0xa8e>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008304:	4b76      	ldr	r3, [pc, #472]	; (80084e0 <UART_SetConfig+0xbc0>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	08db      	lsrs	r3, r3, #3
 800830a:	f003 0303 	and.w	r3, r3, #3
 800830e:	4a75      	ldr	r2, [pc, #468]	; (80084e4 <UART_SetConfig+0xbc4>)
 8008310:	40da      	lsrs	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008316:	2b00      	cmp	r3, #0
 8008318:	d044      	beq.n	80083a4 <UART_SetConfig+0xa84>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831e:	2b01      	cmp	r3, #1
 8008320:	d03e      	beq.n	80083a0 <UART_SetConfig+0xa80>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008326:	2b02      	cmp	r3, #2
 8008328:	d038      	beq.n	800839c <UART_SetConfig+0xa7c>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832e:	2b03      	cmp	r3, #3
 8008330:	d032      	beq.n	8008398 <UART_SetConfig+0xa78>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	2b04      	cmp	r3, #4
 8008338:	d02c      	beq.n	8008394 <UART_SetConfig+0xa74>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833e:	2b05      	cmp	r3, #5
 8008340:	d026      	beq.n	8008390 <UART_SetConfig+0xa70>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008346:	2b06      	cmp	r3, #6
 8008348:	d020      	beq.n	800838c <UART_SetConfig+0xa6c>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834e:	2b07      	cmp	r3, #7
 8008350:	d01a      	beq.n	8008388 <UART_SetConfig+0xa68>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008356:	2b08      	cmp	r3, #8
 8008358:	d014      	beq.n	8008384 <UART_SetConfig+0xa64>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	2b09      	cmp	r3, #9
 8008360:	d00e      	beq.n	8008380 <UART_SetConfig+0xa60>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	2b0a      	cmp	r3, #10
 8008368:	d008      	beq.n	800837c <UART_SetConfig+0xa5c>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836e:	2b0b      	cmp	r3, #11
 8008370:	d102      	bne.n	8008378 <UART_SetConfig+0xa58>
 8008372:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008376:	e016      	b.n	80083a6 <UART_SetConfig+0xa86>
 8008378:	2301      	movs	r3, #1
 800837a:	e014      	b.n	80083a6 <UART_SetConfig+0xa86>
 800837c:	2380      	movs	r3, #128	; 0x80
 800837e:	e012      	b.n	80083a6 <UART_SetConfig+0xa86>
 8008380:	2340      	movs	r3, #64	; 0x40
 8008382:	e010      	b.n	80083a6 <UART_SetConfig+0xa86>
 8008384:	2320      	movs	r3, #32
 8008386:	e00e      	b.n	80083a6 <UART_SetConfig+0xa86>
 8008388:	2310      	movs	r3, #16
 800838a:	e00c      	b.n	80083a6 <UART_SetConfig+0xa86>
 800838c:	230c      	movs	r3, #12
 800838e:	e00a      	b.n	80083a6 <UART_SetConfig+0xa86>
 8008390:	230a      	movs	r3, #10
 8008392:	e008      	b.n	80083a6 <UART_SetConfig+0xa86>
 8008394:	2308      	movs	r3, #8
 8008396:	e006      	b.n	80083a6 <UART_SetConfig+0xa86>
 8008398:	2306      	movs	r3, #6
 800839a:	e004      	b.n	80083a6 <UART_SetConfig+0xa86>
 800839c:	2304      	movs	r3, #4
 800839e:	e002      	b.n	80083a6 <UART_SetConfig+0xa86>
 80083a0:	2302      	movs	r3, #2
 80083a2:	e000      	b.n	80083a6 <UART_SetConfig+0xa86>
 80083a4:	2301      	movs	r3, #1
 80083a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80083ac:	e115      	b.n	80085da <UART_SetConfig+0xcba>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d043      	beq.n	800843e <UART_SetConfig+0xb1e>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d03d      	beq.n	800843a <UART_SetConfig+0xb1a>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d037      	beq.n	8008436 <UART_SetConfig+0xb16>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	d031      	beq.n	8008432 <UART_SetConfig+0xb12>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	2b04      	cmp	r3, #4
 80083d4:	d02b      	beq.n	800842e <UART_SetConfig+0xb0e>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083da:	2b05      	cmp	r3, #5
 80083dc:	d025      	beq.n	800842a <UART_SetConfig+0xb0a>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e2:	2b06      	cmp	r3, #6
 80083e4:	d01f      	beq.n	8008426 <UART_SetConfig+0xb06>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ea:	2b07      	cmp	r3, #7
 80083ec:	d019      	beq.n	8008422 <UART_SetConfig+0xb02>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f2:	2b08      	cmp	r3, #8
 80083f4:	d013      	beq.n	800841e <UART_SetConfig+0xafe>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fa:	2b09      	cmp	r3, #9
 80083fc:	d00d      	beq.n	800841a <UART_SetConfig+0xafa>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	2b0a      	cmp	r3, #10
 8008404:	d007      	beq.n	8008416 <UART_SetConfig+0xaf6>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	2b0b      	cmp	r3, #11
 800840c:	d101      	bne.n	8008412 <UART_SetConfig+0xaf2>
 800840e:	4b36      	ldr	r3, [pc, #216]	; (80084e8 <UART_SetConfig+0xbc8>)
 8008410:	e016      	b.n	8008440 <UART_SetConfig+0xb20>
 8008412:	4b34      	ldr	r3, [pc, #208]	; (80084e4 <UART_SetConfig+0xbc4>)
 8008414:	e014      	b.n	8008440 <UART_SetConfig+0xb20>
 8008416:	4b35      	ldr	r3, [pc, #212]	; (80084ec <UART_SetConfig+0xbcc>)
 8008418:	e012      	b.n	8008440 <UART_SetConfig+0xb20>
 800841a:	4b35      	ldr	r3, [pc, #212]	; (80084f0 <UART_SetConfig+0xbd0>)
 800841c:	e010      	b.n	8008440 <UART_SetConfig+0xb20>
 800841e:	4b35      	ldr	r3, [pc, #212]	; (80084f4 <UART_SetConfig+0xbd4>)
 8008420:	e00e      	b.n	8008440 <UART_SetConfig+0xb20>
 8008422:	4b35      	ldr	r3, [pc, #212]	; (80084f8 <UART_SetConfig+0xbd8>)
 8008424:	e00c      	b.n	8008440 <UART_SetConfig+0xb20>
 8008426:	4b35      	ldr	r3, [pc, #212]	; (80084fc <UART_SetConfig+0xbdc>)
 8008428:	e00a      	b.n	8008440 <UART_SetConfig+0xb20>
 800842a:	4b35      	ldr	r3, [pc, #212]	; (8008500 <UART_SetConfig+0xbe0>)
 800842c:	e008      	b.n	8008440 <UART_SetConfig+0xb20>
 800842e:	4b35      	ldr	r3, [pc, #212]	; (8008504 <UART_SetConfig+0xbe4>)
 8008430:	e006      	b.n	8008440 <UART_SetConfig+0xb20>
 8008432:	4b35      	ldr	r3, [pc, #212]	; (8008508 <UART_SetConfig+0xbe8>)
 8008434:	e004      	b.n	8008440 <UART_SetConfig+0xb20>
 8008436:	4b35      	ldr	r3, [pc, #212]	; (800850c <UART_SetConfig+0xbec>)
 8008438:	e002      	b.n	8008440 <UART_SetConfig+0xb20>
 800843a:	4b35      	ldr	r3, [pc, #212]	; (8008510 <UART_SetConfig+0xbf0>)
 800843c:	e000      	b.n	8008440 <UART_SetConfig+0xb20>
 800843e:	4b29      	ldr	r3, [pc, #164]	; (80084e4 <UART_SetConfig+0xbc4>)
 8008440:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008442:	e0ca      	b.n	80085da <UART_SetConfig+0xcba>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008448:	2b00      	cmp	r3, #0
 800844a:	d046      	beq.n	80084da <UART_SetConfig+0xbba>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008450:	2b01      	cmp	r3, #1
 8008452:	d040      	beq.n	80084d6 <UART_SetConfig+0xbb6>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008458:	2b02      	cmp	r3, #2
 800845a:	d03a      	beq.n	80084d2 <UART_SetConfig+0xbb2>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008460:	2b03      	cmp	r3, #3
 8008462:	d034      	beq.n	80084ce <UART_SetConfig+0xbae>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008468:	2b04      	cmp	r3, #4
 800846a:	d02e      	beq.n	80084ca <UART_SetConfig+0xbaa>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008470:	2b05      	cmp	r3, #5
 8008472:	d028      	beq.n	80084c6 <UART_SetConfig+0xba6>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008478:	2b06      	cmp	r3, #6
 800847a:	d022      	beq.n	80084c2 <UART_SetConfig+0xba2>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008480:	2b07      	cmp	r3, #7
 8008482:	d01c      	beq.n	80084be <UART_SetConfig+0xb9e>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008488:	2b08      	cmp	r3, #8
 800848a:	d016      	beq.n	80084ba <UART_SetConfig+0xb9a>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008490:	2b09      	cmp	r3, #9
 8008492:	d00f      	beq.n	80084b4 <UART_SetConfig+0xb94>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008498:	2b0a      	cmp	r3, #10
 800849a:	d008      	beq.n	80084ae <UART_SetConfig+0xb8e>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	2b0b      	cmp	r3, #11
 80084a2:	d102      	bne.n	80084aa <UART_SetConfig+0xb8a>
 80084a4:	f643 5309 	movw	r3, #15625	; 0x3d09
 80084a8:	e018      	b.n	80084dc <UART_SetConfig+0xbbc>
 80084aa:	4b13      	ldr	r3, [pc, #76]	; (80084f8 <UART_SetConfig+0xbd8>)
 80084ac:	e016      	b.n	80084dc <UART_SetConfig+0xbbc>
 80084ae:	f647 2312 	movw	r3, #31250	; 0x7a12
 80084b2:	e013      	b.n	80084dc <UART_SetConfig+0xbbc>
 80084b4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80084b8:	e010      	b.n	80084dc <UART_SetConfig+0xbbc>
 80084ba:	4b16      	ldr	r3, [pc, #88]	; (8008514 <UART_SetConfig+0xbf4>)
 80084bc:	e00e      	b.n	80084dc <UART_SetConfig+0xbbc>
 80084be:	4b0a      	ldr	r3, [pc, #40]	; (80084e8 <UART_SetConfig+0xbc8>)
 80084c0:	e00c      	b.n	80084dc <UART_SetConfig+0xbbc>
 80084c2:	4b15      	ldr	r3, [pc, #84]	; (8008518 <UART_SetConfig+0xbf8>)
 80084c4:	e00a      	b.n	80084dc <UART_SetConfig+0xbbc>
 80084c6:	4b15      	ldr	r3, [pc, #84]	; (800851c <UART_SetConfig+0xbfc>)
 80084c8:	e008      	b.n	80084dc <UART_SetConfig+0xbbc>
 80084ca:	4b08      	ldr	r3, [pc, #32]	; (80084ec <UART_SetConfig+0xbcc>)
 80084cc:	e006      	b.n	80084dc <UART_SetConfig+0xbbc>
 80084ce:	4b14      	ldr	r3, [pc, #80]	; (8008520 <UART_SetConfig+0xc00>)
 80084d0:	e004      	b.n	80084dc <UART_SetConfig+0xbbc>
 80084d2:	4b07      	ldr	r3, [pc, #28]	; (80084f0 <UART_SetConfig+0xbd0>)
 80084d4:	e002      	b.n	80084dc <UART_SetConfig+0xbbc>
 80084d6:	4b07      	ldr	r3, [pc, #28]	; (80084f4 <UART_SetConfig+0xbd4>)
 80084d8:	e000      	b.n	80084dc <UART_SetConfig+0xbbc>
 80084da:	4b07      	ldr	r3, [pc, #28]	; (80084f8 <UART_SetConfig+0xbd8>)
 80084dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084de:	e07c      	b.n	80085da <UART_SetConfig+0xcba>
 80084e0:	58024400 	.word	0x58024400
 80084e4:	03d09000 	.word	0x03d09000
 80084e8:	0003d090 	.word	0x0003d090
 80084ec:	0007a120 	.word	0x0007a120
 80084f0:	000f4240 	.word	0x000f4240
 80084f4:	001e8480 	.word	0x001e8480
 80084f8:	003d0900 	.word	0x003d0900
 80084fc:	00516155 	.word	0x00516155
 8008500:	0061a800 	.word	0x0061a800
 8008504:	007a1200 	.word	0x007a1200
 8008508:	00a2c2aa 	.word	0x00a2c2aa
 800850c:	00f42400 	.word	0x00f42400
 8008510:	01e84800 	.word	0x01e84800
 8008514:	0001e848 	.word	0x0001e848
 8008518:	00051615 	.word	0x00051615
 800851c:	00061a80 	.word	0x00061a80
 8008520:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008528:	2b00      	cmp	r3, #0
 800852a:	d04e      	beq.n	80085ca <UART_SetConfig+0xcaa>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008530:	2b01      	cmp	r3, #1
 8008532:	d047      	beq.n	80085c4 <UART_SetConfig+0xca4>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008538:	2b02      	cmp	r3, #2
 800853a:	d040      	beq.n	80085be <UART_SetConfig+0xc9e>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008540:	2b03      	cmp	r3, #3
 8008542:	d039      	beq.n	80085b8 <UART_SetConfig+0xc98>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008548:	2b04      	cmp	r3, #4
 800854a:	d032      	beq.n	80085b2 <UART_SetConfig+0xc92>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008550:	2b05      	cmp	r3, #5
 8008552:	d02b      	beq.n	80085ac <UART_SetConfig+0xc8c>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008558:	2b06      	cmp	r3, #6
 800855a:	d024      	beq.n	80085a6 <UART_SetConfig+0xc86>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008560:	2b07      	cmp	r3, #7
 8008562:	d01d      	beq.n	80085a0 <UART_SetConfig+0xc80>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008568:	2b08      	cmp	r3, #8
 800856a:	d016      	beq.n	800859a <UART_SetConfig+0xc7a>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008570:	2b09      	cmp	r3, #9
 8008572:	d00f      	beq.n	8008594 <UART_SetConfig+0xc74>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008578:	2b0a      	cmp	r3, #10
 800857a:	d008      	beq.n	800858e <UART_SetConfig+0xc6e>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008580:	2b0b      	cmp	r3, #11
 8008582:	d101      	bne.n	8008588 <UART_SetConfig+0xc68>
 8008584:	2380      	movs	r3, #128	; 0x80
 8008586:	e022      	b.n	80085ce <UART_SetConfig+0xcae>
 8008588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800858c:	e01f      	b.n	80085ce <UART_SetConfig+0xcae>
 800858e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008592:	e01c      	b.n	80085ce <UART_SetConfig+0xcae>
 8008594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008598:	e019      	b.n	80085ce <UART_SetConfig+0xcae>
 800859a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800859e:	e016      	b.n	80085ce <UART_SetConfig+0xcae>
 80085a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085a4:	e013      	b.n	80085ce <UART_SetConfig+0xcae>
 80085a6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80085aa:	e010      	b.n	80085ce <UART_SetConfig+0xcae>
 80085ac:	f640 43cc 	movw	r3, #3276	; 0xccc
 80085b0:	e00d      	b.n	80085ce <UART_SetConfig+0xcae>
 80085b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085b6:	e00a      	b.n	80085ce <UART_SetConfig+0xcae>
 80085b8:	f241 5355 	movw	r3, #5461	; 0x1555
 80085bc:	e007      	b.n	80085ce <UART_SetConfig+0xcae>
 80085be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80085c2:	e004      	b.n	80085ce <UART_SetConfig+0xcae>
 80085c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085c8:	e001      	b.n	80085ce <UART_SetConfig+0xcae>
 80085ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80085d0:	e003      	b.n	80085da <UART_SetConfig+0xcba>
      default:
        ret = HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80085d8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80085da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f001 83e8 	beq.w	8009db2 <UART_SetConfig+0x2492>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	4613      	mov	r3, r2
 80085e8:	005b      	lsls	r3, r3, #1
 80085ea:	4413      	add	r3, r2
 80085ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d305      	bcc.n	80085fe <UART_SetConfig+0xcde>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d904      	bls.n	8008608 <UART_SetConfig+0xce8>
      {
        ret = HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008604:	f001 bbd5 	b.w	8009db2 <UART_SetConfig+0x2492>
      }
      else
      {
        switch (clocksource)
 8008608:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800860c:	2b08      	cmp	r3, #8
 800860e:	f000 8154 	beq.w	80088ba <UART_SetConfig+0xf9a>
 8008612:	2b08      	cmp	r3, #8
 8008614:	dc06      	bgt.n	8008624 <UART_SetConfig+0xd04>
 8008616:	2b02      	cmp	r3, #2
 8008618:	d00f      	beq.n	800863a <UART_SetConfig+0xd1a>
 800861a:	2b04      	cmp	r3, #4
 800861c:	f000 80ac 	beq.w	8008778 <UART_SetConfig+0xe58>
 8008620:	f000 bc30 	b.w	8008e84 <UART_SetConfig+0x1564>
 8008624:	2b20      	cmp	r3, #32
 8008626:	f000 832d 	beq.w	8008c84 <UART_SetConfig+0x1364>
 800862a:	2b40      	cmp	r3, #64	; 0x40
 800862c:	f000 83a5 	beq.w	8008d7a <UART_SetConfig+0x145a>
 8008630:	2b10      	cmp	r3, #16
 8008632:	f000 81e3 	beq.w	80089fc <UART_SetConfig+0x10dc>
 8008636:	f000 bc25 	b.w	8008e84 <UART_SetConfig+0x1564>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800863a:	f7fe f847 	bl	80066cc <HAL_RCCEx_GetD3PCLK1Freq>
 800863e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008642:	4618      	mov	r0, r3
 8008644:	f04f 0100 	mov.w	r1, #0
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864c:	2b00      	cmp	r3, #0
 800864e:	d067      	beq.n	8008720 <UART_SetConfig+0xe00>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	2b01      	cmp	r3, #1
 8008656:	d05e      	beq.n	8008716 <UART_SetConfig+0xdf6>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865c:	2b02      	cmp	r3, #2
 800865e:	d055      	beq.n	800870c <UART_SetConfig+0xdec>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	2b03      	cmp	r3, #3
 8008666:	d04c      	beq.n	8008702 <UART_SetConfig+0xde2>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866c:	2b04      	cmp	r3, #4
 800866e:	d043      	beq.n	80086f8 <UART_SetConfig+0xdd8>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008674:	2b05      	cmp	r3, #5
 8008676:	d03a      	beq.n	80086ee <UART_SetConfig+0xdce>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867c:	2b06      	cmp	r3, #6
 800867e:	d031      	beq.n	80086e4 <UART_SetConfig+0xdc4>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008684:	2b07      	cmp	r3, #7
 8008686:	d028      	beq.n	80086da <UART_SetConfig+0xdba>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868c:	2b08      	cmp	r3, #8
 800868e:	d01f      	beq.n	80086d0 <UART_SetConfig+0xdb0>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008694:	2b09      	cmp	r3, #9
 8008696:	d016      	beq.n	80086c6 <UART_SetConfig+0xda6>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869c:	2b0a      	cmp	r3, #10
 800869e:	d00d      	beq.n	80086bc <UART_SetConfig+0xd9c>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a4:	2b0b      	cmp	r3, #11
 80086a6:	d104      	bne.n	80086b2 <UART_SetConfig+0xd92>
 80086a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086ac:	f04f 0400 	mov.w	r4, #0
 80086b0:	e03a      	b.n	8008728 <UART_SetConfig+0xe08>
 80086b2:	f04f 0301 	mov.w	r3, #1
 80086b6:	f04f 0400 	mov.w	r4, #0
 80086ba:	e035      	b.n	8008728 <UART_SetConfig+0xe08>
 80086bc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80086c0:	f04f 0400 	mov.w	r4, #0
 80086c4:	e030      	b.n	8008728 <UART_SetConfig+0xe08>
 80086c6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80086ca:	f04f 0400 	mov.w	r4, #0
 80086ce:	e02b      	b.n	8008728 <UART_SetConfig+0xe08>
 80086d0:	f04f 0320 	mov.w	r3, #32
 80086d4:	f04f 0400 	mov.w	r4, #0
 80086d8:	e026      	b.n	8008728 <UART_SetConfig+0xe08>
 80086da:	f04f 0310 	mov.w	r3, #16
 80086de:	f04f 0400 	mov.w	r4, #0
 80086e2:	e021      	b.n	8008728 <UART_SetConfig+0xe08>
 80086e4:	f04f 030c 	mov.w	r3, #12
 80086e8:	f04f 0400 	mov.w	r4, #0
 80086ec:	e01c      	b.n	8008728 <UART_SetConfig+0xe08>
 80086ee:	f04f 030a 	mov.w	r3, #10
 80086f2:	f04f 0400 	mov.w	r4, #0
 80086f6:	e017      	b.n	8008728 <UART_SetConfig+0xe08>
 80086f8:	f04f 0308 	mov.w	r3, #8
 80086fc:	f04f 0400 	mov.w	r4, #0
 8008700:	e012      	b.n	8008728 <UART_SetConfig+0xe08>
 8008702:	f04f 0306 	mov.w	r3, #6
 8008706:	f04f 0400 	mov.w	r4, #0
 800870a:	e00d      	b.n	8008728 <UART_SetConfig+0xe08>
 800870c:	f04f 0304 	mov.w	r3, #4
 8008710:	f04f 0400 	mov.w	r4, #0
 8008714:	e008      	b.n	8008728 <UART_SetConfig+0xe08>
 8008716:	f04f 0302 	mov.w	r3, #2
 800871a:	f04f 0400 	mov.w	r4, #0
 800871e:	e003      	b.n	8008728 <UART_SetConfig+0xe08>
 8008720:	f04f 0301 	mov.w	r3, #1
 8008724:	f04f 0400 	mov.w	r4, #0
 8008728:	461a      	mov	r2, r3
 800872a:	4623      	mov	r3, r4
 800872c:	f7f7 fe28 	bl	8000380 <__aeabi_uldivmod>
 8008730:	4603      	mov	r3, r0
 8008732:	460c      	mov	r4, r1
 8008734:	4619      	mov	r1, r3
 8008736:	4622      	mov	r2, r4
 8008738:	f04f 0300 	mov.w	r3, #0
 800873c:	f04f 0400 	mov.w	r4, #0
 8008740:	0214      	lsls	r4, r2, #8
 8008742:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008746:	020b      	lsls	r3, r1, #8
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	6852      	ldr	r2, [r2, #4]
 800874c:	0852      	lsrs	r2, r2, #1
 800874e:	4611      	mov	r1, r2
 8008750:	f04f 0200 	mov.w	r2, #0
 8008754:	eb13 0b01 	adds.w	fp, r3, r1
 8008758:	eb44 0c02 	adc.w	ip, r4, r2
 800875c:	4658      	mov	r0, fp
 800875e:	4661      	mov	r1, ip
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f04f 0400 	mov.w	r4, #0
 8008768:	461a      	mov	r2, r3
 800876a:	4623      	mov	r3, r4
 800876c:	f7f7 fe08 	bl	8000380 <__aeabi_uldivmod>
 8008770:	4603      	mov	r3, r0
 8008772:	460c      	mov	r4, r1
 8008774:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008776:	e389      	b.n	8008e8c <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008778:	f107 0318 	add.w	r3, r7, #24
 800877c:	4618      	mov	r0, r3
 800877e:	f7fd ffbb 	bl	80066f8 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	4618      	mov	r0, r3
 8008786:	f04f 0100 	mov.w	r1, #0
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878e:	2b00      	cmp	r3, #0
 8008790:	d067      	beq.n	8008862 <UART_SetConfig+0xf42>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008796:	2b01      	cmp	r3, #1
 8008798:	d05e      	beq.n	8008858 <UART_SetConfig+0xf38>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d055      	beq.n	800884e <UART_SetConfig+0xf2e>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	d04c      	beq.n	8008844 <UART_SetConfig+0xf24>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ae:	2b04      	cmp	r3, #4
 80087b0:	d043      	beq.n	800883a <UART_SetConfig+0xf1a>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b6:	2b05      	cmp	r3, #5
 80087b8:	d03a      	beq.n	8008830 <UART_SetConfig+0xf10>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087be:	2b06      	cmp	r3, #6
 80087c0:	d031      	beq.n	8008826 <UART_SetConfig+0xf06>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c6:	2b07      	cmp	r3, #7
 80087c8:	d028      	beq.n	800881c <UART_SetConfig+0xefc>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ce:	2b08      	cmp	r3, #8
 80087d0:	d01f      	beq.n	8008812 <UART_SetConfig+0xef2>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d6:	2b09      	cmp	r3, #9
 80087d8:	d016      	beq.n	8008808 <UART_SetConfig+0xee8>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087de:	2b0a      	cmp	r3, #10
 80087e0:	d00d      	beq.n	80087fe <UART_SetConfig+0xede>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e6:	2b0b      	cmp	r3, #11
 80087e8:	d104      	bne.n	80087f4 <UART_SetConfig+0xed4>
 80087ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087ee:	f04f 0400 	mov.w	r4, #0
 80087f2:	e03a      	b.n	800886a <UART_SetConfig+0xf4a>
 80087f4:	f04f 0301 	mov.w	r3, #1
 80087f8:	f04f 0400 	mov.w	r4, #0
 80087fc:	e035      	b.n	800886a <UART_SetConfig+0xf4a>
 80087fe:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008802:	f04f 0400 	mov.w	r4, #0
 8008806:	e030      	b.n	800886a <UART_SetConfig+0xf4a>
 8008808:	f04f 0340 	mov.w	r3, #64	; 0x40
 800880c:	f04f 0400 	mov.w	r4, #0
 8008810:	e02b      	b.n	800886a <UART_SetConfig+0xf4a>
 8008812:	f04f 0320 	mov.w	r3, #32
 8008816:	f04f 0400 	mov.w	r4, #0
 800881a:	e026      	b.n	800886a <UART_SetConfig+0xf4a>
 800881c:	f04f 0310 	mov.w	r3, #16
 8008820:	f04f 0400 	mov.w	r4, #0
 8008824:	e021      	b.n	800886a <UART_SetConfig+0xf4a>
 8008826:	f04f 030c 	mov.w	r3, #12
 800882a:	f04f 0400 	mov.w	r4, #0
 800882e:	e01c      	b.n	800886a <UART_SetConfig+0xf4a>
 8008830:	f04f 030a 	mov.w	r3, #10
 8008834:	f04f 0400 	mov.w	r4, #0
 8008838:	e017      	b.n	800886a <UART_SetConfig+0xf4a>
 800883a:	f04f 0308 	mov.w	r3, #8
 800883e:	f04f 0400 	mov.w	r4, #0
 8008842:	e012      	b.n	800886a <UART_SetConfig+0xf4a>
 8008844:	f04f 0306 	mov.w	r3, #6
 8008848:	f04f 0400 	mov.w	r4, #0
 800884c:	e00d      	b.n	800886a <UART_SetConfig+0xf4a>
 800884e:	f04f 0304 	mov.w	r3, #4
 8008852:	f04f 0400 	mov.w	r4, #0
 8008856:	e008      	b.n	800886a <UART_SetConfig+0xf4a>
 8008858:	f04f 0302 	mov.w	r3, #2
 800885c:	f04f 0400 	mov.w	r4, #0
 8008860:	e003      	b.n	800886a <UART_SetConfig+0xf4a>
 8008862:	f04f 0301 	mov.w	r3, #1
 8008866:	f04f 0400 	mov.w	r4, #0
 800886a:	461a      	mov	r2, r3
 800886c:	4623      	mov	r3, r4
 800886e:	f7f7 fd87 	bl	8000380 <__aeabi_uldivmod>
 8008872:	4603      	mov	r3, r0
 8008874:	460c      	mov	r4, r1
 8008876:	4619      	mov	r1, r3
 8008878:	4622      	mov	r2, r4
 800887a:	f04f 0300 	mov.w	r3, #0
 800887e:	f04f 0400 	mov.w	r4, #0
 8008882:	0214      	lsls	r4, r2, #8
 8008884:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008888:	020b      	lsls	r3, r1, #8
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	6852      	ldr	r2, [r2, #4]
 800888e:	0852      	lsrs	r2, r2, #1
 8008890:	4611      	mov	r1, r2
 8008892:	f04f 0200 	mov.w	r2, #0
 8008896:	eb13 0b01 	adds.w	fp, r3, r1
 800889a:	eb44 0c02 	adc.w	ip, r4, r2
 800889e:	4658      	mov	r0, fp
 80088a0:	4661      	mov	r1, ip
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	f04f 0400 	mov.w	r4, #0
 80088aa:	461a      	mov	r2, r3
 80088ac:	4623      	mov	r3, r4
 80088ae:	f7f7 fd67 	bl	8000380 <__aeabi_uldivmod>
 80088b2:	4603      	mov	r3, r0
 80088b4:	460c      	mov	r4, r1
 80088b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80088b8:	e2e8      	b.n	8008e8c <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088ba:	f107 030c 	add.w	r3, r7, #12
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fe f866 	bl	8006990 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f04f 0100 	mov.w	r1, #0
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d067      	beq.n	80089a4 <UART_SetConfig+0x1084>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d05e      	beq.n	800899a <UART_SetConfig+0x107a>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d055      	beq.n	8008990 <UART_SetConfig+0x1070>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e8:	2b03      	cmp	r3, #3
 80088ea:	d04c      	beq.n	8008986 <UART_SetConfig+0x1066>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	2b04      	cmp	r3, #4
 80088f2:	d043      	beq.n	800897c <UART_SetConfig+0x105c>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f8:	2b05      	cmp	r3, #5
 80088fa:	d03a      	beq.n	8008972 <UART_SetConfig+0x1052>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008900:	2b06      	cmp	r3, #6
 8008902:	d031      	beq.n	8008968 <UART_SetConfig+0x1048>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008908:	2b07      	cmp	r3, #7
 800890a:	d028      	beq.n	800895e <UART_SetConfig+0x103e>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008910:	2b08      	cmp	r3, #8
 8008912:	d01f      	beq.n	8008954 <UART_SetConfig+0x1034>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008918:	2b09      	cmp	r3, #9
 800891a:	d016      	beq.n	800894a <UART_SetConfig+0x102a>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008920:	2b0a      	cmp	r3, #10
 8008922:	d00d      	beq.n	8008940 <UART_SetConfig+0x1020>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008928:	2b0b      	cmp	r3, #11
 800892a:	d104      	bne.n	8008936 <UART_SetConfig+0x1016>
 800892c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008930:	f04f 0400 	mov.w	r4, #0
 8008934:	e03a      	b.n	80089ac <UART_SetConfig+0x108c>
 8008936:	f04f 0301 	mov.w	r3, #1
 800893a:	f04f 0400 	mov.w	r4, #0
 800893e:	e035      	b.n	80089ac <UART_SetConfig+0x108c>
 8008940:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008944:	f04f 0400 	mov.w	r4, #0
 8008948:	e030      	b.n	80089ac <UART_SetConfig+0x108c>
 800894a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800894e:	f04f 0400 	mov.w	r4, #0
 8008952:	e02b      	b.n	80089ac <UART_SetConfig+0x108c>
 8008954:	f04f 0320 	mov.w	r3, #32
 8008958:	f04f 0400 	mov.w	r4, #0
 800895c:	e026      	b.n	80089ac <UART_SetConfig+0x108c>
 800895e:	f04f 0310 	mov.w	r3, #16
 8008962:	f04f 0400 	mov.w	r4, #0
 8008966:	e021      	b.n	80089ac <UART_SetConfig+0x108c>
 8008968:	f04f 030c 	mov.w	r3, #12
 800896c:	f04f 0400 	mov.w	r4, #0
 8008970:	e01c      	b.n	80089ac <UART_SetConfig+0x108c>
 8008972:	f04f 030a 	mov.w	r3, #10
 8008976:	f04f 0400 	mov.w	r4, #0
 800897a:	e017      	b.n	80089ac <UART_SetConfig+0x108c>
 800897c:	f04f 0308 	mov.w	r3, #8
 8008980:	f04f 0400 	mov.w	r4, #0
 8008984:	e012      	b.n	80089ac <UART_SetConfig+0x108c>
 8008986:	f04f 0306 	mov.w	r3, #6
 800898a:	f04f 0400 	mov.w	r4, #0
 800898e:	e00d      	b.n	80089ac <UART_SetConfig+0x108c>
 8008990:	f04f 0304 	mov.w	r3, #4
 8008994:	f04f 0400 	mov.w	r4, #0
 8008998:	e008      	b.n	80089ac <UART_SetConfig+0x108c>
 800899a:	f04f 0302 	mov.w	r3, #2
 800899e:	f04f 0400 	mov.w	r4, #0
 80089a2:	e003      	b.n	80089ac <UART_SetConfig+0x108c>
 80089a4:	f04f 0301 	mov.w	r3, #1
 80089a8:	f04f 0400 	mov.w	r4, #0
 80089ac:	461a      	mov	r2, r3
 80089ae:	4623      	mov	r3, r4
 80089b0:	f7f7 fce6 	bl	8000380 <__aeabi_uldivmod>
 80089b4:	4603      	mov	r3, r0
 80089b6:	460c      	mov	r4, r1
 80089b8:	4619      	mov	r1, r3
 80089ba:	4622      	mov	r2, r4
 80089bc:	f04f 0300 	mov.w	r3, #0
 80089c0:	f04f 0400 	mov.w	r4, #0
 80089c4:	0214      	lsls	r4, r2, #8
 80089c6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80089ca:	020b      	lsls	r3, r1, #8
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	6852      	ldr	r2, [r2, #4]
 80089d0:	0852      	lsrs	r2, r2, #1
 80089d2:	4611      	mov	r1, r2
 80089d4:	f04f 0200 	mov.w	r2, #0
 80089d8:	eb13 0b01 	adds.w	fp, r3, r1
 80089dc:	eb44 0c02 	adc.w	ip, r4, r2
 80089e0:	4658      	mov	r0, fp
 80089e2:	4661      	mov	r1, ip
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	f04f 0400 	mov.w	r4, #0
 80089ec:	461a      	mov	r2, r3
 80089ee:	4623      	mov	r3, r4
 80089f0:	f7f7 fcc6 	bl	8000380 <__aeabi_uldivmod>
 80089f4:	4603      	mov	r3, r0
 80089f6:	460c      	mov	r4, r1
 80089f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80089fa:	e247      	b.n	8008e8c <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089fc:	4b96      	ldr	r3, [pc, #600]	; (8008c58 <UART_SetConfig+0x1338>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0320 	and.w	r3, r3, #32
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 80a3 	beq.w	8008b50 <UART_SetConfig+0x1230>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a0a:	4b93      	ldr	r3, [pc, #588]	; (8008c58 <UART_SetConfig+0x1338>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	08db      	lsrs	r3, r3, #3
 8008a10:	f003 0303 	and.w	r3, r3, #3
 8008a14:	4a91      	ldr	r2, [pc, #580]	; (8008c5c <UART_SetConfig+0x133c>)
 8008a16:	fa22 f303 	lsr.w	r3, r2, r3
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f04f 0100 	mov.w	r1, #0
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d067      	beq.n	8008af8 <UART_SetConfig+0x11d8>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d05e      	beq.n	8008aee <UART_SetConfig+0x11ce>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d055      	beq.n	8008ae4 <UART_SetConfig+0x11c4>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3c:	2b03      	cmp	r3, #3
 8008a3e:	d04c      	beq.n	8008ada <UART_SetConfig+0x11ba>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a44:	2b04      	cmp	r3, #4
 8008a46:	d043      	beq.n	8008ad0 <UART_SetConfig+0x11b0>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4c:	2b05      	cmp	r3, #5
 8008a4e:	d03a      	beq.n	8008ac6 <UART_SetConfig+0x11a6>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a54:	2b06      	cmp	r3, #6
 8008a56:	d031      	beq.n	8008abc <UART_SetConfig+0x119c>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5c:	2b07      	cmp	r3, #7
 8008a5e:	d028      	beq.n	8008ab2 <UART_SetConfig+0x1192>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a64:	2b08      	cmp	r3, #8
 8008a66:	d01f      	beq.n	8008aa8 <UART_SetConfig+0x1188>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6c:	2b09      	cmp	r3, #9
 8008a6e:	d016      	beq.n	8008a9e <UART_SetConfig+0x117e>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a74:	2b0a      	cmp	r3, #10
 8008a76:	d00d      	beq.n	8008a94 <UART_SetConfig+0x1174>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7c:	2b0b      	cmp	r3, #11
 8008a7e:	d104      	bne.n	8008a8a <UART_SetConfig+0x116a>
 8008a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a84:	f04f 0400 	mov.w	r4, #0
 8008a88:	e03a      	b.n	8008b00 <UART_SetConfig+0x11e0>
 8008a8a:	f04f 0301 	mov.w	r3, #1
 8008a8e:	f04f 0400 	mov.w	r4, #0
 8008a92:	e035      	b.n	8008b00 <UART_SetConfig+0x11e0>
 8008a94:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008a98:	f04f 0400 	mov.w	r4, #0
 8008a9c:	e030      	b.n	8008b00 <UART_SetConfig+0x11e0>
 8008a9e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008aa2:	f04f 0400 	mov.w	r4, #0
 8008aa6:	e02b      	b.n	8008b00 <UART_SetConfig+0x11e0>
 8008aa8:	f04f 0320 	mov.w	r3, #32
 8008aac:	f04f 0400 	mov.w	r4, #0
 8008ab0:	e026      	b.n	8008b00 <UART_SetConfig+0x11e0>
 8008ab2:	f04f 0310 	mov.w	r3, #16
 8008ab6:	f04f 0400 	mov.w	r4, #0
 8008aba:	e021      	b.n	8008b00 <UART_SetConfig+0x11e0>
 8008abc:	f04f 030c 	mov.w	r3, #12
 8008ac0:	f04f 0400 	mov.w	r4, #0
 8008ac4:	e01c      	b.n	8008b00 <UART_SetConfig+0x11e0>
 8008ac6:	f04f 030a 	mov.w	r3, #10
 8008aca:	f04f 0400 	mov.w	r4, #0
 8008ace:	e017      	b.n	8008b00 <UART_SetConfig+0x11e0>
 8008ad0:	f04f 0308 	mov.w	r3, #8
 8008ad4:	f04f 0400 	mov.w	r4, #0
 8008ad8:	e012      	b.n	8008b00 <UART_SetConfig+0x11e0>
 8008ada:	f04f 0306 	mov.w	r3, #6
 8008ade:	f04f 0400 	mov.w	r4, #0
 8008ae2:	e00d      	b.n	8008b00 <UART_SetConfig+0x11e0>
 8008ae4:	f04f 0304 	mov.w	r3, #4
 8008ae8:	f04f 0400 	mov.w	r4, #0
 8008aec:	e008      	b.n	8008b00 <UART_SetConfig+0x11e0>
 8008aee:	f04f 0302 	mov.w	r3, #2
 8008af2:	f04f 0400 	mov.w	r4, #0
 8008af6:	e003      	b.n	8008b00 <UART_SetConfig+0x11e0>
 8008af8:	f04f 0301 	mov.w	r3, #1
 8008afc:	f04f 0400 	mov.w	r4, #0
 8008b00:	461a      	mov	r2, r3
 8008b02:	4623      	mov	r3, r4
 8008b04:	f7f7 fc3c 	bl	8000380 <__aeabi_uldivmod>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	460c      	mov	r4, r1
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	4622      	mov	r2, r4
 8008b10:	f04f 0300 	mov.w	r3, #0
 8008b14:	f04f 0400 	mov.w	r4, #0
 8008b18:	0214      	lsls	r4, r2, #8
 8008b1a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008b1e:	020b      	lsls	r3, r1, #8
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	6852      	ldr	r2, [r2, #4]
 8008b24:	0852      	lsrs	r2, r2, #1
 8008b26:	4611      	mov	r1, r2
 8008b28:	f04f 0200 	mov.w	r2, #0
 8008b2c:	eb13 0b01 	adds.w	fp, r3, r1
 8008b30:	eb44 0c02 	adc.w	ip, r4, r2
 8008b34:	4658      	mov	r0, fp
 8008b36:	4661      	mov	r1, ip
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	f04f 0400 	mov.w	r4, #0
 8008b40:	461a      	mov	r2, r3
 8008b42:	4623      	mov	r3, r4
 8008b44:	f7f7 fc1c 	bl	8000380 <__aeabi_uldivmod>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8008b4e:	e19d      	b.n	8008e8c <UART_SetConfig+0x156c>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d05b      	beq.n	8008c10 <UART_SetConfig+0x12f0>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d053      	beq.n	8008c08 <UART_SetConfig+0x12e8>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d04b      	beq.n	8008c00 <UART_SetConfig+0x12e0>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6c:	2b03      	cmp	r3, #3
 8008b6e:	d043      	beq.n	8008bf8 <UART_SetConfig+0x12d8>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b74:	2b04      	cmp	r3, #4
 8008b76:	d03b      	beq.n	8008bf0 <UART_SetConfig+0x12d0>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7c:	2b05      	cmp	r3, #5
 8008b7e:	d033      	beq.n	8008be8 <UART_SetConfig+0x12c8>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b84:	2b06      	cmp	r3, #6
 8008b86:	d02b      	beq.n	8008be0 <UART_SetConfig+0x12c0>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8c:	2b07      	cmp	r3, #7
 8008b8e:	d023      	beq.n	8008bd8 <UART_SetConfig+0x12b8>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b94:	2b08      	cmp	r3, #8
 8008b96:	d01b      	beq.n	8008bd0 <UART_SetConfig+0x12b0>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9c:	2b09      	cmp	r3, #9
 8008b9e:	d013      	beq.n	8008bc8 <UART_SetConfig+0x12a8>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba4:	2b0a      	cmp	r3, #10
 8008ba6:	d00b      	beq.n	8008bc0 <UART_SetConfig+0x12a0>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bac:	2b0b      	cmp	r3, #11
 8008bae:	d103      	bne.n	8008bb8 <UART_SetConfig+0x1298>
 8008bb0:	4b2a      	ldr	r3, [pc, #168]	; (8008c5c <UART_SetConfig+0x133c>)
 8008bb2:	f04f 0400 	mov.w	r4, #0
 8008bb6:	e02e      	b.n	8008c16 <UART_SetConfig+0x12f6>
 8008bb8:	4b29      	ldr	r3, [pc, #164]	; (8008c60 <UART_SetConfig+0x1340>)
 8008bba:	f04f 0403 	mov.w	r4, #3
 8008bbe:	e02a      	b.n	8008c16 <UART_SetConfig+0x12f6>
 8008bc0:	4b28      	ldr	r3, [pc, #160]	; (8008c64 <UART_SetConfig+0x1344>)
 8008bc2:	f04f 0400 	mov.w	r4, #0
 8008bc6:	e026      	b.n	8008c16 <UART_SetConfig+0x12f6>
 8008bc8:	4b27      	ldr	r3, [pc, #156]	; (8008c68 <UART_SetConfig+0x1348>)
 8008bca:	f04f 0400 	mov.w	r4, #0
 8008bce:	e022      	b.n	8008c16 <UART_SetConfig+0x12f6>
 8008bd0:	4b26      	ldr	r3, [pc, #152]	; (8008c6c <UART_SetConfig+0x134c>)
 8008bd2:	f04f 0400 	mov.w	r4, #0
 8008bd6:	e01e      	b.n	8008c16 <UART_SetConfig+0x12f6>
 8008bd8:	4b25      	ldr	r3, [pc, #148]	; (8008c70 <UART_SetConfig+0x1350>)
 8008bda:	f04f 0400 	mov.w	r4, #0
 8008bde:	e01a      	b.n	8008c16 <UART_SetConfig+0x12f6>
 8008be0:	a419      	add	r4, pc, #100	; (adr r4, 8008c48 <UART_SetConfig+0x1328>)
 8008be2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008be6:	e016      	b.n	8008c16 <UART_SetConfig+0x12f6>
 8008be8:	4b22      	ldr	r3, [pc, #136]	; (8008c74 <UART_SetConfig+0x1354>)
 8008bea:	f04f 0400 	mov.w	r4, #0
 8008bee:	e012      	b.n	8008c16 <UART_SetConfig+0x12f6>
 8008bf0:	4b21      	ldr	r3, [pc, #132]	; (8008c78 <UART_SetConfig+0x1358>)
 8008bf2:	f04f 0400 	mov.w	r4, #0
 8008bf6:	e00e      	b.n	8008c16 <UART_SetConfig+0x12f6>
 8008bf8:	a415      	add	r4, pc, #84	; (adr r4, 8008c50 <UART_SetConfig+0x1330>)
 8008bfa:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008bfe:	e00a      	b.n	8008c16 <UART_SetConfig+0x12f6>
 8008c00:	4b1e      	ldr	r3, [pc, #120]	; (8008c7c <UART_SetConfig+0x135c>)
 8008c02:	f04f 0400 	mov.w	r4, #0
 8008c06:	e006      	b.n	8008c16 <UART_SetConfig+0x12f6>
 8008c08:	4b1d      	ldr	r3, [pc, #116]	; (8008c80 <UART_SetConfig+0x1360>)
 8008c0a:	f04f 0401 	mov.w	r4, #1
 8008c0e:	e002      	b.n	8008c16 <UART_SetConfig+0x12f6>
 8008c10:	4b13      	ldr	r3, [pc, #76]	; (8008c60 <UART_SetConfig+0x1340>)
 8008c12:	f04f 0403 	mov.w	r4, #3
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	6852      	ldr	r2, [r2, #4]
 8008c1a:	0852      	lsrs	r2, r2, #1
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	f04f 0200 	mov.w	r2, #0
 8008c22:	eb13 0b01 	adds.w	fp, r3, r1
 8008c26:	eb44 0c02 	adc.w	ip, r4, r2
 8008c2a:	4658      	mov	r0, fp
 8008c2c:	4661      	mov	r1, ip
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	f04f 0400 	mov.w	r4, #0
 8008c36:	461a      	mov	r2, r3
 8008c38:	4623      	mov	r3, r4
 8008c3a:	f7f7 fba1 	bl	8000380 <__aeabi_uldivmod>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	460c      	mov	r4, r1
 8008c42:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008c44:	e122      	b.n	8008e8c <UART_SetConfig+0x156c>
 8008c46:	bf00      	nop
 8008c48:	51615500 	.word	0x51615500
 8008c4c:	00000000 	.word	0x00000000
 8008c50:	a2c2aa00 	.word	0xa2c2aa00
 8008c54:	00000000 	.word	0x00000000
 8008c58:	58024400 	.word	0x58024400
 8008c5c:	03d09000 	.word	0x03d09000
 8008c60:	d0900000 	.word	0xd0900000
 8008c64:	07a12000 	.word	0x07a12000
 8008c68:	0f424000 	.word	0x0f424000
 8008c6c:	1e848000 	.word	0x1e848000
 8008c70:	3d090000 	.word	0x3d090000
 8008c74:	61a80000 	.word	0x61a80000
 8008c78:	7a120000 	.word	0x7a120000
 8008c7c:	f4240000 	.word	0xf4240000
 8008c80:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d05b      	beq.n	8008d44 <UART_SetConfig+0x1424>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d053      	beq.n	8008d3c <UART_SetConfig+0x141c>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d04b      	beq.n	8008d34 <UART_SetConfig+0x1414>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d043      	beq.n	8008d2c <UART_SetConfig+0x140c>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca8:	2b04      	cmp	r3, #4
 8008caa:	d03b      	beq.n	8008d24 <UART_SetConfig+0x1404>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb0:	2b05      	cmp	r3, #5
 8008cb2:	d033      	beq.n	8008d1c <UART_SetConfig+0x13fc>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb8:	2b06      	cmp	r3, #6
 8008cba:	d02b      	beq.n	8008d14 <UART_SetConfig+0x13f4>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc0:	2b07      	cmp	r3, #7
 8008cc2:	d023      	beq.n	8008d0c <UART_SetConfig+0x13ec>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc8:	2b08      	cmp	r3, #8
 8008cca:	d01b      	beq.n	8008d04 <UART_SetConfig+0x13e4>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd0:	2b09      	cmp	r3, #9
 8008cd2:	d013      	beq.n	8008cfc <UART_SetConfig+0x13dc>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd8:	2b0a      	cmp	r3, #10
 8008cda:	d00b      	beq.n	8008cf4 <UART_SetConfig+0x13d4>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce0:	2b0b      	cmp	r3, #11
 8008ce2:	d103      	bne.n	8008cec <UART_SetConfig+0x13cc>
 8008ce4:	4bc0      	ldr	r3, [pc, #768]	; (8008fe8 <UART_SetConfig+0x16c8>)
 8008ce6:	f04f 0400 	mov.w	r4, #0
 8008cea:	e02e      	b.n	8008d4a <UART_SetConfig+0x142a>
 8008cec:	4bbf      	ldr	r3, [pc, #764]	; (8008fec <UART_SetConfig+0x16cc>)
 8008cee:	f04f 0400 	mov.w	r4, #0
 8008cf2:	e02a      	b.n	8008d4a <UART_SetConfig+0x142a>
 8008cf4:	4bbe      	ldr	r3, [pc, #760]	; (8008ff0 <UART_SetConfig+0x16d0>)
 8008cf6:	f04f 0400 	mov.w	r4, #0
 8008cfa:	e026      	b.n	8008d4a <UART_SetConfig+0x142a>
 8008cfc:	4bbd      	ldr	r3, [pc, #756]	; (8008ff4 <UART_SetConfig+0x16d4>)
 8008cfe:	f04f 0400 	mov.w	r4, #0
 8008d02:	e022      	b.n	8008d4a <UART_SetConfig+0x142a>
 8008d04:	4bbc      	ldr	r3, [pc, #752]	; (8008ff8 <UART_SetConfig+0x16d8>)
 8008d06:	f04f 0400 	mov.w	r4, #0
 8008d0a:	e01e      	b.n	8008d4a <UART_SetConfig+0x142a>
 8008d0c:	4bbb      	ldr	r3, [pc, #748]	; (8008ffc <UART_SetConfig+0x16dc>)
 8008d0e:	f04f 0400 	mov.w	r4, #0
 8008d12:	e01a      	b.n	8008d4a <UART_SetConfig+0x142a>
 8008d14:	a4b0      	add	r4, pc, #704	; (adr r4, 8008fd8 <UART_SetConfig+0x16b8>)
 8008d16:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008d1a:	e016      	b.n	8008d4a <UART_SetConfig+0x142a>
 8008d1c:	4bb8      	ldr	r3, [pc, #736]	; (8009000 <UART_SetConfig+0x16e0>)
 8008d1e:	f04f 0400 	mov.w	r4, #0
 8008d22:	e012      	b.n	8008d4a <UART_SetConfig+0x142a>
 8008d24:	4bb7      	ldr	r3, [pc, #732]	; (8009004 <UART_SetConfig+0x16e4>)
 8008d26:	f04f 0400 	mov.w	r4, #0
 8008d2a:	e00e      	b.n	8008d4a <UART_SetConfig+0x142a>
 8008d2c:	a4ac      	add	r4, pc, #688	; (adr r4, 8008fe0 <UART_SetConfig+0x16c0>)
 8008d2e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008d32:	e00a      	b.n	8008d4a <UART_SetConfig+0x142a>
 8008d34:	4bb4      	ldr	r3, [pc, #720]	; (8009008 <UART_SetConfig+0x16e8>)
 8008d36:	f04f 0400 	mov.w	r4, #0
 8008d3a:	e006      	b.n	8008d4a <UART_SetConfig+0x142a>
 8008d3c:	4bb3      	ldr	r3, [pc, #716]	; (800900c <UART_SetConfig+0x16ec>)
 8008d3e:	f04f 0400 	mov.w	r4, #0
 8008d42:	e002      	b.n	8008d4a <UART_SetConfig+0x142a>
 8008d44:	4ba9      	ldr	r3, [pc, #676]	; (8008fec <UART_SetConfig+0x16cc>)
 8008d46:	f04f 0400 	mov.w	r4, #0
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	6852      	ldr	r2, [r2, #4]
 8008d4e:	0852      	lsrs	r2, r2, #1
 8008d50:	4611      	mov	r1, r2
 8008d52:	f04f 0200 	mov.w	r2, #0
 8008d56:	eb13 0b01 	adds.w	fp, r3, r1
 8008d5a:	eb44 0c02 	adc.w	ip, r4, r2
 8008d5e:	4658      	mov	r0, fp
 8008d60:	4661      	mov	r1, ip
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f04f 0400 	mov.w	r4, #0
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	4623      	mov	r3, r4
 8008d6e:	f7f7 fb07 	bl	8000380 <__aeabi_uldivmod>
 8008d72:	4603      	mov	r3, r0
 8008d74:	460c      	mov	r4, r1
 8008d76:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008d78:	e088      	b.n	8008e8c <UART_SetConfig+0x156c>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d064      	beq.n	8008e4c <UART_SetConfig+0x152c>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d05b      	beq.n	8008e42 <UART_SetConfig+0x1522>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d052      	beq.n	8008e38 <UART_SetConfig+0x1518>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d96:	2b03      	cmp	r3, #3
 8008d98:	d04a      	beq.n	8008e30 <UART_SetConfig+0x1510>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9e:	2b04      	cmp	r3, #4
 8008da0:	d041      	beq.n	8008e26 <UART_SetConfig+0x1506>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da6:	2b05      	cmp	r3, #5
 8008da8:	d039      	beq.n	8008e1e <UART_SetConfig+0x14fe>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dae:	2b06      	cmp	r3, #6
 8008db0:	d031      	beq.n	8008e16 <UART_SetConfig+0x14f6>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db6:	2b07      	cmp	r3, #7
 8008db8:	d028      	beq.n	8008e0c <UART_SetConfig+0x14ec>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbe:	2b08      	cmp	r3, #8
 8008dc0:	d01f      	beq.n	8008e02 <UART_SetConfig+0x14e2>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc6:	2b09      	cmp	r3, #9
 8008dc8:	d016      	beq.n	8008df8 <UART_SetConfig+0x14d8>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dce:	2b0a      	cmp	r3, #10
 8008dd0:	d00d      	beq.n	8008dee <UART_SetConfig+0x14ce>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd6:	2b0b      	cmp	r3, #11
 8008dd8:	d104      	bne.n	8008de4 <UART_SetConfig+0x14c4>
 8008dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dde:	f04f 0400 	mov.w	r4, #0
 8008de2:	e037      	b.n	8008e54 <UART_SetConfig+0x1534>
 8008de4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008de8:	f04f 0400 	mov.w	r4, #0
 8008dec:	e032      	b.n	8008e54 <UART_SetConfig+0x1534>
 8008dee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008df2:	f04f 0400 	mov.w	r4, #0
 8008df6:	e02d      	b.n	8008e54 <UART_SetConfig+0x1534>
 8008df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008dfc:	f04f 0400 	mov.w	r4, #0
 8008e00:	e028      	b.n	8008e54 <UART_SetConfig+0x1534>
 8008e02:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008e06:	f04f 0400 	mov.w	r4, #0
 8008e0a:	e023      	b.n	8008e54 <UART_SetConfig+0x1534>
 8008e0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008e10:	f04f 0400 	mov.w	r4, #0
 8008e14:	e01e      	b.n	8008e54 <UART_SetConfig+0x1534>
 8008e16:	4b7e      	ldr	r3, [pc, #504]	; (8009010 <UART_SetConfig+0x16f0>)
 8008e18:	f04f 0400 	mov.w	r4, #0
 8008e1c:	e01a      	b.n	8008e54 <UART_SetConfig+0x1534>
 8008e1e:	4b7d      	ldr	r3, [pc, #500]	; (8009014 <UART_SetConfig+0x16f4>)
 8008e20:	f04f 0400 	mov.w	r4, #0
 8008e24:	e016      	b.n	8008e54 <UART_SetConfig+0x1534>
 8008e26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e2a:	f04f 0400 	mov.w	r4, #0
 8008e2e:	e011      	b.n	8008e54 <UART_SetConfig+0x1534>
 8008e30:	4b79      	ldr	r3, [pc, #484]	; (8009018 <UART_SetConfig+0x16f8>)
 8008e32:	f04f 0400 	mov.w	r4, #0
 8008e36:	e00d      	b.n	8008e54 <UART_SetConfig+0x1534>
 8008e38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008e3c:	f04f 0400 	mov.w	r4, #0
 8008e40:	e008      	b.n	8008e54 <UART_SetConfig+0x1534>
 8008e42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008e46:	f04f 0400 	mov.w	r4, #0
 8008e4a:	e003      	b.n	8008e54 <UART_SetConfig+0x1534>
 8008e4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008e50:	f04f 0400 	mov.w	r4, #0
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	6852      	ldr	r2, [r2, #4]
 8008e58:	0852      	lsrs	r2, r2, #1
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	f04f 0200 	mov.w	r2, #0
 8008e60:	eb13 0b01 	adds.w	fp, r3, r1
 8008e64:	eb44 0c02 	adc.w	ip, r4, r2
 8008e68:	4658      	mov	r0, fp
 8008e6a:	4661      	mov	r1, ip
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	f04f 0400 	mov.w	r4, #0
 8008e74:	461a      	mov	r2, r3
 8008e76:	4623      	mov	r3, r4
 8008e78:	f7f7 fa82 	bl	8000380 <__aeabi_uldivmod>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	460c      	mov	r4, r1
 8008e80:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008e82:	e003      	b.n	8008e8c <UART_SetConfig+0x156c>
          default:
            ret = HAL_ERROR;
 8008e84:	2301      	movs	r3, #1
 8008e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8008e8a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e92:	d309      	bcc.n	8008ea8 <UART_SetConfig+0x1588>
 8008e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e9a:	d205      	bcs.n	8008ea8 <UART_SetConfig+0x1588>
        {
          huart->Instance->BRR = usartdiv;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ea2:	60da      	str	r2, [r3, #12]
 8008ea4:	f000 bf85 	b.w	8009db2 <UART_SetConfig+0x2492>
        }
        else
        {
          ret = HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008eae:	f000 bf80 	b.w	8009db2 <UART_SetConfig+0x2492>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	69db      	ldr	r3, [r3, #28]
 8008eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008eba:	f040 83da 	bne.w	8009672 <UART_SetConfig+0x1d52>
  {
    switch (clocksource)
 8008ebe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008ec2:	2b40      	cmp	r3, #64	; 0x40
 8008ec4:	f200 83b3 	bhi.w	800962e <UART_SetConfig+0x1d0e>
 8008ec8:	a201      	add	r2, pc, #4	; (adr r2, 8008ed0 <UART_SetConfig+0x15b0>)
 8008eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ece:	bf00      	nop
 8008ed0:	0800901d 	.word	0x0800901d
 8008ed4:	080090d5 	.word	0x080090d5
 8008ed8:	0800962f 	.word	0x0800962f
 8008edc:	0800962f 	.word	0x0800962f
 8008ee0:	0800918d 	.word	0x0800918d
 8008ee4:	0800962f 	.word	0x0800962f
 8008ee8:	0800962f 	.word	0x0800962f
 8008eec:	0800962f 	.word	0x0800962f
 8008ef0:	08009249 	.word	0x08009249
 8008ef4:	0800962f 	.word	0x0800962f
 8008ef8:	0800962f 	.word	0x0800962f
 8008efc:	0800962f 	.word	0x0800962f
 8008f00:	0800962f 	.word	0x0800962f
 8008f04:	0800962f 	.word	0x0800962f
 8008f08:	0800962f 	.word	0x0800962f
 8008f0c:	0800962f 	.word	0x0800962f
 8008f10:	08009305 	.word	0x08009305
 8008f14:	0800962f 	.word	0x0800962f
 8008f18:	0800962f 	.word	0x0800962f
 8008f1c:	0800962f 	.word	0x0800962f
 8008f20:	0800962f 	.word	0x0800962f
 8008f24:	0800962f 	.word	0x0800962f
 8008f28:	0800962f 	.word	0x0800962f
 8008f2c:	0800962f 	.word	0x0800962f
 8008f30:	0800962f 	.word	0x0800962f
 8008f34:	0800962f 	.word	0x0800962f
 8008f38:	0800962f 	.word	0x0800962f
 8008f3c:	0800962f 	.word	0x0800962f
 8008f40:	0800962f 	.word	0x0800962f
 8008f44:	0800962f 	.word	0x0800962f
 8008f48:	0800962f 	.word	0x0800962f
 8008f4c:	0800962f 	.word	0x0800962f
 8008f50:	08009477 	.word	0x08009477
 8008f54:	0800962f 	.word	0x0800962f
 8008f58:	0800962f 	.word	0x0800962f
 8008f5c:	0800962f 	.word	0x0800962f
 8008f60:	0800962f 	.word	0x0800962f
 8008f64:	0800962f 	.word	0x0800962f
 8008f68:	0800962f 	.word	0x0800962f
 8008f6c:	0800962f 	.word	0x0800962f
 8008f70:	0800962f 	.word	0x0800962f
 8008f74:	0800962f 	.word	0x0800962f
 8008f78:	0800962f 	.word	0x0800962f
 8008f7c:	0800962f 	.word	0x0800962f
 8008f80:	0800962f 	.word	0x0800962f
 8008f84:	0800962f 	.word	0x0800962f
 8008f88:	0800962f 	.word	0x0800962f
 8008f8c:	0800962f 	.word	0x0800962f
 8008f90:	0800962f 	.word	0x0800962f
 8008f94:	0800962f 	.word	0x0800962f
 8008f98:	0800962f 	.word	0x0800962f
 8008f9c:	0800962f 	.word	0x0800962f
 8008fa0:	0800962f 	.word	0x0800962f
 8008fa4:	0800962f 	.word	0x0800962f
 8008fa8:	0800962f 	.word	0x0800962f
 8008fac:	0800962f 	.word	0x0800962f
 8008fb0:	0800962f 	.word	0x0800962f
 8008fb4:	0800962f 	.word	0x0800962f
 8008fb8:	0800962f 	.word	0x0800962f
 8008fbc:	0800962f 	.word	0x0800962f
 8008fc0:	0800962f 	.word	0x0800962f
 8008fc4:	0800962f 	.word	0x0800962f
 8008fc8:	0800962f 	.word	0x0800962f
 8008fcc:	0800962f 	.word	0x0800962f
 8008fd0:	0800956d 	.word	0x0800956d
 8008fd4:	f3af 8000 	nop.w
 8008fd8:	05161500 	.word	0x05161500
 8008fdc:	00000000 	.word	0x00000000
 8008fe0:	0a2c2a00 	.word	0x0a2c2a00
 8008fe4:	00000000 	.word	0x00000000
 8008fe8:	003d0900 	.word	0x003d0900
 8008fec:	3d090000 	.word	0x3d090000
 8008ff0:	007a1200 	.word	0x007a1200
 8008ff4:	00f42400 	.word	0x00f42400
 8008ff8:	01e84800 	.word	0x01e84800
 8008ffc:	03d09000 	.word	0x03d09000
 8009000:	061a8000 	.word	0x061a8000
 8009004:	07a12000 	.word	0x07a12000
 8009008:	0f424000 	.word	0x0f424000
 800900c:	1e848000 	.word	0x1e848000
 8009010:	000aaa00 	.word	0x000aaa00
 8009014:	000ccc00 	.word	0x000ccc00
 8009018:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800901c:	f7fc f968 	bl	80052f0 <HAL_RCC_GetPCLK1Freq>
 8009020:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009026:	2b00      	cmp	r3, #0
 8009028:	d044      	beq.n	80090b4 <UART_SetConfig+0x1794>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902e:	2b01      	cmp	r3, #1
 8009030:	d03e      	beq.n	80090b0 <UART_SetConfig+0x1790>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009036:	2b02      	cmp	r3, #2
 8009038:	d038      	beq.n	80090ac <UART_SetConfig+0x178c>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903e:	2b03      	cmp	r3, #3
 8009040:	d032      	beq.n	80090a8 <UART_SetConfig+0x1788>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009046:	2b04      	cmp	r3, #4
 8009048:	d02c      	beq.n	80090a4 <UART_SetConfig+0x1784>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904e:	2b05      	cmp	r3, #5
 8009050:	d026      	beq.n	80090a0 <UART_SetConfig+0x1780>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	2b06      	cmp	r3, #6
 8009058:	d020      	beq.n	800909c <UART_SetConfig+0x177c>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905e:	2b07      	cmp	r3, #7
 8009060:	d01a      	beq.n	8009098 <UART_SetConfig+0x1778>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009066:	2b08      	cmp	r3, #8
 8009068:	d014      	beq.n	8009094 <UART_SetConfig+0x1774>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906e:	2b09      	cmp	r3, #9
 8009070:	d00e      	beq.n	8009090 <UART_SetConfig+0x1770>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009076:	2b0a      	cmp	r3, #10
 8009078:	d008      	beq.n	800908c <UART_SetConfig+0x176c>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	2b0b      	cmp	r3, #11
 8009080:	d102      	bne.n	8009088 <UART_SetConfig+0x1768>
 8009082:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009086:	e016      	b.n	80090b6 <UART_SetConfig+0x1796>
 8009088:	2301      	movs	r3, #1
 800908a:	e014      	b.n	80090b6 <UART_SetConfig+0x1796>
 800908c:	2380      	movs	r3, #128	; 0x80
 800908e:	e012      	b.n	80090b6 <UART_SetConfig+0x1796>
 8009090:	2340      	movs	r3, #64	; 0x40
 8009092:	e010      	b.n	80090b6 <UART_SetConfig+0x1796>
 8009094:	2320      	movs	r3, #32
 8009096:	e00e      	b.n	80090b6 <UART_SetConfig+0x1796>
 8009098:	2310      	movs	r3, #16
 800909a:	e00c      	b.n	80090b6 <UART_SetConfig+0x1796>
 800909c:	230c      	movs	r3, #12
 800909e:	e00a      	b.n	80090b6 <UART_SetConfig+0x1796>
 80090a0:	230a      	movs	r3, #10
 80090a2:	e008      	b.n	80090b6 <UART_SetConfig+0x1796>
 80090a4:	2308      	movs	r3, #8
 80090a6:	e006      	b.n	80090b6 <UART_SetConfig+0x1796>
 80090a8:	2306      	movs	r3, #6
 80090aa:	e004      	b.n	80090b6 <UART_SetConfig+0x1796>
 80090ac:	2304      	movs	r3, #4
 80090ae:	e002      	b.n	80090b6 <UART_SetConfig+0x1796>
 80090b0:	2302      	movs	r3, #2
 80090b2:	e000      	b.n	80090b6 <UART_SetConfig+0x1796>
 80090b4:	2301      	movs	r3, #1
 80090b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090bc:	005a      	lsls	r2, r3, #1
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	085b      	lsrs	r3, r3, #1
 80090c4:	441a      	add	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80090d2:	e2b0      	b.n	8009636 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090d4:	f7fc f922 	bl	800531c <HAL_RCC_GetPCLK2Freq>
 80090d8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d044      	beq.n	800916c <UART_SetConfig+0x184c>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d03e      	beq.n	8009168 <UART_SetConfig+0x1848>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d038      	beq.n	8009164 <UART_SetConfig+0x1844>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	d032      	beq.n	8009160 <UART_SetConfig+0x1840>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fe:	2b04      	cmp	r3, #4
 8009100:	d02c      	beq.n	800915c <UART_SetConfig+0x183c>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009106:	2b05      	cmp	r3, #5
 8009108:	d026      	beq.n	8009158 <UART_SetConfig+0x1838>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910e:	2b06      	cmp	r3, #6
 8009110:	d020      	beq.n	8009154 <UART_SetConfig+0x1834>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009116:	2b07      	cmp	r3, #7
 8009118:	d01a      	beq.n	8009150 <UART_SetConfig+0x1830>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911e:	2b08      	cmp	r3, #8
 8009120:	d014      	beq.n	800914c <UART_SetConfig+0x182c>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009126:	2b09      	cmp	r3, #9
 8009128:	d00e      	beq.n	8009148 <UART_SetConfig+0x1828>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912e:	2b0a      	cmp	r3, #10
 8009130:	d008      	beq.n	8009144 <UART_SetConfig+0x1824>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009136:	2b0b      	cmp	r3, #11
 8009138:	d102      	bne.n	8009140 <UART_SetConfig+0x1820>
 800913a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800913e:	e016      	b.n	800916e <UART_SetConfig+0x184e>
 8009140:	2301      	movs	r3, #1
 8009142:	e014      	b.n	800916e <UART_SetConfig+0x184e>
 8009144:	2380      	movs	r3, #128	; 0x80
 8009146:	e012      	b.n	800916e <UART_SetConfig+0x184e>
 8009148:	2340      	movs	r3, #64	; 0x40
 800914a:	e010      	b.n	800916e <UART_SetConfig+0x184e>
 800914c:	2320      	movs	r3, #32
 800914e:	e00e      	b.n	800916e <UART_SetConfig+0x184e>
 8009150:	2310      	movs	r3, #16
 8009152:	e00c      	b.n	800916e <UART_SetConfig+0x184e>
 8009154:	230c      	movs	r3, #12
 8009156:	e00a      	b.n	800916e <UART_SetConfig+0x184e>
 8009158:	230a      	movs	r3, #10
 800915a:	e008      	b.n	800916e <UART_SetConfig+0x184e>
 800915c:	2308      	movs	r3, #8
 800915e:	e006      	b.n	800916e <UART_SetConfig+0x184e>
 8009160:	2306      	movs	r3, #6
 8009162:	e004      	b.n	800916e <UART_SetConfig+0x184e>
 8009164:	2304      	movs	r3, #4
 8009166:	e002      	b.n	800916e <UART_SetConfig+0x184e>
 8009168:	2302      	movs	r3, #2
 800916a:	e000      	b.n	800916e <UART_SetConfig+0x184e>
 800916c:	2301      	movs	r3, #1
 800916e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009170:	fbb2 f3f3 	udiv	r3, r2, r3
 8009174:	005a      	lsls	r2, r3, #1
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	085b      	lsrs	r3, r3, #1
 800917c:	441a      	add	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	fbb2 f3f3 	udiv	r3, r2, r3
 8009186:	b29b      	uxth	r3, r3
 8009188:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800918a:	e254      	b.n	8009636 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800918c:	f107 0318 	add.w	r3, r7, #24
 8009190:	4618      	mov	r0, r3
 8009192:	f7fd fab1 	bl	80066f8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009196:	69fa      	ldr	r2, [r7, #28]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919c:	2b00      	cmp	r3, #0
 800919e:	d044      	beq.n	800922a <UART_SetConfig+0x190a>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d03e      	beq.n	8009226 <UART_SetConfig+0x1906>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d038      	beq.n	8009222 <UART_SetConfig+0x1902>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b4:	2b03      	cmp	r3, #3
 80091b6:	d032      	beq.n	800921e <UART_SetConfig+0x18fe>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091bc:	2b04      	cmp	r3, #4
 80091be:	d02c      	beq.n	800921a <UART_SetConfig+0x18fa>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c4:	2b05      	cmp	r3, #5
 80091c6:	d026      	beq.n	8009216 <UART_SetConfig+0x18f6>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091cc:	2b06      	cmp	r3, #6
 80091ce:	d020      	beq.n	8009212 <UART_SetConfig+0x18f2>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d4:	2b07      	cmp	r3, #7
 80091d6:	d01a      	beq.n	800920e <UART_SetConfig+0x18ee>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	2b08      	cmp	r3, #8
 80091de:	d014      	beq.n	800920a <UART_SetConfig+0x18ea>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e4:	2b09      	cmp	r3, #9
 80091e6:	d00e      	beq.n	8009206 <UART_SetConfig+0x18e6>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ec:	2b0a      	cmp	r3, #10
 80091ee:	d008      	beq.n	8009202 <UART_SetConfig+0x18e2>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f4:	2b0b      	cmp	r3, #11
 80091f6:	d102      	bne.n	80091fe <UART_SetConfig+0x18de>
 80091f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091fc:	e016      	b.n	800922c <UART_SetConfig+0x190c>
 80091fe:	2301      	movs	r3, #1
 8009200:	e014      	b.n	800922c <UART_SetConfig+0x190c>
 8009202:	2380      	movs	r3, #128	; 0x80
 8009204:	e012      	b.n	800922c <UART_SetConfig+0x190c>
 8009206:	2340      	movs	r3, #64	; 0x40
 8009208:	e010      	b.n	800922c <UART_SetConfig+0x190c>
 800920a:	2320      	movs	r3, #32
 800920c:	e00e      	b.n	800922c <UART_SetConfig+0x190c>
 800920e:	2310      	movs	r3, #16
 8009210:	e00c      	b.n	800922c <UART_SetConfig+0x190c>
 8009212:	230c      	movs	r3, #12
 8009214:	e00a      	b.n	800922c <UART_SetConfig+0x190c>
 8009216:	230a      	movs	r3, #10
 8009218:	e008      	b.n	800922c <UART_SetConfig+0x190c>
 800921a:	2308      	movs	r3, #8
 800921c:	e006      	b.n	800922c <UART_SetConfig+0x190c>
 800921e:	2306      	movs	r3, #6
 8009220:	e004      	b.n	800922c <UART_SetConfig+0x190c>
 8009222:	2304      	movs	r3, #4
 8009224:	e002      	b.n	800922c <UART_SetConfig+0x190c>
 8009226:	2302      	movs	r3, #2
 8009228:	e000      	b.n	800922c <UART_SetConfig+0x190c>
 800922a:	2301      	movs	r3, #1
 800922c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009230:	005a      	lsls	r2, r3, #1
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	085b      	lsrs	r3, r3, #1
 8009238:	441a      	add	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009242:	b29b      	uxth	r3, r3
 8009244:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009246:	e1f6      	b.n	8009636 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009248:	f107 030c 	add.w	r3, r7, #12
 800924c:	4618      	mov	r0, r3
 800924e:	f7fd fb9f 	bl	8006990 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009252:	693a      	ldr	r2, [r7, #16]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009258:	2b00      	cmp	r3, #0
 800925a:	d044      	beq.n	80092e6 <UART_SetConfig+0x19c6>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009260:	2b01      	cmp	r3, #1
 8009262:	d03e      	beq.n	80092e2 <UART_SetConfig+0x19c2>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009268:	2b02      	cmp	r3, #2
 800926a:	d038      	beq.n	80092de <UART_SetConfig+0x19be>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009270:	2b03      	cmp	r3, #3
 8009272:	d032      	beq.n	80092da <UART_SetConfig+0x19ba>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009278:	2b04      	cmp	r3, #4
 800927a:	d02c      	beq.n	80092d6 <UART_SetConfig+0x19b6>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009280:	2b05      	cmp	r3, #5
 8009282:	d026      	beq.n	80092d2 <UART_SetConfig+0x19b2>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009288:	2b06      	cmp	r3, #6
 800928a:	d020      	beq.n	80092ce <UART_SetConfig+0x19ae>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009290:	2b07      	cmp	r3, #7
 8009292:	d01a      	beq.n	80092ca <UART_SetConfig+0x19aa>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009298:	2b08      	cmp	r3, #8
 800929a:	d014      	beq.n	80092c6 <UART_SetConfig+0x19a6>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a0:	2b09      	cmp	r3, #9
 80092a2:	d00e      	beq.n	80092c2 <UART_SetConfig+0x19a2>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a8:	2b0a      	cmp	r3, #10
 80092aa:	d008      	beq.n	80092be <UART_SetConfig+0x199e>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b0:	2b0b      	cmp	r3, #11
 80092b2:	d102      	bne.n	80092ba <UART_SetConfig+0x199a>
 80092b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092b8:	e016      	b.n	80092e8 <UART_SetConfig+0x19c8>
 80092ba:	2301      	movs	r3, #1
 80092bc:	e014      	b.n	80092e8 <UART_SetConfig+0x19c8>
 80092be:	2380      	movs	r3, #128	; 0x80
 80092c0:	e012      	b.n	80092e8 <UART_SetConfig+0x19c8>
 80092c2:	2340      	movs	r3, #64	; 0x40
 80092c4:	e010      	b.n	80092e8 <UART_SetConfig+0x19c8>
 80092c6:	2320      	movs	r3, #32
 80092c8:	e00e      	b.n	80092e8 <UART_SetConfig+0x19c8>
 80092ca:	2310      	movs	r3, #16
 80092cc:	e00c      	b.n	80092e8 <UART_SetConfig+0x19c8>
 80092ce:	230c      	movs	r3, #12
 80092d0:	e00a      	b.n	80092e8 <UART_SetConfig+0x19c8>
 80092d2:	230a      	movs	r3, #10
 80092d4:	e008      	b.n	80092e8 <UART_SetConfig+0x19c8>
 80092d6:	2308      	movs	r3, #8
 80092d8:	e006      	b.n	80092e8 <UART_SetConfig+0x19c8>
 80092da:	2306      	movs	r3, #6
 80092dc:	e004      	b.n	80092e8 <UART_SetConfig+0x19c8>
 80092de:	2304      	movs	r3, #4
 80092e0:	e002      	b.n	80092e8 <UART_SetConfig+0x19c8>
 80092e2:	2302      	movs	r3, #2
 80092e4:	e000      	b.n	80092e8 <UART_SetConfig+0x19c8>
 80092e6:	2301      	movs	r3, #1
 80092e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80092ec:	005a      	lsls	r2, r3, #1
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	085b      	lsrs	r3, r3, #1
 80092f4:	441a      	add	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80092fe:	b29b      	uxth	r3, r3
 8009300:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009302:	e198      	b.n	8009636 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009304:	4b87      	ldr	r3, [pc, #540]	; (8009524 <UART_SetConfig+0x1c04>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f003 0320 	and.w	r3, r3, #32
 800930c:	2b00      	cmp	r3, #0
 800930e:	d05e      	beq.n	80093ce <UART_SetConfig+0x1aae>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009310:	4b84      	ldr	r3, [pc, #528]	; (8009524 <UART_SetConfig+0x1c04>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	08db      	lsrs	r3, r3, #3
 8009316:	f003 0303 	and.w	r3, r3, #3
 800931a:	4a83      	ldr	r2, [pc, #524]	; (8009528 <UART_SetConfig+0x1c08>)
 800931c:	40da      	lsrs	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009322:	2b00      	cmp	r3, #0
 8009324:	d044      	beq.n	80093b0 <UART_SetConfig+0x1a90>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932a:	2b01      	cmp	r3, #1
 800932c:	d03e      	beq.n	80093ac <UART_SetConfig+0x1a8c>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009332:	2b02      	cmp	r3, #2
 8009334:	d038      	beq.n	80093a8 <UART_SetConfig+0x1a88>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933a:	2b03      	cmp	r3, #3
 800933c:	d032      	beq.n	80093a4 <UART_SetConfig+0x1a84>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009342:	2b04      	cmp	r3, #4
 8009344:	d02c      	beq.n	80093a0 <UART_SetConfig+0x1a80>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934a:	2b05      	cmp	r3, #5
 800934c:	d026      	beq.n	800939c <UART_SetConfig+0x1a7c>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009352:	2b06      	cmp	r3, #6
 8009354:	d020      	beq.n	8009398 <UART_SetConfig+0x1a78>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935a:	2b07      	cmp	r3, #7
 800935c:	d01a      	beq.n	8009394 <UART_SetConfig+0x1a74>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009362:	2b08      	cmp	r3, #8
 8009364:	d014      	beq.n	8009390 <UART_SetConfig+0x1a70>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936a:	2b09      	cmp	r3, #9
 800936c:	d00e      	beq.n	800938c <UART_SetConfig+0x1a6c>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009372:	2b0a      	cmp	r3, #10
 8009374:	d008      	beq.n	8009388 <UART_SetConfig+0x1a68>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937a:	2b0b      	cmp	r3, #11
 800937c:	d102      	bne.n	8009384 <UART_SetConfig+0x1a64>
 800937e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009382:	e016      	b.n	80093b2 <UART_SetConfig+0x1a92>
 8009384:	2301      	movs	r3, #1
 8009386:	e014      	b.n	80093b2 <UART_SetConfig+0x1a92>
 8009388:	2380      	movs	r3, #128	; 0x80
 800938a:	e012      	b.n	80093b2 <UART_SetConfig+0x1a92>
 800938c:	2340      	movs	r3, #64	; 0x40
 800938e:	e010      	b.n	80093b2 <UART_SetConfig+0x1a92>
 8009390:	2320      	movs	r3, #32
 8009392:	e00e      	b.n	80093b2 <UART_SetConfig+0x1a92>
 8009394:	2310      	movs	r3, #16
 8009396:	e00c      	b.n	80093b2 <UART_SetConfig+0x1a92>
 8009398:	230c      	movs	r3, #12
 800939a:	e00a      	b.n	80093b2 <UART_SetConfig+0x1a92>
 800939c:	230a      	movs	r3, #10
 800939e:	e008      	b.n	80093b2 <UART_SetConfig+0x1a92>
 80093a0:	2308      	movs	r3, #8
 80093a2:	e006      	b.n	80093b2 <UART_SetConfig+0x1a92>
 80093a4:	2306      	movs	r3, #6
 80093a6:	e004      	b.n	80093b2 <UART_SetConfig+0x1a92>
 80093a8:	2304      	movs	r3, #4
 80093aa:	e002      	b.n	80093b2 <UART_SetConfig+0x1a92>
 80093ac:	2302      	movs	r3, #2
 80093ae:	e000      	b.n	80093b2 <UART_SetConfig+0x1a92>
 80093b0:	2301      	movs	r3, #1
 80093b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80093b6:	005a      	lsls	r2, r3, #1
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	085b      	lsrs	r3, r3, #1
 80093be:	441a      	add	r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80093cc:	e133      	b.n	8009636 <UART_SetConfig+0x1d16>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d043      	beq.n	800945e <UART_SetConfig+0x1b3e>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d03d      	beq.n	800945a <UART_SetConfig+0x1b3a>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d037      	beq.n	8009456 <UART_SetConfig+0x1b36>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ea:	2b03      	cmp	r3, #3
 80093ec:	d031      	beq.n	8009452 <UART_SetConfig+0x1b32>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f2:	2b04      	cmp	r3, #4
 80093f4:	d02b      	beq.n	800944e <UART_SetConfig+0x1b2e>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fa:	2b05      	cmp	r3, #5
 80093fc:	d025      	beq.n	800944a <UART_SetConfig+0x1b2a>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009402:	2b06      	cmp	r3, #6
 8009404:	d01f      	beq.n	8009446 <UART_SetConfig+0x1b26>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940a:	2b07      	cmp	r3, #7
 800940c:	d019      	beq.n	8009442 <UART_SetConfig+0x1b22>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009412:	2b08      	cmp	r3, #8
 8009414:	d013      	beq.n	800943e <UART_SetConfig+0x1b1e>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941a:	2b09      	cmp	r3, #9
 800941c:	d00d      	beq.n	800943a <UART_SetConfig+0x1b1a>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009422:	2b0a      	cmp	r3, #10
 8009424:	d007      	beq.n	8009436 <UART_SetConfig+0x1b16>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942a:	2b0b      	cmp	r3, #11
 800942c:	d101      	bne.n	8009432 <UART_SetConfig+0x1b12>
 800942e:	4b3f      	ldr	r3, [pc, #252]	; (800952c <UART_SetConfig+0x1c0c>)
 8009430:	e016      	b.n	8009460 <UART_SetConfig+0x1b40>
 8009432:	4b3f      	ldr	r3, [pc, #252]	; (8009530 <UART_SetConfig+0x1c10>)
 8009434:	e014      	b.n	8009460 <UART_SetConfig+0x1b40>
 8009436:	4b3f      	ldr	r3, [pc, #252]	; (8009534 <UART_SetConfig+0x1c14>)
 8009438:	e012      	b.n	8009460 <UART_SetConfig+0x1b40>
 800943a:	4b3f      	ldr	r3, [pc, #252]	; (8009538 <UART_SetConfig+0x1c18>)
 800943c:	e010      	b.n	8009460 <UART_SetConfig+0x1b40>
 800943e:	4b3f      	ldr	r3, [pc, #252]	; (800953c <UART_SetConfig+0x1c1c>)
 8009440:	e00e      	b.n	8009460 <UART_SetConfig+0x1b40>
 8009442:	4b3f      	ldr	r3, [pc, #252]	; (8009540 <UART_SetConfig+0x1c20>)
 8009444:	e00c      	b.n	8009460 <UART_SetConfig+0x1b40>
 8009446:	4b3f      	ldr	r3, [pc, #252]	; (8009544 <UART_SetConfig+0x1c24>)
 8009448:	e00a      	b.n	8009460 <UART_SetConfig+0x1b40>
 800944a:	4b3f      	ldr	r3, [pc, #252]	; (8009548 <UART_SetConfig+0x1c28>)
 800944c:	e008      	b.n	8009460 <UART_SetConfig+0x1b40>
 800944e:	4b3f      	ldr	r3, [pc, #252]	; (800954c <UART_SetConfig+0x1c2c>)
 8009450:	e006      	b.n	8009460 <UART_SetConfig+0x1b40>
 8009452:	4b3f      	ldr	r3, [pc, #252]	; (8009550 <UART_SetConfig+0x1c30>)
 8009454:	e004      	b.n	8009460 <UART_SetConfig+0x1b40>
 8009456:	4b3f      	ldr	r3, [pc, #252]	; (8009554 <UART_SetConfig+0x1c34>)
 8009458:	e002      	b.n	8009460 <UART_SetConfig+0x1b40>
 800945a:	4b33      	ldr	r3, [pc, #204]	; (8009528 <UART_SetConfig+0x1c08>)
 800945c:	e000      	b.n	8009460 <UART_SetConfig+0x1b40>
 800945e:	4b34      	ldr	r3, [pc, #208]	; (8009530 <UART_SetConfig+0x1c10>)
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	6852      	ldr	r2, [r2, #4]
 8009464:	0852      	lsrs	r2, r2, #1
 8009466:	441a      	add	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009470:	b29b      	uxth	r3, r3
 8009472:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009474:	e0df      	b.n	8009636 <UART_SetConfig+0x1d16>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947a:	2b00      	cmp	r3, #0
 800947c:	d045      	beq.n	800950a <UART_SetConfig+0x1bea>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009482:	2b01      	cmp	r3, #1
 8009484:	d03f      	beq.n	8009506 <UART_SetConfig+0x1be6>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948a:	2b02      	cmp	r3, #2
 800948c:	d039      	beq.n	8009502 <UART_SetConfig+0x1be2>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009492:	2b03      	cmp	r3, #3
 8009494:	d033      	beq.n	80094fe <UART_SetConfig+0x1bde>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949a:	2b04      	cmp	r3, #4
 800949c:	d02d      	beq.n	80094fa <UART_SetConfig+0x1bda>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a2:	2b05      	cmp	r3, #5
 80094a4:	d027      	beq.n	80094f6 <UART_SetConfig+0x1bd6>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094aa:	2b06      	cmp	r3, #6
 80094ac:	d021      	beq.n	80094f2 <UART_SetConfig+0x1bd2>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b2:	2b07      	cmp	r3, #7
 80094b4:	d01b      	beq.n	80094ee <UART_SetConfig+0x1bce>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ba:	2b08      	cmp	r3, #8
 80094bc:	d015      	beq.n	80094ea <UART_SetConfig+0x1bca>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c2:	2b09      	cmp	r3, #9
 80094c4:	d00f      	beq.n	80094e6 <UART_SetConfig+0x1bc6>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ca:	2b0a      	cmp	r3, #10
 80094cc:	d008      	beq.n	80094e0 <UART_SetConfig+0x1bc0>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d2:	2b0b      	cmp	r3, #11
 80094d4:	d102      	bne.n	80094dc <UART_SetConfig+0x1bbc>
 80094d6:	f647 2312 	movw	r3, #31250	; 0x7a12
 80094da:	e017      	b.n	800950c <UART_SetConfig+0x1bec>
 80094dc:	4b18      	ldr	r3, [pc, #96]	; (8009540 <UART_SetConfig+0x1c20>)
 80094de:	e015      	b.n	800950c <UART_SetConfig+0x1bec>
 80094e0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80094e4:	e012      	b.n	800950c <UART_SetConfig+0x1bec>
 80094e6:	4b1c      	ldr	r3, [pc, #112]	; (8009558 <UART_SetConfig+0x1c38>)
 80094e8:	e010      	b.n	800950c <UART_SetConfig+0x1bec>
 80094ea:	4b1c      	ldr	r3, [pc, #112]	; (800955c <UART_SetConfig+0x1c3c>)
 80094ec:	e00e      	b.n	800950c <UART_SetConfig+0x1bec>
 80094ee:	4b0f      	ldr	r3, [pc, #60]	; (800952c <UART_SetConfig+0x1c0c>)
 80094f0:	e00c      	b.n	800950c <UART_SetConfig+0x1bec>
 80094f2:	4b1b      	ldr	r3, [pc, #108]	; (8009560 <UART_SetConfig+0x1c40>)
 80094f4:	e00a      	b.n	800950c <UART_SetConfig+0x1bec>
 80094f6:	4b1b      	ldr	r3, [pc, #108]	; (8009564 <UART_SetConfig+0x1c44>)
 80094f8:	e008      	b.n	800950c <UART_SetConfig+0x1bec>
 80094fa:	4b0e      	ldr	r3, [pc, #56]	; (8009534 <UART_SetConfig+0x1c14>)
 80094fc:	e006      	b.n	800950c <UART_SetConfig+0x1bec>
 80094fe:	4b1a      	ldr	r3, [pc, #104]	; (8009568 <UART_SetConfig+0x1c48>)
 8009500:	e004      	b.n	800950c <UART_SetConfig+0x1bec>
 8009502:	4b0d      	ldr	r3, [pc, #52]	; (8009538 <UART_SetConfig+0x1c18>)
 8009504:	e002      	b.n	800950c <UART_SetConfig+0x1bec>
 8009506:	4b0d      	ldr	r3, [pc, #52]	; (800953c <UART_SetConfig+0x1c1c>)
 8009508:	e000      	b.n	800950c <UART_SetConfig+0x1bec>
 800950a:	4b0d      	ldr	r3, [pc, #52]	; (8009540 <UART_SetConfig+0x1c20>)
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	6852      	ldr	r2, [r2, #4]
 8009510:	0852      	lsrs	r2, r2, #1
 8009512:	441a      	add	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	fbb2 f3f3 	udiv	r3, r2, r3
 800951c:	b29b      	uxth	r3, r3
 800951e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009520:	e089      	b.n	8009636 <UART_SetConfig+0x1d16>
 8009522:	bf00      	nop
 8009524:	58024400 	.word	0x58024400
 8009528:	03d09000 	.word	0x03d09000
 800952c:	0007a120 	.word	0x0007a120
 8009530:	07a12000 	.word	0x07a12000
 8009534:	000f4240 	.word	0x000f4240
 8009538:	001e8480 	.word	0x001e8480
 800953c:	003d0900 	.word	0x003d0900
 8009540:	007a1200 	.word	0x007a1200
 8009544:	00a2c2aa 	.word	0x00a2c2aa
 8009548:	00c35000 	.word	0x00c35000
 800954c:	00f42400 	.word	0x00f42400
 8009550:	01458554 	.word	0x01458554
 8009554:	01e84800 	.word	0x01e84800
 8009558:	0001e848 	.word	0x0001e848
 800955c:	0003d090 	.word	0x0003d090
 8009560:	000a2c2a 	.word	0x000a2c2a
 8009564:	000c3500 	.word	0x000c3500
 8009568:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009570:	2b00      	cmp	r3, #0
 8009572:	d04f      	beq.n	8009614 <UART_SetConfig+0x1cf4>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009578:	2b01      	cmp	r3, #1
 800957a:	d048      	beq.n	800960e <UART_SetConfig+0x1cee>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009580:	2b02      	cmp	r3, #2
 8009582:	d041      	beq.n	8009608 <UART_SetConfig+0x1ce8>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009588:	2b03      	cmp	r3, #3
 800958a:	d03a      	beq.n	8009602 <UART_SetConfig+0x1ce2>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009590:	2b04      	cmp	r3, #4
 8009592:	d033      	beq.n	80095fc <UART_SetConfig+0x1cdc>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009598:	2b05      	cmp	r3, #5
 800959a:	d02c      	beq.n	80095f6 <UART_SetConfig+0x1cd6>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a0:	2b06      	cmp	r3, #6
 80095a2:	d025      	beq.n	80095f0 <UART_SetConfig+0x1cd0>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a8:	2b07      	cmp	r3, #7
 80095aa:	d01e      	beq.n	80095ea <UART_SetConfig+0x1cca>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b0:	2b08      	cmp	r3, #8
 80095b2:	d017      	beq.n	80095e4 <UART_SetConfig+0x1cc4>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b8:	2b09      	cmp	r3, #9
 80095ba:	d010      	beq.n	80095de <UART_SetConfig+0x1cbe>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c0:	2b0a      	cmp	r3, #10
 80095c2:	d009      	beq.n	80095d8 <UART_SetConfig+0x1cb8>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c8:	2b0b      	cmp	r3, #11
 80095ca:	d102      	bne.n	80095d2 <UART_SetConfig+0x1cb2>
 80095cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095d0:	e022      	b.n	8009618 <UART_SetConfig+0x1cf8>
 80095d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80095d6:	e01f      	b.n	8009618 <UART_SetConfig+0x1cf8>
 80095d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095dc:	e01c      	b.n	8009618 <UART_SetConfig+0x1cf8>
 80095de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095e2:	e019      	b.n	8009618 <UART_SetConfig+0x1cf8>
 80095e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095e8:	e016      	b.n	8009618 <UART_SetConfig+0x1cf8>
 80095ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095ee:	e013      	b.n	8009618 <UART_SetConfig+0x1cf8>
 80095f0:	f241 5354 	movw	r3, #5460	; 0x1554
 80095f4:	e010      	b.n	8009618 <UART_SetConfig+0x1cf8>
 80095f6:	f641 1398 	movw	r3, #6552	; 0x1998
 80095fa:	e00d      	b.n	8009618 <UART_SetConfig+0x1cf8>
 80095fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009600:	e00a      	b.n	8009618 <UART_SetConfig+0x1cf8>
 8009602:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8009606:	e007      	b.n	8009618 <UART_SetConfig+0x1cf8>
 8009608:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800960c:	e004      	b.n	8009618 <UART_SetConfig+0x1cf8>
 800960e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009612:	e001      	b.n	8009618 <UART_SetConfig+0x1cf8>
 8009614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	6852      	ldr	r2, [r2, #4]
 800961c:	0852      	lsrs	r2, r2, #1
 800961e:	441a      	add	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	fbb2 f3f3 	udiv	r3, r2, r3
 8009628:	b29b      	uxth	r3, r3
 800962a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800962c:	e003      	b.n	8009636 <UART_SetConfig+0x1d16>
      default:
        ret = HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009634:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009638:	2b0f      	cmp	r3, #15
 800963a:	d916      	bls.n	800966a <UART_SetConfig+0x1d4a>
 800963c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800963e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009642:	d212      	bcs.n	800966a <UART_SetConfig+0x1d4a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009646:	b29b      	uxth	r3, r3
 8009648:	f023 030f 	bic.w	r3, r3, #15
 800964c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800964e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009650:	085b      	lsrs	r3, r3, #1
 8009652:	b29b      	uxth	r3, r3
 8009654:	f003 0307 	and.w	r3, r3, #7
 8009658:	b29a      	uxth	r2, r3
 800965a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800965c:	4313      	orrs	r3, r2
 800965e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009666:	60da      	str	r2, [r3, #12]
 8009668:	e3a3      	b.n	8009db2 <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009670:	e39f      	b.n	8009db2 <UART_SetConfig+0x2492>
    }
  }
  else
  {
    switch (clocksource)
 8009672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009676:	2b40      	cmp	r3, #64	; 0x40
 8009678:	f200 8388 	bhi.w	8009d8c <UART_SetConfig+0x246c>
 800967c:	a201      	add	r2, pc, #4	; (adr r2, 8009684 <UART_SetConfig+0x1d64>)
 800967e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009682:	bf00      	nop
 8009684:	08009789 	.word	0x08009789
 8009688:	0800983f 	.word	0x0800983f
 800968c:	08009d8d 	.word	0x08009d8d
 8009690:	08009d8d 	.word	0x08009d8d
 8009694:	080098f5 	.word	0x080098f5
 8009698:	08009d8d 	.word	0x08009d8d
 800969c:	08009d8d 	.word	0x08009d8d
 80096a0:	08009d8d 	.word	0x08009d8d
 80096a4:	080099af 	.word	0x080099af
 80096a8:	08009d8d 	.word	0x08009d8d
 80096ac:	08009d8d 	.word	0x08009d8d
 80096b0:	08009d8d 	.word	0x08009d8d
 80096b4:	08009d8d 	.word	0x08009d8d
 80096b8:	08009d8d 	.word	0x08009d8d
 80096bc:	08009d8d 	.word	0x08009d8d
 80096c0:	08009d8d 	.word	0x08009d8d
 80096c4:	08009a69 	.word	0x08009a69
 80096c8:	08009d8d 	.word	0x08009d8d
 80096cc:	08009d8d 	.word	0x08009d8d
 80096d0:	08009d8d 	.word	0x08009d8d
 80096d4:	08009d8d 	.word	0x08009d8d
 80096d8:	08009d8d 	.word	0x08009d8d
 80096dc:	08009d8d 	.word	0x08009d8d
 80096e0:	08009d8d 	.word	0x08009d8d
 80096e4:	08009d8d 	.word	0x08009d8d
 80096e8:	08009d8d 	.word	0x08009d8d
 80096ec:	08009d8d 	.word	0x08009d8d
 80096f0:	08009d8d 	.word	0x08009d8d
 80096f4:	08009d8d 	.word	0x08009d8d
 80096f8:	08009d8d 	.word	0x08009d8d
 80096fc:	08009d8d 	.word	0x08009d8d
 8009700:	08009d8d 	.word	0x08009d8d
 8009704:	08009bd9 	.word	0x08009bd9
 8009708:	08009d8d 	.word	0x08009d8d
 800970c:	08009d8d 	.word	0x08009d8d
 8009710:	08009d8d 	.word	0x08009d8d
 8009714:	08009d8d 	.word	0x08009d8d
 8009718:	08009d8d 	.word	0x08009d8d
 800971c:	08009d8d 	.word	0x08009d8d
 8009720:	08009d8d 	.word	0x08009d8d
 8009724:	08009d8d 	.word	0x08009d8d
 8009728:	08009d8d 	.word	0x08009d8d
 800972c:	08009d8d 	.word	0x08009d8d
 8009730:	08009d8d 	.word	0x08009d8d
 8009734:	08009d8d 	.word	0x08009d8d
 8009738:	08009d8d 	.word	0x08009d8d
 800973c:	08009d8d 	.word	0x08009d8d
 8009740:	08009d8d 	.word	0x08009d8d
 8009744:	08009d8d 	.word	0x08009d8d
 8009748:	08009d8d 	.word	0x08009d8d
 800974c:	08009d8d 	.word	0x08009d8d
 8009750:	08009d8d 	.word	0x08009d8d
 8009754:	08009d8d 	.word	0x08009d8d
 8009758:	08009d8d 	.word	0x08009d8d
 800975c:	08009d8d 	.word	0x08009d8d
 8009760:	08009d8d 	.word	0x08009d8d
 8009764:	08009d8d 	.word	0x08009d8d
 8009768:	08009d8d 	.word	0x08009d8d
 800976c:	08009d8d 	.word	0x08009d8d
 8009770:	08009d8d 	.word	0x08009d8d
 8009774:	08009d8d 	.word	0x08009d8d
 8009778:	08009d8d 	.word	0x08009d8d
 800977c:	08009d8d 	.word	0x08009d8d
 8009780:	08009d8d 	.word	0x08009d8d
 8009784:	08009ccd 	.word	0x08009ccd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009788:	f7fb fdb2 	bl	80052f0 <HAL_RCC_GetPCLK1Freq>
 800978c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009792:	2b00      	cmp	r3, #0
 8009794:	d044      	beq.n	8009820 <UART_SetConfig+0x1f00>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979a:	2b01      	cmp	r3, #1
 800979c:	d03e      	beq.n	800981c <UART_SetConfig+0x1efc>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d038      	beq.n	8009818 <UART_SetConfig+0x1ef8>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097aa:	2b03      	cmp	r3, #3
 80097ac:	d032      	beq.n	8009814 <UART_SetConfig+0x1ef4>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b2:	2b04      	cmp	r3, #4
 80097b4:	d02c      	beq.n	8009810 <UART_SetConfig+0x1ef0>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ba:	2b05      	cmp	r3, #5
 80097bc:	d026      	beq.n	800980c <UART_SetConfig+0x1eec>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c2:	2b06      	cmp	r3, #6
 80097c4:	d020      	beq.n	8009808 <UART_SetConfig+0x1ee8>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ca:	2b07      	cmp	r3, #7
 80097cc:	d01a      	beq.n	8009804 <UART_SetConfig+0x1ee4>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d2:	2b08      	cmp	r3, #8
 80097d4:	d014      	beq.n	8009800 <UART_SetConfig+0x1ee0>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097da:	2b09      	cmp	r3, #9
 80097dc:	d00e      	beq.n	80097fc <UART_SetConfig+0x1edc>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e2:	2b0a      	cmp	r3, #10
 80097e4:	d008      	beq.n	80097f8 <UART_SetConfig+0x1ed8>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ea:	2b0b      	cmp	r3, #11
 80097ec:	d102      	bne.n	80097f4 <UART_SetConfig+0x1ed4>
 80097ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097f2:	e016      	b.n	8009822 <UART_SetConfig+0x1f02>
 80097f4:	2301      	movs	r3, #1
 80097f6:	e014      	b.n	8009822 <UART_SetConfig+0x1f02>
 80097f8:	2380      	movs	r3, #128	; 0x80
 80097fa:	e012      	b.n	8009822 <UART_SetConfig+0x1f02>
 80097fc:	2340      	movs	r3, #64	; 0x40
 80097fe:	e010      	b.n	8009822 <UART_SetConfig+0x1f02>
 8009800:	2320      	movs	r3, #32
 8009802:	e00e      	b.n	8009822 <UART_SetConfig+0x1f02>
 8009804:	2310      	movs	r3, #16
 8009806:	e00c      	b.n	8009822 <UART_SetConfig+0x1f02>
 8009808:	230c      	movs	r3, #12
 800980a:	e00a      	b.n	8009822 <UART_SetConfig+0x1f02>
 800980c:	230a      	movs	r3, #10
 800980e:	e008      	b.n	8009822 <UART_SetConfig+0x1f02>
 8009810:	2308      	movs	r3, #8
 8009812:	e006      	b.n	8009822 <UART_SetConfig+0x1f02>
 8009814:	2306      	movs	r3, #6
 8009816:	e004      	b.n	8009822 <UART_SetConfig+0x1f02>
 8009818:	2304      	movs	r3, #4
 800981a:	e002      	b.n	8009822 <UART_SetConfig+0x1f02>
 800981c:	2302      	movs	r3, #2
 800981e:	e000      	b.n	8009822 <UART_SetConfig+0x1f02>
 8009820:	2301      	movs	r3, #1
 8009822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009824:	fbb2 f2f3 	udiv	r2, r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	085b      	lsrs	r3, r3, #1
 800982e:	441a      	add	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	fbb2 f3f3 	udiv	r3, r2, r3
 8009838:	b29b      	uxth	r3, r3
 800983a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800983c:	e2aa      	b.n	8009d94 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800983e:	f7fb fd6d 	bl	800531c <HAL_RCC_GetPCLK2Freq>
 8009842:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009848:	2b00      	cmp	r3, #0
 800984a:	d044      	beq.n	80098d6 <UART_SetConfig+0x1fb6>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009850:	2b01      	cmp	r3, #1
 8009852:	d03e      	beq.n	80098d2 <UART_SetConfig+0x1fb2>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009858:	2b02      	cmp	r3, #2
 800985a:	d038      	beq.n	80098ce <UART_SetConfig+0x1fae>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009860:	2b03      	cmp	r3, #3
 8009862:	d032      	beq.n	80098ca <UART_SetConfig+0x1faa>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009868:	2b04      	cmp	r3, #4
 800986a:	d02c      	beq.n	80098c6 <UART_SetConfig+0x1fa6>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009870:	2b05      	cmp	r3, #5
 8009872:	d026      	beq.n	80098c2 <UART_SetConfig+0x1fa2>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009878:	2b06      	cmp	r3, #6
 800987a:	d020      	beq.n	80098be <UART_SetConfig+0x1f9e>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009880:	2b07      	cmp	r3, #7
 8009882:	d01a      	beq.n	80098ba <UART_SetConfig+0x1f9a>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009888:	2b08      	cmp	r3, #8
 800988a:	d014      	beq.n	80098b6 <UART_SetConfig+0x1f96>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009890:	2b09      	cmp	r3, #9
 8009892:	d00e      	beq.n	80098b2 <UART_SetConfig+0x1f92>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009898:	2b0a      	cmp	r3, #10
 800989a:	d008      	beq.n	80098ae <UART_SetConfig+0x1f8e>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a0:	2b0b      	cmp	r3, #11
 80098a2:	d102      	bne.n	80098aa <UART_SetConfig+0x1f8a>
 80098a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098a8:	e016      	b.n	80098d8 <UART_SetConfig+0x1fb8>
 80098aa:	2301      	movs	r3, #1
 80098ac:	e014      	b.n	80098d8 <UART_SetConfig+0x1fb8>
 80098ae:	2380      	movs	r3, #128	; 0x80
 80098b0:	e012      	b.n	80098d8 <UART_SetConfig+0x1fb8>
 80098b2:	2340      	movs	r3, #64	; 0x40
 80098b4:	e010      	b.n	80098d8 <UART_SetConfig+0x1fb8>
 80098b6:	2320      	movs	r3, #32
 80098b8:	e00e      	b.n	80098d8 <UART_SetConfig+0x1fb8>
 80098ba:	2310      	movs	r3, #16
 80098bc:	e00c      	b.n	80098d8 <UART_SetConfig+0x1fb8>
 80098be:	230c      	movs	r3, #12
 80098c0:	e00a      	b.n	80098d8 <UART_SetConfig+0x1fb8>
 80098c2:	230a      	movs	r3, #10
 80098c4:	e008      	b.n	80098d8 <UART_SetConfig+0x1fb8>
 80098c6:	2308      	movs	r3, #8
 80098c8:	e006      	b.n	80098d8 <UART_SetConfig+0x1fb8>
 80098ca:	2306      	movs	r3, #6
 80098cc:	e004      	b.n	80098d8 <UART_SetConfig+0x1fb8>
 80098ce:	2304      	movs	r3, #4
 80098d0:	e002      	b.n	80098d8 <UART_SetConfig+0x1fb8>
 80098d2:	2302      	movs	r3, #2
 80098d4:	e000      	b.n	80098d8 <UART_SetConfig+0x1fb8>
 80098d6:	2301      	movs	r3, #1
 80098d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098da:	fbb2 f2f3 	udiv	r2, r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	085b      	lsrs	r3, r3, #1
 80098e4:	441a      	add	r2, r3
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80098f2:	e24f      	b.n	8009d94 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098f4:	f107 0318 	add.w	r3, r7, #24
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7fc fefd 	bl	80066f8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098fe:	69fa      	ldr	r2, [r7, #28]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009904:	2b00      	cmp	r3, #0
 8009906:	d044      	beq.n	8009992 <UART_SetConfig+0x2072>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990c:	2b01      	cmp	r3, #1
 800990e:	d03e      	beq.n	800998e <UART_SetConfig+0x206e>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009914:	2b02      	cmp	r3, #2
 8009916:	d038      	beq.n	800998a <UART_SetConfig+0x206a>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991c:	2b03      	cmp	r3, #3
 800991e:	d032      	beq.n	8009986 <UART_SetConfig+0x2066>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009924:	2b04      	cmp	r3, #4
 8009926:	d02c      	beq.n	8009982 <UART_SetConfig+0x2062>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992c:	2b05      	cmp	r3, #5
 800992e:	d026      	beq.n	800997e <UART_SetConfig+0x205e>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009934:	2b06      	cmp	r3, #6
 8009936:	d020      	beq.n	800997a <UART_SetConfig+0x205a>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993c:	2b07      	cmp	r3, #7
 800993e:	d01a      	beq.n	8009976 <UART_SetConfig+0x2056>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009944:	2b08      	cmp	r3, #8
 8009946:	d014      	beq.n	8009972 <UART_SetConfig+0x2052>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994c:	2b09      	cmp	r3, #9
 800994e:	d00e      	beq.n	800996e <UART_SetConfig+0x204e>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009954:	2b0a      	cmp	r3, #10
 8009956:	d008      	beq.n	800996a <UART_SetConfig+0x204a>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995c:	2b0b      	cmp	r3, #11
 800995e:	d102      	bne.n	8009966 <UART_SetConfig+0x2046>
 8009960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009964:	e016      	b.n	8009994 <UART_SetConfig+0x2074>
 8009966:	2301      	movs	r3, #1
 8009968:	e014      	b.n	8009994 <UART_SetConfig+0x2074>
 800996a:	2380      	movs	r3, #128	; 0x80
 800996c:	e012      	b.n	8009994 <UART_SetConfig+0x2074>
 800996e:	2340      	movs	r3, #64	; 0x40
 8009970:	e010      	b.n	8009994 <UART_SetConfig+0x2074>
 8009972:	2320      	movs	r3, #32
 8009974:	e00e      	b.n	8009994 <UART_SetConfig+0x2074>
 8009976:	2310      	movs	r3, #16
 8009978:	e00c      	b.n	8009994 <UART_SetConfig+0x2074>
 800997a:	230c      	movs	r3, #12
 800997c:	e00a      	b.n	8009994 <UART_SetConfig+0x2074>
 800997e:	230a      	movs	r3, #10
 8009980:	e008      	b.n	8009994 <UART_SetConfig+0x2074>
 8009982:	2308      	movs	r3, #8
 8009984:	e006      	b.n	8009994 <UART_SetConfig+0x2074>
 8009986:	2306      	movs	r3, #6
 8009988:	e004      	b.n	8009994 <UART_SetConfig+0x2074>
 800998a:	2304      	movs	r3, #4
 800998c:	e002      	b.n	8009994 <UART_SetConfig+0x2074>
 800998e:	2302      	movs	r3, #2
 8009990:	e000      	b.n	8009994 <UART_SetConfig+0x2074>
 8009992:	2301      	movs	r3, #1
 8009994:	fbb2 f2f3 	udiv	r2, r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	085b      	lsrs	r3, r3, #1
 800999e:	441a      	add	r2, r3
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80099ac:	e1f2      	b.n	8009d94 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099ae:	f107 030c 	add.w	r3, r7, #12
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7fc ffec 	bl	8006990 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099b8:	693a      	ldr	r2, [r7, #16]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d044      	beq.n	8009a4c <UART_SetConfig+0x212c>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d03e      	beq.n	8009a48 <UART_SetConfig+0x2128>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ce:	2b02      	cmp	r3, #2
 80099d0:	d038      	beq.n	8009a44 <UART_SetConfig+0x2124>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d6:	2b03      	cmp	r3, #3
 80099d8:	d032      	beq.n	8009a40 <UART_SetConfig+0x2120>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099de:	2b04      	cmp	r3, #4
 80099e0:	d02c      	beq.n	8009a3c <UART_SetConfig+0x211c>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e6:	2b05      	cmp	r3, #5
 80099e8:	d026      	beq.n	8009a38 <UART_SetConfig+0x2118>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ee:	2b06      	cmp	r3, #6
 80099f0:	d020      	beq.n	8009a34 <UART_SetConfig+0x2114>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f6:	2b07      	cmp	r3, #7
 80099f8:	d01a      	beq.n	8009a30 <UART_SetConfig+0x2110>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fe:	2b08      	cmp	r3, #8
 8009a00:	d014      	beq.n	8009a2c <UART_SetConfig+0x210c>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a06:	2b09      	cmp	r3, #9
 8009a08:	d00e      	beq.n	8009a28 <UART_SetConfig+0x2108>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0e:	2b0a      	cmp	r3, #10
 8009a10:	d008      	beq.n	8009a24 <UART_SetConfig+0x2104>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a16:	2b0b      	cmp	r3, #11
 8009a18:	d102      	bne.n	8009a20 <UART_SetConfig+0x2100>
 8009a1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a1e:	e016      	b.n	8009a4e <UART_SetConfig+0x212e>
 8009a20:	2301      	movs	r3, #1
 8009a22:	e014      	b.n	8009a4e <UART_SetConfig+0x212e>
 8009a24:	2380      	movs	r3, #128	; 0x80
 8009a26:	e012      	b.n	8009a4e <UART_SetConfig+0x212e>
 8009a28:	2340      	movs	r3, #64	; 0x40
 8009a2a:	e010      	b.n	8009a4e <UART_SetConfig+0x212e>
 8009a2c:	2320      	movs	r3, #32
 8009a2e:	e00e      	b.n	8009a4e <UART_SetConfig+0x212e>
 8009a30:	2310      	movs	r3, #16
 8009a32:	e00c      	b.n	8009a4e <UART_SetConfig+0x212e>
 8009a34:	230c      	movs	r3, #12
 8009a36:	e00a      	b.n	8009a4e <UART_SetConfig+0x212e>
 8009a38:	230a      	movs	r3, #10
 8009a3a:	e008      	b.n	8009a4e <UART_SetConfig+0x212e>
 8009a3c:	2308      	movs	r3, #8
 8009a3e:	e006      	b.n	8009a4e <UART_SetConfig+0x212e>
 8009a40:	2306      	movs	r3, #6
 8009a42:	e004      	b.n	8009a4e <UART_SetConfig+0x212e>
 8009a44:	2304      	movs	r3, #4
 8009a46:	e002      	b.n	8009a4e <UART_SetConfig+0x212e>
 8009a48:	2302      	movs	r3, #2
 8009a4a:	e000      	b.n	8009a4e <UART_SetConfig+0x212e>
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	085b      	lsrs	r3, r3, #1
 8009a58:	441a      	add	r2, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009a66:	e195      	b.n	8009d94 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a68:	4b87      	ldr	r3, [pc, #540]	; (8009c88 <UART_SetConfig+0x2368>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f003 0320 	and.w	r3, r3, #32
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d05d      	beq.n	8009b30 <UART_SetConfig+0x2210>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a74:	4b84      	ldr	r3, [pc, #528]	; (8009c88 <UART_SetConfig+0x2368>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	08db      	lsrs	r3, r3, #3
 8009a7a:	f003 0303 	and.w	r3, r3, #3
 8009a7e:	4a83      	ldr	r2, [pc, #524]	; (8009c8c <UART_SetConfig+0x236c>)
 8009a80:	40da      	lsrs	r2, r3
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d044      	beq.n	8009b14 <UART_SetConfig+0x21f4>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d03e      	beq.n	8009b10 <UART_SetConfig+0x21f0>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d038      	beq.n	8009b0c <UART_SetConfig+0x21ec>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9e:	2b03      	cmp	r3, #3
 8009aa0:	d032      	beq.n	8009b08 <UART_SetConfig+0x21e8>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa6:	2b04      	cmp	r3, #4
 8009aa8:	d02c      	beq.n	8009b04 <UART_SetConfig+0x21e4>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aae:	2b05      	cmp	r3, #5
 8009ab0:	d026      	beq.n	8009b00 <UART_SetConfig+0x21e0>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab6:	2b06      	cmp	r3, #6
 8009ab8:	d020      	beq.n	8009afc <UART_SetConfig+0x21dc>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009abe:	2b07      	cmp	r3, #7
 8009ac0:	d01a      	beq.n	8009af8 <UART_SetConfig+0x21d8>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac6:	2b08      	cmp	r3, #8
 8009ac8:	d014      	beq.n	8009af4 <UART_SetConfig+0x21d4>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ace:	2b09      	cmp	r3, #9
 8009ad0:	d00e      	beq.n	8009af0 <UART_SetConfig+0x21d0>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad6:	2b0a      	cmp	r3, #10
 8009ad8:	d008      	beq.n	8009aec <UART_SetConfig+0x21cc>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ade:	2b0b      	cmp	r3, #11
 8009ae0:	d102      	bne.n	8009ae8 <UART_SetConfig+0x21c8>
 8009ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ae6:	e016      	b.n	8009b16 <UART_SetConfig+0x21f6>
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e014      	b.n	8009b16 <UART_SetConfig+0x21f6>
 8009aec:	2380      	movs	r3, #128	; 0x80
 8009aee:	e012      	b.n	8009b16 <UART_SetConfig+0x21f6>
 8009af0:	2340      	movs	r3, #64	; 0x40
 8009af2:	e010      	b.n	8009b16 <UART_SetConfig+0x21f6>
 8009af4:	2320      	movs	r3, #32
 8009af6:	e00e      	b.n	8009b16 <UART_SetConfig+0x21f6>
 8009af8:	2310      	movs	r3, #16
 8009afa:	e00c      	b.n	8009b16 <UART_SetConfig+0x21f6>
 8009afc:	230c      	movs	r3, #12
 8009afe:	e00a      	b.n	8009b16 <UART_SetConfig+0x21f6>
 8009b00:	230a      	movs	r3, #10
 8009b02:	e008      	b.n	8009b16 <UART_SetConfig+0x21f6>
 8009b04:	2308      	movs	r3, #8
 8009b06:	e006      	b.n	8009b16 <UART_SetConfig+0x21f6>
 8009b08:	2306      	movs	r3, #6
 8009b0a:	e004      	b.n	8009b16 <UART_SetConfig+0x21f6>
 8009b0c:	2304      	movs	r3, #4
 8009b0e:	e002      	b.n	8009b16 <UART_SetConfig+0x21f6>
 8009b10:	2302      	movs	r3, #2
 8009b12:	e000      	b.n	8009b16 <UART_SetConfig+0x21f6>
 8009b14:	2301      	movs	r3, #1
 8009b16:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	085b      	lsrs	r3, r3, #1
 8009b20:	441a      	add	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8009b2e:	e131      	b.n	8009d94 <UART_SetConfig+0x2474>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d043      	beq.n	8009bc0 <UART_SetConfig+0x22a0>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d03d      	beq.n	8009bbc <UART_SetConfig+0x229c>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d037      	beq.n	8009bb8 <UART_SetConfig+0x2298>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4c:	2b03      	cmp	r3, #3
 8009b4e:	d031      	beq.n	8009bb4 <UART_SetConfig+0x2294>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b54:	2b04      	cmp	r3, #4
 8009b56:	d02b      	beq.n	8009bb0 <UART_SetConfig+0x2290>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5c:	2b05      	cmp	r3, #5
 8009b5e:	d025      	beq.n	8009bac <UART_SetConfig+0x228c>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b64:	2b06      	cmp	r3, #6
 8009b66:	d01f      	beq.n	8009ba8 <UART_SetConfig+0x2288>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6c:	2b07      	cmp	r3, #7
 8009b6e:	d019      	beq.n	8009ba4 <UART_SetConfig+0x2284>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b74:	2b08      	cmp	r3, #8
 8009b76:	d013      	beq.n	8009ba0 <UART_SetConfig+0x2280>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7c:	2b09      	cmp	r3, #9
 8009b7e:	d00d      	beq.n	8009b9c <UART_SetConfig+0x227c>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b84:	2b0a      	cmp	r3, #10
 8009b86:	d007      	beq.n	8009b98 <UART_SetConfig+0x2278>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8c:	2b0b      	cmp	r3, #11
 8009b8e:	d101      	bne.n	8009b94 <UART_SetConfig+0x2274>
 8009b90:	4b3f      	ldr	r3, [pc, #252]	; (8009c90 <UART_SetConfig+0x2370>)
 8009b92:	e016      	b.n	8009bc2 <UART_SetConfig+0x22a2>
 8009b94:	4b3d      	ldr	r3, [pc, #244]	; (8009c8c <UART_SetConfig+0x236c>)
 8009b96:	e014      	b.n	8009bc2 <UART_SetConfig+0x22a2>
 8009b98:	4b3e      	ldr	r3, [pc, #248]	; (8009c94 <UART_SetConfig+0x2374>)
 8009b9a:	e012      	b.n	8009bc2 <UART_SetConfig+0x22a2>
 8009b9c:	4b3e      	ldr	r3, [pc, #248]	; (8009c98 <UART_SetConfig+0x2378>)
 8009b9e:	e010      	b.n	8009bc2 <UART_SetConfig+0x22a2>
 8009ba0:	4b3e      	ldr	r3, [pc, #248]	; (8009c9c <UART_SetConfig+0x237c>)
 8009ba2:	e00e      	b.n	8009bc2 <UART_SetConfig+0x22a2>
 8009ba4:	4b3e      	ldr	r3, [pc, #248]	; (8009ca0 <UART_SetConfig+0x2380>)
 8009ba6:	e00c      	b.n	8009bc2 <UART_SetConfig+0x22a2>
 8009ba8:	4b3e      	ldr	r3, [pc, #248]	; (8009ca4 <UART_SetConfig+0x2384>)
 8009baa:	e00a      	b.n	8009bc2 <UART_SetConfig+0x22a2>
 8009bac:	4b3e      	ldr	r3, [pc, #248]	; (8009ca8 <UART_SetConfig+0x2388>)
 8009bae:	e008      	b.n	8009bc2 <UART_SetConfig+0x22a2>
 8009bb0:	4b3e      	ldr	r3, [pc, #248]	; (8009cac <UART_SetConfig+0x238c>)
 8009bb2:	e006      	b.n	8009bc2 <UART_SetConfig+0x22a2>
 8009bb4:	4b3e      	ldr	r3, [pc, #248]	; (8009cb0 <UART_SetConfig+0x2390>)
 8009bb6:	e004      	b.n	8009bc2 <UART_SetConfig+0x22a2>
 8009bb8:	4b3e      	ldr	r3, [pc, #248]	; (8009cb4 <UART_SetConfig+0x2394>)
 8009bba:	e002      	b.n	8009bc2 <UART_SetConfig+0x22a2>
 8009bbc:	4b3e      	ldr	r3, [pc, #248]	; (8009cb8 <UART_SetConfig+0x2398>)
 8009bbe:	e000      	b.n	8009bc2 <UART_SetConfig+0x22a2>
 8009bc0:	4b32      	ldr	r3, [pc, #200]	; (8009c8c <UART_SetConfig+0x236c>)
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	6852      	ldr	r2, [r2, #4]
 8009bc6:	0852      	lsrs	r2, r2, #1
 8009bc8:	441a      	add	r2, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009bd6:	e0dd      	b.n	8009d94 <UART_SetConfig+0x2474>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d046      	beq.n	8009c6e <UART_SetConfig+0x234e>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d040      	beq.n	8009c6a <UART_SetConfig+0x234a>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d03a      	beq.n	8009c66 <UART_SetConfig+0x2346>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf4:	2b03      	cmp	r3, #3
 8009bf6:	d034      	beq.n	8009c62 <UART_SetConfig+0x2342>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfc:	2b04      	cmp	r3, #4
 8009bfe:	d02e      	beq.n	8009c5e <UART_SetConfig+0x233e>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c04:	2b05      	cmp	r3, #5
 8009c06:	d028      	beq.n	8009c5a <UART_SetConfig+0x233a>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0c:	2b06      	cmp	r3, #6
 8009c0e:	d022      	beq.n	8009c56 <UART_SetConfig+0x2336>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c14:	2b07      	cmp	r3, #7
 8009c16:	d01c      	beq.n	8009c52 <UART_SetConfig+0x2332>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1c:	2b08      	cmp	r3, #8
 8009c1e:	d016      	beq.n	8009c4e <UART_SetConfig+0x232e>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c24:	2b09      	cmp	r3, #9
 8009c26:	d00f      	beq.n	8009c48 <UART_SetConfig+0x2328>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2c:	2b0a      	cmp	r3, #10
 8009c2e:	d008      	beq.n	8009c42 <UART_SetConfig+0x2322>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c34:	2b0b      	cmp	r3, #11
 8009c36:	d102      	bne.n	8009c3e <UART_SetConfig+0x231e>
 8009c38:	f643 5309 	movw	r3, #15625	; 0x3d09
 8009c3c:	e018      	b.n	8009c70 <UART_SetConfig+0x2350>
 8009c3e:	4b18      	ldr	r3, [pc, #96]	; (8009ca0 <UART_SetConfig+0x2380>)
 8009c40:	e016      	b.n	8009c70 <UART_SetConfig+0x2350>
 8009c42:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009c46:	e013      	b.n	8009c70 <UART_SetConfig+0x2350>
 8009c48:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009c4c:	e010      	b.n	8009c70 <UART_SetConfig+0x2350>
 8009c4e:	4b1b      	ldr	r3, [pc, #108]	; (8009cbc <UART_SetConfig+0x239c>)
 8009c50:	e00e      	b.n	8009c70 <UART_SetConfig+0x2350>
 8009c52:	4b0f      	ldr	r3, [pc, #60]	; (8009c90 <UART_SetConfig+0x2370>)
 8009c54:	e00c      	b.n	8009c70 <UART_SetConfig+0x2350>
 8009c56:	4b1a      	ldr	r3, [pc, #104]	; (8009cc0 <UART_SetConfig+0x23a0>)
 8009c58:	e00a      	b.n	8009c70 <UART_SetConfig+0x2350>
 8009c5a:	4b1a      	ldr	r3, [pc, #104]	; (8009cc4 <UART_SetConfig+0x23a4>)
 8009c5c:	e008      	b.n	8009c70 <UART_SetConfig+0x2350>
 8009c5e:	4b0d      	ldr	r3, [pc, #52]	; (8009c94 <UART_SetConfig+0x2374>)
 8009c60:	e006      	b.n	8009c70 <UART_SetConfig+0x2350>
 8009c62:	4b19      	ldr	r3, [pc, #100]	; (8009cc8 <UART_SetConfig+0x23a8>)
 8009c64:	e004      	b.n	8009c70 <UART_SetConfig+0x2350>
 8009c66:	4b0c      	ldr	r3, [pc, #48]	; (8009c98 <UART_SetConfig+0x2378>)
 8009c68:	e002      	b.n	8009c70 <UART_SetConfig+0x2350>
 8009c6a:	4b0c      	ldr	r3, [pc, #48]	; (8009c9c <UART_SetConfig+0x237c>)
 8009c6c:	e000      	b.n	8009c70 <UART_SetConfig+0x2350>
 8009c6e:	4b0c      	ldr	r3, [pc, #48]	; (8009ca0 <UART_SetConfig+0x2380>)
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	6852      	ldr	r2, [r2, #4]
 8009c74:	0852      	lsrs	r2, r2, #1
 8009c76:	441a      	add	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c84:	e086      	b.n	8009d94 <UART_SetConfig+0x2474>
 8009c86:	bf00      	nop
 8009c88:	58024400 	.word	0x58024400
 8009c8c:	03d09000 	.word	0x03d09000
 8009c90:	0003d090 	.word	0x0003d090
 8009c94:	0007a120 	.word	0x0007a120
 8009c98:	000f4240 	.word	0x000f4240
 8009c9c:	001e8480 	.word	0x001e8480
 8009ca0:	003d0900 	.word	0x003d0900
 8009ca4:	00516155 	.word	0x00516155
 8009ca8:	0061a800 	.word	0x0061a800
 8009cac:	007a1200 	.word	0x007a1200
 8009cb0:	00a2c2aa 	.word	0x00a2c2aa
 8009cb4:	00f42400 	.word	0x00f42400
 8009cb8:	01e84800 	.word	0x01e84800
 8009cbc:	0001e848 	.word	0x0001e848
 8009cc0:	00051615 	.word	0x00051615
 8009cc4:	00061a80 	.word	0x00061a80
 8009cc8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d04e      	beq.n	8009d72 <UART_SetConfig+0x2452>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d047      	beq.n	8009d6c <UART_SetConfig+0x244c>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d040      	beq.n	8009d66 <UART_SetConfig+0x2446>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce8:	2b03      	cmp	r3, #3
 8009cea:	d039      	beq.n	8009d60 <UART_SetConfig+0x2440>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf0:	2b04      	cmp	r3, #4
 8009cf2:	d032      	beq.n	8009d5a <UART_SetConfig+0x243a>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf8:	2b05      	cmp	r3, #5
 8009cfa:	d02b      	beq.n	8009d54 <UART_SetConfig+0x2434>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d00:	2b06      	cmp	r3, #6
 8009d02:	d024      	beq.n	8009d4e <UART_SetConfig+0x242e>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d08:	2b07      	cmp	r3, #7
 8009d0a:	d01d      	beq.n	8009d48 <UART_SetConfig+0x2428>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d10:	2b08      	cmp	r3, #8
 8009d12:	d016      	beq.n	8009d42 <UART_SetConfig+0x2422>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d18:	2b09      	cmp	r3, #9
 8009d1a:	d00f      	beq.n	8009d3c <UART_SetConfig+0x241c>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d20:	2b0a      	cmp	r3, #10
 8009d22:	d008      	beq.n	8009d36 <UART_SetConfig+0x2416>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d28:	2b0b      	cmp	r3, #11
 8009d2a:	d101      	bne.n	8009d30 <UART_SetConfig+0x2410>
 8009d2c:	2380      	movs	r3, #128	; 0x80
 8009d2e:	e022      	b.n	8009d76 <UART_SetConfig+0x2456>
 8009d30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d34:	e01f      	b.n	8009d76 <UART_SetConfig+0x2456>
 8009d36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d3a:	e01c      	b.n	8009d76 <UART_SetConfig+0x2456>
 8009d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d40:	e019      	b.n	8009d76 <UART_SetConfig+0x2456>
 8009d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d46:	e016      	b.n	8009d76 <UART_SetConfig+0x2456>
 8009d48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d4c:	e013      	b.n	8009d76 <UART_SetConfig+0x2456>
 8009d4e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009d52:	e010      	b.n	8009d76 <UART_SetConfig+0x2456>
 8009d54:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009d58:	e00d      	b.n	8009d76 <UART_SetConfig+0x2456>
 8009d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d5e:	e00a      	b.n	8009d76 <UART_SetConfig+0x2456>
 8009d60:	f241 5355 	movw	r3, #5461	; 0x1555
 8009d64:	e007      	b.n	8009d76 <UART_SetConfig+0x2456>
 8009d66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d6a:	e004      	b.n	8009d76 <UART_SetConfig+0x2456>
 8009d6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009d70:	e001      	b.n	8009d76 <UART_SetConfig+0x2456>
 8009d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	6852      	ldr	r2, [r2, #4]
 8009d7a:	0852      	lsrs	r2, r2, #1
 8009d7c:	441a      	add	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009d8a:	e003      	b.n	8009d94 <UART_SetConfig+0x2474>
      default:
        ret = HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009d92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d96:	2b0f      	cmp	r3, #15
 8009d98:	d908      	bls.n	8009dac <UART_SetConfig+0x248c>
 8009d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009da0:	d204      	bcs.n	8009dac <UART_SetConfig+0x248c>
    {
      huart->Instance->BRR = usartdiv;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009da8:	60da      	str	r2, [r3, #12]
 8009daa:	e002      	b.n	8009db2 <UART_SetConfig+0x2492>
    }
    else
    {
      ret = HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009dce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3740      	adds	r7, #64	; 0x40
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de8:	2bff      	cmp	r3, #255	; 0xff
 8009dea:	d904      	bls.n	8009df6 <UART_AdvFeatureConfig+0x1a>
 8009dec:	f640 4149 	movw	r1, #3145	; 0xc49
 8009df0:	4899      	ldr	r0, [pc, #612]	; (800a058 <UART_AdvFeatureConfig+0x27c>)
 8009df2:	f7f6 ff76 	bl	8000ce2 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dfa:	f003 0301 	and.w	r3, r3, #1
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d018      	beq.n	8009e34 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d009      	beq.n	8009e1e <UART_AdvFeatureConfig+0x42>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e12:	d004      	beq.n	8009e1e <UART_AdvFeatureConfig+0x42>
 8009e14:	f640 414e 	movw	r1, #3150	; 0xc4e
 8009e18:	488f      	ldr	r0, [pc, #572]	; (800a058 <UART_AdvFeatureConfig+0x27c>)
 8009e1a:	f7f6 ff62 	bl	8000ce2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	430a      	orrs	r2, r1
 8009e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e38:	f003 0302 	and.w	r3, r3, #2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d018      	beq.n	8009e72 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d009      	beq.n	8009e5c <UART_AdvFeatureConfig+0x80>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e50:	d004      	beq.n	8009e5c <UART_AdvFeatureConfig+0x80>
 8009e52:	f640 4155 	movw	r1, #3157	; 0xc55
 8009e56:	4880      	ldr	r0, [pc, #512]	; (800a058 <UART_AdvFeatureConfig+0x27c>)
 8009e58:	f7f6 ff43 	bl	8000ce2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	430a      	orrs	r2, r1
 8009e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e76:	f003 0304 	and.w	r3, r3, #4
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d018      	beq.n	8009eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d009      	beq.n	8009e9a <UART_AdvFeatureConfig+0xbe>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009e8e:	d004      	beq.n	8009e9a <UART_AdvFeatureConfig+0xbe>
 8009e90:	f640 415c 	movw	r1, #3164	; 0xc5c
 8009e94:	4870      	ldr	r0, [pc, #448]	; (800a058 <UART_AdvFeatureConfig+0x27c>)
 8009e96:	f7f6 ff24 	bl	8000ce2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	430a      	orrs	r2, r1
 8009eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb4:	f003 0308 	and.w	r3, r3, #8
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d018      	beq.n	8009eee <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d009      	beq.n	8009ed8 <UART_AdvFeatureConfig+0xfc>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ecc:	d004      	beq.n	8009ed8 <UART_AdvFeatureConfig+0xfc>
 8009ece:	f640 4163 	movw	r1, #3171	; 0xc63
 8009ed2:	4861      	ldr	r0, [pc, #388]	; (800a058 <UART_AdvFeatureConfig+0x27c>)
 8009ed4:	f7f6 ff05 	bl	8000ce2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	430a      	orrs	r2, r1
 8009eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef2:	f003 0310 	and.w	r3, r3, #16
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d018      	beq.n	8009f2c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d009      	beq.n	8009f16 <UART_AdvFeatureConfig+0x13a>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f0a:	d004      	beq.n	8009f16 <UART_AdvFeatureConfig+0x13a>
 8009f0c:	f640 416a 	movw	r1, #3178	; 0xc6a
 8009f10:	4851      	ldr	r0, [pc, #324]	; (800a058 <UART_AdvFeatureConfig+0x27c>)
 8009f12:	f7f6 fee6 	bl	8000ce2 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	430a      	orrs	r2, r1
 8009f2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f30:	f003 0320 	and.w	r3, r3, #32
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d018      	beq.n	8009f6a <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d009      	beq.n	8009f54 <UART_AdvFeatureConfig+0x178>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f48:	d004      	beq.n	8009f54 <UART_AdvFeatureConfig+0x178>
 8009f4a:	f640 4171 	movw	r1, #3185	; 0xc71
 8009f4e:	4842      	ldr	r0, [pc, #264]	; (800a058 <UART_AdvFeatureConfig+0x27c>)
 8009f50:	f7f6 fec7 	bl	8000ce2 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	430a      	orrs	r2, r1
 8009f68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	f000 8082 	beq.w	800a07c <UART_AdvFeatureConfig+0x2a0>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a37      	ldr	r2, [pc, #220]	; (800a05c <UART_AdvFeatureConfig+0x280>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d027      	beq.n	8009fd2 <UART_AdvFeatureConfig+0x1f6>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a36      	ldr	r2, [pc, #216]	; (800a060 <UART_AdvFeatureConfig+0x284>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d022      	beq.n	8009fd2 <UART_AdvFeatureConfig+0x1f6>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a34      	ldr	r2, [pc, #208]	; (800a064 <UART_AdvFeatureConfig+0x288>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d01d      	beq.n	8009fd2 <UART_AdvFeatureConfig+0x1f6>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a33      	ldr	r2, [pc, #204]	; (800a068 <UART_AdvFeatureConfig+0x28c>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d018      	beq.n	8009fd2 <UART_AdvFeatureConfig+0x1f6>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a31      	ldr	r2, [pc, #196]	; (800a06c <UART_AdvFeatureConfig+0x290>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d013      	beq.n	8009fd2 <UART_AdvFeatureConfig+0x1f6>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a30      	ldr	r2, [pc, #192]	; (800a070 <UART_AdvFeatureConfig+0x294>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d00e      	beq.n	8009fd2 <UART_AdvFeatureConfig+0x1f6>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a2e      	ldr	r2, [pc, #184]	; (800a074 <UART_AdvFeatureConfig+0x298>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d009      	beq.n	8009fd2 <UART_AdvFeatureConfig+0x1f6>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a2d      	ldr	r2, [pc, #180]	; (800a078 <UART_AdvFeatureConfig+0x29c>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d004      	beq.n	8009fd2 <UART_AdvFeatureConfig+0x1f6>
 8009fc8:	f640 4178 	movw	r1, #3192	; 0xc78
 8009fcc:	4822      	ldr	r0, [pc, #136]	; (800a058 <UART_AdvFeatureConfig+0x27c>)
 8009fce:	f7f6 fe88 	bl	8000ce2 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d009      	beq.n	8009fee <UART_AdvFeatureConfig+0x212>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fe2:	d004      	beq.n	8009fee <UART_AdvFeatureConfig+0x212>
 8009fe4:	f640 4179 	movw	r1, #3193	; 0xc79
 8009fe8:	481b      	ldr	r0, [pc, #108]	; (800a058 <UART_AdvFeatureConfig+0x27c>)
 8009fea:	f7f6 fe7a 	bl	8000ce2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	430a      	orrs	r2, r1
 800a002:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a00c:	d136      	bne.n	800a07c <UART_AdvFeatureConfig+0x2a0>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a012:	2b00      	cmp	r3, #0
 800a014:	d013      	beq.n	800a03e <UART_AdvFeatureConfig+0x262>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a01a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a01e:	d00e      	beq.n	800a03e <UART_AdvFeatureConfig+0x262>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a028:	d009      	beq.n	800a03e <UART_AdvFeatureConfig+0x262>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a02e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a032:	d004      	beq.n	800a03e <UART_AdvFeatureConfig+0x262>
 800a034:	f640 417e 	movw	r1, #3198	; 0xc7e
 800a038:	4807      	ldr	r0, [pc, #28]	; (800a058 <UART_AdvFeatureConfig+0x27c>)
 800a03a:	f7f6 fe52 	bl	8000ce2 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	430a      	orrs	r2, r1
 800a052:	605a      	str	r2, [r3, #4]
 800a054:	e012      	b.n	800a07c <UART_AdvFeatureConfig+0x2a0>
 800a056:	bf00      	nop
 800a058:	08018d20 	.word	0x08018d20
 800a05c:	40011000 	.word	0x40011000
 800a060:	40004400 	.word	0x40004400
 800a064:	40004800 	.word	0x40004800
 800a068:	40004c00 	.word	0x40004c00
 800a06c:	40005000 	.word	0x40005000
 800a070:	40011400 	.word	0x40011400
 800a074:	40007800 	.word	0x40007800
 800a078:	40007c00 	.word	0x40007c00
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a084:	2b00      	cmp	r3, #0
 800a086:	d018      	beq.n	800a0ba <UART_AdvFeatureConfig+0x2de>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d009      	beq.n	800a0a4 <UART_AdvFeatureConfig+0x2c8>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a094:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a098:	d004      	beq.n	800a0a4 <UART_AdvFeatureConfig+0x2c8>
 800a09a:	f640 4186 	movw	r1, #3206	; 0xc86
 800a09e:	4809      	ldr	r0, [pc, #36]	; (800a0c4 <UART_AdvFeatureConfig+0x2e8>)
 800a0a0:	f7f6 fe1f 	bl	8000ce2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	430a      	orrs	r2, r1
 800a0b8:	605a      	str	r2, [r3, #4]
  }
}
 800a0ba:	bf00      	nop
 800a0bc:	3708      	adds	r7, #8
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	08018d20 	.word	0x08018d20

0800a0c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b086      	sub	sp, #24
 800a0cc:	af02      	add	r7, sp, #8
 800a0ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a0d8:	f7f7 fa36 	bl	8001548 <HAL_GetTick>
 800a0dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 0308 	and.w	r3, r3, #8
 800a0e8:	2b08      	cmp	r3, #8
 800a0ea:	d10e      	bne.n	800a10a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0f0:	9300      	str	r3, [sp, #0]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f82c 	bl	800a158 <UART_WaitOnFlagUntilTimeout>
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d001      	beq.n	800a10a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a106:	2303      	movs	r3, #3
 800a108:	e022      	b.n	800a150 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 0304 	and.w	r3, r3, #4
 800a114:	2b04      	cmp	r3, #4
 800a116:	d10e      	bne.n	800a136 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2200      	movs	r2, #0
 800a122:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f816 	bl	800a158 <UART_WaitOnFlagUntilTimeout>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d001      	beq.n	800a136 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a132:	2303      	movs	r3, #3
 800a134:	e00c      	b.n	800a150 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2220      	movs	r2, #32
 800a13a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2220      	movs	r2, #32
 800a142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	603b      	str	r3, [r7, #0]
 800a164:	4613      	mov	r3, r2
 800a166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a168:	e062      	b.n	800a230 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a170:	d05e      	beq.n	800a230 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a172:	f7f7 f9e9 	bl	8001548 <HAL_GetTick>
 800a176:	4602      	mov	r2, r0
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	69ba      	ldr	r2, [r7, #24]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d302      	bcc.n	800a188 <UART_WaitOnFlagUntilTimeout+0x30>
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d11d      	bne.n	800a1c4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a196:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	689a      	ldr	r2, [r3, #8]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f022 0201 	bic.w	r2, r2, #1
 800a1a6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2220      	movs	r2, #32
 800a1ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2220      	movs	r2, #32
 800a1b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a1c0:	2303      	movs	r3, #3
 800a1c2:	e045      	b.n	800a250 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f003 0304 	and.w	r3, r3, #4
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d02e      	beq.n	800a230 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	69db      	ldr	r3, [r3, #28]
 800a1d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1e0:	d126      	bne.n	800a230 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a1ea:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a1fa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	689a      	ldr	r2, [r3, #8]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f022 0201 	bic.w	r2, r2, #1
 800a20a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2220      	movs	r2, #32
 800a210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2220      	movs	r2, #32
 800a218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2220      	movs	r2, #32
 800a220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2200      	movs	r2, #0
 800a228:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800a22c:	2303      	movs	r3, #3
 800a22e:	e00f      	b.n	800a250 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	69da      	ldr	r2, [r3, #28]
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	4013      	ands	r3, r2
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	bf0c      	ite	eq
 800a240:	2301      	moveq	r3, #1
 800a242:	2300      	movne	r3, #0
 800a244:	b2db      	uxtb	r3, r3
 800a246:	461a      	mov	r2, r3
 800a248:	79fb      	ldrb	r3, [r7, #7]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d08d      	beq.n	800a16a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a2e      	ldr	r2, [pc, #184]	; (800a320 <HAL_UARTEx_DisableFifoMode+0xc8>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d027      	beq.n	800a2ba <HAL_UARTEx_DisableFifoMode+0x62>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a2d      	ldr	r2, [pc, #180]	; (800a324 <HAL_UARTEx_DisableFifoMode+0xcc>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d022      	beq.n	800a2ba <HAL_UARTEx_DisableFifoMode+0x62>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a2b      	ldr	r2, [pc, #172]	; (800a328 <HAL_UARTEx_DisableFifoMode+0xd0>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d01d      	beq.n	800a2ba <HAL_UARTEx_DisableFifoMode+0x62>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a2a      	ldr	r2, [pc, #168]	; (800a32c <HAL_UARTEx_DisableFifoMode+0xd4>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d018      	beq.n	800a2ba <HAL_UARTEx_DisableFifoMode+0x62>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a28      	ldr	r2, [pc, #160]	; (800a330 <HAL_UARTEx_DisableFifoMode+0xd8>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d013      	beq.n	800a2ba <HAL_UARTEx_DisableFifoMode+0x62>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a27      	ldr	r2, [pc, #156]	; (800a334 <HAL_UARTEx_DisableFifoMode+0xdc>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d00e      	beq.n	800a2ba <HAL_UARTEx_DisableFifoMode+0x62>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	4a25      	ldr	r2, [pc, #148]	; (800a338 <HAL_UARTEx_DisableFifoMode+0xe0>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d009      	beq.n	800a2ba <HAL_UARTEx_DisableFifoMode+0x62>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a24      	ldr	r2, [pc, #144]	; (800a33c <HAL_UARTEx_DisableFifoMode+0xe4>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d004      	beq.n	800a2ba <HAL_UARTEx_DisableFifoMode+0x62>
 800a2b0:	f240 2111 	movw	r1, #529	; 0x211
 800a2b4:	4822      	ldr	r0, [pc, #136]	; (800a340 <HAL_UARTEx_DisableFifoMode+0xe8>)
 800a2b6:	f7f6 fd14 	bl	8000ce2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d101      	bne.n	800a2c8 <HAL_UARTEx_DisableFifoMode+0x70>
 800a2c4:	2302      	movs	r3, #2
 800a2c6:	e027      	b.n	800a318 <HAL_UARTEx_DisableFifoMode+0xc0>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2224      	movs	r2, #36	; 0x24
 800a2d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f022 0201 	bic.w	r2, r2, #1
 800a2ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a2f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2220      	movs	r2, #32
 800a30a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	40011000 	.word	0x40011000
 800a324:	40004400 	.word	0x40004400
 800a328:	40004800 	.word	0x40004800
 800a32c:	40004c00 	.word	0x40004c00
 800a330:	40005000 	.word	0x40005000
 800a334:	40011400 	.word	0x40011400
 800a338:	40007800 	.word	0x40007800
 800a33c:	40007c00 	.word	0x40007c00
 800a340:	08018d5c 	.word	0x08018d5c

0800a344 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a40      	ldr	r2, [pc, #256]	; (800a454 <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d027      	beq.n	800a3a8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a3e      	ldr	r2, [pc, #248]	; (800a458 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d022      	beq.n	800a3a8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a3d      	ldr	r2, [pc, #244]	; (800a45c <HAL_UARTEx_SetTxFifoThreshold+0x118>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d01d      	beq.n	800a3a8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a3b      	ldr	r2, [pc, #236]	; (800a460 <HAL_UARTEx_SetTxFifoThreshold+0x11c>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d018      	beq.n	800a3a8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a3a      	ldr	r2, [pc, #232]	; (800a464 <HAL_UARTEx_SetTxFifoThreshold+0x120>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d013      	beq.n	800a3a8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a38      	ldr	r2, [pc, #224]	; (800a468 <HAL_UARTEx_SetTxFifoThreshold+0x124>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d00e      	beq.n	800a3a8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a37      	ldr	r2, [pc, #220]	; (800a46c <HAL_UARTEx_SetTxFifoThreshold+0x128>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d009      	beq.n	800a3a8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a35      	ldr	r2, [pc, #212]	; (800a470 <HAL_UARTEx_SetTxFifoThreshold+0x12c>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d004      	beq.n	800a3a8 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 800a39e:	f240 213f 	movw	r1, #575	; 0x23f
 800a3a2:	4834      	ldr	r0, [pc, #208]	; (800a474 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800a3a4:	f7f6 fc9d 	bl	8000ce2 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d018      	beq.n	800a3e0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3b4:	d014      	beq.n	800a3e0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3bc:	d010      	beq.n	800a3e0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800a3c4:	d00c      	beq.n	800a3e0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3cc:	d008      	beq.n	800a3e0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 800a3d4:	d004      	beq.n	800a3e0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 800a3d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a3da:	4826      	ldr	r0, [pc, #152]	; (800a474 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 800a3dc:	f7f6 fc81 	bl	8000ce2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d101      	bne.n	800a3ee <HAL_UARTEx_SetTxFifoThreshold+0xaa>
 800a3ea:	2302      	movs	r3, #2
 800a3ec:	e02d      	b.n	800a44a <HAL_UARTEx_SetTxFifoThreshold+0x106>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2224      	movs	r2, #36	; 0x24
 800a3fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f022 0201 	bic.w	r2, r2, #1
 800a414:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	683a      	ldr	r2, [r7, #0]
 800a426:	430a      	orrs	r2, r1
 800a428:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f8be 	bl	800a5ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2220      	movs	r2, #32
 800a43c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3710      	adds	r7, #16
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	40011000 	.word	0x40011000
 800a458:	40004400 	.word	0x40004400
 800a45c:	40004800 	.word	0x40004800
 800a460:	40004c00 	.word	0x40004c00
 800a464:	40005000 	.word	0x40005000
 800a468:	40011400 	.word	0x40011400
 800a46c:	40007800 	.word	0x40007800
 800a470:	40007c00 	.word	0x40007c00
 800a474:	08018d5c 	.word	0x08018d5c

0800a478 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a40      	ldr	r2, [pc, #256]	; (800a588 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d027      	beq.n	800a4dc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a3e      	ldr	r2, [pc, #248]	; (800a58c <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d022      	beq.n	800a4dc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a3d      	ldr	r2, [pc, #244]	; (800a590 <HAL_UARTEx_SetRxFifoThreshold+0x118>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d01d      	beq.n	800a4dc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a3b      	ldr	r2, [pc, #236]	; (800a594 <HAL_UARTEx_SetRxFifoThreshold+0x11c>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d018      	beq.n	800a4dc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a3a      	ldr	r2, [pc, #232]	; (800a598 <HAL_UARTEx_SetRxFifoThreshold+0x120>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d013      	beq.n	800a4dc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a38      	ldr	r2, [pc, #224]	; (800a59c <HAL_UARTEx_SetRxFifoThreshold+0x124>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d00e      	beq.n	800a4dc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a37      	ldr	r2, [pc, #220]	; (800a5a0 <HAL_UARTEx_SetRxFifoThreshold+0x128>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d009      	beq.n	800a4dc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a35      	ldr	r2, [pc, #212]	; (800a5a4 <HAL_UARTEx_SetRxFifoThreshold+0x12c>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d004      	beq.n	800a4dc <HAL_UARTEx_SetRxFifoThreshold+0x64>
 800a4d2:	f44f 711c 	mov.w	r1, #624	; 0x270
 800a4d6:	4834      	ldr	r0, [pc, #208]	; (800a5a8 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800a4d8:	f7f6 fc03 	bl	8000ce2 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d018      	beq.n	800a514 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4e8:	d014      	beq.n	800a514 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a4f0:	d010      	beq.n	800a514 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800a4f8:	d00c      	beq.n	800a514 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a500:	d008      	beq.n	800a514 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800a508:	d004      	beq.n	800a514 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 800a50a:	f240 2171 	movw	r1, #625	; 0x271
 800a50e:	4826      	ldr	r0, [pc, #152]	; (800a5a8 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 800a510:	f7f6 fbe7 	bl	8000ce2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d101      	bne.n	800a522 <HAL_UARTEx_SetRxFifoThreshold+0xaa>
 800a51e:	2302      	movs	r3, #2
 800a520:	e02d      	b.n	800a57e <HAL_UARTEx_SetRxFifoThreshold+0x106>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2201      	movs	r2, #1
 800a526:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2224      	movs	r2, #36	; 0x24
 800a52e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f022 0201 	bic.w	r2, r2, #1
 800a548:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	683a      	ldr	r2, [r7, #0]
 800a55a:	430a      	orrs	r2, r1
 800a55c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 f824 	bl	800a5ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2220      	movs	r2, #32
 800a570:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	40011000 	.word	0x40011000
 800a58c:	40004400 	.word	0x40004400
 800a590:	40004800 	.word	0x40004800
 800a594:	40004c00 	.word	0x40004c00
 800a598:	40005000 	.word	0x40005000
 800a59c:	40011400 	.word	0x40011400
 800a5a0:	40007800 	.word	0x40007800
 800a5a4:	40007c00 	.word	0x40007c00
 800a5a8:	08018d5c 	.word	0x08018d5c

0800a5ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b089      	sub	sp, #36	; 0x24
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a5b4:	4a2f      	ldr	r2, [pc, #188]	; (800a674 <UARTEx_SetNbDataToProcess+0xc8>)
 800a5b6:	f107 0314 	add.w	r3, r7, #20
 800a5ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a5be:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a5c2:	4a2d      	ldr	r2, [pc, #180]	; (800a678 <UARTEx_SetNbDataToProcess+0xcc>)
 800a5c4:	f107 030c 	add.w	r3, r7, #12
 800a5c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a5cc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d108      	bne.n	800a5ea <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a5e8:	e03d      	b.n	800a666 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a5ea:	2308      	movs	r3, #8
 800a5ec:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a5ee:	2308      	movs	r3, #8
 800a5f0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	0e5b      	lsrs	r3, r3, #25
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	f003 0307 	and.w	r3, r3, #7
 800a600:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	0f5b      	lsrs	r3, r3, #29
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	f003 0307 	and.w	r3, r3, #7
 800a610:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a612:	7fbb      	ldrb	r3, [r7, #30]
 800a614:	7f3a      	ldrb	r2, [r7, #28]
 800a616:	f107 0120 	add.w	r1, r7, #32
 800a61a:	440a      	add	r2, r1
 800a61c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a620:	fb02 f303 	mul.w	r3, r2, r3
 800a624:	7f3a      	ldrb	r2, [r7, #28]
 800a626:	f107 0120 	add.w	r1, r7, #32
 800a62a:	440a      	add	r2, r1
 800a62c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a630:	fb93 f3f2 	sdiv	r3, r3, r2
 800a634:	b29a      	uxth	r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a63c:	7ffb      	ldrb	r3, [r7, #31]
 800a63e:	7f7a      	ldrb	r2, [r7, #29]
 800a640:	f107 0120 	add.w	r1, r7, #32
 800a644:	440a      	add	r2, r1
 800a646:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a64a:	fb02 f303 	mul.w	r3, r2, r3
 800a64e:	7f7a      	ldrb	r2, [r7, #29]
 800a650:	f107 0120 	add.w	r1, r7, #32
 800a654:	440a      	add	r2, r1
 800a656:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a65a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a65e:	b29a      	uxth	r2, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a666:	bf00      	nop
 800a668:	3724      	adds	r7, #36	; 0x24
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	08018d98 	.word	0x08018d98
 800a678:	08018da0 	.word	0x08018da0

0800a67c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a67c:	b5b0      	push	{r4, r5, r7, lr}
 800a67e:	b08c      	sub	sp, #48	; 0x30
 800a680:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800a682:	4b96      	ldr	r3, [pc, #600]	; (800a8dc <MX_LWIP_Init+0x260>)
 800a684:	220a      	movs	r2, #10
 800a686:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 10;
 800a688:	4b94      	ldr	r3, [pc, #592]	; (800a8dc <MX_LWIP_Init+0x260>)
 800a68a:	220a      	movs	r2, #10
 800a68c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 800a68e:	4b93      	ldr	r3, [pc, #588]	; (800a8dc <MX_LWIP_Init+0x260>)
 800a690:	220a      	movs	r2, #10
 800a692:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800a694:	4b91      	ldr	r3, [pc, #580]	; (800a8dc <MX_LWIP_Init+0x260>)
 800a696:	220a      	movs	r2, #10
 800a698:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a69a:	4b91      	ldr	r3, [pc, #580]	; (800a8e0 <MX_LWIP_Init+0x264>)
 800a69c:	22ff      	movs	r2, #255	; 0xff
 800a69e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a6a0:	4b8f      	ldr	r3, [pc, #572]	; (800a8e0 <MX_LWIP_Init+0x264>)
 800a6a2:	22ff      	movs	r2, #255	; 0xff
 800a6a4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800a6a6:	4b8e      	ldr	r3, [pc, #568]	; (800a8e0 <MX_LWIP_Init+0x264>)
 800a6a8:	22ff      	movs	r2, #255	; 0xff
 800a6aa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a6ac:	4b8c      	ldr	r3, [pc, #560]	; (800a8e0 <MX_LWIP_Init+0x264>)
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800a6b2:	4b8c      	ldr	r3, [pc, #560]	; (800a8e4 <MX_LWIP_Init+0x268>)
 800a6b4:	220a      	movs	r2, #10
 800a6b6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 10;
 800a6b8:	4b8a      	ldr	r3, [pc, #552]	; (800a8e4 <MX_LWIP_Init+0x268>)
 800a6ba:	220a      	movs	r2, #10
 800a6bc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 10;
 800a6be:	4b89      	ldr	r3, [pc, #548]	; (800a8e4 <MX_LWIP_Init+0x268>)
 800a6c0:	220a      	movs	r2, #10
 800a6c2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 11;
 800a6c4:	4b87      	ldr	r3, [pc, #540]	; (800a8e4 <MX_LWIP_Init+0x268>)
 800a6c6:	220b      	movs	r2, #11
 800a6c8:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	2000      	movs	r0, #0
 800a6ce:	f004 fa6b 	bl	800eba8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a6d2:	4b82      	ldr	r3, [pc, #520]	; (800a8dc <MX_LWIP_Init+0x260>)
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	061a      	lsls	r2, r3, #24
 800a6d8:	4b80      	ldr	r3, [pc, #512]	; (800a8dc <MX_LWIP_Init+0x260>)
 800a6da:	785b      	ldrb	r3, [r3, #1]
 800a6dc:	041b      	lsls	r3, r3, #16
 800a6de:	431a      	orrs	r2, r3
 800a6e0:	4b7e      	ldr	r3, [pc, #504]	; (800a8dc <MX_LWIP_Init+0x260>)
 800a6e2:	789b      	ldrb	r3, [r3, #2]
 800a6e4:	021b      	lsls	r3, r3, #8
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	4a7c      	ldr	r2, [pc, #496]	; (800a8dc <MX_LWIP_Init+0x260>)
 800a6ea:	78d2      	ldrb	r2, [r2, #3]
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	061a      	lsls	r2, r3, #24
 800a6f0:	4b7a      	ldr	r3, [pc, #488]	; (800a8dc <MX_LWIP_Init+0x260>)
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	0619      	lsls	r1, r3, #24
 800a6f6:	4b79      	ldr	r3, [pc, #484]	; (800a8dc <MX_LWIP_Init+0x260>)
 800a6f8:	785b      	ldrb	r3, [r3, #1]
 800a6fa:	041b      	lsls	r3, r3, #16
 800a6fc:	4319      	orrs	r1, r3
 800a6fe:	4b77      	ldr	r3, [pc, #476]	; (800a8dc <MX_LWIP_Init+0x260>)
 800a700:	789b      	ldrb	r3, [r3, #2]
 800a702:	021b      	lsls	r3, r3, #8
 800a704:	430b      	orrs	r3, r1
 800a706:	4975      	ldr	r1, [pc, #468]	; (800a8dc <MX_LWIP_Init+0x260>)
 800a708:	78c9      	ldrb	r1, [r1, #3]
 800a70a:	430b      	orrs	r3, r1
 800a70c:	021b      	lsls	r3, r3, #8
 800a70e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a712:	431a      	orrs	r2, r3
 800a714:	4b71      	ldr	r3, [pc, #452]	; (800a8dc <MX_LWIP_Init+0x260>)
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	0619      	lsls	r1, r3, #24
 800a71a:	4b70      	ldr	r3, [pc, #448]	; (800a8dc <MX_LWIP_Init+0x260>)
 800a71c:	785b      	ldrb	r3, [r3, #1]
 800a71e:	041b      	lsls	r3, r3, #16
 800a720:	4319      	orrs	r1, r3
 800a722:	4b6e      	ldr	r3, [pc, #440]	; (800a8dc <MX_LWIP_Init+0x260>)
 800a724:	789b      	ldrb	r3, [r3, #2]
 800a726:	021b      	lsls	r3, r3, #8
 800a728:	430b      	orrs	r3, r1
 800a72a:	496c      	ldr	r1, [pc, #432]	; (800a8dc <MX_LWIP_Init+0x260>)
 800a72c:	78c9      	ldrb	r1, [r1, #3]
 800a72e:	430b      	orrs	r3, r1
 800a730:	0a1b      	lsrs	r3, r3, #8
 800a732:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a736:	431a      	orrs	r2, r3
 800a738:	4b68      	ldr	r3, [pc, #416]	; (800a8dc <MX_LWIP_Init+0x260>)
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	0619      	lsls	r1, r3, #24
 800a73e:	4b67      	ldr	r3, [pc, #412]	; (800a8dc <MX_LWIP_Init+0x260>)
 800a740:	785b      	ldrb	r3, [r3, #1]
 800a742:	041b      	lsls	r3, r3, #16
 800a744:	4319      	orrs	r1, r3
 800a746:	4b65      	ldr	r3, [pc, #404]	; (800a8dc <MX_LWIP_Init+0x260>)
 800a748:	789b      	ldrb	r3, [r3, #2]
 800a74a:	021b      	lsls	r3, r3, #8
 800a74c:	430b      	orrs	r3, r1
 800a74e:	4963      	ldr	r1, [pc, #396]	; (800a8dc <MX_LWIP_Init+0x260>)
 800a750:	78c9      	ldrb	r1, [r1, #3]
 800a752:	430b      	orrs	r3, r1
 800a754:	0e1b      	lsrs	r3, r3, #24
 800a756:	4313      	orrs	r3, r2
 800a758:	4a63      	ldr	r2, [pc, #396]	; (800a8e8 <MX_LWIP_Init+0x26c>)
 800a75a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a75c:	4b60      	ldr	r3, [pc, #384]	; (800a8e0 <MX_LWIP_Init+0x264>)
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	061a      	lsls	r2, r3, #24
 800a762:	4b5f      	ldr	r3, [pc, #380]	; (800a8e0 <MX_LWIP_Init+0x264>)
 800a764:	785b      	ldrb	r3, [r3, #1]
 800a766:	041b      	lsls	r3, r3, #16
 800a768:	431a      	orrs	r2, r3
 800a76a:	4b5d      	ldr	r3, [pc, #372]	; (800a8e0 <MX_LWIP_Init+0x264>)
 800a76c:	789b      	ldrb	r3, [r3, #2]
 800a76e:	021b      	lsls	r3, r3, #8
 800a770:	4313      	orrs	r3, r2
 800a772:	4a5b      	ldr	r2, [pc, #364]	; (800a8e0 <MX_LWIP_Init+0x264>)
 800a774:	78d2      	ldrb	r2, [r2, #3]
 800a776:	4313      	orrs	r3, r2
 800a778:	061a      	lsls	r2, r3, #24
 800a77a:	4b59      	ldr	r3, [pc, #356]	; (800a8e0 <MX_LWIP_Init+0x264>)
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	0619      	lsls	r1, r3, #24
 800a780:	4b57      	ldr	r3, [pc, #348]	; (800a8e0 <MX_LWIP_Init+0x264>)
 800a782:	785b      	ldrb	r3, [r3, #1]
 800a784:	041b      	lsls	r3, r3, #16
 800a786:	4319      	orrs	r1, r3
 800a788:	4b55      	ldr	r3, [pc, #340]	; (800a8e0 <MX_LWIP_Init+0x264>)
 800a78a:	789b      	ldrb	r3, [r3, #2]
 800a78c:	021b      	lsls	r3, r3, #8
 800a78e:	430b      	orrs	r3, r1
 800a790:	4953      	ldr	r1, [pc, #332]	; (800a8e0 <MX_LWIP_Init+0x264>)
 800a792:	78c9      	ldrb	r1, [r1, #3]
 800a794:	430b      	orrs	r3, r1
 800a796:	021b      	lsls	r3, r3, #8
 800a798:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a79c:	431a      	orrs	r2, r3
 800a79e:	4b50      	ldr	r3, [pc, #320]	; (800a8e0 <MX_LWIP_Init+0x264>)
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	0619      	lsls	r1, r3, #24
 800a7a4:	4b4e      	ldr	r3, [pc, #312]	; (800a8e0 <MX_LWIP_Init+0x264>)
 800a7a6:	785b      	ldrb	r3, [r3, #1]
 800a7a8:	041b      	lsls	r3, r3, #16
 800a7aa:	4319      	orrs	r1, r3
 800a7ac:	4b4c      	ldr	r3, [pc, #304]	; (800a8e0 <MX_LWIP_Init+0x264>)
 800a7ae:	789b      	ldrb	r3, [r3, #2]
 800a7b0:	021b      	lsls	r3, r3, #8
 800a7b2:	430b      	orrs	r3, r1
 800a7b4:	494a      	ldr	r1, [pc, #296]	; (800a8e0 <MX_LWIP_Init+0x264>)
 800a7b6:	78c9      	ldrb	r1, [r1, #3]
 800a7b8:	430b      	orrs	r3, r1
 800a7ba:	0a1b      	lsrs	r3, r3, #8
 800a7bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a7c0:	431a      	orrs	r2, r3
 800a7c2:	4b47      	ldr	r3, [pc, #284]	; (800a8e0 <MX_LWIP_Init+0x264>)
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	0619      	lsls	r1, r3, #24
 800a7c8:	4b45      	ldr	r3, [pc, #276]	; (800a8e0 <MX_LWIP_Init+0x264>)
 800a7ca:	785b      	ldrb	r3, [r3, #1]
 800a7cc:	041b      	lsls	r3, r3, #16
 800a7ce:	4319      	orrs	r1, r3
 800a7d0:	4b43      	ldr	r3, [pc, #268]	; (800a8e0 <MX_LWIP_Init+0x264>)
 800a7d2:	789b      	ldrb	r3, [r3, #2]
 800a7d4:	021b      	lsls	r3, r3, #8
 800a7d6:	430b      	orrs	r3, r1
 800a7d8:	4941      	ldr	r1, [pc, #260]	; (800a8e0 <MX_LWIP_Init+0x264>)
 800a7da:	78c9      	ldrb	r1, [r1, #3]
 800a7dc:	430b      	orrs	r3, r1
 800a7de:	0e1b      	lsrs	r3, r3, #24
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	4a42      	ldr	r2, [pc, #264]	; (800a8ec <MX_LWIP_Init+0x270>)
 800a7e4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a7e6:	4b3f      	ldr	r3, [pc, #252]	; (800a8e4 <MX_LWIP_Init+0x268>)
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	061a      	lsls	r2, r3, #24
 800a7ec:	4b3d      	ldr	r3, [pc, #244]	; (800a8e4 <MX_LWIP_Init+0x268>)
 800a7ee:	785b      	ldrb	r3, [r3, #1]
 800a7f0:	041b      	lsls	r3, r3, #16
 800a7f2:	431a      	orrs	r2, r3
 800a7f4:	4b3b      	ldr	r3, [pc, #236]	; (800a8e4 <MX_LWIP_Init+0x268>)
 800a7f6:	789b      	ldrb	r3, [r3, #2]
 800a7f8:	021b      	lsls	r3, r3, #8
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	4a39      	ldr	r2, [pc, #228]	; (800a8e4 <MX_LWIP_Init+0x268>)
 800a7fe:	78d2      	ldrb	r2, [r2, #3]
 800a800:	4313      	orrs	r3, r2
 800a802:	061a      	lsls	r2, r3, #24
 800a804:	4b37      	ldr	r3, [pc, #220]	; (800a8e4 <MX_LWIP_Init+0x268>)
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	0619      	lsls	r1, r3, #24
 800a80a:	4b36      	ldr	r3, [pc, #216]	; (800a8e4 <MX_LWIP_Init+0x268>)
 800a80c:	785b      	ldrb	r3, [r3, #1]
 800a80e:	041b      	lsls	r3, r3, #16
 800a810:	4319      	orrs	r1, r3
 800a812:	4b34      	ldr	r3, [pc, #208]	; (800a8e4 <MX_LWIP_Init+0x268>)
 800a814:	789b      	ldrb	r3, [r3, #2]
 800a816:	021b      	lsls	r3, r3, #8
 800a818:	430b      	orrs	r3, r1
 800a81a:	4932      	ldr	r1, [pc, #200]	; (800a8e4 <MX_LWIP_Init+0x268>)
 800a81c:	78c9      	ldrb	r1, [r1, #3]
 800a81e:	430b      	orrs	r3, r1
 800a820:	021b      	lsls	r3, r3, #8
 800a822:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a826:	431a      	orrs	r2, r3
 800a828:	4b2e      	ldr	r3, [pc, #184]	; (800a8e4 <MX_LWIP_Init+0x268>)
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	0619      	lsls	r1, r3, #24
 800a82e:	4b2d      	ldr	r3, [pc, #180]	; (800a8e4 <MX_LWIP_Init+0x268>)
 800a830:	785b      	ldrb	r3, [r3, #1]
 800a832:	041b      	lsls	r3, r3, #16
 800a834:	4319      	orrs	r1, r3
 800a836:	4b2b      	ldr	r3, [pc, #172]	; (800a8e4 <MX_LWIP_Init+0x268>)
 800a838:	789b      	ldrb	r3, [r3, #2]
 800a83a:	021b      	lsls	r3, r3, #8
 800a83c:	430b      	orrs	r3, r1
 800a83e:	4929      	ldr	r1, [pc, #164]	; (800a8e4 <MX_LWIP_Init+0x268>)
 800a840:	78c9      	ldrb	r1, [r1, #3]
 800a842:	430b      	orrs	r3, r1
 800a844:	0a1b      	lsrs	r3, r3, #8
 800a846:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a84a:	431a      	orrs	r2, r3
 800a84c:	4b25      	ldr	r3, [pc, #148]	; (800a8e4 <MX_LWIP_Init+0x268>)
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	0619      	lsls	r1, r3, #24
 800a852:	4b24      	ldr	r3, [pc, #144]	; (800a8e4 <MX_LWIP_Init+0x268>)
 800a854:	785b      	ldrb	r3, [r3, #1]
 800a856:	041b      	lsls	r3, r3, #16
 800a858:	4319      	orrs	r1, r3
 800a85a:	4b22      	ldr	r3, [pc, #136]	; (800a8e4 <MX_LWIP_Init+0x268>)
 800a85c:	789b      	ldrb	r3, [r3, #2]
 800a85e:	021b      	lsls	r3, r3, #8
 800a860:	430b      	orrs	r3, r1
 800a862:	4920      	ldr	r1, [pc, #128]	; (800a8e4 <MX_LWIP_Init+0x268>)
 800a864:	78c9      	ldrb	r1, [r1, #3]
 800a866:	430b      	orrs	r3, r1
 800a868:	0e1b      	lsrs	r3, r3, #24
 800a86a:	4313      	orrs	r3, r2
 800a86c:	4a20      	ldr	r2, [pc, #128]	; (800a8f0 <MX_LWIP_Init+0x274>)
 800a86e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800a870:	4b20      	ldr	r3, [pc, #128]	; (800a8f4 <MX_LWIP_Init+0x278>)
 800a872:	9302      	str	r3, [sp, #8]
 800a874:	4b20      	ldr	r3, [pc, #128]	; (800a8f8 <MX_LWIP_Init+0x27c>)
 800a876:	9301      	str	r3, [sp, #4]
 800a878:	2300      	movs	r3, #0
 800a87a:	9300      	str	r3, [sp, #0]
 800a87c:	4b1c      	ldr	r3, [pc, #112]	; (800a8f0 <MX_LWIP_Init+0x274>)
 800a87e:	4a1b      	ldr	r2, [pc, #108]	; (800a8ec <MX_LWIP_Init+0x270>)
 800a880:	4919      	ldr	r1, [pc, #100]	; (800a8e8 <MX_LWIP_Init+0x26c>)
 800a882:	481e      	ldr	r0, [pc, #120]	; (800a8fc <MX_LWIP_Init+0x280>)
 800a884:	f004 ff48 	bl	800f718 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a888:	481c      	ldr	r0, [pc, #112]	; (800a8fc <MX_LWIP_Init+0x280>)
 800a88a:	f005 f83b 	bl	800f904 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a88e:	4b1b      	ldr	r3, [pc, #108]	; (800a8fc <MX_LWIP_Init+0x280>)
 800a890:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800a894:	089b      	lsrs	r3, r3, #2
 800a896:	f003 0301 	and.w	r3, r3, #1
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d003      	beq.n	800a8a8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a8a0:	4816      	ldr	r0, [pc, #88]	; (800a8fc <MX_LWIP_Init+0x280>)
 800a8a2:	f005 f83f 	bl	800f924 <netif_set_up>
 800a8a6:	e002      	b.n	800a8ae <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a8a8:	4814      	ldr	r0, [pc, #80]	; (800a8fc <MX_LWIP_Init+0x280>)
 800a8aa:	f005 f887 	bl	800f9bc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a8ae:	4914      	ldr	r1, [pc, #80]	; (800a900 <MX_LWIP_Init+0x284>)
 800a8b0:	4812      	ldr	r0, [pc, #72]	; (800a8fc <MX_LWIP_Init+0x280>)
 800a8b2:	f005 f8f8 	bl	800faa6 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
	osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0,
 800a8b6:	4b13      	ldr	r3, [pc, #76]	; (800a904 <MX_LWIP_Init+0x288>)
 800a8b8:	1d3c      	adds	r4, r7, #4
 800a8ba:	461d      	mov	r5, r3
 800a8bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a8be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a8c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a8c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			configMINIMAL_STACK_SIZE *2);
	osThreadCreate(osThread(EthLink), &gnetif);
 800a8c8:	1d3b      	adds	r3, r7, #4
 800a8ca:	490c      	ldr	r1, [pc, #48]	; (800a8fc <MX_LWIP_Init+0x280>)
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f000 fcfa 	bl	800b2c6 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a8d2:	bf00      	nop
 800a8d4:	3720      	adds	r7, #32
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bdb0      	pop	{r4, r5, r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	24021a74 	.word	0x24021a74
 800a8e0:	24021a70 	.word	0x24021a70
 800a8e4:	24021a2c 	.word	0x24021a2c
 800a8e8:	24021a6c 	.word	0x24021a6c
 800a8ec:	24021a78 	.word	0x24021a78
 800a8f0:	24021a7c 	.word	0x24021a7c
 800a8f4:	0800ead1 	.word	0x0800ead1
 800a8f8:	0800b001 	.word	0x0800b001
 800a8fc:	24021a30 	.word	0x24021a30
 800a900:	0800a909 	.word	0x0800a909
 800a904:	08018db0 	.word	0x08018db0

0800a908 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status 
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif) 
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800a916:	f003 0301 	and.w	r3, r3, #1
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d003      	beq.n	800a928 <ethernet_link_status_updated+0x20>
  {
/* USER CODE BEGIN 5 */
		/* When the netif is fully configured this function must be called */
		netif_set_up(&gnetif);
 800a920:	4805      	ldr	r0, [pc, #20]	; (800a938 <ethernet_link_status_updated+0x30>)
 800a922:	f004 ffff 	bl	800f924 <netif_set_up>
    /* Update DHCP state machine */
    DHCP_state = DHCP_LINK_DOWN;
#endif
/* USER CODE END 6 */
  } 
}
 800a926:	e002      	b.n	800a92e <ethernet_link_status_updated+0x26>
		netif_set_down(&gnetif);
 800a928:	4803      	ldr	r0, [pc, #12]	; (800a938 <ethernet_link_status_updated+0x30>)
 800a92a:	f005 f847 	bl	800f9bc <netif_set_down>
}
 800a92e:	bf00      	nop
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	24021a30 	.word	0x24021a30

0800a93c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b087      	sub	sp, #28
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800a94e:	2320      	movs	r3, #32
 800a950:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a952:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 800a956:	e00b      	b.n	800a970 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 800a958:	4a0c      	ldr	r2, [pc, #48]	; (800a98c <SCB_InvalidateDCache_by_Addr+0x50>)
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	693a      	ldr	r2, [r7, #16]
 800a964:	4413      	add	r3, r2
 800a966:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800a968:	697a      	ldr	r2, [r7, #20]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	1ad3      	subs	r3, r2, r3
 800a96e:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	2b00      	cmp	r3, #0
 800a974:	dcf0      	bgt.n	800a958 <SCB_InvalidateDCache_by_Addr+0x1c>
 800a976:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a97a:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 800a97e:	bf00      	nop
 800a980:	371c      	adds	r7, #28
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	e000ed00 	.word	0xe000ed00

0800a990 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b090      	sub	sp, #64	; 0x40
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a99c:	2200      	movs	r2, #0
 800a99e:	601a      	str	r2, [r3, #0]
 800a9a0:	605a      	str	r2, [r3, #4]
 800a9a2:	609a      	str	r2, [r3, #8]
 800a9a4:	60da      	str	r2, [r3, #12]
 800a9a6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a6c      	ldr	r2, [pc, #432]	; (800ab60 <HAL_ETH_MspInit+0x1d0>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	f040 80d2 	bne.w	800ab58 <HAL_ETH_MspInit+0x1c8>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800a9b4:	4b6b      	ldr	r3, [pc, #428]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800a9b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a9ba:	4a6a      	ldr	r2, [pc, #424]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800a9bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9c0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a9c4:	4b67      	ldr	r3, [pc, #412]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800a9c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a9ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a9ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800a9d2:	4b64      	ldr	r3, [pc, #400]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800a9d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a9d8:	4a62      	ldr	r2, [pc, #392]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800a9da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a9e2:	4b60      	ldr	r3, [pc, #384]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800a9e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a9e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9ec:	627b      	str	r3, [r7, #36]	; 0x24
 800a9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800a9f0:	4b5c      	ldr	r3, [pc, #368]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800a9f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a9f6:	4a5b      	ldr	r2, [pc, #364]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800a9f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9fc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800aa00:	4b58      	ldr	r3, [pc, #352]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800aa02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800aa06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa0a:	623b      	str	r3, [r7, #32]
 800aa0c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800aa0e:	4b55      	ldr	r3, [pc, #340]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800aa10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa14:	4a53      	ldr	r2, [pc, #332]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800aa16:	f043 0310 	orr.w	r3, r3, #16
 800aa1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aa1e:	4b51      	ldr	r3, [pc, #324]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800aa20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa24:	f003 0310 	and.w	r3, r3, #16
 800aa28:	61fb      	str	r3, [r7, #28]
 800aa2a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa2c:	4b4d      	ldr	r3, [pc, #308]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800aa2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa32:	4a4c      	ldr	r2, [pc, #304]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800aa34:	f043 0304 	orr.w	r3, r3, #4
 800aa38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aa3c:	4b49      	ldr	r3, [pc, #292]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800aa3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa42:	f003 0304 	and.w	r3, r3, #4
 800aa46:	61bb      	str	r3, [r7, #24]
 800aa48:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa4a:	4b46      	ldr	r3, [pc, #280]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800aa4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa50:	4a44      	ldr	r2, [pc, #272]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800aa52:	f043 0301 	orr.w	r3, r3, #1
 800aa56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aa5a:	4b42      	ldr	r3, [pc, #264]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800aa5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa60:	f003 0301 	and.w	r3, r3, #1
 800aa64:	617b      	str	r3, [r7, #20]
 800aa66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aa68:	4b3e      	ldr	r3, [pc, #248]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800aa6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa6e:	4a3d      	ldr	r2, [pc, #244]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800aa70:	f043 0302 	orr.w	r3, r3, #2
 800aa74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aa78:	4b3a      	ldr	r3, [pc, #232]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800aa7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa7e:	f003 0302 	and.w	r3, r3, #2
 800aa82:	613b      	str	r3, [r7, #16]
 800aa84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800aa86:	4b37      	ldr	r3, [pc, #220]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800aa88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa8c:	4a35      	ldr	r2, [pc, #212]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800aa8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800aa96:	4b33      	ldr	r3, [pc, #204]	; (800ab64 <HAL_ETH_MspInit+0x1d4>)
 800aa98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaa0:	60fb      	str	r3, [r7, #12]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> ETH_RXD3
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800aaa4:	2304      	movs	r3, #4
 800aaa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aaa8:	2302      	movs	r3, #2
 800aaaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaac:	2300      	movs	r3, #0
 800aaae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aab0:	2303      	movs	r3, #3
 800aab2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800aab4:	230b      	movs	r3, #11
 800aab6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800aab8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aabc:	4619      	mov	r1, r3
 800aabe:	482a      	ldr	r0, [pc, #168]	; (800ab68 <HAL_ETH_MspInit+0x1d8>)
 800aac0:	f7f8 feb2 	bl	8003828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|GPIO_PIN_2|GPIO_PIN_3|RMII_RXD0_Pin 
 800aac4:	233e      	movs	r3, #62	; 0x3e
 800aac6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |RMII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aac8:	2302      	movs	r3, #2
 800aaca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aacc:	2300      	movs	r3, #0
 800aace:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aad0:	2303      	movs	r3, #3
 800aad2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800aad4:	230b      	movs	r3, #11
 800aad6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aad8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aadc:	4619      	mov	r1, r3
 800aade:	4823      	ldr	r0, [pc, #140]	; (800ab6c <HAL_ETH_MspInit+0x1dc>)
 800aae0:	f7f8 fea2 	bl	8003828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|RMII_MDIO_Pin|GPIO_PIN_3 
 800aae4:	238f      	movs	r3, #143	; 0x8f
 800aae6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aae8:	2302      	movs	r3, #2
 800aaea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaec:	2300      	movs	r3, #0
 800aaee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800aaf4:	230b      	movs	r3, #11
 800aaf6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aaf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aafc:	4619      	mov	r1, r3
 800aafe:	481c      	ldr	r0, [pc, #112]	; (800ab70 <HAL_ETH_MspInit+0x1e0>)
 800ab00:	f7f8 fe92 	bl	8003828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|RMII_TXD1_Pin;
 800ab04:	f242 0303 	movw	r3, #8195	; 0x2003
 800ab08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab12:	2303      	movs	r3, #3
 800ab14:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ab16:	230b      	movs	r3, #11
 800ab18:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab1e:	4619      	mov	r1, r3
 800ab20:	4814      	ldr	r0, [pc, #80]	; (800ab74 <HAL_ETH_MspInit+0x1e4>)
 800ab22:	f7f8 fe81 	bl	8003828 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800ab26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ab2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab2c:	2302      	movs	r3, #2
 800ab2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab30:	2300      	movs	r3, #0
 800ab32:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab34:	2303      	movs	r3, #3
 800ab36:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ab38:	230b      	movs	r3, #11
 800ab3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800ab3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ab40:	4619      	mov	r1, r3
 800ab42:	480d      	ldr	r0, [pc, #52]	; (800ab78 <HAL_ETH_MspInit+0x1e8>)
 800ab44:	f7f8 fe70 	bl	8003828 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800ab48:	2200      	movs	r2, #0
 800ab4a:	2105      	movs	r1, #5
 800ab4c:	203d      	movs	r0, #61	; 0x3d
 800ab4e:	f7f6 fe01 	bl	8001754 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800ab52:	203d      	movs	r0, #61	; 0x3d
 800ab54:	f7f6 fe28 	bl	80017a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800ab58:	bf00      	nop
 800ab5a:	3740      	adds	r7, #64	; 0x40
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	40028000 	.word	0x40028000
 800ab64:	58024400 	.word	0x58024400
 800ab68:	58021000 	.word	0x58021000
 800ab6c:	58020800 	.word	0x58020800
 800ab70:	58020000 	.word	0x58020000
 800ab74:	58020400 	.word	0x58020400
 800ab78:	58021800 	.word	0x58021800

0800ab7c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800ab84:	4b04      	ldr	r3, [pc, #16]	; (800ab98 <HAL_ETH_RxCpltCallback+0x1c>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f000 fd33 	bl	800b5f4 <osSemaphoreRelease>
}
 800ab8e:	bf00      	nop
 800ab90:	3708      	adds	r7, #8
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	24002158 	.word	0x24002158

0800ab9c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800ab9c:	b5b0      	push	{r4, r5, r7, lr}
 800ab9e:	b0ac      	sub	sp, #176	; 0xb0
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  uint32_t idx = 0;
 800aba4:	2300      	movs	r3, #0
 800aba6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800abaa:	2300      	movs	r3, #0
 800abac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800abb0:	4b90      	ldr	r3, [pc, #576]	; (800adf4 <low_level_init+0x258>)
 800abb2:	4a91      	ldr	r2, [pc, #580]	; (800adf8 <low_level_init+0x25c>)
 800abb4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800abb6:	2300      	movs	r3, #0
 800abb8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800abbc:	2380      	movs	r3, #128	; 0x80
 800abbe:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800abc2:	23e1      	movs	r3, #225	; 0xe1
 800abc4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800abc8:	2300      	movs	r3, #0
 800abca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800abce:	2300      	movs	r3, #0
 800abd0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800abd4:	2300      	movs	r3, #0
 800abd6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800abda:	4a86      	ldr	r2, [pc, #536]	; (800adf4 <low_level_init+0x258>)
 800abdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800abe0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 800abe2:	4b84      	ldr	r3, [pc, #528]	; (800adf4 <low_level_init+0x258>)
 800abe4:	2200      	movs	r2, #0
 800abe6:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800abe8:	4b82      	ldr	r3, [pc, #520]	; (800adf4 <low_level_init+0x258>)
 800abea:	4a84      	ldr	r2, [pc, #528]	; (800adfc <low_level_init+0x260>)
 800abec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800abee:	4b81      	ldr	r3, [pc, #516]	; (800adf4 <low_level_init+0x258>)
 800abf0:	4a83      	ldr	r2, [pc, #524]	; (800ae00 <low_level_init+0x264>)
 800abf2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800abf4:	4b7f      	ldr	r3, [pc, #508]	; (800adf4 <low_level_init+0x258>)
 800abf6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800abfa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800abfc:	487d      	ldr	r0, [pc, #500]	; (800adf4 <low_level_init+0x258>)
 800abfe:	f7f6 ff97 	bl	8001b30 <HAL_ETH_Init>
 800ac02:	4603      	mov	r3, r0
 800ac04:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800ac08:	2234      	movs	r2, #52	; 0x34
 800ac0a:	2100      	movs	r1, #0
 800ac0c:	487d      	ldr	r0, [pc, #500]	; (800ae04 <low_level_init+0x268>)
 800ac0e:	f00d f871 	bl	8017cf4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800ac12:	4b7c      	ldr	r3, [pc, #496]	; (800ae04 <low_level_init+0x268>)
 800ac14:	2221      	movs	r2, #33	; 0x21
 800ac16:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800ac18:	4b7a      	ldr	r3, [pc, #488]	; (800ae04 <low_level_init+0x268>)
 800ac1a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ac1e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800ac20:	4b78      	ldr	r3, [pc, #480]	; (800ae04 <low_level_init+0x268>)
 800ac22:	2200      	movs	r2, #0
 800ac24:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */
  
  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800ac26:	4878      	ldr	r0, [pc, #480]	; (800ae08 <low_level_init+0x26c>)
 800ac28:	f004 fc30 	bl	800f48c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2206      	movs	r2, #6
 800ac30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ac34:	4b6f      	ldr	r3, [pc, #444]	; (800adf4 <low_level_init+0x258>)
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	781a      	ldrb	r2, [r3, #0]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800ac40:	4b6c      	ldr	r3, [pc, #432]	; (800adf4 <low_level_init+0x258>)
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	785a      	ldrb	r2, [r3, #1]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800ac4c:	4b69      	ldr	r3, [pc, #420]	; (800adf4 <low_level_init+0x258>)
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	789a      	ldrb	r2, [r3, #2]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800ac58:	4b66      	ldr	r3, [pc, #408]	; (800adf4 <low_level_init+0x258>)
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	78da      	ldrb	r2, [r3, #3]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800ac64:	4b63      	ldr	r3, [pc, #396]	; (800adf4 <low_level_init+0x258>)
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	791a      	ldrb	r2, [r3, #4]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800ac70:	4b60      	ldr	r3, [pc, #384]	; (800adf4 <low_level_init+0x258>)
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	795a      	ldrb	r2, [r3, #5]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ac82:	85da      	strh	r2, [r3, #46]	; 0x2e
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800ac8a:	f043 030a 	orr.w	r3, r3, #10
 800ac8e:	b2da      	uxtb	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800ac96:	2300      	movs	r3, #0
 800ac98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ac9c:	e012      	b.n	800acc4 <low_level_init+0x128>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800ac9e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800aca2:	4613      	mov	r3, r2
 800aca4:	005b      	lsls	r3, r3, #1
 800aca6:	4413      	add	r3, r2
 800aca8:	025b      	lsls	r3, r3, #9
 800acaa:	4a58      	ldr	r2, [pc, #352]	; (800ae0c <low_level_init+0x270>)
 800acac:	441a      	add	r2, r3
 800acae:	2300      	movs	r3, #0
 800acb0:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800acb4:	484f      	ldr	r0, [pc, #316]	; (800adf4 <low_level_init+0x258>)
 800acb6:	f7f7 f815 	bl	8001ce4 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800acba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800acbe:	3301      	adds	r3, #1
 800acc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800acc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800acc8:	2b03      	cmp	r3, #3
 800acca:	d9e8      	bls.n	800ac9e <low_level_init+0x102>
  } 
      
  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800accc:	2300      	movs	r3, #0
 800acce:	62bb      	str	r3, [r7, #40]	; 0x28
 800acd0:	2300      	movs	r3, #0
 800acd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800acd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800acd8:	2101      	movs	r1, #1
 800acda:	4618      	mov	r0, r3
 800acdc:	f000 fbfc 	bl	800b4d8 <osSemaphoreCreate>
 800ace0:	4602      	mov	r2, r0
 800ace2:	4b4b      	ldr	r3, [pc, #300]	; (800ae10 <low_level_init+0x274>)
 800ace4:	601a      	str	r2, [r3, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800ace6:	4b4b      	ldr	r3, [pc, #300]	; (800ae14 <low_level_init+0x278>)
 800ace8:	f107 040c 	add.w	r4, r7, #12
 800acec:	461d      	mov	r5, r3
 800acee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800acf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800acf2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800acf6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800acfa:	f107 030c 	add.w	r3, r7, #12
 800acfe:	6879      	ldr	r1, [r7, #4]
 800ad00:	4618      	mov	r0, r3
 800ad02:	f000 fae0 	bl	800b2c6 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */ 
    
/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800ad06:	4944      	ldr	r1, [pc, #272]	; (800ae18 <low_level_init+0x27c>)
 800ad08:	4844      	ldr	r0, [pc, #272]	; (800ae1c <low_level_init+0x280>)
 800ad0a:	f7f6 fa6c 	bl	80011e6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800ad0e:	4843      	ldr	r0, [pc, #268]	; (800ae1c <low_level_init+0x280>)
 800ad10:	f7f6 fa9b 	bl	800124a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800ad14:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d164      	bne.n	800ade6 <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ad1c:	483f      	ldr	r0, [pc, #252]	; (800ae1c <low_level_init+0x280>)
 800ad1e:	f7f6 fb3c 	bl	800139a <LAN8742_GetLinkState>
 800ad22:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  
    /* Get link state */  
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800ad26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	dc06      	bgt.n	800ad3c <low_level_init+0x1a0>
    {
      netif_set_link_down(netif);
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f004 fe99 	bl	800fa66 <netif_set_link_down>
      netif_set_down(netif);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f004 fe41 	bl	800f9bc <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800ad3a:	e056      	b.n	800adea <low_level_init+0x24e>
      switch (PHYLinkState)
 800ad3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad40:	3b02      	subs	r3, #2
 800ad42:	2b03      	cmp	r3, #3
 800ad44:	d82a      	bhi.n	800ad9c <low_level_init+0x200>
 800ad46:	a201      	add	r2, pc, #4	; (adr r2, 800ad4c <low_level_init+0x1b0>)
 800ad48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad4c:	0800ad5d 	.word	0x0800ad5d
 800ad50:	0800ad6f 	.word	0x0800ad6f
 800ad54:	0800ad7f 	.word	0x0800ad7f
 800ad58:	0800ad8f 	.word	0x0800ad8f
        duplex = ETH_FULLDUPLEX_MODE;
 800ad5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ad60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800ad64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ad68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800ad6c:	e01f      	b.n	800adae <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800ad74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ad78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800ad7c:	e017      	b.n	800adae <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800ad7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ad82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800ad86:	2300      	movs	r3, #0
 800ad88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800ad8c:	e00f      	b.n	800adae <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800ad94:	2300      	movs	r3, #0
 800ad96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800ad9a:	e008      	b.n	800adae <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800ad9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ada0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800ada4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ada8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;      
 800adac:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf); 
 800adae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800adb2:	4619      	mov	r1, r3
 800adb4:	480f      	ldr	r0, [pc, #60]	; (800adf4 <low_level_init+0x258>)
 800adb6:	f7f7 fd61 	bl	800287c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800adba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800adbe:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800adc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800adc4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800adc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800adca:	4619      	mov	r1, r3
 800adcc:	4809      	ldr	r0, [pc, #36]	; (800adf4 <low_level_init+0x258>)
 800adce:	f7f7 ff29 	bl	8002c24 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800add2:	4808      	ldr	r0, [pc, #32]	; (800adf4 <low_level_init+0x258>)
 800add4:	f7f6 ffc7 	bl	8001d66 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f004 fda3 	bl	800f924 <netif_set_up>
    netif_set_link_up(netif);
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f004 fe16 	bl	800fa10 <netif_set_link_up>
}
 800ade4:	e001      	b.n	800adea <low_level_init+0x24e>
    Error_Handler();
 800ade6:	f7f5 ff75 	bl	8000cd4 <Error_Handler>
}
 800adea:	bf00      	nop
 800adec:	37b0      	adds	r7, #176	; 0xb0
 800adee:	46bd      	mov	sp, r7
 800adf0:	bdb0      	pop	{r4, r5, r7, pc}
 800adf2:	bf00      	nop
 800adf4:	24021b6c 	.word	0x24021b6c
 800adf8:	40028000 	.word	0x40028000
 800adfc:	30040060 	.word	0x30040060
 800ae00:	30040000 	.word	0x30040000
 800ae04:	24021bdc 	.word	0x24021bdc
 800ae08:	0801ac20 	.word	0x0801ac20
 800ae0c:	30040200 	.word	0x30040200
 800ae10:	24002158 	.word	0x24002158
 800ae14:	08018dd4 	.word	0x08018dd4
 800ae18:	24000010 	.word	0x24000010
 800ae1c:	24021b4c 	.word	0x24021b4c

0800ae20 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b092      	sub	sp, #72	; 0x48
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
  uint32_t i=0, framelen = 0;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	647b      	str	r3, [r7, #68]	; 0x44
 800ae2e:	2300      	movs	r3, #0
 800ae30:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf *q;
  err_t errval = ERR_OK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800ae38:	f107 0308 	add.w	r3, r7, #8
 800ae3c:	2230      	movs	r2, #48	; 0x30
 800ae3e:	2100      	movs	r1, #0
 800ae40:	4618      	mov	r0, r3
 800ae42:	f00c ff57 	bl	8017cf4 <memset>
  
  for(q = p; q != NULL; q = q->next)
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae4a:	e04f      	b.n	800aeec <low_level_output+0xcc>
  {
    if(i >= ETH_TX_DESC_CNT)	
 800ae4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae4e:	2b03      	cmp	r3, #3
 800ae50:	d902      	bls.n	800ae58 <low_level_output+0x38>
      return ERR_IF;
 800ae52:	f06f 030b 	mvn.w	r3, #11
 800ae56:	e05a      	b.n	800af0e <low_level_output+0xee>
    
    Txbuffer[i].buffer = q->payload;
 800ae58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae5a:	6859      	ldr	r1, [r3, #4]
 800ae5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae5e:	4613      	mov	r3, r2
 800ae60:	005b      	lsls	r3, r3, #1
 800ae62:	4413      	add	r3, r2
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ae6a:	4413      	add	r3, r2
 800ae6c:	3b40      	subs	r3, #64	; 0x40
 800ae6e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800ae70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae72:	895b      	ldrh	r3, [r3, #10]
 800ae74:	4619      	mov	r1, r3
 800ae76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae78:	4613      	mov	r3, r2
 800ae7a:	005b      	lsls	r3, r3, #1
 800ae7c:	4413      	add	r3, r2
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ae84:	4413      	add	r3, r2
 800ae86:	3b3c      	subs	r3, #60	; 0x3c
 800ae88:	6019      	str	r1, [r3, #0]
    framelen += q->len;
 800ae8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae8c:	895b      	ldrh	r3, [r3, #10]
 800ae8e:	461a      	mov	r2, r3
 800ae90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae92:	4413      	add	r3, r2
 800ae94:	643b      	str	r3, [r7, #64]	; 0x40
    
    if(i>0)
 800ae96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d012      	beq.n	800aec2 <low_level_output+0xa2>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800ae9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae9e:	1e5a      	subs	r2, r3, #1
 800aea0:	f107 0008 	add.w	r0, r7, #8
 800aea4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aea6:	460b      	mov	r3, r1
 800aea8:	005b      	lsls	r3, r3, #1
 800aeaa:	440b      	add	r3, r1
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	18c1      	adds	r1, r0, r3
 800aeb0:	4613      	mov	r3, r2
 800aeb2:	005b      	lsls	r3, r3, #1
 800aeb4:	4413      	add	r3, r2
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800aebc:	4413      	add	r3, r2
 800aebe:	3b38      	subs	r3, #56	; 0x38
 800aec0:	6019      	str	r1, [r3, #0]
    }
    
    if(q->next == NULL)
 800aec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d10a      	bne.n	800aee0 <low_level_output+0xc0>
    {
      Txbuffer[i].next = NULL;
 800aeca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aecc:	4613      	mov	r3, r2
 800aece:	005b      	lsls	r3, r3, #1
 800aed0:	4413      	add	r3, r2
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800aed8:	4413      	add	r3, r2
 800aeda:	3b38      	subs	r3, #56	; 0x38
 800aedc:	2200      	movs	r2, #0
 800aede:	601a      	str	r2, [r3, #0]
    }
    
    i++;
 800aee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aee2:	3301      	adds	r3, #1
 800aee4:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800aee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aeec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d1ac      	bne.n	800ae4c <low_level_output+0x2c>
  }

  TxConfig.Length = framelen;
 800aef2:	4a09      	ldr	r2, [pc, #36]	; (800af18 <low_level_output+0xf8>)
 800aef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aef6:	6053      	str	r3, [r2, #4]
  TxConfig.TxBuffer = Txbuffer;
 800aef8:	4a07      	ldr	r2, [pc, #28]	; (800af18 <low_level_output+0xf8>)
 800aefa:	f107 0308 	add.w	r3, r7, #8
 800aefe:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800af00:	2214      	movs	r2, #20
 800af02:	4905      	ldr	r1, [pc, #20]	; (800af18 <low_level_output+0xf8>)
 800af04:	4805      	ldr	r0, [pc, #20]	; (800af1c <low_level_output+0xfc>)
 800af06:	f7f7 f83b 	bl	8001f80 <HAL_ETH_Transmit>
  
  return errval;
 800af0a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3748      	adds	r7, #72	; 0x48
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	24021bdc 	.word	0x24021bdc
 800af1c:	24021b6c 	.word	0x24021b6c

0800af20 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b08a      	sub	sp, #40	; 0x28
 800af24:	af02      	add	r7, sp, #8
 800af26:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800af28:	2300      	movs	r3, #0
 800af2a:	61fb      	str	r3, [r7, #28]
  ETH_BufferTypeDef RxBuff;
  uint32_t framelength = 0;
 800af2c:	2300      	movs	r3, #0
 800af2e:	60bb      	str	r3, [r7, #8]
  struct pbuf_custom* custom_pbuf;
  
  if (HAL_ETH_GetRxDataBuffer(&heth, &RxBuff) == HAL_OK) 
 800af30:	f107 030c 	add.w	r3, r7, #12
 800af34:	4619      	mov	r1, r3
 800af36:	4817      	ldr	r0, [pc, #92]	; (800af94 <low_level_input+0x74>)
 800af38:	f7f7 f98c 	bl	8002254 <HAL_ETH_GetRxDataBuffer>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d122      	bne.n	800af88 <low_level_input+0x68>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800af42:	f107 0308 	add.w	r3, r7, #8
 800af46:	4619      	mov	r1, r3
 800af48:	4812      	ldr	r0, [pc, #72]	; (800af94 <low_level_input+0x74>)
 800af4a:	f7f7 fa21 	bl	8002390 <HAL_ETH_GetRxDataLength>
    
    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800af4e:	4811      	ldr	r0, [pc, #68]	; (800af94 <low_level_input+0x74>)
 800af50:	f7f7 fa51 	bl	80023f6 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff.buffer, framelength);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	68ba      	ldr	r2, [r7, #8]
 800af58:	4611      	mov	r1, r2
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7ff fcee 	bl	800a93c <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800af60:	480d      	ldr	r0, [pc, #52]	; (800af98 <low_level_input+0x78>)
 800af62:	f004 fb0f 	bl	800f584 <memp_malloc_pool>
 800af66:	61b8      	str	r0, [r7, #24]
    custom_pbuf->custom_free_function = pbuf_free_custom;
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	4a0c      	ldr	r2, [pc, #48]	; (800af9c <low_level_input+0x7c>)
 800af6c:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff.buffer, ETH_RX_BUFFER_SIZE);
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	b299      	uxth	r1, r3
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800af78:	9201      	str	r2, [sp, #4]
 800af7a:	9300      	str	r3, [sp, #0]
 800af7c:	69bb      	ldr	r3, [r7, #24]
 800af7e:	2202      	movs	r2, #2
 800af80:	2004      	movs	r0, #4
 800af82:	f004 ff95 	bl	800feb0 <pbuf_alloced_custom>
 800af86:	61f8      	str	r0, [r7, #28]
  }
  
  
  return p;
 800af88:	69fb      	ldr	r3, [r7, #28]
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3720      	adds	r7, #32
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	24021b6c 	.word	0x24021b6c
 800af98:	0801ac20 	.word	0x0801ac20
 800af9c:	0800b05d 	.word	0x0800b05d

0800afa0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800afac:	4b12      	ldr	r3, [pc, #72]	; (800aff8 <ethernetif_input+0x58>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f04f 31ff 	mov.w	r1, #4294967295
 800afb4:	4618      	mov	r0, r3
 800afb6:	f000 facf 	bl	800b558 <osSemaphoreWait>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d1f5      	bne.n	800afac <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800afc0:	480e      	ldr	r0, [pc, #56]	; (800affc <ethernetif_input+0x5c>)
 800afc2:	f00c fdf9 	bl	8017bb8 <sys_mutex_lock>
        p = low_level_input( netif );
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f7ff ffaa 	bl	800af20 <low_level_input>
 800afcc:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00a      	beq.n	800afea <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	691b      	ldr	r3, [r3, #16]
 800afd8:	68f9      	ldr	r1, [r7, #12]
 800afda:	68b8      	ldr	r0, [r7, #8]
 800afdc:	4798      	blx	r3
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d002      	beq.n	800afea <ethernetif_input+0x4a>
          {
            pbuf_free(p);           
 800afe4:	68b8      	ldr	r0, [r7, #8]
 800afe6:	f005 f941 	bl	801026c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800afea:	4804      	ldr	r0, [pc, #16]	; (800affc <ethernetif_input+0x5c>)
 800afec:	f00c fdf3 	bl	8017bd6 <sys_mutex_unlock>
      } while(p!=NULL);
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d1e4      	bne.n	800afc0 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800aff6:	e7d9      	b.n	800afac <ethernetif_input+0xc>
 800aff8:	24002158 	.word	0x24002158
 800affc:	24021c50 	.word	0x24021c50

0800b000 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d106      	bne.n	800b01c <ethernetif_init+0x1c>
 800b00e:	4b0e      	ldr	r3, [pc, #56]	; (800b048 <ethernetif_init+0x48>)
 800b010:	f240 225d 	movw	r2, #605	; 0x25d
 800b014:	490d      	ldr	r1, [pc, #52]	; (800b04c <ethernetif_init+0x4c>)
 800b016:	480e      	ldr	r0, [pc, #56]	; (800b050 <ethernetif_init+0x50>)
 800b018:	f00c fe74 	bl	8017d04 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2273      	movs	r2, #115	; 0x73
 800b020:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  netif->name[1] = IFNAME1;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2274      	movs	r2, #116	; 0x74
 800b028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a09      	ldr	r2, [pc, #36]	; (800b054 <ethernetif_init+0x54>)
 800b030:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	4a08      	ldr	r2, [pc, #32]	; (800b058 <ethernetif_init+0x58>)
 800b036:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f7ff fdaf 	bl	800ab9c <low_level_init>

  return ERR_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	08018df0 	.word	0x08018df0
 800b04c:	08018e0c 	.word	0x08018e0c
 800b050:	08018e1c 	.word	0x08018e1c
 800b054:	08015d45 	.word	0x08015d45
 800b058:	0800ae21 	.word	0x0800ae21

0800b05c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	60fb      	str	r3, [r7, #12]
  
#if !defined(DUAL_CORE) || defined(CORE_CM7)
  /* Invalidate data cache: lwIP and/or application may have written into buffer */
  SCB_InvalidateDCache_by_Addr((uint32_t *)p->payload, p->tot_len);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	685a      	ldr	r2, [r3, #4]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	891b      	ldrh	r3, [r3, #8]
 800b070:	4619      	mov	r1, r3
 800b072:	4610      	mov	r0, r2
 800b074:	f7ff fc62 	bl	800a93c <SCB_InvalidateDCache_by_Addr>
#endif
  
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b078:	68f9      	ldr	r1, [r7, #12]
 800b07a:	4803      	ldr	r0, [pc, #12]	; (800b088 <pbuf_free_custom+0x2c>)
 800b07c:	f004 faf6 	bl	800f66c <memp_free_pool>
}
 800b080:	bf00      	nop
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	0801ac20 	.word	0x0801ac20

0800b08c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b090:	f7f6 fa5a 	bl	8001548 <HAL_GetTick>
 800b094:	4603      	mov	r3, r0
}
 800b096:	4618      	mov	r0, r3
 800b098:	bd80      	pop	{r7, pc}
	...

0800b09c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{  
 800b09c:	b580      	push	{r7, lr}
 800b09e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here 
  */
  
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800b0a0:	4802      	ldr	r0, [pc, #8]	; (800b0ac <ETH_PHY_IO_Init+0x10>)
 800b0a2:	f7f7 fdd9 	bl	8002c58 <HAL_ETH_SetMDIOClockRange>
  
  return 0;
 800b0a6:	2300      	movs	r3, #0
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	bd80      	pop	{r7, pc}
 800b0ac:	24021b6c 	.word	0x24021b6c

0800b0b0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	af00      	add	r7, sp, #0
  return 0;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr

0800b0c0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	68ba      	ldr	r2, [r7, #8]
 800b0d0:	68f9      	ldr	r1, [r7, #12]
 800b0d2:	4807      	ldr	r0, [pc, #28]	; (800b0f0 <ETH_PHY_IO_ReadReg+0x30>)
 800b0d4:	f7f7 fb2a 	bl	800272c <HAL_ETH_ReadPHYRegister>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d002      	beq.n	800b0e4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800b0de:	f04f 33ff 	mov.w	r3, #4294967295
 800b0e2:	e000      	b.n	800b0e6 <ETH_PHY_IO_ReadReg+0x26>
  }
  
  return 0;
 800b0e4:	2300      	movs	r3, #0
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	24021b6c 	.word	0x24021b6c

0800b0f4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	60b9      	str	r1, [r7, #8]
 800b0fe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	68ba      	ldr	r2, [r7, #8]
 800b104:	68f9      	ldr	r1, [r7, #12]
 800b106:	4807      	ldr	r0, [pc, #28]	; (800b124 <ETH_PHY_IO_WriteReg+0x30>)
 800b108:	f7f7 fb64 	bl	80027d4 <HAL_ETH_WritePHYRegister>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d002      	beq.n	800b118 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800b112:	f04f 33ff 	mov.w	r3, #4294967295
 800b116:	e000      	b.n	800b11a <ETH_PHY_IO_WriteReg+0x26>
  }
  
  return 0;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	24021b6c 	.word	0x24021b6c

0800b128 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b12c:	f7f6 fa0c 	bl	8001548 <HAL_GetTick>
 800b130:	4603      	mov	r3, r0
}
 800b132:	4618      	mov	r0, r3
 800b134:	bd80      	pop	{r7, pc}
	...

0800b138 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */
 
void ethernet_link_thread(void const * argument)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b0a0      	sub	sp, #128	; 0x80
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800b140:	2300      	movs	r3, #0
 800b142:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b144:	2300      	movs	r3, #0
 800b146:	67bb      	str	r3, [r7, #120]	; 0x78
 800b148:	2300      	movs	r3, #0
 800b14a:	677b      	str	r3, [r7, #116]	; 0x74
  
  struct netif *netif = (struct netif *) argument;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */
  
  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b150:	483a      	ldr	r0, [pc, #232]	; (800b23c <ethernet_link_thread+0x104>)
 800b152:	f7f6 f922 	bl	800139a <LAN8742_GetLinkState>
 800b156:	4603      	mov	r3, r0
 800b158:	66fb      	str	r3, [r7, #108]	; 0x6c
  
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800b15a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b15c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800b160:	089b      	lsrs	r3, r3, #2
 800b162:	f003 0301 	and.w	r3, r3, #1
 800b166:	b2db      	uxtb	r3, r3
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d00c      	beq.n	800b186 <ethernet_link_thread+0x4e>
 800b16c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d809      	bhi.n	800b186 <ethernet_link_thread+0x4e>
  {
    HAL_ETH_Stop_IT(&heth);
 800b172:	4833      	ldr	r0, [pc, #204]	; (800b240 <ethernet_link_thread+0x108>)
 800b174:	f7f6 fe8e 	bl	8001e94 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800b178:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b17a:	f004 fc1f 	bl	800f9bc <netif_set_down>
    netif_set_link_down(netif);
 800b17e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b180:	f004 fc71 	bl	800fa66 <netif_set_link_down>
 800b184:	e055      	b.n	800b232 <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800b186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b188:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800b18c:	f003 0304 	and.w	r3, r3, #4
 800b190:	2b00      	cmp	r3, #0
 800b192:	d14e      	bne.n	800b232 <ethernet_link_thread+0xfa>
 800b194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b196:	2b01      	cmp	r3, #1
 800b198:	d94b      	bls.n	800b232 <ethernet_link_thread+0xfa>
  {
    switch (PHYLinkState)
 800b19a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b19c:	3b02      	subs	r3, #2
 800b19e:	2b03      	cmp	r3, #3
 800b1a0:	d82a      	bhi.n	800b1f8 <ethernet_link_thread+0xc0>
 800b1a2:	a201      	add	r2, pc, #4	; (adr r2, 800b1a8 <ethernet_link_thread+0x70>)
 800b1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a8:	0800b1b9 	.word	0x0800b1b9
 800b1ac:	0800b1cb 	.word	0x0800b1cb
 800b1b0:	0800b1db 	.word	0x0800b1db
 800b1b4:	0800b1eb 	.word	0x0800b1eb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b1b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b1bc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800b1be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b1c2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b1c8:	e017      	b.n	800b1fa <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800b1ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b1d2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b1d8:	e00f      	b.n	800b1fa <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b1da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b1de:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b1e8:	e007      	b.n	800b1fa <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b1f6:	e000      	b.n	800b1fa <ethernet_link_thread+0xc2>
    default:
      break;      
 800b1f8:	bf00      	nop
    }
    
    if(linkchanged)
 800b1fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d018      	beq.n	800b232 <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf); 
 800b200:	f107 0308 	add.w	r3, r7, #8
 800b204:	4619      	mov	r1, r3
 800b206:	480e      	ldr	r0, [pc, #56]	; (800b240 <ethernet_link_thread+0x108>)
 800b208:	f7f7 fb38 	bl	800287c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800b20c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b20e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800b210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b212:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b214:	f107 0308 	add.w	r3, r7, #8
 800b218:	4619      	mov	r1, r3
 800b21a:	4809      	ldr	r0, [pc, #36]	; (800b240 <ethernet_link_thread+0x108>)
 800b21c:	f7f7 fd02 	bl	8002c24 <HAL_ETH_SetMACConfig>
      
      HAL_ETH_Start_IT(&heth);
 800b220:	4807      	ldr	r0, [pc, #28]	; (800b240 <ethernet_link_thread+0x108>)
 800b222:	f7f6 fda0 	bl	8001d66 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800b226:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b228:	f004 fb7c 	bl	800f924 <netif_set_up>
      netif_set_link_up(netif);
 800b22c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b22e:	f004 fbef 	bl	800fa10 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */
    
/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800b232:	2064      	movs	r0, #100	; 0x64
 800b234:	f000 f89f 	bl	800b376 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b238:	e78a      	b.n	800b150 <ethernet_link_thread+0x18>
 800b23a:	bf00      	nop
 800b23c:	24021b4c 	.word	0x24021b4c
 800b240:	24021b6c 	.word	0x24021b6c

0800b244 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b244:	b480      	push	{r7}
 800b246:	b085      	sub	sp, #20
 800b248:	af00      	add	r7, sp, #0
 800b24a:	4603      	mov	r3, r0
 800b24c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b24e:	2300      	movs	r3, #0
 800b250:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b256:	2b84      	cmp	r3, #132	; 0x84
 800b258:	d005      	beq.n	800b266 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b25a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	4413      	add	r3, r2
 800b262:	3303      	adds	r3, #3
 800b264:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b266:	68fb      	ldr	r3, [r7, #12]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3714      	adds	r7, #20
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b27a:	f3ef 8305 	mrs	r3, IPSR
 800b27e:	607b      	str	r3, [r7, #4]
  return(result);
 800b280:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b282:	2b00      	cmp	r3, #0
 800b284:	bf14      	ite	ne
 800b286:	2301      	movne	r3, #1
 800b288:	2300      	moveq	r3, #0
 800b28a:	b2db      	uxtb	r3, r3
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	370c      	adds	r7, #12
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b29c:	f001 fdae 	bl	800cdfc <vTaskStartScheduler>
  
  return osOK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800b2aa:	f7ff ffe3 	bl	800b274 <inHandlerMode>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d003      	beq.n	800b2bc <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800b2b4:	f001 fec0 	bl	800d038 <xTaskGetTickCountFromISR>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	e002      	b.n	800b2c2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800b2bc:	f001 feac 	bl	800d018 <xTaskGetTickCount>
 800b2c0:	4603      	mov	r3, r0
  }
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b2c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2c8:	b089      	sub	sp, #36	; 0x24
 800b2ca:	af04      	add	r7, sp, #16
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	695b      	ldr	r3, [r3, #20]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d020      	beq.n	800b31a <osThreadCreate+0x54>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	699b      	ldr	r3, [r3, #24]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d01c      	beq.n	800b31a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	685c      	ldr	r4, [r3, #4]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681d      	ldr	r5, [r3, #0]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	691e      	ldr	r6, [r3, #16]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7ff ffa6 	bl	800b244 <makeFreeRtosPriority>
 800b2f8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	695b      	ldr	r3, [r3, #20]
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b302:	9202      	str	r2, [sp, #8]
 800b304:	9301      	str	r3, [sp, #4]
 800b306:	9100      	str	r1, [sp, #0]
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	4632      	mov	r2, r6
 800b30c:	4629      	mov	r1, r5
 800b30e:	4620      	mov	r0, r4
 800b310:	f001 fb22 	bl	800c958 <xTaskCreateStatic>
 800b314:	4603      	mov	r3, r0
 800b316:	60fb      	str	r3, [r7, #12]
 800b318:	e01c      	b.n	800b354 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	685c      	ldr	r4, [r3, #4]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b326:	b29e      	uxth	r6, r3
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b32e:	4618      	mov	r0, r3
 800b330:	f7ff ff88 	bl	800b244 <makeFreeRtosPriority>
 800b334:	4602      	mov	r2, r0
 800b336:	f107 030c 	add.w	r3, r7, #12
 800b33a:	9301      	str	r3, [sp, #4]
 800b33c:	9200      	str	r2, [sp, #0]
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	4632      	mov	r2, r6
 800b342:	4629      	mov	r1, r5
 800b344:	4620      	mov	r0, r4
 800b346:	f001 fb61 	bl	800ca0c <xTaskCreate>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d001      	beq.n	800b354 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b350:	2300      	movs	r3, #0
 800b352:	e000      	b.n	800b356 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b354:	68fb      	ldr	r3, [r7, #12]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3714      	adds	r7, #20
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b35e <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800b35e:	b580      	push	{r7, lr}
 800b360:	b082      	sub	sp, #8
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f001 fc86 	bl	800cc78 <vTaskDelete>
  return osOK;
 800b36c:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3708      	adds	r7, #8
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}

0800b376 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b376:	b580      	push	{r7, lr}
 800b378:	b084      	sub	sp, #16
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d001      	beq.n	800b38c <osDelay+0x16>
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	e000      	b.n	800b38e <osDelay+0x18>
 800b38c:	2301      	movs	r3, #1
 800b38e:	4618      	mov	r0, r3
 800b390:	f001 fd00 	bl	800cd94 <vTaskDelay>
  
  return osOK;
 800b394:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b396:	4618      	mov	r0, r3
 800b398:	3710      	adds	r7, #16
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}

0800b39e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b39e:	b580      	push	{r7, lr}
 800b3a0:	b082      	sub	sp, #8
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d007      	beq.n	800b3be <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	2001      	movs	r0, #1
 800b3b6:	f000 fc50 	bl	800bc5a <xQueueCreateMutexStatic>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	e003      	b.n	800b3c6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b3be:	2001      	movs	r0, #1
 800b3c0:	f000 fc33 	bl	800bc2a <xQueueCreateMutex>
 800b3c4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3708      	adds	r7, #8
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
	...

0800b3d0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b3da:	2300      	movs	r3, #0
 800b3dc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d101      	bne.n	800b3e8 <osMutexWait+0x18>
    return osErrorParameter;
 800b3e4:	2380      	movs	r3, #128	; 0x80
 800b3e6:	e03a      	b.n	800b45e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f2:	d103      	bne.n	800b3fc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800b3f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b3f8:	60fb      	str	r3, [r7, #12]
 800b3fa:	e009      	b.n	800b410 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d006      	beq.n	800b410 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d101      	bne.n	800b410 <osMutexWait+0x40>
      ticks = 1;
 800b40c:	2301      	movs	r3, #1
 800b40e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b410:	f7ff ff30 	bl	800b274 <inHandlerMode>
 800b414:	4603      	mov	r3, r0
 800b416:	2b00      	cmp	r3, #0
 800b418:	d017      	beq.n	800b44a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b41a:	f107 0308 	add.w	r3, r7, #8
 800b41e:	461a      	mov	r2, r3
 800b420:	2100      	movs	r1, #0
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f001 f896 	bl	800c554 <xQueueReceiveFromISR>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d001      	beq.n	800b432 <osMutexWait+0x62>
      return osErrorOS;
 800b42e:	23ff      	movs	r3, #255	; 0xff
 800b430:	e015      	b.n	800b45e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d011      	beq.n	800b45c <osMutexWait+0x8c>
 800b438:	4b0b      	ldr	r3, [pc, #44]	; (800b468 <osMutexWait+0x98>)
 800b43a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b43e:	601a      	str	r2, [r3, #0]
 800b440:	f3bf 8f4f 	dsb	sy
 800b444:	f3bf 8f6f 	isb	sy
 800b448:	e008      	b.n	800b45c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800b44a:	68f9      	ldr	r1, [r7, #12]
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 ff79 	bl	800c344 <xQueueSemaphoreTake>
 800b452:	4603      	mov	r3, r0
 800b454:	2b01      	cmp	r3, #1
 800b456:	d001      	beq.n	800b45c <osMutexWait+0x8c>
    return osErrorOS;
 800b458:	23ff      	movs	r3, #255	; 0xff
 800b45a:	e000      	b.n	800b45e <osMutexWait+0x8e>
  }
  
  return osOK;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3710      	adds	r7, #16
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	e000ed04 	.word	0xe000ed04

0800b46c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b474:	2300      	movs	r3, #0
 800b476:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b478:	2300      	movs	r3, #0
 800b47a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800b47c:	f7ff fefa 	bl	800b274 <inHandlerMode>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d016      	beq.n	800b4b4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b486:	f107 0308 	add.w	r3, r7, #8
 800b48a:	4619      	mov	r1, r3
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 fdf3 	bl	800c078 <xQueueGiveFromISR>
 800b492:	4603      	mov	r3, r0
 800b494:	2b01      	cmp	r3, #1
 800b496:	d001      	beq.n	800b49c <osMutexRelease+0x30>
      return osErrorOS;
 800b498:	23ff      	movs	r3, #255	; 0xff
 800b49a:	e017      	b.n	800b4cc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d013      	beq.n	800b4ca <osMutexRelease+0x5e>
 800b4a2:	4b0c      	ldr	r3, [pc, #48]	; (800b4d4 <osMutexRelease+0x68>)
 800b4a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4a8:	601a      	str	r2, [r3, #0]
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	f3bf 8f6f 	isb	sy
 800b4b2:	e00a      	b.n	800b4ca <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	2100      	movs	r1, #0
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f000 fc4e 	bl	800bd5c <xQueueGenericSend>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d001      	beq.n	800b4ca <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800b4c6:	23ff      	movs	r3, #255	; 0xff
 800b4c8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3710      	adds	r7, #16
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	e000ed04 	.word	0xe000ed04

0800b4d8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b086      	sub	sp, #24
 800b4dc:	af02      	add	r7, sp, #8
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d017      	beq.n	800b51a <osSemaphoreCreate+0x42>
    if (count == 1) {
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d10b      	bne.n	800b508 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685a      	ldr	r2, [r3, #4]
 800b4f4:	2303      	movs	r3, #3
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	4613      	mov	r3, r2
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	2001      	movs	r0, #1
 800b500:	f000 faa8 	bl	800ba54 <xQueueGenericCreateStatic>
 800b504:	4603      	mov	r3, r0
 800b506:	e023      	b.n	800b550 <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800b508:	6838      	ldr	r0, [r7, #0]
 800b50a:	6839      	ldr	r1, [r7, #0]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	461a      	mov	r2, r3
 800b512:	f000 fbbd 	bl	800bc90 <xQueueCreateCountingSemaphoreStatic>
 800b516:	4603      	mov	r3, r0
 800b518:	e01a      	b.n	800b550 <osSemaphoreCreate+0x78>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d110      	bne.n	800b542 <osSemaphoreCreate+0x6a>
      vSemaphoreCreateBinary(sema);
 800b520:	2203      	movs	r2, #3
 800b522:	2100      	movs	r1, #0
 800b524:	2001      	movs	r0, #1
 800b526:	f000 fb08 	bl	800bb3a <xQueueGenericCreate>
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d005      	beq.n	800b53e <osSemaphoreCreate+0x66>
 800b532:	2300      	movs	r3, #0
 800b534:	2200      	movs	r2, #0
 800b536:	2100      	movs	r1, #0
 800b538:	68f8      	ldr	r0, [r7, #12]
 800b53a:	f000 fc0f 	bl	800bd5c <xQueueGenericSend>
      return sema;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	e006      	b.n	800b550 <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	683a      	ldr	r2, [r7, #0]
 800b546:	4611      	mov	r1, r2
 800b548:	4618      	mov	r0, r3
 800b54a:	f000 fbd6 	bl	800bcfa <xQueueCreateCountingSemaphore>
 800b54e:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800b550:	4618      	mov	r0, r3
 800b552:	3710      	adds	r7, #16
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}

0800b558 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b562:	2300      	movs	r3, #0
 800b564:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d101      	bne.n	800b570 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b56c:	2380      	movs	r3, #128	; 0x80
 800b56e:	e03a      	b.n	800b5e6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b570:	2300      	movs	r3, #0
 800b572:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b57a:	d103      	bne.n	800b584 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b57c:	f04f 33ff 	mov.w	r3, #4294967295
 800b580:	60fb      	str	r3, [r7, #12]
 800b582:	e009      	b.n	800b598 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d006      	beq.n	800b598 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d101      	bne.n	800b598 <osSemaphoreWait+0x40>
      ticks = 1;
 800b594:	2301      	movs	r3, #1
 800b596:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b598:	f7ff fe6c 	bl	800b274 <inHandlerMode>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d017      	beq.n	800b5d2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b5a2:	f107 0308 	add.w	r3, r7, #8
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	2100      	movs	r1, #0
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 ffd2 	bl	800c554 <xQueueReceiveFromISR>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d001      	beq.n	800b5ba <osSemaphoreWait+0x62>
      return osErrorOS;
 800b5b6:	23ff      	movs	r3, #255	; 0xff
 800b5b8:	e015      	b.n	800b5e6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d011      	beq.n	800b5e4 <osSemaphoreWait+0x8c>
 800b5c0:	4b0b      	ldr	r3, [pc, #44]	; (800b5f0 <osSemaphoreWait+0x98>)
 800b5c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5c6:	601a      	str	r2, [r3, #0]
 800b5c8:	f3bf 8f4f 	dsb	sy
 800b5cc:	f3bf 8f6f 	isb	sy
 800b5d0:	e008      	b.n	800b5e4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b5d2:	68f9      	ldr	r1, [r7, #12]
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 feb5 	bl	800c344 <xQueueSemaphoreTake>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d001      	beq.n	800b5e4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b5e0:	23ff      	movs	r3, #255	; 0xff
 800b5e2:	e000      	b.n	800b5e6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b5e4:	2300      	movs	r3, #0
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3710      	adds	r7, #16
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	e000ed04 	.word	0xe000ed04

0800b5f4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b600:	2300      	movs	r3, #0
 800b602:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b604:	f7ff fe36 	bl	800b274 <inHandlerMode>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d016      	beq.n	800b63c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b60e:	f107 0308 	add.w	r3, r7, #8
 800b612:	4619      	mov	r1, r3
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 fd2f 	bl	800c078 <xQueueGiveFromISR>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d001      	beq.n	800b624 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b620:	23ff      	movs	r3, #255	; 0xff
 800b622:	e017      	b.n	800b654 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d013      	beq.n	800b652 <osSemaphoreRelease+0x5e>
 800b62a:	4b0c      	ldr	r3, [pc, #48]	; (800b65c <osSemaphoreRelease+0x68>)
 800b62c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b630:	601a      	str	r2, [r3, #0]
 800b632:	f3bf 8f4f 	dsb	sy
 800b636:	f3bf 8f6f 	isb	sy
 800b63a:	e00a      	b.n	800b652 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b63c:	2300      	movs	r3, #0
 800b63e:	2200      	movs	r2, #0
 800b640:	2100      	movs	r1, #0
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 fb8a 	bl	800bd5c <xQueueGenericSend>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d001      	beq.n	800b652 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b64e:	23ff      	movs	r3, #255	; 0xff
 800b650:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b652:	68fb      	ldr	r3, [r7, #12]
}
 800b654:	4618      	mov	r0, r3
 800b656:	3710      	adds	r7, #16
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	e000ed04 	.word	0xe000ed04

0800b660 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b660:	b590      	push	{r4, r7, lr}
 800b662:	b085      	sub	sp, #20
 800b664:	af02      	add	r7, sp, #8
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d012      	beq.n	800b698 <osMessageCreate+0x38>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d00e      	beq.n	800b698 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6818      	ldr	r0, [r3, #0]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6859      	ldr	r1, [r3, #4]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	689a      	ldr	r2, [r3, #8]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	68dc      	ldr	r4, [r3, #12]
 800b68a:	2300      	movs	r3, #0
 800b68c:	9300      	str	r3, [sp, #0]
 800b68e:	4623      	mov	r3, r4
 800b690:	f000 f9e0 	bl	800ba54 <xQueueGenericCreateStatic>
 800b694:	4603      	mov	r3, r0
 800b696:	e008      	b.n	800b6aa <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6818      	ldr	r0, [r3, #0]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	f000 fa49 	bl	800bb3a <xQueueGenericCreate>
 800b6a8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	370c      	adds	r7, #12
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd90      	pop	{r4, r7, pc}
	...

0800b6b4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d101      	bne.n	800b6d2 <osMessagePut+0x1e>
    ticks = 1;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b6d2:	f7ff fdcf 	bl	800b274 <inHandlerMode>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d018      	beq.n	800b70e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b6dc:	f107 0210 	add.w	r2, r7, #16
 800b6e0:	f107 0108 	add.w	r1, r7, #8
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	68f8      	ldr	r0, [r7, #12]
 800b6e8:	f000 fc32 	bl	800bf50 <xQueueGenericSendFromISR>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d001      	beq.n	800b6f6 <osMessagePut+0x42>
      return osErrorOS;
 800b6f2:	23ff      	movs	r3, #255	; 0xff
 800b6f4:	e018      	b.n	800b728 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d014      	beq.n	800b726 <osMessagePut+0x72>
 800b6fc:	4b0c      	ldr	r3, [pc, #48]	; (800b730 <osMessagePut+0x7c>)
 800b6fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b702:	601a      	str	r2, [r3, #0]
 800b704:	f3bf 8f4f 	dsb	sy
 800b708:	f3bf 8f6f 	isb	sy
 800b70c:	e00b      	b.n	800b726 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b70e:	f107 0108 	add.w	r1, r7, #8
 800b712:	2300      	movs	r3, #0
 800b714:	697a      	ldr	r2, [r7, #20]
 800b716:	68f8      	ldr	r0, [r7, #12]
 800b718:	f000 fb20 	bl	800bd5c <xQueueGenericSend>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d001      	beq.n	800b726 <osMessagePut+0x72>
      return osErrorOS;
 800b722:	23ff      	movs	r3, #255	; 0xff
 800b724:	e000      	b.n	800b728 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b726:	2300      	movs	r3, #0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3718      	adds	r7, #24
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	e000ed04 	.word	0xe000ed04

0800b734 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b734:	b590      	push	{r4, r7, lr}
 800b736:	b08b      	sub	sp, #44	; 0x2c
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b744:	2300      	movs	r3, #0
 800b746:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d10a      	bne.n	800b764 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b74e:	2380      	movs	r3, #128	; 0x80
 800b750:	617b      	str	r3, [r7, #20]
    return event;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	461c      	mov	r4, r3
 800b756:	f107 0314 	add.w	r3, r7, #20
 800b75a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b75e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b762:	e054      	b.n	800b80e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b764:	2300      	movs	r3, #0
 800b766:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b768:	2300      	movs	r3, #0
 800b76a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b772:	d103      	bne.n	800b77c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b774:	f04f 33ff 	mov.w	r3, #4294967295
 800b778:	627b      	str	r3, [r7, #36]	; 0x24
 800b77a:	e009      	b.n	800b790 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d006      	beq.n	800b790 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d101      	bne.n	800b790 <osMessageGet+0x5c>
      ticks = 1;
 800b78c:	2301      	movs	r3, #1
 800b78e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b790:	f7ff fd70 	bl	800b274 <inHandlerMode>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d01c      	beq.n	800b7d4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b79a:	f107 0220 	add.w	r2, r7, #32
 800b79e:	f107 0314 	add.w	r3, r7, #20
 800b7a2:	3304      	adds	r3, #4
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	68b8      	ldr	r0, [r7, #8]
 800b7a8:	f000 fed4 	bl	800c554 <xQueueReceiveFromISR>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d102      	bne.n	800b7b8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b7b2:	2310      	movs	r3, #16
 800b7b4:	617b      	str	r3, [r7, #20]
 800b7b6:	e001      	b.n	800b7bc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b7bc:	6a3b      	ldr	r3, [r7, #32]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d01d      	beq.n	800b7fe <osMessageGet+0xca>
 800b7c2:	4b15      	ldr	r3, [pc, #84]	; (800b818 <osMessageGet+0xe4>)
 800b7c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7c8:	601a      	str	r2, [r3, #0]
 800b7ca:	f3bf 8f4f 	dsb	sy
 800b7ce:	f3bf 8f6f 	isb	sy
 800b7d2:	e014      	b.n	800b7fe <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b7d4:	f107 0314 	add.w	r3, r7, #20
 800b7d8:	3304      	adds	r3, #4
 800b7da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7dc:	4619      	mov	r1, r3
 800b7de:	68b8      	ldr	r0, [r7, #8]
 800b7e0:	f000 fcd4 	bl	800c18c <xQueueReceive>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d102      	bne.n	800b7f0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b7ea:	2310      	movs	r3, #16
 800b7ec:	617b      	str	r3, [r7, #20]
 800b7ee:	e006      	b.n	800b7fe <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d101      	bne.n	800b7fa <osMessageGet+0xc6>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	e000      	b.n	800b7fc <osMessageGet+0xc8>
 800b7fa:	2340      	movs	r3, #64	; 0x40
 800b7fc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	461c      	mov	r4, r3
 800b802:	f107 0314 	add.w	r3, r7, #20
 800b806:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b80a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	372c      	adds	r7, #44	; 0x2c
 800b812:	46bd      	mov	sp, r7
 800b814:	bd90      	pop	{r4, r7, pc}
 800b816:	bf00      	nop
 800b818:	e000ed04 	.word	0xe000ed04

0800b81c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f103 0208 	add.w	r2, r3, #8
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f04f 32ff 	mov.w	r2, #4294967295
 800b834:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f103 0208 	add.w	r2, r3, #8
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f103 0208 	add.w	r2, r3, #8
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b86a:	bf00      	nop
 800b86c:	370c      	adds	r7, #12
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr

0800b876 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b876:	b480      	push	{r7}
 800b878:	b085      	sub	sp, #20
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
 800b87e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	689a      	ldr	r2, [r3, #8]
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	683a      	ldr	r2, [r7, #0]
 800b89a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	683a      	ldr	r2, [r7, #0]
 800b8a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	1c5a      	adds	r2, r3, #1
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	601a      	str	r2, [r3, #0]
}
 800b8b2:	bf00      	nop
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr

0800b8be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b8be:	b480      	push	{r7}
 800b8c0:	b085      	sub	sp, #20
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
 800b8c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8d4:	d103      	bne.n	800b8de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	691b      	ldr	r3, [r3, #16]
 800b8da:	60fb      	str	r3, [r7, #12]
 800b8dc:	e00c      	b.n	800b8f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	3308      	adds	r3, #8
 800b8e2:	60fb      	str	r3, [r7, #12]
 800b8e4:	e002      	b.n	800b8ec <vListInsert+0x2e>
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	60fb      	str	r3, [r7, #12]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	68ba      	ldr	r2, [r7, #8]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d2f6      	bcs.n	800b8e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	685a      	ldr	r2, [r3, #4]
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	683a      	ldr	r2, [r7, #0]
 800b906:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	68fa      	ldr	r2, [r7, #12]
 800b90c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	683a      	ldr	r2, [r7, #0]
 800b912:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	687a      	ldr	r2, [r7, #4]
 800b918:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	1c5a      	adds	r2, r3, #1
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	601a      	str	r2, [r3, #0]
}
 800b924:	bf00      	nop
 800b926:	3714      	adds	r7, #20
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b930:	b480      	push	{r7}
 800b932:	b085      	sub	sp, #20
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	691b      	ldr	r3, [r3, #16]
 800b93c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	6892      	ldr	r2, [r2, #8]
 800b946:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	6852      	ldr	r2, [r2, #4]
 800b950:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	685b      	ldr	r3, [r3, #4]
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	429a      	cmp	r2, r3
 800b95a:	d103      	bne.n	800b964 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	689a      	ldr	r2, [r3, #8]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	1e5a      	subs	r2, r3, #1
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3714      	adds	r7, #20
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d109      	bne.n	800b9ac <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	60bb      	str	r3, [r7, #8]
 800b9aa:	e7fe      	b.n	800b9aa <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800b9ac:	f002 fcf6 	bl	800e39c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9b8:	68f9      	ldr	r1, [r7, #12]
 800b9ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b9bc:	fb01 f303 	mul.w	r3, r1, r3
 800b9c0:	441a      	add	r2, r3
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	68f9      	ldr	r1, [r7, #12]
 800b9e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b9e2:	fb01 f303 	mul.w	r3, r1, r3
 800b9e6:	441a      	add	r2, r3
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	22ff      	movs	r2, #255	; 0xff
 800b9f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	22ff      	movs	r2, #255	; 0xff
 800b9f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d114      	bne.n	800ba2c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	691b      	ldr	r3, [r3, #16]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d01a      	beq.n	800ba40 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	3310      	adds	r3, #16
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f001 fc84 	bl	800d31c <xTaskRemoveFromEventList>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d012      	beq.n	800ba40 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ba1a:	4b0d      	ldr	r3, [pc, #52]	; (800ba50 <xQueueGenericReset+0xcc>)
 800ba1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba20:	601a      	str	r2, [r3, #0]
 800ba22:	f3bf 8f4f 	dsb	sy
 800ba26:	f3bf 8f6f 	isb	sy
 800ba2a:	e009      	b.n	800ba40 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	3310      	adds	r3, #16
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7ff fef3 	bl	800b81c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	3324      	adds	r3, #36	; 0x24
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7ff feee 	bl	800b81c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ba40:	f002 fcda 	bl	800e3f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ba44:	2301      	movs	r3, #1
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	e000ed04 	.word	0xe000ed04

0800ba54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b08e      	sub	sp, #56	; 0x38
 800ba58:	af02      	add	r7, sp, #8
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
 800ba60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d109      	bne.n	800ba7c <xQueueGenericCreateStatic+0x28>
 800ba68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6c:	f383 8811 	msr	BASEPRI, r3
 800ba70:	f3bf 8f6f 	isb	sy
 800ba74:	f3bf 8f4f 	dsb	sy
 800ba78:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba7a:	e7fe      	b.n	800ba7a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d109      	bne.n	800ba96 <xQueueGenericCreateStatic+0x42>
 800ba82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba86:	f383 8811 	msr	BASEPRI, r3
 800ba8a:	f3bf 8f6f 	isb	sy
 800ba8e:	f3bf 8f4f 	dsb	sy
 800ba92:	627b      	str	r3, [r7, #36]	; 0x24
 800ba94:	e7fe      	b.n	800ba94 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d002      	beq.n	800baa2 <xQueueGenericCreateStatic+0x4e>
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d001      	beq.n	800baa6 <xQueueGenericCreateStatic+0x52>
 800baa2:	2301      	movs	r3, #1
 800baa4:	e000      	b.n	800baa8 <xQueueGenericCreateStatic+0x54>
 800baa6:	2300      	movs	r3, #0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d109      	bne.n	800bac0 <xQueueGenericCreateStatic+0x6c>
 800baac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab0:	f383 8811 	msr	BASEPRI, r3
 800bab4:	f3bf 8f6f 	isb	sy
 800bab8:	f3bf 8f4f 	dsb	sy
 800babc:	623b      	str	r3, [r7, #32]
 800babe:	e7fe      	b.n	800babe <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d102      	bne.n	800bacc <xQueueGenericCreateStatic+0x78>
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d101      	bne.n	800bad0 <xQueueGenericCreateStatic+0x7c>
 800bacc:	2301      	movs	r3, #1
 800bace:	e000      	b.n	800bad2 <xQueueGenericCreateStatic+0x7e>
 800bad0:	2300      	movs	r3, #0
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d109      	bne.n	800baea <xQueueGenericCreateStatic+0x96>
 800bad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bada:	f383 8811 	msr	BASEPRI, r3
 800bade:	f3bf 8f6f 	isb	sy
 800bae2:	f3bf 8f4f 	dsb	sy
 800bae6:	61fb      	str	r3, [r7, #28]
 800bae8:	e7fe      	b.n	800bae8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800baea:	2348      	movs	r3, #72	; 0x48
 800baec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	2b48      	cmp	r3, #72	; 0x48
 800baf2:	d009      	beq.n	800bb08 <xQueueGenericCreateStatic+0xb4>
 800baf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf8:	f383 8811 	msr	BASEPRI, r3
 800bafc:	f3bf 8f6f 	isb	sy
 800bb00:	f3bf 8f4f 	dsb	sy
 800bb04:	61bb      	str	r3, [r7, #24]
 800bb06:	e7fe      	b.n	800bb06 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bb08:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d00d      	beq.n	800bb30 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb16:	2201      	movs	r2, #1
 800bb18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb1c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb22:	9300      	str	r3, [sp, #0]
 800bb24:	4613      	mov	r3, r2
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	68b9      	ldr	r1, [r7, #8]
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f000 f844 	bl	800bbb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3730      	adds	r7, #48	; 0x30
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b08a      	sub	sp, #40	; 0x28
 800bb3e:	af02      	add	r7, sp, #8
 800bb40:	60f8      	str	r0, [r7, #12]
 800bb42:	60b9      	str	r1, [r7, #8]
 800bb44:	4613      	mov	r3, r2
 800bb46:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d109      	bne.n	800bb62 <xQueueGenericCreate+0x28>
 800bb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb52:	f383 8811 	msr	BASEPRI, r3
 800bb56:	f3bf 8f6f 	isb	sy
 800bb5a:	f3bf 8f4f 	dsb	sy
 800bb5e:	613b      	str	r3, [r7, #16]
 800bb60:	e7fe      	b.n	800bb60 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d102      	bne.n	800bb6e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	61fb      	str	r3, [r7, #28]
 800bb6c:	e004      	b.n	800bb78 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	68ba      	ldr	r2, [r7, #8]
 800bb72:	fb02 f303 	mul.w	r3, r2, r3
 800bb76:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bb78:	69fb      	ldr	r3, [r7, #28]
 800bb7a:	3348      	adds	r3, #72	; 0x48
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f002 fd27 	bl	800e5d0 <pvPortMalloc>
 800bb82:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bb84:	69bb      	ldr	r3, [r7, #24]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d011      	beq.n	800bbae <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bb8a:	69bb      	ldr	r3, [r7, #24]
 800bb8c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	3348      	adds	r3, #72	; 0x48
 800bb92:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bb94:	69bb      	ldr	r3, [r7, #24]
 800bb96:	2200      	movs	r2, #0
 800bb98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb9c:	79fa      	ldrb	r2, [r7, #7]
 800bb9e:	69bb      	ldr	r3, [r7, #24]
 800bba0:	9300      	str	r3, [sp, #0]
 800bba2:	4613      	mov	r3, r2
 800bba4:	697a      	ldr	r2, [r7, #20]
 800bba6:	68b9      	ldr	r1, [r7, #8]
 800bba8:	68f8      	ldr	r0, [r7, #12]
 800bbaa:	f000 f805 	bl	800bbb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bbae:	69bb      	ldr	r3, [r7, #24]
	}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3720      	adds	r7, #32
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	60b9      	str	r1, [r7, #8]
 800bbc2:	607a      	str	r2, [r7, #4]
 800bbc4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d103      	bne.n	800bbd4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bbcc:	69bb      	ldr	r3, [r7, #24]
 800bbce:	69ba      	ldr	r2, [r7, #24]
 800bbd0:	601a      	str	r2, [r3, #0]
 800bbd2:	e002      	b.n	800bbda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bbd4:	69bb      	ldr	r3, [r7, #24]
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bbe6:	2101      	movs	r1, #1
 800bbe8:	69b8      	ldr	r0, [r7, #24]
 800bbea:	f7ff fecb 	bl	800b984 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bbee:	bf00      	nop
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b082      	sub	sp, #8
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d00e      	beq.n	800bc22 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bc16:	2300      	movs	r3, #0
 800bc18:	2200      	movs	r2, #0
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f000 f89d 	bl	800bd5c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bc22:	bf00      	nop
 800bc24:	3708      	adds	r7, #8
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b086      	sub	sp, #24
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	4603      	mov	r3, r0
 800bc32:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bc34:	2301      	movs	r3, #1
 800bc36:	617b      	str	r3, [r7, #20]
 800bc38:	2300      	movs	r3, #0
 800bc3a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bc3c:	79fb      	ldrb	r3, [r7, #7]
 800bc3e:	461a      	mov	r2, r3
 800bc40:	6939      	ldr	r1, [r7, #16]
 800bc42:	6978      	ldr	r0, [r7, #20]
 800bc44:	f7ff ff79 	bl	800bb3a <xQueueGenericCreate>
 800bc48:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bc4a:	68f8      	ldr	r0, [r7, #12]
 800bc4c:	f7ff ffd3 	bl	800bbf6 <prvInitialiseMutex>

		return xNewQueue;
 800bc50:	68fb      	ldr	r3, [r7, #12]
	}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3718      	adds	r7, #24
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bc5a:	b580      	push	{r7, lr}
 800bc5c:	b088      	sub	sp, #32
 800bc5e:	af02      	add	r7, sp, #8
 800bc60:	4603      	mov	r3, r0
 800bc62:	6039      	str	r1, [r7, #0]
 800bc64:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bc66:	2301      	movs	r3, #1
 800bc68:	617b      	str	r3, [r7, #20]
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bc6e:	79fb      	ldrb	r3, [r7, #7]
 800bc70:	9300      	str	r3, [sp, #0]
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	2200      	movs	r2, #0
 800bc76:	6939      	ldr	r1, [r7, #16]
 800bc78:	6978      	ldr	r0, [r7, #20]
 800bc7a:	f7ff feeb 	bl	800ba54 <xQueueGenericCreateStatic>
 800bc7e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bc80:	68f8      	ldr	r0, [r7, #12]
 800bc82:	f7ff ffb8 	bl	800bbf6 <prvInitialiseMutex>

		return xNewQueue;
 800bc86:	68fb      	ldr	r3, [r7, #12]
	}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	3718      	adds	r7, #24
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b08a      	sub	sp, #40	; 0x28
 800bc94:	af02      	add	r7, sp, #8
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d109      	bne.n	800bcb6 <xQueueCreateCountingSemaphoreStatic+0x26>
 800bca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca6:	f383 8811 	msr	BASEPRI, r3
 800bcaa:	f3bf 8f6f 	isb	sy
 800bcae:	f3bf 8f4f 	dsb	sy
 800bcb2:	61bb      	str	r3, [r7, #24]
 800bcb4:	e7fe      	b.n	800bcb4 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bcb6:	68ba      	ldr	r2, [r7, #8]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d909      	bls.n	800bcd2 <xQueueCreateCountingSemaphoreStatic+0x42>
 800bcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	617b      	str	r3, [r7, #20]
 800bcd0:	e7fe      	b.n	800bcd0 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bcd2:	2302      	movs	r3, #2
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	2100      	movs	r1, #0
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f7ff feb9 	bl	800ba54 <xQueueGenericCreateStatic>
 800bce2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d002      	beq.n	800bcf0 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	68ba      	ldr	r2, [r7, #8]
 800bcee:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bcf0:	69fb      	ldr	r3, [r7, #28]
	}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3720      	adds	r7, #32
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b086      	sub	sp, #24
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
 800bd02:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d109      	bne.n	800bd1e <xQueueCreateCountingSemaphore+0x24>
 800bd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0e:	f383 8811 	msr	BASEPRI, r3
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	613b      	str	r3, [r7, #16]
 800bd1c:	e7fe      	b.n	800bd1c <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bd1e:	683a      	ldr	r2, [r7, #0]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d909      	bls.n	800bd3a <xQueueCreateCountingSemaphore+0x40>
 800bd26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2a:	f383 8811 	msr	BASEPRI, r3
 800bd2e:	f3bf 8f6f 	isb	sy
 800bd32:	f3bf 8f4f 	dsb	sy
 800bd36:	60fb      	str	r3, [r7, #12]
 800bd38:	e7fe      	b.n	800bd38 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bd3a:	2202      	movs	r2, #2
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f7ff fefb 	bl	800bb3a <xQueueGenericCreate>
 800bd44:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d002      	beq.n	800bd52 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	683a      	ldr	r2, [r7, #0]
 800bd50:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bd52:	697b      	ldr	r3, [r7, #20]
	}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3718      	adds	r7, #24
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b08e      	sub	sp, #56	; 0x38
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	607a      	str	r2, [r7, #4]
 800bd68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d109      	bne.n	800bd8c <xQueueGenericSend+0x30>
 800bd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7c:	f383 8811 	msr	BASEPRI, r3
 800bd80:	f3bf 8f6f 	isb	sy
 800bd84:	f3bf 8f4f 	dsb	sy
 800bd88:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd8a:	e7fe      	b.n	800bd8a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d103      	bne.n	800bd9a <xQueueGenericSend+0x3e>
 800bd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d101      	bne.n	800bd9e <xQueueGenericSend+0x42>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	e000      	b.n	800bda0 <xQueueGenericSend+0x44>
 800bd9e:	2300      	movs	r3, #0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d109      	bne.n	800bdb8 <xQueueGenericSend+0x5c>
 800bda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda8:	f383 8811 	msr	BASEPRI, r3
 800bdac:	f3bf 8f6f 	isb	sy
 800bdb0:	f3bf 8f4f 	dsb	sy
 800bdb4:	627b      	str	r3, [r7, #36]	; 0x24
 800bdb6:	e7fe      	b.n	800bdb6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	2b02      	cmp	r3, #2
 800bdbc:	d103      	bne.n	800bdc6 <xQueueGenericSend+0x6a>
 800bdbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d101      	bne.n	800bdca <xQueueGenericSend+0x6e>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e000      	b.n	800bdcc <xQueueGenericSend+0x70>
 800bdca:	2300      	movs	r3, #0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d109      	bne.n	800bde4 <xQueueGenericSend+0x88>
 800bdd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd4:	f383 8811 	msr	BASEPRI, r3
 800bdd8:	f3bf 8f6f 	isb	sy
 800bddc:	f3bf 8f4f 	dsb	sy
 800bde0:	623b      	str	r3, [r7, #32]
 800bde2:	e7fe      	b.n	800bde2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bde4:	f001 fc52 	bl	800d68c <xTaskGetSchedulerState>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d102      	bne.n	800bdf4 <xQueueGenericSend+0x98>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d101      	bne.n	800bdf8 <xQueueGenericSend+0x9c>
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	e000      	b.n	800bdfa <xQueueGenericSend+0x9e>
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d109      	bne.n	800be12 <xQueueGenericSend+0xb6>
 800bdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be02:	f383 8811 	msr	BASEPRI, r3
 800be06:	f3bf 8f6f 	isb	sy
 800be0a:	f3bf 8f4f 	dsb	sy
 800be0e:	61fb      	str	r3, [r7, #28]
 800be10:	e7fe      	b.n	800be10 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be12:	f002 fac3 	bl	800e39c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be1e:	429a      	cmp	r2, r3
 800be20:	d302      	bcc.n	800be28 <xQueueGenericSend+0xcc>
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	2b02      	cmp	r3, #2
 800be26:	d129      	bne.n	800be7c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be28:	683a      	ldr	r2, [r7, #0]
 800be2a:	68b9      	ldr	r1, [r7, #8]
 800be2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be2e:	f000 fc26 	bl	800c67e <prvCopyDataToQueue>
 800be32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d010      	beq.n	800be5e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3e:	3324      	adds	r3, #36	; 0x24
 800be40:	4618      	mov	r0, r3
 800be42:	f001 fa6b 	bl	800d31c <xTaskRemoveFromEventList>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d013      	beq.n	800be74 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800be4c:	4b3f      	ldr	r3, [pc, #252]	; (800bf4c <xQueueGenericSend+0x1f0>)
 800be4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be52:	601a      	str	r2, [r3, #0]
 800be54:	f3bf 8f4f 	dsb	sy
 800be58:	f3bf 8f6f 	isb	sy
 800be5c:	e00a      	b.n	800be74 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800be5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be60:	2b00      	cmp	r3, #0
 800be62:	d007      	beq.n	800be74 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800be64:	4b39      	ldr	r3, [pc, #228]	; (800bf4c <xQueueGenericSend+0x1f0>)
 800be66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be6a:	601a      	str	r2, [r3, #0]
 800be6c:	f3bf 8f4f 	dsb	sy
 800be70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800be74:	f002 fac0 	bl	800e3f8 <vPortExitCritical>
				return pdPASS;
 800be78:	2301      	movs	r3, #1
 800be7a:	e063      	b.n	800bf44 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d103      	bne.n	800be8a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be82:	f002 fab9 	bl	800e3f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800be86:	2300      	movs	r3, #0
 800be88:	e05c      	b.n	800bf44 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d106      	bne.n	800be9e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be90:	f107 0314 	add.w	r3, r7, #20
 800be94:	4618      	mov	r0, r3
 800be96:	f001 faa3 	bl	800d3e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be9a:	2301      	movs	r3, #1
 800be9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be9e:	f002 faab 	bl	800e3f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bea2:	f001 f80f 	bl	800cec4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bea6:	f002 fa79 	bl	800e39c <vPortEnterCritical>
 800beaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800beb0:	b25b      	sxtb	r3, r3
 800beb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beb6:	d103      	bne.n	800bec0 <xQueueGenericSend+0x164>
 800beb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beba:	2200      	movs	r2, #0
 800bebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bec6:	b25b      	sxtb	r3, r3
 800bec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800becc:	d103      	bne.n	800bed6 <xQueueGenericSend+0x17a>
 800bece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed0:	2200      	movs	r2, #0
 800bed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bed6:	f002 fa8f 	bl	800e3f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800beda:	1d3a      	adds	r2, r7, #4
 800bedc:	f107 0314 	add.w	r3, r7, #20
 800bee0:	4611      	mov	r1, r2
 800bee2:	4618      	mov	r0, r3
 800bee4:	f001 fa92 	bl	800d40c <xTaskCheckForTimeOut>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d124      	bne.n	800bf38 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800beee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bef0:	f000 fcbd 	bl	800c86e <prvIsQueueFull>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d018      	beq.n	800bf2c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800befa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befc:	3310      	adds	r3, #16
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	4611      	mov	r1, r2
 800bf02:	4618      	mov	r0, r3
 800bf04:	f001 f9bc 	bl	800d280 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bf08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf0a:	f000 fc48 	bl	800c79e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bf0e:	f000 ffe7 	bl	800cee0 <xTaskResumeAll>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f47f af7c 	bne.w	800be12 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800bf1a:	4b0c      	ldr	r3, [pc, #48]	; (800bf4c <xQueueGenericSend+0x1f0>)
 800bf1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf20:	601a      	str	r2, [r3, #0]
 800bf22:	f3bf 8f4f 	dsb	sy
 800bf26:	f3bf 8f6f 	isb	sy
 800bf2a:	e772      	b.n	800be12 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bf2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf2e:	f000 fc36 	bl	800c79e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf32:	f000 ffd5 	bl	800cee0 <xTaskResumeAll>
 800bf36:	e76c      	b.n	800be12 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bf38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf3a:	f000 fc30 	bl	800c79e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf3e:	f000 ffcf 	bl	800cee0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bf42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3738      	adds	r7, #56	; 0x38
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	e000ed04 	.word	0xe000ed04

0800bf50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b08e      	sub	sp, #56	; 0x38
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	607a      	str	r2, [r7, #4]
 800bf5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d109      	bne.n	800bf7c <xQueueGenericSendFromISR+0x2c>
 800bf68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf6c:	f383 8811 	msr	BASEPRI, r3
 800bf70:	f3bf 8f6f 	isb	sy
 800bf74:	f3bf 8f4f 	dsb	sy
 800bf78:	627b      	str	r3, [r7, #36]	; 0x24
 800bf7a:	e7fe      	b.n	800bf7a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d103      	bne.n	800bf8a <xQueueGenericSendFromISR+0x3a>
 800bf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d101      	bne.n	800bf8e <xQueueGenericSendFromISR+0x3e>
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e000      	b.n	800bf90 <xQueueGenericSendFromISR+0x40>
 800bf8e:	2300      	movs	r3, #0
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d109      	bne.n	800bfa8 <xQueueGenericSendFromISR+0x58>
 800bf94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf98:	f383 8811 	msr	BASEPRI, r3
 800bf9c:	f3bf 8f6f 	isb	sy
 800bfa0:	f3bf 8f4f 	dsb	sy
 800bfa4:	623b      	str	r3, [r7, #32]
 800bfa6:	e7fe      	b.n	800bfa6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	2b02      	cmp	r3, #2
 800bfac:	d103      	bne.n	800bfb6 <xQueueGenericSendFromISR+0x66>
 800bfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d101      	bne.n	800bfba <xQueueGenericSendFromISR+0x6a>
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	e000      	b.n	800bfbc <xQueueGenericSendFromISR+0x6c>
 800bfba:	2300      	movs	r3, #0
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d109      	bne.n	800bfd4 <xQueueGenericSendFromISR+0x84>
 800bfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc4:	f383 8811 	msr	BASEPRI, r3
 800bfc8:	f3bf 8f6f 	isb	sy
 800bfcc:	f3bf 8f4f 	dsb	sy
 800bfd0:	61fb      	str	r3, [r7, #28]
 800bfd2:	e7fe      	b.n	800bfd2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bfd4:	f002 fabe 	bl	800e554 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bfd8:	f3ef 8211 	mrs	r2, BASEPRI
 800bfdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe0:	f383 8811 	msr	BASEPRI, r3
 800bfe4:	f3bf 8f6f 	isb	sy
 800bfe8:	f3bf 8f4f 	dsb	sy
 800bfec:	61ba      	str	r2, [r7, #24]
 800bfee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bff0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bff2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d302      	bcc.n	800c006 <xQueueGenericSendFromISR+0xb6>
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	2b02      	cmp	r3, #2
 800c004:	d12c      	bne.n	800c060 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c00c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c010:	683a      	ldr	r2, [r7, #0]
 800c012:	68b9      	ldr	r1, [r7, #8]
 800c014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c016:	f000 fb32 	bl	800c67e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c01a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c022:	d112      	bne.n	800c04a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d016      	beq.n	800c05a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02e:	3324      	adds	r3, #36	; 0x24
 800c030:	4618      	mov	r0, r3
 800c032:	f001 f973 	bl	800d31c <xTaskRemoveFromEventList>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d00e      	beq.n	800c05a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d00b      	beq.n	800c05a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2201      	movs	r2, #1
 800c046:	601a      	str	r2, [r3, #0]
 800c048:	e007      	b.n	800c05a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c04a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c04e:	3301      	adds	r3, #1
 800c050:	b2db      	uxtb	r3, r3
 800c052:	b25a      	sxtb	r2, r3
 800c054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c05a:	2301      	movs	r3, #1
 800c05c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c05e:	e001      	b.n	800c064 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c060:	2300      	movs	r3, #0
 800c062:	637b      	str	r3, [r7, #52]	; 0x34
 800c064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c066:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c070:	4618      	mov	r0, r3
 800c072:	3738      	adds	r7, #56	; 0x38
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b08e      	sub	sp, #56	; 0x38
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d109      	bne.n	800c0a0 <xQueueGiveFromISR+0x28>
	__asm volatile
 800c08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c090:	f383 8811 	msr	BASEPRI, r3
 800c094:	f3bf 8f6f 	isb	sy
 800c098:	f3bf 8f4f 	dsb	sy
 800c09c:	623b      	str	r3, [r7, #32]
 800c09e:	e7fe      	b.n	800c09e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d009      	beq.n	800c0bc <xQueueGiveFromISR+0x44>
 800c0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ac:	f383 8811 	msr	BASEPRI, r3
 800c0b0:	f3bf 8f6f 	isb	sy
 800c0b4:	f3bf 8f4f 	dsb	sy
 800c0b8:	61fb      	str	r3, [r7, #28]
 800c0ba:	e7fe      	b.n	800c0ba <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d103      	bne.n	800c0cc <xQueueGiveFromISR+0x54>
 800c0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d101      	bne.n	800c0d0 <xQueueGiveFromISR+0x58>
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e000      	b.n	800c0d2 <xQueueGiveFromISR+0x5a>
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d109      	bne.n	800c0ea <xQueueGiveFromISR+0x72>
 800c0d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0da:	f383 8811 	msr	BASEPRI, r3
 800c0de:	f3bf 8f6f 	isb	sy
 800c0e2:	f3bf 8f4f 	dsb	sy
 800c0e6:	61bb      	str	r3, [r7, #24]
 800c0e8:	e7fe      	b.n	800c0e8 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0ea:	f002 fa33 	bl	800e554 <vPortValidateInterruptPriority>
	__asm volatile
 800c0ee:	f3ef 8211 	mrs	r2, BASEPRI
 800c0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f6:	f383 8811 	msr	BASEPRI, r3
 800c0fa:	f3bf 8f6f 	isb	sy
 800c0fe:	f3bf 8f4f 	dsb	sy
 800c102:	617a      	str	r2, [r7, #20]
 800c104:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c106:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c108:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c10e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c116:	429a      	cmp	r2, r3
 800c118:	d22b      	bcs.n	800c172 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c126:	1c5a      	adds	r2, r3, #1
 800c128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c12c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c130:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c134:	d112      	bne.n	800c15c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d016      	beq.n	800c16c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c140:	3324      	adds	r3, #36	; 0x24
 800c142:	4618      	mov	r0, r3
 800c144:	f001 f8ea 	bl	800d31c <xTaskRemoveFromEventList>
 800c148:	4603      	mov	r3, r0
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00e      	beq.n	800c16c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00b      	beq.n	800c16c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	2201      	movs	r2, #1
 800c158:	601a      	str	r2, [r3, #0]
 800c15a:	e007      	b.n	800c16c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c15c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c160:	3301      	adds	r3, #1
 800c162:	b2db      	uxtb	r3, r3
 800c164:	b25a      	sxtb	r2, r3
 800c166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c16c:	2301      	movs	r3, #1
 800c16e:	637b      	str	r3, [r7, #52]	; 0x34
 800c170:	e001      	b.n	800c176 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c172:	2300      	movs	r3, #0
 800c174:	637b      	str	r3, [r7, #52]	; 0x34
 800c176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c178:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c182:	4618      	mov	r0, r3
 800c184:	3738      	adds	r7, #56	; 0x38
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
	...

0800c18c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b08c      	sub	sp, #48	; 0x30
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c198:	2300      	movs	r3, #0
 800c19a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d109      	bne.n	800c1ba <xQueueReceive+0x2e>
	__asm volatile
 800c1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1aa:	f383 8811 	msr	BASEPRI, r3
 800c1ae:	f3bf 8f6f 	isb	sy
 800c1b2:	f3bf 8f4f 	dsb	sy
 800c1b6:	623b      	str	r3, [r7, #32]
 800c1b8:	e7fe      	b.n	800c1b8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d103      	bne.n	800c1c8 <xQueueReceive+0x3c>
 800c1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d101      	bne.n	800c1cc <xQueueReceive+0x40>
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	e000      	b.n	800c1ce <xQueueReceive+0x42>
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d109      	bne.n	800c1e6 <xQueueReceive+0x5a>
 800c1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d6:	f383 8811 	msr	BASEPRI, r3
 800c1da:	f3bf 8f6f 	isb	sy
 800c1de:	f3bf 8f4f 	dsb	sy
 800c1e2:	61fb      	str	r3, [r7, #28]
 800c1e4:	e7fe      	b.n	800c1e4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1e6:	f001 fa51 	bl	800d68c <xTaskGetSchedulerState>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d102      	bne.n	800c1f6 <xQueueReceive+0x6a>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d101      	bne.n	800c1fa <xQueueReceive+0x6e>
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	e000      	b.n	800c1fc <xQueueReceive+0x70>
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d109      	bne.n	800c214 <xQueueReceive+0x88>
 800c200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c204:	f383 8811 	msr	BASEPRI, r3
 800c208:	f3bf 8f6f 	isb	sy
 800c20c:	f3bf 8f4f 	dsb	sy
 800c210:	61bb      	str	r3, [r7, #24]
 800c212:	e7fe      	b.n	800c212 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c214:	f002 f8c2 	bl	800e39c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c21c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c220:	2b00      	cmp	r3, #0
 800c222:	d01f      	beq.n	800c264 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c224:	68b9      	ldr	r1, [r7, #8]
 800c226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c228:	f000 fa93 	bl	800c752 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22e:	1e5a      	subs	r2, r3, #1
 800c230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c232:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c236:	691b      	ldr	r3, [r3, #16]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00f      	beq.n	800c25c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23e:	3310      	adds	r3, #16
 800c240:	4618      	mov	r0, r3
 800c242:	f001 f86b 	bl	800d31c <xTaskRemoveFromEventList>
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d007      	beq.n	800c25c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c24c:	4b3c      	ldr	r3, [pc, #240]	; (800c340 <xQueueReceive+0x1b4>)
 800c24e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c252:	601a      	str	r2, [r3, #0]
 800c254:	f3bf 8f4f 	dsb	sy
 800c258:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c25c:	f002 f8cc 	bl	800e3f8 <vPortExitCritical>
				return pdPASS;
 800c260:	2301      	movs	r3, #1
 800c262:	e069      	b.n	800c338 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d103      	bne.n	800c272 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c26a:	f002 f8c5 	bl	800e3f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c26e:	2300      	movs	r3, #0
 800c270:	e062      	b.n	800c338 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c274:	2b00      	cmp	r3, #0
 800c276:	d106      	bne.n	800c286 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c278:	f107 0310 	add.w	r3, r7, #16
 800c27c:	4618      	mov	r0, r3
 800c27e:	f001 f8af 	bl	800d3e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c282:	2301      	movs	r3, #1
 800c284:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c286:	f002 f8b7 	bl	800e3f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c28a:	f000 fe1b 	bl	800cec4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c28e:	f002 f885 	bl	800e39c <vPortEnterCritical>
 800c292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c294:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c298:	b25b      	sxtb	r3, r3
 800c29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c29e:	d103      	bne.n	800c2a8 <xQueueReceive+0x11c>
 800c2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2ae:	b25b      	sxtb	r3, r3
 800c2b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2b4:	d103      	bne.n	800c2be <xQueueReceive+0x132>
 800c2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2be:	f002 f89b 	bl	800e3f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2c2:	1d3a      	adds	r2, r7, #4
 800c2c4:	f107 0310 	add.w	r3, r7, #16
 800c2c8:	4611      	mov	r1, r2
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f001 f89e 	bl	800d40c <xTaskCheckForTimeOut>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d123      	bne.n	800c31e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2d8:	f000 fab3 	bl	800c842 <prvIsQueueEmpty>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d017      	beq.n	800c312 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e4:	3324      	adds	r3, #36	; 0x24
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	4611      	mov	r1, r2
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f000 ffc8 	bl	800d280 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c2f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2f2:	f000 fa54 	bl	800c79e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c2f6:	f000 fdf3 	bl	800cee0 <xTaskResumeAll>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d189      	bne.n	800c214 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800c300:	4b0f      	ldr	r3, [pc, #60]	; (800c340 <xQueueReceive+0x1b4>)
 800c302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c306:	601a      	str	r2, [r3, #0]
 800c308:	f3bf 8f4f 	dsb	sy
 800c30c:	f3bf 8f6f 	isb	sy
 800c310:	e780      	b.n	800c214 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c314:	f000 fa43 	bl	800c79e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c318:	f000 fde2 	bl	800cee0 <xTaskResumeAll>
 800c31c:	e77a      	b.n	800c214 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c31e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c320:	f000 fa3d 	bl	800c79e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c324:	f000 fddc 	bl	800cee0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c32a:	f000 fa8a 	bl	800c842 <prvIsQueueEmpty>
 800c32e:	4603      	mov	r3, r0
 800c330:	2b00      	cmp	r3, #0
 800c332:	f43f af6f 	beq.w	800c214 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c336:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3730      	adds	r7, #48	; 0x30
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	e000ed04 	.word	0xe000ed04

0800c344 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b08e      	sub	sp, #56	; 0x38
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c34e:	2300      	movs	r3, #0
 800c350:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c356:	2300      	movs	r3, #0
 800c358:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d109      	bne.n	800c374 <xQueueSemaphoreTake+0x30>
 800c360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c364:	f383 8811 	msr	BASEPRI, r3
 800c368:	f3bf 8f6f 	isb	sy
 800c36c:	f3bf 8f4f 	dsb	sy
 800c370:	623b      	str	r3, [r7, #32]
 800c372:	e7fe      	b.n	800c372 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d009      	beq.n	800c390 <xQueueSemaphoreTake+0x4c>
 800c37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c380:	f383 8811 	msr	BASEPRI, r3
 800c384:	f3bf 8f6f 	isb	sy
 800c388:	f3bf 8f4f 	dsb	sy
 800c38c:	61fb      	str	r3, [r7, #28]
 800c38e:	e7fe      	b.n	800c38e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c390:	f001 f97c 	bl	800d68c <xTaskGetSchedulerState>
 800c394:	4603      	mov	r3, r0
 800c396:	2b00      	cmp	r3, #0
 800c398:	d102      	bne.n	800c3a0 <xQueueSemaphoreTake+0x5c>
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d101      	bne.n	800c3a4 <xQueueSemaphoreTake+0x60>
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e000      	b.n	800c3a6 <xQueueSemaphoreTake+0x62>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d109      	bne.n	800c3be <xQueueSemaphoreTake+0x7a>
 800c3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ae:	f383 8811 	msr	BASEPRI, r3
 800c3b2:	f3bf 8f6f 	isb	sy
 800c3b6:	f3bf 8f4f 	dsb	sy
 800c3ba:	61bb      	str	r3, [r7, #24]
 800c3bc:	e7fe      	b.n	800c3bc <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3be:	f001 ffed 	bl	800e39c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3c6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d024      	beq.n	800c418 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d0:	1e5a      	subs	r2, r3, #1
 800c3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d104      	bne.n	800c3e8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c3de:	f001 fb0f 	bl	800da00 <pvTaskIncrementMutexHeldCount>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ea:	691b      	ldr	r3, [r3, #16]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00f      	beq.n	800c410 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f2:	3310      	adds	r3, #16
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f000 ff91 	bl	800d31c <xTaskRemoveFromEventList>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d007      	beq.n	800c410 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c400:	4b53      	ldr	r3, [pc, #332]	; (800c550 <xQueueSemaphoreTake+0x20c>)
 800c402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c406:	601a      	str	r2, [r3, #0]
 800c408:	f3bf 8f4f 	dsb	sy
 800c40c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c410:	f001 fff2 	bl	800e3f8 <vPortExitCritical>
				return pdPASS;
 800c414:	2301      	movs	r3, #1
 800c416:	e096      	b.n	800c546 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d110      	bne.n	800c440 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c420:	2b00      	cmp	r3, #0
 800c422:	d009      	beq.n	800c438 <xQueueSemaphoreTake+0xf4>
 800c424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	617b      	str	r3, [r7, #20]
 800c436:	e7fe      	b.n	800c436 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c438:	f001 ffde 	bl	800e3f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c43c:	2300      	movs	r3, #0
 800c43e:	e082      	b.n	800c546 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c442:	2b00      	cmp	r3, #0
 800c444:	d106      	bne.n	800c454 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c446:	f107 030c 	add.w	r3, r7, #12
 800c44a:	4618      	mov	r0, r3
 800c44c:	f000 ffc8 	bl	800d3e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c450:	2301      	movs	r3, #1
 800c452:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c454:	f001 ffd0 	bl	800e3f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c458:	f000 fd34 	bl	800cec4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c45c:	f001 ff9e 	bl	800e39c <vPortEnterCritical>
 800c460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c462:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c466:	b25b      	sxtb	r3, r3
 800c468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c46c:	d103      	bne.n	800c476 <xQueueSemaphoreTake+0x132>
 800c46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c470:	2200      	movs	r2, #0
 800c472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c47c:	b25b      	sxtb	r3, r3
 800c47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c482:	d103      	bne.n	800c48c <xQueueSemaphoreTake+0x148>
 800c484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c486:	2200      	movs	r2, #0
 800c488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c48c:	f001 ffb4 	bl	800e3f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c490:	463a      	mov	r2, r7
 800c492:	f107 030c 	add.w	r3, r7, #12
 800c496:	4611      	mov	r1, r2
 800c498:	4618      	mov	r0, r3
 800c49a:	f000 ffb7 	bl	800d40c <xTaskCheckForTimeOut>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d132      	bne.n	800c50a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4a6:	f000 f9cc 	bl	800c842 <prvIsQueueEmpty>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d026      	beq.n	800c4fe <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d109      	bne.n	800c4cc <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800c4b8:	f001 ff70 	bl	800e39c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f001 f901 	bl	800d6c8 <xTaskPriorityInherit>
 800c4c6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c4c8:	f001 ff96 	bl	800e3f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ce:	3324      	adds	r3, #36	; 0x24
 800c4d0:	683a      	ldr	r2, [r7, #0]
 800c4d2:	4611      	mov	r1, r2
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f000 fed3 	bl	800d280 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c4da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4dc:	f000 f95f 	bl	800c79e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c4e0:	f000 fcfe 	bl	800cee0 <xTaskResumeAll>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f47f af69 	bne.w	800c3be <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800c4ec:	4b18      	ldr	r3, [pc, #96]	; (800c550 <xQueueSemaphoreTake+0x20c>)
 800c4ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4f2:	601a      	str	r2, [r3, #0]
 800c4f4:	f3bf 8f4f 	dsb	sy
 800c4f8:	f3bf 8f6f 	isb	sy
 800c4fc:	e75f      	b.n	800c3be <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c4fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c500:	f000 f94d 	bl	800c79e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c504:	f000 fcec 	bl	800cee0 <xTaskResumeAll>
 800c508:	e759      	b.n	800c3be <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c50a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c50c:	f000 f947 	bl	800c79e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c510:	f000 fce6 	bl	800cee0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c514:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c516:	f000 f994 	bl	800c842 <prvIsQueueEmpty>
 800c51a:	4603      	mov	r3, r0
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f43f af4e 	beq.w	800c3be <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c524:	2b00      	cmp	r3, #0
 800c526:	d00d      	beq.n	800c544 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800c528:	f001 ff38 	bl	800e39c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c52c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c52e:	f000 f88e 	bl	800c64e <prvGetDisinheritPriorityAfterTimeout>
 800c532:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c53a:	4618      	mov	r0, r3
 800c53c:	f001 f9c8 	bl	800d8d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c540:	f001 ff5a 	bl	800e3f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c544:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c546:	4618      	mov	r0, r3
 800c548:	3738      	adds	r7, #56	; 0x38
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	e000ed04 	.word	0xe000ed04

0800c554 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b08e      	sub	sp, #56	; 0x38
 800c558:	af00      	add	r7, sp, #0
 800c55a:	60f8      	str	r0, [r7, #12]
 800c55c:	60b9      	str	r1, [r7, #8]
 800c55e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c566:	2b00      	cmp	r3, #0
 800c568:	d109      	bne.n	800c57e <xQueueReceiveFromISR+0x2a>
 800c56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c56e:	f383 8811 	msr	BASEPRI, r3
 800c572:	f3bf 8f6f 	isb	sy
 800c576:	f3bf 8f4f 	dsb	sy
 800c57a:	623b      	str	r3, [r7, #32]
 800c57c:	e7fe      	b.n	800c57c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d103      	bne.n	800c58c <xQueueReceiveFromISR+0x38>
 800c584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d101      	bne.n	800c590 <xQueueReceiveFromISR+0x3c>
 800c58c:	2301      	movs	r3, #1
 800c58e:	e000      	b.n	800c592 <xQueueReceiveFromISR+0x3e>
 800c590:	2300      	movs	r3, #0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d109      	bne.n	800c5aa <xQueueReceiveFromISR+0x56>
 800c596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c59a:	f383 8811 	msr	BASEPRI, r3
 800c59e:	f3bf 8f6f 	isb	sy
 800c5a2:	f3bf 8f4f 	dsb	sy
 800c5a6:	61fb      	str	r3, [r7, #28]
 800c5a8:	e7fe      	b.n	800c5a8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c5aa:	f001 ffd3 	bl	800e554 <vPortValidateInterruptPriority>
	__asm volatile
 800c5ae:	f3ef 8211 	mrs	r2, BASEPRI
 800c5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b6:	f383 8811 	msr	BASEPRI, r3
 800c5ba:	f3bf 8f6f 	isb	sy
 800c5be:	f3bf 8f4f 	dsb	sy
 800c5c2:	61ba      	str	r2, [r7, #24]
 800c5c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c5c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d02f      	beq.n	800c636 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c5e0:	68b9      	ldr	r1, [r7, #8]
 800c5e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5e4:	f000 f8b5 	bl	800c752 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ea:	1e5a      	subs	r2, r3, #1
 800c5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c5f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5f8:	d112      	bne.n	800c620 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fc:	691b      	ldr	r3, [r3, #16]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d016      	beq.n	800c630 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c604:	3310      	adds	r3, #16
 800c606:	4618      	mov	r0, r3
 800c608:	f000 fe88 	bl	800d31c <xTaskRemoveFromEventList>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d00e      	beq.n	800c630 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d00b      	beq.n	800c630 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2201      	movs	r2, #1
 800c61c:	601a      	str	r2, [r3, #0]
 800c61e:	e007      	b.n	800c630 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c624:	3301      	adds	r3, #1
 800c626:	b2db      	uxtb	r3, r3
 800c628:	b25a      	sxtb	r2, r3
 800c62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c630:	2301      	movs	r3, #1
 800c632:	637b      	str	r3, [r7, #52]	; 0x34
 800c634:	e001      	b.n	800c63a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800c636:	2300      	movs	r3, #0
 800c638:	637b      	str	r3, [r7, #52]	; 0x34
 800c63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c63c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c646:	4618      	mov	r0, r3
 800c648:	3738      	adds	r7, #56	; 0x38
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c64e:	b480      	push	{r7}
 800c650:	b085      	sub	sp, #20
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d006      	beq.n	800c66c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f1c3 0307 	rsb	r3, r3, #7
 800c668:	60fb      	str	r3, [r7, #12]
 800c66a:	e001      	b.n	800c670 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c66c:	2300      	movs	r3, #0
 800c66e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c670:	68fb      	ldr	r3, [r7, #12]
	}
 800c672:	4618      	mov	r0, r3
 800c674:	3714      	adds	r7, #20
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr

0800c67e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b086      	sub	sp, #24
 800c682:	af00      	add	r7, sp, #0
 800c684:	60f8      	str	r0, [r7, #12]
 800c686:	60b9      	str	r1, [r7, #8]
 800c688:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c68a:	2300      	movs	r3, #0
 800c68c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c692:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d10d      	bne.n	800c6b8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d14d      	bne.n	800c740 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f001 f88d 	bl	800d7c8 <xTaskPriorityDisinherit>
 800c6ae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	609a      	str	r2, [r3, #8]
 800c6b6:	e043      	b.n	800c740 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d119      	bne.n	800c6f2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	6858      	ldr	r0, [r3, #4]
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	68b9      	ldr	r1, [r7, #8]
 800c6ca:	f00b fb08 	bl	8017cde <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	685a      	ldr	r2, [r3, #4]
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d6:	441a      	add	r2, r3
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	685a      	ldr	r2, [r3, #4]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	689b      	ldr	r3, [r3, #8]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d32b      	bcc.n	800c740 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	605a      	str	r2, [r3, #4]
 800c6f0:	e026      	b.n	800c740 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	68d8      	ldr	r0, [r3, #12]
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	68b9      	ldr	r1, [r7, #8]
 800c6fe:	f00b faee 	bl	8017cde <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	68da      	ldr	r2, [r3, #12]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c70a:	425b      	negs	r3, r3
 800c70c:	441a      	add	r2, r3
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	68da      	ldr	r2, [r3, #12]
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d207      	bcs.n	800c72e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	689a      	ldr	r2, [r3, #8]
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c726:	425b      	negs	r3, r3
 800c728:	441a      	add	r2, r3
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2b02      	cmp	r3, #2
 800c732:	d105      	bne.n	800c740 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d002      	beq.n	800c740 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	3b01      	subs	r3, #1
 800c73e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	1c5a      	adds	r2, r3, #1
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c748:	697b      	ldr	r3, [r7, #20]
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3718      	adds	r7, #24
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c752:	b580      	push	{r7, lr}
 800c754:	b082      	sub	sp, #8
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
 800c75a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c760:	2b00      	cmp	r3, #0
 800c762:	d018      	beq.n	800c796 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	68da      	ldr	r2, [r3, #12]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c76c:	441a      	add	r2, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	68da      	ldr	r2, [r3, #12]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	689b      	ldr	r3, [r3, #8]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d303      	bcc.n	800c786 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	68d9      	ldr	r1, [r3, #12]
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c78e:	461a      	mov	r2, r3
 800c790:	6838      	ldr	r0, [r7, #0]
 800c792:	f00b faa4 	bl	8017cde <memcpy>
	}
}
 800c796:	bf00      	nop
 800c798:	3708      	adds	r7, #8
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}

0800c79e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c79e:	b580      	push	{r7, lr}
 800c7a0:	b084      	sub	sp, #16
 800c7a2:	af00      	add	r7, sp, #0
 800c7a4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c7a6:	f001 fdf9 	bl	800e39c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7b0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7b2:	e011      	b.n	800c7d8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d012      	beq.n	800c7e2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	3324      	adds	r3, #36	; 0x24
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f000 fdab 	bl	800d31c <xTaskRemoveFromEventList>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d001      	beq.n	800c7d0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c7cc:	f000 fe7e 	bl	800d4cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c7d0:	7bfb      	ldrb	r3, [r7, #15]
 800c7d2:	3b01      	subs	r3, #1
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	dce9      	bgt.n	800c7b4 <prvUnlockQueue+0x16>
 800c7e0:	e000      	b.n	800c7e4 <prvUnlockQueue+0x46>
					break;
 800c7e2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	22ff      	movs	r2, #255	; 0xff
 800c7e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c7ec:	f001 fe04 	bl	800e3f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c7f0:	f001 fdd4 	bl	800e39c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7fa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c7fc:	e011      	b.n	800c822 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	691b      	ldr	r3, [r3, #16]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d012      	beq.n	800c82c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	3310      	adds	r3, #16
 800c80a:	4618      	mov	r0, r3
 800c80c:	f000 fd86 	bl	800d31c <xTaskRemoveFromEventList>
 800c810:	4603      	mov	r3, r0
 800c812:	2b00      	cmp	r3, #0
 800c814:	d001      	beq.n	800c81a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c816:	f000 fe59 	bl	800d4cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c81a:	7bbb      	ldrb	r3, [r7, #14]
 800c81c:	3b01      	subs	r3, #1
 800c81e:	b2db      	uxtb	r3, r3
 800c820:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c822:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c826:	2b00      	cmp	r3, #0
 800c828:	dce9      	bgt.n	800c7fe <prvUnlockQueue+0x60>
 800c82a:	e000      	b.n	800c82e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c82c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	22ff      	movs	r2, #255	; 0xff
 800c832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c836:	f001 fddf 	bl	800e3f8 <vPortExitCritical>
}
 800c83a:	bf00      	nop
 800c83c:	3710      	adds	r7, #16
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c842:	b580      	push	{r7, lr}
 800c844:	b084      	sub	sp, #16
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c84a:	f001 fda7 	bl	800e39c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c852:	2b00      	cmp	r3, #0
 800c854:	d102      	bne.n	800c85c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c856:	2301      	movs	r3, #1
 800c858:	60fb      	str	r3, [r7, #12]
 800c85a:	e001      	b.n	800c860 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c85c:	2300      	movs	r3, #0
 800c85e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c860:	f001 fdca 	bl	800e3f8 <vPortExitCritical>

	return xReturn;
 800c864:	68fb      	ldr	r3, [r7, #12]
}
 800c866:	4618      	mov	r0, r3
 800c868:	3710      	adds	r7, #16
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c86e:	b580      	push	{r7, lr}
 800c870:	b084      	sub	sp, #16
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c876:	f001 fd91 	bl	800e39c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c882:	429a      	cmp	r2, r3
 800c884:	d102      	bne.n	800c88c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c886:	2301      	movs	r3, #1
 800c888:	60fb      	str	r3, [r7, #12]
 800c88a:	e001      	b.n	800c890 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c88c:	2300      	movs	r3, #0
 800c88e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c890:	f001 fdb2 	bl	800e3f8 <vPortExitCritical>

	return xReturn;
 800c894:	68fb      	ldr	r3, [r7, #12]
}
 800c896:	4618      	mov	r0, r3
 800c898:	3710      	adds	r7, #16
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
	...

0800c8a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b085      	sub	sp, #20
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	60fb      	str	r3, [r7, #12]
 800c8ae:	e014      	b.n	800c8da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c8b0:	4a0e      	ldr	r2, [pc, #56]	; (800c8ec <vQueueAddToRegistry+0x4c>)
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d10b      	bne.n	800c8d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c8bc:	490b      	ldr	r1, [pc, #44]	; (800c8ec <vQueueAddToRegistry+0x4c>)
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	683a      	ldr	r2, [r7, #0]
 800c8c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c8c6:	4a09      	ldr	r2, [pc, #36]	; (800c8ec <vQueueAddToRegistry+0x4c>)
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	00db      	lsls	r3, r3, #3
 800c8cc:	4413      	add	r3, r2
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c8d2:	e005      	b.n	800c8e0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	60fb      	str	r3, [r7, #12]
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2b07      	cmp	r3, #7
 800c8de:	d9e7      	bls.n	800c8b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c8e0:	bf00      	nop
 800c8e2:	3714      	adds	r7, #20
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr
 800c8ec:	24021c10 	.word	0x24021c10

0800c8f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b086      	sub	sp, #24
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	60b9      	str	r1, [r7, #8]
 800c8fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c900:	f001 fd4c 	bl	800e39c <vPortEnterCritical>
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c90a:	b25b      	sxtb	r3, r3
 800c90c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c910:	d103      	bne.n	800c91a <vQueueWaitForMessageRestricted+0x2a>
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	2200      	movs	r2, #0
 800c916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c920:	b25b      	sxtb	r3, r3
 800c922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c926:	d103      	bne.n	800c930 <vQueueWaitForMessageRestricted+0x40>
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	2200      	movs	r2, #0
 800c92c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c930:	f001 fd62 	bl	800e3f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d106      	bne.n	800c94a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	3324      	adds	r3, #36	; 0x24
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	68b9      	ldr	r1, [r7, #8]
 800c944:	4618      	mov	r0, r3
 800c946:	f000 fcbf 	bl	800d2c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c94a:	6978      	ldr	r0, [r7, #20]
 800c94c:	f7ff ff27 	bl	800c79e <prvUnlockQueue>
	}
 800c950:	bf00      	nop
 800c952:	3718      	adds	r7, #24
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}

0800c958 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b08e      	sub	sp, #56	; 0x38
 800c95c:	af04      	add	r7, sp, #16
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	60b9      	str	r1, [r7, #8]
 800c962:	607a      	str	r2, [r7, #4]
 800c964:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d109      	bne.n	800c980 <xTaskCreateStatic+0x28>
	__asm volatile
 800c96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c970:	f383 8811 	msr	BASEPRI, r3
 800c974:	f3bf 8f6f 	isb	sy
 800c978:	f3bf 8f4f 	dsb	sy
 800c97c:	623b      	str	r3, [r7, #32]
 800c97e:	e7fe      	b.n	800c97e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800c980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c982:	2b00      	cmp	r3, #0
 800c984:	d109      	bne.n	800c99a <xTaskCreateStatic+0x42>
 800c986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98a:	f383 8811 	msr	BASEPRI, r3
 800c98e:	f3bf 8f6f 	isb	sy
 800c992:	f3bf 8f4f 	dsb	sy
 800c996:	61fb      	str	r3, [r7, #28]
 800c998:	e7fe      	b.n	800c998 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c99a:	2354      	movs	r3, #84	; 0x54
 800c99c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	2b54      	cmp	r3, #84	; 0x54
 800c9a2:	d009      	beq.n	800c9b8 <xTaskCreateStatic+0x60>
 800c9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a8:	f383 8811 	msr	BASEPRI, r3
 800c9ac:	f3bf 8f6f 	isb	sy
 800c9b0:	f3bf 8f4f 	dsb	sy
 800c9b4:	61bb      	str	r3, [r7, #24]
 800c9b6:	e7fe      	b.n	800c9b6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c9b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d01e      	beq.n	800c9fe <xTaskCreateStatic+0xa6>
 800c9c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d01b      	beq.n	800c9fe <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9ce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d2:	2202      	movs	r2, #2
 800c9d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c9d8:	2300      	movs	r3, #0
 800c9da:	9303      	str	r3, [sp, #12]
 800c9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9de:	9302      	str	r3, [sp, #8]
 800c9e0:	f107 0314 	add.w	r3, r7, #20
 800c9e4:	9301      	str	r3, [sp, #4]
 800c9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e8:	9300      	str	r3, [sp, #0]
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	68b9      	ldr	r1, [r7, #8]
 800c9f0:	68f8      	ldr	r0, [r7, #12]
 800c9f2:	f000 f850 	bl	800ca96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c9f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9f8:	f000 f8d4 	bl	800cba4 <prvAddNewTaskToReadyList>
 800c9fc:	e001      	b.n	800ca02 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ca02:	697b      	ldr	r3, [r7, #20]
	}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3728      	adds	r7, #40	; 0x28
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b08c      	sub	sp, #48	; 0x30
 800ca10:	af04      	add	r7, sp, #16
 800ca12:	60f8      	str	r0, [r7, #12]
 800ca14:	60b9      	str	r1, [r7, #8]
 800ca16:	603b      	str	r3, [r7, #0]
 800ca18:	4613      	mov	r3, r2
 800ca1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ca1c:	88fb      	ldrh	r3, [r7, #6]
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	4618      	mov	r0, r3
 800ca22:	f001 fdd5 	bl	800e5d0 <pvPortMalloc>
 800ca26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d00e      	beq.n	800ca4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ca2e:	2054      	movs	r0, #84	; 0x54
 800ca30:	f001 fdce 	bl	800e5d0 <pvPortMalloc>
 800ca34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ca36:	69fb      	ldr	r3, [r7, #28]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d003      	beq.n	800ca44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	697a      	ldr	r2, [r7, #20]
 800ca40:	631a      	str	r2, [r3, #48]	; 0x30
 800ca42:	e005      	b.n	800ca50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ca44:	6978      	ldr	r0, [r7, #20]
 800ca46:	f001 fe85 	bl	800e754 <vPortFree>
 800ca4a:	e001      	b.n	800ca50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ca50:	69fb      	ldr	r3, [r7, #28]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d017      	beq.n	800ca86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ca56:	69fb      	ldr	r3, [r7, #28]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ca5e:	88fa      	ldrh	r2, [r7, #6]
 800ca60:	2300      	movs	r3, #0
 800ca62:	9303      	str	r3, [sp, #12]
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	9302      	str	r3, [sp, #8]
 800ca68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6a:	9301      	str	r3, [sp, #4]
 800ca6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6e:	9300      	str	r3, [sp, #0]
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	68b9      	ldr	r1, [r7, #8]
 800ca74:	68f8      	ldr	r0, [r7, #12]
 800ca76:	f000 f80e 	bl	800ca96 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca7a:	69f8      	ldr	r0, [r7, #28]
 800ca7c:	f000 f892 	bl	800cba4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ca80:	2301      	movs	r3, #1
 800ca82:	61bb      	str	r3, [r7, #24]
 800ca84:	e002      	b.n	800ca8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ca86:	f04f 33ff 	mov.w	r3, #4294967295
 800ca8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ca8c:	69bb      	ldr	r3, [r7, #24]
	}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3720      	adds	r7, #32
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}

0800ca96 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b088      	sub	sp, #32
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	60f8      	str	r0, [r7, #12]
 800ca9e:	60b9      	str	r1, [r7, #8]
 800caa0:	607a      	str	r2, [r7, #4]
 800caa2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800caa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800caa8:	6879      	ldr	r1, [r7, #4]
 800caaa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800caae:	440b      	add	r3, r1
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	4413      	add	r3, r2
 800cab4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	f023 0307 	bic.w	r3, r3, #7
 800cabc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	f003 0307 	and.w	r3, r3, #7
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d009      	beq.n	800cadc <prvInitialiseNewTask+0x46>
 800cac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cacc:	f383 8811 	msr	BASEPRI, r3
 800cad0:	f3bf 8f6f 	isb	sy
 800cad4:	f3bf 8f4f 	dsb	sy
 800cad8:	617b      	str	r3, [r7, #20]
 800cada:	e7fe      	b.n	800cada <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d01f      	beq.n	800cb22 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cae2:	2300      	movs	r3, #0
 800cae4:	61fb      	str	r3, [r7, #28]
 800cae6:	e012      	b.n	800cb0e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cae8:	68ba      	ldr	r2, [r7, #8]
 800caea:	69fb      	ldr	r3, [r7, #28]
 800caec:	4413      	add	r3, r2
 800caee:	7819      	ldrb	r1, [r3, #0]
 800caf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caf2:	69fb      	ldr	r3, [r7, #28]
 800caf4:	4413      	add	r3, r2
 800caf6:	3334      	adds	r3, #52	; 0x34
 800caf8:	460a      	mov	r2, r1
 800cafa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cafc:	68ba      	ldr	r2, [r7, #8]
 800cafe:	69fb      	ldr	r3, [r7, #28]
 800cb00:	4413      	add	r3, r2
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d006      	beq.n	800cb16 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	61fb      	str	r3, [r7, #28]
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	2b0f      	cmp	r3, #15
 800cb12:	d9e9      	bls.n	800cae8 <prvInitialiseNewTask+0x52>
 800cb14:	e000      	b.n	800cb18 <prvInitialiseNewTask+0x82>
			{
				break;
 800cb16:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cb20:	e003      	b.n	800cb2a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb24:	2200      	movs	r2, #0
 800cb26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2c:	2b06      	cmp	r3, #6
 800cb2e:	d901      	bls.n	800cb34 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cb30:	2306      	movs	r3, #6
 800cb32:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb38:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb3e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb42:	2200      	movs	r2, #0
 800cb44:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb48:	3304      	adds	r3, #4
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7fe fe86 	bl	800b85c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cb50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb52:	3318      	adds	r3, #24
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7fe fe81 	bl	800b85c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb5e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb62:	f1c3 0207 	rsb	r2, r3, #7
 800cb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb68:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb6e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb72:	2200      	movs	r2, #0
 800cb74:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb78:	2200      	movs	r2, #0
 800cb7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cb7e:	683a      	ldr	r2, [r7, #0]
 800cb80:	68f9      	ldr	r1, [r7, #12]
 800cb82:	69b8      	ldr	r0, [r7, #24]
 800cb84:	f001 fae4 	bl	800e150 <pxPortInitialiseStack>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d002      	beq.n	800cb9a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb9a:	bf00      	nop
 800cb9c:	3720      	adds	r7, #32
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
	...

0800cba4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b082      	sub	sp, #8
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cbac:	f001 fbf6 	bl	800e39c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cbb0:	4b2a      	ldr	r3, [pc, #168]	; (800cc5c <prvAddNewTaskToReadyList+0xb8>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	4a29      	ldr	r2, [pc, #164]	; (800cc5c <prvAddNewTaskToReadyList+0xb8>)
 800cbb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cbba:	4b29      	ldr	r3, [pc, #164]	; (800cc60 <prvAddNewTaskToReadyList+0xbc>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d109      	bne.n	800cbd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cbc2:	4a27      	ldr	r2, [pc, #156]	; (800cc60 <prvAddNewTaskToReadyList+0xbc>)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cbc8:	4b24      	ldr	r3, [pc, #144]	; (800cc5c <prvAddNewTaskToReadyList+0xb8>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d110      	bne.n	800cbf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cbd0:	f000 fca2 	bl	800d518 <prvInitialiseTaskLists>
 800cbd4:	e00d      	b.n	800cbf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cbd6:	4b23      	ldr	r3, [pc, #140]	; (800cc64 <prvAddNewTaskToReadyList+0xc0>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d109      	bne.n	800cbf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cbde:	4b20      	ldr	r3, [pc, #128]	; (800cc60 <prvAddNewTaskToReadyList+0xbc>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d802      	bhi.n	800cbf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cbec:	4a1c      	ldr	r2, [pc, #112]	; (800cc60 <prvAddNewTaskToReadyList+0xbc>)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cbf2:	4b1d      	ldr	r3, [pc, #116]	; (800cc68 <prvAddNewTaskToReadyList+0xc4>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	4a1b      	ldr	r2, [pc, #108]	; (800cc68 <prvAddNewTaskToReadyList+0xc4>)
 800cbfa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc00:	2201      	movs	r2, #1
 800cc02:	409a      	lsls	r2, r3
 800cc04:	4b19      	ldr	r3, [pc, #100]	; (800cc6c <prvAddNewTaskToReadyList+0xc8>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	4a18      	ldr	r2, [pc, #96]	; (800cc6c <prvAddNewTaskToReadyList+0xc8>)
 800cc0c:	6013      	str	r3, [r2, #0]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc12:	4613      	mov	r3, r2
 800cc14:	009b      	lsls	r3, r3, #2
 800cc16:	4413      	add	r3, r2
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	4a15      	ldr	r2, [pc, #84]	; (800cc70 <prvAddNewTaskToReadyList+0xcc>)
 800cc1c:	441a      	add	r2, r3
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	3304      	adds	r3, #4
 800cc22:	4619      	mov	r1, r3
 800cc24:	4610      	mov	r0, r2
 800cc26:	f7fe fe26 	bl	800b876 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cc2a:	f001 fbe5 	bl	800e3f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cc2e:	4b0d      	ldr	r3, [pc, #52]	; (800cc64 <prvAddNewTaskToReadyList+0xc0>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d00e      	beq.n	800cc54 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cc36:	4b0a      	ldr	r3, [pc, #40]	; (800cc60 <prvAddNewTaskToReadyList+0xbc>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d207      	bcs.n	800cc54 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cc44:	4b0b      	ldr	r3, [pc, #44]	; (800cc74 <prvAddNewTaskToReadyList+0xd0>)
 800cc46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc4a:	601a      	str	r2, [r3, #0]
 800cc4c:	f3bf 8f4f 	dsb	sy
 800cc50:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc54:	bf00      	nop
 800cc56:	3708      	adds	r7, #8
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}
 800cc5c:	24002260 	.word	0x24002260
 800cc60:	24002160 	.word	0x24002160
 800cc64:	2400226c 	.word	0x2400226c
 800cc68:	2400227c 	.word	0x2400227c
 800cc6c:	24002268 	.word	0x24002268
 800cc70:	24002164 	.word	0x24002164
 800cc74:	e000ed04 	.word	0xe000ed04

0800cc78 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800cc80:	f001 fb8c 	bl	800e39c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d102      	bne.n	800cc90 <vTaskDelete+0x18>
 800cc8a:	4b38      	ldr	r3, [pc, #224]	; (800cd6c <vTaskDelete+0xf4>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	e000      	b.n	800cc92 <vTaskDelete+0x1a>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	3304      	adds	r3, #4
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7fe fe49 	bl	800b930 <uxListRemove>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d115      	bne.n	800ccd0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cca8:	4931      	ldr	r1, [pc, #196]	; (800cd70 <vTaskDelete+0xf8>)
 800ccaa:	4613      	mov	r3, r2
 800ccac:	009b      	lsls	r3, r3, #2
 800ccae:	4413      	add	r3, r2
 800ccb0:	009b      	lsls	r3, r3, #2
 800ccb2:	440b      	add	r3, r1
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d10a      	bne.n	800ccd0 <vTaskDelete+0x58>
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	fa02 f303 	lsl.w	r3, r2, r3
 800ccc4:	43da      	mvns	r2, r3
 800ccc6:	4b2b      	ldr	r3, [pc, #172]	; (800cd74 <vTaskDelete+0xfc>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4013      	ands	r3, r2
 800cccc:	4a29      	ldr	r2, [pc, #164]	; (800cd74 <vTaskDelete+0xfc>)
 800ccce:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d004      	beq.n	800cce2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	3318      	adds	r3, #24
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f7fe fe27 	bl	800b930 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800cce2:	4b25      	ldr	r3, [pc, #148]	; (800cd78 <vTaskDelete+0x100>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	3301      	adds	r3, #1
 800cce8:	4a23      	ldr	r2, [pc, #140]	; (800cd78 <vTaskDelete+0x100>)
 800ccea:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800ccec:	4b1f      	ldr	r3, [pc, #124]	; (800cd6c <vTaskDelete+0xf4>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d10b      	bne.n	800cd0e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	3304      	adds	r3, #4
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	481f      	ldr	r0, [pc, #124]	; (800cd7c <vTaskDelete+0x104>)
 800ccfe:	f7fe fdba 	bl	800b876 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800cd02:	4b1f      	ldr	r3, [pc, #124]	; (800cd80 <vTaskDelete+0x108>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	3301      	adds	r3, #1
 800cd08:	4a1d      	ldr	r2, [pc, #116]	; (800cd80 <vTaskDelete+0x108>)
 800cd0a:	6013      	str	r3, [r2, #0]
 800cd0c:	e009      	b.n	800cd22 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800cd0e:	4b1d      	ldr	r3, [pc, #116]	; (800cd84 <vTaskDelete+0x10c>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	3b01      	subs	r3, #1
 800cd14:	4a1b      	ldr	r2, [pc, #108]	; (800cd84 <vTaskDelete+0x10c>)
 800cd16:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800cd18:	68f8      	ldr	r0, [r7, #12]
 800cd1a:	f000 fc69 	bl	800d5f0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800cd1e:	f000 fc95 	bl	800d64c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800cd22:	f001 fb69 	bl	800e3f8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800cd26:	4b18      	ldr	r3, [pc, #96]	; (800cd88 <vTaskDelete+0x110>)
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d01a      	beq.n	800cd64 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 800cd2e:	4b0f      	ldr	r3, [pc, #60]	; (800cd6c <vTaskDelete+0xf4>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	68fa      	ldr	r2, [r7, #12]
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d115      	bne.n	800cd64 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800cd38:	4b14      	ldr	r3, [pc, #80]	; (800cd8c <vTaskDelete+0x114>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d009      	beq.n	800cd54 <vTaskDelete+0xdc>
 800cd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd44:	f383 8811 	msr	BASEPRI, r3
 800cd48:	f3bf 8f6f 	isb	sy
 800cd4c:	f3bf 8f4f 	dsb	sy
 800cd50:	60bb      	str	r3, [r7, #8]
 800cd52:	e7fe      	b.n	800cd52 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 800cd54:	4b0e      	ldr	r3, [pc, #56]	; (800cd90 <vTaskDelete+0x118>)
 800cd56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd5a:	601a      	str	r2, [r3, #0]
 800cd5c:	f3bf 8f4f 	dsb	sy
 800cd60:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cd64:	bf00      	nop
 800cd66:	3710      	adds	r7, #16
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}
 800cd6c:	24002160 	.word	0x24002160
 800cd70:	24002164 	.word	0x24002164
 800cd74:	24002268 	.word	0x24002268
 800cd78:	2400227c 	.word	0x2400227c
 800cd7c:	24002234 	.word	0x24002234
 800cd80:	24002248 	.word	0x24002248
 800cd84:	24002260 	.word	0x24002260
 800cd88:	2400226c 	.word	0x2400226c
 800cd8c:	24002288 	.word	0x24002288
 800cd90:	e000ed04 	.word	0xe000ed04

0800cd94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d016      	beq.n	800cdd4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cda6:	4b13      	ldr	r3, [pc, #76]	; (800cdf4 <vTaskDelay+0x60>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d009      	beq.n	800cdc2 <vTaskDelay+0x2e>
 800cdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb2:	f383 8811 	msr	BASEPRI, r3
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	60bb      	str	r3, [r7, #8]
 800cdc0:	e7fe      	b.n	800cdc0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800cdc2:	f000 f87f 	bl	800cec4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cdc6:	2100      	movs	r1, #0
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f000 fe2d 	bl	800da28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cdce:	f000 f887 	bl	800cee0 <xTaskResumeAll>
 800cdd2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d107      	bne.n	800cdea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800cdda:	4b07      	ldr	r3, [pc, #28]	; (800cdf8 <vTaskDelay+0x64>)
 800cddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cde0:	601a      	str	r2, [r3, #0]
 800cde2:	f3bf 8f4f 	dsb	sy
 800cde6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cdea:	bf00      	nop
 800cdec:	3710      	adds	r7, #16
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
 800cdf2:	bf00      	nop
 800cdf4:	24002288 	.word	0x24002288
 800cdf8:	e000ed04 	.word	0xe000ed04

0800cdfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b08a      	sub	sp, #40	; 0x28
 800ce00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ce02:	2300      	movs	r3, #0
 800ce04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ce06:	2300      	movs	r3, #0
 800ce08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ce0a:	463a      	mov	r2, r7
 800ce0c:	1d39      	adds	r1, r7, #4
 800ce0e:	f107 0308 	add.w	r3, r7, #8
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7f3 fc3c 	bl	8000690 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ce18:	6839      	ldr	r1, [r7, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	68ba      	ldr	r2, [r7, #8]
 800ce1e:	9202      	str	r2, [sp, #8]
 800ce20:	9301      	str	r3, [sp, #4]
 800ce22:	2300      	movs	r3, #0
 800ce24:	9300      	str	r3, [sp, #0]
 800ce26:	2300      	movs	r3, #0
 800ce28:	460a      	mov	r2, r1
 800ce2a:	4920      	ldr	r1, [pc, #128]	; (800ceac <vTaskStartScheduler+0xb0>)
 800ce2c:	4820      	ldr	r0, [pc, #128]	; (800ceb0 <vTaskStartScheduler+0xb4>)
 800ce2e:	f7ff fd93 	bl	800c958 <xTaskCreateStatic>
 800ce32:	4602      	mov	r2, r0
 800ce34:	4b1f      	ldr	r3, [pc, #124]	; (800ceb4 <vTaskStartScheduler+0xb8>)
 800ce36:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ce38:	4b1e      	ldr	r3, [pc, #120]	; (800ceb4 <vTaskStartScheduler+0xb8>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d002      	beq.n	800ce46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ce40:	2301      	movs	r3, #1
 800ce42:	617b      	str	r3, [r7, #20]
 800ce44:	e001      	b.n	800ce4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ce46:	2300      	movs	r3, #0
 800ce48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ce4a:	697b      	ldr	r3, [r7, #20]
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d102      	bne.n	800ce56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ce50:	f000 fe50 	bl	800daf4 <xTimerCreateTimerTask>
 800ce54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	d115      	bne.n	800ce88 <vTaskStartScheduler+0x8c>
 800ce5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce60:	f383 8811 	msr	BASEPRI, r3
 800ce64:	f3bf 8f6f 	isb	sy
 800ce68:	f3bf 8f4f 	dsb	sy
 800ce6c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ce6e:	4b12      	ldr	r3, [pc, #72]	; (800ceb8 <vTaskStartScheduler+0xbc>)
 800ce70:	f04f 32ff 	mov.w	r2, #4294967295
 800ce74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ce76:	4b11      	ldr	r3, [pc, #68]	; (800cebc <vTaskStartScheduler+0xc0>)
 800ce78:	2201      	movs	r2, #1
 800ce7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ce7c:	4b10      	ldr	r3, [pc, #64]	; (800cec0 <vTaskStartScheduler+0xc4>)
 800ce7e:	2200      	movs	r2, #0
 800ce80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ce82:	f001 f9ed 	bl	800e260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ce86:	e00d      	b.n	800cea4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ce88:	697b      	ldr	r3, [r7, #20]
 800ce8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce8e:	d109      	bne.n	800cea4 <vTaskStartScheduler+0xa8>
 800ce90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce94:	f383 8811 	msr	BASEPRI, r3
 800ce98:	f3bf 8f6f 	isb	sy
 800ce9c:	f3bf 8f4f 	dsb	sy
 800cea0:	60fb      	str	r3, [r7, #12]
 800cea2:	e7fe      	b.n	800cea2 <vTaskStartScheduler+0xa6>
}
 800cea4:	bf00      	nop
 800cea6:	3718      	adds	r7, #24
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	08018e44 	.word	0x08018e44
 800ceb0:	0800d4e5 	.word	0x0800d4e5
 800ceb4:	24002284 	.word	0x24002284
 800ceb8:	24002280 	.word	0x24002280
 800cebc:	2400226c 	.word	0x2400226c
 800cec0:	24002264 	.word	0x24002264

0800cec4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cec4:	b480      	push	{r7}
 800cec6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cec8:	4b04      	ldr	r3, [pc, #16]	; (800cedc <vTaskSuspendAll+0x18>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	3301      	adds	r3, #1
 800cece:	4a03      	ldr	r2, [pc, #12]	; (800cedc <vTaskSuspendAll+0x18>)
 800ced0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ced2:	bf00      	nop
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr
 800cedc:	24002288 	.word	0x24002288

0800cee0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cee6:	2300      	movs	r3, #0
 800cee8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ceea:	2300      	movs	r3, #0
 800ceec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ceee:	4b41      	ldr	r3, [pc, #260]	; (800cff4 <xTaskResumeAll+0x114>)
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d109      	bne.n	800cf0a <xTaskResumeAll+0x2a>
 800cef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefa:	f383 8811 	msr	BASEPRI, r3
 800cefe:	f3bf 8f6f 	isb	sy
 800cf02:	f3bf 8f4f 	dsb	sy
 800cf06:	603b      	str	r3, [r7, #0]
 800cf08:	e7fe      	b.n	800cf08 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cf0a:	f001 fa47 	bl	800e39c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cf0e:	4b39      	ldr	r3, [pc, #228]	; (800cff4 <xTaskResumeAll+0x114>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	3b01      	subs	r3, #1
 800cf14:	4a37      	ldr	r2, [pc, #220]	; (800cff4 <xTaskResumeAll+0x114>)
 800cf16:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf18:	4b36      	ldr	r3, [pc, #216]	; (800cff4 <xTaskResumeAll+0x114>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d161      	bne.n	800cfe4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cf20:	4b35      	ldr	r3, [pc, #212]	; (800cff8 <xTaskResumeAll+0x118>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d05d      	beq.n	800cfe4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cf28:	e02e      	b.n	800cf88 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf2a:	4b34      	ldr	r3, [pc, #208]	; (800cffc <xTaskResumeAll+0x11c>)
 800cf2c:	68db      	ldr	r3, [r3, #12]
 800cf2e:	68db      	ldr	r3, [r3, #12]
 800cf30:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	3318      	adds	r3, #24
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7fe fcfa 	bl	800b930 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	3304      	adds	r3, #4
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7fe fcf5 	bl	800b930 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	409a      	lsls	r2, r3
 800cf4e:	4b2c      	ldr	r3, [pc, #176]	; (800d000 <xTaskResumeAll+0x120>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4313      	orrs	r3, r2
 800cf54:	4a2a      	ldr	r2, [pc, #168]	; (800d000 <xTaskResumeAll+0x120>)
 800cf56:	6013      	str	r3, [r2, #0]
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	009b      	lsls	r3, r3, #2
 800cf60:	4413      	add	r3, r2
 800cf62:	009b      	lsls	r3, r3, #2
 800cf64:	4a27      	ldr	r2, [pc, #156]	; (800d004 <xTaskResumeAll+0x124>)
 800cf66:	441a      	add	r2, r3
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	3304      	adds	r3, #4
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	4610      	mov	r0, r2
 800cf70:	f7fe fc81 	bl	800b876 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf78:	4b23      	ldr	r3, [pc, #140]	; (800d008 <xTaskResumeAll+0x128>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d302      	bcc.n	800cf88 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800cf82:	4b22      	ldr	r3, [pc, #136]	; (800d00c <xTaskResumeAll+0x12c>)
 800cf84:	2201      	movs	r2, #1
 800cf86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cf88:	4b1c      	ldr	r3, [pc, #112]	; (800cffc <xTaskResumeAll+0x11c>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d1cc      	bne.n	800cf2a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d001      	beq.n	800cf9a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cf96:	f000 fb59 	bl	800d64c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cf9a:	4b1d      	ldr	r3, [pc, #116]	; (800d010 <xTaskResumeAll+0x130>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d010      	beq.n	800cfc8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cfa6:	f000 f859 	bl	800d05c <xTaskIncrementTick>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d002      	beq.n	800cfb6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800cfb0:	4b16      	ldr	r3, [pc, #88]	; (800d00c <xTaskResumeAll+0x12c>)
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	3b01      	subs	r3, #1
 800cfba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d1f1      	bne.n	800cfa6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800cfc2:	4b13      	ldr	r3, [pc, #76]	; (800d010 <xTaskResumeAll+0x130>)
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cfc8:	4b10      	ldr	r3, [pc, #64]	; (800d00c <xTaskResumeAll+0x12c>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d009      	beq.n	800cfe4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cfd4:	4b0f      	ldr	r3, [pc, #60]	; (800d014 <xTaskResumeAll+0x134>)
 800cfd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfda:	601a      	str	r2, [r3, #0]
 800cfdc:	f3bf 8f4f 	dsb	sy
 800cfe0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cfe4:	f001 fa08 	bl	800e3f8 <vPortExitCritical>

	return xAlreadyYielded;
 800cfe8:	68bb      	ldr	r3, [r7, #8]
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3710      	adds	r7, #16
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
 800cff2:	bf00      	nop
 800cff4:	24002288 	.word	0x24002288
 800cff8:	24002260 	.word	0x24002260
 800cffc:	24002220 	.word	0x24002220
 800d000:	24002268 	.word	0x24002268
 800d004:	24002164 	.word	0x24002164
 800d008:	24002160 	.word	0x24002160
 800d00c:	24002274 	.word	0x24002274
 800d010:	24002270 	.word	0x24002270
 800d014:	e000ed04 	.word	0xe000ed04

0800d018 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d01e:	4b05      	ldr	r3, [pc, #20]	; (800d034 <xTaskGetTickCount+0x1c>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d024:	687b      	ldr	r3, [r7, #4]
}
 800d026:	4618      	mov	r0, r3
 800d028:	370c      	adds	r7, #12
 800d02a:	46bd      	mov	sp, r7
 800d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d030:	4770      	bx	lr
 800d032:	bf00      	nop
 800d034:	24002264 	.word	0x24002264

0800d038 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d03e:	f001 fa89 	bl	800e554 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d042:	2300      	movs	r3, #0
 800d044:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d046:	4b04      	ldr	r3, [pc, #16]	; (800d058 <xTaskGetTickCountFromISR+0x20>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d04c:	683b      	ldr	r3, [r7, #0]
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3708      	adds	r7, #8
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	24002264 	.word	0x24002264

0800d05c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b086      	sub	sp, #24
 800d060:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d062:	2300      	movs	r3, #0
 800d064:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d066:	4b4e      	ldr	r3, [pc, #312]	; (800d1a0 <xTaskIncrementTick+0x144>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	f040 8087 	bne.w	800d17e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d070:	4b4c      	ldr	r3, [pc, #304]	; (800d1a4 <xTaskIncrementTick+0x148>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	3301      	adds	r3, #1
 800d076:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d078:	4a4a      	ldr	r2, [pc, #296]	; (800d1a4 <xTaskIncrementTick+0x148>)
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d11f      	bne.n	800d0c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800d084:	4b48      	ldr	r3, [pc, #288]	; (800d1a8 <xTaskIncrementTick+0x14c>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d009      	beq.n	800d0a2 <xTaskIncrementTick+0x46>
 800d08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d092:	f383 8811 	msr	BASEPRI, r3
 800d096:	f3bf 8f6f 	isb	sy
 800d09a:	f3bf 8f4f 	dsb	sy
 800d09e:	603b      	str	r3, [r7, #0]
 800d0a0:	e7fe      	b.n	800d0a0 <xTaskIncrementTick+0x44>
 800d0a2:	4b41      	ldr	r3, [pc, #260]	; (800d1a8 <xTaskIncrementTick+0x14c>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	60fb      	str	r3, [r7, #12]
 800d0a8:	4b40      	ldr	r3, [pc, #256]	; (800d1ac <xTaskIncrementTick+0x150>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a3e      	ldr	r2, [pc, #248]	; (800d1a8 <xTaskIncrementTick+0x14c>)
 800d0ae:	6013      	str	r3, [r2, #0]
 800d0b0:	4a3e      	ldr	r2, [pc, #248]	; (800d1ac <xTaskIncrementTick+0x150>)
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	6013      	str	r3, [r2, #0]
 800d0b6:	4b3e      	ldr	r3, [pc, #248]	; (800d1b0 <xTaskIncrementTick+0x154>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	4a3c      	ldr	r2, [pc, #240]	; (800d1b0 <xTaskIncrementTick+0x154>)
 800d0be:	6013      	str	r3, [r2, #0]
 800d0c0:	f000 fac4 	bl	800d64c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d0c4:	4b3b      	ldr	r3, [pc, #236]	; (800d1b4 <xTaskIncrementTick+0x158>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	693a      	ldr	r2, [r7, #16]
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	d348      	bcc.n	800d160 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d0ce:	4b36      	ldr	r3, [pc, #216]	; (800d1a8 <xTaskIncrementTick+0x14c>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d104      	bne.n	800d0e2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0d8:	4b36      	ldr	r3, [pc, #216]	; (800d1b4 <xTaskIncrementTick+0x158>)
 800d0da:	f04f 32ff 	mov.w	r2, #4294967295
 800d0de:	601a      	str	r2, [r3, #0]
					break;
 800d0e0:	e03e      	b.n	800d160 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0e2:	4b31      	ldr	r3, [pc, #196]	; (800d1a8 <xTaskIncrementTick+0x14c>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d0f2:	693a      	ldr	r2, [r7, #16]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d203      	bcs.n	800d102 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d0fa:	4a2e      	ldr	r2, [pc, #184]	; (800d1b4 <xTaskIncrementTick+0x158>)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d100:	e02e      	b.n	800d160 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	3304      	adds	r3, #4
 800d106:	4618      	mov	r0, r3
 800d108:	f7fe fc12 	bl	800b930 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d110:	2b00      	cmp	r3, #0
 800d112:	d004      	beq.n	800d11e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	3318      	adds	r3, #24
 800d118:	4618      	mov	r0, r3
 800d11a:	f7fe fc09 	bl	800b930 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d122:	2201      	movs	r2, #1
 800d124:	409a      	lsls	r2, r3
 800d126:	4b24      	ldr	r3, [pc, #144]	; (800d1b8 <xTaskIncrementTick+0x15c>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4313      	orrs	r3, r2
 800d12c:	4a22      	ldr	r2, [pc, #136]	; (800d1b8 <xTaskIncrementTick+0x15c>)
 800d12e:	6013      	str	r3, [r2, #0]
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d134:	4613      	mov	r3, r2
 800d136:	009b      	lsls	r3, r3, #2
 800d138:	4413      	add	r3, r2
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	4a1f      	ldr	r2, [pc, #124]	; (800d1bc <xTaskIncrementTick+0x160>)
 800d13e:	441a      	add	r2, r3
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	3304      	adds	r3, #4
 800d144:	4619      	mov	r1, r3
 800d146:	4610      	mov	r0, r2
 800d148:	f7fe fb95 	bl	800b876 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d150:	4b1b      	ldr	r3, [pc, #108]	; (800d1c0 <xTaskIncrementTick+0x164>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d156:	429a      	cmp	r2, r3
 800d158:	d3b9      	bcc.n	800d0ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800d15a:	2301      	movs	r3, #1
 800d15c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d15e:	e7b6      	b.n	800d0ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d160:	4b17      	ldr	r3, [pc, #92]	; (800d1c0 <xTaskIncrementTick+0x164>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d166:	4915      	ldr	r1, [pc, #84]	; (800d1bc <xTaskIncrementTick+0x160>)
 800d168:	4613      	mov	r3, r2
 800d16a:	009b      	lsls	r3, r3, #2
 800d16c:	4413      	add	r3, r2
 800d16e:	009b      	lsls	r3, r3, #2
 800d170:	440b      	add	r3, r1
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	2b01      	cmp	r3, #1
 800d176:	d907      	bls.n	800d188 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800d178:	2301      	movs	r3, #1
 800d17a:	617b      	str	r3, [r7, #20]
 800d17c:	e004      	b.n	800d188 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d17e:	4b11      	ldr	r3, [pc, #68]	; (800d1c4 <xTaskIncrementTick+0x168>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	3301      	adds	r3, #1
 800d184:	4a0f      	ldr	r2, [pc, #60]	; (800d1c4 <xTaskIncrementTick+0x168>)
 800d186:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d188:	4b0f      	ldr	r3, [pc, #60]	; (800d1c8 <xTaskIncrementTick+0x16c>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d001      	beq.n	800d194 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800d190:	2301      	movs	r3, #1
 800d192:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d194:	697b      	ldr	r3, [r7, #20]
}
 800d196:	4618      	mov	r0, r3
 800d198:	3718      	adds	r7, #24
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	24002288 	.word	0x24002288
 800d1a4:	24002264 	.word	0x24002264
 800d1a8:	24002218 	.word	0x24002218
 800d1ac:	2400221c 	.word	0x2400221c
 800d1b0:	24002278 	.word	0x24002278
 800d1b4:	24002280 	.word	0x24002280
 800d1b8:	24002268 	.word	0x24002268
 800d1bc:	24002164 	.word	0x24002164
 800d1c0:	24002160 	.word	0x24002160
 800d1c4:	24002270 	.word	0x24002270
 800d1c8:	24002274 	.word	0x24002274

0800d1cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b087      	sub	sp, #28
 800d1d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d1d2:	4b26      	ldr	r3, [pc, #152]	; (800d26c <vTaskSwitchContext+0xa0>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d003      	beq.n	800d1e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d1da:	4b25      	ldr	r3, [pc, #148]	; (800d270 <vTaskSwitchContext+0xa4>)
 800d1dc:	2201      	movs	r2, #1
 800d1de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d1e0:	e03e      	b.n	800d260 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800d1e2:	4b23      	ldr	r3, [pc, #140]	; (800d270 <vTaskSwitchContext+0xa4>)
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1e8:	4b22      	ldr	r3, [pc, #136]	; (800d274 <vTaskSwitchContext+0xa8>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	fab3 f383 	clz	r3, r3
 800d1f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d1f6:	7afb      	ldrb	r3, [r7, #11]
 800d1f8:	f1c3 031f 	rsb	r3, r3, #31
 800d1fc:	617b      	str	r3, [r7, #20]
 800d1fe:	491e      	ldr	r1, [pc, #120]	; (800d278 <vTaskSwitchContext+0xac>)
 800d200:	697a      	ldr	r2, [r7, #20]
 800d202:	4613      	mov	r3, r2
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	4413      	add	r3, r2
 800d208:	009b      	lsls	r3, r3, #2
 800d20a:	440b      	add	r3, r1
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d109      	bne.n	800d226 <vTaskSwitchContext+0x5a>
	__asm volatile
 800d212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d216:	f383 8811 	msr	BASEPRI, r3
 800d21a:	f3bf 8f6f 	isb	sy
 800d21e:	f3bf 8f4f 	dsb	sy
 800d222:	607b      	str	r3, [r7, #4]
 800d224:	e7fe      	b.n	800d224 <vTaskSwitchContext+0x58>
 800d226:	697a      	ldr	r2, [r7, #20]
 800d228:	4613      	mov	r3, r2
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	4413      	add	r3, r2
 800d22e:	009b      	lsls	r3, r3, #2
 800d230:	4a11      	ldr	r2, [pc, #68]	; (800d278 <vTaskSwitchContext+0xac>)
 800d232:	4413      	add	r3, r2
 800d234:	613b      	str	r3, [r7, #16]
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	685a      	ldr	r2, [r3, #4]
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	605a      	str	r2, [r3, #4]
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	685a      	ldr	r2, [r3, #4]
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	3308      	adds	r3, #8
 800d248:	429a      	cmp	r2, r3
 800d24a:	d104      	bne.n	800d256 <vTaskSwitchContext+0x8a>
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	685b      	ldr	r3, [r3, #4]
 800d250:	685a      	ldr	r2, [r3, #4]
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	605a      	str	r2, [r3, #4]
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	68db      	ldr	r3, [r3, #12]
 800d25c:	4a07      	ldr	r2, [pc, #28]	; (800d27c <vTaskSwitchContext+0xb0>)
 800d25e:	6013      	str	r3, [r2, #0]
}
 800d260:	bf00      	nop
 800d262:	371c      	adds	r7, #28
 800d264:	46bd      	mov	sp, r7
 800d266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26a:	4770      	bx	lr
 800d26c:	24002288 	.word	0x24002288
 800d270:	24002274 	.word	0x24002274
 800d274:	24002268 	.word	0x24002268
 800d278:	24002164 	.word	0x24002164
 800d27c:	24002160 	.word	0x24002160

0800d280 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d109      	bne.n	800d2a4 <vTaskPlaceOnEventList+0x24>
 800d290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d294:	f383 8811 	msr	BASEPRI, r3
 800d298:	f3bf 8f6f 	isb	sy
 800d29c:	f3bf 8f4f 	dsb	sy
 800d2a0:	60fb      	str	r3, [r7, #12]
 800d2a2:	e7fe      	b.n	800d2a2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d2a4:	4b07      	ldr	r3, [pc, #28]	; (800d2c4 <vTaskPlaceOnEventList+0x44>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	3318      	adds	r3, #24
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f7fe fb06 	bl	800b8be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d2b2:	2101      	movs	r1, #1
 800d2b4:	6838      	ldr	r0, [r7, #0]
 800d2b6:	f000 fbb7 	bl	800da28 <prvAddCurrentTaskToDelayedList>
}
 800d2ba:	bf00      	nop
 800d2bc:	3710      	adds	r7, #16
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	24002160 	.word	0x24002160

0800d2c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b086      	sub	sp, #24
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	60f8      	str	r0, [r7, #12]
 800d2d0:	60b9      	str	r1, [r7, #8]
 800d2d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d109      	bne.n	800d2ee <vTaskPlaceOnEventListRestricted+0x26>
 800d2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2de:	f383 8811 	msr	BASEPRI, r3
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	617b      	str	r3, [r7, #20]
 800d2ec:	e7fe      	b.n	800d2ec <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d2ee:	4b0a      	ldr	r3, [pc, #40]	; (800d318 <vTaskPlaceOnEventListRestricted+0x50>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	3318      	adds	r3, #24
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	68f8      	ldr	r0, [r7, #12]
 800d2f8:	f7fe fabd 	bl	800b876 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d002      	beq.n	800d308 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800d302:	f04f 33ff 	mov.w	r3, #4294967295
 800d306:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d308:	6879      	ldr	r1, [r7, #4]
 800d30a:	68b8      	ldr	r0, [r7, #8]
 800d30c:	f000 fb8c 	bl	800da28 <prvAddCurrentTaskToDelayedList>
	}
 800d310:	bf00      	nop
 800d312:	3718      	adds	r7, #24
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	24002160 	.word	0x24002160

0800d31c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b086      	sub	sp, #24
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	68db      	ldr	r3, [r3, #12]
 800d328:	68db      	ldr	r3, [r3, #12]
 800d32a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d109      	bne.n	800d346 <xTaskRemoveFromEventList+0x2a>
 800d332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d336:	f383 8811 	msr	BASEPRI, r3
 800d33a:	f3bf 8f6f 	isb	sy
 800d33e:	f3bf 8f4f 	dsb	sy
 800d342:	60fb      	str	r3, [r7, #12]
 800d344:	e7fe      	b.n	800d344 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	3318      	adds	r3, #24
 800d34a:	4618      	mov	r0, r3
 800d34c:	f7fe faf0 	bl	800b930 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d350:	4b1d      	ldr	r3, [pc, #116]	; (800d3c8 <xTaskRemoveFromEventList+0xac>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d11c      	bne.n	800d392 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	3304      	adds	r3, #4
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7fe fae7 	bl	800b930 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d366:	2201      	movs	r2, #1
 800d368:	409a      	lsls	r2, r3
 800d36a:	4b18      	ldr	r3, [pc, #96]	; (800d3cc <xTaskRemoveFromEventList+0xb0>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	4313      	orrs	r3, r2
 800d370:	4a16      	ldr	r2, [pc, #88]	; (800d3cc <xTaskRemoveFromEventList+0xb0>)
 800d372:	6013      	str	r3, [r2, #0]
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d378:	4613      	mov	r3, r2
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	4413      	add	r3, r2
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	4a13      	ldr	r2, [pc, #76]	; (800d3d0 <xTaskRemoveFromEventList+0xb4>)
 800d382:	441a      	add	r2, r3
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	3304      	adds	r3, #4
 800d388:	4619      	mov	r1, r3
 800d38a:	4610      	mov	r0, r2
 800d38c:	f7fe fa73 	bl	800b876 <vListInsertEnd>
 800d390:	e005      	b.n	800d39e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	3318      	adds	r3, #24
 800d396:	4619      	mov	r1, r3
 800d398:	480e      	ldr	r0, [pc, #56]	; (800d3d4 <xTaskRemoveFromEventList+0xb8>)
 800d39a:	f7fe fa6c 	bl	800b876 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3a2:	4b0d      	ldr	r3, [pc, #52]	; (800d3d8 <xTaskRemoveFromEventList+0xbc>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d905      	bls.n	800d3b8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d3b0:	4b0a      	ldr	r3, [pc, #40]	; (800d3dc <xTaskRemoveFromEventList+0xc0>)
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	601a      	str	r2, [r3, #0]
 800d3b6:	e001      	b.n	800d3bc <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d3bc:	697b      	ldr	r3, [r7, #20]
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3718      	adds	r7, #24
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
 800d3c6:	bf00      	nop
 800d3c8:	24002288 	.word	0x24002288
 800d3cc:	24002268 	.word	0x24002268
 800d3d0:	24002164 	.word	0x24002164
 800d3d4:	24002220 	.word	0x24002220
 800d3d8:	24002160 	.word	0x24002160
 800d3dc:	24002274 	.word	0x24002274

0800d3e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d3e0:	b480      	push	{r7}
 800d3e2:	b083      	sub	sp, #12
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d3e8:	4b06      	ldr	r3, [pc, #24]	; (800d404 <vTaskInternalSetTimeOutState+0x24>)
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d3f0:	4b05      	ldr	r3, [pc, #20]	; (800d408 <vTaskInternalSetTimeOutState+0x28>)
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	605a      	str	r2, [r3, #4]
}
 800d3f8:	bf00      	nop
 800d3fa:	370c      	adds	r7, #12
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr
 800d404:	24002278 	.word	0x24002278
 800d408:	24002264 	.word	0x24002264

0800d40c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b088      	sub	sp, #32
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d109      	bne.n	800d430 <xTaskCheckForTimeOut+0x24>
 800d41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d420:	f383 8811 	msr	BASEPRI, r3
 800d424:	f3bf 8f6f 	isb	sy
 800d428:	f3bf 8f4f 	dsb	sy
 800d42c:	613b      	str	r3, [r7, #16]
 800d42e:	e7fe      	b.n	800d42e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d109      	bne.n	800d44a <xTaskCheckForTimeOut+0x3e>
 800d436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43a:	f383 8811 	msr	BASEPRI, r3
 800d43e:	f3bf 8f6f 	isb	sy
 800d442:	f3bf 8f4f 	dsb	sy
 800d446:	60fb      	str	r3, [r7, #12]
 800d448:	e7fe      	b.n	800d448 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800d44a:	f000 ffa7 	bl	800e39c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d44e:	4b1d      	ldr	r3, [pc, #116]	; (800d4c4 <xTaskCheckForTimeOut+0xb8>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	69ba      	ldr	r2, [r7, #24]
 800d45a:	1ad3      	subs	r3, r2, r3
 800d45c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d466:	d102      	bne.n	800d46e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d468:	2300      	movs	r3, #0
 800d46a:	61fb      	str	r3, [r7, #28]
 800d46c:	e023      	b.n	800d4b6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	4b15      	ldr	r3, [pc, #84]	; (800d4c8 <xTaskCheckForTimeOut+0xbc>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	429a      	cmp	r2, r3
 800d478:	d007      	beq.n	800d48a <xTaskCheckForTimeOut+0x7e>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	69ba      	ldr	r2, [r7, #24]
 800d480:	429a      	cmp	r2, r3
 800d482:	d302      	bcc.n	800d48a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d484:	2301      	movs	r3, #1
 800d486:	61fb      	str	r3, [r7, #28]
 800d488:	e015      	b.n	800d4b6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	697a      	ldr	r2, [r7, #20]
 800d490:	429a      	cmp	r2, r3
 800d492:	d20b      	bcs.n	800d4ac <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	681a      	ldr	r2, [r3, #0]
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	1ad2      	subs	r2, r2, r3
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f7ff ff9d 	bl	800d3e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	61fb      	str	r3, [r7, #28]
 800d4aa:	e004      	b.n	800d4b6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d4b6:	f000 ff9f 	bl	800e3f8 <vPortExitCritical>

	return xReturn;
 800d4ba:	69fb      	ldr	r3, [r7, #28]
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	3720      	adds	r7, #32
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}
 800d4c4:	24002264 	.word	0x24002264
 800d4c8:	24002278 	.word	0x24002278

0800d4cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d4d0:	4b03      	ldr	r3, [pc, #12]	; (800d4e0 <vTaskMissedYield+0x14>)
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	601a      	str	r2, [r3, #0]
}
 800d4d6:	bf00      	nop
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr
 800d4e0:	24002274 	.word	0x24002274

0800d4e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d4ec:	f000 f854 	bl	800d598 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d4f0:	4b07      	ldr	r3, [pc, #28]	; (800d510 <prvIdleTask+0x2c>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d907      	bls.n	800d508 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d4f8:	4b06      	ldr	r3, [pc, #24]	; (800d514 <prvIdleTask+0x30>)
 800d4fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4fe:	601a      	str	r2, [r3, #0]
 800d500:	f3bf 8f4f 	dsb	sy
 800d504:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d508:	f7f3 f8ba 	bl	8000680 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d50c:	e7ee      	b.n	800d4ec <prvIdleTask+0x8>
 800d50e:	bf00      	nop
 800d510:	24002164 	.word	0x24002164
 800d514:	e000ed04 	.word	0xe000ed04

0800d518 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b082      	sub	sp, #8
 800d51c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d51e:	2300      	movs	r3, #0
 800d520:	607b      	str	r3, [r7, #4]
 800d522:	e00c      	b.n	800d53e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	4613      	mov	r3, r2
 800d528:	009b      	lsls	r3, r3, #2
 800d52a:	4413      	add	r3, r2
 800d52c:	009b      	lsls	r3, r3, #2
 800d52e:	4a12      	ldr	r2, [pc, #72]	; (800d578 <prvInitialiseTaskLists+0x60>)
 800d530:	4413      	add	r3, r2
 800d532:	4618      	mov	r0, r3
 800d534:	f7fe f972 	bl	800b81c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	3301      	adds	r3, #1
 800d53c:	607b      	str	r3, [r7, #4]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2b06      	cmp	r3, #6
 800d542:	d9ef      	bls.n	800d524 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d544:	480d      	ldr	r0, [pc, #52]	; (800d57c <prvInitialiseTaskLists+0x64>)
 800d546:	f7fe f969 	bl	800b81c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d54a:	480d      	ldr	r0, [pc, #52]	; (800d580 <prvInitialiseTaskLists+0x68>)
 800d54c:	f7fe f966 	bl	800b81c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d550:	480c      	ldr	r0, [pc, #48]	; (800d584 <prvInitialiseTaskLists+0x6c>)
 800d552:	f7fe f963 	bl	800b81c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d556:	480c      	ldr	r0, [pc, #48]	; (800d588 <prvInitialiseTaskLists+0x70>)
 800d558:	f7fe f960 	bl	800b81c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d55c:	480b      	ldr	r0, [pc, #44]	; (800d58c <prvInitialiseTaskLists+0x74>)
 800d55e:	f7fe f95d 	bl	800b81c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d562:	4b0b      	ldr	r3, [pc, #44]	; (800d590 <prvInitialiseTaskLists+0x78>)
 800d564:	4a05      	ldr	r2, [pc, #20]	; (800d57c <prvInitialiseTaskLists+0x64>)
 800d566:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d568:	4b0a      	ldr	r3, [pc, #40]	; (800d594 <prvInitialiseTaskLists+0x7c>)
 800d56a:	4a05      	ldr	r2, [pc, #20]	; (800d580 <prvInitialiseTaskLists+0x68>)
 800d56c:	601a      	str	r2, [r3, #0]
}
 800d56e:	bf00      	nop
 800d570:	3708      	adds	r7, #8
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	24002164 	.word	0x24002164
 800d57c:	240021f0 	.word	0x240021f0
 800d580:	24002204 	.word	0x24002204
 800d584:	24002220 	.word	0x24002220
 800d588:	24002234 	.word	0x24002234
 800d58c:	2400224c 	.word	0x2400224c
 800d590:	24002218 	.word	0x24002218
 800d594:	2400221c 	.word	0x2400221c

0800d598 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b082      	sub	sp, #8
 800d59c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d59e:	e019      	b.n	800d5d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d5a0:	f000 fefc 	bl	800e39c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5a4:	4b0f      	ldr	r3, [pc, #60]	; (800d5e4 <prvCheckTasksWaitingTermination+0x4c>)
 800d5a6:	68db      	ldr	r3, [r3, #12]
 800d5a8:	68db      	ldr	r3, [r3, #12]
 800d5aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	3304      	adds	r3, #4
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7fe f9bd 	bl	800b930 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d5b6:	4b0c      	ldr	r3, [pc, #48]	; (800d5e8 <prvCheckTasksWaitingTermination+0x50>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	3b01      	subs	r3, #1
 800d5bc:	4a0a      	ldr	r2, [pc, #40]	; (800d5e8 <prvCheckTasksWaitingTermination+0x50>)
 800d5be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d5c0:	4b0a      	ldr	r3, [pc, #40]	; (800d5ec <prvCheckTasksWaitingTermination+0x54>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	3b01      	subs	r3, #1
 800d5c6:	4a09      	ldr	r2, [pc, #36]	; (800d5ec <prvCheckTasksWaitingTermination+0x54>)
 800d5c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d5ca:	f000 ff15 	bl	800e3f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 f80e 	bl	800d5f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d5d4:	4b05      	ldr	r3, [pc, #20]	; (800d5ec <prvCheckTasksWaitingTermination+0x54>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d1e1      	bne.n	800d5a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d5dc:	bf00      	nop
 800d5de:	3708      	adds	r7, #8
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	24002234 	.word	0x24002234
 800d5e8:	24002260 	.word	0x24002260
 800d5ec:	24002248 	.word	0x24002248

0800d5f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d108      	bne.n	800d614 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d606:	4618      	mov	r0, r3
 800d608:	f001 f8a4 	bl	800e754 <vPortFree>
				vPortFree( pxTCB );
 800d60c:	6878      	ldr	r0, [r7, #4]
 800d60e:	f001 f8a1 	bl	800e754 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d612:	e017      	b.n	800d644 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	d103      	bne.n	800d626 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f001 f898 	bl	800e754 <vPortFree>
	}
 800d624:	e00e      	b.n	800d644 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d62c:	2b02      	cmp	r3, #2
 800d62e:	d009      	beq.n	800d644 <prvDeleteTCB+0x54>
 800d630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d634:	f383 8811 	msr	BASEPRI, r3
 800d638:	f3bf 8f6f 	isb	sy
 800d63c:	f3bf 8f4f 	dsb	sy
 800d640:	60fb      	str	r3, [r7, #12]
 800d642:	e7fe      	b.n	800d642 <prvDeleteTCB+0x52>
	}
 800d644:	bf00      	nop
 800d646:	3710      	adds	r7, #16
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d64c:	b480      	push	{r7}
 800d64e:	b083      	sub	sp, #12
 800d650:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d652:	4b0c      	ldr	r3, [pc, #48]	; (800d684 <prvResetNextTaskUnblockTime+0x38>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d104      	bne.n	800d666 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d65c:	4b0a      	ldr	r3, [pc, #40]	; (800d688 <prvResetNextTaskUnblockTime+0x3c>)
 800d65e:	f04f 32ff 	mov.w	r2, #4294967295
 800d662:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d664:	e008      	b.n	800d678 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d666:	4b07      	ldr	r3, [pc, #28]	; (800d684 <prvResetNextTaskUnblockTime+0x38>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	68db      	ldr	r3, [r3, #12]
 800d66c:	68db      	ldr	r3, [r3, #12]
 800d66e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	4a04      	ldr	r2, [pc, #16]	; (800d688 <prvResetNextTaskUnblockTime+0x3c>)
 800d676:	6013      	str	r3, [r2, #0]
}
 800d678:	bf00      	nop
 800d67a:	370c      	adds	r7, #12
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr
 800d684:	24002218 	.word	0x24002218
 800d688:	24002280 	.word	0x24002280

0800d68c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d68c:	b480      	push	{r7}
 800d68e:	b083      	sub	sp, #12
 800d690:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d692:	4b0b      	ldr	r3, [pc, #44]	; (800d6c0 <xTaskGetSchedulerState+0x34>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d102      	bne.n	800d6a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d69a:	2301      	movs	r3, #1
 800d69c:	607b      	str	r3, [r7, #4]
 800d69e:	e008      	b.n	800d6b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6a0:	4b08      	ldr	r3, [pc, #32]	; (800d6c4 <xTaskGetSchedulerState+0x38>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d102      	bne.n	800d6ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d6a8:	2302      	movs	r3, #2
 800d6aa:	607b      	str	r3, [r7, #4]
 800d6ac:	e001      	b.n	800d6b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d6b2:	687b      	ldr	r3, [r7, #4]
	}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	370c      	adds	r7, #12
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr
 800d6c0:	2400226c 	.word	0x2400226c
 800d6c4:	24002288 	.word	0x24002288

0800d6c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b084      	sub	sp, #16
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d069      	beq.n	800d7b2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d6de:	68bb      	ldr	r3, [r7, #8]
 800d6e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6e2:	4b36      	ldr	r3, [pc, #216]	; (800d7bc <xTaskPriorityInherit+0xf4>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d259      	bcs.n	800d7a0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	699b      	ldr	r3, [r3, #24]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	db06      	blt.n	800d702 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6f4:	4b31      	ldr	r3, [pc, #196]	; (800d7bc <xTaskPriorityInherit+0xf4>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6fa:	f1c3 0207 	rsb	r2, r3, #7
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	6959      	ldr	r1, [r3, #20]
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d70a:	4613      	mov	r3, r2
 800d70c:	009b      	lsls	r3, r3, #2
 800d70e:	4413      	add	r3, r2
 800d710:	009b      	lsls	r3, r3, #2
 800d712:	4a2b      	ldr	r2, [pc, #172]	; (800d7c0 <xTaskPriorityInherit+0xf8>)
 800d714:	4413      	add	r3, r2
 800d716:	4299      	cmp	r1, r3
 800d718:	d13a      	bne.n	800d790 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	3304      	adds	r3, #4
 800d71e:	4618      	mov	r0, r3
 800d720:	f7fe f906 	bl	800b930 <uxListRemove>
 800d724:	4603      	mov	r3, r0
 800d726:	2b00      	cmp	r3, #0
 800d728:	d115      	bne.n	800d756 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d72e:	4924      	ldr	r1, [pc, #144]	; (800d7c0 <xTaskPriorityInherit+0xf8>)
 800d730:	4613      	mov	r3, r2
 800d732:	009b      	lsls	r3, r3, #2
 800d734:	4413      	add	r3, r2
 800d736:	009b      	lsls	r3, r3, #2
 800d738:	440b      	add	r3, r1
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d10a      	bne.n	800d756 <xTaskPriorityInherit+0x8e>
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d744:	2201      	movs	r2, #1
 800d746:	fa02 f303 	lsl.w	r3, r2, r3
 800d74a:	43da      	mvns	r2, r3
 800d74c:	4b1d      	ldr	r3, [pc, #116]	; (800d7c4 <xTaskPriorityInherit+0xfc>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4013      	ands	r3, r2
 800d752:	4a1c      	ldr	r2, [pc, #112]	; (800d7c4 <xTaskPriorityInherit+0xfc>)
 800d754:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d756:	4b19      	ldr	r3, [pc, #100]	; (800d7bc <xTaskPriorityInherit+0xf4>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d764:	2201      	movs	r2, #1
 800d766:	409a      	lsls	r2, r3
 800d768:	4b16      	ldr	r3, [pc, #88]	; (800d7c4 <xTaskPriorityInherit+0xfc>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4313      	orrs	r3, r2
 800d76e:	4a15      	ldr	r2, [pc, #84]	; (800d7c4 <xTaskPriorityInherit+0xfc>)
 800d770:	6013      	str	r3, [r2, #0]
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d776:	4613      	mov	r3, r2
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	4413      	add	r3, r2
 800d77c:	009b      	lsls	r3, r3, #2
 800d77e:	4a10      	ldr	r2, [pc, #64]	; (800d7c0 <xTaskPriorityInherit+0xf8>)
 800d780:	441a      	add	r2, r3
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	3304      	adds	r3, #4
 800d786:	4619      	mov	r1, r3
 800d788:	4610      	mov	r0, r2
 800d78a:	f7fe f874 	bl	800b876 <vListInsertEnd>
 800d78e:	e004      	b.n	800d79a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d790:	4b0a      	ldr	r3, [pc, #40]	; (800d7bc <xTaskPriorityInherit+0xf4>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d79a:	2301      	movs	r3, #1
 800d79c:	60fb      	str	r3, [r7, #12]
 800d79e:	e008      	b.n	800d7b2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7a4:	4b05      	ldr	r3, [pc, #20]	; (800d7bc <xTaskPriorityInherit+0xf4>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	d201      	bcs.n	800d7b2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
	}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3710      	adds	r7, #16
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	24002160 	.word	0x24002160
 800d7c0:	24002164 	.word	0x24002164
 800d7c4:	24002268 	.word	0x24002268

0800d7c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b086      	sub	sp, #24
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d06c      	beq.n	800d8b8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d7de:	4b39      	ldr	r3, [pc, #228]	; (800d8c4 <xTaskPriorityDisinherit+0xfc>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	693a      	ldr	r2, [r7, #16]
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d009      	beq.n	800d7fc <xTaskPriorityDisinherit+0x34>
 800d7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ec:	f383 8811 	msr	BASEPRI, r3
 800d7f0:	f3bf 8f6f 	isb	sy
 800d7f4:	f3bf 8f4f 	dsb	sy
 800d7f8:	60fb      	str	r3, [r7, #12]
 800d7fa:	e7fe      	b.n	800d7fa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d800:	2b00      	cmp	r3, #0
 800d802:	d109      	bne.n	800d818 <xTaskPriorityDisinherit+0x50>
 800d804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d808:	f383 8811 	msr	BASEPRI, r3
 800d80c:	f3bf 8f6f 	isb	sy
 800d810:	f3bf 8f4f 	dsb	sy
 800d814:	60bb      	str	r3, [r7, #8]
 800d816:	e7fe      	b.n	800d816 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d81c:	1e5a      	subs	r2, r3, #1
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d044      	beq.n	800d8b8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d832:	2b00      	cmp	r3, #0
 800d834:	d140      	bne.n	800d8b8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	3304      	adds	r3, #4
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7fe f878 	bl	800b930 <uxListRemove>
 800d840:	4603      	mov	r3, r0
 800d842:	2b00      	cmp	r3, #0
 800d844:	d115      	bne.n	800d872 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d84a:	491f      	ldr	r1, [pc, #124]	; (800d8c8 <xTaskPriorityDisinherit+0x100>)
 800d84c:	4613      	mov	r3, r2
 800d84e:	009b      	lsls	r3, r3, #2
 800d850:	4413      	add	r3, r2
 800d852:	009b      	lsls	r3, r3, #2
 800d854:	440b      	add	r3, r1
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d10a      	bne.n	800d872 <xTaskPriorityDisinherit+0xaa>
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d860:	2201      	movs	r2, #1
 800d862:	fa02 f303 	lsl.w	r3, r2, r3
 800d866:	43da      	mvns	r2, r3
 800d868:	4b18      	ldr	r3, [pc, #96]	; (800d8cc <xTaskPriorityDisinherit+0x104>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4013      	ands	r3, r2
 800d86e:	4a17      	ldr	r2, [pc, #92]	; (800d8cc <xTaskPriorityDisinherit+0x104>)
 800d870:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87e:	f1c3 0207 	rsb	r2, r3, #7
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d886:	693b      	ldr	r3, [r7, #16]
 800d888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d88a:	2201      	movs	r2, #1
 800d88c:	409a      	lsls	r2, r3
 800d88e:	4b0f      	ldr	r3, [pc, #60]	; (800d8cc <xTaskPriorityDisinherit+0x104>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	4313      	orrs	r3, r2
 800d894:	4a0d      	ldr	r2, [pc, #52]	; (800d8cc <xTaskPriorityDisinherit+0x104>)
 800d896:	6013      	str	r3, [r2, #0]
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d89c:	4613      	mov	r3, r2
 800d89e:	009b      	lsls	r3, r3, #2
 800d8a0:	4413      	add	r3, r2
 800d8a2:	009b      	lsls	r3, r3, #2
 800d8a4:	4a08      	ldr	r2, [pc, #32]	; (800d8c8 <xTaskPriorityDisinherit+0x100>)
 800d8a6:	441a      	add	r2, r3
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	3304      	adds	r3, #4
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	4610      	mov	r0, r2
 800d8b0:	f7fd ffe1 	bl	800b876 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d8b8:	697b      	ldr	r3, [r7, #20]
	}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3718      	adds	r7, #24
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	24002160 	.word	0x24002160
 800d8c8:	24002164 	.word	0x24002164
 800d8cc:	24002268 	.word	0x24002268

0800d8d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b088      	sub	sp, #32
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d8de:	2301      	movs	r3, #1
 800d8e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	f000 8081 	beq.w	800d9ec <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d8ea:	69bb      	ldr	r3, [r7, #24]
 800d8ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d109      	bne.n	800d906 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800d8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f6:	f383 8811 	msr	BASEPRI, r3
 800d8fa:	f3bf 8f6f 	isb	sy
 800d8fe:	f3bf 8f4f 	dsb	sy
 800d902:	60fb      	str	r3, [r7, #12]
 800d904:	e7fe      	b.n	800d904 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d906:	69bb      	ldr	r3, [r7, #24]
 800d908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d90a:	683a      	ldr	r2, [r7, #0]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d902      	bls.n	800d916 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	61fb      	str	r3, [r7, #28]
 800d914:	e002      	b.n	800d91c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d916:	69bb      	ldr	r3, [r7, #24]
 800d918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d91a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d91c:	69bb      	ldr	r3, [r7, #24]
 800d91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d920:	69fa      	ldr	r2, [r7, #28]
 800d922:	429a      	cmp	r2, r3
 800d924:	d062      	beq.n	800d9ec <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d926:	69bb      	ldr	r3, [r7, #24]
 800d928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d92a:	697a      	ldr	r2, [r7, #20]
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d15d      	bne.n	800d9ec <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d930:	4b30      	ldr	r3, [pc, #192]	; (800d9f4 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	69ba      	ldr	r2, [r7, #24]
 800d936:	429a      	cmp	r2, r3
 800d938:	d109      	bne.n	800d94e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800d93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d93e:	f383 8811 	msr	BASEPRI, r3
 800d942:	f3bf 8f6f 	isb	sy
 800d946:	f3bf 8f4f 	dsb	sy
 800d94a:	60bb      	str	r3, [r7, #8]
 800d94c:	e7fe      	b.n	800d94c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d94e:	69bb      	ldr	r3, [r7, #24]
 800d950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d952:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d954:	69bb      	ldr	r3, [r7, #24]
 800d956:	69fa      	ldr	r2, [r7, #28]
 800d958:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d95a:	69bb      	ldr	r3, [r7, #24]
 800d95c:	699b      	ldr	r3, [r3, #24]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	db04      	blt.n	800d96c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	f1c3 0207 	rsb	r2, r3, #7
 800d968:	69bb      	ldr	r3, [r7, #24]
 800d96a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d96c:	69bb      	ldr	r3, [r7, #24]
 800d96e:	6959      	ldr	r1, [r3, #20]
 800d970:	693a      	ldr	r2, [r7, #16]
 800d972:	4613      	mov	r3, r2
 800d974:	009b      	lsls	r3, r3, #2
 800d976:	4413      	add	r3, r2
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	4a1f      	ldr	r2, [pc, #124]	; (800d9f8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d97c:	4413      	add	r3, r2
 800d97e:	4299      	cmp	r1, r3
 800d980:	d134      	bne.n	800d9ec <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	3304      	adds	r3, #4
 800d986:	4618      	mov	r0, r3
 800d988:	f7fd ffd2 	bl	800b930 <uxListRemove>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d115      	bne.n	800d9be <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d992:	69bb      	ldr	r3, [r7, #24]
 800d994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d996:	4918      	ldr	r1, [pc, #96]	; (800d9f8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d998:	4613      	mov	r3, r2
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	4413      	add	r3, r2
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	440b      	add	r3, r1
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d10a      	bne.n	800d9be <vTaskPriorityDisinheritAfterTimeout+0xee>
 800d9a8:	69bb      	ldr	r3, [r7, #24]
 800d9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	fa02 f303 	lsl.w	r3, r2, r3
 800d9b2:	43da      	mvns	r2, r3
 800d9b4:	4b11      	ldr	r3, [pc, #68]	; (800d9fc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4013      	ands	r3, r2
 800d9ba:	4a10      	ldr	r2, [pc, #64]	; (800d9fc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d9bc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d9be:	69bb      	ldr	r3, [r7, #24]
 800d9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	409a      	lsls	r2, r3
 800d9c6:	4b0d      	ldr	r3, [pc, #52]	; (800d9fc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	4a0b      	ldr	r2, [pc, #44]	; (800d9fc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d9ce:	6013      	str	r3, [r2, #0]
 800d9d0:	69bb      	ldr	r3, [r7, #24]
 800d9d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9d4:	4613      	mov	r3, r2
 800d9d6:	009b      	lsls	r3, r3, #2
 800d9d8:	4413      	add	r3, r2
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	4a06      	ldr	r2, [pc, #24]	; (800d9f8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800d9de:	441a      	add	r2, r3
 800d9e0:	69bb      	ldr	r3, [r7, #24]
 800d9e2:	3304      	adds	r3, #4
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	4610      	mov	r0, r2
 800d9e8:	f7fd ff45 	bl	800b876 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d9ec:	bf00      	nop
 800d9ee:	3720      	adds	r7, #32
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}
 800d9f4:	24002160 	.word	0x24002160
 800d9f8:	24002164 	.word	0x24002164
 800d9fc:	24002268 	.word	0x24002268

0800da00 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800da00:	b480      	push	{r7}
 800da02:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800da04:	4b07      	ldr	r3, [pc, #28]	; (800da24 <pvTaskIncrementMutexHeldCount+0x24>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d004      	beq.n	800da16 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800da0c:	4b05      	ldr	r3, [pc, #20]	; (800da24 <pvTaskIncrementMutexHeldCount+0x24>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800da12:	3201      	adds	r2, #1
 800da14:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800da16:	4b03      	ldr	r3, [pc, #12]	; (800da24 <pvTaskIncrementMutexHeldCount+0x24>)
 800da18:	681b      	ldr	r3, [r3, #0]
	}
 800da1a:	4618      	mov	r0, r3
 800da1c:	46bd      	mov	sp, r7
 800da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da22:	4770      	bx	lr
 800da24:	24002160 	.word	0x24002160

0800da28 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800da32:	4b29      	ldr	r3, [pc, #164]	; (800dad8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da38:	4b28      	ldr	r3, [pc, #160]	; (800dadc <prvAddCurrentTaskToDelayedList+0xb4>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	3304      	adds	r3, #4
 800da3e:	4618      	mov	r0, r3
 800da40:	f7fd ff76 	bl	800b930 <uxListRemove>
 800da44:	4603      	mov	r3, r0
 800da46:	2b00      	cmp	r3, #0
 800da48:	d10b      	bne.n	800da62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800da4a:	4b24      	ldr	r3, [pc, #144]	; (800dadc <prvAddCurrentTaskToDelayedList+0xb4>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da50:	2201      	movs	r2, #1
 800da52:	fa02 f303 	lsl.w	r3, r2, r3
 800da56:	43da      	mvns	r2, r3
 800da58:	4b21      	ldr	r3, [pc, #132]	; (800dae0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	4013      	ands	r3, r2
 800da5e:	4a20      	ldr	r2, [pc, #128]	; (800dae0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800da60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da68:	d10a      	bne.n	800da80 <prvAddCurrentTaskToDelayedList+0x58>
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d007      	beq.n	800da80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da70:	4b1a      	ldr	r3, [pc, #104]	; (800dadc <prvAddCurrentTaskToDelayedList+0xb4>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	3304      	adds	r3, #4
 800da76:	4619      	mov	r1, r3
 800da78:	481a      	ldr	r0, [pc, #104]	; (800dae4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800da7a:	f7fd fefc 	bl	800b876 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800da7e:	e026      	b.n	800dace <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800da80:	68fa      	ldr	r2, [r7, #12]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	4413      	add	r3, r2
 800da86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800da88:	4b14      	ldr	r3, [pc, #80]	; (800dadc <prvAddCurrentTaskToDelayedList+0xb4>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	68ba      	ldr	r2, [r7, #8]
 800da8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800da90:	68ba      	ldr	r2, [r7, #8]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	429a      	cmp	r2, r3
 800da96:	d209      	bcs.n	800daac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da98:	4b13      	ldr	r3, [pc, #76]	; (800dae8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800da9a:	681a      	ldr	r2, [r3, #0]
 800da9c:	4b0f      	ldr	r3, [pc, #60]	; (800dadc <prvAddCurrentTaskToDelayedList+0xb4>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	3304      	adds	r3, #4
 800daa2:	4619      	mov	r1, r3
 800daa4:	4610      	mov	r0, r2
 800daa6:	f7fd ff0a 	bl	800b8be <vListInsert>
}
 800daaa:	e010      	b.n	800dace <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800daac:	4b0f      	ldr	r3, [pc, #60]	; (800daec <prvAddCurrentTaskToDelayedList+0xc4>)
 800daae:	681a      	ldr	r2, [r3, #0]
 800dab0:	4b0a      	ldr	r3, [pc, #40]	; (800dadc <prvAddCurrentTaskToDelayedList+0xb4>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	3304      	adds	r3, #4
 800dab6:	4619      	mov	r1, r3
 800dab8:	4610      	mov	r0, r2
 800daba:	f7fd ff00 	bl	800b8be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dabe:	4b0c      	ldr	r3, [pc, #48]	; (800daf0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	68ba      	ldr	r2, [r7, #8]
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d202      	bcs.n	800dace <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dac8:	4a09      	ldr	r2, [pc, #36]	; (800daf0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	6013      	str	r3, [r2, #0]
}
 800dace:	bf00      	nop
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	24002264 	.word	0x24002264
 800dadc:	24002160 	.word	0x24002160
 800dae0:	24002268 	.word	0x24002268
 800dae4:	2400224c 	.word	0x2400224c
 800dae8:	2400221c 	.word	0x2400221c
 800daec:	24002218 	.word	0x24002218
 800daf0:	24002280 	.word	0x24002280

0800daf4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b08a      	sub	sp, #40	; 0x28
 800daf8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dafa:	2300      	movs	r3, #0
 800dafc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dafe:	f000 fae7 	bl	800e0d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800db02:	4b1c      	ldr	r3, [pc, #112]	; (800db74 <xTimerCreateTimerTask+0x80>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d021      	beq.n	800db4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800db0a:	2300      	movs	r3, #0
 800db0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800db0e:	2300      	movs	r3, #0
 800db10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800db12:	1d3a      	adds	r2, r7, #4
 800db14:	f107 0108 	add.w	r1, r7, #8
 800db18:	f107 030c 	add.w	r3, r7, #12
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7f2 fdd1 	bl	80006c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800db22:	6879      	ldr	r1, [r7, #4]
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	68fa      	ldr	r2, [r7, #12]
 800db28:	9202      	str	r2, [sp, #8]
 800db2a:	9301      	str	r3, [sp, #4]
 800db2c:	2302      	movs	r3, #2
 800db2e:	9300      	str	r3, [sp, #0]
 800db30:	2300      	movs	r3, #0
 800db32:	460a      	mov	r2, r1
 800db34:	4910      	ldr	r1, [pc, #64]	; (800db78 <xTimerCreateTimerTask+0x84>)
 800db36:	4811      	ldr	r0, [pc, #68]	; (800db7c <xTimerCreateTimerTask+0x88>)
 800db38:	f7fe ff0e 	bl	800c958 <xTaskCreateStatic>
 800db3c:	4602      	mov	r2, r0
 800db3e:	4b10      	ldr	r3, [pc, #64]	; (800db80 <xTimerCreateTimerTask+0x8c>)
 800db40:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800db42:	4b0f      	ldr	r3, [pc, #60]	; (800db80 <xTimerCreateTimerTask+0x8c>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d001      	beq.n	800db4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800db4a:	2301      	movs	r3, #1
 800db4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800db4e:	697b      	ldr	r3, [r7, #20]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d109      	bne.n	800db68 <xTimerCreateTimerTask+0x74>
 800db54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db58:	f383 8811 	msr	BASEPRI, r3
 800db5c:	f3bf 8f6f 	isb	sy
 800db60:	f3bf 8f4f 	dsb	sy
 800db64:	613b      	str	r3, [r7, #16]
 800db66:	e7fe      	b.n	800db66 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800db68:	697b      	ldr	r3, [r7, #20]
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3718      	adds	r7, #24
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
 800db72:	bf00      	nop
 800db74:	240022bc 	.word	0x240022bc
 800db78:	08018e4c 	.word	0x08018e4c
 800db7c:	0800dcb5 	.word	0x0800dcb5
 800db80:	240022c0 	.word	0x240022c0

0800db84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b08a      	sub	sp, #40	; 0x28
 800db88:	af00      	add	r7, sp, #0
 800db8a:	60f8      	str	r0, [r7, #12]
 800db8c:	60b9      	str	r1, [r7, #8]
 800db8e:	607a      	str	r2, [r7, #4]
 800db90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800db92:	2300      	movs	r3, #0
 800db94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d109      	bne.n	800dbb0 <xTimerGenericCommand+0x2c>
 800db9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba0:	f383 8811 	msr	BASEPRI, r3
 800dba4:	f3bf 8f6f 	isb	sy
 800dba8:	f3bf 8f4f 	dsb	sy
 800dbac:	623b      	str	r3, [r7, #32]
 800dbae:	e7fe      	b.n	800dbae <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dbb0:	4b19      	ldr	r3, [pc, #100]	; (800dc18 <xTimerGenericCommand+0x94>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d02a      	beq.n	800dc0e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	2b05      	cmp	r3, #5
 800dbc8:	dc18      	bgt.n	800dbfc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dbca:	f7ff fd5f 	bl	800d68c <xTaskGetSchedulerState>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b02      	cmp	r3, #2
 800dbd2:	d109      	bne.n	800dbe8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dbd4:	4b10      	ldr	r3, [pc, #64]	; (800dc18 <xTimerGenericCommand+0x94>)
 800dbd6:	6818      	ldr	r0, [r3, #0]
 800dbd8:	f107 0114 	add.w	r1, r7, #20
 800dbdc:	2300      	movs	r3, #0
 800dbde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbe0:	f7fe f8bc 	bl	800bd5c <xQueueGenericSend>
 800dbe4:	6278      	str	r0, [r7, #36]	; 0x24
 800dbe6:	e012      	b.n	800dc0e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dbe8:	4b0b      	ldr	r3, [pc, #44]	; (800dc18 <xTimerGenericCommand+0x94>)
 800dbea:	6818      	ldr	r0, [r3, #0]
 800dbec:	f107 0114 	add.w	r1, r7, #20
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	f7fe f8b2 	bl	800bd5c <xQueueGenericSend>
 800dbf8:	6278      	str	r0, [r7, #36]	; 0x24
 800dbfa:	e008      	b.n	800dc0e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dbfc:	4b06      	ldr	r3, [pc, #24]	; (800dc18 <xTimerGenericCommand+0x94>)
 800dbfe:	6818      	ldr	r0, [r3, #0]
 800dc00:	f107 0114 	add.w	r1, r7, #20
 800dc04:	2300      	movs	r3, #0
 800dc06:	683a      	ldr	r2, [r7, #0]
 800dc08:	f7fe f9a2 	bl	800bf50 <xQueueGenericSendFromISR>
 800dc0c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3728      	adds	r7, #40	; 0x28
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	240022bc 	.word	0x240022bc

0800dc1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b088      	sub	sp, #32
 800dc20:	af02      	add	r7, sp, #8
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc26:	4b22      	ldr	r3, [pc, #136]	; (800dcb0 <prvProcessExpiredTimer+0x94>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	68db      	ldr	r3, [r3, #12]
 800dc2c:	68db      	ldr	r3, [r3, #12]
 800dc2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	3304      	adds	r3, #4
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7fd fe7b 	bl	800b930 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dc40:	f003 0304 	and.w	r3, r3, #4
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d021      	beq.n	800dc8c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	699a      	ldr	r2, [r3, #24]
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	18d1      	adds	r1, r2, r3
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	683a      	ldr	r2, [r7, #0]
 800dc54:	6978      	ldr	r0, [r7, #20]
 800dc56:	f000 f8d1 	bl	800ddfc <prvInsertTimerInActiveList>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d01e      	beq.n	800dc9e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dc60:	2300      	movs	r3, #0
 800dc62:	9300      	str	r3, [sp, #0]
 800dc64:	2300      	movs	r3, #0
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	2100      	movs	r1, #0
 800dc6a:	6978      	ldr	r0, [r7, #20]
 800dc6c:	f7ff ff8a 	bl	800db84 <xTimerGenericCommand>
 800dc70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d112      	bne.n	800dc9e <prvProcessExpiredTimer+0x82>
 800dc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc7c:	f383 8811 	msr	BASEPRI, r3
 800dc80:	f3bf 8f6f 	isb	sy
 800dc84:	f3bf 8f4f 	dsb	sy
 800dc88:	60fb      	str	r3, [r7, #12]
 800dc8a:	e7fe      	b.n	800dc8a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dc92:	f023 0301 	bic.w	r3, r3, #1
 800dc96:	b2da      	uxtb	r2, r3
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	6a1b      	ldr	r3, [r3, #32]
 800dca2:	6978      	ldr	r0, [r7, #20]
 800dca4:	4798      	blx	r3
}
 800dca6:	bf00      	nop
 800dca8:	3718      	adds	r7, #24
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	240022b4 	.word	0x240022b4

0800dcb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dcbc:	f107 0308 	add.w	r3, r7, #8
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f000 f857 	bl	800dd74 <prvGetNextExpireTime>
 800dcc6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	4619      	mov	r1, r3
 800dccc:	68f8      	ldr	r0, [r7, #12]
 800dcce:	f000 f803 	bl	800dcd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dcd2:	f000 f8d5 	bl	800de80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dcd6:	e7f1      	b.n	800dcbc <prvTimerTask+0x8>

0800dcd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dce2:	f7ff f8ef 	bl	800cec4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dce6:	f107 0308 	add.w	r3, r7, #8
 800dcea:	4618      	mov	r0, r3
 800dcec:	f000 f866 	bl	800ddbc <prvSampleTimeNow>
 800dcf0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d130      	bne.n	800dd5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d10a      	bne.n	800dd14 <prvProcessTimerOrBlockTask+0x3c>
 800dcfe:	687a      	ldr	r2, [r7, #4]
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d806      	bhi.n	800dd14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dd06:	f7ff f8eb 	bl	800cee0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dd0a:	68f9      	ldr	r1, [r7, #12]
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f7ff ff85 	bl	800dc1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dd12:	e024      	b.n	800dd5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d008      	beq.n	800dd2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dd1a:	4b13      	ldr	r3, [pc, #76]	; (800dd68 <prvProcessTimerOrBlockTask+0x90>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d101      	bne.n	800dd28 <prvProcessTimerOrBlockTask+0x50>
 800dd24:	2301      	movs	r3, #1
 800dd26:	e000      	b.n	800dd2a <prvProcessTimerOrBlockTask+0x52>
 800dd28:	2300      	movs	r3, #0
 800dd2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dd2c:	4b0f      	ldr	r3, [pc, #60]	; (800dd6c <prvProcessTimerOrBlockTask+0x94>)
 800dd2e:	6818      	ldr	r0, [r3, #0]
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	1ad3      	subs	r3, r2, r3
 800dd36:	683a      	ldr	r2, [r7, #0]
 800dd38:	4619      	mov	r1, r3
 800dd3a:	f7fe fdd9 	bl	800c8f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dd3e:	f7ff f8cf 	bl	800cee0 <xTaskResumeAll>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d10a      	bne.n	800dd5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dd48:	4b09      	ldr	r3, [pc, #36]	; (800dd70 <prvProcessTimerOrBlockTask+0x98>)
 800dd4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd4e:	601a      	str	r2, [r3, #0]
 800dd50:	f3bf 8f4f 	dsb	sy
 800dd54:	f3bf 8f6f 	isb	sy
}
 800dd58:	e001      	b.n	800dd5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dd5a:	f7ff f8c1 	bl	800cee0 <xTaskResumeAll>
}
 800dd5e:	bf00      	nop
 800dd60:	3710      	adds	r7, #16
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	240022b8 	.word	0x240022b8
 800dd6c:	240022bc 	.word	0x240022bc
 800dd70:	e000ed04 	.word	0xe000ed04

0800dd74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dd74:	b480      	push	{r7}
 800dd76:	b085      	sub	sp, #20
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dd7c:	4b0e      	ldr	r3, [pc, #56]	; (800ddb8 <prvGetNextExpireTime+0x44>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d101      	bne.n	800dd8a <prvGetNextExpireTime+0x16>
 800dd86:	2201      	movs	r2, #1
 800dd88:	e000      	b.n	800dd8c <prvGetNextExpireTime+0x18>
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d105      	bne.n	800dda4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd98:	4b07      	ldr	r3, [pc, #28]	; (800ddb8 <prvGetNextExpireTime+0x44>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	68db      	ldr	r3, [r3, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	60fb      	str	r3, [r7, #12]
 800dda2:	e001      	b.n	800dda8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dda4:	2300      	movs	r3, #0
 800dda6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dda8:	68fb      	ldr	r3, [r7, #12]
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3714      	adds	r7, #20
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb4:	4770      	bx	lr
 800ddb6:	bf00      	nop
 800ddb8:	240022b4 	.word	0x240022b4

0800ddbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b084      	sub	sp, #16
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ddc4:	f7ff f928 	bl	800d018 <xTaskGetTickCount>
 800ddc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ddca:	4b0b      	ldr	r3, [pc, #44]	; (800ddf8 <prvSampleTimeNow+0x3c>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	68fa      	ldr	r2, [r7, #12]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d205      	bcs.n	800dde0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ddd4:	f000 f918 	bl	800e008 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2201      	movs	r2, #1
 800dddc:	601a      	str	r2, [r3, #0]
 800ddde:	e002      	b.n	800dde6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2200      	movs	r2, #0
 800dde4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dde6:	4a04      	ldr	r2, [pc, #16]	; (800ddf8 <prvSampleTimeNow+0x3c>)
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ddec:	68fb      	ldr	r3, [r7, #12]
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3710      	adds	r7, #16
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}
 800ddf6:	bf00      	nop
 800ddf8:	240022c4 	.word	0x240022c4

0800ddfc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b086      	sub	sp, #24
 800de00:	af00      	add	r7, sp, #0
 800de02:	60f8      	str	r0, [r7, #12]
 800de04:	60b9      	str	r1, [r7, #8]
 800de06:	607a      	str	r2, [r7, #4]
 800de08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800de0a:	2300      	movs	r3, #0
 800de0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	68ba      	ldr	r2, [r7, #8]
 800de12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	68fa      	ldr	r2, [r7, #12]
 800de18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800de1a:	68ba      	ldr	r2, [r7, #8]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	429a      	cmp	r2, r3
 800de20:	d812      	bhi.n	800de48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de22:	687a      	ldr	r2, [r7, #4]
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	1ad2      	subs	r2, r2, r3
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	699b      	ldr	r3, [r3, #24]
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d302      	bcc.n	800de36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800de30:	2301      	movs	r3, #1
 800de32:	617b      	str	r3, [r7, #20]
 800de34:	e01b      	b.n	800de6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800de36:	4b10      	ldr	r3, [pc, #64]	; (800de78 <prvInsertTimerInActiveList+0x7c>)
 800de38:	681a      	ldr	r2, [r3, #0]
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	3304      	adds	r3, #4
 800de3e:	4619      	mov	r1, r3
 800de40:	4610      	mov	r0, r2
 800de42:	f7fd fd3c 	bl	800b8be <vListInsert>
 800de46:	e012      	b.n	800de6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800de48:	687a      	ldr	r2, [r7, #4]
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d206      	bcs.n	800de5e <prvInsertTimerInActiveList+0x62>
 800de50:	68ba      	ldr	r2, [r7, #8]
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	429a      	cmp	r2, r3
 800de56:	d302      	bcc.n	800de5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800de58:	2301      	movs	r3, #1
 800de5a:	617b      	str	r3, [r7, #20]
 800de5c:	e007      	b.n	800de6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de5e:	4b07      	ldr	r3, [pc, #28]	; (800de7c <prvInsertTimerInActiveList+0x80>)
 800de60:	681a      	ldr	r2, [r3, #0]
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	3304      	adds	r3, #4
 800de66:	4619      	mov	r1, r3
 800de68:	4610      	mov	r0, r2
 800de6a:	f7fd fd28 	bl	800b8be <vListInsert>
		}
	}

	return xProcessTimerNow;
 800de6e:	697b      	ldr	r3, [r7, #20]
}
 800de70:	4618      	mov	r0, r3
 800de72:	3718      	adds	r7, #24
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	240022b8 	.word	0x240022b8
 800de7c:	240022b4 	.word	0x240022b4

0800de80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b08c      	sub	sp, #48	; 0x30
 800de84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800de86:	e0ac      	b.n	800dfe2 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	f2c0 80a8 	blt.w	800dfe0 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800de94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de96:	695b      	ldr	r3, [r3, #20]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d004      	beq.n	800dea6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9e:	3304      	adds	r3, #4
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7fd fd45 	bl	800b930 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dea6:	1d3b      	adds	r3, r7, #4
 800dea8:	4618      	mov	r0, r3
 800deaa:	f7ff ff87 	bl	800ddbc <prvSampleTimeNow>
 800deae:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	2b09      	cmp	r3, #9
 800deb4:	f200 8095 	bhi.w	800dfe2 <prvProcessReceivedCommands+0x162>
 800deb8:	a201      	add	r2, pc, #4	; (adr r2, 800dec0 <prvProcessReceivedCommands+0x40>)
 800deba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800debe:	bf00      	nop
 800dec0:	0800dee9 	.word	0x0800dee9
 800dec4:	0800dee9 	.word	0x0800dee9
 800dec8:	0800dee9 	.word	0x0800dee9
 800decc:	0800df5b 	.word	0x0800df5b
 800ded0:	0800df6f 	.word	0x0800df6f
 800ded4:	0800dfb7 	.word	0x0800dfb7
 800ded8:	0800dee9 	.word	0x0800dee9
 800dedc:	0800dee9 	.word	0x0800dee9
 800dee0:	0800df5b 	.word	0x0800df5b
 800dee4:	0800df6f 	.word	0x0800df6f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800deee:	f043 0301 	orr.w	r3, r3, #1
 800def2:	b2da      	uxtb	r2, r3
 800def4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800defa:	68fa      	ldr	r2, [r7, #12]
 800defc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defe:	699b      	ldr	r3, [r3, #24]
 800df00:	18d1      	adds	r1, r2, r3
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	6a3a      	ldr	r2, [r7, #32]
 800df06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df08:	f7ff ff78 	bl	800ddfc <prvInsertTimerInActiveList>
 800df0c:	4603      	mov	r3, r0
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d067      	beq.n	800dfe2 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df14:	6a1b      	ldr	r3, [r3, #32]
 800df16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df18:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800df20:	f003 0304 	and.w	r3, r3, #4
 800df24:	2b00      	cmp	r3, #0
 800df26:	d05c      	beq.n	800dfe2 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800df28:	68fa      	ldr	r2, [r7, #12]
 800df2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2c:	699b      	ldr	r3, [r3, #24]
 800df2e:	441a      	add	r2, r3
 800df30:	2300      	movs	r3, #0
 800df32:	9300      	str	r3, [sp, #0]
 800df34:	2300      	movs	r3, #0
 800df36:	2100      	movs	r1, #0
 800df38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df3a:	f7ff fe23 	bl	800db84 <xTimerGenericCommand>
 800df3e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d14d      	bne.n	800dfe2 <prvProcessReceivedCommands+0x162>
 800df46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df4a:	f383 8811 	msr	BASEPRI, r3
 800df4e:	f3bf 8f6f 	isb	sy
 800df52:	f3bf 8f4f 	dsb	sy
 800df56:	61bb      	str	r3, [r7, #24]
 800df58:	e7fe      	b.n	800df58 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800df60:	f023 0301 	bic.w	r3, r3, #1
 800df64:	b2da      	uxtb	r2, r3
 800df66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800df6c:	e039      	b.n	800dfe2 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800df6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800df74:	f043 0301 	orr.w	r3, r3, #1
 800df78:	b2da      	uxtb	r2, r3
 800df7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800df80:	68fa      	ldr	r2, [r7, #12]
 800df82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df84:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800df86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df88:	699b      	ldr	r3, [r3, #24]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d109      	bne.n	800dfa2 <prvProcessReceivedCommands+0x122>
 800df8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df92:	f383 8811 	msr	BASEPRI, r3
 800df96:	f3bf 8f6f 	isb	sy
 800df9a:	f3bf 8f4f 	dsb	sy
 800df9e:	617b      	str	r3, [r7, #20]
 800dfa0:	e7fe      	b.n	800dfa0 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa4:	699a      	ldr	r2, [r3, #24]
 800dfa6:	6a3b      	ldr	r3, [r7, #32]
 800dfa8:	18d1      	adds	r1, r2, r3
 800dfaa:	6a3b      	ldr	r3, [r7, #32]
 800dfac:	6a3a      	ldr	r2, [r7, #32]
 800dfae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfb0:	f7ff ff24 	bl	800ddfc <prvInsertTimerInActiveList>
					break;
 800dfb4:	e015      	b.n	800dfe2 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dfb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dfbc:	f003 0302 	and.w	r3, r3, #2
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d103      	bne.n	800dfcc <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 800dfc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfc6:	f000 fbc5 	bl	800e754 <vPortFree>
 800dfca:	e00a      	b.n	800dfe2 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dfd2:	f023 0301 	bic.w	r3, r3, #1
 800dfd6:	b2da      	uxtb	r2, r3
 800dfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dfde:	e000      	b.n	800dfe2 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dfe0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dfe2:	4b08      	ldr	r3, [pc, #32]	; (800e004 <prvProcessReceivedCommands+0x184>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f107 0108 	add.w	r1, r7, #8
 800dfea:	2200      	movs	r2, #0
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7fe f8cd 	bl	800c18c <xQueueReceive>
 800dff2:	4603      	mov	r3, r0
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	f47f af47 	bne.w	800de88 <prvProcessReceivedCommands+0x8>
	}
}
 800dffa:	bf00      	nop
 800dffc:	3728      	adds	r7, #40	; 0x28
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
 800e002:	bf00      	nop
 800e004:	240022bc 	.word	0x240022bc

0800e008 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b088      	sub	sp, #32
 800e00c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e00e:	e047      	b.n	800e0a0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e010:	4b2d      	ldr	r3, [pc, #180]	; (800e0c8 <prvSwitchTimerLists+0xc0>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	68db      	ldr	r3, [r3, #12]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e01a:	4b2b      	ldr	r3, [pc, #172]	; (800e0c8 <prvSwitchTimerLists+0xc0>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	68db      	ldr	r3, [r3, #12]
 800e020:	68db      	ldr	r3, [r3, #12]
 800e022:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	3304      	adds	r3, #4
 800e028:	4618      	mov	r0, r3
 800e02a:	f7fd fc81 	bl	800b930 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	6a1b      	ldr	r3, [r3, #32]
 800e032:	68f8      	ldr	r0, [r7, #12]
 800e034:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e03c:	f003 0304 	and.w	r3, r3, #4
 800e040:	2b00      	cmp	r3, #0
 800e042:	d02d      	beq.n	800e0a0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	699b      	ldr	r3, [r3, #24]
 800e048:	693a      	ldr	r2, [r7, #16]
 800e04a:	4413      	add	r3, r2
 800e04c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e04e:	68ba      	ldr	r2, [r7, #8]
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	429a      	cmp	r2, r3
 800e054:	d90e      	bls.n	800e074 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	68ba      	ldr	r2, [r7, #8]
 800e05a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	68fa      	ldr	r2, [r7, #12]
 800e060:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e062:	4b19      	ldr	r3, [pc, #100]	; (800e0c8 <prvSwitchTimerLists+0xc0>)
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	3304      	adds	r3, #4
 800e06a:	4619      	mov	r1, r3
 800e06c:	4610      	mov	r0, r2
 800e06e:	f7fd fc26 	bl	800b8be <vListInsert>
 800e072:	e015      	b.n	800e0a0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e074:	2300      	movs	r3, #0
 800e076:	9300      	str	r3, [sp, #0]
 800e078:	2300      	movs	r3, #0
 800e07a:	693a      	ldr	r2, [r7, #16]
 800e07c:	2100      	movs	r1, #0
 800e07e:	68f8      	ldr	r0, [r7, #12]
 800e080:	f7ff fd80 	bl	800db84 <xTimerGenericCommand>
 800e084:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d109      	bne.n	800e0a0 <prvSwitchTimerLists+0x98>
 800e08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e090:	f383 8811 	msr	BASEPRI, r3
 800e094:	f3bf 8f6f 	isb	sy
 800e098:	f3bf 8f4f 	dsb	sy
 800e09c:	603b      	str	r3, [r7, #0]
 800e09e:	e7fe      	b.n	800e09e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e0a0:	4b09      	ldr	r3, [pc, #36]	; (800e0c8 <prvSwitchTimerLists+0xc0>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d1b2      	bne.n	800e010 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e0aa:	4b07      	ldr	r3, [pc, #28]	; (800e0c8 <prvSwitchTimerLists+0xc0>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e0b0:	4b06      	ldr	r3, [pc, #24]	; (800e0cc <prvSwitchTimerLists+0xc4>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	4a04      	ldr	r2, [pc, #16]	; (800e0c8 <prvSwitchTimerLists+0xc0>)
 800e0b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e0b8:	4a04      	ldr	r2, [pc, #16]	; (800e0cc <prvSwitchTimerLists+0xc4>)
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	6013      	str	r3, [r2, #0]
}
 800e0be:	bf00      	nop
 800e0c0:	3718      	adds	r7, #24
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
 800e0c6:	bf00      	nop
 800e0c8:	240022b4 	.word	0x240022b4
 800e0cc:	240022b8 	.word	0x240022b8

0800e0d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b082      	sub	sp, #8
 800e0d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e0d6:	f000 f961 	bl	800e39c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e0da:	4b15      	ldr	r3, [pc, #84]	; (800e130 <prvCheckForValidListAndQueue+0x60>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d120      	bne.n	800e124 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e0e2:	4814      	ldr	r0, [pc, #80]	; (800e134 <prvCheckForValidListAndQueue+0x64>)
 800e0e4:	f7fd fb9a 	bl	800b81c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e0e8:	4813      	ldr	r0, [pc, #76]	; (800e138 <prvCheckForValidListAndQueue+0x68>)
 800e0ea:	f7fd fb97 	bl	800b81c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e0ee:	4b13      	ldr	r3, [pc, #76]	; (800e13c <prvCheckForValidListAndQueue+0x6c>)
 800e0f0:	4a10      	ldr	r2, [pc, #64]	; (800e134 <prvCheckForValidListAndQueue+0x64>)
 800e0f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e0f4:	4b12      	ldr	r3, [pc, #72]	; (800e140 <prvCheckForValidListAndQueue+0x70>)
 800e0f6:	4a10      	ldr	r2, [pc, #64]	; (800e138 <prvCheckForValidListAndQueue+0x68>)
 800e0f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	9300      	str	r3, [sp, #0]
 800e0fe:	4b11      	ldr	r3, [pc, #68]	; (800e144 <prvCheckForValidListAndQueue+0x74>)
 800e100:	4a11      	ldr	r2, [pc, #68]	; (800e148 <prvCheckForValidListAndQueue+0x78>)
 800e102:	210c      	movs	r1, #12
 800e104:	200a      	movs	r0, #10
 800e106:	f7fd fca5 	bl	800ba54 <xQueueGenericCreateStatic>
 800e10a:	4602      	mov	r2, r0
 800e10c:	4b08      	ldr	r3, [pc, #32]	; (800e130 <prvCheckForValidListAndQueue+0x60>)
 800e10e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e110:	4b07      	ldr	r3, [pc, #28]	; (800e130 <prvCheckForValidListAndQueue+0x60>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d005      	beq.n	800e124 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e118:	4b05      	ldr	r3, [pc, #20]	; (800e130 <prvCheckForValidListAndQueue+0x60>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	490b      	ldr	r1, [pc, #44]	; (800e14c <prvCheckForValidListAndQueue+0x7c>)
 800e11e:	4618      	mov	r0, r3
 800e120:	f7fe fbbe 	bl	800c8a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e124:	f000 f968 	bl	800e3f8 <vPortExitCritical>
}
 800e128:	bf00      	nop
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}
 800e12e:	bf00      	nop
 800e130:	240022bc 	.word	0x240022bc
 800e134:	2400228c 	.word	0x2400228c
 800e138:	240022a0 	.word	0x240022a0
 800e13c:	240022b4 	.word	0x240022b4
 800e140:	240022b8 	.word	0x240022b8
 800e144:	24002340 	.word	0x24002340
 800e148:	240022c8 	.word	0x240022c8
 800e14c:	08018e54 	.word	0x08018e54

0800e150 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e150:	b480      	push	{r7}
 800e152:	b085      	sub	sp, #20
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	3b04      	subs	r3, #4
 800e160:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	3b04      	subs	r3, #4
 800e16e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	f023 0201 	bic.w	r2, r3, #1
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	3b04      	subs	r3, #4
 800e17e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e180:	4a0c      	ldr	r2, [pc, #48]	; (800e1b4 <pxPortInitialiseStack+0x64>)
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	3b14      	subs	r3, #20
 800e18a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e18c:	687a      	ldr	r2, [r7, #4]
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	3b04      	subs	r3, #4
 800e196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	f06f 0202 	mvn.w	r2, #2
 800e19e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	3b20      	subs	r3, #32
 800e1a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3714      	adds	r7, #20
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b2:	4770      	bx	lr
 800e1b4:	0800e1b9 	.word	0x0800e1b9

0800e1b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b085      	sub	sp, #20
 800e1bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e1c2:	4b11      	ldr	r3, [pc, #68]	; (800e208 <prvTaskExitError+0x50>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ca:	d009      	beq.n	800e1e0 <prvTaskExitError+0x28>
 800e1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d0:	f383 8811 	msr	BASEPRI, r3
 800e1d4:	f3bf 8f6f 	isb	sy
 800e1d8:	f3bf 8f4f 	dsb	sy
 800e1dc:	60fb      	str	r3, [r7, #12]
 800e1de:	e7fe      	b.n	800e1de <prvTaskExitError+0x26>
 800e1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1e4:	f383 8811 	msr	BASEPRI, r3
 800e1e8:	f3bf 8f6f 	isb	sy
 800e1ec:	f3bf 8f4f 	dsb	sy
 800e1f0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e1f2:	bf00      	nop
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d0fc      	beq.n	800e1f4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e1fa:	bf00      	nop
 800e1fc:	3714      	adds	r7, #20
 800e1fe:	46bd      	mov	sp, r7
 800e200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e204:	4770      	bx	lr
 800e206:	bf00      	nop
 800e208:	24000024 	.word	0x24000024
 800e20c:	00000000 	.word	0x00000000

0800e210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e210:	4b07      	ldr	r3, [pc, #28]	; (800e230 <pxCurrentTCBConst2>)
 800e212:	6819      	ldr	r1, [r3, #0]
 800e214:	6808      	ldr	r0, [r1, #0]
 800e216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e21a:	f380 8809 	msr	PSP, r0
 800e21e:	f3bf 8f6f 	isb	sy
 800e222:	f04f 0000 	mov.w	r0, #0
 800e226:	f380 8811 	msr	BASEPRI, r0
 800e22a:	4770      	bx	lr
 800e22c:	f3af 8000 	nop.w

0800e230 <pxCurrentTCBConst2>:
 800e230:	24002160 	.word	0x24002160
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e234:	bf00      	nop
 800e236:	bf00      	nop

0800e238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e238:	4808      	ldr	r0, [pc, #32]	; (800e25c <prvPortStartFirstTask+0x24>)
 800e23a:	6800      	ldr	r0, [r0, #0]
 800e23c:	6800      	ldr	r0, [r0, #0]
 800e23e:	f380 8808 	msr	MSP, r0
 800e242:	f04f 0000 	mov.w	r0, #0
 800e246:	f380 8814 	msr	CONTROL, r0
 800e24a:	b662      	cpsie	i
 800e24c:	b661      	cpsie	f
 800e24e:	f3bf 8f4f 	dsb	sy
 800e252:	f3bf 8f6f 	isb	sy
 800e256:	df00      	svc	0
 800e258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e25a:	bf00      	nop
 800e25c:	e000ed08 	.word	0xe000ed08

0800e260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b086      	sub	sp, #24
 800e264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e266:	4b44      	ldr	r3, [pc, #272]	; (800e378 <xPortStartScheduler+0x118>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	4a44      	ldr	r2, [pc, #272]	; (800e37c <xPortStartScheduler+0x11c>)
 800e26c:	4293      	cmp	r3, r2
 800e26e:	d109      	bne.n	800e284 <xPortStartScheduler+0x24>
 800e270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e274:	f383 8811 	msr	BASEPRI, r3
 800e278:	f3bf 8f6f 	isb	sy
 800e27c:	f3bf 8f4f 	dsb	sy
 800e280:	613b      	str	r3, [r7, #16]
 800e282:	e7fe      	b.n	800e282 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e284:	4b3c      	ldr	r3, [pc, #240]	; (800e378 <xPortStartScheduler+0x118>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	4a3d      	ldr	r2, [pc, #244]	; (800e380 <xPortStartScheduler+0x120>)
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d109      	bne.n	800e2a2 <xPortStartScheduler+0x42>
 800e28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e292:	f383 8811 	msr	BASEPRI, r3
 800e296:	f3bf 8f6f 	isb	sy
 800e29a:	f3bf 8f4f 	dsb	sy
 800e29e:	60fb      	str	r3, [r7, #12]
 800e2a0:	e7fe      	b.n	800e2a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e2a2:	4b38      	ldr	r3, [pc, #224]	; (800e384 <xPortStartScheduler+0x124>)
 800e2a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	781b      	ldrb	r3, [r3, #0]
 800e2aa:	b2db      	uxtb	r3, r3
 800e2ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	22ff      	movs	r2, #255	; 0xff
 800e2b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	b2db      	uxtb	r3, r3
 800e2ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e2bc:	78fb      	ldrb	r3, [r7, #3]
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e2c4:	b2da      	uxtb	r2, r3
 800e2c6:	4b30      	ldr	r3, [pc, #192]	; (800e388 <xPortStartScheduler+0x128>)
 800e2c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e2ca:	4b30      	ldr	r3, [pc, #192]	; (800e38c <xPortStartScheduler+0x12c>)
 800e2cc:	2207      	movs	r2, #7
 800e2ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e2d0:	e009      	b.n	800e2e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800e2d2:	4b2e      	ldr	r3, [pc, #184]	; (800e38c <xPortStartScheduler+0x12c>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	3b01      	subs	r3, #1
 800e2d8:	4a2c      	ldr	r2, [pc, #176]	; (800e38c <xPortStartScheduler+0x12c>)
 800e2da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e2dc:	78fb      	ldrb	r3, [r7, #3]
 800e2de:	b2db      	uxtb	r3, r3
 800e2e0:	005b      	lsls	r3, r3, #1
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e2e6:	78fb      	ldrb	r3, [r7, #3]
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2ee:	2b80      	cmp	r3, #128	; 0x80
 800e2f0:	d0ef      	beq.n	800e2d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e2f2:	4b26      	ldr	r3, [pc, #152]	; (800e38c <xPortStartScheduler+0x12c>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f1c3 0307 	rsb	r3, r3, #7
 800e2fa:	2b04      	cmp	r3, #4
 800e2fc:	d009      	beq.n	800e312 <xPortStartScheduler+0xb2>
 800e2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e302:	f383 8811 	msr	BASEPRI, r3
 800e306:	f3bf 8f6f 	isb	sy
 800e30a:	f3bf 8f4f 	dsb	sy
 800e30e:	60bb      	str	r3, [r7, #8]
 800e310:	e7fe      	b.n	800e310 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e312:	4b1e      	ldr	r3, [pc, #120]	; (800e38c <xPortStartScheduler+0x12c>)
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	021b      	lsls	r3, r3, #8
 800e318:	4a1c      	ldr	r2, [pc, #112]	; (800e38c <xPortStartScheduler+0x12c>)
 800e31a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e31c:	4b1b      	ldr	r3, [pc, #108]	; (800e38c <xPortStartScheduler+0x12c>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e324:	4a19      	ldr	r2, [pc, #100]	; (800e38c <xPortStartScheduler+0x12c>)
 800e326:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	b2da      	uxtb	r2, r3
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e330:	4b17      	ldr	r3, [pc, #92]	; (800e390 <xPortStartScheduler+0x130>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	4a16      	ldr	r2, [pc, #88]	; (800e390 <xPortStartScheduler+0x130>)
 800e336:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e33a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e33c:	4b14      	ldr	r3, [pc, #80]	; (800e390 <xPortStartScheduler+0x130>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a13      	ldr	r2, [pc, #76]	; (800e390 <xPortStartScheduler+0x130>)
 800e342:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e346:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e348:	f000 f8d6 	bl	800e4f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e34c:	4b11      	ldr	r3, [pc, #68]	; (800e394 <xPortStartScheduler+0x134>)
 800e34e:	2200      	movs	r2, #0
 800e350:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e352:	f000 f8f5 	bl	800e540 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e356:	4b10      	ldr	r3, [pc, #64]	; (800e398 <xPortStartScheduler+0x138>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	4a0f      	ldr	r2, [pc, #60]	; (800e398 <xPortStartScheduler+0x138>)
 800e35c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e360:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e362:	f7ff ff69 	bl	800e238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e366:	f7fe ff31 	bl	800d1cc <vTaskSwitchContext>
	prvTaskExitError();
 800e36a:	f7ff ff25 	bl	800e1b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e36e:	2300      	movs	r3, #0
}
 800e370:	4618      	mov	r0, r3
 800e372:	3718      	adds	r7, #24
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}
 800e378:	e000ed00 	.word	0xe000ed00
 800e37c:	410fc271 	.word	0x410fc271
 800e380:	410fc270 	.word	0x410fc270
 800e384:	e000e400 	.word	0xe000e400
 800e388:	24002388 	.word	0x24002388
 800e38c:	2400238c 	.word	0x2400238c
 800e390:	e000ed20 	.word	0xe000ed20
 800e394:	24000024 	.word	0x24000024
 800e398:	e000ef34 	.word	0xe000ef34

0800e39c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e39c:	b480      	push	{r7}
 800e39e:	b083      	sub	sp, #12
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a6:	f383 8811 	msr	BASEPRI, r3
 800e3aa:	f3bf 8f6f 	isb	sy
 800e3ae:	f3bf 8f4f 	dsb	sy
 800e3b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e3b4:	4b0e      	ldr	r3, [pc, #56]	; (800e3f0 <vPortEnterCritical+0x54>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	4a0d      	ldr	r2, [pc, #52]	; (800e3f0 <vPortEnterCritical+0x54>)
 800e3bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e3be:	4b0c      	ldr	r3, [pc, #48]	; (800e3f0 <vPortEnterCritical+0x54>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	2b01      	cmp	r3, #1
 800e3c4:	d10e      	bne.n	800e3e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e3c6:	4b0b      	ldr	r3, [pc, #44]	; (800e3f4 <vPortEnterCritical+0x58>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	b2db      	uxtb	r3, r3
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d009      	beq.n	800e3e4 <vPortEnterCritical+0x48>
 800e3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d4:	f383 8811 	msr	BASEPRI, r3
 800e3d8:	f3bf 8f6f 	isb	sy
 800e3dc:	f3bf 8f4f 	dsb	sy
 800e3e0:	603b      	str	r3, [r7, #0]
 800e3e2:	e7fe      	b.n	800e3e2 <vPortEnterCritical+0x46>
	}
}
 800e3e4:	bf00      	nop
 800e3e6:	370c      	adds	r7, #12
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr
 800e3f0:	24000024 	.word	0x24000024
 800e3f4:	e000ed04 	.word	0xe000ed04

0800e3f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b083      	sub	sp, #12
 800e3fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e3fe:	4b11      	ldr	r3, [pc, #68]	; (800e444 <vPortExitCritical+0x4c>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d109      	bne.n	800e41a <vPortExitCritical+0x22>
 800e406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e40a:	f383 8811 	msr	BASEPRI, r3
 800e40e:	f3bf 8f6f 	isb	sy
 800e412:	f3bf 8f4f 	dsb	sy
 800e416:	607b      	str	r3, [r7, #4]
 800e418:	e7fe      	b.n	800e418 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800e41a:	4b0a      	ldr	r3, [pc, #40]	; (800e444 <vPortExitCritical+0x4c>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	3b01      	subs	r3, #1
 800e420:	4a08      	ldr	r2, [pc, #32]	; (800e444 <vPortExitCritical+0x4c>)
 800e422:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e424:	4b07      	ldr	r3, [pc, #28]	; (800e444 <vPortExitCritical+0x4c>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d104      	bne.n	800e436 <vPortExitCritical+0x3e>
 800e42c:	2300      	movs	r3, #0
 800e42e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e436:	bf00      	nop
 800e438:	370c      	adds	r7, #12
 800e43a:	46bd      	mov	sp, r7
 800e43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e440:	4770      	bx	lr
 800e442:	bf00      	nop
 800e444:	24000024 	.word	0x24000024
	...

0800e450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e450:	f3ef 8009 	mrs	r0, PSP
 800e454:	f3bf 8f6f 	isb	sy
 800e458:	4b15      	ldr	r3, [pc, #84]	; (800e4b0 <pxCurrentTCBConst>)
 800e45a:	681a      	ldr	r2, [r3, #0]
 800e45c:	f01e 0f10 	tst.w	lr, #16
 800e460:	bf08      	it	eq
 800e462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e46a:	6010      	str	r0, [r2, #0]
 800e46c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e470:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e474:	f380 8811 	msr	BASEPRI, r0
 800e478:	f3bf 8f4f 	dsb	sy
 800e47c:	f3bf 8f6f 	isb	sy
 800e480:	f7fe fea4 	bl	800d1cc <vTaskSwitchContext>
 800e484:	f04f 0000 	mov.w	r0, #0
 800e488:	f380 8811 	msr	BASEPRI, r0
 800e48c:	bc09      	pop	{r0, r3}
 800e48e:	6819      	ldr	r1, [r3, #0]
 800e490:	6808      	ldr	r0, [r1, #0]
 800e492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e496:	f01e 0f10 	tst.w	lr, #16
 800e49a:	bf08      	it	eq
 800e49c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e4a0:	f380 8809 	msr	PSP, r0
 800e4a4:	f3bf 8f6f 	isb	sy
 800e4a8:	4770      	bx	lr
 800e4aa:	bf00      	nop
 800e4ac:	f3af 8000 	nop.w

0800e4b0 <pxCurrentTCBConst>:
 800e4b0:	24002160 	.word	0x24002160
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e4b4:	bf00      	nop
 800e4b6:	bf00      	nop

0800e4b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b082      	sub	sp, #8
 800e4bc:	af00      	add	r7, sp, #0
	__asm volatile
 800e4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c2:	f383 8811 	msr	BASEPRI, r3
 800e4c6:	f3bf 8f6f 	isb	sy
 800e4ca:	f3bf 8f4f 	dsb	sy
 800e4ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e4d0:	f7fe fdc4 	bl	800d05c <xTaskIncrementTick>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d003      	beq.n	800e4e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e4da:	4b06      	ldr	r3, [pc, #24]	; (800e4f4 <SysTick_Handler+0x3c>)
 800e4dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4e0:	601a      	str	r2, [r3, #0]
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e4ec:	bf00      	nop
 800e4ee:	3708      	adds	r7, #8
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	e000ed04 	.word	0xe000ed04

0800e4f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e4fc:	4b0b      	ldr	r3, [pc, #44]	; (800e52c <vPortSetupTimerInterrupt+0x34>)
 800e4fe:	2200      	movs	r2, #0
 800e500:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e502:	4b0b      	ldr	r3, [pc, #44]	; (800e530 <vPortSetupTimerInterrupt+0x38>)
 800e504:	2200      	movs	r2, #0
 800e506:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e508:	4b0a      	ldr	r3, [pc, #40]	; (800e534 <vPortSetupTimerInterrupt+0x3c>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4a0a      	ldr	r2, [pc, #40]	; (800e538 <vPortSetupTimerInterrupt+0x40>)
 800e50e:	fba2 2303 	umull	r2, r3, r2, r3
 800e512:	099b      	lsrs	r3, r3, #6
 800e514:	4a09      	ldr	r2, [pc, #36]	; (800e53c <vPortSetupTimerInterrupt+0x44>)
 800e516:	3b01      	subs	r3, #1
 800e518:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e51a:	4b04      	ldr	r3, [pc, #16]	; (800e52c <vPortSetupTimerInterrupt+0x34>)
 800e51c:	2207      	movs	r2, #7
 800e51e:	601a      	str	r2, [r3, #0]
}
 800e520:	bf00      	nop
 800e522:	46bd      	mov	sp, r7
 800e524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e528:	4770      	bx	lr
 800e52a:	bf00      	nop
 800e52c:	e000e010 	.word	0xe000e010
 800e530:	e000e018 	.word	0xe000e018
 800e534:	24000000 	.word	0x24000000
 800e538:	10624dd3 	.word	0x10624dd3
 800e53c:	e000e014 	.word	0xe000e014

0800e540 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e540:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e550 <vPortEnableVFP+0x10>
 800e544:	6801      	ldr	r1, [r0, #0]
 800e546:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e54a:	6001      	str	r1, [r0, #0]
 800e54c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e54e:	bf00      	nop
 800e550:	e000ed88 	.word	0xe000ed88

0800e554 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e554:	b480      	push	{r7}
 800e556:	b085      	sub	sp, #20
 800e558:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e55a:	f3ef 8305 	mrs	r3, IPSR
 800e55e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2b0f      	cmp	r3, #15
 800e564:	d913      	bls.n	800e58e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e566:	4a16      	ldr	r2, [pc, #88]	; (800e5c0 <vPortValidateInterruptPriority+0x6c>)
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	4413      	add	r3, r2
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e570:	4b14      	ldr	r3, [pc, #80]	; (800e5c4 <vPortValidateInterruptPriority+0x70>)
 800e572:	781b      	ldrb	r3, [r3, #0]
 800e574:	7afa      	ldrb	r2, [r7, #11]
 800e576:	429a      	cmp	r2, r3
 800e578:	d209      	bcs.n	800e58e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800e57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e57e:	f383 8811 	msr	BASEPRI, r3
 800e582:	f3bf 8f6f 	isb	sy
 800e586:	f3bf 8f4f 	dsb	sy
 800e58a:	607b      	str	r3, [r7, #4]
 800e58c:	e7fe      	b.n	800e58c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e58e:	4b0e      	ldr	r3, [pc, #56]	; (800e5c8 <vPortValidateInterruptPriority+0x74>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e596:	4b0d      	ldr	r3, [pc, #52]	; (800e5cc <vPortValidateInterruptPriority+0x78>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d909      	bls.n	800e5b2 <vPortValidateInterruptPriority+0x5e>
 800e59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a2:	f383 8811 	msr	BASEPRI, r3
 800e5a6:	f3bf 8f6f 	isb	sy
 800e5aa:	f3bf 8f4f 	dsb	sy
 800e5ae:	603b      	str	r3, [r7, #0]
 800e5b0:	e7fe      	b.n	800e5b0 <vPortValidateInterruptPriority+0x5c>
	}
 800e5b2:	bf00      	nop
 800e5b4:	3714      	adds	r7, #20
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5bc:	4770      	bx	lr
 800e5be:	bf00      	nop
 800e5c0:	e000e3f0 	.word	0xe000e3f0
 800e5c4:	24002388 	.word	0x24002388
 800e5c8:	e000ed0c 	.word	0xe000ed0c
 800e5cc:	2400238c 	.word	0x2400238c

0800e5d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b08a      	sub	sp, #40	; 0x28
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e5dc:	f7fe fc72 	bl	800cec4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e5e0:	4b57      	ldr	r3, [pc, #348]	; (800e740 <pvPortMalloc+0x170>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d101      	bne.n	800e5ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e5e8:	f000 f90c 	bl	800e804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e5ec:	4b55      	ldr	r3, [pc, #340]	; (800e744 <pvPortMalloc+0x174>)
 800e5ee:	681a      	ldr	r2, [r3, #0]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	4013      	ands	r3, r2
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	f040 808c 	bne.w	800e712 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d01c      	beq.n	800e63a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800e600:	2208      	movs	r2, #8
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	4413      	add	r3, r2
 800e606:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f003 0307 	and.w	r3, r3, #7
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d013      	beq.n	800e63a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f023 0307 	bic.w	r3, r3, #7
 800e618:	3308      	adds	r3, #8
 800e61a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f003 0307 	and.w	r3, r3, #7
 800e622:	2b00      	cmp	r3, #0
 800e624:	d009      	beq.n	800e63a <pvPortMalloc+0x6a>
 800e626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e62a:	f383 8811 	msr	BASEPRI, r3
 800e62e:	f3bf 8f6f 	isb	sy
 800e632:	f3bf 8f4f 	dsb	sy
 800e636:	617b      	str	r3, [r7, #20]
 800e638:	e7fe      	b.n	800e638 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d068      	beq.n	800e712 <pvPortMalloc+0x142>
 800e640:	4b41      	ldr	r3, [pc, #260]	; (800e748 <pvPortMalloc+0x178>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	687a      	ldr	r2, [r7, #4]
 800e646:	429a      	cmp	r2, r3
 800e648:	d863      	bhi.n	800e712 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e64a:	4b40      	ldr	r3, [pc, #256]	; (800e74c <pvPortMalloc+0x17c>)
 800e64c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e64e:	4b3f      	ldr	r3, [pc, #252]	; (800e74c <pvPortMalloc+0x17c>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e654:	e004      	b.n	800e660 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800e656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e658:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	687a      	ldr	r2, [r7, #4]
 800e666:	429a      	cmp	r2, r3
 800e668:	d903      	bls.n	800e672 <pvPortMalloc+0xa2>
 800e66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d1f1      	bne.n	800e656 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e672:	4b33      	ldr	r3, [pc, #204]	; (800e740 <pvPortMalloc+0x170>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e678:	429a      	cmp	r2, r3
 800e67a:	d04a      	beq.n	800e712 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e67c:	6a3b      	ldr	r3, [r7, #32]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	2208      	movs	r2, #8
 800e682:	4413      	add	r3, r2
 800e684:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e688:	681a      	ldr	r2, [r3, #0]
 800e68a:	6a3b      	ldr	r3, [r7, #32]
 800e68c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e690:	685a      	ldr	r2, [r3, #4]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	1ad2      	subs	r2, r2, r3
 800e696:	2308      	movs	r3, #8
 800e698:	005b      	lsls	r3, r3, #1
 800e69a:	429a      	cmp	r2, r3
 800e69c:	d91e      	bls.n	800e6dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e69e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	4413      	add	r3, r2
 800e6a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e6a6:	69bb      	ldr	r3, [r7, #24]
 800e6a8:	f003 0307 	and.w	r3, r3, #7
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d009      	beq.n	800e6c4 <pvPortMalloc+0xf4>
 800e6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b4:	f383 8811 	msr	BASEPRI, r3
 800e6b8:	f3bf 8f6f 	isb	sy
 800e6bc:	f3bf 8f4f 	dsb	sy
 800e6c0:	613b      	str	r3, [r7, #16]
 800e6c2:	e7fe      	b.n	800e6c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c6:	685a      	ldr	r2, [r3, #4]
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	1ad2      	subs	r2, r2, r3
 800e6cc:	69bb      	ldr	r3, [r7, #24]
 800e6ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d2:	687a      	ldr	r2, [r7, #4]
 800e6d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e6d6:	69b8      	ldr	r0, [r7, #24]
 800e6d8:	f000 f8f6 	bl	800e8c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e6dc:	4b1a      	ldr	r3, [pc, #104]	; (800e748 <pvPortMalloc+0x178>)
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	1ad3      	subs	r3, r2, r3
 800e6e6:	4a18      	ldr	r2, [pc, #96]	; (800e748 <pvPortMalloc+0x178>)
 800e6e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e6ea:	4b17      	ldr	r3, [pc, #92]	; (800e748 <pvPortMalloc+0x178>)
 800e6ec:	681a      	ldr	r2, [r3, #0]
 800e6ee:	4b18      	ldr	r3, [pc, #96]	; (800e750 <pvPortMalloc+0x180>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d203      	bcs.n	800e6fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e6f6:	4b14      	ldr	r3, [pc, #80]	; (800e748 <pvPortMalloc+0x178>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	4a15      	ldr	r2, [pc, #84]	; (800e750 <pvPortMalloc+0x180>)
 800e6fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e700:	685a      	ldr	r2, [r3, #4]
 800e702:	4b10      	ldr	r3, [pc, #64]	; (800e744 <pvPortMalloc+0x174>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	431a      	orrs	r2, r3
 800e708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70e:	2200      	movs	r2, #0
 800e710:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e712:	f7fe fbe5 	bl	800cee0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e716:	69fb      	ldr	r3, [r7, #28]
 800e718:	f003 0307 	and.w	r3, r3, #7
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d009      	beq.n	800e734 <pvPortMalloc+0x164>
 800e720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e724:	f383 8811 	msr	BASEPRI, r3
 800e728:	f3bf 8f6f 	isb	sy
 800e72c:	f3bf 8f4f 	dsb	sy
 800e730:	60fb      	str	r3, [r7, #12]
 800e732:	e7fe      	b.n	800e732 <pvPortMalloc+0x162>
	return pvReturn;
 800e734:	69fb      	ldr	r3, [r7, #28]
}
 800e736:	4618      	mov	r0, r3
 800e738:	3728      	adds	r7, #40	; 0x28
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}
 800e73e:	bf00      	nop
 800e740:	24021798 	.word	0x24021798
 800e744:	240217a4 	.word	0x240217a4
 800e748:	2402179c 	.word	0x2402179c
 800e74c:	24021790 	.word	0x24021790
 800e750:	240217a0 	.word	0x240217a0

0800e754 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b086      	sub	sp, #24
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d046      	beq.n	800e7f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e766:	2308      	movs	r3, #8
 800e768:	425b      	negs	r3, r3
 800e76a:	697a      	ldr	r2, [r7, #20]
 800e76c:	4413      	add	r3, r2
 800e76e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	685a      	ldr	r2, [r3, #4]
 800e778:	4b20      	ldr	r3, [pc, #128]	; (800e7fc <vPortFree+0xa8>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	4013      	ands	r3, r2
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d109      	bne.n	800e796 <vPortFree+0x42>
 800e782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e786:	f383 8811 	msr	BASEPRI, r3
 800e78a:	f3bf 8f6f 	isb	sy
 800e78e:	f3bf 8f4f 	dsb	sy
 800e792:	60fb      	str	r3, [r7, #12]
 800e794:	e7fe      	b.n	800e794 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d009      	beq.n	800e7b2 <vPortFree+0x5e>
 800e79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a2:	f383 8811 	msr	BASEPRI, r3
 800e7a6:	f3bf 8f6f 	isb	sy
 800e7aa:	f3bf 8f4f 	dsb	sy
 800e7ae:	60bb      	str	r3, [r7, #8]
 800e7b0:	e7fe      	b.n	800e7b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e7b2:	693b      	ldr	r3, [r7, #16]
 800e7b4:	685a      	ldr	r2, [r3, #4]
 800e7b6:	4b11      	ldr	r3, [pc, #68]	; (800e7fc <vPortFree+0xa8>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	4013      	ands	r3, r2
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d019      	beq.n	800e7f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d115      	bne.n	800e7f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e7c8:	693b      	ldr	r3, [r7, #16]
 800e7ca:	685a      	ldr	r2, [r3, #4]
 800e7cc:	4b0b      	ldr	r3, [pc, #44]	; (800e7fc <vPortFree+0xa8>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	43db      	mvns	r3, r3
 800e7d2:	401a      	ands	r2, r3
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e7d8:	f7fe fb74 	bl	800cec4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e7dc:	693b      	ldr	r3, [r7, #16]
 800e7de:	685a      	ldr	r2, [r3, #4]
 800e7e0:	4b07      	ldr	r3, [pc, #28]	; (800e800 <vPortFree+0xac>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	4413      	add	r3, r2
 800e7e6:	4a06      	ldr	r2, [pc, #24]	; (800e800 <vPortFree+0xac>)
 800e7e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e7ea:	6938      	ldr	r0, [r7, #16]
 800e7ec:	f000 f86c 	bl	800e8c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e7f0:	f7fe fb76 	bl	800cee0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e7f4:	bf00      	nop
 800e7f6:	3718      	adds	r7, #24
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}
 800e7fc:	240217a4 	.word	0x240217a4
 800e800:	2402179c 	.word	0x2402179c

0800e804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e804:	b480      	push	{r7}
 800e806:	b085      	sub	sp, #20
 800e808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e80a:	f44f 33fa 	mov.w	r3, #128000	; 0x1f400
 800e80e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e810:	4b27      	ldr	r3, [pc, #156]	; (800e8b0 <prvHeapInit+0xac>)
 800e812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	f003 0307 	and.w	r3, r3, #7
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d00c      	beq.n	800e838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	3307      	adds	r3, #7
 800e822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f023 0307 	bic.w	r3, r3, #7
 800e82a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e82c:	68ba      	ldr	r2, [r7, #8]
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	1ad3      	subs	r3, r2, r3
 800e832:	4a1f      	ldr	r2, [pc, #124]	; (800e8b0 <prvHeapInit+0xac>)
 800e834:	4413      	add	r3, r2
 800e836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e83c:	4a1d      	ldr	r2, [pc, #116]	; (800e8b4 <prvHeapInit+0xb0>)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e842:	4b1c      	ldr	r3, [pc, #112]	; (800e8b4 <prvHeapInit+0xb0>)
 800e844:	2200      	movs	r2, #0
 800e846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	68ba      	ldr	r2, [r7, #8]
 800e84c:	4413      	add	r3, r2
 800e84e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e850:	2208      	movs	r2, #8
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	1a9b      	subs	r3, r3, r2
 800e856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f023 0307 	bic.w	r3, r3, #7
 800e85e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	4a15      	ldr	r2, [pc, #84]	; (800e8b8 <prvHeapInit+0xb4>)
 800e864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e866:	4b14      	ldr	r3, [pc, #80]	; (800e8b8 <prvHeapInit+0xb4>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	2200      	movs	r2, #0
 800e86c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e86e:	4b12      	ldr	r3, [pc, #72]	; (800e8b8 <prvHeapInit+0xb4>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	2200      	movs	r2, #0
 800e874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	68fa      	ldr	r2, [r7, #12]
 800e87e:	1ad2      	subs	r2, r2, r3
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e884:	4b0c      	ldr	r3, [pc, #48]	; (800e8b8 <prvHeapInit+0xb4>)
 800e886:	681a      	ldr	r2, [r3, #0]
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	685b      	ldr	r3, [r3, #4]
 800e890:	4a0a      	ldr	r2, [pc, #40]	; (800e8bc <prvHeapInit+0xb8>)
 800e892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	4a09      	ldr	r2, [pc, #36]	; (800e8c0 <prvHeapInit+0xbc>)
 800e89a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e89c:	4b09      	ldr	r3, [pc, #36]	; (800e8c4 <prvHeapInit+0xc0>)
 800e89e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e8a2:	601a      	str	r2, [r3, #0]
}
 800e8a4:	bf00      	nop
 800e8a6:	3714      	adds	r7, #20
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr
 800e8b0:	24002390 	.word	0x24002390
 800e8b4:	24021790 	.word	0x24021790
 800e8b8:	24021798 	.word	0x24021798
 800e8bc:	240217a0 	.word	0x240217a0
 800e8c0:	2402179c 	.word	0x2402179c
 800e8c4:	240217a4 	.word	0x240217a4

0800e8c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e8c8:	b480      	push	{r7}
 800e8ca:	b085      	sub	sp, #20
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e8d0:	4b28      	ldr	r3, [pc, #160]	; (800e974 <prvInsertBlockIntoFreeList+0xac>)
 800e8d2:	60fb      	str	r3, [r7, #12]
 800e8d4:	e002      	b.n	800e8dc <prvInsertBlockIntoFreeList+0x14>
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	60fb      	str	r3, [r7, #12]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	687a      	ldr	r2, [r7, #4]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d8f7      	bhi.n	800e8d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	68ba      	ldr	r2, [r7, #8]
 800e8f0:	4413      	add	r3, r2
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d108      	bne.n	800e90a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	685a      	ldr	r2, [r3, #4]
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	685b      	ldr	r3, [r3, #4]
 800e900:	441a      	add	r2, r3
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	685b      	ldr	r3, [r3, #4]
 800e912:	68ba      	ldr	r2, [r7, #8]
 800e914:	441a      	add	r2, r3
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d118      	bne.n	800e950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	681a      	ldr	r2, [r3, #0]
 800e922:	4b15      	ldr	r3, [pc, #84]	; (800e978 <prvInsertBlockIntoFreeList+0xb0>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	429a      	cmp	r2, r3
 800e928:	d00d      	beq.n	800e946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	685a      	ldr	r2, [r3, #4]
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	685b      	ldr	r3, [r3, #4]
 800e934:	441a      	add	r2, r3
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	681a      	ldr	r2, [r3, #0]
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	601a      	str	r2, [r3, #0]
 800e944:	e008      	b.n	800e958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e946:	4b0c      	ldr	r3, [pc, #48]	; (800e978 <prvInsertBlockIntoFreeList+0xb0>)
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	601a      	str	r2, [r3, #0]
 800e94e:	e003      	b.n	800e958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681a      	ldr	r2, [r3, #0]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e958:	68fa      	ldr	r2, [r7, #12]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d002      	beq.n	800e966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	687a      	ldr	r2, [r7, #4]
 800e964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e966:	bf00      	nop
 800e968:	3714      	adds	r7, #20
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr
 800e972:	bf00      	nop
 800e974:	24021790 	.word	0x24021790
 800e978:	24021798 	.word	0x24021798

0800e97c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b084      	sub	sp, #16
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800e984:	4b29      	ldr	r3, [pc, #164]	; (800ea2c <tcpip_thread+0xb0>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d005      	beq.n	800e998 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800e98c:	4b27      	ldr	r3, [pc, #156]	; (800ea2c <tcpip_thread+0xb0>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4a27      	ldr	r2, [pc, #156]	; (800ea30 <tcpip_thread+0xb4>)
 800e992:	6812      	ldr	r2, [r2, #0]
 800e994:	4610      	mov	r0, r2
 800e996:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800e998:	4826      	ldr	r0, [pc, #152]	; (800ea34 <tcpip_thread+0xb8>)
 800e99a:	f009 f90d 	bl	8017bb8 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800e99e:	4825      	ldr	r0, [pc, #148]	; (800ea34 <tcpip_thread+0xb8>)
 800e9a0:	f009 f919 	bl	8017bd6 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800e9a4:	f107 030c 	add.w	r3, r7, #12
 800e9a8:	4619      	mov	r1, r3
 800e9aa:	4823      	ldr	r0, [pc, #140]	; (800ea38 <tcpip_thread+0xbc>)
 800e9ac:	f006 fbbc 	bl	8015128 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800e9b0:	4820      	ldr	r0, [pc, #128]	; (800ea34 <tcpip_thread+0xb8>)
 800e9b2:	f009 f901 	bl	8017bb8 <sys_mutex_lock>
    if (msg == NULL) {
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d106      	bne.n	800e9ca <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e9bc:	4b1f      	ldr	r3, [pc, #124]	; (800ea3c <tcpip_thread+0xc0>)
 800e9be:	2269      	movs	r2, #105	; 0x69
 800e9c0:	491f      	ldr	r1, [pc, #124]	; (800ea40 <tcpip_thread+0xc4>)
 800e9c2:	4820      	ldr	r0, [pc, #128]	; (800ea44 <tcpip_thread+0xc8>)
 800e9c4:	f009 f99e 	bl	8017d04 <iprintf>
      continue;
 800e9c8:	e02f      	b.n	800ea2a <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	781b      	ldrb	r3, [r3, #0]
 800e9ce:	2b03      	cmp	r3, #3
 800e9d0:	d011      	beq.n	800e9f6 <tcpip_thread+0x7a>
 800e9d2:	2b04      	cmp	r3, #4
 800e9d4:	d01b      	beq.n	800ea0e <tcpip_thread+0x92>
 800e9d6:	2b02      	cmp	r3, #2
 800e9d8:	d120      	bne.n	800ea1c <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	68db      	ldr	r3, [r3, #12]
 800e9de:	68fa      	ldr	r2, [r7, #12]
 800e9e0:	6850      	ldr	r0, [r2, #4]
 800e9e2:	68fa      	ldr	r2, [r7, #12]
 800e9e4:	6892      	ldr	r2, [r2, #8]
 800e9e6:	4611      	mov	r1, r2
 800e9e8:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	2009      	movs	r0, #9
 800e9f0:	f000 fe60 	bl	800f6b4 <memp_free>
      break;
 800e9f4:	e019      	b.n	800ea2a <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	685b      	ldr	r3, [r3, #4]
 800e9fa:	68fa      	ldr	r2, [r7, #12]
 800e9fc:	6892      	ldr	r2, [r2, #8]
 800e9fe:	4610      	mov	r0, r2
 800ea00:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	4619      	mov	r1, r3
 800ea06:	2008      	movs	r0, #8
 800ea08:	f000 fe54 	bl	800f6b4 <memp_free>
      break;
 800ea0c:	e00d      	b.n	800ea2a <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	68fa      	ldr	r2, [r7, #12]
 800ea14:	6892      	ldr	r2, [r2, #8]
 800ea16:	4610      	mov	r0, r2
 800ea18:	4798      	blx	r3
      break;
 800ea1a:	e006      	b.n	800ea2a <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ea1c:	4b07      	ldr	r3, [pc, #28]	; (800ea3c <tcpip_thread+0xc0>)
 800ea1e:	229b      	movs	r2, #155	; 0x9b
 800ea20:	4907      	ldr	r1, [pc, #28]	; (800ea40 <tcpip_thread+0xc4>)
 800ea22:	4808      	ldr	r0, [pc, #32]	; (800ea44 <tcpip_thread+0xc8>)
 800ea24:	f009 f96e 	bl	8017d04 <iprintf>
      break;
 800ea28:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800ea2a:	e7b8      	b.n	800e99e <tcpip_thread+0x22>
 800ea2c:	240217a8 	.word	0x240217a8
 800ea30:	240217ac 	.word	0x240217ac
 800ea34:	24021c50 	.word	0x24021c50
 800ea38:	240217b0 	.word	0x240217b0
 800ea3c:	08018e5c 	.word	0x08018e5c
 800ea40:	08018e8c 	.word	0x08018e8c
 800ea44:	08018eac 	.word	0x08018eac

0800ea48 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b086      	sub	sp, #24
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	60f8      	str	r0, [r7, #12]
 800ea50:	60b9      	str	r1, [r7, #8]
 800ea52:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800ea54:	481a      	ldr	r0, [pc, #104]	; (800eac0 <tcpip_inpkt+0x78>)
 800ea56:	f009 f873 	bl	8017b40 <sys_mbox_valid>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d105      	bne.n	800ea6c <tcpip_inpkt+0x24>
 800ea60:	4b18      	ldr	r3, [pc, #96]	; (800eac4 <tcpip_inpkt+0x7c>)
 800ea62:	22b5      	movs	r2, #181	; 0xb5
 800ea64:	4918      	ldr	r1, [pc, #96]	; (800eac8 <tcpip_inpkt+0x80>)
 800ea66:	4819      	ldr	r0, [pc, #100]	; (800eacc <tcpip_inpkt+0x84>)
 800ea68:	f009 f94c 	bl	8017d04 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ea6c:	2009      	movs	r0, #9
 800ea6e:	f000 fdab 	bl	800f5c8 <memp_malloc>
 800ea72:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d102      	bne.n	800ea80 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ea7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ea7e:	e01a      	b.n	800eab6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	2202      	movs	r2, #2
 800ea84:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	68fa      	ldr	r2, [r7, #12]
 800ea8a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	68ba      	ldr	r2, [r7, #8]
 800ea90:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	687a      	ldr	r2, [r7, #4]
 800ea96:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800ea98:	6979      	ldr	r1, [r7, #20]
 800ea9a:	4809      	ldr	r0, [pc, #36]	; (800eac0 <tcpip_inpkt+0x78>)
 800ea9c:	f008 fff7 	bl	8017a8e <sys_mbox_trypost>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d006      	beq.n	800eab4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800eaa6:	6979      	ldr	r1, [r7, #20]
 800eaa8:	2009      	movs	r0, #9
 800eaaa:	f000 fe03 	bl	800f6b4 <memp_free>
    return ERR_MEM;
 800eaae:	f04f 33ff 	mov.w	r3, #4294967295
 800eab2:	e000      	b.n	800eab6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800eab4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3718      	adds	r7, #24
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
 800eabe:	bf00      	nop
 800eac0:	240217b0 	.word	0x240217b0
 800eac4:	08018e5c 	.word	0x08018e5c
 800eac8:	08018ed4 	.word	0x08018ed4
 800eacc:	08018eac 	.word	0x08018eac

0800ead0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800eae0:	f003 0318 	and.w	r3, r3, #24
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d006      	beq.n	800eaf6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800eae8:	4a08      	ldr	r2, [pc, #32]	; (800eb0c <tcpip_input+0x3c>)
 800eaea:	6839      	ldr	r1, [r7, #0]
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f7ff ffab 	bl	800ea48 <tcpip_inpkt>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	e005      	b.n	800eb02 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800eaf6:	4a06      	ldr	r2, [pc, #24]	; (800eb10 <tcpip_input+0x40>)
 800eaf8:	6839      	ldr	r1, [r7, #0]
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f7ff ffa4 	bl	800ea48 <tcpip_inpkt>
 800eb00:	4603      	mov	r3, r0
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	3708      	adds	r7, #8
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	08017869 	.word	0x08017869
 800eb10:	0801682d 	.word	0x0801682d

0800eb14 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b086      	sub	sp, #24
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	60b9      	str	r1, [r7, #8]
 800eb1e:	4613      	mov	r3, r2
 800eb20:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800eb22:	481d      	ldr	r0, [pc, #116]	; (800eb98 <tcpip_callback_with_block+0x84>)
 800eb24:	f009 f80c 	bl	8017b40 <sys_mbox_valid>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d105      	bne.n	800eb3a <tcpip_callback_with_block+0x26>
 800eb2e:	4b1b      	ldr	r3, [pc, #108]	; (800eb9c <tcpip_callback_with_block+0x88>)
 800eb30:	22ee      	movs	r2, #238	; 0xee
 800eb32:	491b      	ldr	r1, [pc, #108]	; (800eba0 <tcpip_callback_with_block+0x8c>)
 800eb34:	481b      	ldr	r0, [pc, #108]	; (800eba4 <tcpip_callback_with_block+0x90>)
 800eb36:	f009 f8e5 	bl	8017d04 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800eb3a:	2008      	movs	r0, #8
 800eb3c:	f000 fd44 	bl	800f5c8 <memp_malloc>
 800eb40:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d102      	bne.n	800eb4e <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800eb48:	f04f 33ff 	mov.w	r3, #4294967295
 800eb4c:	e01f      	b.n	800eb8e <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	2203      	movs	r2, #3
 800eb52:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	68fa      	ldr	r2, [r7, #12]
 800eb58:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	68ba      	ldr	r2, [r7, #8]
 800eb5e:	609a      	str	r2, [r3, #8]
  if (block) {
 800eb60:	79fb      	ldrb	r3, [r7, #7]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d004      	beq.n	800eb70 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800eb66:	6979      	ldr	r1, [r7, #20]
 800eb68:	480b      	ldr	r0, [pc, #44]	; (800eb98 <tcpip_callback_with_block+0x84>)
 800eb6a:	f008 ff7b 	bl	8017a64 <sys_mbox_post>
 800eb6e:	e00d      	b.n	800eb8c <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800eb70:	6979      	ldr	r1, [r7, #20]
 800eb72:	4809      	ldr	r0, [pc, #36]	; (800eb98 <tcpip_callback_with_block+0x84>)
 800eb74:	f008 ff8b 	bl	8017a8e <sys_mbox_trypost>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d006      	beq.n	800eb8c <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800eb7e:	6979      	ldr	r1, [r7, #20]
 800eb80:	2008      	movs	r0, #8
 800eb82:	f000 fd97 	bl	800f6b4 <memp_free>
      return ERR_MEM;
 800eb86:	f04f 33ff 	mov.w	r3, #4294967295
 800eb8a:	e000      	b.n	800eb8e <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800eb8c:	2300      	movs	r3, #0
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3718      	adds	r7, #24
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}
 800eb96:	bf00      	nop
 800eb98:	240217b0 	.word	0x240217b0
 800eb9c:	08018e5c 	.word	0x08018e5c
 800eba0:	08018ed4 	.word	0x08018ed4
 800eba4:	08018eac 	.word	0x08018eac

0800eba8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b084      	sub	sp, #16
 800ebac:	af02      	add	r7, sp, #8
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ebb2:	f000 f923 	bl	800edfc <lwip_init>

  tcpip_init_done = initfunc;
 800ebb6:	4a17      	ldr	r2, [pc, #92]	; (800ec14 <tcpip_init+0x6c>)
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ebbc:	4a16      	ldr	r2, [pc, #88]	; (800ec18 <tcpip_init+0x70>)
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ebc2:	2106      	movs	r1, #6
 800ebc4:	4815      	ldr	r0, [pc, #84]	; (800ec1c <tcpip_init+0x74>)
 800ebc6:	f008 ff2b 	bl	8017a20 <sys_mbox_new>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d006      	beq.n	800ebde <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ebd0:	4b13      	ldr	r3, [pc, #76]	; (800ec20 <tcpip_init+0x78>)
 800ebd2:	f240 12d5 	movw	r2, #469	; 0x1d5
 800ebd6:	4913      	ldr	r1, [pc, #76]	; (800ec24 <tcpip_init+0x7c>)
 800ebd8:	4813      	ldr	r0, [pc, #76]	; (800ec28 <tcpip_init+0x80>)
 800ebda:	f009 f893 	bl	8017d04 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ebde:	4813      	ldr	r0, [pc, #76]	; (800ec2c <tcpip_init+0x84>)
 800ebe0:	f008 ffce 	bl	8017b80 <sys_mutex_new>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d006      	beq.n	800ebf8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ebea:	4b0d      	ldr	r3, [pc, #52]	; (800ec20 <tcpip_init+0x78>)
 800ebec:	f240 12d9 	movw	r2, #473	; 0x1d9
 800ebf0:	490f      	ldr	r1, [pc, #60]	; (800ec30 <tcpip_init+0x88>)
 800ebf2:	480d      	ldr	r0, [pc, #52]	; (800ec28 <tcpip_init+0x80>)
 800ebf4:	f009 f886 	bl	8017d04 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	9300      	str	r3, [sp, #0]
 800ebfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec00:	2200      	movs	r2, #0
 800ec02:	490c      	ldr	r1, [pc, #48]	; (800ec34 <tcpip_init+0x8c>)
 800ec04:	480c      	ldr	r0, [pc, #48]	; (800ec38 <tcpip_init+0x90>)
 800ec06:	f008 fff3 	bl	8017bf0 <sys_thread_new>
}
 800ec0a:	bf00      	nop
 800ec0c:	3708      	adds	r7, #8
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	240217a8 	.word	0x240217a8
 800ec18:	240217ac 	.word	0x240217ac
 800ec1c:	240217b0 	.word	0x240217b0
 800ec20:	08018e5c 	.word	0x08018e5c
 800ec24:	08018ee4 	.word	0x08018ee4
 800ec28:	08018eac 	.word	0x08018eac
 800ec2c:	24021c50 	.word	0x24021c50
 800ec30:	08018f08 	.word	0x08018f08
 800ec34:	0800e97d 	.word	0x0800e97d
 800ec38:	08018f2c 	.word	0x08018f2c

0800ec3c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b083      	sub	sp, #12
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	4603      	mov	r3, r0
 800ec44:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800ec46:	88fb      	ldrh	r3, [r7, #6]
 800ec48:	ba5b      	rev16	r3, r3
 800ec4a:	b29b      	uxth	r3, r3
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	370c      	adds	r7, #12
 800ec50:	46bd      	mov	sp, r7
 800ec52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec56:	4770      	bx	lr

0800ec58 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b083      	sub	sp, #12
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	061a      	lsls	r2, r3, #24
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	021b      	lsls	r3, r3, #8
 800ec68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ec6c:	431a      	orrs	r2, r3
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	0a1b      	lsrs	r3, r3, #8
 800ec72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ec76:	431a      	orrs	r2, r3
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	0e1b      	lsrs	r3, r3, #24
 800ec7c:	4313      	orrs	r3, r2
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	370c      	adds	r7, #12
 800ec82:	46bd      	mov	sp, r7
 800ec84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec88:	4770      	bx	lr

0800ec8a <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800ec8a:	b480      	push	{r7}
 800ec8c:	b089      	sub	sp, #36	; 0x24
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
 800ec92:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800eca0:	69fb      	ldr	r3, [r7, #28]
 800eca2:	f003 0301 	and.w	r3, r3, #1
 800eca6:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d00d      	beq.n	800ecca <lwip_standard_chksum+0x40>
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	dd0a      	ble.n	800ecca <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800ecb4:	69fa      	ldr	r2, [r7, #28]
 800ecb6:	1c53      	adds	r3, r2, #1
 800ecb8:	61fb      	str	r3, [r7, #28]
 800ecba:	f107 030e 	add.w	r3, r7, #14
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	7812      	ldrb	r2, [r2, #0]
 800ecc2:	701a      	strb	r2, [r3, #0]
    len--;
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	3b01      	subs	r3, #1
 800ecc8:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800ecca:	69fb      	ldr	r3, [r7, #28]
 800eccc:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800ecce:	e00a      	b.n	800ece6 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800ecd0:	69bb      	ldr	r3, [r7, #24]
 800ecd2:	1c9a      	adds	r2, r3, #2
 800ecd4:	61ba      	str	r2, [r7, #24]
 800ecd6:	881b      	ldrh	r3, [r3, #0]
 800ecd8:	461a      	mov	r2, r3
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	4413      	add	r3, r2
 800ecde:	617b      	str	r3, [r7, #20]
    len -= 2;
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	3b02      	subs	r3, #2
 800ece4:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	2b01      	cmp	r3, #1
 800ecea:	dcf1      	bgt.n	800ecd0 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	dd04      	ble.n	800ecfc <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800ecf2:	f107 030e 	add.w	r3, r7, #14
 800ecf6:	69ba      	ldr	r2, [r7, #24]
 800ecf8:	7812      	ldrb	r2, [r2, #0]
 800ecfa:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800ecfc:	89fb      	ldrh	r3, [r7, #14]
 800ecfe:	461a      	mov	r2, r3
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	4413      	add	r3, r2
 800ed04:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	0c1a      	lsrs	r2, r3, #16
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	4413      	add	r3, r2
 800ed10:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	0c1a      	lsrs	r2, r3, #16
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	b29b      	uxth	r3, r3
 800ed1a:	4413      	add	r3, r2
 800ed1c:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d007      	beq.n	800ed34 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	021b      	lsls	r3, r3, #8
 800ed28:	b29a      	uxth	r2, r3
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	0a1b      	lsrs	r3, r3, #8
 800ed2e:	b2db      	uxtb	r3, r3
 800ed30:	4313      	orrs	r3, r2
 800ed32:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	b29b      	uxth	r3, r3
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3724      	adds	r7, #36	; 0x24
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed42:	4770      	bx	lr

0800ed44 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800ed50:	887b      	ldrh	r3, [r7, #2]
 800ed52:	4619      	mov	r1, r3
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f7ff ff98 	bl	800ec8a <lwip_standard_chksum>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	43db      	mvns	r3, r3
 800ed5e:	b29b      	uxth	r3, r3
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3708      	adds	r7, #8
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b086      	sub	sp, #24
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
 800ed70:	2300      	movs	r3, #0
 800ed72:	617b      	str	r3, [r7, #20]
  swapped = 0;
 800ed74:	2300      	movs	r3, #0
 800ed76:	73fb      	strb	r3, [r7, #15]
  for (q = p; q != NULL; q = q->next) {
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	613b      	str	r3, [r7, #16]
 800ed7c:	e028      	b.n	800edd0 <inet_chksum_pbuf+0x68>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	685a      	ldr	r2, [r3, #4]
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	895b      	ldrh	r3, [r3, #10]
 800ed86:	4619      	mov	r1, r3
 800ed88:	4610      	mov	r0, r2
 800ed8a:	f7ff ff7e 	bl	800ec8a <lwip_standard_chksum>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	461a      	mov	r2, r3
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	4413      	add	r3, r2
 800ed96:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	0c1a      	lsrs	r2, r3, #16
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	4413      	add	r3, r2
 800eda2:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	895b      	ldrh	r3, [r3, #10]
 800eda8:	f003 0301 	and.w	r3, r3, #1
 800edac:	b29b      	uxth	r3, r3
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d00b      	beq.n	800edca <inet_chksum_pbuf+0x62>
      swapped = 1 - swapped;
 800edb2:	7bfb      	ldrb	r3, [r7, #15]
 800edb4:	f1c3 0301 	rsb	r3, r3, #1
 800edb8:	73fb      	strb	r3, [r7, #15]
      acc = SWAP_BYTES_IN_WORD(acc);
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	021b      	lsls	r3, r3, #8
 800edbe:	b29a      	uxth	r2, r3
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	0a1b      	lsrs	r3, r3, #8
 800edc4:	b2db      	uxtb	r3, r3
 800edc6:	4313      	orrs	r3, r2
 800edc8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	613b      	str	r3, [r7, #16]
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d1d3      	bne.n	800ed7e <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800edd6:	7bfb      	ldrb	r3, [r7, #15]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d007      	beq.n	800edec <inet_chksum_pbuf+0x84>
    acc = SWAP_BYTES_IN_WORD(acc);
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	021b      	lsls	r3, r3, #8
 800ede0:	b29a      	uxth	r2, r3
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	0a1b      	lsrs	r3, r3, #8
 800ede6:	b2db      	uxtb	r3, r3
 800ede8:	4313      	orrs	r3, r2
 800edea:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	b29b      	uxth	r3, r3
 800edf0:	43db      	mvns	r3, r3
 800edf2:	b29b      	uxth	r3, r3
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3718      	adds	r7, #24
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b082      	sub	sp, #8
 800ee00:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ee02:	2300      	movs	r3, #0
 800ee04:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ee06:	f008 fead 	bl	8017b64 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ee0a:	f000 f8a7 	bl	800ef5c <mem_init>
  memp_init();
 800ee0e:	f000 fb6d 	bl	800f4ec <memp_init>
  pbuf_init();
  netif_init();
 800ee12:	f000 fc79 	bl	800f708 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ee16:	f006 f9ad 	bl	8015174 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ee1a:	f001 fc9d 	bl	8010758 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800ee1e:	f006 f83f 	bl	8014ea0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ee22:	bf00      	nop
 800ee24:	3708      	adds	r7, #8
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}
	...

0800ee2c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ee34:	4b40      	ldr	r3, [pc, #256]	; (800ef38 <plug_holes+0x10c>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	687a      	ldr	r2, [r7, #4]
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d206      	bcs.n	800ee4c <plug_holes+0x20>
 800ee3e:	4b3f      	ldr	r3, [pc, #252]	; (800ef3c <plug_holes+0x110>)
 800ee40:	f240 125d 	movw	r2, #349	; 0x15d
 800ee44:	493e      	ldr	r1, [pc, #248]	; (800ef40 <plug_holes+0x114>)
 800ee46:	483f      	ldr	r0, [pc, #252]	; (800ef44 <plug_holes+0x118>)
 800ee48:	f008 ff5c 	bl	8017d04 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ee4c:	4b3e      	ldr	r3, [pc, #248]	; (800ef48 <plug_holes+0x11c>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	687a      	ldr	r2, [r7, #4]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d306      	bcc.n	800ee64 <plug_holes+0x38>
 800ee56:	4b39      	ldr	r3, [pc, #228]	; (800ef3c <plug_holes+0x110>)
 800ee58:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ee5c:	493b      	ldr	r1, [pc, #236]	; (800ef4c <plug_holes+0x120>)
 800ee5e:	4839      	ldr	r0, [pc, #228]	; (800ef44 <plug_holes+0x118>)
 800ee60:	f008 ff50 	bl	8017d04 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	791b      	ldrb	r3, [r3, #4]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d006      	beq.n	800ee7a <plug_holes+0x4e>
 800ee6c:	4b33      	ldr	r3, [pc, #204]	; (800ef3c <plug_holes+0x110>)
 800ee6e:	f240 125f 	movw	r2, #351	; 0x15f
 800ee72:	4937      	ldr	r1, [pc, #220]	; (800ef50 <plug_holes+0x124>)
 800ee74:	4833      	ldr	r0, [pc, #204]	; (800ef44 <plug_holes+0x118>)
 800ee76:	f008 ff45 	bl	8017d04 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	881b      	ldrh	r3, [r3, #0]
 800ee7e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ee82:	d906      	bls.n	800ee92 <plug_holes+0x66>
 800ee84:	4b2d      	ldr	r3, [pc, #180]	; (800ef3c <plug_holes+0x110>)
 800ee86:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800ee8a:	4932      	ldr	r1, [pc, #200]	; (800ef54 <plug_holes+0x128>)
 800ee8c:	482d      	ldr	r0, [pc, #180]	; (800ef44 <plug_holes+0x118>)
 800ee8e:	f008 ff39 	bl	8017d04 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800ee92:	4b29      	ldr	r3, [pc, #164]	; (800ef38 <plug_holes+0x10c>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	687a      	ldr	r2, [r7, #4]
 800ee98:	8812      	ldrh	r2, [r2, #0]
 800ee9a:	4413      	add	r3, r2
 800ee9c:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ee9e:	687a      	ldr	r2, [r7, #4]
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d01f      	beq.n	800eee6 <plug_holes+0xba>
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	791b      	ldrb	r3, [r3, #4]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d11b      	bne.n	800eee6 <plug_holes+0xba>
 800eeae:	4b26      	ldr	r3, [pc, #152]	; (800ef48 <plug_holes+0x11c>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	68fa      	ldr	r2, [r7, #12]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d016      	beq.n	800eee6 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800eeb8:	4b27      	ldr	r3, [pc, #156]	; (800ef58 <plug_holes+0x12c>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	68fa      	ldr	r2, [r7, #12]
 800eebe:	429a      	cmp	r2, r3
 800eec0:	d102      	bne.n	800eec8 <plug_holes+0x9c>
      lfree = mem;
 800eec2:	4a25      	ldr	r2, [pc, #148]	; (800ef58 <plug_holes+0x12c>)
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	881a      	ldrh	r2, [r3, #0]
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	4a19      	ldr	r2, [pc, #100]	; (800ef38 <plug_holes+0x10c>)
 800eed4:	6812      	ldr	r2, [r2, #0]
 800eed6:	1a99      	subs	r1, r3, r2
 800eed8:	4b17      	ldr	r3, [pc, #92]	; (800ef38 <plug_holes+0x10c>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	68fa      	ldr	r2, [r7, #12]
 800eede:	8812      	ldrh	r2, [r2, #0]
 800eee0:	4413      	add	r3, r2
 800eee2:	b28a      	uxth	r2, r1
 800eee4:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800eee6:	4b14      	ldr	r3, [pc, #80]	; (800ef38 <plug_holes+0x10c>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	687a      	ldr	r2, [r7, #4]
 800eeec:	8852      	ldrh	r2, [r2, #2]
 800eeee:	4413      	add	r3, r2
 800eef0:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800eef2:	68ba      	ldr	r2, [r7, #8]
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d01a      	beq.n	800ef30 <plug_holes+0x104>
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	791b      	ldrb	r3, [r3, #4]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d116      	bne.n	800ef30 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ef02:	4b15      	ldr	r3, [pc, #84]	; (800ef58 <plug_holes+0x12c>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	687a      	ldr	r2, [r7, #4]
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d102      	bne.n	800ef12 <plug_holes+0xe6>
      lfree = pmem;
 800ef0c:	4a12      	ldr	r2, [pc, #72]	; (800ef58 <plug_holes+0x12c>)
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	881a      	ldrh	r2, [r3, #0]
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	4a06      	ldr	r2, [pc, #24]	; (800ef38 <plug_holes+0x10c>)
 800ef1e:	6812      	ldr	r2, [r2, #0]
 800ef20:	1a99      	subs	r1, r3, r2
 800ef22:	4b05      	ldr	r3, [pc, #20]	; (800ef38 <plug_holes+0x10c>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	687a      	ldr	r2, [r7, #4]
 800ef28:	8812      	ldrh	r2, [r2, #0]
 800ef2a:	4413      	add	r3, r2
 800ef2c:	b28a      	uxth	r2, r1
 800ef2e:	805a      	strh	r2, [r3, #2]
  }
}
 800ef30:	bf00      	nop
 800ef32:	3710      	adds	r7, #16
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}
 800ef38:	240217b4 	.word	0x240217b4
 800ef3c:	08018f3c 	.word	0x08018f3c
 800ef40:	08018f6c 	.word	0x08018f6c
 800ef44:	08018f84 	.word	0x08018f84
 800ef48:	240217b8 	.word	0x240217b8
 800ef4c:	08018fac 	.word	0x08018fac
 800ef50:	08018fc8 	.word	0x08018fc8
 800ef54:	08018fe4 	.word	0x08018fe4
 800ef58:	240217bc 	.word	0x240217bc

0800ef5c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ef62:	4b1c      	ldr	r3, [pc, #112]	; (800efd4 <mem_init+0x78>)
 800ef64:	4a1c      	ldr	r2, [pc, #112]	; (800efd8 <mem_init+0x7c>)
 800ef66:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ef68:	4b1a      	ldr	r3, [pc, #104]	; (800efd4 <mem_init+0x78>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ef74:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2200      	movs	r2, #0
 800ef7a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800ef82:	4b14      	ldr	r3, [pc, #80]	; (800efd4 <mem_init+0x78>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800ef8a:	4a14      	ldr	r2, [pc, #80]	; (800efdc <mem_init+0x80>)
 800ef8c:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ef8e:	4b13      	ldr	r3, [pc, #76]	; (800efdc <mem_init+0x80>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	2201      	movs	r2, #1
 800ef94:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ef96:	4b11      	ldr	r3, [pc, #68]	; (800efdc <mem_init+0x80>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ef9e:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800efa0:	4b0e      	ldr	r3, [pc, #56]	; (800efdc <mem_init+0x80>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800efa8:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800efaa:	4b0a      	ldr	r3, [pc, #40]	; (800efd4 <mem_init+0x78>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	4a0c      	ldr	r2, [pc, #48]	; (800efe0 <mem_init+0x84>)
 800efb0:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800efb2:	480c      	ldr	r0, [pc, #48]	; (800efe4 <mem_init+0x88>)
 800efb4:	f008 fde4 	bl	8017b80 <sys_mutex_new>
 800efb8:	4603      	mov	r3, r0
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d006      	beq.n	800efcc <mem_init+0x70>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800efbe:	4b0a      	ldr	r3, [pc, #40]	; (800efe8 <mem_init+0x8c>)
 800efc0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800efc4:	4909      	ldr	r1, [pc, #36]	; (800efec <mem_init+0x90>)
 800efc6:	480a      	ldr	r0, [pc, #40]	; (800eff0 <mem_init+0x94>)
 800efc8:	f008 fe9c 	bl	8017d04 <iprintf>
  }
}
 800efcc:	bf00      	nop
 800efce:	3708      	adds	r7, #8
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	240217b4 	.word	0x240217b4
 800efd8:	30044000 	.word	0x30044000
 800efdc:	240217b8 	.word	0x240217b8
 800efe0:	240217bc 	.word	0x240217bc
 800efe4:	240217c0 	.word	0x240217c0
 800efe8:	08018f3c 	.word	0x08018f3c
 800efec:	08019010 	.word	0x08019010
 800eff0:	08018f84 	.word	0x08018f84

0800eff4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b084      	sub	sp, #16
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d050      	beq.n	800f0a4 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f003 0303 	and.w	r3, r3, #3
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d006      	beq.n	800f01a <mem_free+0x26>
 800f00c:	4b27      	ldr	r3, [pc, #156]	; (800f0ac <mem_free+0xb8>)
 800f00e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800f012:	4927      	ldr	r1, [pc, #156]	; (800f0b0 <mem_free+0xbc>)
 800f014:	4827      	ldr	r0, [pc, #156]	; (800f0b4 <mem_free+0xc0>)
 800f016:	f008 fe75 	bl	8017d04 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f01a:	4b27      	ldr	r3, [pc, #156]	; (800f0b8 <mem_free+0xc4>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	429a      	cmp	r2, r3
 800f022:	d304      	bcc.n	800f02e <mem_free+0x3a>
 800f024:	4b25      	ldr	r3, [pc, #148]	; (800f0bc <mem_free+0xc8>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	429a      	cmp	r2, r3
 800f02c:	d306      	bcc.n	800f03c <mem_free+0x48>
 800f02e:	4b1f      	ldr	r3, [pc, #124]	; (800f0ac <mem_free+0xb8>)
 800f030:	f240 12af 	movw	r2, #431	; 0x1af
 800f034:	4922      	ldr	r1, [pc, #136]	; (800f0c0 <mem_free+0xcc>)
 800f036:	481f      	ldr	r0, [pc, #124]	; (800f0b4 <mem_free+0xc0>)
 800f038:	f008 fe64 	bl	8017d04 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f03c:	4b1e      	ldr	r3, [pc, #120]	; (800f0b8 <mem_free+0xc4>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	687a      	ldr	r2, [r7, #4]
 800f042:	429a      	cmp	r2, r3
 800f044:	d304      	bcc.n	800f050 <mem_free+0x5c>
 800f046:	4b1d      	ldr	r3, [pc, #116]	; (800f0bc <mem_free+0xc8>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	687a      	ldr	r2, [r7, #4]
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d306      	bcc.n	800f05e <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800f050:	f008 fdf4 	bl	8017c3c <sys_arch_protect>
 800f054:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800f056:	68b8      	ldr	r0, [r7, #8]
 800f058:	f008 fdfe 	bl	8017c58 <sys_arch_unprotect>
    return;
 800f05c:	e023      	b.n	800f0a6 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f05e:	4819      	ldr	r0, [pc, #100]	; (800f0c4 <mem_free+0xd0>)
 800f060:	f008 fdaa 	bl	8017bb8 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	3b08      	subs	r3, #8
 800f068:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	791b      	ldrb	r3, [r3, #4]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d106      	bne.n	800f080 <mem_free+0x8c>
 800f072:	4b0e      	ldr	r3, [pc, #56]	; (800f0ac <mem_free+0xb8>)
 800f074:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800f078:	4913      	ldr	r1, [pc, #76]	; (800f0c8 <mem_free+0xd4>)
 800f07a:	480e      	ldr	r0, [pc, #56]	; (800f0b4 <mem_free+0xc0>)
 800f07c:	f008 fe42 	bl	8017d04 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	2200      	movs	r2, #0
 800f084:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f086:	4b11      	ldr	r3, [pc, #68]	; (800f0cc <mem_free+0xd8>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	68fa      	ldr	r2, [r7, #12]
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d202      	bcs.n	800f096 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f090:	4a0e      	ldr	r2, [pc, #56]	; (800f0cc <mem_free+0xd8>)
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f096:	68f8      	ldr	r0, [r7, #12]
 800f098:	f7ff fec8 	bl	800ee2c <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f09c:	4809      	ldr	r0, [pc, #36]	; (800f0c4 <mem_free+0xd0>)
 800f09e:	f008 fd9a 	bl	8017bd6 <sys_mutex_unlock>
 800f0a2:	e000      	b.n	800f0a6 <mem_free+0xb2>
    return;
 800f0a4:	bf00      	nop
}
 800f0a6:	3710      	adds	r7, #16
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}
 800f0ac:	08018f3c 	.word	0x08018f3c
 800f0b0:	0801902c 	.word	0x0801902c
 800f0b4:	08018f84 	.word	0x08018f84
 800f0b8:	240217b4 	.word	0x240217b4
 800f0bc:	240217b8 	.word	0x240217b8
 800f0c0:	08019050 	.word	0x08019050
 800f0c4:	240217c0 	.word	0x240217c0
 800f0c8:	08019068 	.word	0x08019068
 800f0cc:	240217bc 	.word	0x240217bc

0800f0d0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b088      	sub	sp, #32
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	460b      	mov	r3, r1
 800f0da:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800f0dc:	887b      	ldrh	r3, [r7, #2]
 800f0de:	3303      	adds	r3, #3
 800f0e0:	b29b      	uxth	r3, r3
 800f0e2:	f023 0303 	bic.w	r3, r3, #3
 800f0e6:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800f0e8:	887b      	ldrh	r3, [r7, #2]
 800f0ea:	2b0b      	cmp	r3, #11
 800f0ec:	d801      	bhi.n	800f0f2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f0ee:	230c      	movs	r3, #12
 800f0f0:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800f0f2:	887b      	ldrh	r3, [r7, #2]
 800f0f4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f0f8:	d901      	bls.n	800f0fe <mem_trim+0x2e>
    return NULL;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	e0bd      	b.n	800f27a <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f0fe:	4b61      	ldr	r3, [pc, #388]	; (800f284 <mem_trim+0x1b4>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	687a      	ldr	r2, [r7, #4]
 800f104:	429a      	cmp	r2, r3
 800f106:	d304      	bcc.n	800f112 <mem_trim+0x42>
 800f108:	4b5f      	ldr	r3, [pc, #380]	; (800f288 <mem_trim+0x1b8>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	687a      	ldr	r2, [r7, #4]
 800f10e:	429a      	cmp	r2, r3
 800f110:	d306      	bcc.n	800f120 <mem_trim+0x50>
 800f112:	4b5e      	ldr	r3, [pc, #376]	; (800f28c <mem_trim+0x1bc>)
 800f114:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800f118:	495d      	ldr	r1, [pc, #372]	; (800f290 <mem_trim+0x1c0>)
 800f11a:	485e      	ldr	r0, [pc, #376]	; (800f294 <mem_trim+0x1c4>)
 800f11c:	f008 fdf2 	bl	8017d04 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f120:	4b58      	ldr	r3, [pc, #352]	; (800f284 <mem_trim+0x1b4>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	687a      	ldr	r2, [r7, #4]
 800f126:	429a      	cmp	r2, r3
 800f128:	d304      	bcc.n	800f134 <mem_trim+0x64>
 800f12a:	4b57      	ldr	r3, [pc, #348]	; (800f288 <mem_trim+0x1b8>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	687a      	ldr	r2, [r7, #4]
 800f130:	429a      	cmp	r2, r3
 800f132:	d307      	bcc.n	800f144 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800f134:	f008 fd82 	bl	8017c3c <sys_arch_protect>
 800f138:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800f13a:	68f8      	ldr	r0, [r7, #12]
 800f13c:	f008 fd8c 	bl	8017c58 <sys_arch_unprotect>
    return rmem;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	e09a      	b.n	800f27a <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	3b08      	subs	r3, #8
 800f148:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800f14a:	69fb      	ldr	r3, [r7, #28]
 800f14c:	4a4d      	ldr	r2, [pc, #308]	; (800f284 <mem_trim+0x1b4>)
 800f14e:	6812      	ldr	r2, [r2, #0]
 800f150:	1a9b      	subs	r3, r3, r2
 800f152:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800f154:	69fb      	ldr	r3, [r7, #28]
 800f156:	881a      	ldrh	r2, [r3, #0]
 800f158:	8b7b      	ldrh	r3, [r7, #26]
 800f15a:	1ad3      	subs	r3, r2, r3
 800f15c:	b29b      	uxth	r3, r3
 800f15e:	3b08      	subs	r3, #8
 800f160:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f162:	887a      	ldrh	r2, [r7, #2]
 800f164:	8b3b      	ldrh	r3, [r7, #24]
 800f166:	429a      	cmp	r2, r3
 800f168:	d906      	bls.n	800f178 <mem_trim+0xa8>
 800f16a:	4b48      	ldr	r3, [pc, #288]	; (800f28c <mem_trim+0x1bc>)
 800f16c:	f240 2206 	movw	r2, #518	; 0x206
 800f170:	4949      	ldr	r1, [pc, #292]	; (800f298 <mem_trim+0x1c8>)
 800f172:	4848      	ldr	r0, [pc, #288]	; (800f294 <mem_trim+0x1c4>)
 800f174:	f008 fdc6 	bl	8017d04 <iprintf>
  if (newsize > size) {
 800f178:	887a      	ldrh	r2, [r7, #2]
 800f17a:	8b3b      	ldrh	r3, [r7, #24]
 800f17c:	429a      	cmp	r2, r3
 800f17e:	d901      	bls.n	800f184 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800f180:	2300      	movs	r3, #0
 800f182:	e07a      	b.n	800f27a <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800f184:	887a      	ldrh	r2, [r7, #2]
 800f186:	8b3b      	ldrh	r3, [r7, #24]
 800f188:	429a      	cmp	r2, r3
 800f18a:	d101      	bne.n	800f190 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	e074      	b.n	800f27a <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f190:	4842      	ldr	r0, [pc, #264]	; (800f29c <mem_trim+0x1cc>)
 800f192:	f008 fd11 	bl	8017bb8 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800f196:	4b3b      	ldr	r3, [pc, #236]	; (800f284 <mem_trim+0x1b4>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	69fa      	ldr	r2, [r7, #28]
 800f19c:	8812      	ldrh	r2, [r2, #0]
 800f19e:	4413      	add	r3, r2
 800f1a0:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	791b      	ldrb	r3, [r3, #4]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d131      	bne.n	800f20e <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	881b      	ldrh	r3, [r3, #0]
 800f1ae:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800f1b0:	8b7a      	ldrh	r2, [r7, #26]
 800f1b2:	887b      	ldrh	r3, [r7, #2]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	b29b      	uxth	r3, r3
 800f1b8:	3308      	adds	r3, #8
 800f1ba:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800f1bc:	4b38      	ldr	r3, [pc, #224]	; (800f2a0 <mem_trim+0x1d0>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	697a      	ldr	r2, [r7, #20]
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d105      	bne.n	800f1d2 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800f1c6:	4b2f      	ldr	r3, [pc, #188]	; (800f284 <mem_trim+0x1b4>)
 800f1c8:	681a      	ldr	r2, [r3, #0]
 800f1ca:	8a7b      	ldrh	r3, [r7, #18]
 800f1cc:	4413      	add	r3, r2
 800f1ce:	4a34      	ldr	r2, [pc, #208]	; (800f2a0 <mem_trim+0x1d0>)
 800f1d0:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800f1d2:	4b2c      	ldr	r3, [pc, #176]	; (800f284 <mem_trim+0x1b4>)
 800f1d4:	681a      	ldr	r2, [r3, #0]
 800f1d6:	8a7b      	ldrh	r3, [r7, #18]
 800f1d8:	4413      	add	r3, r2
 800f1da:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800f1dc:	697b      	ldr	r3, [r7, #20]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	8a3a      	ldrh	r2, [r7, #16]
 800f1e6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	8b7a      	ldrh	r2, [r7, #26]
 800f1ec:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f1ee:	69fb      	ldr	r3, [r7, #28]
 800f1f0:	8a7a      	ldrh	r2, [r7, #18]
 800f1f2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	881b      	ldrh	r3, [r3, #0]
 800f1f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f1fc:	d039      	beq.n	800f272 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800f1fe:	4b21      	ldr	r3, [pc, #132]	; (800f284 <mem_trim+0x1b4>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	697a      	ldr	r2, [r7, #20]
 800f204:	8812      	ldrh	r2, [r2, #0]
 800f206:	4413      	add	r3, r2
 800f208:	8a7a      	ldrh	r2, [r7, #18]
 800f20a:	805a      	strh	r2, [r3, #2]
 800f20c:	e031      	b.n	800f272 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f20e:	887b      	ldrh	r3, [r7, #2]
 800f210:	f103 0214 	add.w	r2, r3, #20
 800f214:	8b3b      	ldrh	r3, [r7, #24]
 800f216:	429a      	cmp	r2, r3
 800f218:	d82b      	bhi.n	800f272 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800f21a:	8b7a      	ldrh	r2, [r7, #26]
 800f21c:	887b      	ldrh	r3, [r7, #2]
 800f21e:	4413      	add	r3, r2
 800f220:	b29b      	uxth	r3, r3
 800f222:	3308      	adds	r3, #8
 800f224:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800f226:	4b17      	ldr	r3, [pc, #92]	; (800f284 <mem_trim+0x1b4>)
 800f228:	681a      	ldr	r2, [r3, #0]
 800f22a:	8a7b      	ldrh	r3, [r7, #18]
 800f22c:	4413      	add	r3, r2
 800f22e:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800f230:	4b1b      	ldr	r3, [pc, #108]	; (800f2a0 <mem_trim+0x1d0>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	697a      	ldr	r2, [r7, #20]
 800f236:	429a      	cmp	r2, r3
 800f238:	d202      	bcs.n	800f240 <mem_trim+0x170>
      lfree = mem2;
 800f23a:	4a19      	ldr	r2, [pc, #100]	; (800f2a0 <mem_trim+0x1d0>)
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	2200      	movs	r2, #0
 800f244:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f246:	69fb      	ldr	r3, [r7, #28]
 800f248:	881a      	ldrh	r2, [r3, #0]
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	8b7a      	ldrh	r2, [r7, #26]
 800f252:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f254:	69fb      	ldr	r3, [r7, #28]
 800f256:	8a7a      	ldrh	r2, [r7, #18]
 800f258:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	881b      	ldrh	r3, [r3, #0]
 800f25e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f262:	d006      	beq.n	800f272 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800f264:	4b07      	ldr	r3, [pc, #28]	; (800f284 <mem_trim+0x1b4>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	697a      	ldr	r2, [r7, #20]
 800f26a:	8812      	ldrh	r2, [r2, #0]
 800f26c:	4413      	add	r3, r2
 800f26e:	8a7a      	ldrh	r2, [r7, #18]
 800f270:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f272:	480a      	ldr	r0, [pc, #40]	; (800f29c <mem_trim+0x1cc>)
 800f274:	f008 fcaf 	bl	8017bd6 <sys_mutex_unlock>
  return rmem;
 800f278:	687b      	ldr	r3, [r7, #4]
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3720      	adds	r7, #32
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
 800f282:	bf00      	nop
 800f284:	240217b4 	.word	0x240217b4
 800f288:	240217b8 	.word	0x240217b8
 800f28c:	08018f3c 	.word	0x08018f3c
 800f290:	0801907c 	.word	0x0801907c
 800f294:	08018f84 	.word	0x08018f84
 800f298:	08019094 	.word	0x08019094
 800f29c:	240217c0 	.word	0x240217c0
 800f2a0:	240217bc 	.word	0x240217bc

0800f2a4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b088      	sub	sp, #32
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800f2ae:	88fb      	ldrh	r3, [r7, #6]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d101      	bne.n	800f2b8 <mem_malloc+0x14>
    return NULL;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	e0d1      	b.n	800f45c <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800f2b8:	88fb      	ldrh	r3, [r7, #6]
 800f2ba:	3303      	adds	r3, #3
 800f2bc:	b29b      	uxth	r3, r3
 800f2be:	f023 0303 	bic.w	r3, r3, #3
 800f2c2:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800f2c4:	88fb      	ldrh	r3, [r7, #6]
 800f2c6:	2b0b      	cmp	r3, #11
 800f2c8:	d801      	bhi.n	800f2ce <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f2ca:	230c      	movs	r3, #12
 800f2cc:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800f2ce:	88fb      	ldrh	r3, [r7, #6]
 800f2d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f2d4:	d901      	bls.n	800f2da <mem_malloc+0x36>
    return NULL;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	e0c0      	b.n	800f45c <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f2da:	4862      	ldr	r0, [pc, #392]	; (800f464 <mem_malloc+0x1c0>)
 800f2dc:	f008 fc6c 	bl	8017bb8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800f2e0:	4b61      	ldr	r3, [pc, #388]	; (800f468 <mem_malloc+0x1c4>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	461a      	mov	r2, r3
 800f2e6:	4b61      	ldr	r3, [pc, #388]	; (800f46c <mem_malloc+0x1c8>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	1ad3      	subs	r3, r2, r3
 800f2ec:	83fb      	strh	r3, [r7, #30]
 800f2ee:	e0aa      	b.n	800f446 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800f2f0:	4b5e      	ldr	r3, [pc, #376]	; (800f46c <mem_malloc+0x1c8>)
 800f2f2:	681a      	ldr	r2, [r3, #0]
 800f2f4:	8bfb      	ldrh	r3, [r7, #30]
 800f2f6:	4413      	add	r3, r2
 800f2f8:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	791b      	ldrb	r3, [r3, #4]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	f040 809b 	bne.w	800f43a <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	881b      	ldrh	r3, [r3, #0]
 800f308:	461a      	mov	r2, r3
 800f30a:	8bfb      	ldrh	r3, [r7, #30]
 800f30c:	1ad3      	subs	r3, r2, r3
 800f30e:	f1a3 0208 	sub.w	r2, r3, #8
 800f312:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800f314:	429a      	cmp	r2, r3
 800f316:	f0c0 8090 	bcc.w	800f43a <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	881b      	ldrh	r3, [r3, #0]
 800f31e:	461a      	mov	r2, r3
 800f320:	8bfb      	ldrh	r3, [r7, #30]
 800f322:	1ad3      	subs	r3, r2, r3
 800f324:	f1a3 0208 	sub.w	r2, r3, #8
 800f328:	88fb      	ldrh	r3, [r7, #6]
 800f32a:	3314      	adds	r3, #20
 800f32c:	429a      	cmp	r2, r3
 800f32e:	d327      	bcc.n	800f380 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800f330:	8bfa      	ldrh	r2, [r7, #30]
 800f332:	88fb      	ldrh	r3, [r7, #6]
 800f334:	4413      	add	r3, r2
 800f336:	b29b      	uxth	r3, r3
 800f338:	3308      	adds	r3, #8
 800f33a:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800f33c:	4b4b      	ldr	r3, [pc, #300]	; (800f46c <mem_malloc+0x1c8>)
 800f33e:	681a      	ldr	r2, [r3, #0]
 800f340:	8a7b      	ldrh	r3, [r7, #18]
 800f342:	4413      	add	r3, r2
 800f344:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2200      	movs	r2, #0
 800f34a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	881a      	ldrh	r2, [r3, #0]
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	8bfa      	ldrh	r2, [r7, #30]
 800f358:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	8a7a      	ldrh	r2, [r7, #18]
 800f35e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	2201      	movs	r2, #1
 800f364:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	881b      	ldrh	r3, [r3, #0]
 800f36a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f36e:	d00a      	beq.n	800f386 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800f370:	4b3e      	ldr	r3, [pc, #248]	; (800f46c <mem_malloc+0x1c8>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	68fa      	ldr	r2, [r7, #12]
 800f376:	8812      	ldrh	r2, [r2, #0]
 800f378:	4413      	add	r3, r2
 800f37a:	8a7a      	ldrh	r2, [r7, #18]
 800f37c:	805a      	strh	r2, [r3, #2]
 800f37e:	e002      	b.n	800f386 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	2201      	movs	r2, #1
 800f384:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f386:	4b38      	ldr	r3, [pc, #224]	; (800f468 <mem_malloc+0x1c4>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	697a      	ldr	r2, [r7, #20]
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d127      	bne.n	800f3e0 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800f390:	4b35      	ldr	r3, [pc, #212]	; (800f468 <mem_malloc+0x1c4>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f396:	e005      	b.n	800f3a4 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800f398:	4b34      	ldr	r3, [pc, #208]	; (800f46c <mem_malloc+0x1c8>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	69ba      	ldr	r2, [r7, #24]
 800f39e:	8812      	ldrh	r2, [r2, #0]
 800f3a0:	4413      	add	r3, r2
 800f3a2:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f3a4:	69bb      	ldr	r3, [r7, #24]
 800f3a6:	791b      	ldrb	r3, [r3, #4]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d004      	beq.n	800f3b6 <mem_malloc+0x112>
 800f3ac:	4b30      	ldr	r3, [pc, #192]	; (800f470 <mem_malloc+0x1cc>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	69ba      	ldr	r2, [r7, #24]
 800f3b2:	429a      	cmp	r2, r3
 800f3b4:	d1f0      	bne.n	800f398 <mem_malloc+0xf4>
          }
          lfree = cur;
 800f3b6:	4a2c      	ldr	r2, [pc, #176]	; (800f468 <mem_malloc+0x1c4>)
 800f3b8:	69bb      	ldr	r3, [r7, #24]
 800f3ba:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f3bc:	4b2a      	ldr	r3, [pc, #168]	; (800f468 <mem_malloc+0x1c4>)
 800f3be:	681a      	ldr	r2, [r3, #0]
 800f3c0:	4b2b      	ldr	r3, [pc, #172]	; (800f470 <mem_malloc+0x1cc>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	d00b      	beq.n	800f3e0 <mem_malloc+0x13c>
 800f3c8:	4b27      	ldr	r3, [pc, #156]	; (800f468 <mem_malloc+0x1c4>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	791b      	ldrb	r3, [r3, #4]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d006      	beq.n	800f3e0 <mem_malloc+0x13c>
 800f3d2:	4b28      	ldr	r3, [pc, #160]	; (800f474 <mem_malloc+0x1d0>)
 800f3d4:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f3d8:	4927      	ldr	r1, [pc, #156]	; (800f478 <mem_malloc+0x1d4>)
 800f3da:	4828      	ldr	r0, [pc, #160]	; (800f47c <mem_malloc+0x1d8>)
 800f3dc:	f008 fc92 	bl	8017d04 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f3e0:	4820      	ldr	r0, [pc, #128]	; (800f464 <mem_malloc+0x1c0>)
 800f3e2:	f008 fbf8 	bl	8017bd6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f3e6:	88fa      	ldrh	r2, [r7, #6]
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	4413      	add	r3, r2
 800f3ec:	3308      	adds	r3, #8
 800f3ee:	4a20      	ldr	r2, [pc, #128]	; (800f470 <mem_malloc+0x1cc>)
 800f3f0:	6812      	ldr	r2, [r2, #0]
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d906      	bls.n	800f404 <mem_malloc+0x160>
 800f3f6:	4b1f      	ldr	r3, [pc, #124]	; (800f474 <mem_malloc+0x1d0>)
 800f3f8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800f3fc:	4920      	ldr	r1, [pc, #128]	; (800f480 <mem_malloc+0x1dc>)
 800f3fe:	481f      	ldr	r0, [pc, #124]	; (800f47c <mem_malloc+0x1d8>)
 800f400:	f008 fc80 	bl	8017d04 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	f003 0303 	and.w	r3, r3, #3
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d006      	beq.n	800f41c <mem_malloc+0x178>
 800f40e:	4b19      	ldr	r3, [pc, #100]	; (800f474 <mem_malloc+0x1d0>)
 800f410:	f240 22d6 	movw	r2, #726	; 0x2d6
 800f414:	491b      	ldr	r1, [pc, #108]	; (800f484 <mem_malloc+0x1e0>)
 800f416:	4819      	ldr	r0, [pc, #100]	; (800f47c <mem_malloc+0x1d8>)
 800f418:	f008 fc74 	bl	8017d04 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f41c:	697b      	ldr	r3, [r7, #20]
 800f41e:	f003 0303 	and.w	r3, r3, #3
 800f422:	2b00      	cmp	r3, #0
 800f424:	d006      	beq.n	800f434 <mem_malloc+0x190>
 800f426:	4b13      	ldr	r3, [pc, #76]	; (800f474 <mem_malloc+0x1d0>)
 800f428:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800f42c:	4916      	ldr	r1, [pc, #88]	; (800f488 <mem_malloc+0x1e4>)
 800f42e:	4813      	ldr	r0, [pc, #76]	; (800f47c <mem_malloc+0x1d8>)
 800f430:	f008 fc68 	bl	8017d04 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800f434:	697b      	ldr	r3, [r7, #20]
 800f436:	3308      	adds	r3, #8
 800f438:	e010      	b.n	800f45c <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800f43a:	4b0c      	ldr	r3, [pc, #48]	; (800f46c <mem_malloc+0x1c8>)
 800f43c:	681a      	ldr	r2, [r3, #0]
 800f43e:	8bfb      	ldrh	r3, [r7, #30]
 800f440:	4413      	add	r3, r2
 800f442:	881b      	ldrh	r3, [r3, #0]
 800f444:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800f446:	8bfa      	ldrh	r2, [r7, #30]
 800f448:	88fb      	ldrh	r3, [r7, #6]
 800f44a:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800f44e:	429a      	cmp	r2, r3
 800f450:	f4ff af4e 	bcc.w	800f2f0 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f454:	4803      	ldr	r0, [pc, #12]	; (800f464 <mem_malloc+0x1c0>)
 800f456:	f008 fbbe 	bl	8017bd6 <sys_mutex_unlock>
  return NULL;
 800f45a:	2300      	movs	r3, #0
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	3720      	adds	r7, #32
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}
 800f464:	240217c0 	.word	0x240217c0
 800f468:	240217bc 	.word	0x240217bc
 800f46c:	240217b4 	.word	0x240217b4
 800f470:	240217b8 	.word	0x240217b8
 800f474:	08018f3c 	.word	0x08018f3c
 800f478:	080190b4 	.word	0x080190b4
 800f47c:	08018f84 	.word	0x08018f84
 800f480:	080190d0 	.word	0x080190d0
 800f484:	08019100 	.word	0x08019100
 800f488:	08019130 	.word	0x08019130

0800f48c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b085      	sub	sp, #20
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	689b      	ldr	r3, [r3, #8]
 800f498:	2200      	movs	r2, #0
 800f49a:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	685b      	ldr	r3, [r3, #4]
 800f4a0:	3303      	adds	r3, #3
 800f4a2:	f023 0303 	bic.w	r3, r3, #3
 800f4a6:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	60fb      	str	r3, [r7, #12]
 800f4ac:	e011      	b.n	800f4d2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	689b      	ldr	r3, [r3, #8]
 800f4b2:	681a      	ldr	r2, [r3, #0]
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	689b      	ldr	r3, [r3, #8]
 800f4bc:	68ba      	ldr	r2, [r7, #8]
 800f4be:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	881b      	ldrh	r3, [r3, #0]
 800f4c4:	461a      	mov	r2, r3
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	4413      	add	r3, r2
 800f4ca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	3301      	adds	r3, #1
 800f4d0:	60fb      	str	r3, [r7, #12]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	885b      	ldrh	r3, [r3, #2]
 800f4d6:	461a      	mov	r2, r3
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	4293      	cmp	r3, r2
 800f4dc:	dbe7      	blt.n	800f4ae <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f4de:	bf00      	nop
 800f4e0:	3714      	adds	r7, #20
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e8:	4770      	bx	lr
	...

0800f4ec <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b082      	sub	sp, #8
 800f4f0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	80fb      	strh	r3, [r7, #6]
 800f4f6:	e009      	b.n	800f50c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f4f8:	88fb      	ldrh	r3, [r7, #6]
 800f4fa:	4a08      	ldr	r2, [pc, #32]	; (800f51c <memp_init+0x30>)
 800f4fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f500:	4618      	mov	r0, r3
 800f502:	f7ff ffc3 	bl	800f48c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f506:	88fb      	ldrh	r3, [r7, #6]
 800f508:	3301      	adds	r3, #1
 800f50a:	80fb      	strh	r3, [r7, #6]
 800f50c:	88fb      	ldrh	r3, [r7, #6]
 800f50e:	2b0d      	cmp	r3, #13
 800f510:	d9f2      	bls.n	800f4f8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f512:	bf00      	nop
 800f514:	3708      	adds	r7, #8
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	0801acd4 	.word	0x0801acd4

0800f520 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b084      	sub	sp, #16
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f528:	f008 fb88 	bl	8017c3c <sys_arch_protect>
 800f52c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	689b      	ldr	r3, [r3, #8]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d015      	beq.n	800f568 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	689b      	ldr	r3, [r3, #8]
 800f540:	68ba      	ldr	r2, [r7, #8]
 800f542:	6812      	ldr	r2, [r2, #0]
 800f544:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f546:	68bb      	ldr	r3, [r7, #8]
 800f548:	f003 0303 	and.w	r3, r3, #3
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d006      	beq.n	800f55e <do_memp_malloc_pool+0x3e>
 800f550:	4b09      	ldr	r3, [pc, #36]	; (800f578 <do_memp_malloc_pool+0x58>)
 800f552:	f240 1249 	movw	r2, #329	; 0x149
 800f556:	4909      	ldr	r1, [pc, #36]	; (800f57c <do_memp_malloc_pool+0x5c>)
 800f558:	4809      	ldr	r0, [pc, #36]	; (800f580 <do_memp_malloc_pool+0x60>)
 800f55a:	f008 fbd3 	bl	8017d04 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f55e:	68f8      	ldr	r0, [r7, #12]
 800f560:	f008 fb7a 	bl	8017c58 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	e003      	b.n	800f570 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800f568:	68f8      	ldr	r0, [r7, #12]
 800f56a:	f008 fb75 	bl	8017c58 <sys_arch_unprotect>
  return NULL;
 800f56e:	2300      	movs	r3, #0
}
 800f570:	4618      	mov	r0, r3
 800f572:	3710      	adds	r7, #16
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}
 800f578:	08019154 	.word	0x08019154
 800f57c:	08019184 	.word	0x08019184
 800f580:	080191a8 	.word	0x080191a8

0800f584 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d106      	bne.n	800f5a0 <memp_malloc_pool+0x1c>
 800f592:	4b0a      	ldr	r3, [pc, #40]	; (800f5bc <memp_malloc_pool+0x38>)
 800f594:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800f598:	4909      	ldr	r1, [pc, #36]	; (800f5c0 <memp_malloc_pool+0x3c>)
 800f59a:	480a      	ldr	r0, [pc, #40]	; (800f5c4 <memp_malloc_pool+0x40>)
 800f59c:	f008 fbb2 	bl	8017d04 <iprintf>
  if (desc == NULL) {
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d101      	bne.n	800f5aa <memp_malloc_pool+0x26>
    return NULL;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	e003      	b.n	800f5b2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f7ff ffb8 	bl	800f520 <do_memp_malloc_pool>
 800f5b0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	3708      	adds	r7, #8
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
 800f5ba:	bf00      	nop
 800f5bc:	08019154 	.word	0x08019154
 800f5c0:	080191d0 	.word	0x080191d0
 800f5c4:	080191a8 	.word	0x080191a8

0800f5c8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b084      	sub	sp, #16
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f5d2:	79fb      	ldrb	r3, [r7, #7]
 800f5d4:	2b0d      	cmp	r3, #13
 800f5d6:	d908      	bls.n	800f5ea <memp_malloc+0x22>
 800f5d8:	4b0a      	ldr	r3, [pc, #40]	; (800f604 <memp_malloc+0x3c>)
 800f5da:	f240 1287 	movw	r2, #391	; 0x187
 800f5de:	490a      	ldr	r1, [pc, #40]	; (800f608 <memp_malloc+0x40>)
 800f5e0:	480a      	ldr	r0, [pc, #40]	; (800f60c <memp_malloc+0x44>)
 800f5e2:	f008 fb8f 	bl	8017d04 <iprintf>
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	e008      	b.n	800f5fc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f5ea:	79fb      	ldrb	r3, [r7, #7]
 800f5ec:	4a08      	ldr	r2, [pc, #32]	; (800f610 <memp_malloc+0x48>)
 800f5ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	f7ff ff94 	bl	800f520 <do_memp_malloc_pool>
 800f5f8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3710      	adds	r7, #16
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}
 800f604:	08019154 	.word	0x08019154
 800f608:	080191e4 	.word	0x080191e4
 800f60c:	080191a8 	.word	0x080191a8
 800f610:	0801acd4 	.word	0x0801acd4

0800f614 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b084      	sub	sp, #16
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
 800f61c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	f003 0303 	and.w	r3, r3, #3
 800f624:	2b00      	cmp	r3, #0
 800f626:	d006      	beq.n	800f636 <do_memp_free_pool+0x22>
 800f628:	4b0d      	ldr	r3, [pc, #52]	; (800f660 <do_memp_free_pool+0x4c>)
 800f62a:	f240 129d 	movw	r2, #413	; 0x19d
 800f62e:	490d      	ldr	r1, [pc, #52]	; (800f664 <do_memp_free_pool+0x50>)
 800f630:	480d      	ldr	r0, [pc, #52]	; (800f668 <do_memp_free_pool+0x54>)
 800f632:	f008 fb67 	bl	8017d04 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f63a:	f008 faff 	bl	8017c3c <sys_arch_protect>
 800f63e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	689b      	ldr	r3, [r3, #8]
 800f644:	681a      	ldr	r2, [r3, #0]
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	689b      	ldr	r3, [r3, #8]
 800f64e:	68fa      	ldr	r2, [r7, #12]
 800f650:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f652:	68b8      	ldr	r0, [r7, #8]
 800f654:	f008 fb00 	bl	8017c58 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f658:	bf00      	nop
 800f65a:	3710      	adds	r7, #16
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}
 800f660:	08019154 	.word	0x08019154
 800f664:	08019204 	.word	0x08019204
 800f668:	080191a8 	.word	0x080191a8

0800f66c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b082      	sub	sp, #8
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d106      	bne.n	800f68a <memp_free_pool+0x1e>
 800f67c:	4b0a      	ldr	r3, [pc, #40]	; (800f6a8 <memp_free_pool+0x3c>)
 800f67e:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 800f682:	490a      	ldr	r1, [pc, #40]	; (800f6ac <memp_free_pool+0x40>)
 800f684:	480a      	ldr	r0, [pc, #40]	; (800f6b0 <memp_free_pool+0x44>)
 800f686:	f008 fb3d 	bl	8017d04 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d007      	beq.n	800f6a0 <memp_free_pool+0x34>
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d004      	beq.n	800f6a0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800f696:	6839      	ldr	r1, [r7, #0]
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f7ff ffbb 	bl	800f614 <do_memp_free_pool>
 800f69e:	e000      	b.n	800f6a2 <memp_free_pool+0x36>
    return;
 800f6a0:	bf00      	nop
}
 800f6a2:	3708      	adds	r7, #8
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}
 800f6a8:	08019154 	.word	0x08019154
 800f6ac:	080191d0 	.word	0x080191d0
 800f6b0:	080191a8 	.word	0x080191a8

0800f6b4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b082      	sub	sp, #8
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	6039      	str	r1, [r7, #0]
 800f6be:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f6c0:	79fb      	ldrb	r3, [r7, #7]
 800f6c2:	2b0d      	cmp	r3, #13
 800f6c4:	d907      	bls.n	800f6d6 <memp_free+0x22>
 800f6c6:	4b0c      	ldr	r3, [pc, #48]	; (800f6f8 <memp_free+0x44>)
 800f6c8:	f240 12db 	movw	r2, #475	; 0x1db
 800f6cc:	490b      	ldr	r1, [pc, #44]	; (800f6fc <memp_free+0x48>)
 800f6ce:	480c      	ldr	r0, [pc, #48]	; (800f700 <memp_free+0x4c>)
 800f6d0:	f008 fb18 	bl	8017d04 <iprintf>
 800f6d4:	e00c      	b.n	800f6f0 <memp_free+0x3c>

  if (mem == NULL) {
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d008      	beq.n	800f6ee <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f6dc:	79fb      	ldrb	r3, [r7, #7]
 800f6de:	4a09      	ldr	r2, [pc, #36]	; (800f704 <memp_free+0x50>)
 800f6e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6e4:	6839      	ldr	r1, [r7, #0]
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f7ff ff94 	bl	800f614 <do_memp_free_pool>
 800f6ec:	e000      	b.n	800f6f0 <memp_free+0x3c>
    return;
 800f6ee:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f6f0:	3708      	adds	r7, #8
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
 800f6f6:	bf00      	nop
 800f6f8:	08019154 	.word	0x08019154
 800f6fc:	08019224 	.word	0x08019224
 800f700:	080191a8 	.word	0x080191a8
 800f704:	0801acd4 	.word	0x0801acd4

0800f708 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f708:	b480      	push	{r7}
 800f70a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f70c:	bf00      	nop
 800f70e:	46bd      	mov	sp, r7
 800f710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f714:	4770      	bx	lr
	...

0800f718 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b084      	sub	sp, #16
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	60f8      	str	r0, [r7, #12]
 800f720:	60b9      	str	r1, [r7, #8]
 800f722:	607a      	str	r2, [r7, #4]
 800f724:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800f726:	69fb      	ldr	r3, [r7, #28]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d105      	bne.n	800f738 <netif_add+0x20>
 800f72c:	4b26      	ldr	r3, [pc, #152]	; (800f7c8 <netif_add+0xb0>)
 800f72e:	22fb      	movs	r2, #251	; 0xfb
 800f730:	4926      	ldr	r1, [pc, #152]	; (800f7cc <netif_add+0xb4>)
 800f732:	4827      	ldr	r0, [pc, #156]	; (800f7d0 <netif_add+0xb8>)
 800f734:	f008 fae6 	bl	8017d04 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	2200      	movs	r2, #0
 800f73c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	2200      	movs	r2, #0
 800f742:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	2200      	movs	r2, #0
 800f748:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	2200      	movs	r2, #0
 800f74e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	3328      	adds	r3, #40	; 0x28
 800f756:	2204      	movs	r2, #4
 800f758:	2100      	movs	r1, #0
 800f75a:	4618      	mov	r0, r3
 800f75c:	f008 faca 	bl	8017cf4 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	2203      	movs	r2, #3
 800f764:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	2200      	movs	r2, #0
 800f76c:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	2200      	movs	r2, #0
 800f772:	621a      	str	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	69ba      	ldr	r2, [r7, #24]
 800f778:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num++;
 800f77a:	4b16      	ldr	r3, [pc, #88]	; (800f7d4 <netif_add+0xbc>)
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	1c5a      	adds	r2, r3, #1
 800f780:	b2d1      	uxtb	r1, r2
 800f782:	4a14      	ldr	r2, [pc, #80]	; (800f7d4 <netif_add+0xbc>)
 800f784:	7011      	strb	r1, [r2, #0]
 800f786:	68fa      	ldr	r2, [r7, #12]
 800f788:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  netif->input = input;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	6a3a      	ldr	r2, [r7, #32]
 800f790:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	687a      	ldr	r2, [r7, #4]
 800f796:	68b9      	ldr	r1, [r7, #8]
 800f798:	68f8      	ldr	r0, [r7, #12]
 800f79a:	f000 f81f 	bl	800f7dc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f79e:	69fb      	ldr	r3, [r7, #28]
 800f7a0:	68f8      	ldr	r0, [r7, #12]
 800f7a2:	4798      	blx	r3
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d001      	beq.n	800f7ae <netif_add+0x96>
    return NULL;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	e007      	b.n	800f7be <netif_add+0xa6>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f7ae:	4b0a      	ldr	r3, [pc, #40]	; (800f7d8 <netif_add+0xc0>)
 800f7b0:	681a      	ldr	r2, [r3, #0]
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f7b6:	4a08      	ldr	r2, [pc, #32]	; (800f7d8 <netif_add+0xc0>)
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3710      	adds	r7, #16
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	bf00      	nop
 800f7c8:	08019240 	.word	0x08019240
 800f7cc:	08019274 	.word	0x08019274
 800f7d0:	0801928c 	.word	0x0801928c
 800f7d4:	240217fc 	.word	0x240217fc
 800f7d8:	24024e3c 	.word	0x24024e3c

0800f7dc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b084      	sub	sp, #16
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	60f8      	str	r0, [r7, #12]
 800f7e4:	60b9      	str	r1, [r7, #8]
 800f7e6:	607a      	str	r2, [r7, #4]
 800f7e8:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d003      	beq.n	800f7f8 <netif_set_addr+0x1c>
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d10c      	bne.n	800f812 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800f7f8:	68b9      	ldr	r1, [r7, #8]
 800f7fa:	68f8      	ldr	r0, [r7, #12]
 800f7fc:	f000 f81a 	bl	800f834 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800f800:	6879      	ldr	r1, [r7, #4]
 800f802:	68f8      	ldr	r0, [r7, #12]
 800f804:	f000 f86a 	bl	800f8dc <netif_set_netmask>
    netif_set_gw(netif, gw);
 800f808:	6839      	ldr	r1, [r7, #0]
 800f80a:	68f8      	ldr	r0, [r7, #12]
 800f80c:	f000 f852 	bl	800f8b4 <netif_set_gw>
 800f810:	e00b      	b.n	800f82a <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800f812:	6879      	ldr	r1, [r7, #4]
 800f814:	68f8      	ldr	r0, [r7, #12]
 800f816:	f000 f861 	bl	800f8dc <netif_set_netmask>
    netif_set_gw(netif, gw);
 800f81a:	6839      	ldr	r1, [r7, #0]
 800f81c:	68f8      	ldr	r0, [r7, #12]
 800f81e:	f000 f849 	bl	800f8b4 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800f822:	68b9      	ldr	r1, [r7, #8]
 800f824:	68f8      	ldr	r0, [r7, #12]
 800f826:	f000 f805 	bl	800f834 <netif_set_ipaddr>
  }
}
 800f82a:	bf00      	nop
 800f82c:	3710      	adds	r7, #16
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}
	...

0800f834 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b084      	sub	sp, #16
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d003      	beq.n	800f84c <netif_set_ipaddr+0x18>
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	60fb      	str	r3, [r7, #12]
 800f84a:	e002      	b.n	800f852 <netif_set_ipaddr+0x1e>
 800f84c:	4b18      	ldr	r3, [pc, #96]	; (800f8b0 <netif_set_ipaddr+0x7c>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800f852:	68fa      	ldr	r2, [r7, #12]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	3304      	adds	r3, #4
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d024      	beq.n	800f8a8 <netif_set_ipaddr+0x74>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	3304      	adds	r3, #4
 800f862:	f107 020c 	add.w	r2, r7, #12
 800f866:	4611      	mov	r1, r2
 800f868:	4618      	mov	r0, r3
 800f86a:	f002 f913 	bl	8011a94 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	3304      	adds	r3, #4
 800f872:	f107 020c 	add.w	r2, r7, #12
 800f876:	4611      	mov	r1, r2
 800f878:	4618      	mov	r0, r3
 800f87a:	f005 fda5 	bl	80153c8 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d002      	beq.n	800f88a <netif_set_ipaddr+0x56>
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	e000      	b.n	800f88c <netif_set_ipaddr+0x58>
 800f88a:	2300      	movs	r3, #0
 800f88c:	687a      	ldr	r2, [r7, #4]
 800f88e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f890:	2101      	movs	r1, #1
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f000 f871 	bl	800f97a <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	69db      	ldr	r3, [r3, #28]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d003      	beq.n	800f8a8 <netif_set_ipaddr+0x74>
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	69db      	ldr	r3, [r3, #28]
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	4798      	blx	r3
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800f8a8:	bf00      	nop
 800f8aa:	3710      	adds	r7, #16
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}
 800f8b0:	0801ad4c 	.word	0x0801ad4c

0800f8b4 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800f8b4:	b480      	push	{r7}
 800f8b6:	b083      	sub	sp, #12
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d002      	beq.n	800f8ca <netif_set_gw+0x16>
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	e000      	b.n	800f8cc <netif_set_gw+0x18>
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	687a      	ldr	r2, [r7, #4]
 800f8ce:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800f8d0:	bf00      	nop
 800f8d2:	370c      	adds	r7, #12
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8da:	4770      	bx	lr

0800f8dc <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b083      	sub	sp, #12
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d002      	beq.n	800f8f2 <netif_set_netmask+0x16>
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	e000      	b.n	800f8f4 <netif_set_netmask+0x18>
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	687a      	ldr	r2, [r7, #4]
 800f8f6:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800f8f8:	bf00      	nop
 800f8fa:	370c      	adds	r7, #12
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f902:	4770      	bx	lr

0800f904 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f904:	b480      	push	{r7}
 800f906:	b083      	sub	sp, #12
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f90c:	4a04      	ldr	r2, [pc, #16]	; (800f920 <netif_set_default+0x1c>)
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f912:	bf00      	nop
 800f914:	370c      	adds	r7, #12
 800f916:	46bd      	mov	sp, r7
 800f918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91c:	4770      	bx	lr
 800f91e:	bf00      	nop
 800f920:	24024e40 	.word	0x24024e40

0800f924 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b082      	sub	sp, #8
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f932:	f003 0301 	and.w	r3, r3, #1
 800f936:	2b00      	cmp	r3, #0
 800f938:	d11b      	bne.n	800f972 <netif_set_up+0x4e>
    netif->flags |= NETIF_FLAG_UP;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f940:	f043 0301 	orr.w	r3, r3, #1
 800f944:	b2da      	uxtb	r2, r3
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	69db      	ldr	r3, [r3, #28]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d003      	beq.n	800f95c <netif_set_up+0x38>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	69db      	ldr	r3, [r3, #28]
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	4798      	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f962:	f003 0304 	and.w	r3, r3, #4
 800f966:	2b00      	cmp	r3, #0
 800f968:	d003      	beq.n	800f972 <netif_set_up+0x4e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800f96a:	2103      	movs	r1, #3
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f000 f804 	bl	800f97a <netif_issue_reports>
    }
  }
}
 800f972:	bf00      	nop
 800f974:	3708      	adds	r7, #8
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}

0800f97a <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800f97a:	b580      	push	{r7, lr}
 800f97c:	b082      	sub	sp, #8
 800f97e:	af00      	add	r7, sp, #0
 800f980:	6078      	str	r0, [r7, #4]
 800f982:	460b      	mov	r3, r1
 800f984:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f986:	78fb      	ldrb	r3, [r7, #3]
 800f988:	f003 0301 	and.w	r3, r3, #1
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d011      	beq.n	800f9b4 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	3304      	adds	r3, #4
 800f994:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f996:	2b00      	cmp	r3, #0
 800f998:	d00c      	beq.n	800f9b4 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f9a0:	f003 0308 	and.w	r3, r3, #8
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d005      	beq.n	800f9b4 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	3304      	adds	r3, #4
 800f9ac:	4619      	mov	r1, r3
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f006 fcfe 	bl	80163b0 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800f9b4:	bf00      	nop
 800f9b6:	3708      	adds	r7, #8
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}

0800f9bc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b082      	sub	sp, #8
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f9ca:	f003 0301 	and.w	r3, r3, #1
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d01a      	beq.n	800fa08 <netif_set_down+0x4c>
    netif->flags &= ~NETIF_FLAG_UP;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f9d8:	f023 0301 	bic.w	r3, r3, #1
 800f9dc:	b2da      	uxtb	r2, r3
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800f9ea:	f003 0308 	and.w	r3, r3, #8
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d002      	beq.n	800f9f8 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f006 f852 	bl	8015a9c <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	69db      	ldr	r3, [r3, #28]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d003      	beq.n	800fa08 <netif_set_down+0x4c>
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	69db      	ldr	r3, [r3, #28]
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	4798      	blx	r3
  }
}
 800fa08:	bf00      	nop
 800fa0a:	3708      	adds	r7, #8
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}

0800fa10 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b082      	sub	sp, #8
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800fa1e:	f003 0304 	and.w	r3, r3, #4
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d11b      	bne.n	800fa5e <netif_set_link_up+0x4e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800fa2c:	f043 0304 	orr.w	r3, r3, #4
 800fa30:	b2da      	uxtb	r2, r3
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800fa3e:	f003 0301 	and.w	r3, r3, #1
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d003      	beq.n	800fa4e <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800fa46:	2103      	movs	r1, #3
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f7ff ff96 	bl	800f97a <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6a1b      	ldr	r3, [r3, #32]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d003      	beq.n	800fa5e <netif_set_link_up+0x4e>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6a1b      	ldr	r3, [r3, #32]
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	4798      	blx	r3
  }
}
 800fa5e:	bf00      	nop
 800fa60:	3708      	adds	r7, #8
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}

0800fa66 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 800fa66:	b580      	push	{r7, lr}
 800fa68:	b082      	sub	sp, #8
 800fa6a:	af00      	add	r7, sp, #0
 800fa6c:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800fa74:	f003 0304 	and.w	r3, r3, #4
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d010      	beq.n	800fa9e <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800fa82:	f023 0304 	bic.w	r3, r3, #4
 800fa86:	b2da      	uxtb	r2, r3
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
    NETIF_LINK_CALLBACK(netif);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6a1b      	ldr	r3, [r3, #32]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d003      	beq.n	800fa9e <netif_set_link_down+0x38>
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6a1b      	ldr	r3, [r3, #32]
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	4798      	blx	r3
  }
}
 800fa9e:	bf00      	nop
 800faa0:	3708      	adds	r7, #8
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}

0800faa6 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800faa6:	b480      	push	{r7}
 800faa8:	b083      	sub	sp, #12
 800faaa:	af00      	add	r7, sp, #0
 800faac:	6078      	str	r0, [r7, #4]
 800faae:	6039      	str	r1, [r7, #0]
  if (netif) {
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d002      	beq.n	800fabc <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	683a      	ldr	r2, [r7, #0]
 800faba:	621a      	str	r2, [r3, #32]
  }
}
 800fabc:	bf00      	nop
 800fabe:	370c      	adds	r7, #12
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr

0800fac8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800face:	f008 f8b5 	bl	8017c3c <sys_arch_protect>
 800fad2:	6038      	str	r0, [r7, #0]
 800fad4:	4b0f      	ldr	r3, [pc, #60]	; (800fb14 <pbuf_free_ooseq+0x4c>)
 800fad6:	2200      	movs	r2, #0
 800fad8:	701a      	strb	r2, [r3, #0]
 800fada:	6838      	ldr	r0, [r7, #0]
 800fadc:	f008 f8bc 	bl	8017c58 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fae0:	4b0d      	ldr	r3, [pc, #52]	; (800fb18 <pbuf_free_ooseq+0x50>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	607b      	str	r3, [r7, #4]
 800fae6:	e00f      	b.n	800fb08 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800faec:	2b00      	cmp	r3, #0
 800faee:	d008      	beq.n	800fb02 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800faf4:	4618      	mov	r0, r3
 800faf6:	f001 fcfe 	bl	80114f6 <tcp_segs_free>
      pcb->ooseq = NULL;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2200      	movs	r2, #0
 800fafe:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800fb00:	e005      	b.n	800fb0e <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	68db      	ldr	r3, [r3, #12]
 800fb06:	607b      	str	r3, [r7, #4]
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d1ec      	bne.n	800fae8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800fb0e:	3708      	adds	r7, #8
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}
 800fb14:	24024e44 	.word	0x24024e44
 800fb18:	24024e4c 	.word	0x24024e4c

0800fb1c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b082      	sub	sp, #8
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800fb24:	f7ff ffd0 	bl	800fac8 <pbuf_free_ooseq>
}
 800fb28:	bf00      	nop
 800fb2a:	3708      	adds	r7, #8
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}

0800fb30 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b082      	sub	sp, #8
 800fb34:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800fb36:	f008 f881 	bl	8017c3c <sys_arch_protect>
 800fb3a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800fb3c:	4b10      	ldr	r3, [pc, #64]	; (800fb80 <pbuf_pool_is_empty+0x50>)
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800fb42:	4b0f      	ldr	r3, [pc, #60]	; (800fb80 <pbuf_pool_is_empty+0x50>)
 800fb44:	2201      	movs	r2, #1
 800fb46:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f008 f885 	bl	8017c58 <sys_arch_unprotect>

  if (!queued) {
 800fb4e:	78fb      	ldrb	r3, [r7, #3]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d110      	bne.n	800fb76 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800fb54:	2200      	movs	r2, #0
 800fb56:	2100      	movs	r1, #0
 800fb58:	480a      	ldr	r0, [pc, #40]	; (800fb84 <pbuf_pool_is_empty+0x54>)
 800fb5a:	f7fe ffdb 	bl	800eb14 <tcpip_callback_with_block>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d008      	beq.n	800fb76 <pbuf_pool_is_empty+0x46>
 800fb64:	f008 f86a 	bl	8017c3c <sys_arch_protect>
 800fb68:	6078      	str	r0, [r7, #4]
 800fb6a:	4b05      	ldr	r3, [pc, #20]	; (800fb80 <pbuf_pool_is_empty+0x50>)
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	701a      	strb	r2, [r3, #0]
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f008 f871 	bl	8017c58 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800fb76:	bf00      	nop
 800fb78:	3708      	adds	r7, #8
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}
 800fb7e:	bf00      	nop
 800fb80:	24024e44 	.word	0x24024e44
 800fb84:	0800fb1d 	.word	0x0800fb1d

0800fb88 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b088      	sub	sp, #32
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	4603      	mov	r3, r0
 800fb90:	71fb      	strb	r3, [r7, #7]
 800fb92:	460b      	mov	r3, r1
 800fb94:	80bb      	strh	r3, [r7, #4]
 800fb96:	4613      	mov	r3, r2
 800fb98:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800fb9a:	79fb      	ldrb	r3, [r7, #7]
 800fb9c:	2b04      	cmp	r3, #4
 800fb9e:	d81c      	bhi.n	800fbda <pbuf_alloc+0x52>
 800fba0:	a201      	add	r2, pc, #4	; (adr r2, 800fba8 <pbuf_alloc+0x20>)
 800fba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fba6:	bf00      	nop
 800fba8:	0800fbbd 	.word	0x0800fbbd
 800fbac:	0800fbc3 	.word	0x0800fbc3
 800fbb0:	0800fbc9 	.word	0x0800fbc9
 800fbb4:	0800fbcf 	.word	0x0800fbcf
 800fbb8:	0800fbd5 	.word	0x0800fbd5
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800fbbc:	2336      	movs	r3, #54	; 0x36
 800fbbe:	82fb      	strh	r3, [r7, #22]
    break;
 800fbc0:	e014      	b.n	800fbec <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800fbc2:	2322      	movs	r3, #34	; 0x22
 800fbc4:	82fb      	strh	r3, [r7, #22]
    break;
 800fbc6:	e011      	b.n	800fbec <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800fbc8:	230e      	movs	r3, #14
 800fbca:	82fb      	strh	r3, [r7, #22]
    break;
 800fbcc:	e00e      	b.n	800fbec <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	82fb      	strh	r3, [r7, #22]
    break;
 800fbd2:	e00b      	b.n	800fbec <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	82fb      	strh	r3, [r7, #22]
    break;
 800fbd8:	e008      	b.n	800fbec <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800fbda:	4ba5      	ldr	r3, [pc, #660]	; (800fe70 <pbuf_alloc+0x2e8>)
 800fbdc:	f44f 728b 	mov.w	r2, #278	; 0x116
 800fbe0:	49a4      	ldr	r1, [pc, #656]	; (800fe74 <pbuf_alloc+0x2ec>)
 800fbe2:	48a5      	ldr	r0, [pc, #660]	; (800fe78 <pbuf_alloc+0x2f0>)
 800fbe4:	f008 f88e 	bl	8017d04 <iprintf>
    return NULL;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	e15d      	b.n	800fea8 <pbuf_alloc+0x320>
  }

  switch (type) {
 800fbec:	79bb      	ldrb	r3, [r7, #6]
 800fbee:	2b03      	cmp	r3, #3
 800fbf0:	f200 8134 	bhi.w	800fe5c <pbuf_alloc+0x2d4>
 800fbf4:	a201      	add	r2, pc, #4	; (adr r2, 800fbfc <pbuf_alloc+0x74>)
 800fbf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbfa:	bf00      	nop
 800fbfc:	0800fd9d 	.word	0x0800fd9d
 800fc00:	0800fe29 	.word	0x0800fe29
 800fc04:	0800fe29 	.word	0x0800fe29
 800fc08:	0800fc0d 	.word	0x0800fc0d
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800fc0c:	200d      	movs	r0, #13
 800fc0e:	f7ff fcdb 	bl	800f5c8 <memp_malloc>
 800fc12:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800fc14:	69fb      	ldr	r3, [r7, #28]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d103      	bne.n	800fc22 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800fc1a:	f7ff ff89 	bl	800fb30 <pbuf_pool_is_empty>
      return NULL;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	e142      	b.n	800fea8 <pbuf_alloc+0x320>
    }
    p->type = type;
 800fc22:	69fb      	ldr	r3, [r7, #28]
 800fc24:	79ba      	ldrb	r2, [r7, #6]
 800fc26:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800fc28:	69fb      	ldr	r3, [r7, #28]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800fc2e:	8afb      	ldrh	r3, [r7, #22]
 800fc30:	3310      	adds	r3, #16
 800fc32:	69fa      	ldr	r2, [r7, #28]
 800fc34:	4413      	add	r3, r2
 800fc36:	3303      	adds	r3, #3
 800fc38:	f023 0303 	bic.w	r3, r3, #3
 800fc3c:	461a      	mov	r2, r3
 800fc3e:	69fb      	ldr	r3, [r7, #28]
 800fc40:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800fc42:	69fb      	ldr	r3, [r7, #28]
 800fc44:	685b      	ldr	r3, [r3, #4]
 800fc46:	f003 0303 	and.w	r3, r3, #3
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d006      	beq.n	800fc5c <pbuf_alloc+0xd4>
 800fc4e:	4b88      	ldr	r3, [pc, #544]	; (800fe70 <pbuf_alloc+0x2e8>)
 800fc50:	f240 1229 	movw	r2, #297	; 0x129
 800fc54:	4989      	ldr	r1, [pc, #548]	; (800fe7c <pbuf_alloc+0x2f4>)
 800fc56:	4888      	ldr	r0, [pc, #544]	; (800fe78 <pbuf_alloc+0x2f0>)
 800fc58:	f008 f854 	bl	8017d04 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800fc5c:	69fb      	ldr	r3, [r7, #28]
 800fc5e:	88ba      	ldrh	r2, [r7, #4]
 800fc60:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800fc62:	8afb      	ldrh	r3, [r7, #22]
 800fc64:	3303      	adds	r3, #3
 800fc66:	f023 0303 	bic.w	r3, r3, #3
 800fc6a:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800fc6e:	88bb      	ldrh	r3, [r7, #4]
 800fc70:	4293      	cmp	r3, r2
 800fc72:	bf28      	it	cs
 800fc74:	4613      	movcs	r3, r2
 800fc76:	b29a      	uxth	r2, r3
 800fc78:	69fb      	ldr	r3, [r7, #28]
 800fc7a:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800fc7c:	69fb      	ldr	r3, [r7, #28]
 800fc7e:	685b      	ldr	r3, [r3, #4]
 800fc80:	69fa      	ldr	r2, [r7, #28]
 800fc82:	8952      	ldrh	r2, [r2, #10]
 800fc84:	441a      	add	r2, r3
 800fc86:	69fb      	ldr	r3, [r7, #28]
 800fc88:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d906      	bls.n	800fc9e <pbuf_alloc+0x116>
 800fc90:	4b77      	ldr	r3, [pc, #476]	; (800fe70 <pbuf_alloc+0x2e8>)
 800fc92:	f44f 7298 	mov.w	r2, #304	; 0x130
 800fc96:	497a      	ldr	r1, [pc, #488]	; (800fe80 <pbuf_alloc+0x2f8>)
 800fc98:	4877      	ldr	r0, [pc, #476]	; (800fe78 <pbuf_alloc+0x2f0>)
 800fc9a:	f008 f833 	bl	8017d04 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800fc9e:	8afb      	ldrh	r3, [r7, #22]
 800fca0:	3303      	adds	r3, #3
 800fca2:	f023 0303 	bic.w	r3, r3, #3
 800fca6:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800fcaa:	d106      	bne.n	800fcba <pbuf_alloc+0x132>
 800fcac:	4b70      	ldr	r3, [pc, #448]	; (800fe70 <pbuf_alloc+0x2e8>)
 800fcae:	f44f 7299 	mov.w	r2, #306	; 0x132
 800fcb2:	4974      	ldr	r1, [pc, #464]	; (800fe84 <pbuf_alloc+0x2fc>)
 800fcb4:	4870      	ldr	r0, [pc, #448]	; (800fe78 <pbuf_alloc+0x2f0>)
 800fcb6:	f008 f825 	bl	8017d04 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800fcba:	69fb      	ldr	r3, [r7, #28]
 800fcbc:	2201      	movs	r2, #1
 800fcbe:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800fcc4:	88bb      	ldrh	r3, [r7, #4]
 800fcc6:	69fa      	ldr	r2, [r7, #28]
 800fcc8:	8952      	ldrh	r2, [r2, #10]
 800fcca:	1a9b      	subs	r3, r3, r2
 800fccc:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800fcce:	e061      	b.n	800fd94 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800fcd0:	200d      	movs	r0, #13
 800fcd2:	f7ff fc79 	bl	800f5c8 <memp_malloc>
 800fcd6:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d106      	bne.n	800fcec <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800fcde:	f7ff ff27 	bl	800fb30 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800fce2:	69f8      	ldr	r0, [r7, #28]
 800fce4:	f000 fac2 	bl	801026c <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800fce8:	2300      	movs	r3, #0
 800fcea:	e0dd      	b.n	800fea8 <pbuf_alloc+0x320>
      }
      q->type = type;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	79ba      	ldrb	r2, [r7, #6]
 800fcf0:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800fcfe:	69bb      	ldr	r3, [r7, #24]
 800fd00:	68fa      	ldr	r2, [r7, #12]
 800fd02:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	dd06      	ble.n	800fd1c <pbuf_alloc+0x194>
 800fd0e:	4b58      	ldr	r3, [pc, #352]	; (800fe70 <pbuf_alloc+0x2e8>)
 800fd10:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800fd14:	495c      	ldr	r1, [pc, #368]	; (800fe88 <pbuf_alloc+0x300>)
 800fd16:	4858      	ldr	r0, [pc, #352]	; (800fe78 <pbuf_alloc+0x2f0>)
 800fd18:	f007 fff4 	bl	8017d04 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800fd1c:	693b      	ldr	r3, [r7, #16]
 800fd1e:	b29a      	uxth	r2, r3
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800fd24:	693b      	ldr	r3, [r7, #16]
 800fd26:	b29b      	uxth	r3, r3
 800fd28:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800fd2c:	bf28      	it	cs
 800fd2e:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800fd32:	b29a      	uxth	r2, r3
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	f103 0210 	add.w	r2, r3, #16
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	685b      	ldr	r3, [r3, #4]
 800fd46:	f003 0303 	and.w	r3, r3, #3
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d006      	beq.n	800fd5c <pbuf_alloc+0x1d4>
 800fd4e:	4b48      	ldr	r3, [pc, #288]	; (800fe70 <pbuf_alloc+0x2e8>)
 800fd50:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800fd54:	494d      	ldr	r1, [pc, #308]	; (800fe8c <pbuf_alloc+0x304>)
 800fd56:	4848      	ldr	r0, [pc, #288]	; (800fe78 <pbuf_alloc+0x2f0>)
 800fd58:	f007 ffd4 	bl	8017d04 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800fd5c:	69fb      	ldr	r3, [r7, #28]
 800fd5e:	685b      	ldr	r3, [r3, #4]
 800fd60:	69fa      	ldr	r2, [r7, #28]
 800fd62:	8952      	ldrh	r2, [r2, #10]
 800fd64:	441a      	add	r2, r3
 800fd66:	69fb      	ldr	r3, [r7, #28]
 800fd68:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	d906      	bls.n	800fd7e <pbuf_alloc+0x1f6>
 800fd70:	4b3f      	ldr	r3, [pc, #252]	; (800fe70 <pbuf_alloc+0x2e8>)
 800fd72:	f240 1255 	movw	r2, #341	; 0x155
 800fd76:	4942      	ldr	r1, [pc, #264]	; (800fe80 <pbuf_alloc+0x2f8>)
 800fd78:	483f      	ldr	r0, [pc, #252]	; (800fe78 <pbuf_alloc+0x2f0>)
 800fd7a:	f007 ffc3 	bl	8017d04 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	2201      	movs	r2, #1
 800fd82:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	895b      	ldrh	r3, [r3, #10]
 800fd88:	461a      	mov	r2, r3
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	1a9b      	subs	r3, r3, r2
 800fd8e:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	dc9a      	bgt.n	800fcd0 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800fd9a:	e07e      	b.n	800fe9a <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800fd9c:	8afb      	ldrh	r3, [r7, #22]
 800fd9e:	3313      	adds	r3, #19
 800fda0:	b29b      	uxth	r3, r3
 800fda2:	f023 0303 	bic.w	r3, r3, #3
 800fda6:	b29a      	uxth	r2, r3
 800fda8:	88bb      	ldrh	r3, [r7, #4]
 800fdaa:	3303      	adds	r3, #3
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	f023 0303 	bic.w	r3, r3, #3
 800fdb2:	b29b      	uxth	r3, r3
 800fdb4:	4413      	add	r3, r2
 800fdb6:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800fdb8:	897a      	ldrh	r2, [r7, #10]
 800fdba:	88bb      	ldrh	r3, [r7, #4]
 800fdbc:	3303      	adds	r3, #3
 800fdbe:	f023 0303 	bic.w	r3, r3, #3
 800fdc2:	429a      	cmp	r2, r3
 800fdc4:	d201      	bcs.n	800fdca <pbuf_alloc+0x242>
        return NULL;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	e06e      	b.n	800fea8 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800fdca:	897b      	ldrh	r3, [r7, #10]
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f7ff fa69 	bl	800f2a4 <mem_malloc>
 800fdd2:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800fdd4:	69fb      	ldr	r3, [r7, #28]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d101      	bne.n	800fdde <pbuf_alloc+0x256>
      return NULL;
 800fdda:	2300      	movs	r3, #0
 800fddc:	e064      	b.n	800fea8 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800fdde:	8afb      	ldrh	r3, [r7, #22]
 800fde0:	3310      	adds	r3, #16
 800fde2:	69fa      	ldr	r2, [r7, #28]
 800fde4:	4413      	add	r3, r2
 800fde6:	3303      	adds	r3, #3
 800fde8:	f023 0303 	bic.w	r3, r3, #3
 800fdec:	461a      	mov	r2, r3
 800fdee:	69fb      	ldr	r3, [r7, #28]
 800fdf0:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800fdf2:	69fb      	ldr	r3, [r7, #28]
 800fdf4:	88ba      	ldrh	r2, [r7, #4]
 800fdf6:	811a      	strh	r2, [r3, #8]
 800fdf8:	69fb      	ldr	r3, [r7, #28]
 800fdfa:	891a      	ldrh	r2, [r3, #8]
 800fdfc:	69fb      	ldr	r3, [r7, #28]
 800fdfe:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800fe00:	69fb      	ldr	r3, [r7, #28]
 800fe02:	2200      	movs	r2, #0
 800fe04:	601a      	str	r2, [r3, #0]
    p->type = type;
 800fe06:	69fb      	ldr	r3, [r7, #28]
 800fe08:	79ba      	ldrb	r2, [r7, #6]
 800fe0a:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800fe0c:	69fb      	ldr	r3, [r7, #28]
 800fe0e:	685b      	ldr	r3, [r3, #4]
 800fe10:	f003 0303 	and.w	r3, r3, #3
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d03f      	beq.n	800fe98 <pbuf_alloc+0x310>
 800fe18:	4b15      	ldr	r3, [pc, #84]	; (800fe70 <pbuf_alloc+0x2e8>)
 800fe1a:	f240 1277 	movw	r2, #375	; 0x177
 800fe1e:	491c      	ldr	r1, [pc, #112]	; (800fe90 <pbuf_alloc+0x308>)
 800fe20:	4815      	ldr	r0, [pc, #84]	; (800fe78 <pbuf_alloc+0x2f0>)
 800fe22:	f007 ff6f 	bl	8017d04 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800fe26:	e037      	b.n	800fe98 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800fe28:	200c      	movs	r0, #12
 800fe2a:	f7ff fbcd 	bl	800f5c8 <memp_malloc>
 800fe2e:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800fe30:	69fb      	ldr	r3, [r7, #28]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d101      	bne.n	800fe3a <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800fe36:	2300      	movs	r3, #0
 800fe38:	e036      	b.n	800fea8 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800fe3a:	69fb      	ldr	r3, [r7, #28]
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800fe40:	69fb      	ldr	r3, [r7, #28]
 800fe42:	88ba      	ldrh	r2, [r7, #4]
 800fe44:	811a      	strh	r2, [r3, #8]
 800fe46:	69fb      	ldr	r3, [r7, #28]
 800fe48:	891a      	ldrh	r2, [r3, #8]
 800fe4a:	69fb      	ldr	r3, [r7, #28]
 800fe4c:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800fe4e:	69fb      	ldr	r3, [r7, #28]
 800fe50:	2200      	movs	r2, #0
 800fe52:	601a      	str	r2, [r3, #0]
    p->type = type;
 800fe54:	69fb      	ldr	r3, [r7, #28]
 800fe56:	79ba      	ldrb	r2, [r7, #6]
 800fe58:	731a      	strb	r2, [r3, #12]
    break;
 800fe5a:	e01e      	b.n	800fe9a <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800fe5c:	4b04      	ldr	r3, [pc, #16]	; (800fe70 <pbuf_alloc+0x2e8>)
 800fe5e:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800fe62:	490c      	ldr	r1, [pc, #48]	; (800fe94 <pbuf_alloc+0x30c>)
 800fe64:	4804      	ldr	r0, [pc, #16]	; (800fe78 <pbuf_alloc+0x2f0>)
 800fe66:	f007 ff4d 	bl	8017d04 <iprintf>
    return NULL;
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	e01c      	b.n	800fea8 <pbuf_alloc+0x320>
 800fe6e:	bf00      	nop
 800fe70:	080192e8 	.word	0x080192e8
 800fe74:	08019318 	.word	0x08019318
 800fe78:	08019334 	.word	0x08019334
 800fe7c:	0801935c 	.word	0x0801935c
 800fe80:	0801938c 	.word	0x0801938c
 800fe84:	080193c0 	.word	0x080193c0
 800fe88:	080193f4 	.word	0x080193f4
 800fe8c:	08019408 	.word	0x08019408
 800fe90:	08019438 	.word	0x08019438
 800fe94:	08019464 	.word	0x08019464
    break;
 800fe98:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800fe9a:	69fb      	ldr	r3, [r7, #28]
 800fe9c:	2201      	movs	r2, #1
 800fe9e:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800fea0:	69fb      	ldr	r3, [r7, #28]
 800fea2:	2200      	movs	r2, #0
 800fea4:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800fea6:	69fb      	ldr	r3, [r7, #28]
}
 800fea8:	4618      	mov	r0, r3
 800feaa:	3720      	adds	r7, #32
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}

0800feb0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b084      	sub	sp, #16
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	603b      	str	r3, [r7, #0]
 800feb8:	4603      	mov	r3, r0
 800feba:	71fb      	strb	r3, [r7, #7]
 800febc:	460b      	mov	r3, r1
 800febe:	80bb      	strh	r3, [r7, #4]
 800fec0:	4613      	mov	r3, r2
 800fec2:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800fec4:	79fb      	ldrb	r3, [r7, #7]
 800fec6:	2b04      	cmp	r3, #4
 800fec8:	d81b      	bhi.n	800ff02 <pbuf_alloced_custom+0x52>
 800feca:	a201      	add	r2, pc, #4	; (adr r2, 800fed0 <pbuf_alloced_custom+0x20>)
 800fecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fed0:	0800fee5 	.word	0x0800fee5
 800fed4:	0800feeb 	.word	0x0800feeb
 800fed8:	0800fef1 	.word	0x0800fef1
 800fedc:	0800fef7 	.word	0x0800fef7
 800fee0:	0800fefd 	.word	0x0800fefd
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800fee4:	2336      	movs	r3, #54	; 0x36
 800fee6:	81fb      	strh	r3, [r7, #14]
    break;
 800fee8:	e014      	b.n	800ff14 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800feea:	2322      	movs	r3, #34	; 0x22
 800feec:	81fb      	strh	r3, [r7, #14]
    break;
 800feee:	e011      	b.n	800ff14 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800fef0:	230e      	movs	r3, #14
 800fef2:	81fb      	strh	r3, [r7, #14]
    break;
 800fef4:	e00e      	b.n	800ff14 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800fef6:	2300      	movs	r3, #0
 800fef8:	81fb      	strh	r3, [r7, #14]
    break;
 800fefa:	e00b      	b.n	800ff14 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800fefc:	2300      	movs	r3, #0
 800fefe:	81fb      	strh	r3, [r7, #14]
    break;
 800ff00:	e008      	b.n	800ff14 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800ff02:	4b1d      	ldr	r3, [pc, #116]	; (800ff78 <pbuf_alloced_custom+0xc8>)
 800ff04:	f240 12c5 	movw	r2, #453	; 0x1c5
 800ff08:	491c      	ldr	r1, [pc, #112]	; (800ff7c <pbuf_alloced_custom+0xcc>)
 800ff0a:	481d      	ldr	r0, [pc, #116]	; (800ff80 <pbuf_alloced_custom+0xd0>)
 800ff0c:	f007 fefa 	bl	8017d04 <iprintf>
    return NULL;
 800ff10:	2300      	movs	r3, #0
 800ff12:	e02d      	b.n	800ff70 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ff14:	89fb      	ldrh	r3, [r7, #14]
 800ff16:	3303      	adds	r3, #3
 800ff18:	f023 0203 	bic.w	r2, r3, #3
 800ff1c:	88bb      	ldrh	r3, [r7, #4]
 800ff1e:	441a      	add	r2, r3
 800ff20:	8bbb      	ldrh	r3, [r7, #28]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d901      	bls.n	800ff2a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ff26:	2300      	movs	r3, #0
 800ff28:	e022      	b.n	800ff70 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800ff30:	69bb      	ldr	r3, [r7, #24]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d008      	beq.n	800ff48 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ff36:	89fb      	ldrh	r3, [r7, #14]
 800ff38:	3303      	adds	r3, #3
 800ff3a:	f023 0303 	bic.w	r3, r3, #3
 800ff3e:	69ba      	ldr	r2, [r7, #24]
 800ff40:	441a      	add	r2, r3
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	605a      	str	r2, [r3, #4]
 800ff46:	e002      	b.n	800ff4e <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	2202      	movs	r2, #2
 800ff52:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	88ba      	ldrh	r2, [r7, #4]
 800ff58:	811a      	strh	r2, [r3, #8]
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	891a      	ldrh	r2, [r3, #8]
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	79ba      	ldrb	r2, [r7, #6]
 800ff66:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	2201      	movs	r2, #1
 800ff6c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800ff6e:	683b      	ldr	r3, [r7, #0]
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3710      	adds	r7, #16
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}
 800ff78:	080192e8 	.word	0x080192e8
 800ff7c:	08019480 	.word	0x08019480
 800ff80:	08019334 	.word	0x08019334

0800ff84 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b086      	sub	sp, #24
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	460b      	mov	r3, r1
 800ff8e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d106      	bne.n	800ffa4 <pbuf_realloc+0x20>
 800ff96:	4b4b      	ldr	r3, [pc, #300]	; (80100c4 <pbuf_realloc+0x140>)
 800ff98:	f240 12f3 	movw	r2, #499	; 0x1f3
 800ff9c:	494a      	ldr	r1, [pc, #296]	; (80100c8 <pbuf_realloc+0x144>)
 800ff9e:	484b      	ldr	r0, [pc, #300]	; (80100cc <pbuf_realloc+0x148>)
 800ffa0:	f007 feb0 	bl	8017d04 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	7b1b      	ldrb	r3, [r3, #12]
 800ffa8:	2b03      	cmp	r3, #3
 800ffaa:	d012      	beq.n	800ffd2 <pbuf_realloc+0x4e>
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	7b1b      	ldrb	r3, [r3, #12]
 800ffb0:	2b01      	cmp	r3, #1
 800ffb2:	d00e      	beq.n	800ffd2 <pbuf_realloc+0x4e>
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	7b1b      	ldrb	r3, [r3, #12]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d00a      	beq.n	800ffd2 <pbuf_realloc+0x4e>
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	7b1b      	ldrb	r3, [r3, #12]
 800ffc0:	2b02      	cmp	r3, #2
 800ffc2:	d006      	beq.n	800ffd2 <pbuf_realloc+0x4e>
 800ffc4:	4b3f      	ldr	r3, [pc, #252]	; (80100c4 <pbuf_realloc+0x140>)
 800ffc6:	f240 12f7 	movw	r2, #503	; 0x1f7
 800ffca:	4941      	ldr	r1, [pc, #260]	; (80100d0 <pbuf_realloc+0x14c>)
 800ffcc:	483f      	ldr	r0, [pc, #252]	; (80100cc <pbuf_realloc+0x148>)
 800ffce:	f007 fe99 	bl	8017d04 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	891b      	ldrh	r3, [r3, #8]
 800ffd6:	887a      	ldrh	r2, [r7, #2]
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d26f      	bcs.n	80100bc <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800ffdc:	887b      	ldrh	r3, [r7, #2]
 800ffde:	687a      	ldr	r2, [r7, #4]
 800ffe0:	8912      	ldrh	r2, [r2, #8]
 800ffe2:	1a9b      	subs	r3, r3, r2
 800ffe4:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ffe6:	887b      	ldrh	r3, [r7, #2]
 800ffe8:	827b      	strh	r3, [r7, #18]
  q = p;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ffee:	e025      	b.n	801003c <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800fff0:	697b      	ldr	r3, [r7, #20]
 800fff2:	895b      	ldrh	r3, [r3, #10]
 800fff4:	8a7a      	ldrh	r2, [r7, #18]
 800fff6:	1ad3      	subs	r3, r2, r3
 800fff8:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010000:	4293      	cmp	r3, r2
 8010002:	dd06      	ble.n	8010012 <pbuf_realloc+0x8e>
 8010004:	4b2f      	ldr	r3, [pc, #188]	; (80100c4 <pbuf_realloc+0x140>)
 8010006:	f240 220b 	movw	r2, #523	; 0x20b
 801000a:	4932      	ldr	r1, [pc, #200]	; (80100d4 <pbuf_realloc+0x150>)
 801000c:	482f      	ldr	r0, [pc, #188]	; (80100cc <pbuf_realloc+0x148>)
 801000e:	f007 fe79 	bl	8017d04 <iprintf>
    q->tot_len += (u16_t)grow;
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	891a      	ldrh	r2, [r3, #8]
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	b29b      	uxth	r3, r3
 801001a:	4413      	add	r3, r2
 801001c:	b29a      	uxth	r2, r3
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d106      	bne.n	801003c <pbuf_realloc+0xb8>
 801002e:	4b25      	ldr	r3, [pc, #148]	; (80100c4 <pbuf_realloc+0x140>)
 8010030:	f240 220f 	movw	r2, #527	; 0x20f
 8010034:	4928      	ldr	r1, [pc, #160]	; (80100d8 <pbuf_realloc+0x154>)
 8010036:	4825      	ldr	r0, [pc, #148]	; (80100cc <pbuf_realloc+0x148>)
 8010038:	f007 fe64 	bl	8017d04 <iprintf>
  while (rem_len > q->len) {
 801003c:	697b      	ldr	r3, [r7, #20]
 801003e:	895b      	ldrh	r3, [r3, #10]
 8010040:	8a7a      	ldrh	r2, [r7, #18]
 8010042:	429a      	cmp	r2, r3
 8010044:	d8d4      	bhi.n	800fff0 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	7b1b      	ldrb	r3, [r3, #12]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d122      	bne.n	8010094 <pbuf_realloc+0x110>
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	895b      	ldrh	r3, [r3, #10]
 8010052:	8a7a      	ldrh	r2, [r7, #18]
 8010054:	429a      	cmp	r2, r3
 8010056:	d01d      	beq.n	8010094 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	7b5b      	ldrb	r3, [r3, #13]
 801005c:	f003 0302 	and.w	r3, r3, #2
 8010060:	2b00      	cmp	r3, #0
 8010062:	d117      	bne.n	8010094 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	685b      	ldr	r3, [r3, #4]
 8010068:	461a      	mov	r2, r3
 801006a:	697b      	ldr	r3, [r7, #20]
 801006c:	1ad3      	subs	r3, r2, r3
 801006e:	b29a      	uxth	r2, r3
 8010070:	8a7b      	ldrh	r3, [r7, #18]
 8010072:	4413      	add	r3, r2
 8010074:	b29b      	uxth	r3, r3
 8010076:	4619      	mov	r1, r3
 8010078:	6978      	ldr	r0, [r7, #20]
 801007a:	f7ff f829 	bl	800f0d0 <mem_trim>
 801007e:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d106      	bne.n	8010094 <pbuf_realloc+0x110>
 8010086:	4b0f      	ldr	r3, [pc, #60]	; (80100c4 <pbuf_realloc+0x140>)
 8010088:	f240 221d 	movw	r2, #541	; 0x21d
 801008c:	4913      	ldr	r1, [pc, #76]	; (80100dc <pbuf_realloc+0x158>)
 801008e:	480f      	ldr	r0, [pc, #60]	; (80100cc <pbuf_realloc+0x148>)
 8010090:	f007 fe38 	bl	8017d04 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	8a7a      	ldrh	r2, [r7, #18]
 8010098:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	895a      	ldrh	r2, [r3, #10]
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d004      	beq.n	80100b4 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80100aa:	697b      	ldr	r3, [r7, #20]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	4618      	mov	r0, r3
 80100b0:	f000 f8dc 	bl	801026c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80100b4:	697b      	ldr	r3, [r7, #20]
 80100b6:	2200      	movs	r2, #0
 80100b8:	601a      	str	r2, [r3, #0]
 80100ba:	e000      	b.n	80100be <pbuf_realloc+0x13a>
    return;
 80100bc:	bf00      	nop

}
 80100be:	3718      	adds	r7, #24
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}
 80100c4:	080192e8 	.word	0x080192e8
 80100c8:	080194a4 	.word	0x080194a4
 80100cc:	08019334 	.word	0x08019334
 80100d0:	080194bc 	.word	0x080194bc
 80100d4:	080194d8 	.word	0x080194d8
 80100d8:	080194ec 	.word	0x080194ec
 80100dc:	08019504 	.word	0x08019504

080100e0 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b084      	sub	sp, #16
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
 80100e8:	460b      	mov	r3, r1
 80100ea:	807b      	strh	r3, [r7, #2]
 80100ec:	4613      	mov	r3, r2
 80100ee:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d106      	bne.n	8010104 <pbuf_header_impl+0x24>
 80100f6:	4b46      	ldr	r3, [pc, #280]	; (8010210 <pbuf_header_impl+0x130>)
 80100f8:	f240 223f 	movw	r2, #575	; 0x23f
 80100fc:	4945      	ldr	r1, [pc, #276]	; (8010214 <pbuf_header_impl+0x134>)
 80100fe:	4846      	ldr	r0, [pc, #280]	; (8010218 <pbuf_header_impl+0x138>)
 8010100:	f007 fe00 	bl	8017d04 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8010104:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d002      	beq.n	8010112 <pbuf_header_impl+0x32>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d101      	bne.n	8010116 <pbuf_header_impl+0x36>
    return 0;
 8010112:	2300      	movs	r3, #0
 8010114:	e078      	b.n	8010208 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8010116:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801011a:	2b00      	cmp	r3, #0
 801011c:	da10      	bge.n	8010140 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 801011e:	887b      	ldrh	r3, [r7, #2]
 8010120:	425b      	negs	r3, r3
 8010122:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	895b      	ldrh	r3, [r3, #10]
 8010128:	89fa      	ldrh	r2, [r7, #14]
 801012a:	429a      	cmp	r2, r3
 801012c:	d90a      	bls.n	8010144 <pbuf_header_impl+0x64>
 801012e:	4b38      	ldr	r3, [pc, #224]	; (8010210 <pbuf_header_impl+0x130>)
 8010130:	f240 2247 	movw	r2, #583	; 0x247
 8010134:	4939      	ldr	r1, [pc, #228]	; (801021c <pbuf_header_impl+0x13c>)
 8010136:	4838      	ldr	r0, [pc, #224]	; (8010218 <pbuf_header_impl+0x138>)
 8010138:	f007 fde4 	bl	8017d04 <iprintf>
 801013c:	2301      	movs	r3, #1
 801013e:	e063      	b.n	8010208 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8010140:	887b      	ldrh	r3, [r7, #2]
 8010142:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	7b1b      	ldrb	r3, [r3, #12]
 8010148:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	685b      	ldr	r3, [r3, #4]
 801014e:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8010150:	89bb      	ldrh	r3, [r7, #12]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d002      	beq.n	801015c <pbuf_header_impl+0x7c>
 8010156:	89bb      	ldrh	r3, [r7, #12]
 8010158:	2b03      	cmp	r3, #3
 801015a:	d112      	bne.n	8010182 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	685a      	ldr	r2, [r3, #4]
 8010160:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010164:	425b      	negs	r3, r3
 8010166:	441a      	add	r2, r3
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	685a      	ldr	r2, [r3, #4]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	3310      	adds	r3, #16
 8010174:	429a      	cmp	r2, r3
 8010176:	d238      	bcs.n	80101ea <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	68ba      	ldr	r2, [r7, #8]
 801017c:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 801017e:	2301      	movs	r3, #1
 8010180:	e042      	b.n	8010208 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8010182:	89bb      	ldrh	r3, [r7, #12]
 8010184:	2b02      	cmp	r3, #2
 8010186:	d002      	beq.n	801018e <pbuf_header_impl+0xae>
 8010188:	89bb      	ldrh	r3, [r7, #12]
 801018a:	2b01      	cmp	r3, #1
 801018c:	d124      	bne.n	80101d8 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 801018e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010192:	2b00      	cmp	r3, #0
 8010194:	da0d      	bge.n	80101b2 <pbuf_header_impl+0xd2>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	895b      	ldrh	r3, [r3, #10]
 801019a:	89fa      	ldrh	r2, [r7, #14]
 801019c:	429a      	cmp	r2, r3
 801019e:	d808      	bhi.n	80101b2 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	685a      	ldr	r2, [r3, #4]
 80101a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80101a8:	425b      	negs	r3, r3
 80101aa:	441a      	add	r2, r3
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	605a      	str	r2, [r3, #4]
 80101b0:	e011      	b.n	80101d6 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 80101b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	dd0b      	ble.n	80101d2 <pbuf_header_impl+0xf2>
 80101ba:	787b      	ldrb	r3, [r7, #1]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d008      	beq.n	80101d2 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	685a      	ldr	r2, [r3, #4]
 80101c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80101c8:	425b      	negs	r3, r3
 80101ca:	441a      	add	r2, r3
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	605a      	str	r2, [r3, #4]
 80101d0:	e001      	b.n	80101d6 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80101d2:	2301      	movs	r3, #1
 80101d4:	e018      	b.n	8010208 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80101d6:	e008      	b.n	80101ea <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 80101d8:	4b0d      	ldr	r3, [pc, #52]	; (8010210 <pbuf_header_impl+0x130>)
 80101da:	f240 2277 	movw	r2, #631	; 0x277
 80101de:	4910      	ldr	r1, [pc, #64]	; (8010220 <pbuf_header_impl+0x140>)
 80101e0:	480d      	ldr	r0, [pc, #52]	; (8010218 <pbuf_header_impl+0x138>)
 80101e2:	f007 fd8f 	bl	8017d04 <iprintf>
    return 1;
 80101e6:	2301      	movs	r3, #1
 80101e8:	e00e      	b.n	8010208 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	895a      	ldrh	r2, [r3, #10]
 80101ee:	887b      	ldrh	r3, [r7, #2]
 80101f0:	4413      	add	r3, r2
 80101f2:	b29a      	uxth	r2, r3
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	891a      	ldrh	r2, [r3, #8]
 80101fc:	887b      	ldrh	r3, [r7, #2]
 80101fe:	4413      	add	r3, r2
 8010200:	b29a      	uxth	r2, r3
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8010206:	2300      	movs	r3, #0
}
 8010208:	4618      	mov	r0, r3
 801020a:	3710      	adds	r7, #16
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}
 8010210:	080192e8 	.word	0x080192e8
 8010214:	08019520 	.word	0x08019520
 8010218:	08019334 	.word	0x08019334
 801021c:	0801952c 	.word	0x0801952c
 8010220:	0801954c 	.word	0x0801954c

08010224 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b082      	sub	sp, #8
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
 801022c:	460b      	mov	r3, r1
 801022e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8010230:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010234:	2200      	movs	r2, #0
 8010236:	4619      	mov	r1, r3
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f7ff ff51 	bl	80100e0 <pbuf_header_impl>
 801023e:	4603      	mov	r3, r0
}
 8010240:	4618      	mov	r0, r3
 8010242:	3708      	adds	r7, #8
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}

08010248 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	460b      	mov	r3, r1
 8010252:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8010254:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010258:	2201      	movs	r2, #1
 801025a:	4619      	mov	r1, r3
 801025c:	6878      	ldr	r0, [r7, #4]
 801025e:	f7ff ff3f 	bl	80100e0 <pbuf_header_impl>
 8010262:	4603      	mov	r3, r0
}
 8010264:	4618      	mov	r0, r3
 8010266:	3708      	adds	r7, #8
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}

0801026c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b088      	sub	sp, #32
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d10b      	bne.n	8010292 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d106      	bne.n	801028e <pbuf_free+0x22>
 8010280:	4b41      	ldr	r3, [pc, #260]	; (8010388 <pbuf_free+0x11c>)
 8010282:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010286:	4941      	ldr	r1, [pc, #260]	; (801038c <pbuf_free+0x120>)
 8010288:	4841      	ldr	r0, [pc, #260]	; (8010390 <pbuf_free+0x124>)
 801028a:	f007 fd3b 	bl	8017d04 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801028e:	2300      	movs	r3, #0
 8010290:	e076      	b.n	8010380 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	7b1b      	ldrb	r3, [r3, #12]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d012      	beq.n	80102c0 <pbuf_free+0x54>
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	7b1b      	ldrb	r3, [r3, #12]
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d00e      	beq.n	80102c0 <pbuf_free+0x54>
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	7b1b      	ldrb	r3, [r3, #12]
 80102a6:	2b02      	cmp	r3, #2
 80102a8:	d00a      	beq.n	80102c0 <pbuf_free+0x54>
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	7b1b      	ldrb	r3, [r3, #12]
 80102ae:	2b03      	cmp	r3, #3
 80102b0:	d006      	beq.n	80102c0 <pbuf_free+0x54>
 80102b2:	4b35      	ldr	r3, [pc, #212]	; (8010388 <pbuf_free+0x11c>)
 80102b4:	f240 22de 	movw	r2, #734	; 0x2de
 80102b8:	4936      	ldr	r1, [pc, #216]	; (8010394 <pbuf_free+0x128>)
 80102ba:	4835      	ldr	r0, [pc, #212]	; (8010390 <pbuf_free+0x124>)
 80102bc:	f007 fd22 	bl	8017d04 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 80102c0:	2300      	movs	r3, #0
 80102c2:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80102c4:	e058      	b.n	8010378 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80102c6:	f007 fcb9 	bl	8017c3c <sys_arch_protect>
 80102ca:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	89db      	ldrh	r3, [r3, #14]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d106      	bne.n	80102e2 <pbuf_free+0x76>
 80102d4:	4b2c      	ldr	r3, [pc, #176]	; (8010388 <pbuf_free+0x11c>)
 80102d6:	f240 22eb 	movw	r2, #747	; 0x2eb
 80102da:	492f      	ldr	r1, [pc, #188]	; (8010398 <pbuf_free+0x12c>)
 80102dc:	482c      	ldr	r0, [pc, #176]	; (8010390 <pbuf_free+0x124>)
 80102de:	f007 fd11 	bl	8017d04 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	89db      	ldrh	r3, [r3, #14]
 80102e6:	3b01      	subs	r3, #1
 80102e8:	b29a      	uxth	r2, r3
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	81da      	strh	r2, [r3, #14]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	89db      	ldrh	r3, [r3, #14]
 80102f2:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 80102f4:	69b8      	ldr	r0, [r7, #24]
 80102f6:	f007 fcaf 	bl	8017c58 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80102fa:	8afb      	ldrh	r3, [r7, #22]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d139      	bne.n	8010374 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	7b1b      	ldrb	r3, [r3, #12]
 801030a:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	7b5b      	ldrb	r3, [r3, #13]
 8010310:	f003 0302 	and.w	r3, r3, #2
 8010314:	2b00      	cmp	r3, #0
 8010316:	d011      	beq.n	801033c <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	691b      	ldr	r3, [r3, #16]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d106      	bne.n	8010332 <pbuf_free+0xc6>
 8010324:	4b18      	ldr	r3, [pc, #96]	; (8010388 <pbuf_free+0x11c>)
 8010326:	f240 22f9 	movw	r2, #761	; 0x2f9
 801032a:	491c      	ldr	r1, [pc, #112]	; (801039c <pbuf_free+0x130>)
 801032c:	4818      	ldr	r0, [pc, #96]	; (8010390 <pbuf_free+0x124>)
 801032e:	f007 fce9 	bl	8017d04 <iprintf>
        pc->custom_free_function(p);
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	691b      	ldr	r3, [r3, #16]
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	4798      	blx	r3
 801033a:	e015      	b.n	8010368 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 801033c:	89fb      	ldrh	r3, [r7, #14]
 801033e:	2b03      	cmp	r3, #3
 8010340:	d104      	bne.n	801034c <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 8010342:	6879      	ldr	r1, [r7, #4]
 8010344:	200d      	movs	r0, #13
 8010346:	f7ff f9b5 	bl	800f6b4 <memp_free>
 801034a:	e00d      	b.n	8010368 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 801034c:	89fb      	ldrh	r3, [r7, #14]
 801034e:	2b01      	cmp	r3, #1
 8010350:	d002      	beq.n	8010358 <pbuf_free+0xec>
 8010352:	89fb      	ldrh	r3, [r7, #14]
 8010354:	2b02      	cmp	r3, #2
 8010356:	d104      	bne.n	8010362 <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 8010358:	6879      	ldr	r1, [r7, #4]
 801035a:	200c      	movs	r0, #12
 801035c:	f7ff f9aa 	bl	800f6b4 <memp_free>
 8010360:	e002      	b.n	8010368 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8010362:	6878      	ldr	r0, [r7, #4]
 8010364:	f7fe fe46 	bl	800eff4 <mem_free>
        }
      }
      count++;
 8010368:	7ffb      	ldrb	r3, [r7, #31]
 801036a:	3301      	adds	r3, #1
 801036c:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801036e:	693b      	ldr	r3, [r7, #16]
 8010370:	607b      	str	r3, [r7, #4]
 8010372:	e001      	b.n	8010378 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8010374:	2300      	movs	r3, #0
 8010376:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d1a3      	bne.n	80102c6 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801037e:	7ffb      	ldrb	r3, [r7, #31]
}
 8010380:	4618      	mov	r0, r3
 8010382:	3720      	adds	r7, #32
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}
 8010388:	080192e8 	.word	0x080192e8
 801038c:	08019520 	.word	0x08019520
 8010390:	08019334 	.word	0x08019334
 8010394:	0801955c 	.word	0x0801955c
 8010398:	08019574 	.word	0x08019574
 801039c:	0801958c 	.word	0x0801958c

080103a0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80103a0:	b480      	push	{r7}
 80103a2:	b085      	sub	sp, #20
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80103a8:	2300      	movs	r3, #0
 80103aa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80103ac:	e005      	b.n	80103ba <pbuf_clen+0x1a>
    ++len;
 80103ae:	89fb      	ldrh	r3, [r7, #14]
 80103b0:	3301      	adds	r3, #1
 80103b2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d1f6      	bne.n	80103ae <pbuf_clen+0xe>
  }
  return len;
 80103c0:	89fb      	ldrh	r3, [r7, #14]
}
 80103c2:	4618      	mov	r0, r3
 80103c4:	3714      	adds	r7, #20
 80103c6:	46bd      	mov	sp, r7
 80103c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103cc:	4770      	bx	lr
	...

080103d0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b084      	sub	sp, #16
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d016      	beq.n	801040c <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 80103de:	f007 fc2d 	bl	8017c3c <sys_arch_protect>
 80103e2:	60f8      	str	r0, [r7, #12]
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	89db      	ldrh	r3, [r3, #14]
 80103e8:	3301      	adds	r3, #1
 80103ea:	b29a      	uxth	r2, r3
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	81da      	strh	r2, [r3, #14]
 80103f0:	68f8      	ldr	r0, [r7, #12]
 80103f2:	f007 fc31 	bl	8017c58 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	89db      	ldrh	r3, [r3, #14]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d106      	bne.n	801040c <pbuf_ref+0x3c>
 80103fe:	4b05      	ldr	r3, [pc, #20]	; (8010414 <pbuf_ref+0x44>)
 8010400:	f240 3239 	movw	r2, #825	; 0x339
 8010404:	4904      	ldr	r1, [pc, #16]	; (8010418 <pbuf_ref+0x48>)
 8010406:	4805      	ldr	r0, [pc, #20]	; (801041c <pbuf_ref+0x4c>)
 8010408:	f007 fc7c 	bl	8017d04 <iprintf>
  }
}
 801040c:	bf00      	nop
 801040e:	3710      	adds	r7, #16
 8010410:	46bd      	mov	sp, r7
 8010412:	bd80      	pop	{r7, pc}
 8010414:	080192e8 	.word	0x080192e8
 8010418:	080195b0 	.word	0x080195b0
 801041c:	08019334 	.word	0x08019334

08010420 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b084      	sub	sp, #16
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d002      	beq.n	8010436 <pbuf_cat+0x16>
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d107      	bne.n	8010446 <pbuf_cat+0x26>
 8010436:	4b20      	ldr	r3, [pc, #128]	; (80104b8 <pbuf_cat+0x98>)
 8010438:	f240 324d 	movw	r2, #845	; 0x34d
 801043c:	491f      	ldr	r1, [pc, #124]	; (80104bc <pbuf_cat+0x9c>)
 801043e:	4820      	ldr	r0, [pc, #128]	; (80104c0 <pbuf_cat+0xa0>)
 8010440:	f007 fc60 	bl	8017d04 <iprintf>
 8010444:	e034      	b.n	80104b0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	60fb      	str	r3, [r7, #12]
 801044a:	e00a      	b.n	8010462 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	891a      	ldrh	r2, [r3, #8]
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	891b      	ldrh	r3, [r3, #8]
 8010454:	4413      	add	r3, r2
 8010456:	b29a      	uxth	r2, r3
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	60fb      	str	r3, [r7, #12]
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d1f0      	bne.n	801044c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	891a      	ldrh	r2, [r3, #8]
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	895b      	ldrh	r3, [r3, #10]
 8010472:	429a      	cmp	r2, r3
 8010474:	d006      	beq.n	8010484 <pbuf_cat+0x64>
 8010476:	4b10      	ldr	r3, [pc, #64]	; (80104b8 <pbuf_cat+0x98>)
 8010478:	f240 3255 	movw	r2, #853	; 0x355
 801047c:	4911      	ldr	r1, [pc, #68]	; (80104c4 <pbuf_cat+0xa4>)
 801047e:	4810      	ldr	r0, [pc, #64]	; (80104c0 <pbuf_cat+0xa0>)
 8010480:	f007 fc40 	bl	8017d04 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d006      	beq.n	801049a <pbuf_cat+0x7a>
 801048c:	4b0a      	ldr	r3, [pc, #40]	; (80104b8 <pbuf_cat+0x98>)
 801048e:	f240 3256 	movw	r2, #854	; 0x356
 8010492:	490d      	ldr	r1, [pc, #52]	; (80104c8 <pbuf_cat+0xa8>)
 8010494:	480a      	ldr	r0, [pc, #40]	; (80104c0 <pbuf_cat+0xa0>)
 8010496:	f007 fc35 	bl	8017d04 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	891a      	ldrh	r2, [r3, #8]
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	891b      	ldrh	r3, [r3, #8]
 80104a2:	4413      	add	r3, r2
 80104a4:	b29a      	uxth	r2, r3
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	683a      	ldr	r2, [r7, #0]
 80104ae:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80104b0:	3710      	adds	r7, #16
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
 80104b6:	bf00      	nop
 80104b8:	080192e8 	.word	0x080192e8
 80104bc:	080195c4 	.word	0x080195c4
 80104c0:	08019334 	.word	0x08019334
 80104c4:	080195fc 	.word	0x080195fc
 80104c8:	0801962c 	.word	0x0801962c

080104cc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80104cc:	b580      	push	{r7, lr}
 80104ce:	b084      	sub	sp, #16
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 80104d6:	2300      	movs	r3, #0
 80104d8:	81fb      	strh	r3, [r7, #14]
 80104da:	2300      	movs	r3, #0
 80104dc:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d008      	beq.n	80104f6 <pbuf_copy+0x2a>
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d005      	beq.n	80104f6 <pbuf_copy+0x2a>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	891a      	ldrh	r2, [r3, #8]
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	891b      	ldrh	r3, [r3, #8]
 80104f2:	429a      	cmp	r2, r3
 80104f4:	d209      	bcs.n	801050a <pbuf_copy+0x3e>
 80104f6:	4b54      	ldr	r3, [pc, #336]	; (8010648 <pbuf_copy+0x17c>)
 80104f8:	f240 32bd 	movw	r2, #957	; 0x3bd
 80104fc:	4953      	ldr	r1, [pc, #332]	; (801064c <pbuf_copy+0x180>)
 80104fe:	4854      	ldr	r0, [pc, #336]	; (8010650 <pbuf_copy+0x184>)
 8010500:	f007 fc00 	bl	8017d04 <iprintf>
 8010504:	f06f 030f 	mvn.w	r3, #15
 8010508:	e099      	b.n	801063e <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	895b      	ldrh	r3, [r3, #10]
 801050e:	461a      	mov	r2, r3
 8010510:	89fb      	ldrh	r3, [r7, #14]
 8010512:	1ad2      	subs	r2, r2, r3
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	895b      	ldrh	r3, [r3, #10]
 8010518:	4619      	mov	r1, r3
 801051a:	89bb      	ldrh	r3, [r7, #12]
 801051c:	1acb      	subs	r3, r1, r3
 801051e:	429a      	cmp	r2, r3
 8010520:	db05      	blt.n	801052e <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	895a      	ldrh	r2, [r3, #10]
 8010526:	89bb      	ldrh	r3, [r7, #12]
 8010528:	1ad3      	subs	r3, r2, r3
 801052a:	817b      	strh	r3, [r7, #10]
 801052c:	e004      	b.n	8010538 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	895a      	ldrh	r2, [r3, #10]
 8010532:	89fb      	ldrh	r3, [r7, #14]
 8010534:	1ad3      	subs	r3, r2, r3
 8010536:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	685a      	ldr	r2, [r3, #4]
 801053c:	89fb      	ldrh	r3, [r7, #14]
 801053e:	18d0      	adds	r0, r2, r3
 8010540:	683b      	ldr	r3, [r7, #0]
 8010542:	685a      	ldr	r2, [r3, #4]
 8010544:	89bb      	ldrh	r3, [r7, #12]
 8010546:	4413      	add	r3, r2
 8010548:	897a      	ldrh	r2, [r7, #10]
 801054a:	4619      	mov	r1, r3
 801054c:	f007 fbc7 	bl	8017cde <memcpy>
    offset_to += len;
 8010550:	89fa      	ldrh	r2, [r7, #14]
 8010552:	897b      	ldrh	r3, [r7, #10]
 8010554:	4413      	add	r3, r2
 8010556:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8010558:	89ba      	ldrh	r2, [r7, #12]
 801055a:	897b      	ldrh	r3, [r7, #10]
 801055c:	4413      	add	r3, r2
 801055e:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	895b      	ldrh	r3, [r3, #10]
 8010564:	89fa      	ldrh	r2, [r7, #14]
 8010566:	429a      	cmp	r2, r3
 8010568:	d906      	bls.n	8010578 <pbuf_copy+0xac>
 801056a:	4b37      	ldr	r3, [pc, #220]	; (8010648 <pbuf_copy+0x17c>)
 801056c:	f240 32cd 	movw	r2, #973	; 0x3cd
 8010570:	4938      	ldr	r1, [pc, #224]	; (8010654 <pbuf_copy+0x188>)
 8010572:	4837      	ldr	r0, [pc, #220]	; (8010650 <pbuf_copy+0x184>)
 8010574:	f007 fbc6 	bl	8017d04 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	895b      	ldrh	r3, [r3, #10]
 801057c:	89ba      	ldrh	r2, [r7, #12]
 801057e:	429a      	cmp	r2, r3
 8010580:	d906      	bls.n	8010590 <pbuf_copy+0xc4>
 8010582:	4b31      	ldr	r3, [pc, #196]	; (8010648 <pbuf_copy+0x17c>)
 8010584:	f240 32ce 	movw	r2, #974	; 0x3ce
 8010588:	4933      	ldr	r1, [pc, #204]	; (8010658 <pbuf_copy+0x18c>)
 801058a:	4831      	ldr	r0, [pc, #196]	; (8010650 <pbuf_copy+0x184>)
 801058c:	f007 fbba 	bl	8017d04 <iprintf>
    if (offset_from >= p_from->len) {
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	895b      	ldrh	r3, [r3, #10]
 8010594:	89ba      	ldrh	r2, [r7, #12]
 8010596:	429a      	cmp	r2, r3
 8010598:	d304      	bcc.n	80105a4 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 801059a:	2300      	movs	r3, #0
 801059c:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	895b      	ldrh	r3, [r3, #10]
 80105a8:	89fa      	ldrh	r2, [r7, #14]
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d114      	bne.n	80105d8 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 80105ae:	2300      	movs	r3, #0
 80105b0:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d10c      	bne.n	80105d8 <pbuf_copy+0x10c>
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d009      	beq.n	80105d8 <pbuf_copy+0x10c>
 80105c4:	4b20      	ldr	r3, [pc, #128]	; (8010648 <pbuf_copy+0x17c>)
 80105c6:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80105ca:	4924      	ldr	r1, [pc, #144]	; (801065c <pbuf_copy+0x190>)
 80105cc:	4820      	ldr	r0, [pc, #128]	; (8010650 <pbuf_copy+0x184>)
 80105ce:	f007 fb99 	bl	8017d04 <iprintf>
 80105d2:	f06f 030f 	mvn.w	r3, #15
 80105d6:	e032      	b.n	801063e <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d013      	beq.n	8010606 <pbuf_copy+0x13a>
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	895a      	ldrh	r2, [r3, #10]
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	891b      	ldrh	r3, [r3, #8]
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d10d      	bne.n	8010606 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d009      	beq.n	8010606 <pbuf_copy+0x13a>
 80105f2:	4b15      	ldr	r3, [pc, #84]	; (8010648 <pbuf_copy+0x17c>)
 80105f4:	f240 32de 	movw	r2, #990	; 0x3de
 80105f8:	4919      	ldr	r1, [pc, #100]	; (8010660 <pbuf_copy+0x194>)
 80105fa:	4815      	ldr	r0, [pc, #84]	; (8010650 <pbuf_copy+0x184>)
 80105fc:	f007 fb82 	bl	8017d04 <iprintf>
 8010600:	f06f 0305 	mvn.w	r3, #5
 8010604:	e01b      	b.n	801063e <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d013      	beq.n	8010634 <pbuf_copy+0x168>
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	895a      	ldrh	r2, [r3, #10]
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	891b      	ldrh	r3, [r3, #8]
 8010614:	429a      	cmp	r2, r3
 8010616:	d10d      	bne.n	8010634 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d009      	beq.n	8010634 <pbuf_copy+0x168>
 8010620:	4b09      	ldr	r3, [pc, #36]	; (8010648 <pbuf_copy+0x17c>)
 8010622:	f240 32e3 	movw	r2, #995	; 0x3e3
 8010626:	490e      	ldr	r1, [pc, #56]	; (8010660 <pbuf_copy+0x194>)
 8010628:	4809      	ldr	r0, [pc, #36]	; (8010650 <pbuf_copy+0x184>)
 801062a:	f007 fb6b 	bl	8017d04 <iprintf>
 801062e:	f06f 0305 	mvn.w	r3, #5
 8010632:	e004      	b.n	801063e <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010634:	683b      	ldr	r3, [r7, #0]
 8010636:	2b00      	cmp	r3, #0
 8010638:	f47f af67 	bne.w	801050a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801063c:	2300      	movs	r3, #0
}
 801063e:	4618      	mov	r0, r3
 8010640:	3710      	adds	r7, #16
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}
 8010646:	bf00      	nop
 8010648:	080192e8 	.word	0x080192e8
 801064c:	08019678 	.word	0x08019678
 8010650:	08019334 	.word	0x08019334
 8010654:	080196a8 	.word	0x080196a8
 8010658:	080196c0 	.word	0x080196c0
 801065c:	080196dc 	.word	0x080196dc
 8010660:	080196ec 	.word	0x080196ec

08010664 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b088      	sub	sp, #32
 8010668:	af00      	add	r7, sp, #0
 801066a:	60f8      	str	r0, [r7, #12]
 801066c:	60b9      	str	r1, [r7, #8]
 801066e:	4611      	mov	r1, r2
 8010670:	461a      	mov	r2, r3
 8010672:	460b      	mov	r3, r1
 8010674:	80fb      	strh	r3, [r7, #6]
 8010676:	4613      	mov	r3, r2
 8010678:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801067a:	2300      	movs	r3, #0
 801067c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d108      	bne.n	8010696 <pbuf_copy_partial+0x32>
 8010684:	4b30      	ldr	r3, [pc, #192]	; (8010748 <pbuf_copy_partial+0xe4>)
 8010686:	f240 32fe 	movw	r2, #1022	; 0x3fe
 801068a:	4930      	ldr	r1, [pc, #192]	; (801074c <pbuf_copy_partial+0xe8>)
 801068c:	4830      	ldr	r0, [pc, #192]	; (8010750 <pbuf_copy_partial+0xec>)
 801068e:	f007 fb39 	bl	8017d04 <iprintf>
 8010692:	2300      	movs	r3, #0
 8010694:	e054      	b.n	8010740 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d108      	bne.n	80106ae <pbuf_copy_partial+0x4a>
 801069c:	4b2a      	ldr	r3, [pc, #168]	; (8010748 <pbuf_copy_partial+0xe4>)
 801069e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80106a2:	492c      	ldr	r1, [pc, #176]	; (8010754 <pbuf_copy_partial+0xf0>)
 80106a4:	482a      	ldr	r0, [pc, #168]	; (8010750 <pbuf_copy_partial+0xec>)
 80106a6:	f007 fb2d 	bl	8017d04 <iprintf>
 80106aa:	2300      	movs	r3, #0
 80106ac:	e048      	b.n	8010740 <pbuf_copy_partial+0xdc>

  left = 0;
 80106ae:	2300      	movs	r3, #0
 80106b0:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d002      	beq.n	80106be <pbuf_copy_partial+0x5a>
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d101      	bne.n	80106c2 <pbuf_copy_partial+0x5e>
    return 0;
 80106be:	2300      	movs	r3, #0
 80106c0:	e03e      	b.n	8010740 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	61fb      	str	r3, [r7, #28]
 80106c6:	e034      	b.n	8010732 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 80106c8:	88bb      	ldrh	r3, [r7, #4]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d00a      	beq.n	80106e4 <pbuf_copy_partial+0x80>
 80106ce:	69fb      	ldr	r3, [r7, #28]
 80106d0:	895b      	ldrh	r3, [r3, #10]
 80106d2:	88ba      	ldrh	r2, [r7, #4]
 80106d4:	429a      	cmp	r2, r3
 80106d6:	d305      	bcc.n	80106e4 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 80106d8:	69fb      	ldr	r3, [r7, #28]
 80106da:	895b      	ldrh	r3, [r3, #10]
 80106dc:	88ba      	ldrh	r2, [r7, #4]
 80106de:	1ad3      	subs	r3, r2, r3
 80106e0:	80bb      	strh	r3, [r7, #4]
 80106e2:	e023      	b.n	801072c <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 80106e4:	69fb      	ldr	r3, [r7, #28]
 80106e6:	895a      	ldrh	r2, [r3, #10]
 80106e8:	88bb      	ldrh	r3, [r7, #4]
 80106ea:	1ad3      	subs	r3, r2, r3
 80106ec:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80106ee:	8b3a      	ldrh	r2, [r7, #24]
 80106f0:	88fb      	ldrh	r3, [r7, #6]
 80106f2:	429a      	cmp	r2, r3
 80106f4:	d901      	bls.n	80106fa <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 80106f6:	88fb      	ldrh	r3, [r7, #6]
 80106f8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80106fa:	8b7b      	ldrh	r3, [r7, #26]
 80106fc:	68ba      	ldr	r2, [r7, #8]
 80106fe:	18d0      	adds	r0, r2, r3
 8010700:	69fb      	ldr	r3, [r7, #28]
 8010702:	685a      	ldr	r2, [r3, #4]
 8010704:	88bb      	ldrh	r3, [r7, #4]
 8010706:	4413      	add	r3, r2
 8010708:	8b3a      	ldrh	r2, [r7, #24]
 801070a:	4619      	mov	r1, r3
 801070c:	f007 fae7 	bl	8017cde <memcpy>
      copied_total += buf_copy_len;
 8010710:	8afa      	ldrh	r2, [r7, #22]
 8010712:	8b3b      	ldrh	r3, [r7, #24]
 8010714:	4413      	add	r3, r2
 8010716:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8010718:	8b7a      	ldrh	r2, [r7, #26]
 801071a:	8b3b      	ldrh	r3, [r7, #24]
 801071c:	4413      	add	r3, r2
 801071e:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8010720:	88fa      	ldrh	r2, [r7, #6]
 8010722:	8b3b      	ldrh	r3, [r7, #24]
 8010724:	1ad3      	subs	r3, r2, r3
 8010726:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010728:	2300      	movs	r3, #0
 801072a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801072c:	69fb      	ldr	r3, [r7, #28]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	61fb      	str	r3, [r7, #28]
 8010732:	88fb      	ldrh	r3, [r7, #6]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d002      	beq.n	801073e <pbuf_copy_partial+0xda>
 8010738:	69fb      	ldr	r3, [r7, #28]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d1c4      	bne.n	80106c8 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 801073e:	8afb      	ldrh	r3, [r7, #22]
}
 8010740:	4618      	mov	r0, r3
 8010742:	3720      	adds	r7, #32
 8010744:	46bd      	mov	sp, r7
 8010746:	bd80      	pop	{r7, pc}
 8010748:	080192e8 	.word	0x080192e8
 801074c:	08019718 	.word	0x08019718
 8010750:	08019334 	.word	0x08019334
 8010754:	08019738 	.word	0x08019738

08010758 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010758:	b480      	push	{r7}
 801075a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 801075c:	bf00      	nop
 801075e:	46bd      	mov	sp, r7
 8010760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010764:	4770      	bx	lr
	...

08010768 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801076c:	f000 fdf6 	bl	801135c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010770:	4b07      	ldr	r3, [pc, #28]	; (8010790 <tcp_tmr+0x28>)
 8010772:	781b      	ldrb	r3, [r3, #0]
 8010774:	3301      	adds	r3, #1
 8010776:	b2da      	uxtb	r2, r3
 8010778:	4b05      	ldr	r3, [pc, #20]	; (8010790 <tcp_tmr+0x28>)
 801077a:	701a      	strb	r2, [r3, #0]
 801077c:	4b04      	ldr	r3, [pc, #16]	; (8010790 <tcp_tmr+0x28>)
 801077e:	781b      	ldrb	r3, [r3, #0]
 8010780:	f003 0301 	and.w	r3, r3, #1
 8010784:	2b00      	cmp	r3, #0
 8010786:	d001      	beq.n	801078c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010788:	f000 fb22 	bl	8010dd0 <tcp_slowtmr>
  }
}
 801078c:	bf00      	nop
 801078e:	bd80      	pop	{r7, pc}
 8010790:	240217fd 	.word	0x240217fd

08010794 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010794:	b480      	push	{r7}
 8010796:	b085      	sub	sp, #20
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
 801079c:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	60fb      	str	r3, [r7, #12]
 80107a2:	e00a      	b.n	80107ba <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80107a8:	683a      	ldr	r2, [r7, #0]
 80107aa:	429a      	cmp	r2, r3
 80107ac:	d102      	bne.n	80107b4 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	2200      	movs	r2, #0
 80107b2:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	68db      	ldr	r3, [r3, #12]
 80107b8:	60fb      	str	r3, [r7, #12]
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d1f1      	bne.n	80107a4 <tcp_remove_listener+0x10>
      }
   }
}
 80107c0:	bf00      	nop
 80107c2:	3714      	adds	r7, #20
 80107c4:	46bd      	mov	sp, r7
 80107c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ca:	4770      	bx	lr

080107cc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b084      	sub	sp, #16
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d105      	bne.n	80107e6 <tcp_listen_closed+0x1a>
 80107da:	4b13      	ldr	r3, [pc, #76]	; (8010828 <tcp_listen_closed+0x5c>)
 80107dc:	22c0      	movs	r2, #192	; 0xc0
 80107de:	4913      	ldr	r1, [pc, #76]	; (801082c <tcp_listen_closed+0x60>)
 80107e0:	4813      	ldr	r0, [pc, #76]	; (8010830 <tcp_listen_closed+0x64>)
 80107e2:	f007 fa8f 	bl	8017d04 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	7d1b      	ldrb	r3, [r3, #20]
 80107ea:	2b01      	cmp	r3, #1
 80107ec:	d005      	beq.n	80107fa <tcp_listen_closed+0x2e>
 80107ee:	4b0e      	ldr	r3, [pc, #56]	; (8010828 <tcp_listen_closed+0x5c>)
 80107f0:	22c1      	movs	r2, #193	; 0xc1
 80107f2:	4910      	ldr	r1, [pc, #64]	; (8010834 <tcp_listen_closed+0x68>)
 80107f4:	480e      	ldr	r0, [pc, #56]	; (8010830 <tcp_listen_closed+0x64>)
 80107f6:	f007 fa85 	bl	8017d04 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80107fa:	2301      	movs	r3, #1
 80107fc:	60fb      	str	r3, [r7, #12]
 80107fe:	e00b      	b.n	8010818 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8010800:	4a0d      	ldr	r2, [pc, #52]	; (8010838 <tcp_listen_closed+0x6c>)
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	6879      	ldr	r1, [r7, #4]
 801080c:	4618      	mov	r0, r3
 801080e:	f7ff ffc1 	bl	8010794 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	3301      	adds	r3, #1
 8010816:	60fb      	str	r3, [r7, #12]
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	2b03      	cmp	r3, #3
 801081c:	d9f0      	bls.n	8010800 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801081e:	bf00      	nop
 8010820:	3710      	adds	r7, #16
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}
 8010826:	bf00      	nop
 8010828:	0801986c 	.word	0x0801986c
 801082c:	0801989c 	.word	0x0801989c
 8010830:	080198a8 	.word	0x080198a8
 8010834:	080198d0 	.word	0x080198d0
 8010838:	0801ad24 	.word	0x0801ad24

0801083c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801083c:	b5b0      	push	{r4, r5, r7, lr}
 801083e:	b086      	sub	sp, #24
 8010840:	af02      	add	r7, sp, #8
 8010842:	6078      	str	r0, [r7, #4]
 8010844:	460b      	mov	r3, r1
 8010846:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010848:	78fb      	ldrb	r3, [r7, #3]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d075      	beq.n	801093a <tcp_close_shutdown+0xfe>
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	7d1b      	ldrb	r3, [r3, #20]
 8010852:	2b04      	cmp	r3, #4
 8010854:	d003      	beq.n	801085e <tcp_close_shutdown+0x22>
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	7d1b      	ldrb	r3, [r3, #20]
 801085a:	2b07      	cmp	r3, #7
 801085c:	d16d      	bne.n	801093a <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010862:	2b00      	cmp	r3, #0
 8010864:	d104      	bne.n	8010870 <tcp_close_shutdown+0x34>
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801086a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801086e:	d064      	beq.n	801093a <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	7e9b      	ldrb	r3, [r3, #26]
 8010874:	f003 0310 	and.w	r3, r3, #16
 8010878:	2b00      	cmp	r3, #0
 801087a:	d106      	bne.n	801088a <tcp_close_shutdown+0x4e>
 801087c:	4b59      	ldr	r3, [pc, #356]	; (80109e4 <tcp_close_shutdown+0x1a8>)
 801087e:	f240 120f 	movw	r2, #271	; 0x10f
 8010882:	4959      	ldr	r1, [pc, #356]	; (80109e8 <tcp_close_shutdown+0x1ac>)
 8010884:	4859      	ldr	r0, [pc, #356]	; (80109ec <tcp_close_shutdown+0x1b0>)
 8010886:	f007 fa3d 	bl	8017d04 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010892:	687c      	ldr	r4, [r7, #4]
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	1d1d      	adds	r5, r3, #4
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	8adb      	ldrh	r3, [r3, #22]
 801089c:	687a      	ldr	r2, [r7, #4]
 801089e:	8b12      	ldrh	r2, [r2, #24]
 80108a0:	9201      	str	r2, [sp, #4]
 80108a2:	9300      	str	r3, [sp, #0]
 80108a4:	462b      	mov	r3, r5
 80108a6:	4622      	mov	r2, r4
 80108a8:	f004 f872 	bl	8014990 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f000 ffd5 	bl	801185c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80108b2:	4b4f      	ldr	r3, [pc, #316]	; (80109f0 <tcp_close_shutdown+0x1b4>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	687a      	ldr	r2, [r7, #4]
 80108b8:	429a      	cmp	r2, r3
 80108ba:	d105      	bne.n	80108c8 <tcp_close_shutdown+0x8c>
 80108bc:	4b4c      	ldr	r3, [pc, #304]	; (80109f0 <tcp_close_shutdown+0x1b4>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	68db      	ldr	r3, [r3, #12]
 80108c2:	4a4b      	ldr	r2, [pc, #300]	; (80109f0 <tcp_close_shutdown+0x1b4>)
 80108c4:	6013      	str	r3, [r2, #0]
 80108c6:	e013      	b.n	80108f0 <tcp_close_shutdown+0xb4>
 80108c8:	4b49      	ldr	r3, [pc, #292]	; (80109f0 <tcp_close_shutdown+0x1b4>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	60fb      	str	r3, [r7, #12]
 80108ce:	e00c      	b.n	80108ea <tcp_close_shutdown+0xae>
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	68db      	ldr	r3, [r3, #12]
 80108d4:	687a      	ldr	r2, [r7, #4]
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d104      	bne.n	80108e4 <tcp_close_shutdown+0xa8>
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	68da      	ldr	r2, [r3, #12]
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	60da      	str	r2, [r3, #12]
 80108e2:	e005      	b.n	80108f0 <tcp_close_shutdown+0xb4>
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	68db      	ldr	r3, [r3, #12]
 80108e8:	60fb      	str	r3, [r7, #12]
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d1ef      	bne.n	80108d0 <tcp_close_shutdown+0x94>
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2200      	movs	r2, #0
 80108f4:	60da      	str	r2, [r3, #12]
 80108f6:	4b3f      	ldr	r3, [pc, #252]	; (80109f4 <tcp_close_shutdown+0x1b8>)
 80108f8:	2201      	movs	r2, #1
 80108fa:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	7d1b      	ldrb	r3, [r3, #20]
 8010900:	2b04      	cmp	r3, #4
 8010902:	d10c      	bne.n	801091e <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	220a      	movs	r2, #10
 8010908:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801090a:	4b3b      	ldr	r3, [pc, #236]	; (80109f8 <tcp_close_shutdown+0x1bc>)
 801090c:	681a      	ldr	r2, [r3, #0]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	60da      	str	r2, [r3, #12]
 8010912:	4a39      	ldr	r2, [pc, #228]	; (80109f8 <tcp_close_shutdown+0x1bc>)
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6013      	str	r3, [r2, #0]
 8010918:	f004 fa8c 	bl	8014e34 <tcp_timer_needed>
 801091c:	e00b      	b.n	8010936 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 801091e:	4b37      	ldr	r3, [pc, #220]	; (80109fc <tcp_close_shutdown+0x1c0>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	687a      	ldr	r2, [r7, #4]
 8010924:	429a      	cmp	r2, r3
 8010926:	d102      	bne.n	801092e <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8010928:	f003 fafc 	bl	8013f24 <tcp_trigger_input_pcb_close>
 801092c:	e003      	b.n	8010936 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 801092e:	6879      	ldr	r1, [r7, #4]
 8010930:	2001      	movs	r0, #1
 8010932:	f7fe febf 	bl	800f6b4 <memp_free>
        }
      }
      return ERR_OK;
 8010936:	2300      	movs	r3, #0
 8010938:	e050      	b.n	80109dc <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	7d1b      	ldrb	r3, [r3, #20]
 801093e:	2b01      	cmp	r3, #1
 8010940:	d02e      	beq.n	80109a0 <tcp_close_shutdown+0x164>
 8010942:	2b02      	cmp	r3, #2
 8010944:	d038      	beq.n	80109b8 <tcp_close_shutdown+0x17c>
 8010946:	2b00      	cmp	r3, #0
 8010948:	d142      	bne.n	80109d0 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	8adb      	ldrh	r3, [r3, #22]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d021      	beq.n	8010996 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8010952:	4b2b      	ldr	r3, [pc, #172]	; (8010a00 <tcp_close_shutdown+0x1c4>)
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	687a      	ldr	r2, [r7, #4]
 8010958:	429a      	cmp	r2, r3
 801095a:	d105      	bne.n	8010968 <tcp_close_shutdown+0x12c>
 801095c:	4b28      	ldr	r3, [pc, #160]	; (8010a00 <tcp_close_shutdown+0x1c4>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	68db      	ldr	r3, [r3, #12]
 8010962:	4a27      	ldr	r2, [pc, #156]	; (8010a00 <tcp_close_shutdown+0x1c4>)
 8010964:	6013      	str	r3, [r2, #0]
 8010966:	e013      	b.n	8010990 <tcp_close_shutdown+0x154>
 8010968:	4b25      	ldr	r3, [pc, #148]	; (8010a00 <tcp_close_shutdown+0x1c4>)
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	60bb      	str	r3, [r7, #8]
 801096e:	e00c      	b.n	801098a <tcp_close_shutdown+0x14e>
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	68db      	ldr	r3, [r3, #12]
 8010974:	687a      	ldr	r2, [r7, #4]
 8010976:	429a      	cmp	r2, r3
 8010978:	d104      	bne.n	8010984 <tcp_close_shutdown+0x148>
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	68da      	ldr	r2, [r3, #12]
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	60da      	str	r2, [r3, #12]
 8010982:	e005      	b.n	8010990 <tcp_close_shutdown+0x154>
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	68db      	ldr	r3, [r3, #12]
 8010988:	60bb      	str	r3, [r7, #8]
 801098a:	68bb      	ldr	r3, [r7, #8]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d1ef      	bne.n	8010970 <tcp_close_shutdown+0x134>
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2200      	movs	r2, #0
 8010994:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8010996:	6879      	ldr	r1, [r7, #4]
 8010998:	2001      	movs	r0, #1
 801099a:	f7fe fe8b 	bl	800f6b4 <memp_free>
    break;
 801099e:	e01c      	b.n	80109da <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 80109a0:	6878      	ldr	r0, [r7, #4]
 80109a2:	f7ff ff13 	bl	80107cc <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80109a6:	6879      	ldr	r1, [r7, #4]
 80109a8:	4816      	ldr	r0, [pc, #88]	; (8010a04 <tcp_close_shutdown+0x1c8>)
 80109aa:	f000 ff99 	bl	80118e0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80109ae:	6879      	ldr	r1, [r7, #4]
 80109b0:	2002      	movs	r0, #2
 80109b2:	f7fe fe7f 	bl	800f6b4 <memp_free>
    break;
 80109b6:	e010      	b.n	80109da <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 80109b8:	6879      	ldr	r1, [r7, #4]
 80109ba:	480d      	ldr	r0, [pc, #52]	; (80109f0 <tcp_close_shutdown+0x1b4>)
 80109bc:	f000 ff90 	bl	80118e0 <tcp_pcb_remove>
 80109c0:	4b0c      	ldr	r3, [pc, #48]	; (80109f4 <tcp_close_shutdown+0x1b8>)
 80109c2:	2201      	movs	r2, #1
 80109c4:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 80109c6:	6879      	ldr	r1, [r7, #4]
 80109c8:	2001      	movs	r0, #1
 80109ca:	f7fe fe73 	bl	800f6b4 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 80109ce:	e004      	b.n	80109da <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	f000 f819 	bl	8010a08 <tcp_close_shutdown_fin>
 80109d6:	4603      	mov	r3, r0
 80109d8:	e000      	b.n	80109dc <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 80109da:	2300      	movs	r3, #0
}
 80109dc:	4618      	mov	r0, r3
 80109de:	3710      	adds	r7, #16
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bdb0      	pop	{r4, r5, r7, pc}
 80109e4:	0801986c 	.word	0x0801986c
 80109e8:	080198e8 	.word	0x080198e8
 80109ec:	080198a8 	.word	0x080198a8
 80109f0:	24024e4c 	.word	0x24024e4c
 80109f4:	24024e48 	.word	0x24024e48
 80109f8:	24024e5c 	.word	0x24024e5c
 80109fc:	24024e60 	.word	0x24024e60
 8010a00:	24024e58 	.word	0x24024e58
 8010a04:	24024e54 	.word	0x24024e54

08010a08 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b084      	sub	sp, #16
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d106      	bne.n	8010a24 <tcp_close_shutdown_fin+0x1c>
 8010a16:	4b2c      	ldr	r3, [pc, #176]	; (8010ac8 <tcp_close_shutdown_fin+0xc0>)
 8010a18:	f240 124d 	movw	r2, #333	; 0x14d
 8010a1c:	492b      	ldr	r1, [pc, #172]	; (8010acc <tcp_close_shutdown_fin+0xc4>)
 8010a1e:	482c      	ldr	r0, [pc, #176]	; (8010ad0 <tcp_close_shutdown_fin+0xc8>)
 8010a20:	f007 f970 	bl	8017d04 <iprintf>

  switch (pcb->state) {
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	7d1b      	ldrb	r3, [r3, #20]
 8010a28:	2b04      	cmp	r3, #4
 8010a2a:	d010      	beq.n	8010a4e <tcp_close_shutdown_fin+0x46>
 8010a2c:	2b07      	cmp	r3, #7
 8010a2e:	d01b      	beq.n	8010a68 <tcp_close_shutdown_fin+0x60>
 8010a30:	2b03      	cmp	r3, #3
 8010a32:	d126      	bne.n	8010a82 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f003 fb01 	bl	801403c <tcp_send_fin>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d11f      	bne.n	8010a86 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2205      	movs	r2, #5
 8010a4a:	751a      	strb	r2, [r3, #20]
    }
    break;
 8010a4c:	e01b      	b.n	8010a86 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	f003 faf4 	bl	801403c <tcp_send_fin>
 8010a54:	4603      	mov	r3, r0
 8010a56:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d114      	bne.n	8010a8a <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2205      	movs	r2, #5
 8010a64:	751a      	strb	r2, [r3, #20]
    }
    break;
 8010a66:	e010      	b.n	8010a8a <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f003 fae7 	bl	801403c <tcp_send_fin>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d109      	bne.n	8010a8e <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	2209      	movs	r2, #9
 8010a7e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8010a80:	e005      	b.n	8010a8e <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8010a82:	2300      	movs	r3, #0
 8010a84:	e01c      	b.n	8010ac0 <tcp_close_shutdown_fin+0xb8>
    break;
 8010a86:	bf00      	nop
 8010a88:	e002      	b.n	8010a90 <tcp_close_shutdown_fin+0x88>
    break;
 8010a8a:	bf00      	nop
 8010a8c:	e000      	b.n	8010a90 <tcp_close_shutdown_fin+0x88>
    break;
 8010a8e:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d103      	bne.n	8010aa0 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f003 fcef 	bl	801447c <tcp_output>
 8010a9e:	e00d      	b.n	8010abc <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8010aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aa8:	d108      	bne.n	8010abc <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	7e9b      	ldrb	r3, [r3, #26]
 8010aae:	f043 0308 	orr.w	r3, r3, #8
 8010ab2:	b2da      	uxtb	r2, r3
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	e001      	b.n	8010ac0 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8010abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	3710      	adds	r7, #16
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	bd80      	pop	{r7, pc}
 8010ac8:	0801986c 	.word	0x0801986c
 8010acc:	0801989c 	.word	0x0801989c
 8010ad0:	080198a8 	.word	0x080198a8

08010ad4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	7d1b      	ldrb	r3, [r3, #20]
 8010ae0:	2b01      	cmp	r3, #1
 8010ae2:	d006      	beq.n	8010af2 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	7e9b      	ldrb	r3, [r3, #26]
 8010ae8:	f043 0310 	orr.w	r3, r3, #16
 8010aec:	b2da      	uxtb	r2, r3
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010af2:	2101      	movs	r1, #1
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f7ff fea1 	bl	801083c <tcp_close_shutdown>
 8010afa:	4603      	mov	r3, r0
}
 8010afc:	4618      	mov	r0, r3
 8010afe:	3708      	adds	r7, #8
 8010b00:	46bd      	mov	sp, r7
 8010b02:	bd80      	pop	{r7, pc}

08010b04 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b08c      	sub	sp, #48	; 0x30
 8010b08:	af02      	add	r7, sp, #8
 8010b0a:	6078      	str	r0, [r7, #4]
 8010b0c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	7d1b      	ldrb	r3, [r3, #20]
 8010b12:	2b01      	cmp	r3, #1
 8010b14:	d106      	bne.n	8010b24 <tcp_abandon+0x20>
 8010b16:	4b4d      	ldr	r3, [pc, #308]	; (8010c4c <tcp_abandon+0x148>)
 8010b18:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010b1c:	494c      	ldr	r1, [pc, #304]	; (8010c50 <tcp_abandon+0x14c>)
 8010b1e:	484d      	ldr	r0, [pc, #308]	; (8010c54 <tcp_abandon+0x150>)
 8010b20:	f007 f8f0 	bl	8017d04 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	7d1b      	ldrb	r3, [r3, #20]
 8010b28:	2b0a      	cmp	r3, #10
 8010b2a:	d108      	bne.n	8010b3e <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010b2c:	6879      	ldr	r1, [r7, #4]
 8010b2e:	484a      	ldr	r0, [pc, #296]	; (8010c58 <tcp_abandon+0x154>)
 8010b30:	f000 fed6 	bl	80118e0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8010b34:	6879      	ldr	r1, [r7, #4]
 8010b36:	2001      	movs	r0, #1
 8010b38:	f7fe fdbc 	bl	800f6b4 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8010b3c:	e081      	b.n	8010c42 <tcp_abandon+0x13e>
    int send_rst = 0;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8010b42:	2300      	movs	r3, #0
 8010b44:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b4a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b50:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010b58:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	691b      	ldr	r3, [r3, #16]
 8010b5e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	7d1b      	ldrb	r3, [r3, #20]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d126      	bne.n	8010bb6 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	8adb      	ldrh	r3, [r3, #22]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d02e      	beq.n	8010bce <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010b70:	4b3a      	ldr	r3, [pc, #232]	; (8010c5c <tcp_abandon+0x158>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	687a      	ldr	r2, [r7, #4]
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d105      	bne.n	8010b86 <tcp_abandon+0x82>
 8010b7a:	4b38      	ldr	r3, [pc, #224]	; (8010c5c <tcp_abandon+0x158>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	68db      	ldr	r3, [r3, #12]
 8010b80:	4a36      	ldr	r2, [pc, #216]	; (8010c5c <tcp_abandon+0x158>)
 8010b82:	6013      	str	r3, [r2, #0]
 8010b84:	e013      	b.n	8010bae <tcp_abandon+0xaa>
 8010b86:	4b35      	ldr	r3, [pc, #212]	; (8010c5c <tcp_abandon+0x158>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	61fb      	str	r3, [r7, #28]
 8010b8c:	e00c      	b.n	8010ba8 <tcp_abandon+0xa4>
 8010b8e:	69fb      	ldr	r3, [r7, #28]
 8010b90:	68db      	ldr	r3, [r3, #12]
 8010b92:	687a      	ldr	r2, [r7, #4]
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d104      	bne.n	8010ba2 <tcp_abandon+0x9e>
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	68da      	ldr	r2, [r3, #12]
 8010b9c:	69fb      	ldr	r3, [r7, #28]
 8010b9e:	60da      	str	r2, [r3, #12]
 8010ba0:	e005      	b.n	8010bae <tcp_abandon+0xaa>
 8010ba2:	69fb      	ldr	r3, [r7, #28]
 8010ba4:	68db      	ldr	r3, [r3, #12]
 8010ba6:	61fb      	str	r3, [r7, #28]
 8010ba8:	69fb      	ldr	r3, [r7, #28]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d1ef      	bne.n	8010b8e <tcp_abandon+0x8a>
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	60da      	str	r2, [r3, #12]
 8010bb4:	e00b      	b.n	8010bce <tcp_abandon+0xca>
      send_rst = reset;
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	8adb      	ldrh	r3, [r3, #22]
 8010bbe:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010bc0:	6879      	ldr	r1, [r7, #4]
 8010bc2:	4827      	ldr	r0, [pc, #156]	; (8010c60 <tcp_abandon+0x15c>)
 8010bc4:	f000 fe8c 	bl	80118e0 <tcp_pcb_remove>
 8010bc8:	4b26      	ldr	r3, [pc, #152]	; (8010c64 <tcp_abandon+0x160>)
 8010bca:	2201      	movs	r2, #1
 8010bcc:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d004      	beq.n	8010be0 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f000 fc8b 	bl	80114f6 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d004      	beq.n	8010bf2 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010bec:	4618      	mov	r0, r3
 8010bee:	f000 fc82 	bl	80114f6 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d004      	beq.n	8010c04 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f000 fc79 	bl	80114f6 <tcp_segs_free>
    if (send_rst) {
 8010c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d00c      	beq.n	8010c24 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010c0a:	687a      	ldr	r2, [r7, #4]
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	1d19      	adds	r1, r3, #4
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	8b1b      	ldrh	r3, [r3, #24]
 8010c14:	9301      	str	r3, [sp, #4]
 8010c16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c18:	9300      	str	r3, [sp, #0]
 8010c1a:	460b      	mov	r3, r1
 8010c1c:	6979      	ldr	r1, [r7, #20]
 8010c1e:	69b8      	ldr	r0, [r7, #24]
 8010c20:	f003 feb6 	bl	8014990 <tcp_rst>
    last_state = pcb->state;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	7d1b      	ldrb	r3, [r3, #20]
 8010c28:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8010c2a:	6879      	ldr	r1, [r7, #4]
 8010c2c:	2001      	movs	r0, #1
 8010c2e:	f7fe fd41 	bl	800f6b4 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010c32:	693b      	ldr	r3, [r7, #16]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d004      	beq.n	8010c42 <tcp_abandon+0x13e>
 8010c38:	693b      	ldr	r3, [r7, #16]
 8010c3a:	f06f 010c 	mvn.w	r1, #12
 8010c3e:	68f8      	ldr	r0, [r7, #12]
 8010c40:	4798      	blx	r3
}
 8010c42:	bf00      	nop
 8010c44:	3728      	adds	r7, #40	; 0x28
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}
 8010c4a:	bf00      	nop
 8010c4c:	0801986c 	.word	0x0801986c
 8010c50:	08019904 	.word	0x08019904
 8010c54:	080198a8 	.word	0x080198a8
 8010c58:	24024e5c 	.word	0x24024e5c
 8010c5c:	24024e58 	.word	0x24024e58
 8010c60:	24024e4c 	.word	0x24024e4c
 8010c64:	24024e48 	.word	0x24024e48

08010c68 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b082      	sub	sp, #8
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010c70:	2101      	movs	r1, #1
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f7ff ff46 	bl	8010b04 <tcp_abandon>
}
 8010c78:	bf00      	nop
 8010c7a:	3708      	adds	r7, #8
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}

08010c80 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b084      	sub	sp, #16
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c8c:	687a      	ldr	r2, [r7, #4]
 8010c8e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010c90:	4413      	add	r3, r2
 8010c92:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c98:	687a      	ldr	r2, [r7, #4]
 8010c9a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8010c9c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8010ca0:	bf28      	it	cs
 8010ca2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8010ca6:	b292      	uxth	r2, r2
 8010ca8:	4413      	add	r3, r2
 8010caa:	68fa      	ldr	r2, [r7, #12]
 8010cac:	1ad3      	subs	r3, r2, r3
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	db08      	blt.n	8010cc4 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cbe:	68fa      	ldr	r2, [r7, #12]
 8010cc0:	1ad3      	subs	r3, r2, r3
 8010cc2:	e020      	b.n	8010d06 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ccc:	1ad3      	subs	r3, r2, r3
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	dd03      	ble.n	8010cda <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010cd8:	e014      	b.n	8010d04 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ce2:	1ad3      	subs	r3, r2, r3
 8010ce4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010ce6:	68bb      	ldr	r3, [r7, #8]
 8010ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010cec:	d306      	bcc.n	8010cfc <tcp_update_rcv_ann_wnd+0x7c>
 8010cee:	4b08      	ldr	r3, [pc, #32]	; (8010d10 <tcp_update_rcv_ann_wnd+0x90>)
 8010cf0:	f44f 7242 	mov.w	r2, #776	; 0x308
 8010cf4:	4907      	ldr	r1, [pc, #28]	; (8010d14 <tcp_update_rcv_ann_wnd+0x94>)
 8010cf6:	4808      	ldr	r0, [pc, #32]	; (8010d18 <tcp_update_rcv_ann_wnd+0x98>)
 8010cf8:	f007 f804 	bl	8017d04 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	b29a      	uxth	r2, r3
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010d04:	2300      	movs	r3, #0
  }
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	3710      	adds	r7, #16
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}
 8010d0e:	bf00      	nop
 8010d10:	0801986c 	.word	0x0801986c
 8010d14:	08019984 	.word	0x08019984
 8010d18:	080198a8 	.word	0x080198a8

08010d1c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b084      	sub	sp, #16
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
 8010d24:	460b      	mov	r3, r1
 8010d26:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	7d1b      	ldrb	r3, [r3, #20]
 8010d2c:	2b01      	cmp	r3, #1
 8010d2e:	d106      	bne.n	8010d3e <tcp_recved+0x22>
 8010d30:	4b23      	ldr	r3, [pc, #140]	; (8010dc0 <tcp_recved+0xa4>)
 8010d32:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010d36:	4923      	ldr	r1, [pc, #140]	; (8010dc4 <tcp_recved+0xa8>)
 8010d38:	4823      	ldr	r0, [pc, #140]	; (8010dc8 <tcp_recved+0xac>)
 8010d3a:	f006 ffe3 	bl	8017d04 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010d42:	887b      	ldrh	r3, [r7, #2]
 8010d44:	4413      	add	r3, r2
 8010d46:	b29a      	uxth	r2, r3
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d50:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010d54:	d904      	bls.n	8010d60 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010d5c:	851a      	strh	r2, [r3, #40]	; 0x28
 8010d5e:	e017      	b.n	8010d90 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d113      	bne.n	8010d90 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	7d1b      	ldrb	r3, [r3, #20]
 8010d6c:	2b07      	cmp	r3, #7
 8010d6e:	d003      	beq.n	8010d78 <tcp_recved+0x5c>
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	7d1b      	ldrb	r3, [r3, #20]
 8010d74:	2b09      	cmp	r3, #9
 8010d76:	d104      	bne.n	8010d82 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010d7e:	851a      	strh	r2, [r3, #40]	; 0x28
 8010d80:	e006      	b.n	8010d90 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8010d82:	4b0f      	ldr	r3, [pc, #60]	; (8010dc0 <tcp_recved+0xa4>)
 8010d84:	f240 322d 	movw	r2, #813	; 0x32d
 8010d88:	4910      	ldr	r1, [pc, #64]	; (8010dcc <tcp_recved+0xb0>)
 8010d8a:	480f      	ldr	r0, [pc, #60]	; (8010dc8 <tcp_recved+0xac>)
 8010d8c:	f006 ffba 	bl	8017d04 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f7ff ff75 	bl	8010c80 <tcp_update_rcv_ann_wnd>
 8010d96:	4603      	mov	r3, r0
 8010d98:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010da0:	db09      	blt.n	8010db6 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	7e9b      	ldrb	r3, [r3, #26]
 8010da6:	f043 0302 	orr.w	r3, r3, #2
 8010daa:	b2da      	uxtb	r2, r3
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f003 fb63 	bl	801447c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010db6:	bf00      	nop
 8010db8:	3710      	adds	r7, #16
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}
 8010dbe:	bf00      	nop
 8010dc0:	0801986c 	.word	0x0801986c
 8010dc4:	080199a0 	.word	0x080199a0
 8010dc8:	080198a8 	.word	0x080198a8
 8010dcc:	080199c8 	.word	0x080199c8

08010dd0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010dd0:	b5b0      	push	{r4, r5, r7, lr}
 8010dd2:	b08c      	sub	sp, #48	; 0x30
 8010dd4:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8010dda:	4b9a      	ldr	r3, [pc, #616]	; (8011044 <tcp_slowtmr+0x274>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	3301      	adds	r3, #1
 8010de0:	4a98      	ldr	r2, [pc, #608]	; (8011044 <tcp_slowtmr+0x274>)
 8010de2:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010de4:	4b98      	ldr	r3, [pc, #608]	; (8011048 <tcp_slowtmr+0x278>)
 8010de6:	781b      	ldrb	r3, [r3, #0]
 8010de8:	3301      	adds	r3, #1
 8010dea:	b2da      	uxtb	r2, r3
 8010dec:	4b96      	ldr	r3, [pc, #600]	; (8011048 <tcp_slowtmr+0x278>)
 8010dee:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8010df0:	2300      	movs	r3, #0
 8010df2:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8010df4:	4b95      	ldr	r3, [pc, #596]	; (801104c <tcp_slowtmr+0x27c>)
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8010dfa:	e22f      	b.n	801125c <tcp_slowtmr+0x48c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dfe:	7d1b      	ldrb	r3, [r3, #20]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d106      	bne.n	8010e12 <tcp_slowtmr+0x42>
 8010e04:	4b92      	ldr	r3, [pc, #584]	; (8011050 <tcp_slowtmr+0x280>)
 8010e06:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8010e0a:	4992      	ldr	r1, [pc, #584]	; (8011054 <tcp_slowtmr+0x284>)
 8010e0c:	4892      	ldr	r0, [pc, #584]	; (8011058 <tcp_slowtmr+0x288>)
 8010e0e:	f006 ff79 	bl	8017d04 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e14:	7d1b      	ldrb	r3, [r3, #20]
 8010e16:	2b01      	cmp	r3, #1
 8010e18:	d106      	bne.n	8010e28 <tcp_slowtmr+0x58>
 8010e1a:	4b8d      	ldr	r3, [pc, #564]	; (8011050 <tcp_slowtmr+0x280>)
 8010e1c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010e20:	498e      	ldr	r1, [pc, #568]	; (801105c <tcp_slowtmr+0x28c>)
 8010e22:	488d      	ldr	r0, [pc, #564]	; (8011058 <tcp_slowtmr+0x288>)
 8010e24:	f006 ff6e 	bl	8017d04 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e2a:	7d1b      	ldrb	r3, [r3, #20]
 8010e2c:	2b0a      	cmp	r3, #10
 8010e2e:	d106      	bne.n	8010e3e <tcp_slowtmr+0x6e>
 8010e30:	4b87      	ldr	r3, [pc, #540]	; (8011050 <tcp_slowtmr+0x280>)
 8010e32:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8010e36:	498a      	ldr	r1, [pc, #552]	; (8011060 <tcp_slowtmr+0x290>)
 8010e38:	4887      	ldr	r0, [pc, #540]	; (8011058 <tcp_slowtmr+0x288>)
 8010e3a:	f006 ff63 	bl	8017d04 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e40:	7f5a      	ldrb	r2, [r3, #29]
 8010e42:	4b81      	ldr	r3, [pc, #516]	; (8011048 <tcp_slowtmr+0x278>)
 8010e44:	781b      	ldrb	r3, [r3, #0]
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d103      	bne.n	8010e52 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8010e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e4c:	68db      	ldr	r3, [r3, #12]
 8010e4e:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8010e50:	e204      	b.n	801125c <tcp_slowtmr+0x48c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010e52:	4b7d      	ldr	r3, [pc, #500]	; (8011048 <tcp_slowtmr+0x278>)
 8010e54:	781a      	ldrb	r2, [r3, #0]
 8010e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e58:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e64:	7d1b      	ldrb	r3, [r3, #20]
 8010e66:	2b02      	cmp	r3, #2
 8010e68:	d108      	bne.n	8010e7c <tcp_slowtmr+0xac>
 8010e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010e70:	2b05      	cmp	r3, #5
 8010e72:	d903      	bls.n	8010e7c <tcp_slowtmr+0xac>
      ++pcb_remove;
 8010e74:	7ffb      	ldrb	r3, [r7, #31]
 8010e76:	3301      	adds	r3, #1
 8010e78:	77fb      	strb	r3, [r7, #31]
 8010e7a:	e0a2      	b.n	8010fc2 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8010e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010e82:	2b0b      	cmp	r3, #11
 8010e84:	d903      	bls.n	8010e8e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8010e86:	7ffb      	ldrb	r3, [r7, #31]
 8010e88:	3301      	adds	r3, #1
 8010e8a:	77fb      	strb	r3, [r7, #31]
 8010e8c:	e099      	b.n	8010fc2 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e90:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d032      	beq.n	8010efe <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8010e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010e9e:	3b01      	subs	r3, #1
 8010ea0:	4a70      	ldr	r2, [pc, #448]	; (8011064 <tcp_slowtmr+0x294>)
 8010ea2:	5cd3      	ldrb	r3, [r2, r3]
 8010ea4:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8010ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8010eac:	7cfa      	ldrb	r2, [r7, #19]
 8010eae:	429a      	cmp	r2, r3
 8010eb0:	d907      	bls.n	8010ec2 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8010eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8010eb8:	3301      	adds	r3, #1
 8010eba:	b2da      	uxtb	r2, r3
 8010ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ebe:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8010ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8010ec8:	7cfa      	ldrb	r2, [r7, #19]
 8010eca:	429a      	cmp	r2, r3
 8010ecc:	d879      	bhi.n	8010fc2 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8010ece:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ed0:	f003 fef0 	bl	8014cb4 <tcp_zero_window_probe>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d173      	bne.n	8010fc2 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8010eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010edc:	2200      	movs	r2, #0
 8010ede:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010ee8:	2b06      	cmp	r3, #6
 8010eea:	d86a      	bhi.n	8010fc2 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8010eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eee:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010ef2:	3301      	adds	r3, #1
 8010ef4:	b2da      	uxtb	r2, r3
 8010ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8010efc:	e061      	b.n	8010fc2 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8010efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	db08      	blt.n	8010f1a <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8010f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f0a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010f0e:	b29b      	uxth	r3, r3
 8010f10:	3301      	adds	r3, #1
 8010f12:	b29b      	uxth	r3, r3
 8010f14:	b21a      	sxth	r2, r3
 8010f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f18:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8010f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d04f      	beq.n	8010fc2 <tcp_slowtmr+0x1f2>
 8010f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f24:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8010f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f2a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	db47      	blt.n	8010fc2 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8010f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f34:	7d1b      	ldrb	r3, [r3, #20]
 8010f36:	2b02      	cmp	r3, #2
 8010f38:	d018      	beq.n	8010f6c <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8010f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010f40:	2b0c      	cmp	r3, #12
 8010f42:	bf28      	it	cs
 8010f44:	230c      	movcs	r3, #12
 8010f46:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f4a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f4e:	10db      	asrs	r3, r3, #3
 8010f50:	b21b      	sxth	r3, r3
 8010f52:	461a      	mov	r2, r3
 8010f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f56:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010f5a:	4413      	add	r3, r2
 8010f5c:	7dfa      	ldrb	r2, [r7, #23]
 8010f5e:	4942      	ldr	r1, [pc, #264]	; (8011068 <tcp_slowtmr+0x298>)
 8010f60:	5c8a      	ldrb	r2, [r1, r2]
 8010f62:	4093      	lsls	r3, r2
 8010f64:	b21a      	sxth	r2, r3
 8010f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8010f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f6e:	2200      	movs	r2, #0
 8010f70:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f74:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010f7e:	4293      	cmp	r3, r2
 8010f80:	bf28      	it	cs
 8010f82:	4613      	movcs	r3, r2
 8010f84:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8010f86:	8abb      	ldrh	r3, [r7, #20]
 8010f88:	085b      	lsrs	r3, r3, #1
 8010f8a:	b29a      	uxth	r2, r3
 8010f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f8e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f94:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f9c:	005b      	lsls	r3, r3, #1
 8010f9e:	b29b      	uxth	r3, r3
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	d206      	bcs.n	8010fb2 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8010fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fa8:	005b      	lsls	r3, r3, #1
 8010faa:	b29a      	uxth	r2, r3
 8010fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8010fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8010fbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fbe:	f003 fd5d 	bl	8014a7c <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8010fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc4:	7d1b      	ldrb	r3, [r3, #20]
 8010fc6:	2b06      	cmp	r3, #6
 8010fc8:	d10f      	bne.n	8010fea <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8010fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fcc:	7e9b      	ldrb	r3, [r3, #26]
 8010fce:	f003 0310 	and.w	r3, r3, #16
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d009      	beq.n	8010fea <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010fd6:	4b1b      	ldr	r3, [pc, #108]	; (8011044 <tcp_slowtmr+0x274>)
 8010fd8:	681a      	ldr	r2, [r3, #0]
 8010fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fdc:	6a1b      	ldr	r3, [r3, #32]
 8010fde:	1ad3      	subs	r3, r2, r3
 8010fe0:	2b28      	cmp	r3, #40	; 0x28
 8010fe2:	d902      	bls.n	8010fea <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8010fe4:	7ffb      	ldrb	r3, [r7, #31]
 8010fe6:	3301      	adds	r3, #1
 8010fe8:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fec:	7a1b      	ldrb	r3, [r3, #8]
 8010fee:	f003 0308 	and.w	r3, r3, #8
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d065      	beq.n	80110c2 <tcp_slowtmr+0x2f2>
       ((pcb->state == ESTABLISHED) ||
 8010ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ff8:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010ffa:	2b04      	cmp	r3, #4
 8010ffc:	d003      	beq.n	8011006 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8010ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011000:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8011002:	2b07      	cmp	r3, #7
 8011004:	d15d      	bne.n	80110c2 <tcp_slowtmr+0x2f2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011006:	4b0f      	ldr	r3, [pc, #60]	; (8011044 <tcp_slowtmr+0x274>)
 8011008:	681a      	ldr	r2, [r3, #0]
 801100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801100c:	6a1b      	ldr	r3, [r3, #32]
 801100e:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8011010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011012:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8011016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011018:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801101c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801101e:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 8011022:	fb00 f303 	mul.w	r3, r0, r3
 8011026:	440b      	add	r3, r1
 8011028:	4910      	ldr	r1, [pc, #64]	; (801106c <tcp_slowtmr+0x29c>)
 801102a:	fba1 1303 	umull	r1, r3, r1, r3
 801102e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011030:	429a      	cmp	r2, r3
 8011032:	d91d      	bls.n	8011070 <tcp_slowtmr+0x2a0>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011034:	7ffb      	ldrb	r3, [r7, #31]
 8011036:	3301      	adds	r3, #1
 8011038:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 801103a:	7fbb      	ldrb	r3, [r7, #30]
 801103c:	3301      	adds	r3, #1
 801103e:	77bb      	strb	r3, [r7, #30]
 8011040:	e03f      	b.n	80110c2 <tcp_slowtmr+0x2f2>
 8011042:	bf00      	nop
 8011044:	24024e50 	.word	0x24024e50
 8011048:	240217fe 	.word	0x240217fe
 801104c:	24024e4c 	.word	0x24024e4c
 8011050:	0801986c 	.word	0x0801986c
 8011054:	08019a1c 	.word	0x08019a1c
 8011058:	080198a8 	.word	0x080198a8
 801105c:	08019a48 	.word	0x08019a48
 8011060:	08019a74 	.word	0x08019a74
 8011064:	0801ad1c 	.word	0x0801ad1c
 8011068:	0801ad0c 	.word	0x0801ad0c
 801106c:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011070:	4b98      	ldr	r3, [pc, #608]	; (80112d4 <tcp_slowtmr+0x504>)
 8011072:	681a      	ldr	r2, [r3, #0]
 8011074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011076:	6a1b      	ldr	r3, [r3, #32]
 8011078:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801107c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8011080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011082:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8011086:	4618      	mov	r0, r3
 8011088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801108a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801108e:	fb03 f300 	mul.w	r3, r3, r0
 8011092:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8011094:	4990      	ldr	r1, [pc, #576]	; (80112d8 <tcp_slowtmr+0x508>)
 8011096:	fba1 1303 	umull	r1, r3, r1, r3
 801109a:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801109c:	429a      	cmp	r2, r3
 801109e:	d910      	bls.n	80110c2 <tcp_slowtmr+0x2f2>
      {
        err = tcp_keepalive(pcb);
 80110a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80110a2:	f003 fdca 	bl	8014c3a <tcp_keepalive>
 80110a6:	4603      	mov	r3, r0
 80110a8:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 80110aa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d107      	bne.n	80110c2 <tcp_slowtmr+0x2f2>
          pcb->keep_cnt_sent++;
 80110b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110b4:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 80110b8:	3301      	adds	r3, #1
 80110ba:	b2da      	uxtb	r2, r3
 80110bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110be:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80110c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d016      	beq.n	80110f8 <tcp_slowtmr+0x328>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 80110ca:	4b82      	ldr	r3, [pc, #520]	; (80112d4 <tcp_slowtmr+0x504>)
 80110cc:	681a      	ldr	r2, [r3, #0]
 80110ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d0:	6a1b      	ldr	r3, [r3, #32]
 80110d2:	1ad2      	subs	r2, r2, r3
 80110d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80110da:	4619      	mov	r1, r3
 80110dc:	460b      	mov	r3, r1
 80110de:	005b      	lsls	r3, r3, #1
 80110e0:	440b      	add	r3, r1
 80110e2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80110e4:	429a      	cmp	r2, r3
 80110e6:	d307      	bcc.n	80110f8 <tcp_slowtmr+0x328>
      tcp_segs_free(pcb->ooseq);
 80110e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80110ec:	4618      	mov	r0, r3
 80110ee:	f000 fa02 	bl	80114f6 <tcp_segs_free>
      pcb->ooseq = NULL;
 80110f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f4:	2200      	movs	r2, #0
 80110f6:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80110f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110fa:	7d1b      	ldrb	r3, [r3, #20]
 80110fc:	2b03      	cmp	r3, #3
 80110fe:	d109      	bne.n	8011114 <tcp_slowtmr+0x344>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011100:	4b74      	ldr	r3, [pc, #464]	; (80112d4 <tcp_slowtmr+0x504>)
 8011102:	681a      	ldr	r2, [r3, #0]
 8011104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011106:	6a1b      	ldr	r3, [r3, #32]
 8011108:	1ad3      	subs	r3, r2, r3
 801110a:	2b28      	cmp	r3, #40	; 0x28
 801110c:	d902      	bls.n	8011114 <tcp_slowtmr+0x344>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801110e:	7ffb      	ldrb	r3, [r7, #31]
 8011110:	3301      	adds	r3, #1
 8011112:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011116:	7d1b      	ldrb	r3, [r3, #20]
 8011118:	2b09      	cmp	r3, #9
 801111a:	d109      	bne.n	8011130 <tcp_slowtmr+0x360>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801111c:	4b6d      	ldr	r3, [pc, #436]	; (80112d4 <tcp_slowtmr+0x504>)
 801111e:	681a      	ldr	r2, [r3, #0]
 8011120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011122:	6a1b      	ldr	r3, [r3, #32]
 8011124:	1ad3      	subs	r3, r2, r3
 8011126:	2bf0      	cmp	r3, #240	; 0xf0
 8011128:	d902      	bls.n	8011130 <tcp_slowtmr+0x360>
        ++pcb_remove;
 801112a:	7ffb      	ldrb	r3, [r7, #31]
 801112c:	3301      	adds	r3, #1
 801112e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011130:	7ffb      	ldrb	r3, [r7, #31]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d05d      	beq.n	80111f2 <tcp_slowtmr+0x422>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801113c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801113e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011140:	f000 fb8c 	bl	801185c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011144:	6a3b      	ldr	r3, [r7, #32]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d010      	beq.n	801116c <tcp_slowtmr+0x39c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801114a:	4b64      	ldr	r3, [pc, #400]	; (80112dc <tcp_slowtmr+0x50c>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011150:	429a      	cmp	r2, r3
 8011152:	d106      	bne.n	8011162 <tcp_slowtmr+0x392>
 8011154:	4b62      	ldr	r3, [pc, #392]	; (80112e0 <tcp_slowtmr+0x510>)
 8011156:	f240 4289 	movw	r2, #1161	; 0x489
 801115a:	4962      	ldr	r1, [pc, #392]	; (80112e4 <tcp_slowtmr+0x514>)
 801115c:	4862      	ldr	r0, [pc, #392]	; (80112e8 <tcp_slowtmr+0x518>)
 801115e:	f006 fdd1 	bl	8017d04 <iprintf>
        prev->next = pcb->next;
 8011162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011164:	68da      	ldr	r2, [r3, #12]
 8011166:	6a3b      	ldr	r3, [r7, #32]
 8011168:	60da      	str	r2, [r3, #12]
 801116a:	e00f      	b.n	801118c <tcp_slowtmr+0x3bc>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801116c:	4b5b      	ldr	r3, [pc, #364]	; (80112dc <tcp_slowtmr+0x50c>)
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011172:	429a      	cmp	r2, r3
 8011174:	d006      	beq.n	8011184 <tcp_slowtmr+0x3b4>
 8011176:	4b5a      	ldr	r3, [pc, #360]	; (80112e0 <tcp_slowtmr+0x510>)
 8011178:	f240 428d 	movw	r2, #1165	; 0x48d
 801117c:	495b      	ldr	r1, [pc, #364]	; (80112ec <tcp_slowtmr+0x51c>)
 801117e:	485a      	ldr	r0, [pc, #360]	; (80112e8 <tcp_slowtmr+0x518>)
 8011180:	f006 fdc0 	bl	8017d04 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011186:	68db      	ldr	r3, [r3, #12]
 8011188:	4a54      	ldr	r2, [pc, #336]	; (80112dc <tcp_slowtmr+0x50c>)
 801118a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801118c:	7fbb      	ldrb	r3, [r7, #30]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d010      	beq.n	80111b4 <tcp_slowtmr+0x3e4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011194:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011198:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801119a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 801119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801119e:	1d1d      	adds	r5, r3, #4
 80111a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111a2:	8adb      	ldrh	r3, [r3, #22]
 80111a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111a6:	8b12      	ldrh	r2, [r2, #24]
 80111a8:	9201      	str	r2, [sp, #4]
 80111aa:	9300      	str	r3, [sp, #0]
 80111ac:	462b      	mov	r3, r5
 80111ae:	4622      	mov	r2, r4
 80111b0:	f003 fbee 	bl	8014990 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80111b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b6:	691b      	ldr	r3, [r3, #16]
 80111b8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80111ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111bc:	7d1b      	ldrb	r3, [r3, #20]
 80111be:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80111c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80111c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c6:	68db      	ldr	r3, [r3, #12]
 80111c8:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 80111ca:	6839      	ldr	r1, [r7, #0]
 80111cc:	2001      	movs	r0, #1
 80111ce:	f7fe fa71 	bl	800f6b4 <memp_free>

      tcp_active_pcbs_changed = 0;
 80111d2:	4b47      	ldr	r3, [pc, #284]	; (80112f0 <tcp_slowtmr+0x520>)
 80111d4:	2200      	movs	r2, #0
 80111d6:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d004      	beq.n	80111e8 <tcp_slowtmr+0x418>
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	f06f 010c 	mvn.w	r1, #12
 80111e4:	68b8      	ldr	r0, [r7, #8]
 80111e6:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80111e8:	4b41      	ldr	r3, [pc, #260]	; (80112f0 <tcp_slowtmr+0x520>)
 80111ea:	781b      	ldrb	r3, [r3, #0]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d035      	beq.n	801125c <tcp_slowtmr+0x48c>
        goto tcp_slowtmr_start;
 80111f0:	e5fe      	b.n	8010df0 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80111f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f4:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 80111f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f8:	68db      	ldr	r3, [r3, #12]
 80111fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80111fc:	6a3b      	ldr	r3, [r7, #32]
 80111fe:	7edb      	ldrb	r3, [r3, #27]
 8011200:	3301      	adds	r3, #1
 8011202:	b2da      	uxtb	r2, r3
 8011204:	6a3b      	ldr	r3, [r7, #32]
 8011206:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8011208:	6a3b      	ldr	r3, [r7, #32]
 801120a:	7eda      	ldrb	r2, [r3, #27]
 801120c:	6a3b      	ldr	r3, [r7, #32]
 801120e:	7f1b      	ldrb	r3, [r3, #28]
 8011210:	429a      	cmp	r2, r3
 8011212:	d323      	bcc.n	801125c <tcp_slowtmr+0x48c>
        prev->polltmr = 0;
 8011214:	6a3b      	ldr	r3, [r7, #32]
 8011216:	2200      	movs	r2, #0
 8011218:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801121a:	4b35      	ldr	r3, [pc, #212]	; (80112f0 <tcp_slowtmr+0x520>)
 801121c:	2200      	movs	r2, #0
 801121e:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011220:	6a3b      	ldr	r3, [r7, #32]
 8011222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011226:	2b00      	cmp	r3, #0
 8011228:	d00a      	beq.n	8011240 <tcp_slowtmr+0x470>
 801122a:	6a3b      	ldr	r3, [r7, #32]
 801122c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011230:	6a3a      	ldr	r2, [r7, #32]
 8011232:	6912      	ldr	r2, [r2, #16]
 8011234:	6a39      	ldr	r1, [r7, #32]
 8011236:	4610      	mov	r0, r2
 8011238:	4798      	blx	r3
 801123a:	4603      	mov	r3, r0
 801123c:	777b      	strb	r3, [r7, #29]
 801123e:	e001      	b.n	8011244 <tcp_slowtmr+0x474>
 8011240:	2300      	movs	r3, #0
 8011242:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8011244:	4b2a      	ldr	r3, [pc, #168]	; (80112f0 <tcp_slowtmr+0x520>)
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d000      	beq.n	801124e <tcp_slowtmr+0x47e>
          goto tcp_slowtmr_start;
 801124c:	e5d0      	b.n	8010df0 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801124e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d102      	bne.n	801125c <tcp_slowtmr+0x48c>
          tcp_output(prev);
 8011256:	6a38      	ldr	r0, [r7, #32]
 8011258:	f003 f910 	bl	801447c <tcp_output>
  while (pcb != NULL) {
 801125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801125e:	2b00      	cmp	r3, #0
 8011260:	f47f adcc 	bne.w	8010dfc <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011264:	2300      	movs	r3, #0
 8011266:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8011268:	4b22      	ldr	r3, [pc, #136]	; (80112f4 <tcp_slowtmr+0x524>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 801126e:	e066      	b.n	801133e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011272:	7d1b      	ldrb	r3, [r3, #20]
 8011274:	2b0a      	cmp	r3, #10
 8011276:	d006      	beq.n	8011286 <tcp_slowtmr+0x4b6>
 8011278:	4b19      	ldr	r3, [pc, #100]	; (80112e0 <tcp_slowtmr+0x510>)
 801127a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801127e:	491e      	ldr	r1, [pc, #120]	; (80112f8 <tcp_slowtmr+0x528>)
 8011280:	4819      	ldr	r0, [pc, #100]	; (80112e8 <tcp_slowtmr+0x518>)
 8011282:	f006 fd3f 	bl	8017d04 <iprintf>
    pcb_remove = 0;
 8011286:	2300      	movs	r3, #0
 8011288:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801128a:	4b12      	ldr	r3, [pc, #72]	; (80112d4 <tcp_slowtmr+0x504>)
 801128c:	681a      	ldr	r2, [r3, #0]
 801128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011290:	6a1b      	ldr	r3, [r3, #32]
 8011292:	1ad3      	subs	r3, r2, r3
 8011294:	2bf0      	cmp	r3, #240	; 0xf0
 8011296:	d902      	bls.n	801129e <tcp_slowtmr+0x4ce>
      ++pcb_remove;
 8011298:	7ffb      	ldrb	r3, [r7, #31]
 801129a:	3301      	adds	r3, #1
 801129c:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801129e:	7ffb      	ldrb	r3, [r7, #31]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d047      	beq.n	8011334 <tcp_slowtmr+0x564>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80112a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80112a6:	f000 fad9 	bl	801185c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80112aa:	6a3b      	ldr	r3, [r7, #32]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d027      	beq.n	8011300 <tcp_slowtmr+0x530>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80112b0:	4b10      	ldr	r3, [pc, #64]	; (80112f4 <tcp_slowtmr+0x524>)
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112b6:	429a      	cmp	r2, r3
 80112b8:	d106      	bne.n	80112c8 <tcp_slowtmr+0x4f8>
 80112ba:	4b09      	ldr	r3, [pc, #36]	; (80112e0 <tcp_slowtmr+0x510>)
 80112bc:	f240 42cb 	movw	r2, #1227	; 0x4cb
 80112c0:	490e      	ldr	r1, [pc, #56]	; (80112fc <tcp_slowtmr+0x52c>)
 80112c2:	4809      	ldr	r0, [pc, #36]	; (80112e8 <tcp_slowtmr+0x518>)
 80112c4:	f006 fd1e 	bl	8017d04 <iprintf>
        prev->next = pcb->next;
 80112c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ca:	68da      	ldr	r2, [r3, #12]
 80112cc:	6a3b      	ldr	r3, [r7, #32]
 80112ce:	60da      	str	r2, [r3, #12]
 80112d0:	e026      	b.n	8011320 <tcp_slowtmr+0x550>
 80112d2:	bf00      	nop
 80112d4:	24024e50 	.word	0x24024e50
 80112d8:	10624dd3 	.word	0x10624dd3
 80112dc:	24024e4c 	.word	0x24024e4c
 80112e0:	0801986c 	.word	0x0801986c
 80112e4:	08019aa4 	.word	0x08019aa4
 80112e8:	080198a8 	.word	0x080198a8
 80112ec:	08019ad0 	.word	0x08019ad0
 80112f0:	24024e48 	.word	0x24024e48
 80112f4:	24024e5c 	.word	0x24024e5c
 80112f8:	08019afc 	.word	0x08019afc
 80112fc:	08019b2c 	.word	0x08019b2c
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011300:	4b12      	ldr	r3, [pc, #72]	; (801134c <tcp_slowtmr+0x57c>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011306:	429a      	cmp	r2, r3
 8011308:	d006      	beq.n	8011318 <tcp_slowtmr+0x548>
 801130a:	4b11      	ldr	r3, [pc, #68]	; (8011350 <tcp_slowtmr+0x580>)
 801130c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8011310:	4910      	ldr	r1, [pc, #64]	; (8011354 <tcp_slowtmr+0x584>)
 8011312:	4811      	ldr	r0, [pc, #68]	; (8011358 <tcp_slowtmr+0x588>)
 8011314:	f006 fcf6 	bl	8017d04 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801131a:	68db      	ldr	r3, [r3, #12]
 801131c:	4a0b      	ldr	r2, [pc, #44]	; (801134c <tcp_slowtmr+0x57c>)
 801131e:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011322:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8011324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011326:	68db      	ldr	r3, [r3, #12]
 8011328:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 801132a:	69b9      	ldr	r1, [r7, #24]
 801132c:	2001      	movs	r0, #1
 801132e:	f7fe f9c1 	bl	800f6b4 <memp_free>
 8011332:	e004      	b.n	801133e <tcp_slowtmr+0x56e>
    } else {
      prev = pcb;
 8011334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011336:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8011338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 801133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011340:	2b00      	cmp	r3, #0
 8011342:	d195      	bne.n	8011270 <tcp_slowtmr+0x4a0>
    }
  }
}
 8011344:	bf00      	nop
 8011346:	3728      	adds	r7, #40	; 0x28
 8011348:	46bd      	mov	sp, r7
 801134a:	bdb0      	pop	{r4, r5, r7, pc}
 801134c:	24024e5c 	.word	0x24024e5c
 8011350:	0801986c 	.word	0x0801986c
 8011354:	08019b54 	.word	0x08019b54
 8011358:	080198a8 	.word	0x080198a8

0801135c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011362:	4b2d      	ldr	r3, [pc, #180]	; (8011418 <tcp_fasttmr+0xbc>)
 8011364:	781b      	ldrb	r3, [r3, #0]
 8011366:	3301      	adds	r3, #1
 8011368:	b2da      	uxtb	r2, r3
 801136a:	4b2b      	ldr	r3, [pc, #172]	; (8011418 <tcp_fasttmr+0xbc>)
 801136c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801136e:	4b2b      	ldr	r3, [pc, #172]	; (801141c <tcp_fasttmr+0xc0>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011374:	e048      	b.n	8011408 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	7f5a      	ldrb	r2, [r3, #29]
 801137a:	4b27      	ldr	r3, [pc, #156]	; (8011418 <tcp_fasttmr+0xbc>)
 801137c:	781b      	ldrb	r3, [r3, #0]
 801137e:	429a      	cmp	r2, r3
 8011380:	d03f      	beq.n	8011402 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011382:	4b25      	ldr	r3, [pc, #148]	; (8011418 <tcp_fasttmr+0xbc>)
 8011384:	781a      	ldrb	r2, [r3, #0]
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	7e9b      	ldrb	r3, [r3, #26]
 801138e:	f003 0301 	and.w	r3, r3, #1
 8011392:	2b00      	cmp	r3, #0
 8011394:	d010      	beq.n	80113b8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	7e9b      	ldrb	r3, [r3, #26]
 801139a:	f043 0302 	orr.w	r3, r3, #2
 801139e:	b2da      	uxtb	r2, r3
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 80113a4:	6878      	ldr	r0, [r7, #4]
 80113a6:	f003 f869 	bl	801447c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	7e9b      	ldrb	r3, [r3, #26]
 80113ae:	f023 0303 	bic.w	r3, r3, #3
 80113b2:	b2da      	uxtb	r2, r3
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	7e9b      	ldrb	r3, [r3, #26]
 80113bc:	f003 0308 	and.w	r3, r3, #8
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d009      	beq.n	80113d8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	7e9b      	ldrb	r3, [r3, #26]
 80113c8:	f023 0308 	bic.w	r3, r3, #8
 80113cc:	b2da      	uxtb	r2, r3
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f7ff fb18 	bl	8010a08 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	68db      	ldr	r3, [r3, #12]
 80113dc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d00a      	beq.n	80113fc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80113e6:	4b0e      	ldr	r3, [pc, #56]	; (8011420 <tcp_fasttmr+0xc4>)
 80113e8:	2200      	movs	r2, #0
 80113ea:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80113ec:	6878      	ldr	r0, [r7, #4]
 80113ee:	f000 f819 	bl	8011424 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80113f2:	4b0b      	ldr	r3, [pc, #44]	; (8011420 <tcp_fasttmr+0xc4>)
 80113f4:	781b      	ldrb	r3, [r3, #0]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d000      	beq.n	80113fc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80113fa:	e7b8      	b.n	801136e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	607b      	str	r3, [r7, #4]
 8011400:	e002      	b.n	8011408 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	68db      	ldr	r3, [r3, #12]
 8011406:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d1b3      	bne.n	8011376 <tcp_fasttmr+0x1a>
    }
  }
}
 801140e:	bf00      	nop
 8011410:	3708      	adds	r7, #8
 8011412:	46bd      	mov	sp, r7
 8011414:	bd80      	pop	{r7, pc}
 8011416:	bf00      	nop
 8011418:	240217fe 	.word	0x240217fe
 801141c:	24024e4c 	.word	0x24024e4c
 8011420:	24024e48 	.word	0x24024e48

08011424 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011424:	b590      	push	{r4, r7, lr}
 8011426:	b085      	sub	sp, #20
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011430:	7b5b      	ldrb	r3, [r3, #13]
 8011432:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011438:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	2200      	movs	r2, #0
 801143e:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011446:	2b00      	cmp	r3, #0
 8011448:	d00b      	beq.n	8011462 <tcp_process_refused_data+0x3e>
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	6918      	ldr	r0, [r3, #16]
 8011454:	2300      	movs	r3, #0
 8011456:	68ba      	ldr	r2, [r7, #8]
 8011458:	6879      	ldr	r1, [r7, #4]
 801145a:	47a0      	blx	r4
 801145c:	4603      	mov	r3, r0
 801145e:	73fb      	strb	r3, [r7, #15]
 8011460:	e007      	b.n	8011472 <tcp_process_refused_data+0x4e>
 8011462:	2300      	movs	r3, #0
 8011464:	68ba      	ldr	r2, [r7, #8]
 8011466:	6879      	ldr	r1, [r7, #4]
 8011468:	2000      	movs	r0, #0
 801146a:	f000 f88c 	bl	8011586 <tcp_recv_null>
 801146e:	4603      	mov	r3, r0
 8011470:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d12a      	bne.n	80114d0 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 801147a:	7bbb      	ldrb	r3, [r7, #14]
 801147c:	f003 0320 	and.w	r3, r3, #32
 8011480:	2b00      	cmp	r3, #0
 8011482:	d033      	beq.n	80114ec <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011488:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801148c:	d005      	beq.n	801149a <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011492:	3301      	adds	r3, #1
 8011494:	b29a      	uxth	r2, r3
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d00b      	beq.n	80114bc <tcp_process_refused_data+0x98>
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6918      	ldr	r0, [r3, #16]
 80114ae:	2300      	movs	r3, #0
 80114b0:	2200      	movs	r2, #0
 80114b2:	6879      	ldr	r1, [r7, #4]
 80114b4:	47a0      	blx	r4
 80114b6:	4603      	mov	r3, r0
 80114b8:	73fb      	strb	r3, [r7, #15]
 80114ba:	e001      	b.n	80114c0 <tcp_process_refused_data+0x9c>
 80114bc:	2300      	movs	r3, #0
 80114be:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80114c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114c4:	f113 0f0d 	cmn.w	r3, #13
 80114c8:	d110      	bne.n	80114ec <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 80114ca:	f06f 030c 	mvn.w	r3, #12
 80114ce:	e00e      	b.n	80114ee <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 80114d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114d4:	f113 0f0d 	cmn.w	r3, #13
 80114d8:	d102      	bne.n	80114e0 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80114da:	f06f 030c 	mvn.w	r3, #12
 80114de:	e006      	b.n	80114ee <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	68ba      	ldr	r2, [r7, #8]
 80114e4:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 80114e6:	f06f 0304 	mvn.w	r3, #4
 80114ea:	e000      	b.n	80114ee <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 80114ec:	2300      	movs	r3, #0
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	3714      	adds	r7, #20
 80114f2:	46bd      	mov	sp, r7
 80114f4:	bd90      	pop	{r4, r7, pc}

080114f6 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80114f6:	b580      	push	{r7, lr}
 80114f8:	b084      	sub	sp, #16
 80114fa:	af00      	add	r7, sp, #0
 80114fc:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80114fe:	e007      	b.n	8011510 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011506:	6878      	ldr	r0, [r7, #4]
 8011508:	f000 f809 	bl	801151e <tcp_seg_free>
    seg = next;
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d1f4      	bne.n	8011500 <tcp_segs_free+0xa>
  }
}
 8011516:	bf00      	nop
 8011518:	3710      	adds	r7, #16
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}

0801151e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801151e:	b580      	push	{r7, lr}
 8011520:	b082      	sub	sp, #8
 8011522:	af00      	add	r7, sp, #0
 8011524:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d00c      	beq.n	8011546 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	685b      	ldr	r3, [r3, #4]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d004      	beq.n	801153e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	685b      	ldr	r3, [r3, #4]
 8011538:	4618      	mov	r0, r3
 801153a:	f7fe fe97 	bl	801026c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801153e:	6879      	ldr	r1, [r7, #4]
 8011540:	2003      	movs	r0, #3
 8011542:	f7fe f8b7 	bl	800f6b4 <memp_free>
  }
}
 8011546:	bf00      	nop
 8011548:	3708      	adds	r7, #8
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}

0801154e <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801154e:	b580      	push	{r7, lr}
 8011550:	b084      	sub	sp, #16
 8011552:	af00      	add	r7, sp, #0
 8011554:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011556:	2003      	movs	r0, #3
 8011558:	f7fe f836 	bl	800f5c8 <memp_malloc>
 801155c:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d101      	bne.n	8011568 <tcp_seg_copy+0x1a>
    return NULL;
 8011564:	2300      	movs	r3, #0
 8011566:	e00a      	b.n	801157e <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011568:	2210      	movs	r2, #16
 801156a:	6879      	ldr	r1, [r7, #4]
 801156c:	68f8      	ldr	r0, [r7, #12]
 801156e:	f006 fbb6 	bl	8017cde <memcpy>
  pbuf_ref(cseg->p);
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	685b      	ldr	r3, [r3, #4]
 8011576:	4618      	mov	r0, r3
 8011578:	f7fe ff2a 	bl	80103d0 <pbuf_ref>
  return cseg;
 801157c:	68fb      	ldr	r3, [r7, #12]
}
 801157e:	4618      	mov	r0, r3
 8011580:	3710      	adds	r7, #16
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}

08011586 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011586:	b580      	push	{r7, lr}
 8011588:	b084      	sub	sp, #16
 801158a:	af00      	add	r7, sp, #0
 801158c:	60f8      	str	r0, [r7, #12]
 801158e:	60b9      	str	r1, [r7, #8]
 8011590:	607a      	str	r2, [r7, #4]
 8011592:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d009      	beq.n	80115ae <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	891b      	ldrh	r3, [r3, #8]
 801159e:	4619      	mov	r1, r3
 80115a0:	68b8      	ldr	r0, [r7, #8]
 80115a2:	f7ff fbbb 	bl	8010d1c <tcp_recved>
    pbuf_free(p);
 80115a6:	6878      	ldr	r0, [r7, #4]
 80115a8:	f7fe fe60 	bl	801026c <pbuf_free>
 80115ac:	e008      	b.n	80115c0 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 80115ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d104      	bne.n	80115c0 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 80115b6:	68b8      	ldr	r0, [r7, #8]
 80115b8:	f7ff fa8c 	bl	8010ad4 <tcp_close>
 80115bc:	4603      	mov	r3, r0
 80115be:	e000      	b.n	80115c2 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 80115c0:	2300      	movs	r3, #0
}
 80115c2:	4618      	mov	r0, r3
 80115c4:	3710      	adds	r7, #16
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}
	...

080115cc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b086      	sub	sp, #24
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	4603      	mov	r3, r0
 80115d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80115d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	db01      	blt.n	80115e2 <tcp_kill_prio+0x16>
 80115de:	79fb      	ldrb	r3, [r7, #7]
 80115e0:	e000      	b.n	80115e4 <tcp_kill_prio+0x18>
 80115e2:	237f      	movs	r3, #127	; 0x7f
 80115e4:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 80115e6:	2300      	movs	r3, #0
 80115e8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80115ea:	2300      	movs	r3, #0
 80115ec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80115ee:	4b16      	ldr	r3, [pc, #88]	; (8011648 <tcp_kill_prio+0x7c>)
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	617b      	str	r3, [r7, #20]
 80115f4:	e01a      	b.n	801162c <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 80115f6:	697b      	ldr	r3, [r7, #20]
 80115f8:	7d5b      	ldrb	r3, [r3, #21]
 80115fa:	7afa      	ldrb	r2, [r7, #11]
 80115fc:	429a      	cmp	r2, r3
 80115fe:	d312      	bcc.n	8011626 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011600:	4b12      	ldr	r3, [pc, #72]	; (801164c <tcp_kill_prio+0x80>)
 8011602:	681a      	ldr	r2, [r3, #0]
 8011604:	697b      	ldr	r3, [r7, #20]
 8011606:	6a1b      	ldr	r3, [r3, #32]
 8011608:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 801160a:	68fa      	ldr	r2, [r7, #12]
 801160c:	429a      	cmp	r2, r3
 801160e:	d80a      	bhi.n	8011626 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8011610:	4b0e      	ldr	r3, [pc, #56]	; (801164c <tcp_kill_prio+0x80>)
 8011612:	681a      	ldr	r2, [r3, #0]
 8011614:	697b      	ldr	r3, [r7, #20]
 8011616:	6a1b      	ldr	r3, [r3, #32]
 8011618:	1ad3      	subs	r3, r2, r3
 801161a:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	7d5b      	ldrb	r3, [r3, #21]
 8011624:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011626:	697b      	ldr	r3, [r7, #20]
 8011628:	68db      	ldr	r3, [r3, #12]
 801162a:	617b      	str	r3, [r7, #20]
 801162c:	697b      	ldr	r3, [r7, #20]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d1e1      	bne.n	80115f6 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8011632:	693b      	ldr	r3, [r7, #16]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d002      	beq.n	801163e <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011638:	6938      	ldr	r0, [r7, #16]
 801163a:	f7ff fb15 	bl	8010c68 <tcp_abort>
  }
}
 801163e:	bf00      	nop
 8011640:	3718      	adds	r7, #24
 8011642:	46bd      	mov	sp, r7
 8011644:	bd80      	pop	{r7, pc}
 8011646:	bf00      	nop
 8011648:	24024e4c 	.word	0x24024e4c
 801164c:	24024e50 	.word	0x24024e50

08011650 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b086      	sub	sp, #24
 8011654:	af00      	add	r7, sp, #0
 8011656:	4603      	mov	r3, r0
 8011658:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801165a:	79fb      	ldrb	r3, [r7, #7]
 801165c:	2b08      	cmp	r3, #8
 801165e:	d009      	beq.n	8011674 <tcp_kill_state+0x24>
 8011660:	79fb      	ldrb	r3, [r7, #7]
 8011662:	2b09      	cmp	r3, #9
 8011664:	d006      	beq.n	8011674 <tcp_kill_state+0x24>
 8011666:	4b1a      	ldr	r3, [pc, #104]	; (80116d0 <tcp_kill_state+0x80>)
 8011668:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801166c:	4919      	ldr	r1, [pc, #100]	; (80116d4 <tcp_kill_state+0x84>)
 801166e:	481a      	ldr	r0, [pc, #104]	; (80116d8 <tcp_kill_state+0x88>)
 8011670:	f006 fb48 	bl	8017d04 <iprintf>

  inactivity = 0;
 8011674:	2300      	movs	r3, #0
 8011676:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011678:	2300      	movs	r3, #0
 801167a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801167c:	4b17      	ldr	r3, [pc, #92]	; (80116dc <tcp_kill_state+0x8c>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	617b      	str	r3, [r7, #20]
 8011682:	e017      	b.n	80116b4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	7d1b      	ldrb	r3, [r3, #20]
 8011688:	79fa      	ldrb	r2, [r7, #7]
 801168a:	429a      	cmp	r2, r3
 801168c:	d10f      	bne.n	80116ae <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801168e:	4b14      	ldr	r3, [pc, #80]	; (80116e0 <tcp_kill_state+0x90>)
 8011690:	681a      	ldr	r2, [r3, #0]
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	6a1b      	ldr	r3, [r3, #32]
 8011696:	1ad3      	subs	r3, r2, r3
 8011698:	68fa      	ldr	r2, [r7, #12]
 801169a:	429a      	cmp	r2, r3
 801169c:	d807      	bhi.n	80116ae <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801169e:	4b10      	ldr	r3, [pc, #64]	; (80116e0 <tcp_kill_state+0x90>)
 80116a0:	681a      	ldr	r2, [r3, #0]
 80116a2:	697b      	ldr	r3, [r7, #20]
 80116a4:	6a1b      	ldr	r3, [r3, #32]
 80116a6:	1ad3      	subs	r3, r2, r3
 80116a8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80116aa:	697b      	ldr	r3, [r7, #20]
 80116ac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80116ae:	697b      	ldr	r3, [r7, #20]
 80116b0:	68db      	ldr	r3, [r3, #12]
 80116b2:	617b      	str	r3, [r7, #20]
 80116b4:	697b      	ldr	r3, [r7, #20]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d1e4      	bne.n	8011684 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80116ba:	693b      	ldr	r3, [r7, #16]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d003      	beq.n	80116c8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80116c0:	2100      	movs	r1, #0
 80116c2:	6938      	ldr	r0, [r7, #16]
 80116c4:	f7ff fa1e 	bl	8010b04 <tcp_abandon>
  }
}
 80116c8:	bf00      	nop
 80116ca:	3718      	adds	r7, #24
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}
 80116d0:	0801986c 	.word	0x0801986c
 80116d4:	08019b7c 	.word	0x08019b7c
 80116d8:	080198a8 	.word	0x080198a8
 80116dc:	24024e4c 	.word	0x24024e4c
 80116e0:	24024e50 	.word	0x24024e50

080116e4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b084      	sub	sp, #16
 80116e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80116ea:	2300      	movs	r3, #0
 80116ec:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80116ee:	2300      	movs	r3, #0
 80116f0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80116f2:	4b12      	ldr	r3, [pc, #72]	; (801173c <tcp_kill_timewait+0x58>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	60fb      	str	r3, [r7, #12]
 80116f8:	e012      	b.n	8011720 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80116fa:	4b11      	ldr	r3, [pc, #68]	; (8011740 <tcp_kill_timewait+0x5c>)
 80116fc:	681a      	ldr	r2, [r3, #0]
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	6a1b      	ldr	r3, [r3, #32]
 8011702:	1ad3      	subs	r3, r2, r3
 8011704:	687a      	ldr	r2, [r7, #4]
 8011706:	429a      	cmp	r2, r3
 8011708:	d807      	bhi.n	801171a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801170a:	4b0d      	ldr	r3, [pc, #52]	; (8011740 <tcp_kill_timewait+0x5c>)
 801170c:	681a      	ldr	r2, [r3, #0]
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	6a1b      	ldr	r3, [r3, #32]
 8011712:	1ad3      	subs	r3, r2, r3
 8011714:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	68db      	ldr	r3, [r3, #12]
 801171e:	60fb      	str	r3, [r7, #12]
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d1e9      	bne.n	80116fa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011726:	68bb      	ldr	r3, [r7, #8]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d002      	beq.n	8011732 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 801172c:	68b8      	ldr	r0, [r7, #8]
 801172e:	f7ff fa9b 	bl	8010c68 <tcp_abort>
  }
}
 8011732:	bf00      	nop
 8011734:	3710      	adds	r7, #16
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}
 801173a:	bf00      	nop
 801173c:	24024e5c 	.word	0x24024e5c
 8011740:	24024e50 	.word	0x24024e50

08011744 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b084      	sub	sp, #16
 8011748:	af00      	add	r7, sp, #0
 801174a:	4603      	mov	r3, r0
 801174c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801174e:	2001      	movs	r0, #1
 8011750:	f7fd ff3a 	bl	800f5c8 <memp_malloc>
 8011754:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d124      	bne.n	80117a6 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801175c:	f7ff ffc2 	bl	80116e4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011760:	2001      	movs	r0, #1
 8011762:	f7fd ff31 	bl	800f5c8 <memp_malloc>
 8011766:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d11b      	bne.n	80117a6 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801176e:	2009      	movs	r0, #9
 8011770:	f7ff ff6e 	bl	8011650 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011774:	2001      	movs	r0, #1
 8011776:	f7fd ff27 	bl	800f5c8 <memp_malloc>
 801177a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d111      	bne.n	80117a6 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011782:	2008      	movs	r0, #8
 8011784:	f7ff ff64 	bl	8011650 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011788:	2001      	movs	r0, #1
 801178a:	f7fd ff1d 	bl	800f5c8 <memp_malloc>
 801178e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d107      	bne.n	80117a6 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011796:	79fb      	ldrb	r3, [r7, #7]
 8011798:	4618      	mov	r0, r3
 801179a:	f7ff ff17 	bl	80115cc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801179e:	2001      	movs	r0, #1
 80117a0:	f7fd ff12 	bl	800f5c8 <memp_malloc>
 80117a4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d047      	beq.n	801183c <tcp_alloc+0xf8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80117ac:	22a0      	movs	r2, #160	; 0xa0
 80117ae:	2100      	movs	r1, #0
 80117b0:	68f8      	ldr	r0, [r7, #12]
 80117b2:	f006 fa9f 	bl	8017cf4 <memset>
    pcb->prio = prio;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	79fa      	ldrb	r2, [r7, #7]
 80117ba:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80117c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80117cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	22ff      	movs	r2, #255	; 0xff
 80117da:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	f44f 7206 	mov.w	r2, #536	; 0x218
 80117e2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	2206      	movs	r2, #6
 80117e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	2206      	movs	r2, #6
 80117f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117f8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	2201      	movs	r2, #1
 80117fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011802:	4b11      	ldr	r3, [pc, #68]	; (8011848 <tcp_alloc+0x104>)
 8011804:	681a      	ldr	r2, [r3, #0]
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801180a:	4b10      	ldr	r3, [pc, #64]	; (801184c <tcp_alloc+0x108>)
 801180c:	781a      	ldrb	r2, [r3, #0]
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011818:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	4a0c      	ldr	r2, [pc, #48]	; (8011850 <tcp_alloc+0x10c>)
 8011820:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	4a0b      	ldr	r2, [pc, #44]	; (8011854 <tcp_alloc+0x110>)
 8011828:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	4a0a      	ldr	r2, [pc, #40]	; (8011858 <tcp_alloc+0x114>)
 8011830:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	2209      	movs	r2, #9
 8011838:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801183c:	68fb      	ldr	r3, [r7, #12]
}
 801183e:	4618      	mov	r0, r3
 8011840:	3710      	adds	r7, #16
 8011842:	46bd      	mov	sp, r7
 8011844:	bd80      	pop	{r7, pc}
 8011846:	bf00      	nop
 8011848:	24024e50 	.word	0x24024e50
 801184c:	240217fe 	.word	0x240217fe
 8011850:	08011587 	.word	0x08011587
 8011854:	006ddd00 	.word	0x006ddd00
 8011858:	000124f8 	.word	0x000124f8

0801185c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b082      	sub	sp, #8
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	7d1b      	ldrb	r3, [r3, #20]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d034      	beq.n	80118d6 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011870:	2b0a      	cmp	r3, #10
 8011872:	d030      	beq.n	80118d6 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8011878:	2b01      	cmp	r3, #1
 801187a:	d02c      	beq.n	80118d6 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011880:	2b00      	cmp	r3, #0
 8011882:	d007      	beq.n	8011894 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011888:	4618      	mov	r0, r3
 801188a:	f7fe fcef 	bl	801026c <pbuf_free>
      pcb->refused_data = NULL;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	2200      	movs	r2, #0
 8011892:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011898:	4618      	mov	r0, r3
 801189a:	f7ff fe2c 	bl	80114f6 <tcp_segs_free>
    pcb->ooseq = NULL;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2200      	movs	r2, #0
 80118a2:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118aa:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80118b0:	4618      	mov	r0, r3
 80118b2:	f7ff fe20 	bl	80114f6 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118ba:	4618      	mov	r0, r3
 80118bc:	f7ff fe1b 	bl	80114f6 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2200      	movs	r2, #0
 80118c4:	669a      	str	r2, [r3, #104]	; 0x68
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	2200      	movs	r2, #0
 80118d2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 80118d6:	bf00      	nop
 80118d8:	3708      	adds	r7, #8
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}
	...

080118e0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b084      	sub	sp, #16
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
 80118e8:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	683a      	ldr	r2, [r7, #0]
 80118f0:	429a      	cmp	r2, r3
 80118f2:	d105      	bne.n	8011900 <tcp_pcb_remove+0x20>
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	68da      	ldr	r2, [r3, #12]
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	601a      	str	r2, [r3, #0]
 80118fe:	e013      	b.n	8011928 <tcp_pcb_remove+0x48>
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	60fb      	str	r3, [r7, #12]
 8011906:	e00c      	b.n	8011922 <tcp_pcb_remove+0x42>
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	68db      	ldr	r3, [r3, #12]
 801190c:	683a      	ldr	r2, [r7, #0]
 801190e:	429a      	cmp	r2, r3
 8011910:	d104      	bne.n	801191c <tcp_pcb_remove+0x3c>
 8011912:	683b      	ldr	r3, [r7, #0]
 8011914:	68da      	ldr	r2, [r3, #12]
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	60da      	str	r2, [r3, #12]
 801191a:	e005      	b.n	8011928 <tcp_pcb_remove+0x48>
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	68db      	ldr	r3, [r3, #12]
 8011920:	60fb      	str	r3, [r7, #12]
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d1ef      	bne.n	8011908 <tcp_pcb_remove+0x28>
 8011928:	683b      	ldr	r3, [r7, #0]
 801192a:	2200      	movs	r2, #0
 801192c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801192e:	6838      	ldr	r0, [r7, #0]
 8011930:	f7ff ff94 	bl	801185c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	7d1b      	ldrb	r3, [r3, #20]
 8011938:	2b0a      	cmp	r3, #10
 801193a:	d013      	beq.n	8011964 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 801193c:	683b      	ldr	r3, [r7, #0]
 801193e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8011940:	2b01      	cmp	r3, #1
 8011942:	d00f      	beq.n	8011964 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	7e9b      	ldrb	r3, [r3, #26]
 8011948:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 801194c:	2b00      	cmp	r3, #0
 801194e:	d009      	beq.n	8011964 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8011950:	683b      	ldr	r3, [r7, #0]
 8011952:	7e9b      	ldrb	r3, [r3, #26]
 8011954:	f043 0302 	orr.w	r3, r3, #2
 8011958:	b2da      	uxtb	r2, r3
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 801195e:	6838      	ldr	r0, [r7, #0]
 8011960:	f002 fd8c 	bl	801447c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011964:	683b      	ldr	r3, [r7, #0]
 8011966:	7d1b      	ldrb	r3, [r3, #20]
 8011968:	2b01      	cmp	r3, #1
 801196a:	d020      	beq.n	80119ae <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011970:	2b00      	cmp	r3, #0
 8011972:	d006      	beq.n	8011982 <tcp_pcb_remove+0xa2>
 8011974:	4b13      	ldr	r3, [pc, #76]	; (80119c4 <tcp_pcb_remove+0xe4>)
 8011976:	f240 7253 	movw	r2, #1875	; 0x753
 801197a:	4913      	ldr	r1, [pc, #76]	; (80119c8 <tcp_pcb_remove+0xe8>)
 801197c:	4813      	ldr	r0, [pc, #76]	; (80119cc <tcp_pcb_remove+0xec>)
 801197e:	f006 f9c1 	bl	8017d04 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011982:	683b      	ldr	r3, [r7, #0]
 8011984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011986:	2b00      	cmp	r3, #0
 8011988:	d006      	beq.n	8011998 <tcp_pcb_remove+0xb8>
 801198a:	4b0e      	ldr	r3, [pc, #56]	; (80119c4 <tcp_pcb_remove+0xe4>)
 801198c:	f240 7254 	movw	r2, #1876	; 0x754
 8011990:	490f      	ldr	r1, [pc, #60]	; (80119d0 <tcp_pcb_remove+0xf0>)
 8011992:	480e      	ldr	r0, [pc, #56]	; (80119cc <tcp_pcb_remove+0xec>)
 8011994:	f006 f9b6 	bl	8017d04 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801199c:	2b00      	cmp	r3, #0
 801199e:	d006      	beq.n	80119ae <tcp_pcb_remove+0xce>
 80119a0:	4b08      	ldr	r3, [pc, #32]	; (80119c4 <tcp_pcb_remove+0xe4>)
 80119a2:	f240 7256 	movw	r2, #1878	; 0x756
 80119a6:	490b      	ldr	r1, [pc, #44]	; (80119d4 <tcp_pcb_remove+0xf4>)
 80119a8:	4808      	ldr	r0, [pc, #32]	; (80119cc <tcp_pcb_remove+0xec>)
 80119aa:	f006 f9ab 	bl	8017d04 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	2200      	movs	r2, #0
 80119b2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80119b4:	683b      	ldr	r3, [r7, #0]
 80119b6:	2200      	movs	r2, #0
 80119b8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80119ba:	bf00      	nop
 80119bc:	3710      	adds	r7, #16
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}
 80119c2:	bf00      	nop
 80119c4:	0801986c 	.word	0x0801986c
 80119c8:	08019c24 	.word	0x08019c24
 80119cc:	080198a8 	.word	0x080198a8
 80119d0:	08019c3c 	.word	0x08019c3c
 80119d4:	08019c58 	.word	0x08019c58

080119d8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80119d8:	b480      	push	{r7}
 80119da:	b083      	sub	sp, #12
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80119e0:	4b07      	ldr	r3, [pc, #28]	; (8011a00 <tcp_next_iss+0x28>)
 80119e2:	681a      	ldr	r2, [r3, #0]
 80119e4:	4b07      	ldr	r3, [pc, #28]	; (8011a04 <tcp_next_iss+0x2c>)
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	4413      	add	r3, r2
 80119ea:	4a05      	ldr	r2, [pc, #20]	; (8011a00 <tcp_next_iss+0x28>)
 80119ec:	6013      	str	r3, [r2, #0]
  return iss;
 80119ee:	4b04      	ldr	r3, [pc, #16]	; (8011a00 <tcp_next_iss+0x28>)
 80119f0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80119f2:	4618      	mov	r0, r3
 80119f4:	370c      	adds	r7, #12
 80119f6:	46bd      	mov	sp, r7
 80119f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fc:	4770      	bx	lr
 80119fe:	bf00      	nop
 8011a00:	24000028 	.word	0x24000028
 8011a04:	24024e50 	.word	0x24024e50

08011a08 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b084      	sub	sp, #16
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	4603      	mov	r3, r0
 8011a10:	6039      	str	r1, [r7, #0]
 8011a12:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8011a14:	6838      	ldr	r0, [r7, #0]
 8011a16:	f004 fe8f 	bl	8016738 <ip4_route>
 8011a1a:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d101      	bne.n	8011a26 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8011a22:	88fb      	ldrh	r3, [r7, #6]
 8011a24:	e010      	b.n	8011a48 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8011a2a:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011a2c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d008      	beq.n	8011a46 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8011a34:	897b      	ldrh	r3, [r7, #10]
 8011a36:	3b28      	subs	r3, #40	; 0x28
 8011a38:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011a3a:	893a      	ldrh	r2, [r7, #8]
 8011a3c:	88fb      	ldrh	r3, [r7, #6]
 8011a3e:	4293      	cmp	r3, r2
 8011a40:	bf28      	it	cs
 8011a42:	4613      	movcs	r3, r2
 8011a44:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8011a46:	88fb      	ldrh	r3, [r7, #6]
}
 8011a48:	4618      	mov	r0, r3
 8011a4a:	3710      	adds	r7, #16
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd80      	pop	{r7, pc}

08011a50 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b084      	sub	sp, #16
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
 8011a58:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011a5e:	e011      	b.n	8011a84 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	681a      	ldr	r2, [r3, #0]
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d108      	bne.n	8011a7e <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	68db      	ldr	r3, [r3, #12]
 8011a70:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011a72:	68f8      	ldr	r0, [r7, #12]
 8011a74:	f7ff f8f8 	bl	8010c68 <tcp_abort>
      pcb = next;
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	60fb      	str	r3, [r7, #12]
 8011a7c:	e002      	b.n	8011a84 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	68db      	ldr	r3, [r3, #12]
 8011a82:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d1ea      	bne.n	8011a60 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8011a8a:	bf00      	nop
 8011a8c:	3710      	adds	r7, #16
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}
	...

08011a94 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b084      	sub	sp, #16
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
 8011a9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d02c      	beq.n	8011afe <tcp_netif_ip_addr_changed+0x6a>
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d028      	beq.n	8011afe <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011aac:	4b16      	ldr	r3, [pc, #88]	; (8011b08 <tcp_netif_ip_addr_changed+0x74>)
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	4619      	mov	r1, r3
 8011ab2:	6878      	ldr	r0, [r7, #4]
 8011ab4:	f7ff ffcc 	bl	8011a50 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011ab8:	4b14      	ldr	r3, [pc, #80]	; (8011b0c <tcp_netif_ip_addr_changed+0x78>)
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	4619      	mov	r1, r3
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	f7ff ffc6 	bl	8011a50 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011ac4:	683b      	ldr	r3, [r7, #0]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d019      	beq.n	8011afe <tcp_netif_ip_addr_changed+0x6a>
 8011aca:	683b      	ldr	r3, [r7, #0]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d015      	beq.n	8011afe <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8011ad2:	4b0f      	ldr	r3, [pc, #60]	; (8011b10 <tcp_netif_ip_addr_changed+0x7c>)
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	60fb      	str	r3, [r7, #12]
 8011ad8:	e00e      	b.n	8011af8 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	68db      	ldr	r3, [r3, #12]
 8011ade:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	681a      	ldr	r2, [r3, #0]
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	d103      	bne.n	8011af4 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	681a      	ldr	r2, [r3, #0]
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	60fb      	str	r3, [r7, #12]
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d1ed      	bne.n	8011ada <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011afe:	bf00      	nop
 8011b00:	3710      	adds	r7, #16
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}
 8011b06:	bf00      	nop
 8011b08:	24024e4c 	.word	0x24024e4c
 8011b0c:	24024e58 	.word	0x24024e58
 8011b10:	24024e54 	.word	0x24024e54

08011b14 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011b14:	b590      	push	{r4, r7, lr}
 8011b16:	b08b      	sub	sp, #44	; 0x2c
 8011b18:	af02      	add	r7, sp, #8
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	685b      	ldr	r3, [r3, #4]
 8011b22:	4a82      	ldr	r2, [pc, #520]	; (8011d2c <tcp_input+0x218>)
 8011b24:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	895b      	ldrh	r3, [r3, #10]
 8011b2a:	2b13      	cmp	r3, #19
 8011b2c:	f240 838a 	bls.w	8012244 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011b30:	4b7f      	ldr	r3, [pc, #508]	; (8011d30 <tcp_input+0x21c>)
 8011b32:	695a      	ldr	r2, [r3, #20]
 8011b34:	4b7e      	ldr	r3, [pc, #504]	; (8011d30 <tcp_input+0x21c>)
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	4619      	mov	r1, r3
 8011b3a:	4610      	mov	r0, r2
 8011b3c:	f005 f886 	bl	8016c4c <ip4_addr_isbroadcast_u32>
 8011b40:	4603      	mov	r3, r0
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	f040 8380 	bne.w	8012248 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011b48:	4b79      	ldr	r3, [pc, #484]	; (8011d30 <tcp_input+0x21c>)
 8011b4a:	695b      	ldr	r3, [r3, #20]
 8011b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011b50:	2be0      	cmp	r3, #224	; 0xe0
 8011b52:	f000 8379 	beq.w	8012248 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8011b56:	4b75      	ldr	r3, [pc, #468]	; (8011d2c <tcp_input+0x218>)
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	899b      	ldrh	r3, [r3, #12]
 8011b5c:	b29b      	uxth	r3, r3
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f7fd f86c 	bl	800ec3c <lwip_htons>
 8011b64:	4603      	mov	r3, r0
 8011b66:	0b1b      	lsrs	r3, r3, #12
 8011b68:	b29b      	uxth	r3, r3
 8011b6a:	b2db      	uxtb	r3, r3
 8011b6c:	009b      	lsls	r3, r3, #2
 8011b6e:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011b70:	7cbb      	ldrb	r3, [r7, #18]
 8011b72:	2b13      	cmp	r3, #19
 8011b74:	f240 8368 	bls.w	8012248 <tcp_input+0x734>
 8011b78:	7cbb      	ldrb	r3, [r7, #18]
 8011b7a:	b29a      	uxth	r2, r3
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	891b      	ldrh	r3, [r3, #8]
 8011b80:	429a      	cmp	r2, r3
 8011b82:	f200 8361 	bhi.w	8012248 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8011b86:	7cbb      	ldrb	r3, [r7, #18]
 8011b88:	b29b      	uxth	r3, r3
 8011b8a:	3b14      	subs	r3, #20
 8011b8c:	b29a      	uxth	r2, r3
 8011b8e:	4b69      	ldr	r3, [pc, #420]	; (8011d34 <tcp_input+0x220>)
 8011b90:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011b92:	4b69      	ldr	r3, [pc, #420]	; (8011d38 <tcp_input+0x224>)
 8011b94:	2200      	movs	r2, #0
 8011b96:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	895a      	ldrh	r2, [r3, #10]
 8011b9c:	7cbb      	ldrb	r3, [r7, #18]
 8011b9e:	b29b      	uxth	r3, r3
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	d30d      	bcc.n	8011bc0 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011ba4:	4b63      	ldr	r3, [pc, #396]	; (8011d34 <tcp_input+0x220>)
 8011ba6:	881a      	ldrh	r2, [r3, #0]
 8011ba8:	4b64      	ldr	r3, [pc, #400]	; (8011d3c <tcp_input+0x228>)
 8011baa:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8011bac:	7cbb      	ldrb	r3, [r7, #18]
 8011bae:	b29b      	uxth	r3, r3
 8011bb0:	425b      	negs	r3, r3
 8011bb2:	b29b      	uxth	r3, r3
 8011bb4:	b21b      	sxth	r3, r3
 8011bb6:	4619      	mov	r1, r3
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f7fe fb33 	bl	8010224 <pbuf_header>
 8011bbe:	e055      	b.n	8011c6c <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d105      	bne.n	8011bd4 <tcp_input+0xc0>
 8011bc8:	4b5d      	ldr	r3, [pc, #372]	; (8011d40 <tcp_input+0x22c>)
 8011bca:	22b2      	movs	r2, #178	; 0xb2
 8011bcc:	495d      	ldr	r1, [pc, #372]	; (8011d44 <tcp_input+0x230>)
 8011bce:	485e      	ldr	r0, [pc, #376]	; (8011d48 <tcp_input+0x234>)
 8011bd0:	f006 f898 	bl	8017d04 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8011bd4:	f06f 0113 	mvn.w	r1, #19
 8011bd8:	6878      	ldr	r0, [r7, #4]
 8011bda:	f7fe fb23 	bl	8010224 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	895a      	ldrh	r2, [r3, #10]
 8011be2:	4b56      	ldr	r3, [pc, #344]	; (8011d3c <tcp_input+0x228>)
 8011be4:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8011be6:	4b53      	ldr	r3, [pc, #332]	; (8011d34 <tcp_input+0x220>)
 8011be8:	881a      	ldrh	r2, [r3, #0]
 8011bea:	4b54      	ldr	r3, [pc, #336]	; (8011d3c <tcp_input+0x228>)
 8011bec:	881b      	ldrh	r3, [r3, #0]
 8011bee:	1ad3      	subs	r3, r2, r3
 8011bf0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8011bf2:	4b52      	ldr	r3, [pc, #328]	; (8011d3c <tcp_input+0x228>)
 8011bf4:	881b      	ldrh	r3, [r3, #0]
 8011bf6:	425b      	negs	r3, r3
 8011bf8:	b29b      	uxth	r3, r3
 8011bfa:	b21b      	sxth	r3, r3
 8011bfc:	4619      	mov	r1, r3
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f7fe fb10 	bl	8010224 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	895b      	ldrh	r3, [r3, #10]
 8011c0a:	8a3a      	ldrh	r2, [r7, #16]
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	f200 831d 	bhi.w	801224c <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	685b      	ldr	r3, [r3, #4]
 8011c18:	4a47      	ldr	r2, [pc, #284]	; (8011d38 <tcp_input+0x224>)
 8011c1a:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681a      	ldr	r2, [r3, #0]
 8011c20:	8a3b      	ldrh	r3, [r7, #16]
 8011c22:	425b      	negs	r3, r3
 8011c24:	b29b      	uxth	r3, r3
 8011c26:	b21b      	sxth	r3, r3
 8011c28:	4619      	mov	r1, r3
 8011c2a:	4610      	mov	r0, r2
 8011c2c:	f7fe fafa 	bl	8010224 <pbuf_header>
    p->tot_len -= opt2len;
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	891a      	ldrh	r2, [r3, #8]
 8011c34:	8a3b      	ldrh	r3, [r7, #16]
 8011c36:	1ad3      	subs	r3, r2, r3
 8011c38:	b29a      	uxth	r2, r3
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	895b      	ldrh	r3, [r3, #10]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d005      	beq.n	8011c52 <tcp_input+0x13e>
 8011c46:	4b3e      	ldr	r3, [pc, #248]	; (8011d40 <tcp_input+0x22c>)
 8011c48:	22cf      	movs	r2, #207	; 0xcf
 8011c4a:	4940      	ldr	r1, [pc, #256]	; (8011d4c <tcp_input+0x238>)
 8011c4c:	483e      	ldr	r0, [pc, #248]	; (8011d48 <tcp_input+0x234>)
 8011c4e:	f006 f859 	bl	8017d04 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	891a      	ldrh	r2, [r3, #8]
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	891b      	ldrh	r3, [r3, #8]
 8011c5c:	429a      	cmp	r2, r3
 8011c5e:	d005      	beq.n	8011c6c <tcp_input+0x158>
 8011c60:	4b37      	ldr	r3, [pc, #220]	; (8011d40 <tcp_input+0x22c>)
 8011c62:	22d0      	movs	r2, #208	; 0xd0
 8011c64:	493a      	ldr	r1, [pc, #232]	; (8011d50 <tcp_input+0x23c>)
 8011c66:	4838      	ldr	r0, [pc, #224]	; (8011d48 <tcp_input+0x234>)
 8011c68:	f006 f84c 	bl	8017d04 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011c6c:	4b2f      	ldr	r3, [pc, #188]	; (8011d2c <tcp_input+0x218>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	881b      	ldrh	r3, [r3, #0]
 8011c72:	b29a      	uxth	r2, r3
 8011c74:	4b2d      	ldr	r3, [pc, #180]	; (8011d2c <tcp_input+0x218>)
 8011c76:	681c      	ldr	r4, [r3, #0]
 8011c78:	4610      	mov	r0, r2
 8011c7a:	f7fc ffdf 	bl	800ec3c <lwip_htons>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011c82:	4b2a      	ldr	r3, [pc, #168]	; (8011d2c <tcp_input+0x218>)
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	885b      	ldrh	r3, [r3, #2]
 8011c88:	b29a      	uxth	r2, r3
 8011c8a:	4b28      	ldr	r3, [pc, #160]	; (8011d2c <tcp_input+0x218>)
 8011c8c:	681c      	ldr	r4, [r3, #0]
 8011c8e:	4610      	mov	r0, r2
 8011c90:	f7fc ffd4 	bl	800ec3c <lwip_htons>
 8011c94:	4603      	mov	r3, r0
 8011c96:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011c98:	4b24      	ldr	r3, [pc, #144]	; (8011d2c <tcp_input+0x218>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	685a      	ldr	r2, [r3, #4]
 8011c9e:	4b23      	ldr	r3, [pc, #140]	; (8011d2c <tcp_input+0x218>)
 8011ca0:	681c      	ldr	r4, [r3, #0]
 8011ca2:	4610      	mov	r0, r2
 8011ca4:	f7fc ffd8 	bl	800ec58 <lwip_htonl>
 8011ca8:	4603      	mov	r3, r0
 8011caa:	6063      	str	r3, [r4, #4]
 8011cac:	6863      	ldr	r3, [r4, #4]
 8011cae:	4a29      	ldr	r2, [pc, #164]	; (8011d54 <tcp_input+0x240>)
 8011cb0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011cb2:	4b1e      	ldr	r3, [pc, #120]	; (8011d2c <tcp_input+0x218>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	689a      	ldr	r2, [r3, #8]
 8011cb8:	4b1c      	ldr	r3, [pc, #112]	; (8011d2c <tcp_input+0x218>)
 8011cba:	681c      	ldr	r4, [r3, #0]
 8011cbc:	4610      	mov	r0, r2
 8011cbe:	f7fc ffcb 	bl	800ec58 <lwip_htonl>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	60a3      	str	r3, [r4, #8]
 8011cc6:	68a3      	ldr	r3, [r4, #8]
 8011cc8:	4a23      	ldr	r2, [pc, #140]	; (8011d58 <tcp_input+0x244>)
 8011cca:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011ccc:	4b17      	ldr	r3, [pc, #92]	; (8011d2c <tcp_input+0x218>)
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	89db      	ldrh	r3, [r3, #14]
 8011cd2:	b29a      	uxth	r2, r3
 8011cd4:	4b15      	ldr	r3, [pc, #84]	; (8011d2c <tcp_input+0x218>)
 8011cd6:	681c      	ldr	r4, [r3, #0]
 8011cd8:	4610      	mov	r0, r2
 8011cda:	f7fc ffaf 	bl	800ec3c <lwip_htons>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8011ce2:	4b12      	ldr	r3, [pc, #72]	; (8011d2c <tcp_input+0x218>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	899b      	ldrh	r3, [r3, #12]
 8011ce8:	b29b      	uxth	r3, r3
 8011cea:	4618      	mov	r0, r3
 8011cec:	f7fc ffa6 	bl	800ec3c <lwip_htons>
 8011cf0:	4603      	mov	r3, r0
 8011cf2:	b2db      	uxtb	r3, r3
 8011cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011cf8:	b2da      	uxtb	r2, r3
 8011cfa:	4b18      	ldr	r3, [pc, #96]	; (8011d5c <tcp_input+0x248>)
 8011cfc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	891a      	ldrh	r2, [r3, #8]
 8011d02:	4b16      	ldr	r3, [pc, #88]	; (8011d5c <tcp_input+0x248>)
 8011d04:	781b      	ldrb	r3, [r3, #0]
 8011d06:	f003 0303 	and.w	r3, r3, #3
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	bf14      	ite	ne
 8011d0e:	2301      	movne	r3, #1
 8011d10:	2300      	moveq	r3, #0
 8011d12:	b2db      	uxtb	r3, r3
 8011d14:	b29b      	uxth	r3, r3
 8011d16:	4413      	add	r3, r2
 8011d18:	b29a      	uxth	r2, r3
 8011d1a:	4b11      	ldr	r3, [pc, #68]	; (8011d60 <tcp_input+0x24c>)
 8011d1c:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011d1e:	2300      	movs	r3, #0
 8011d20:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011d22:	4b10      	ldr	r3, [pc, #64]	; (8011d64 <tcp_input+0x250>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	61fb      	str	r3, [r7, #28]
 8011d28:	e082      	b.n	8011e30 <tcp_input+0x31c>
 8011d2a:	bf00      	nop
 8011d2c:	24021810 	.word	0x24021810
 8011d30:	24021c54 	.word	0x24021c54
 8011d34:	24021814 	.word	0x24021814
 8011d38:	24021818 	.word	0x24021818
 8011d3c:	24021816 	.word	0x24021816
 8011d40:	08019c70 	.word	0x08019c70
 8011d44:	08019ca4 	.word	0x08019ca4
 8011d48:	08019cb4 	.word	0x08019cb4
 8011d4c:	08019cdc 	.word	0x08019cdc
 8011d50:	08019ce8 	.word	0x08019ce8
 8011d54:	24021820 	.word	0x24021820
 8011d58:	24021824 	.word	0x24021824
 8011d5c:	2402182c 	.word	0x2402182c
 8011d60:	2402182a 	.word	0x2402182a
 8011d64:	24024e4c 	.word	0x24024e4c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011d68:	69fb      	ldr	r3, [r7, #28]
 8011d6a:	7d1b      	ldrb	r3, [r3, #20]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d105      	bne.n	8011d7c <tcp_input+0x268>
 8011d70:	4b8f      	ldr	r3, [pc, #572]	; (8011fb0 <tcp_input+0x49c>)
 8011d72:	22e2      	movs	r2, #226	; 0xe2
 8011d74:	498f      	ldr	r1, [pc, #572]	; (8011fb4 <tcp_input+0x4a0>)
 8011d76:	4890      	ldr	r0, [pc, #576]	; (8011fb8 <tcp_input+0x4a4>)
 8011d78:	f005 ffc4 	bl	8017d04 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011d7c:	69fb      	ldr	r3, [r7, #28]
 8011d7e:	7d1b      	ldrb	r3, [r3, #20]
 8011d80:	2b0a      	cmp	r3, #10
 8011d82:	d105      	bne.n	8011d90 <tcp_input+0x27c>
 8011d84:	4b8a      	ldr	r3, [pc, #552]	; (8011fb0 <tcp_input+0x49c>)
 8011d86:	22e3      	movs	r2, #227	; 0xe3
 8011d88:	498c      	ldr	r1, [pc, #560]	; (8011fbc <tcp_input+0x4a8>)
 8011d8a:	488b      	ldr	r0, [pc, #556]	; (8011fb8 <tcp_input+0x4a4>)
 8011d8c:	f005 ffba 	bl	8017d04 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011d90:	69fb      	ldr	r3, [r7, #28]
 8011d92:	7d1b      	ldrb	r3, [r3, #20]
 8011d94:	2b01      	cmp	r3, #1
 8011d96:	d105      	bne.n	8011da4 <tcp_input+0x290>
 8011d98:	4b85      	ldr	r3, [pc, #532]	; (8011fb0 <tcp_input+0x49c>)
 8011d9a:	22e4      	movs	r2, #228	; 0xe4
 8011d9c:	4988      	ldr	r1, [pc, #544]	; (8011fc0 <tcp_input+0x4ac>)
 8011d9e:	4886      	ldr	r0, [pc, #536]	; (8011fb8 <tcp_input+0x4a4>)
 8011da0:	f005 ffb0 	bl	8017d04 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8011da4:	69fb      	ldr	r3, [r7, #28]
 8011da6:	8b1a      	ldrh	r2, [r3, #24]
 8011da8:	4b86      	ldr	r3, [pc, #536]	; (8011fc4 <tcp_input+0x4b0>)
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	881b      	ldrh	r3, [r3, #0]
 8011dae:	b29b      	uxth	r3, r3
 8011db0:	429a      	cmp	r2, r3
 8011db2:	d138      	bne.n	8011e26 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8011db4:	69fb      	ldr	r3, [r7, #28]
 8011db6:	8ada      	ldrh	r2, [r3, #22]
 8011db8:	4b82      	ldr	r3, [pc, #520]	; (8011fc4 <tcp_input+0x4b0>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	885b      	ldrh	r3, [r3, #2]
 8011dbe:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	d130      	bne.n	8011e26 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011dc4:	69fb      	ldr	r3, [r7, #28]
 8011dc6:	685a      	ldr	r2, [r3, #4]
 8011dc8:	4b7f      	ldr	r3, [pc, #508]	; (8011fc8 <tcp_input+0x4b4>)
 8011dca:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011dcc:	429a      	cmp	r2, r3
 8011dce:	d12a      	bne.n	8011e26 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011dd0:	69fb      	ldr	r3, [r7, #28]
 8011dd2:	681a      	ldr	r2, [r3, #0]
 8011dd4:	4b7c      	ldr	r3, [pc, #496]	; (8011fc8 <tcp_input+0x4b4>)
 8011dd6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	d124      	bne.n	8011e26 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011ddc:	69fb      	ldr	r3, [r7, #28]
 8011dde:	68db      	ldr	r3, [r3, #12]
 8011de0:	69fa      	ldr	r2, [r7, #28]
 8011de2:	429a      	cmp	r2, r3
 8011de4:	d105      	bne.n	8011df2 <tcp_input+0x2de>
 8011de6:	4b72      	ldr	r3, [pc, #456]	; (8011fb0 <tcp_input+0x49c>)
 8011de8:	22ec      	movs	r2, #236	; 0xec
 8011dea:	4978      	ldr	r1, [pc, #480]	; (8011fcc <tcp_input+0x4b8>)
 8011dec:	4872      	ldr	r0, [pc, #456]	; (8011fb8 <tcp_input+0x4a4>)
 8011dee:	f005 ff89 	bl	8017d04 <iprintf>
      if (prev != NULL) {
 8011df2:	69bb      	ldr	r3, [r7, #24]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d00a      	beq.n	8011e0e <tcp_input+0x2fa>
        prev->next = pcb->next;
 8011df8:	69fb      	ldr	r3, [r7, #28]
 8011dfa:	68da      	ldr	r2, [r3, #12]
 8011dfc:	69bb      	ldr	r3, [r7, #24]
 8011dfe:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011e00:	4b73      	ldr	r3, [pc, #460]	; (8011fd0 <tcp_input+0x4bc>)
 8011e02:	681a      	ldr	r2, [r3, #0]
 8011e04:	69fb      	ldr	r3, [r7, #28]
 8011e06:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8011e08:	4a71      	ldr	r2, [pc, #452]	; (8011fd0 <tcp_input+0x4bc>)
 8011e0a:	69fb      	ldr	r3, [r7, #28]
 8011e0c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011e0e:	69fb      	ldr	r3, [r7, #28]
 8011e10:	68db      	ldr	r3, [r3, #12]
 8011e12:	69fa      	ldr	r2, [r7, #28]
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d10f      	bne.n	8011e38 <tcp_input+0x324>
 8011e18:	4b65      	ldr	r3, [pc, #404]	; (8011fb0 <tcp_input+0x49c>)
 8011e1a:	22f4      	movs	r2, #244	; 0xf4
 8011e1c:	496d      	ldr	r1, [pc, #436]	; (8011fd4 <tcp_input+0x4c0>)
 8011e1e:	4866      	ldr	r0, [pc, #408]	; (8011fb8 <tcp_input+0x4a4>)
 8011e20:	f005 ff70 	bl	8017d04 <iprintf>
      break;
 8011e24:	e008      	b.n	8011e38 <tcp_input+0x324>
    }
    prev = pcb;
 8011e26:	69fb      	ldr	r3, [r7, #28]
 8011e28:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e2a:	69fb      	ldr	r3, [r7, #28]
 8011e2c:	68db      	ldr	r3, [r3, #12]
 8011e2e:	61fb      	str	r3, [r7, #28]
 8011e30:	69fb      	ldr	r3, [r7, #28]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d198      	bne.n	8011d68 <tcp_input+0x254>
 8011e36:	e000      	b.n	8011e3a <tcp_input+0x326>
      break;
 8011e38:	bf00      	nop
  }

  if (pcb == NULL) {
 8011e3a:	69fb      	ldr	r3, [r7, #28]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d173      	bne.n	8011f28 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e40:	4b65      	ldr	r3, [pc, #404]	; (8011fd8 <tcp_input+0x4c4>)
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	61fb      	str	r3, [r7, #28]
 8011e46:	e02f      	b.n	8011ea8 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011e48:	69fb      	ldr	r3, [r7, #28]
 8011e4a:	7d1b      	ldrb	r3, [r3, #20]
 8011e4c:	2b0a      	cmp	r3, #10
 8011e4e:	d005      	beq.n	8011e5c <tcp_input+0x348>
 8011e50:	4b57      	ldr	r3, [pc, #348]	; (8011fb0 <tcp_input+0x49c>)
 8011e52:	22fe      	movs	r2, #254	; 0xfe
 8011e54:	4961      	ldr	r1, [pc, #388]	; (8011fdc <tcp_input+0x4c8>)
 8011e56:	4858      	ldr	r0, [pc, #352]	; (8011fb8 <tcp_input+0x4a4>)
 8011e58:	f005 ff54 	bl	8017d04 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8011e5c:	69fb      	ldr	r3, [r7, #28]
 8011e5e:	8b1a      	ldrh	r2, [r3, #24]
 8011e60:	4b58      	ldr	r3, [pc, #352]	; (8011fc4 <tcp_input+0x4b0>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	881b      	ldrh	r3, [r3, #0]
 8011e66:	b29b      	uxth	r3, r3
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	d11a      	bne.n	8011ea2 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 8011e6c:	69fb      	ldr	r3, [r7, #28]
 8011e6e:	8ada      	ldrh	r2, [r3, #22]
 8011e70:	4b54      	ldr	r3, [pc, #336]	; (8011fc4 <tcp_input+0x4b0>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	885b      	ldrh	r3, [r3, #2]
 8011e76:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	d112      	bne.n	8011ea2 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011e7c:	69fb      	ldr	r3, [r7, #28]
 8011e7e:	685a      	ldr	r2, [r3, #4]
 8011e80:	4b51      	ldr	r3, [pc, #324]	; (8011fc8 <tcp_input+0x4b4>)
 8011e82:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011e84:	429a      	cmp	r2, r3
 8011e86:	d10c      	bne.n	8011ea2 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011e88:	69fb      	ldr	r3, [r7, #28]
 8011e8a:	681a      	ldr	r2, [r3, #0]
 8011e8c:	4b4e      	ldr	r3, [pc, #312]	; (8011fc8 <tcp_input+0x4b4>)
 8011e8e:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011e90:	429a      	cmp	r2, r3
 8011e92:	d106      	bne.n	8011ea2 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8011e94:	69f8      	ldr	r0, [r7, #28]
 8011e96:	f000 fb15 	bl	80124c4 <tcp_timewait_input>
        pbuf_free(p);
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f7fe f9e6 	bl	801026c <pbuf_free>
        return;
 8011ea0:	e1da      	b.n	8012258 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ea2:	69fb      	ldr	r3, [r7, #28]
 8011ea4:	68db      	ldr	r3, [r3, #12]
 8011ea6:	61fb      	str	r3, [r7, #28]
 8011ea8:	69fb      	ldr	r3, [r7, #28]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d1cc      	bne.n	8011e48 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011eae:	2300      	movs	r3, #0
 8011eb0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011eb2:	4b4b      	ldr	r3, [pc, #300]	; (8011fe0 <tcp_input+0x4cc>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	617b      	str	r3, [r7, #20]
 8011eb8:	e019      	b.n	8011eee <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8011eba:	697b      	ldr	r3, [r7, #20]
 8011ebc:	8ada      	ldrh	r2, [r3, #22]
 8011ebe:	4b41      	ldr	r3, [pc, #260]	; (8011fc4 <tcp_input+0x4b0>)
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	885b      	ldrh	r3, [r3, #2]
 8011ec4:	b29b      	uxth	r3, r3
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	d10c      	bne.n	8011ee4 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011eca:	697b      	ldr	r3, [r7, #20]
 8011ecc:	681a      	ldr	r2, [r3, #0]
 8011ece:	4b3e      	ldr	r3, [pc, #248]	; (8011fc8 <tcp_input+0x4b4>)
 8011ed0:	695b      	ldr	r3, [r3, #20]
 8011ed2:	429a      	cmp	r2, r3
 8011ed4:	d00f      	beq.n	8011ef6 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011ed6:	697b      	ldr	r3, [r7, #20]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d00d      	beq.n	8011ef8 <tcp_input+0x3e4>
 8011edc:	697b      	ldr	r3, [r7, #20]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d009      	beq.n	8011ef8 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011ee4:	697b      	ldr	r3, [r7, #20]
 8011ee6:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011ee8:	697b      	ldr	r3, [r7, #20]
 8011eea:	68db      	ldr	r3, [r3, #12]
 8011eec:	617b      	str	r3, [r7, #20]
 8011eee:	697b      	ldr	r3, [r7, #20]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d1e2      	bne.n	8011eba <tcp_input+0x3a6>
 8011ef4:	e000      	b.n	8011ef8 <tcp_input+0x3e4>
            break;
 8011ef6:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011ef8:	697b      	ldr	r3, [r7, #20]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d014      	beq.n	8011f28 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011efe:	69bb      	ldr	r3, [r7, #24]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d00a      	beq.n	8011f1a <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011f04:	697b      	ldr	r3, [r7, #20]
 8011f06:	68da      	ldr	r2, [r3, #12]
 8011f08:	69bb      	ldr	r3, [r7, #24]
 8011f0a:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011f0c:	4b34      	ldr	r3, [pc, #208]	; (8011fe0 <tcp_input+0x4cc>)
 8011f0e:	681a      	ldr	r2, [r3, #0]
 8011f10:	697b      	ldr	r3, [r7, #20]
 8011f12:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011f14:	4a32      	ldr	r2, [pc, #200]	; (8011fe0 <tcp_input+0x4cc>)
 8011f16:	697b      	ldr	r3, [r7, #20]
 8011f18:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8011f1a:	6978      	ldr	r0, [r7, #20]
 8011f1c:	f000 f9f0 	bl	8012300 <tcp_listen_input>
      pbuf_free(p);
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f7fe f9a3 	bl	801026c <pbuf_free>
      return;
 8011f26:	e197      	b.n	8012258 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8011f28:	69fb      	ldr	r3, [r7, #28]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	f000 8164 	beq.w	80121f8 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8011f30:	4b2c      	ldr	r3, [pc, #176]	; (8011fe4 <tcp_input+0x4d0>)
 8011f32:	2200      	movs	r2, #0
 8011f34:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	891a      	ldrh	r2, [r3, #8]
 8011f3a:	4b2a      	ldr	r3, [pc, #168]	; (8011fe4 <tcp_input+0x4d0>)
 8011f3c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8011f3e:	4a29      	ldr	r2, [pc, #164]	; (8011fe4 <tcp_input+0x4d0>)
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011f44:	4b1f      	ldr	r3, [pc, #124]	; (8011fc4 <tcp_input+0x4b0>)
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	4a26      	ldr	r2, [pc, #152]	; (8011fe4 <tcp_input+0x4d0>)
 8011f4a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8011f4c:	4b26      	ldr	r3, [pc, #152]	; (8011fe8 <tcp_input+0x4d4>)
 8011f4e:	2200      	movs	r2, #0
 8011f50:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011f52:	4b26      	ldr	r3, [pc, #152]	; (8011fec <tcp_input+0x4d8>)
 8011f54:	2200      	movs	r2, #0
 8011f56:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011f58:	4b25      	ldr	r3, [pc, #148]	; (8011ff0 <tcp_input+0x4dc>)
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8011f5e:	4b25      	ldr	r3, [pc, #148]	; (8011ff4 <tcp_input+0x4e0>)
 8011f60:	781b      	ldrb	r3, [r3, #0]
 8011f62:	f003 0308 	and.w	r3, r3, #8
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d006      	beq.n	8011f78 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	7b5b      	ldrb	r3, [r3, #13]
 8011f6e:	f043 0301 	orr.w	r3, r3, #1
 8011f72:	b2da      	uxtb	r2, r3
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011f78:	69fb      	ldr	r3, [r7, #28]
 8011f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d03d      	beq.n	8011ffc <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011f80:	69f8      	ldr	r0, [r7, #28]
 8011f82:	f7ff fa4f 	bl	8011424 <tcp_process_refused_data>
 8011f86:	4603      	mov	r3, r0
 8011f88:	f113 0f0d 	cmn.w	r3, #13
 8011f8c:	d007      	beq.n	8011f9e <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011f8e:	69fb      	ldr	r3, [r7, #28]
 8011f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d032      	beq.n	8011ffc <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011f96:	4b18      	ldr	r3, [pc, #96]	; (8011ff8 <tcp_input+0x4e4>)
 8011f98:	881b      	ldrh	r3, [r3, #0]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d02e      	beq.n	8011ffc <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011f9e:	69fb      	ldr	r3, [r7, #28]
 8011fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	f040 8108 	bne.w	80121b8 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011fa8:	69f8      	ldr	r0, [r7, #28]
 8011faa:	f002 fa0b 	bl	80143c4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011fae:	e103      	b.n	80121b8 <tcp_input+0x6a4>
 8011fb0:	08019c70 	.word	0x08019c70
 8011fb4:	08019d08 	.word	0x08019d08
 8011fb8:	08019cb4 	.word	0x08019cb4
 8011fbc:	08019d30 	.word	0x08019d30
 8011fc0:	08019d5c 	.word	0x08019d5c
 8011fc4:	24021810 	.word	0x24021810
 8011fc8:	24021c54 	.word	0x24021c54
 8011fcc:	08019d84 	.word	0x08019d84
 8011fd0:	24024e4c 	.word	0x24024e4c
 8011fd4:	08019db0 	.word	0x08019db0
 8011fd8:	24024e5c 	.word	0x24024e5c
 8011fdc:	08019ddc 	.word	0x08019ddc
 8011fe0:	24024e54 	.word	0x24024e54
 8011fe4:	24021800 	.word	0x24021800
 8011fe8:	24021830 	.word	0x24021830
 8011fec:	2402182d 	.word	0x2402182d
 8011ff0:	24021828 	.word	0x24021828
 8011ff4:	2402182c 	.word	0x2402182c
 8011ff8:	2402182a 	.word	0x2402182a
      }
    }
    tcp_input_pcb = pcb;
 8011ffc:	4a98      	ldr	r2, [pc, #608]	; (8012260 <tcp_input+0x74c>)
 8011ffe:	69fb      	ldr	r3, [r7, #28]
 8012000:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012002:	69f8      	ldr	r0, [r7, #28]
 8012004:	f000 fac6 	bl	8012594 <tcp_process>
 8012008:	4603      	mov	r3, r0
 801200a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801200c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012010:	f113 0f0d 	cmn.w	r3, #13
 8012014:	f000 80d2 	beq.w	80121bc <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8012018:	4b92      	ldr	r3, [pc, #584]	; (8012264 <tcp_input+0x750>)
 801201a:	781b      	ldrb	r3, [r3, #0]
 801201c:	f003 0308 	and.w	r3, r3, #8
 8012020:	2b00      	cmp	r3, #0
 8012022:	d016      	beq.n	8012052 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012024:	69fb      	ldr	r3, [r7, #28]
 8012026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801202a:	2b00      	cmp	r3, #0
 801202c:	d008      	beq.n	8012040 <tcp_input+0x52c>
 801202e:	69fb      	ldr	r3, [r7, #28]
 8012030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012034:	69fa      	ldr	r2, [r7, #28]
 8012036:	6912      	ldr	r2, [r2, #16]
 8012038:	f06f 010d 	mvn.w	r1, #13
 801203c:	4610      	mov	r0, r2
 801203e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012040:	69f9      	ldr	r1, [r7, #28]
 8012042:	4889      	ldr	r0, [pc, #548]	; (8012268 <tcp_input+0x754>)
 8012044:	f7ff fc4c 	bl	80118e0 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8012048:	69f9      	ldr	r1, [r7, #28]
 801204a:	2001      	movs	r0, #1
 801204c:	f7fd fb32 	bl	800f6b4 <memp_free>
 8012050:	e0bf      	b.n	80121d2 <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 8012052:	2300      	movs	r3, #0
 8012054:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012056:	4b85      	ldr	r3, [pc, #532]	; (801226c <tcp_input+0x758>)
 8012058:	881b      	ldrh	r3, [r3, #0]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d01b      	beq.n	8012096 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801205e:	4b83      	ldr	r3, [pc, #524]	; (801226c <tcp_input+0x758>)
 8012060:	881b      	ldrh	r3, [r3, #0]
 8012062:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012064:	69fb      	ldr	r3, [r7, #28]
 8012066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012068:	2b00      	cmp	r3, #0
 801206a:	d009      	beq.n	8012080 <tcp_input+0x56c>
 801206c:	69fb      	ldr	r3, [r7, #28]
 801206e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012070:	69fa      	ldr	r2, [r7, #28]
 8012072:	6910      	ldr	r0, [r2, #16]
 8012074:	89fa      	ldrh	r2, [r7, #14]
 8012076:	69f9      	ldr	r1, [r7, #28]
 8012078:	4798      	blx	r3
 801207a:	4603      	mov	r3, r0
 801207c:	74fb      	strb	r3, [r7, #19]
 801207e:	e001      	b.n	8012084 <tcp_input+0x570>
 8012080:	2300      	movs	r3, #0
 8012082:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012084:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012088:	f113 0f0d 	cmn.w	r3, #13
 801208c:	f000 8098 	beq.w	80121c0 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012090:	4b76      	ldr	r3, [pc, #472]	; (801226c <tcp_input+0x758>)
 8012092:	2200      	movs	r2, #0
 8012094:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012096:	69f8      	ldr	r0, [r7, #28]
 8012098:	f000 f900 	bl	801229c <tcp_input_delayed_close>
 801209c:	4603      	mov	r3, r0
 801209e:	2b00      	cmp	r3, #0
 80120a0:	f040 8090 	bne.w	80121c4 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80120a4:	4b72      	ldr	r3, [pc, #456]	; (8012270 <tcp_input+0x75c>)
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d041      	beq.n	8012130 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80120ac:	69fb      	ldr	r3, [r7, #28]
 80120ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d006      	beq.n	80120c2 <tcp_input+0x5ae>
 80120b4:	4b6f      	ldr	r3, [pc, #444]	; (8012274 <tcp_input+0x760>)
 80120b6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80120ba:	496f      	ldr	r1, [pc, #444]	; (8012278 <tcp_input+0x764>)
 80120bc:	486f      	ldr	r0, [pc, #444]	; (801227c <tcp_input+0x768>)
 80120be:	f005 fe21 	bl	8017d04 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80120c2:	69fb      	ldr	r3, [r7, #28]
 80120c4:	7e9b      	ldrb	r3, [r3, #26]
 80120c6:	f003 0310 	and.w	r3, r3, #16
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d008      	beq.n	80120e0 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80120ce:	4b68      	ldr	r3, [pc, #416]	; (8012270 <tcp_input+0x75c>)
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7fe f8ca 	bl	801026c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80120d8:	69f8      	ldr	r0, [r7, #28]
 80120da:	f7fe fdc5 	bl	8010c68 <tcp_abort>
            goto aborted;
 80120de:	e078      	b.n	80121d2 <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80120e0:	69fb      	ldr	r3, [r7, #28]
 80120e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d00c      	beq.n	8012104 <tcp_input+0x5f0>
 80120ea:	69fb      	ldr	r3, [r7, #28]
 80120ec:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80120f0:	69fb      	ldr	r3, [r7, #28]
 80120f2:	6918      	ldr	r0, [r3, #16]
 80120f4:	4b5e      	ldr	r3, [pc, #376]	; (8012270 <tcp_input+0x75c>)
 80120f6:	681a      	ldr	r2, [r3, #0]
 80120f8:	2300      	movs	r3, #0
 80120fa:	69f9      	ldr	r1, [r7, #28]
 80120fc:	47a0      	blx	r4
 80120fe:	4603      	mov	r3, r0
 8012100:	74fb      	strb	r3, [r7, #19]
 8012102:	e008      	b.n	8012116 <tcp_input+0x602>
 8012104:	4b5a      	ldr	r3, [pc, #360]	; (8012270 <tcp_input+0x75c>)
 8012106:	681a      	ldr	r2, [r3, #0]
 8012108:	2300      	movs	r3, #0
 801210a:	69f9      	ldr	r1, [r7, #28]
 801210c:	2000      	movs	r0, #0
 801210e:	f7ff fa3a 	bl	8011586 <tcp_recv_null>
 8012112:	4603      	mov	r3, r0
 8012114:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012116:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801211a:	f113 0f0d 	cmn.w	r3, #13
 801211e:	d053      	beq.n	80121c8 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012120:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d003      	beq.n	8012130 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012128:	4b51      	ldr	r3, [pc, #324]	; (8012270 <tcp_input+0x75c>)
 801212a:	681a      	ldr	r2, [r3, #0]
 801212c:	69fb      	ldr	r3, [r7, #28]
 801212e:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012130:	4b4c      	ldr	r3, [pc, #304]	; (8012264 <tcp_input+0x750>)
 8012132:	781b      	ldrb	r3, [r3, #0]
 8012134:	f003 0320 	and.w	r3, r3, #32
 8012138:	2b00      	cmp	r3, #0
 801213a:	d030      	beq.n	801219e <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 801213c:	69fb      	ldr	r3, [r7, #28]
 801213e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012140:	2b00      	cmp	r3, #0
 8012142:	d009      	beq.n	8012158 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012144:	69fb      	ldr	r3, [r7, #28]
 8012146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012148:	7b5a      	ldrb	r2, [r3, #13]
 801214a:	69fb      	ldr	r3, [r7, #28]
 801214c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801214e:	f042 0220 	orr.w	r2, r2, #32
 8012152:	b2d2      	uxtb	r2, r2
 8012154:	735a      	strb	r2, [r3, #13]
 8012156:	e022      	b.n	801219e <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012158:	69fb      	ldr	r3, [r7, #28]
 801215a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801215c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012160:	d005      	beq.n	801216e <tcp_input+0x65a>
              pcb->rcv_wnd++;
 8012162:	69fb      	ldr	r3, [r7, #28]
 8012164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012166:	3301      	adds	r3, #1
 8012168:	b29a      	uxth	r2, r3
 801216a:	69fb      	ldr	r3, [r7, #28]
 801216c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801216e:	69fb      	ldr	r3, [r7, #28]
 8012170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012174:	2b00      	cmp	r3, #0
 8012176:	d00b      	beq.n	8012190 <tcp_input+0x67c>
 8012178:	69fb      	ldr	r3, [r7, #28]
 801217a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801217e:	69fb      	ldr	r3, [r7, #28]
 8012180:	6918      	ldr	r0, [r3, #16]
 8012182:	2300      	movs	r3, #0
 8012184:	2200      	movs	r2, #0
 8012186:	69f9      	ldr	r1, [r7, #28]
 8012188:	47a0      	blx	r4
 801218a:	4603      	mov	r3, r0
 801218c:	74fb      	strb	r3, [r7, #19]
 801218e:	e001      	b.n	8012194 <tcp_input+0x680>
 8012190:	2300      	movs	r3, #0
 8012192:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012194:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012198:	f113 0f0d 	cmn.w	r3, #13
 801219c:	d016      	beq.n	80121cc <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801219e:	4b30      	ldr	r3, [pc, #192]	; (8012260 <tcp_input+0x74c>)
 80121a0:	2200      	movs	r2, #0
 80121a2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80121a4:	69f8      	ldr	r0, [r7, #28]
 80121a6:	f000 f879 	bl	801229c <tcp_input_delayed_close>
 80121aa:	4603      	mov	r3, r0
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d10f      	bne.n	80121d0 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80121b0:	69f8      	ldr	r0, [r7, #28]
 80121b2:	f002 f963 	bl	801447c <tcp_output>
 80121b6:	e00c      	b.n	80121d2 <tcp_input+0x6be>
        goto aborted;
 80121b8:	bf00      	nop
 80121ba:	e00a      	b.n	80121d2 <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80121bc:	bf00      	nop
 80121be:	e008      	b.n	80121d2 <tcp_input+0x6be>
              goto aborted;
 80121c0:	bf00      	nop
 80121c2:	e006      	b.n	80121d2 <tcp_input+0x6be>
          goto aborted;
 80121c4:	bf00      	nop
 80121c6:	e004      	b.n	80121d2 <tcp_input+0x6be>
            goto aborted;
 80121c8:	bf00      	nop
 80121ca:	e002      	b.n	80121d2 <tcp_input+0x6be>
              goto aborted;
 80121cc:	bf00      	nop
 80121ce:	e000      	b.n	80121d2 <tcp_input+0x6be>
          goto aborted;
 80121d0:	bf00      	nop
    tcp_input_pcb = NULL;
 80121d2:	4b23      	ldr	r3, [pc, #140]	; (8012260 <tcp_input+0x74c>)
 80121d4:	2200      	movs	r2, #0
 80121d6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80121d8:	4b25      	ldr	r3, [pc, #148]	; (8012270 <tcp_input+0x75c>)
 80121da:	2200      	movs	r2, #0
 80121dc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 80121de:	4b28      	ldr	r3, [pc, #160]	; (8012280 <tcp_input+0x76c>)
 80121e0:	685b      	ldr	r3, [r3, #4]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d037      	beq.n	8012256 <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 80121e6:	4b26      	ldr	r3, [pc, #152]	; (8012280 <tcp_input+0x76c>)
 80121e8:	685b      	ldr	r3, [r3, #4]
 80121ea:	4618      	mov	r0, r3
 80121ec:	f7fe f83e 	bl	801026c <pbuf_free>
      inseg.p = NULL;
 80121f0:	4b23      	ldr	r3, [pc, #140]	; (8012280 <tcp_input+0x76c>)
 80121f2:	2200      	movs	r2, #0
 80121f4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80121f6:	e02e      	b.n	8012256 <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80121f8:	4b22      	ldr	r3, [pc, #136]	; (8012284 <tcp_input+0x770>)
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	899b      	ldrh	r3, [r3, #12]
 80121fe:	b29b      	uxth	r3, r3
 8012200:	4618      	mov	r0, r3
 8012202:	f7fc fd1b 	bl	800ec3c <lwip_htons>
 8012206:	4603      	mov	r3, r0
 8012208:	f003 0304 	and.w	r3, r3, #4
 801220c:	2b00      	cmp	r3, #0
 801220e:	d115      	bne.n	801223c <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012210:	4b1d      	ldr	r3, [pc, #116]	; (8012288 <tcp_input+0x774>)
 8012212:	6818      	ldr	r0, [r3, #0]
 8012214:	4b1d      	ldr	r3, [pc, #116]	; (801228c <tcp_input+0x778>)
 8012216:	881b      	ldrh	r3, [r3, #0]
 8012218:	461a      	mov	r2, r3
 801221a:	4b1d      	ldr	r3, [pc, #116]	; (8012290 <tcp_input+0x77c>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012220:	4b18      	ldr	r3, [pc, #96]	; (8012284 <tcp_input+0x770>)
 8012222:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012224:	885b      	ldrh	r3, [r3, #2]
 8012226:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012228:	4a16      	ldr	r2, [pc, #88]	; (8012284 <tcp_input+0x770>)
 801222a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801222c:	8812      	ldrh	r2, [r2, #0]
 801222e:	b292      	uxth	r2, r2
 8012230:	9201      	str	r2, [sp, #4]
 8012232:	9300      	str	r3, [sp, #0]
 8012234:	4b17      	ldr	r3, [pc, #92]	; (8012294 <tcp_input+0x780>)
 8012236:	4a18      	ldr	r2, [pc, #96]	; (8012298 <tcp_input+0x784>)
 8012238:	f002 fbaa 	bl	8014990 <tcp_rst>
    pbuf_free(p);
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	f7fe f815 	bl	801026c <pbuf_free>
  return;
 8012242:	e008      	b.n	8012256 <tcp_input+0x742>
    goto dropped;
 8012244:	bf00      	nop
 8012246:	e002      	b.n	801224e <tcp_input+0x73a>
dropped:
 8012248:	bf00      	nop
 801224a:	e000      	b.n	801224e <tcp_input+0x73a>
      goto dropped;
 801224c:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	f7fe f80c 	bl	801026c <pbuf_free>
 8012254:	e000      	b.n	8012258 <tcp_input+0x744>
  return;
 8012256:	bf00      	nop
}
 8012258:	3724      	adds	r7, #36	; 0x24
 801225a:	46bd      	mov	sp, r7
 801225c:	bd90      	pop	{r4, r7, pc}
 801225e:	bf00      	nop
 8012260:	24024e60 	.word	0x24024e60
 8012264:	2402182d 	.word	0x2402182d
 8012268:	24024e4c 	.word	0x24024e4c
 801226c:	24021828 	.word	0x24021828
 8012270:	24021830 	.word	0x24021830
 8012274:	08019c70 	.word	0x08019c70
 8012278:	08019e0c 	.word	0x08019e0c
 801227c:	08019cb4 	.word	0x08019cb4
 8012280:	24021800 	.word	0x24021800
 8012284:	24021810 	.word	0x24021810
 8012288:	24021824 	.word	0x24021824
 801228c:	2402182a 	.word	0x2402182a
 8012290:	24021820 	.word	0x24021820
 8012294:	24021c64 	.word	0x24021c64
 8012298:	24021c68 	.word	0x24021c68

0801229c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b082      	sub	sp, #8
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 80122a4:	4b14      	ldr	r3, [pc, #80]	; (80122f8 <tcp_input_delayed_close+0x5c>)
 80122a6:	781b      	ldrb	r3, [r3, #0]
 80122a8:	f003 0310 	and.w	r3, r3, #16
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d01d      	beq.n	80122ec <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	7e9b      	ldrb	r3, [r3, #26]
 80122b4:	f003 0310 	and.w	r3, r3, #16
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d10d      	bne.n	80122d8 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d008      	beq.n	80122d8 <tcp_input_delayed_close+0x3c>
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80122cc:	687a      	ldr	r2, [r7, #4]
 80122ce:	6912      	ldr	r2, [r2, #16]
 80122d0:	f06f 010e 	mvn.w	r1, #14
 80122d4:	4610      	mov	r0, r2
 80122d6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80122d8:	6879      	ldr	r1, [r7, #4]
 80122da:	4808      	ldr	r0, [pc, #32]	; (80122fc <tcp_input_delayed_close+0x60>)
 80122dc:	f7ff fb00 	bl	80118e0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80122e0:	6879      	ldr	r1, [r7, #4]
 80122e2:	2001      	movs	r0, #1
 80122e4:	f7fd f9e6 	bl	800f6b4 <memp_free>
    return 1;
 80122e8:	2301      	movs	r3, #1
 80122ea:	e000      	b.n	80122ee <tcp_input_delayed_close+0x52>
  }
  return 0;
 80122ec:	2300      	movs	r3, #0
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	3708      	adds	r7, #8
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}
 80122f6:	bf00      	nop
 80122f8:	2402182d 	.word	0x2402182d
 80122fc:	24024e4c 	.word	0x24024e4c

08012300 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b088      	sub	sp, #32
 8012304:	af02      	add	r7, sp, #8
 8012306:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012308:	4b64      	ldr	r3, [pc, #400]	; (801249c <tcp_listen_input+0x19c>)
 801230a:	781b      	ldrb	r3, [r3, #0]
 801230c:	f003 0304 	and.w	r3, r3, #4
 8012310:	2b00      	cmp	r3, #0
 8012312:	f040 80bc 	bne.w	801248e <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012316:	4b61      	ldr	r3, [pc, #388]	; (801249c <tcp_listen_input+0x19c>)
 8012318:	781b      	ldrb	r3, [r3, #0]
 801231a:	f003 0310 	and.w	r3, r3, #16
 801231e:	2b00      	cmp	r3, #0
 8012320:	d016      	beq.n	8012350 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012322:	4b5f      	ldr	r3, [pc, #380]	; (80124a0 <tcp_listen_input+0x1a0>)
 8012324:	6818      	ldr	r0, [r3, #0]
 8012326:	4b5f      	ldr	r3, [pc, #380]	; (80124a4 <tcp_listen_input+0x1a4>)
 8012328:	881b      	ldrh	r3, [r3, #0]
 801232a:	461a      	mov	r2, r3
 801232c:	4b5e      	ldr	r3, [pc, #376]	; (80124a8 <tcp_listen_input+0x1a8>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012332:	4b5e      	ldr	r3, [pc, #376]	; (80124ac <tcp_listen_input+0x1ac>)
 8012334:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012336:	885b      	ldrh	r3, [r3, #2]
 8012338:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801233a:	4a5c      	ldr	r2, [pc, #368]	; (80124ac <tcp_listen_input+0x1ac>)
 801233c:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801233e:	8812      	ldrh	r2, [r2, #0]
 8012340:	b292      	uxth	r2, r2
 8012342:	9201      	str	r2, [sp, #4]
 8012344:	9300      	str	r3, [sp, #0]
 8012346:	4b5a      	ldr	r3, [pc, #360]	; (80124b0 <tcp_listen_input+0x1b0>)
 8012348:	4a5a      	ldr	r2, [pc, #360]	; (80124b4 <tcp_listen_input+0x1b4>)
 801234a:	f002 fb21 	bl	8014990 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801234e:	e0a0      	b.n	8012492 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 8012350:	4b52      	ldr	r3, [pc, #328]	; (801249c <tcp_listen_input+0x19c>)
 8012352:	781b      	ldrb	r3, [r3, #0]
 8012354:	f003 0302 	and.w	r3, r3, #2
 8012358:	2b00      	cmp	r3, #0
 801235a:	f000 809a 	beq.w	8012492 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	7d5b      	ldrb	r3, [r3, #21]
 8012362:	4618      	mov	r0, r3
 8012364:	f7ff f9ee 	bl	8011744 <tcp_alloc>
 8012368:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801236a:	697b      	ldr	r3, [r7, #20]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d111      	bne.n	8012394 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	699b      	ldr	r3, [r3, #24]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d00a      	beq.n	801238e <tcp_listen_input+0x8e>
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	699b      	ldr	r3, [r3, #24]
 801237c:	687a      	ldr	r2, [r7, #4]
 801237e:	6910      	ldr	r0, [r2, #16]
 8012380:	f04f 32ff 	mov.w	r2, #4294967295
 8012384:	2100      	movs	r1, #0
 8012386:	4798      	blx	r3
 8012388:	4603      	mov	r3, r0
 801238a:	73bb      	strb	r3, [r7, #14]
      return;
 801238c:	e082      	b.n	8012494 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801238e:	23f0      	movs	r3, #240	; 0xf0
 8012390:	73bb      	strb	r3, [r7, #14]
      return;
 8012392:	e07f      	b.n	8012494 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012394:	4b48      	ldr	r3, [pc, #288]	; (80124b8 <tcp_listen_input+0x1b8>)
 8012396:	695a      	ldr	r2, [r3, #20]
 8012398:	697b      	ldr	r3, [r7, #20]
 801239a:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801239c:	4b46      	ldr	r3, [pc, #280]	; (80124b8 <tcp_listen_input+0x1b8>)
 801239e:	691a      	ldr	r2, [r3, #16]
 80123a0:	697b      	ldr	r3, [r7, #20]
 80123a2:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	8ada      	ldrh	r2, [r3, #22]
 80123a8:	697b      	ldr	r3, [r7, #20]
 80123aa:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80123ac:	4b3f      	ldr	r3, [pc, #252]	; (80124ac <tcp_listen_input+0x1ac>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	881b      	ldrh	r3, [r3, #0]
 80123b2:	b29a      	uxth	r2, r3
 80123b4:	697b      	ldr	r3, [r7, #20]
 80123b6:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80123b8:	697b      	ldr	r3, [r7, #20]
 80123ba:	2203      	movs	r2, #3
 80123bc:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80123be:	4b3a      	ldr	r3, [pc, #232]	; (80124a8 <tcp_listen_input+0x1a8>)
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	1c5a      	adds	r2, r3, #1
 80123c4:	697b      	ldr	r3, [r7, #20]
 80123c6:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80123c8:	697b      	ldr	r3, [r7, #20]
 80123ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80123cc:	697b      	ldr	r3, [r7, #20]
 80123ce:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80123d0:	6978      	ldr	r0, [r7, #20]
 80123d2:	f7ff fb01 	bl	80119d8 <tcp_next_iss>
 80123d6:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80123d8:	697b      	ldr	r3, [r7, #20]
 80123da:	693a      	ldr	r2, [r7, #16]
 80123dc:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 80123de:	697b      	ldr	r3, [r7, #20]
 80123e0:	693a      	ldr	r2, [r7, #16]
 80123e2:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 80123e4:	697b      	ldr	r3, [r7, #20]
 80123e6:	693a      	ldr	r2, [r7, #16]
 80123e8:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80123ea:	697b      	ldr	r3, [r7, #20]
 80123ec:	693a      	ldr	r2, [r7, #16]
 80123ee:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80123f0:	4b2d      	ldr	r3, [pc, #180]	; (80124a8 <tcp_listen_input+0x1a8>)
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	1e5a      	subs	r2, r3, #1
 80123f6:	697b      	ldr	r3, [r7, #20]
 80123f8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	691a      	ldr	r2, [r3, #16]
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012402:	697b      	ldr	r3, [r7, #20]
 8012404:	687a      	ldr	r2, [r7, #4]
 8012406:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	7a1b      	ldrb	r3, [r3, #8]
 801240c:	f003 030c 	and.w	r3, r3, #12
 8012410:	b2da      	uxtb	r2, r3
 8012412:	697b      	ldr	r3, [r7, #20]
 8012414:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012416:	4b29      	ldr	r3, [pc, #164]	; (80124bc <tcp_listen_input+0x1bc>)
 8012418:	681a      	ldr	r2, [r3, #0]
 801241a:	697b      	ldr	r3, [r7, #20]
 801241c:	60da      	str	r2, [r3, #12]
 801241e:	4a27      	ldr	r2, [pc, #156]	; (80124bc <tcp_listen_input+0x1bc>)
 8012420:	697b      	ldr	r3, [r7, #20]
 8012422:	6013      	str	r3, [r2, #0]
 8012424:	f002 fd06 	bl	8014e34 <tcp_timer_needed>
 8012428:	4b25      	ldr	r3, [pc, #148]	; (80124c0 <tcp_listen_input+0x1c0>)
 801242a:	2201      	movs	r2, #1
 801242c:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801242e:	6978      	ldr	r0, [r7, #20]
 8012430:	f001 fd14 	bl	8013e5c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012434:	4b1d      	ldr	r3, [pc, #116]	; (80124ac <tcp_listen_input+0x1ac>)
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	89db      	ldrh	r3, [r3, #14]
 801243a:	b29a      	uxth	r2, r3
 801243c:	697b      	ldr	r3, [r7, #20]
 801243e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012448:	697b      	ldr	r3, [r7, #20]
 801244a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801244e:	697b      	ldr	r3, [r7, #20]
 8012450:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012452:	697b      	ldr	r3, [r7, #20]
 8012454:	3304      	adds	r3, #4
 8012456:	4619      	mov	r1, r3
 8012458:	4610      	mov	r0, r2
 801245a:	f7ff fad5 	bl	8011a08 <tcp_eff_send_mss_impl>
 801245e:	4603      	mov	r3, r0
 8012460:	461a      	mov	r2, r3
 8012462:	697b      	ldr	r3, [r7, #20]
 8012464:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012466:	2112      	movs	r1, #18
 8012468:	6978      	ldr	r0, [r7, #20]
 801246a:	f001 feaf 	bl	80141cc <tcp_enqueue_flags>
 801246e:	4603      	mov	r3, r0
 8012470:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d004      	beq.n	8012484 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 801247a:	2100      	movs	r1, #0
 801247c:	6978      	ldr	r0, [r7, #20]
 801247e:	f7fe fb41 	bl	8010b04 <tcp_abandon>
      return;
 8012482:	e007      	b.n	8012494 <tcp_listen_input+0x194>
    tcp_output(npcb);
 8012484:	6978      	ldr	r0, [r7, #20]
 8012486:	f001 fff9 	bl	801447c <tcp_output>
  return;
 801248a:	bf00      	nop
 801248c:	e001      	b.n	8012492 <tcp_listen_input+0x192>
    return;
 801248e:	bf00      	nop
 8012490:	e000      	b.n	8012494 <tcp_listen_input+0x194>
  return;
 8012492:	bf00      	nop
}
 8012494:	3718      	adds	r7, #24
 8012496:	46bd      	mov	sp, r7
 8012498:	bd80      	pop	{r7, pc}
 801249a:	bf00      	nop
 801249c:	2402182c 	.word	0x2402182c
 80124a0:	24021824 	.word	0x24021824
 80124a4:	2402182a 	.word	0x2402182a
 80124a8:	24021820 	.word	0x24021820
 80124ac:	24021810 	.word	0x24021810
 80124b0:	24021c64 	.word	0x24021c64
 80124b4:	24021c68 	.word	0x24021c68
 80124b8:	24021c54 	.word	0x24021c54
 80124bc:	24024e4c 	.word	0x24024e4c
 80124c0:	24024e48 	.word	0x24024e48

080124c4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b084      	sub	sp, #16
 80124c8:	af02      	add	r7, sp, #8
 80124ca:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80124cc:	4b29      	ldr	r3, [pc, #164]	; (8012574 <tcp_timewait_input+0xb0>)
 80124ce:	781b      	ldrb	r3, [r3, #0]
 80124d0:	f003 0304 	and.w	r3, r3, #4
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d147      	bne.n	8012568 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80124d8:	4b26      	ldr	r3, [pc, #152]	; (8012574 <tcp_timewait_input+0xb0>)
 80124da:	781b      	ldrb	r3, [r3, #0]
 80124dc:	f003 0302 	and.w	r3, r3, #2
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d027      	beq.n	8012534 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80124e4:	4b24      	ldr	r3, [pc, #144]	; (8012578 <tcp_timewait_input+0xb4>)
 80124e6:	681a      	ldr	r2, [r3, #0]
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124ec:	1ad3      	subs	r3, r2, r3
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	db2a      	blt.n	8012548 <tcp_timewait_input+0x84>
 80124f2:	4b21      	ldr	r3, [pc, #132]	; (8012578 <tcp_timewait_input+0xb4>)
 80124f4:	681a      	ldr	r2, [r3, #0]
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124fa:	6879      	ldr	r1, [r7, #4]
 80124fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80124fe:	440b      	add	r3, r1
 8012500:	1ad3      	subs	r3, r2, r3
 8012502:	2b00      	cmp	r3, #0
 8012504:	dc20      	bgt.n	8012548 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012506:	4b1d      	ldr	r3, [pc, #116]	; (801257c <tcp_timewait_input+0xb8>)
 8012508:	6818      	ldr	r0, [r3, #0]
 801250a:	4b1d      	ldr	r3, [pc, #116]	; (8012580 <tcp_timewait_input+0xbc>)
 801250c:	881b      	ldrh	r3, [r3, #0]
 801250e:	461a      	mov	r2, r3
 8012510:	4b19      	ldr	r3, [pc, #100]	; (8012578 <tcp_timewait_input+0xb4>)
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012516:	4b1b      	ldr	r3, [pc, #108]	; (8012584 <tcp_timewait_input+0xc0>)
 8012518:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801251a:	885b      	ldrh	r3, [r3, #2]
 801251c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801251e:	4a19      	ldr	r2, [pc, #100]	; (8012584 <tcp_timewait_input+0xc0>)
 8012520:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012522:	8812      	ldrh	r2, [r2, #0]
 8012524:	b292      	uxth	r2, r2
 8012526:	9201      	str	r2, [sp, #4]
 8012528:	9300      	str	r3, [sp, #0]
 801252a:	4b17      	ldr	r3, [pc, #92]	; (8012588 <tcp_timewait_input+0xc4>)
 801252c:	4a17      	ldr	r2, [pc, #92]	; (801258c <tcp_timewait_input+0xc8>)
 801252e:	f002 fa2f 	bl	8014990 <tcp_rst>
      return;
 8012532:	e01c      	b.n	801256e <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 8012534:	4b0f      	ldr	r3, [pc, #60]	; (8012574 <tcp_timewait_input+0xb0>)
 8012536:	781b      	ldrb	r3, [r3, #0]
 8012538:	f003 0301 	and.w	r3, r3, #1
 801253c:	2b00      	cmp	r3, #0
 801253e:	d003      	beq.n	8012548 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012540:	4b13      	ldr	r3, [pc, #76]	; (8012590 <tcp_timewait_input+0xcc>)
 8012542:	681a      	ldr	r2, [r3, #0]
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012548:	4b0d      	ldr	r3, [pc, #52]	; (8012580 <tcp_timewait_input+0xbc>)
 801254a:	881b      	ldrh	r3, [r3, #0]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d00d      	beq.n	801256c <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	7e9b      	ldrb	r3, [r3, #26]
 8012554:	f043 0302 	orr.w	r3, r3, #2
 8012558:	b2da      	uxtb	r2, r3
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 801255e:	6878      	ldr	r0, [r7, #4]
 8012560:	f001 ff8c 	bl	801447c <tcp_output>
  }
  return;
 8012564:	bf00      	nop
 8012566:	e001      	b.n	801256c <tcp_timewait_input+0xa8>
    return;
 8012568:	bf00      	nop
 801256a:	e000      	b.n	801256e <tcp_timewait_input+0xaa>
  return;
 801256c:	bf00      	nop
}
 801256e:	3708      	adds	r7, #8
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}
 8012574:	2402182c 	.word	0x2402182c
 8012578:	24021820 	.word	0x24021820
 801257c:	24021824 	.word	0x24021824
 8012580:	2402182a 	.word	0x2402182a
 8012584:	24021810 	.word	0x24021810
 8012588:	24021c64 	.word	0x24021c64
 801258c:	24021c68 	.word	0x24021c68
 8012590:	24024e50 	.word	0x24024e50

08012594 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b08a      	sub	sp, #40	; 0x28
 8012598:	af02      	add	r7, sp, #8
 801259a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801259c:	2300      	movs	r3, #0
 801259e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80125a0:	2300      	movs	r3, #0
 80125a2:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80125a4:	4ba4      	ldr	r3, [pc, #656]	; (8012838 <tcp_process+0x2a4>)
 80125a6:	781b      	ldrb	r3, [r3, #0]
 80125a8:	f003 0304 	and.w	r3, r3, #4
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d04e      	beq.n	801264e <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	7d1b      	ldrb	r3, [r3, #20]
 80125b4:	2b02      	cmp	r3, #2
 80125b6:	d108      	bne.n	80125ca <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80125bc:	4b9f      	ldr	r3, [pc, #636]	; (801283c <tcp_process+0x2a8>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	429a      	cmp	r2, r3
 80125c2:	d123      	bne.n	801260c <tcp_process+0x78>
        acceptable = 1;
 80125c4:	2301      	movs	r3, #1
 80125c6:	76fb      	strb	r3, [r7, #27]
 80125c8:	e020      	b.n	801260c <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80125ce:	4b9c      	ldr	r3, [pc, #624]	; (8012840 <tcp_process+0x2ac>)
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	429a      	cmp	r2, r3
 80125d4:	d102      	bne.n	80125dc <tcp_process+0x48>
        acceptable = 1;
 80125d6:	2301      	movs	r3, #1
 80125d8:	76fb      	strb	r3, [r7, #27]
 80125da:	e017      	b.n	801260c <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80125dc:	4b98      	ldr	r3, [pc, #608]	; (8012840 <tcp_process+0x2ac>)
 80125de:	681a      	ldr	r2, [r3, #0]
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125e4:	1ad3      	subs	r3, r2, r3
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	db10      	blt.n	801260c <tcp_process+0x78>
 80125ea:	4b95      	ldr	r3, [pc, #596]	; (8012840 <tcp_process+0x2ac>)
 80125ec:	681a      	ldr	r2, [r3, #0]
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125f2:	6879      	ldr	r1, [r7, #4]
 80125f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80125f6:	440b      	add	r3, r1
 80125f8:	1ad3      	subs	r3, r2, r3
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	dc06      	bgt.n	801260c <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	7e9b      	ldrb	r3, [r3, #26]
 8012602:	f043 0302 	orr.w	r3, r3, #2
 8012606:	b2da      	uxtb	r2, r3
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801260c:	7efb      	ldrb	r3, [r7, #27]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d01b      	beq.n	801264a <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	7d1b      	ldrb	r3, [r3, #20]
 8012616:	2b00      	cmp	r3, #0
 8012618:	d106      	bne.n	8012628 <tcp_process+0x94>
 801261a:	4b8a      	ldr	r3, [pc, #552]	; (8012844 <tcp_process+0x2b0>)
 801261c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8012620:	4989      	ldr	r1, [pc, #548]	; (8012848 <tcp_process+0x2b4>)
 8012622:	488a      	ldr	r0, [pc, #552]	; (801284c <tcp_process+0x2b8>)
 8012624:	f005 fb6e 	bl	8017d04 <iprintf>
      recv_flags |= TF_RESET;
 8012628:	4b89      	ldr	r3, [pc, #548]	; (8012850 <tcp_process+0x2bc>)
 801262a:	781b      	ldrb	r3, [r3, #0]
 801262c:	f043 0308 	orr.w	r3, r3, #8
 8012630:	b2da      	uxtb	r2, r3
 8012632:	4b87      	ldr	r3, [pc, #540]	; (8012850 <tcp_process+0x2bc>)
 8012634:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	7e9b      	ldrb	r3, [r3, #26]
 801263a:	f023 0301 	bic.w	r3, r3, #1
 801263e:	b2da      	uxtb	r2, r3
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8012644:	f06f 030d 	mvn.w	r3, #13
 8012648:	e34d      	b.n	8012ce6 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 801264a:	2300      	movs	r3, #0
 801264c:	e34b      	b.n	8012ce6 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801264e:	4b7a      	ldr	r3, [pc, #488]	; (8012838 <tcp_process+0x2a4>)
 8012650:	781b      	ldrb	r3, [r3, #0]
 8012652:	f003 0302 	and.w	r3, r3, #2
 8012656:	2b00      	cmp	r3, #0
 8012658:	d010      	beq.n	801267c <tcp_process+0xe8>
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	7d1b      	ldrb	r3, [r3, #20]
 801265e:	2b02      	cmp	r3, #2
 8012660:	d00c      	beq.n	801267c <tcp_process+0xe8>
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	7d1b      	ldrb	r3, [r3, #20]
 8012666:	2b03      	cmp	r3, #3
 8012668:	d008      	beq.n	801267c <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	7e9b      	ldrb	r3, [r3, #26]
 801266e:	f043 0302 	orr.w	r3, r3, #2
 8012672:	b2da      	uxtb	r2, r3
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8012678:	2300      	movs	r3, #0
 801267a:	e334      	b.n	8012ce6 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	7e9b      	ldrb	r3, [r3, #26]
 8012680:	f003 0310 	and.w	r3, r3, #16
 8012684:	2b00      	cmp	r3, #0
 8012686:	d103      	bne.n	8012690 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012688:	4b72      	ldr	r3, [pc, #456]	; (8012854 <tcp_process+0x2c0>)
 801268a:	681a      	ldr	r2, [r3, #0]
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	2200      	movs	r2, #0
 8012694:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

  tcp_parseopt(pcb);
 8012698:	6878      	ldr	r0, [r7, #4]
 801269a:	f001 fbdf 	bl	8013e5c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	7d1b      	ldrb	r3, [r3, #20]
 80126a2:	3b02      	subs	r3, #2
 80126a4:	2b07      	cmp	r3, #7
 80126a6:	f200 830e 	bhi.w	8012cc6 <tcp_process+0x732>
 80126aa:	a201      	add	r2, pc, #4	; (adr r2, 80126b0 <tcp_process+0x11c>)
 80126ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126b0:	080126d1 	.word	0x080126d1
 80126b4:	080128c9 	.word	0x080128c9
 80126b8:	08012a21 	.word	0x08012a21
 80126bc:	08012a4b 	.word	0x08012a4b
 80126c0:	08012b75 	.word	0x08012b75
 80126c4:	08012a21 	.word	0x08012a21
 80126c8:	08012c01 	.word	0x08012c01
 80126cc:	08012c91 	.word	0x08012c91
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80126d0:	4b59      	ldr	r3, [pc, #356]	; (8012838 <tcp_process+0x2a4>)
 80126d2:	781b      	ldrb	r3, [r3, #0]
 80126d4:	f003 0310 	and.w	r3, r3, #16
 80126d8:	2b00      	cmp	r3, #0
 80126da:	f000 80cb 	beq.w	8012874 <tcp_process+0x2e0>
 80126de:	4b56      	ldr	r3, [pc, #344]	; (8012838 <tcp_process+0x2a4>)
 80126e0:	781b      	ldrb	r3, [r3, #0]
 80126e2:	f003 0302 	and.w	r3, r3, #2
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	f000 80c4 	beq.w	8012874 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80126f0:	1c5a      	adds	r2, r3, #1
 80126f2:	4b52      	ldr	r3, [pc, #328]	; (801283c <tcp_process+0x2a8>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	429a      	cmp	r2, r3
 80126f8:	f040 80bc 	bne.w	8012874 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 80126fc:	4b50      	ldr	r3, [pc, #320]	; (8012840 <tcp_process+0x2ac>)
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	1c5a      	adds	r2, r3, #1
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 801270e:	4b4b      	ldr	r3, [pc, #300]	; (801283c <tcp_process+0x2a8>)
 8012710:	681a      	ldr	r2, [r3, #0]
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8012716:	4b50      	ldr	r3, [pc, #320]	; (8012858 <tcp_process+0x2c4>)
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	89db      	ldrh	r3, [r3, #14]
 801271c:	b29a      	uxth	r2, r3
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012730:	4b43      	ldr	r3, [pc, #268]	; (8012840 <tcp_process+0x2ac>)
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	1e5a      	subs	r2, r3, #1
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	2204      	movs	r2, #4
 801273e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	3304      	adds	r3, #4
 8012748:	4619      	mov	r1, r3
 801274a:	4610      	mov	r0, r2
 801274c:	f7ff f95c 	bl	8011a08 <tcp_eff_send_mss_impl>
 8012750:	4603      	mov	r3, r0
 8012752:	461a      	mov	r2, r3
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801275c:	005b      	lsls	r3, r3, #1
 801275e:	f241 121c 	movw	r2, #4380	; 0x111c
 8012762:	429a      	cmp	r2, r3
 8012764:	bf38      	it	cc
 8012766:	461a      	movcc	r2, r3
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801276c:	009b      	lsls	r3, r3, #2
 801276e:	4293      	cmp	r3, r2
 8012770:	bf28      	it	cs
 8012772:	4613      	movcs	r3, r2
 8012774:	b29a      	uxth	r2, r3
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012782:	2b00      	cmp	r3, #0
 8012784:	d106      	bne.n	8012794 <tcp_process+0x200>
 8012786:	4b2f      	ldr	r3, [pc, #188]	; (8012844 <tcp_process+0x2b0>)
 8012788:	f240 321a 	movw	r2, #794	; 0x31a
 801278c:	4933      	ldr	r1, [pc, #204]	; (801285c <tcp_process+0x2c8>)
 801278e:	482f      	ldr	r0, [pc, #188]	; (801284c <tcp_process+0x2b8>)
 8012790:	f005 fab8 	bl	8017d04 <iprintf>
      --pcb->snd_queuelen;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801279a:	3b01      	subs	r3, #1
 801279c:	b29a      	uxth	r2, r3
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127a8:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 80127aa:	69fb      	ldr	r3, [r7, #28]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d111      	bne.n	80127d4 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80127b4:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 80127b6:	69fb      	ldr	r3, [r7, #28]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d106      	bne.n	80127ca <tcp_process+0x236>
 80127bc:	4b21      	ldr	r3, [pc, #132]	; (8012844 <tcp_process+0x2b0>)
 80127be:	f240 3222 	movw	r2, #802	; 0x322
 80127c2:	4927      	ldr	r1, [pc, #156]	; (8012860 <tcp_process+0x2cc>)
 80127c4:	4821      	ldr	r0, [pc, #132]	; (801284c <tcp_process+0x2b8>)
 80127c6:	f005 fa9d 	bl	8017d04 <iprintf>
        pcb->unsent = rseg->next;
 80127ca:	69fb      	ldr	r3, [r7, #28]
 80127cc:	681a      	ldr	r2, [r3, #0]
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	669a      	str	r2, [r3, #104]	; 0x68
 80127d2:	e003      	b.n	80127dc <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 80127d4:	69fb      	ldr	r3, [r7, #28]
 80127d6:	681a      	ldr	r2, [r3, #0]
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 80127dc:	69f8      	ldr	r0, [r7, #28]
 80127de:	f7fe fe9e 	bl	801151e <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d104      	bne.n	80127f4 <tcp_process+0x260>
        pcb->rtime = -1;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127f0:	861a      	strh	r2, [r3, #48]	; 0x30
 80127f2:	e006      	b.n	8012802 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	2200      	movs	r2, #0
 80127f8:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	2200      	movs	r2, #0
 80127fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012808:	2b00      	cmp	r3, #0
 801280a:	d00a      	beq.n	8012822 <tcp_process+0x28e>
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012812:	687a      	ldr	r2, [r7, #4]
 8012814:	6910      	ldr	r0, [r2, #16]
 8012816:	2200      	movs	r2, #0
 8012818:	6879      	ldr	r1, [r7, #4]
 801281a:	4798      	blx	r3
 801281c:	4603      	mov	r3, r0
 801281e:	76bb      	strb	r3, [r7, #26]
 8012820:	e001      	b.n	8012826 <tcp_process+0x292>
 8012822:	2300      	movs	r3, #0
 8012824:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8012826:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801282a:	f113 0f0d 	cmn.w	r3, #13
 801282e:	d119      	bne.n	8012864 <tcp_process+0x2d0>
        return ERR_ABRT;
 8012830:	f06f 030c 	mvn.w	r3, #12
 8012834:	e257      	b.n	8012ce6 <tcp_process+0x752>
 8012836:	bf00      	nop
 8012838:	2402182c 	.word	0x2402182c
 801283c:	24021824 	.word	0x24021824
 8012840:	24021820 	.word	0x24021820
 8012844:	08019c70 	.word	0x08019c70
 8012848:	08019e28 	.word	0x08019e28
 801284c:	08019cb4 	.word	0x08019cb4
 8012850:	2402182d 	.word	0x2402182d
 8012854:	24024e50 	.word	0x24024e50
 8012858:	24021810 	.word	0x24021810
 801285c:	08019e48 	.word	0x08019e48
 8012860:	08019e60 	.word	0x08019e60
      }
      tcp_ack_now(pcb);
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	7e9b      	ldrb	r3, [r3, #26]
 8012868:	f043 0302 	orr.w	r3, r3, #2
 801286c:	b2da      	uxtb	r2, r3
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8012872:	e22a      	b.n	8012cca <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 8012874:	4b9f      	ldr	r3, [pc, #636]	; (8012af4 <tcp_process+0x560>)
 8012876:	781b      	ldrb	r3, [r3, #0]
 8012878:	f003 0310 	and.w	r3, r3, #16
 801287c:	2b00      	cmp	r3, #0
 801287e:	f000 8224 	beq.w	8012cca <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012882:	4b9d      	ldr	r3, [pc, #628]	; (8012af8 <tcp_process+0x564>)
 8012884:	6818      	ldr	r0, [r3, #0]
 8012886:	4b9d      	ldr	r3, [pc, #628]	; (8012afc <tcp_process+0x568>)
 8012888:	881b      	ldrh	r3, [r3, #0]
 801288a:	461a      	mov	r2, r3
 801288c:	4b9c      	ldr	r3, [pc, #624]	; (8012b00 <tcp_process+0x56c>)
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012892:	4b9c      	ldr	r3, [pc, #624]	; (8012b04 <tcp_process+0x570>)
 8012894:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8012896:	885b      	ldrh	r3, [r3, #2]
 8012898:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801289a:	4a9a      	ldr	r2, [pc, #616]	; (8012b04 <tcp_process+0x570>)
 801289c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801289e:	8812      	ldrh	r2, [r2, #0]
 80128a0:	b292      	uxth	r2, r2
 80128a2:	9201      	str	r2, [sp, #4]
 80128a4:	9300      	str	r3, [sp, #0]
 80128a6:	4b98      	ldr	r3, [pc, #608]	; (8012b08 <tcp_process+0x574>)
 80128a8:	4a98      	ldr	r2, [pc, #608]	; (8012b0c <tcp_process+0x578>)
 80128aa:	f002 f871 	bl	8014990 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80128b4:	2b05      	cmp	r3, #5
 80128b6:	f200 8208 	bhi.w	8012cca <tcp_process+0x736>
        pcb->rtime = 0;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	2200      	movs	r2, #0
 80128be:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f002 f8db 	bl	8014a7c <tcp_rexmit_rto>
    break;
 80128c6:	e200      	b.n	8012cca <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 80128c8:	4b8a      	ldr	r3, [pc, #552]	; (8012af4 <tcp_process+0x560>)
 80128ca:	781b      	ldrb	r3, [r3, #0]
 80128cc:	f003 0310 	and.w	r3, r3, #16
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	f000 8091 	beq.w	80129f8 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80128d6:	4b88      	ldr	r3, [pc, #544]	; (8012af8 <tcp_process+0x564>)
 80128d8:	681a      	ldr	r2, [r3, #0]
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128de:	1ad3      	subs	r3, r2, r3
 80128e0:	3b01      	subs	r3, #1
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	db71      	blt.n	80129ca <tcp_process+0x436>
 80128e6:	4b84      	ldr	r3, [pc, #528]	; (8012af8 <tcp_process+0x564>)
 80128e8:	681a      	ldr	r2, [r3, #0]
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80128ee:	1ad3      	subs	r3, r2, r3
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	dc6a      	bgt.n	80129ca <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	2204      	movs	r2, #4
 80128f8:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d00b      	beq.n	801291a <tcp_process+0x386>
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012906:	699b      	ldr	r3, [r3, #24]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d106      	bne.n	801291a <tcp_process+0x386>
 801290c:	4b80      	ldr	r3, [pc, #512]	; (8012b10 <tcp_process+0x57c>)
 801290e:	f240 3251 	movw	r2, #849	; 0x351
 8012912:	4980      	ldr	r1, [pc, #512]	; (8012b14 <tcp_process+0x580>)
 8012914:	4880      	ldr	r0, [pc, #512]	; (8012b18 <tcp_process+0x584>)
 8012916:	f005 f9f5 	bl	8017d04 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801291e:	2b00      	cmp	r3, #0
 8012920:	d102      	bne.n	8012928 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8012922:	23fa      	movs	r3, #250	; 0xfa
 8012924:	76bb      	strb	r3, [r7, #26]
 8012926:	e011      	b.n	801294c <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801292c:	699b      	ldr	r3, [r3, #24]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d00a      	beq.n	8012948 <tcp_process+0x3b4>
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012936:	699b      	ldr	r3, [r3, #24]
 8012938:	687a      	ldr	r2, [r7, #4]
 801293a:	6910      	ldr	r0, [r2, #16]
 801293c:	2200      	movs	r2, #0
 801293e:	6879      	ldr	r1, [r7, #4]
 8012940:	4798      	blx	r3
 8012942:	4603      	mov	r3, r0
 8012944:	76bb      	strb	r3, [r7, #26]
 8012946:	e001      	b.n	801294c <tcp_process+0x3b8>
 8012948:	23f0      	movs	r3, #240	; 0xf0
 801294a:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 801294c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d00a      	beq.n	801296a <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8012954:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012958:	f113 0f0d 	cmn.w	r3, #13
 801295c:	d002      	beq.n	8012964 <tcp_process+0x3d0>
            tcp_abort(pcb);
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	f7fe f982 	bl	8010c68 <tcp_abort>
          }
          return ERR_ABRT;
 8012964:	f06f 030c 	mvn.w	r3, #12
 8012968:	e1bd      	b.n	8012ce6 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 801296a:	6878      	ldr	r0, [r7, #4]
 801296c:	f000 fa42 	bl	8012df4 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8012970:	4b6a      	ldr	r3, [pc, #424]	; (8012b1c <tcp_process+0x588>)
 8012972:	881b      	ldrh	r3, [r3, #0]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d005      	beq.n	8012984 <tcp_process+0x3f0>
          recv_acked--;
 8012978:	4b68      	ldr	r3, [pc, #416]	; (8012b1c <tcp_process+0x588>)
 801297a:	881b      	ldrh	r3, [r3, #0]
 801297c:	3b01      	subs	r3, #1
 801297e:	b29a      	uxth	r2, r3
 8012980:	4b66      	ldr	r3, [pc, #408]	; (8012b1c <tcp_process+0x588>)
 8012982:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012988:	005b      	lsls	r3, r3, #1
 801298a:	f241 121c 	movw	r2, #4380	; 0x111c
 801298e:	429a      	cmp	r2, r3
 8012990:	bf38      	it	cc
 8012992:	461a      	movcc	r2, r3
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012998:	009b      	lsls	r3, r3, #2
 801299a:	4293      	cmp	r3, r2
 801299c:	bf28      	it	cs
 801299e:	4613      	movcs	r3, r2
 80129a0:	b29a      	uxth	r2, r3
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 80129a8:	4b5d      	ldr	r3, [pc, #372]	; (8012b20 <tcp_process+0x58c>)
 80129aa:	781b      	ldrb	r3, [r3, #0]
 80129ac:	f003 0320 	and.w	r3, r3, #32
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d034      	beq.n	8012a1e <tcp_process+0x48a>
          tcp_ack_now(pcb);
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	7e9b      	ldrb	r3, [r3, #26]
 80129b8:	f043 0302 	orr.w	r3, r3, #2
 80129bc:	b2da      	uxtb	r2, r3
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	2207      	movs	r2, #7
 80129c6:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 80129c8:	e029      	b.n	8012a1e <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80129ca:	4b4b      	ldr	r3, [pc, #300]	; (8012af8 <tcp_process+0x564>)
 80129cc:	6818      	ldr	r0, [r3, #0]
 80129ce:	4b4b      	ldr	r3, [pc, #300]	; (8012afc <tcp_process+0x568>)
 80129d0:	881b      	ldrh	r3, [r3, #0]
 80129d2:	461a      	mov	r2, r3
 80129d4:	4b4a      	ldr	r3, [pc, #296]	; (8012b00 <tcp_process+0x56c>)
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80129da:	4b4a      	ldr	r3, [pc, #296]	; (8012b04 <tcp_process+0x570>)
 80129dc:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80129de:	885b      	ldrh	r3, [r3, #2]
 80129e0:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80129e2:	4a48      	ldr	r2, [pc, #288]	; (8012b04 <tcp_process+0x570>)
 80129e4:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80129e6:	8812      	ldrh	r2, [r2, #0]
 80129e8:	b292      	uxth	r2, r2
 80129ea:	9201      	str	r2, [sp, #4]
 80129ec:	9300      	str	r3, [sp, #0]
 80129ee:	4b46      	ldr	r3, [pc, #280]	; (8012b08 <tcp_process+0x574>)
 80129f0:	4a46      	ldr	r2, [pc, #280]	; (8012b0c <tcp_process+0x578>)
 80129f2:	f001 ffcd 	bl	8014990 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 80129f6:	e16a      	b.n	8012cce <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80129f8:	4b3e      	ldr	r3, [pc, #248]	; (8012af4 <tcp_process+0x560>)
 80129fa:	781b      	ldrb	r3, [r3, #0]
 80129fc:	f003 0302 	and.w	r3, r3, #2
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	f000 8164 	beq.w	8012cce <tcp_process+0x73a>
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a0a:	1e5a      	subs	r2, r3, #1
 8012a0c:	4b3c      	ldr	r3, [pc, #240]	; (8012b00 <tcp_process+0x56c>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	429a      	cmp	r2, r3
 8012a12:	f040 815c 	bne.w	8012cce <tcp_process+0x73a>
      tcp_rexmit(pcb);
 8012a16:	6878      	ldr	r0, [r7, #4]
 8012a18:	f002 f866 	bl	8014ae8 <tcp_rexmit>
    break;
 8012a1c:	e157      	b.n	8012cce <tcp_process+0x73a>
 8012a1e:	e156      	b.n	8012cce <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	f000 f9e7 	bl	8012df4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012a26:	4b3e      	ldr	r3, [pc, #248]	; (8012b20 <tcp_process+0x58c>)
 8012a28:	781b      	ldrb	r3, [r3, #0]
 8012a2a:	f003 0320 	and.w	r3, r3, #32
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	f000 814f 	beq.w	8012cd2 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	7e9b      	ldrb	r3, [r3, #26]
 8012a38:	f043 0302 	orr.w	r3, r3, #2
 8012a3c:	b2da      	uxtb	r2, r3
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	2207      	movs	r2, #7
 8012a46:	751a      	strb	r2, [r3, #20]
    }
    break;
 8012a48:	e143      	b.n	8012cd2 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8012a4a:	6878      	ldr	r0, [r7, #4]
 8012a4c:	f000 f9d2 	bl	8012df4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8012a50:	4b33      	ldr	r3, [pc, #204]	; (8012b20 <tcp_process+0x58c>)
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	f003 0320 	and.w	r3, r3, #32
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d074      	beq.n	8012b46 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012a5c:	4b25      	ldr	r3, [pc, #148]	; (8012af4 <tcp_process+0x560>)
 8012a5e:	781b      	ldrb	r3, [r3, #0]
 8012a60:	f003 0310 	and.w	r3, r3, #16
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d063      	beq.n	8012b30 <tcp_process+0x59c>
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012a6c:	4b22      	ldr	r3, [pc, #136]	; (8012af8 <tcp_process+0x564>)
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	429a      	cmp	r2, r3
 8012a72:	d15d      	bne.n	8012b30 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d159      	bne.n	8012b30 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	7e9b      	ldrb	r3, [r3, #26]
 8012a80:	f043 0302 	orr.w	r3, r3, #2
 8012a84:	b2da      	uxtb	r2, r3
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012a8a:	6878      	ldr	r0, [r7, #4]
 8012a8c:	f7fe fee6 	bl	801185c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012a90:	4b24      	ldr	r3, [pc, #144]	; (8012b24 <tcp_process+0x590>)
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	687a      	ldr	r2, [r7, #4]
 8012a96:	429a      	cmp	r2, r3
 8012a98:	d105      	bne.n	8012aa6 <tcp_process+0x512>
 8012a9a:	4b22      	ldr	r3, [pc, #136]	; (8012b24 <tcp_process+0x590>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	68db      	ldr	r3, [r3, #12]
 8012aa0:	4a20      	ldr	r2, [pc, #128]	; (8012b24 <tcp_process+0x590>)
 8012aa2:	6013      	str	r3, [r2, #0]
 8012aa4:	e013      	b.n	8012ace <tcp_process+0x53a>
 8012aa6:	4b1f      	ldr	r3, [pc, #124]	; (8012b24 <tcp_process+0x590>)
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	617b      	str	r3, [r7, #20]
 8012aac:	e00c      	b.n	8012ac8 <tcp_process+0x534>
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	68db      	ldr	r3, [r3, #12]
 8012ab2:	687a      	ldr	r2, [r7, #4]
 8012ab4:	429a      	cmp	r2, r3
 8012ab6:	d104      	bne.n	8012ac2 <tcp_process+0x52e>
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	68da      	ldr	r2, [r3, #12]
 8012abc:	697b      	ldr	r3, [r7, #20]
 8012abe:	60da      	str	r2, [r3, #12]
 8012ac0:	e005      	b.n	8012ace <tcp_process+0x53a>
 8012ac2:	697b      	ldr	r3, [r7, #20]
 8012ac4:	68db      	ldr	r3, [r3, #12]
 8012ac6:	617b      	str	r3, [r7, #20]
 8012ac8:	697b      	ldr	r3, [r7, #20]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d1ef      	bne.n	8012aae <tcp_process+0x51a>
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	2200      	movs	r2, #0
 8012ad2:	60da      	str	r2, [r3, #12]
 8012ad4:	4b14      	ldr	r3, [pc, #80]	; (8012b28 <tcp_process+0x594>)
 8012ad6:	2201      	movs	r2, #1
 8012ad8:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	220a      	movs	r2, #10
 8012ade:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012ae0:	4b12      	ldr	r3, [pc, #72]	; (8012b2c <tcp_process+0x598>)
 8012ae2:	681a      	ldr	r2, [r3, #0]
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	60da      	str	r2, [r3, #12]
 8012ae8:	4a10      	ldr	r2, [pc, #64]	; (8012b2c <tcp_process+0x598>)
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	6013      	str	r3, [r2, #0]
 8012aee:	f002 f9a1 	bl	8014e34 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8012af2:	e0f0      	b.n	8012cd6 <tcp_process+0x742>
 8012af4:	2402182c 	.word	0x2402182c
 8012af8:	24021824 	.word	0x24021824
 8012afc:	2402182a 	.word	0x2402182a
 8012b00:	24021820 	.word	0x24021820
 8012b04:	24021810 	.word	0x24021810
 8012b08:	24021c64 	.word	0x24021c64
 8012b0c:	24021c68 	.word	0x24021c68
 8012b10:	08019c70 	.word	0x08019c70
 8012b14:	08019e74 	.word	0x08019e74
 8012b18:	08019cb4 	.word	0x08019cb4
 8012b1c:	24021828 	.word	0x24021828
 8012b20:	2402182d 	.word	0x2402182d
 8012b24:	24024e4c 	.word	0x24024e4c
 8012b28:	24024e48 	.word	0x24024e48
 8012b2c:	24024e5c 	.word	0x24024e5c
        tcp_ack_now(pcb);
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	7e9b      	ldrb	r3, [r3, #26]
 8012b34:	f043 0302 	orr.w	r3, r3, #2
 8012b38:	b2da      	uxtb	r2, r3
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	2208      	movs	r2, #8
 8012b42:	751a      	strb	r2, [r3, #20]
    break;
 8012b44:	e0c7      	b.n	8012cd6 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012b46:	4b6a      	ldr	r3, [pc, #424]	; (8012cf0 <tcp_process+0x75c>)
 8012b48:	781b      	ldrb	r3, [r3, #0]
 8012b4a:	f003 0310 	and.w	r3, r3, #16
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	f000 80c1 	beq.w	8012cd6 <tcp_process+0x742>
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012b58:	4b66      	ldr	r3, [pc, #408]	; (8012cf4 <tcp_process+0x760>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	429a      	cmp	r2, r3
 8012b5e:	f040 80ba 	bne.w	8012cd6 <tcp_process+0x742>
               pcb->unsent == NULL) {
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	f040 80b5 	bne.w	8012cd6 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	2206      	movs	r2, #6
 8012b70:	751a      	strb	r2, [r3, #20]
    break;
 8012b72:	e0b0      	b.n	8012cd6 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8012b74:	6878      	ldr	r0, [r7, #4]
 8012b76:	f000 f93d 	bl	8012df4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8012b7a:	4b5f      	ldr	r3, [pc, #380]	; (8012cf8 <tcp_process+0x764>)
 8012b7c:	781b      	ldrb	r3, [r3, #0]
 8012b7e:	f003 0320 	and.w	r3, r3, #32
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	f000 80a9 	beq.w	8012cda <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	7e9b      	ldrb	r3, [r3, #26]
 8012b8c:	f043 0302 	orr.w	r3, r3, #2
 8012b90:	b2da      	uxtb	r2, r3
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8012b96:	6878      	ldr	r0, [r7, #4]
 8012b98:	f7fe fe60 	bl	801185c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012b9c:	4b57      	ldr	r3, [pc, #348]	; (8012cfc <tcp_process+0x768>)
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	687a      	ldr	r2, [r7, #4]
 8012ba2:	429a      	cmp	r2, r3
 8012ba4:	d105      	bne.n	8012bb2 <tcp_process+0x61e>
 8012ba6:	4b55      	ldr	r3, [pc, #340]	; (8012cfc <tcp_process+0x768>)
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	68db      	ldr	r3, [r3, #12]
 8012bac:	4a53      	ldr	r2, [pc, #332]	; (8012cfc <tcp_process+0x768>)
 8012bae:	6013      	str	r3, [r2, #0]
 8012bb0:	e013      	b.n	8012bda <tcp_process+0x646>
 8012bb2:	4b52      	ldr	r3, [pc, #328]	; (8012cfc <tcp_process+0x768>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	613b      	str	r3, [r7, #16]
 8012bb8:	e00c      	b.n	8012bd4 <tcp_process+0x640>
 8012bba:	693b      	ldr	r3, [r7, #16]
 8012bbc:	68db      	ldr	r3, [r3, #12]
 8012bbe:	687a      	ldr	r2, [r7, #4]
 8012bc0:	429a      	cmp	r2, r3
 8012bc2:	d104      	bne.n	8012bce <tcp_process+0x63a>
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	68da      	ldr	r2, [r3, #12]
 8012bc8:	693b      	ldr	r3, [r7, #16]
 8012bca:	60da      	str	r2, [r3, #12]
 8012bcc:	e005      	b.n	8012bda <tcp_process+0x646>
 8012bce:	693b      	ldr	r3, [r7, #16]
 8012bd0:	68db      	ldr	r3, [r3, #12]
 8012bd2:	613b      	str	r3, [r7, #16]
 8012bd4:	693b      	ldr	r3, [r7, #16]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d1ef      	bne.n	8012bba <tcp_process+0x626>
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2200      	movs	r2, #0
 8012bde:	60da      	str	r2, [r3, #12]
 8012be0:	4b47      	ldr	r3, [pc, #284]	; (8012d00 <tcp_process+0x76c>)
 8012be2:	2201      	movs	r2, #1
 8012be4:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	220a      	movs	r2, #10
 8012bea:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8012bec:	4b45      	ldr	r3, [pc, #276]	; (8012d04 <tcp_process+0x770>)
 8012bee:	681a      	ldr	r2, [r3, #0]
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	60da      	str	r2, [r3, #12]
 8012bf4:	4a43      	ldr	r2, [pc, #268]	; (8012d04 <tcp_process+0x770>)
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	6013      	str	r3, [r2, #0]
 8012bfa:	f002 f91b 	bl	8014e34 <tcp_timer_needed>
    }
    break;
 8012bfe:	e06c      	b.n	8012cda <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8012c00:	6878      	ldr	r0, [r7, #4]
 8012c02:	f000 f8f7 	bl	8012df4 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012c06:	4b3a      	ldr	r3, [pc, #232]	; (8012cf0 <tcp_process+0x75c>)
 8012c08:	781b      	ldrb	r3, [r3, #0]
 8012c0a:	f003 0310 	and.w	r3, r3, #16
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d065      	beq.n	8012cde <tcp_process+0x74a>
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012c16:	4b37      	ldr	r3, [pc, #220]	; (8012cf4 <tcp_process+0x760>)
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	429a      	cmp	r2, r3
 8012c1c:	d15f      	bne.n	8012cde <tcp_process+0x74a>
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d15b      	bne.n	8012cde <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8012c26:	6878      	ldr	r0, [r7, #4]
 8012c28:	f7fe fe18 	bl	801185c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012c2c:	4b33      	ldr	r3, [pc, #204]	; (8012cfc <tcp_process+0x768>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	687a      	ldr	r2, [r7, #4]
 8012c32:	429a      	cmp	r2, r3
 8012c34:	d105      	bne.n	8012c42 <tcp_process+0x6ae>
 8012c36:	4b31      	ldr	r3, [pc, #196]	; (8012cfc <tcp_process+0x768>)
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	68db      	ldr	r3, [r3, #12]
 8012c3c:	4a2f      	ldr	r2, [pc, #188]	; (8012cfc <tcp_process+0x768>)
 8012c3e:	6013      	str	r3, [r2, #0]
 8012c40:	e013      	b.n	8012c6a <tcp_process+0x6d6>
 8012c42:	4b2e      	ldr	r3, [pc, #184]	; (8012cfc <tcp_process+0x768>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	60fb      	str	r3, [r7, #12]
 8012c48:	e00c      	b.n	8012c64 <tcp_process+0x6d0>
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	68db      	ldr	r3, [r3, #12]
 8012c4e:	687a      	ldr	r2, [r7, #4]
 8012c50:	429a      	cmp	r2, r3
 8012c52:	d104      	bne.n	8012c5e <tcp_process+0x6ca>
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	68da      	ldr	r2, [r3, #12]
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	60da      	str	r2, [r3, #12]
 8012c5c:	e005      	b.n	8012c6a <tcp_process+0x6d6>
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	68db      	ldr	r3, [r3, #12]
 8012c62:	60fb      	str	r3, [r7, #12]
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d1ef      	bne.n	8012c4a <tcp_process+0x6b6>
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	60da      	str	r2, [r3, #12]
 8012c70:	4b23      	ldr	r3, [pc, #140]	; (8012d00 <tcp_process+0x76c>)
 8012c72:	2201      	movs	r2, #1
 8012c74:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	220a      	movs	r2, #10
 8012c7a:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8012c7c:	4b21      	ldr	r3, [pc, #132]	; (8012d04 <tcp_process+0x770>)
 8012c7e:	681a      	ldr	r2, [r3, #0]
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	60da      	str	r2, [r3, #12]
 8012c84:	4a1f      	ldr	r2, [pc, #124]	; (8012d04 <tcp_process+0x770>)
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	6013      	str	r3, [r2, #0]
 8012c8a:	f002 f8d3 	bl	8014e34 <tcp_timer_needed>
    }
    break;
 8012c8e:	e026      	b.n	8012cde <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 8012c90:	6878      	ldr	r0, [r7, #4]
 8012c92:	f000 f8af 	bl	8012df4 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012c96:	4b16      	ldr	r3, [pc, #88]	; (8012cf0 <tcp_process+0x75c>)
 8012c98:	781b      	ldrb	r3, [r3, #0]
 8012c9a:	f003 0310 	and.w	r3, r3, #16
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d01f      	beq.n	8012ce2 <tcp_process+0x74e>
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012ca6:	4b13      	ldr	r3, [pc, #76]	; (8012cf4 <tcp_process+0x760>)
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	429a      	cmp	r2, r3
 8012cac:	d119      	bne.n	8012ce2 <tcp_process+0x74e>
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d115      	bne.n	8012ce2 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8012cb6:	4b10      	ldr	r3, [pc, #64]	; (8012cf8 <tcp_process+0x764>)
 8012cb8:	781b      	ldrb	r3, [r3, #0]
 8012cba:	f043 0310 	orr.w	r3, r3, #16
 8012cbe:	b2da      	uxtb	r2, r3
 8012cc0:	4b0d      	ldr	r3, [pc, #52]	; (8012cf8 <tcp_process+0x764>)
 8012cc2:	701a      	strb	r2, [r3, #0]
    }
    break;
 8012cc4:	e00d      	b.n	8012ce2 <tcp_process+0x74e>
  default:
    break;
 8012cc6:	bf00      	nop
 8012cc8:	e00c      	b.n	8012ce4 <tcp_process+0x750>
    break;
 8012cca:	bf00      	nop
 8012ccc:	e00a      	b.n	8012ce4 <tcp_process+0x750>
    break;
 8012cce:	bf00      	nop
 8012cd0:	e008      	b.n	8012ce4 <tcp_process+0x750>
    break;
 8012cd2:	bf00      	nop
 8012cd4:	e006      	b.n	8012ce4 <tcp_process+0x750>
    break;
 8012cd6:	bf00      	nop
 8012cd8:	e004      	b.n	8012ce4 <tcp_process+0x750>
    break;
 8012cda:	bf00      	nop
 8012cdc:	e002      	b.n	8012ce4 <tcp_process+0x750>
    break;
 8012cde:	bf00      	nop
 8012ce0:	e000      	b.n	8012ce4 <tcp_process+0x750>
    break;
 8012ce2:	bf00      	nop
  }
  return ERR_OK;
 8012ce4:	2300      	movs	r3, #0
}
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	3720      	adds	r7, #32
 8012cea:	46bd      	mov	sp, r7
 8012cec:	bd80      	pop	{r7, pc}
 8012cee:	bf00      	nop
 8012cf0:	2402182c 	.word	0x2402182c
 8012cf4:	24021824 	.word	0x24021824
 8012cf8:	2402182d 	.word	0x2402182d
 8012cfc:	24024e4c 	.word	0x24024e4c
 8012d00:	24024e48 	.word	0x24024e48
 8012d04:	24024e5c 	.word	0x24024e5c

08012d08 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012d08:	b590      	push	{r4, r7, lr}
 8012d0a:	b085      	sub	sp, #20
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
 8012d10:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	68db      	ldr	r3, [r3, #12]
 8012d16:	899b      	ldrh	r3, [r3, #12]
 8012d18:	b29b      	uxth	r3, r3
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	f7fb ff8e 	bl	800ec3c <lwip_htons>
 8012d20:	4603      	mov	r3, r0
 8012d22:	f003 0301 	and.w	r3, r3, #1
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d027      	beq.n	8012d7a <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012d2a:	6838      	ldr	r0, [r7, #0]
 8012d2c:	f7fe fbe3 	bl	80114f6 <tcp_segs_free>
    next = NULL;
 8012d30:	2300      	movs	r3, #0
 8012d32:	603b      	str	r3, [r7, #0]
 8012d34:	e055      	b.n	8012de2 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	68db      	ldr	r3, [r3, #12]
 8012d3a:	899b      	ldrh	r3, [r3, #12]
 8012d3c:	b29b      	uxth	r3, r3
 8012d3e:	4618      	mov	r0, r3
 8012d40:	f7fb ff7c 	bl	800ec3c <lwip_htons>
 8012d44:	4603      	mov	r3, r0
 8012d46:	f003 0301 	and.w	r3, r3, #1
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d00d      	beq.n	8012d6a <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	68db      	ldr	r3, [r3, #12]
 8012d52:	899b      	ldrh	r3, [r3, #12]
 8012d54:	b29c      	uxth	r4, r3
 8012d56:	2001      	movs	r0, #1
 8012d58:	f7fb ff70 	bl	800ec3c <lwip_htons>
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	461a      	mov	r2, r3
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	68db      	ldr	r3, [r3, #12]
 8012d64:	4322      	orrs	r2, r4
 8012d66:	b292      	uxth	r2, r2
 8012d68:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012d6e:	683b      	ldr	r3, [r7, #0]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012d74:	68f8      	ldr	r0, [r7, #12]
 8012d76:	f7fe fbd2 	bl	801151e <tcp_seg_free>
    while (next &&
 8012d7a:	683b      	ldr	r3, [r7, #0]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d00e      	beq.n	8012d9e <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	891b      	ldrh	r3, [r3, #8]
 8012d84:	461a      	mov	r2, r3
 8012d86:	4b1a      	ldr	r3, [pc, #104]	; (8012df0 <tcp_oos_insert_segment+0xe8>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	441a      	add	r2, r3
 8012d8c:	683b      	ldr	r3, [r7, #0]
 8012d8e:	68db      	ldr	r3, [r3, #12]
 8012d90:	685b      	ldr	r3, [r3, #4]
 8012d92:	6839      	ldr	r1, [r7, #0]
 8012d94:	8909      	ldrh	r1, [r1, #8]
 8012d96:	440b      	add	r3, r1
 8012d98:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	dacb      	bge.n	8012d36 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8012d9e:	683b      	ldr	r3, [r7, #0]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d01e      	beq.n	8012de2 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	891b      	ldrh	r3, [r3, #8]
 8012da8:	461a      	mov	r2, r3
 8012daa:	4b11      	ldr	r3, [pc, #68]	; (8012df0 <tcp_oos_insert_segment+0xe8>)
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	441a      	add	r2, r3
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	68db      	ldr	r3, [r3, #12]
 8012db4:	685b      	ldr	r3, [r3, #4]
 8012db6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	dd12      	ble.n	8012de2 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	68db      	ldr	r3, [r3, #12]
 8012dc0:	685b      	ldr	r3, [r3, #4]
 8012dc2:	b29a      	uxth	r2, r3
 8012dc4:	4b0a      	ldr	r3, [pc, #40]	; (8012df0 <tcp_oos_insert_segment+0xe8>)
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	b29b      	uxth	r3, r3
 8012dca:	1ad3      	subs	r3, r2, r3
 8012dcc:	b29a      	uxth	r2, r3
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	685a      	ldr	r2, [r3, #4]
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	891b      	ldrh	r3, [r3, #8]
 8012dda:	4619      	mov	r1, r3
 8012ddc:	4610      	mov	r0, r2
 8012dde:	f7fd f8d1 	bl	800ff84 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	683a      	ldr	r2, [r7, #0]
 8012de6:	601a      	str	r2, [r3, #0]
}
 8012de8:	bf00      	nop
 8012dea:	3714      	adds	r7, #20
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bd90      	pop	{r4, r7, pc}
 8012df0:	24021820 	.word	0x24021820

08012df4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012df6:	b08d      	sub	sp, #52	; 0x34
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	7d1b      	ldrb	r3, [r3, #20]
 8012e04:	2b03      	cmp	r3, #3
 8012e06:	d806      	bhi.n	8012e16 <tcp_receive+0x22>
 8012e08:	4ba6      	ldr	r3, [pc, #664]	; (80130a4 <tcp_receive+0x2b0>)
 8012e0a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8012e0e:	49a6      	ldr	r1, [pc, #664]	; (80130a8 <tcp_receive+0x2b4>)
 8012e10:	48a6      	ldr	r0, [pc, #664]	; (80130ac <tcp_receive+0x2b8>)
 8012e12:	f004 ff77 	bl	8017d04 <iprintf>

  if (flags & TCP_ACK) {
 8012e16:	4ba6      	ldr	r3, [pc, #664]	; (80130b0 <tcp_receive+0x2bc>)
 8012e18:	781b      	ldrb	r3, [r3, #0]
 8012e1a:	f003 0310 	and.w	r3, r3, #16
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	f000 82bf 	beq.w	80133a2 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012e2a:	461a      	mov	r2, r3
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e30:	4413      	add	r3, r2
 8012e32:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012e38:	4b9e      	ldr	r3, [pc, #632]	; (80130b4 <tcp_receive+0x2c0>)
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	1ad3      	subs	r3, r2, r3
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	db1b      	blt.n	8012e7a <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012e46:	4b9b      	ldr	r3, [pc, #620]	; (80130b4 <tcp_receive+0x2c0>)
 8012e48:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012e4a:	429a      	cmp	r2, r3
 8012e4c:	d106      	bne.n	8012e5c <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e52:	4b99      	ldr	r3, [pc, #612]	; (80130b8 <tcp_receive+0x2c4>)
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	1ad3      	subs	r3, r2, r3
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	db0e      	blt.n	8012e7a <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e60:	4b95      	ldr	r3, [pc, #596]	; (80130b8 <tcp_receive+0x2c4>)
 8012e62:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012e64:	429a      	cmp	r2, r3
 8012e66:	d141      	bne.n	8012eec <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012e68:	4b94      	ldr	r3, [pc, #592]	; (80130bc <tcp_receive+0x2c8>)
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	89db      	ldrh	r3, [r3, #14]
 8012e6e:	b29a      	uxth	r2, r3
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012e76:	429a      	cmp	r2, r3
 8012e78:	d938      	bls.n	8012eec <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012e7a:	4b90      	ldr	r3, [pc, #576]	; (80130bc <tcp_receive+0x2c8>)
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	89db      	ldrh	r3, [r3, #14]
 8012e80:	b29a      	uxth	r2, r3
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012e94:	429a      	cmp	r2, r3
 8012e96:	d205      	bcs.n	8012ea4 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8012ea4:	4b83      	ldr	r3, [pc, #524]	; (80130b4 <tcp_receive+0x2c0>)
 8012ea6:	681a      	ldr	r2, [r3, #0]
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8012eac:	4b82      	ldr	r3, [pc, #520]	; (80130b8 <tcp_receive+0x2c4>)
 8012eae:	681a      	ldr	r2, [r3, #0]
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d10d      	bne.n	8012eda <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d111      	bne.n	8012eec <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	2200      	movs	r2, #0
 8012ecc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
          pcb->persist_backoff = 1;
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	2201      	movs	r2, #1
 8012ed4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8012ed8:	e008      	b.n	8012eec <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d003      	beq.n	8012eec <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	2200      	movs	r2, #0
 8012ee8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012eec:	4b72      	ldr	r3, [pc, #456]	; (80130b8 <tcp_receive+0x2c4>)
 8012eee:	681a      	ldr	r2, [r3, #0]
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ef4:	1ad3      	subs	r3, r2, r3
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	dc53      	bgt.n	8012fa2 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8012efa:	4b71      	ldr	r3, [pc, #452]	; (80130c0 <tcp_receive+0x2cc>)
 8012efc:	881b      	ldrh	r3, [r3, #0]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d146      	bne.n	8012f90 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f06:	687a      	ldr	r2, [r7, #4]
 8012f08:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8012f0c:	4413      	add	r3, r2
 8012f0e:	697a      	ldr	r2, [r7, #20]
 8012f10:	429a      	cmp	r2, r3
 8012f12:	d13d      	bne.n	8012f90 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	db38      	blt.n	8012f90 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012f22:	4b65      	ldr	r3, [pc, #404]	; (80130b8 <tcp_receive+0x2c4>)
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	429a      	cmp	r2, r3
 8012f28:	d132      	bne.n	8012f90 <tcp_receive+0x19c>
              found_dupack = 1;
 8012f2a:	2301      	movs	r3, #1
 8012f2c:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012f34:	2bff      	cmp	r3, #255	; 0xff
 8012f36:	d007      	beq.n	8012f48 <tcp_receive+0x154>
                ++pcb->dupacks;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012f3e:	3301      	adds	r3, #1
 8012f40:	b2da      	uxtb	r2, r3
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012f4e:	2b03      	cmp	r3, #3
 8012f50:	d916      	bls.n	8012f80 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f5c:	4413      	add	r3, r2
 8012f5e:	b29a      	uxth	r2, r3
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012f66:	429a      	cmp	r2, r3
 8012f68:	d912      	bls.n	8012f90 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f74:	4413      	add	r3, r2
 8012f76:	b29a      	uxth	r2, r3
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012f7e:	e007      	b.n	8012f90 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012f86:	2b03      	cmp	r3, #3
 8012f88:	d102      	bne.n	8012f90 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8012f8a:	6878      	ldr	r0, [r7, #4]
 8012f8c:	f001 fdfc 	bl	8014b88 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012f90:	69fb      	ldr	r3, [r7, #28]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	f040 8169 	bne.w	801326a <tcp_receive+0x476>
        pcb->dupacks = 0;
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012fa0:	e163      	b.n	801326a <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8012fa2:	4b45      	ldr	r3, [pc, #276]	; (80130b8 <tcp_receive+0x2c4>)
 8012fa4:	681a      	ldr	r2, [r3, #0]
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012faa:	1ad3      	subs	r3, r2, r3
 8012fac:	3b01      	subs	r3, #1
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	f2c0 8107 	blt.w	80131c2 <tcp_receive+0x3ce>
 8012fb4:	4b40      	ldr	r3, [pc, #256]	; (80130b8 <tcp_receive+0x2c4>)
 8012fb6:	681a      	ldr	r2, [r3, #0]
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012fbc:	1ad3      	subs	r3, r2, r3
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	f300 80ff 	bgt.w	80131c2 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	7e9b      	ldrb	r3, [r3, #26]
 8012fc8:	f003 0304 	and.w	r3, r3, #4
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d00c      	beq.n	8012fea <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	7e9b      	ldrb	r3, [r3, #26]
 8012fd4:	f023 0304 	bic.w	r3, r3, #4
 8012fd8:	b2da      	uxtb	r2, r3
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	2200      	movs	r2, #0
 8012fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012ff8:	10db      	asrs	r3, r3, #3
 8012ffa:	b21b      	sxth	r3, r3
 8012ffc:	b29a      	uxth	r2, r3
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013004:	b29b      	uxth	r3, r3
 8013006:	4413      	add	r3, r2
 8013008:	b29b      	uxth	r3, r3
 801300a:	b21a      	sxth	r2, r3
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	2200      	movs	r2, #0
 8013016:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801301a:	4b27      	ldr	r3, [pc, #156]	; (80130b8 <tcp_receive+0x2c4>)
 801301c:	681a      	ldr	r2, [r3, #0]
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	7d1b      	ldrb	r3, [r3, #20]
 8013026:	2b03      	cmp	r3, #3
 8013028:	f240 8094 	bls.w	8013154 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013038:	429a      	cmp	r2, r3
 801303a:	d216      	bcs.n	801306a <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013046:	4413      	add	r3, r2
 8013048:	b29a      	uxth	r2, r3
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013050:	429a      	cmp	r2, r3
 8013052:	d97f      	bls.n	8013154 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801305e:	4413      	add	r3, r2
 8013060:	b29a      	uxth	r2, r3
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013068:	e074      	b.n	8013154 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013074:	4619      	mov	r1, r3
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801307a:	fb03 f301 	mul.w	r3, r3, r1
 801307e:	6879      	ldr	r1, [r7, #4]
 8013080:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8013084:	fb93 f3f1 	sdiv	r3, r3, r1
 8013088:	b29b      	uxth	r3, r3
 801308a:	4413      	add	r3, r2
 801308c:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013094:	8a7a      	ldrh	r2, [r7, #18]
 8013096:	429a      	cmp	r2, r3
 8013098:	d95c      	bls.n	8013154 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	8a7a      	ldrh	r2, [r7, #18]
 801309e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 80130a2:	e057      	b.n	8013154 <tcp_receive+0x360>
 80130a4:	08019c70 	.word	0x08019c70
 80130a8:	08019e94 	.word	0x08019e94
 80130ac:	08019cb4 	.word	0x08019cb4
 80130b0:	2402182c 	.word	0x2402182c
 80130b4:	24021820 	.word	0x24021820
 80130b8:	24021824 	.word	0x24021824
 80130bc:	24021810 	.word	0x24021810
 80130c0:	2402182a 	.word	0x2402182a
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130ce:	681a      	ldr	r2, [r3, #0]
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 80130da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130dc:	685b      	ldr	r3, [r3, #4]
 80130de:	4618      	mov	r0, r3
 80130e0:	f7fd f95e 	bl	80103a0 <pbuf_clen>
 80130e4:	4603      	mov	r3, r0
 80130e6:	429c      	cmp	r4, r3
 80130e8:	d206      	bcs.n	80130f8 <tcp_receive+0x304>
 80130ea:	4b70      	ldr	r3, [pc, #448]	; (80132ac <tcp_receive+0x4b8>)
 80130ec:	f240 429e 	movw	r2, #1182	; 0x49e
 80130f0:	496f      	ldr	r1, [pc, #444]	; (80132b0 <tcp_receive+0x4bc>)
 80130f2:	4870      	ldr	r0, [pc, #448]	; (80132b4 <tcp_receive+0x4c0>)
 80130f4:	f004 fe06 	bl	8017d04 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 80130f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130fa:	685b      	ldr	r3, [r3, #4]
 80130fc:	4618      	mov	r0, r3
 80130fe:	f7fd f94f 	bl	80103a0 <pbuf_clen>
 8013102:	4603      	mov	r3, r0
 8013104:	461a      	mov	r2, r3
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801310c:	1a9b      	subs	r3, r3, r2
 801310e:	b29a      	uxth	r2, r3
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8013116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013118:	891a      	ldrh	r2, [r3, #8]
 801311a:	4b67      	ldr	r3, [pc, #412]	; (80132b8 <tcp_receive+0x4c4>)
 801311c:	881b      	ldrh	r3, [r3, #0]
 801311e:	4413      	add	r3, r2
 8013120:	b29a      	uxth	r2, r3
 8013122:	4b65      	ldr	r3, [pc, #404]	; (80132b8 <tcp_receive+0x4c4>)
 8013124:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8013126:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013128:	f7fe f9f9 	bl	801151e <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013132:	2b00      	cmp	r3, #0
 8013134:	d00e      	beq.n	8013154 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801313a:	2b00      	cmp	r3, #0
 801313c:	d10a      	bne.n	8013154 <tcp_receive+0x360>
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013142:	2b00      	cmp	r3, #0
 8013144:	d106      	bne.n	8013154 <tcp_receive+0x360>
 8013146:	4b59      	ldr	r3, [pc, #356]	; (80132ac <tcp_receive+0x4b8>)
 8013148:	f240 42a7 	movw	r2, #1191	; 0x4a7
 801314c:	495b      	ldr	r1, [pc, #364]	; (80132bc <tcp_receive+0x4c8>)
 801314e:	4859      	ldr	r0, [pc, #356]	; (80132b4 <tcp_receive+0x4c0>)
 8013150:	f004 fdd8 	bl	8017d04 <iprintf>
      while (pcb->unacked != NULL &&
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013158:	2b00      	cmp	r3, #0
 801315a:	d022      	beq.n	80131a2 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013160:	68db      	ldr	r3, [r3, #12]
 8013162:	685b      	ldr	r3, [r3, #4]
 8013164:	4618      	mov	r0, r3
 8013166:	f7fb fd77 	bl	800ec58 <lwip_htonl>
 801316a:	4604      	mov	r4, r0
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013170:	891b      	ldrh	r3, [r3, #8]
 8013172:	461d      	mov	r5, r3
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013178:	68db      	ldr	r3, [r3, #12]
 801317a:	899b      	ldrh	r3, [r3, #12]
 801317c:	b29b      	uxth	r3, r3
 801317e:	4618      	mov	r0, r3
 8013180:	f7fb fd5c 	bl	800ec3c <lwip_htons>
 8013184:	4603      	mov	r3, r0
 8013186:	f003 0303 	and.w	r3, r3, #3
 801318a:	2b00      	cmp	r3, #0
 801318c:	d001      	beq.n	8013192 <tcp_receive+0x39e>
 801318e:	2301      	movs	r3, #1
 8013190:	e000      	b.n	8013194 <tcp_receive+0x3a0>
 8013192:	2300      	movs	r3, #0
 8013194:	442b      	add	r3, r5
 8013196:	18e2      	adds	r2, r4, r3
 8013198:	4b49      	ldr	r3, [pc, #292]	; (80132c0 <tcp_receive+0x4cc>)
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 801319e:	2b00      	cmp	r3, #0
 80131a0:	dd90      	ble.n	80130c4 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d104      	bne.n	80131b4 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80131b0:	861a      	strh	r2, [r3, #48]	; 0x30
 80131b2:	e002      	b.n	80131ba <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	2200      	movs	r2, #0
 80131b8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	2200      	movs	r2, #0
 80131be:	76da      	strb	r2, [r3, #27]
 80131c0:	e002      	b.n	80131c8 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80131c2:	6878      	ldr	r0, [r7, #4]
 80131c4:	f001 f8fe 	bl	80143c4 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 80131c8:	e04f      	b.n	801326a <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80131ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80131d4:	681a      	ldr	r2, [r3, #0]
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d103      	bne.n	80131ea <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	2200      	movs	r2, #0
 80131e6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 80131f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131f2:	685b      	ldr	r3, [r3, #4]
 80131f4:	4618      	mov	r0, r3
 80131f6:	f7fd f8d3 	bl	80103a0 <pbuf_clen>
 80131fa:	4603      	mov	r3, r0
 80131fc:	429c      	cmp	r4, r3
 80131fe:	d206      	bcs.n	801320e <tcp_receive+0x41a>
 8013200:	4b2a      	ldr	r3, [pc, #168]	; (80132ac <tcp_receive+0x4b8>)
 8013202:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8013206:	492a      	ldr	r1, [pc, #168]	; (80132b0 <tcp_receive+0x4bc>)
 8013208:	482a      	ldr	r0, [pc, #168]	; (80132b4 <tcp_receive+0x4c0>)
 801320a:	f004 fd7b 	bl	8017d04 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 801320e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013210:	685b      	ldr	r3, [r3, #4]
 8013212:	4618      	mov	r0, r3
 8013214:	f7fd f8c4 	bl	80103a0 <pbuf_clen>
 8013218:	4603      	mov	r3, r0
 801321a:	461a      	mov	r2, r3
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013222:	1a9b      	subs	r3, r3, r2
 8013224:	b29a      	uxth	r2, r3
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 801322c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801322e:	891a      	ldrh	r2, [r3, #8]
 8013230:	4b21      	ldr	r3, [pc, #132]	; (80132b8 <tcp_receive+0x4c4>)
 8013232:	881b      	ldrh	r3, [r3, #0]
 8013234:	4413      	add	r3, r2
 8013236:	b29a      	uxth	r2, r3
 8013238:	4b1f      	ldr	r3, [pc, #124]	; (80132b8 <tcp_receive+0x4c4>)
 801323a:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 801323c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801323e:	f7fe f96e 	bl	801151e <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013248:	2b00      	cmp	r3, #0
 801324a:	d00e      	beq.n	801326a <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013250:	2b00      	cmp	r3, #0
 8013252:	d10a      	bne.n	801326a <tcp_receive+0x476>
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013258:	2b00      	cmp	r3, #0
 801325a:	d106      	bne.n	801326a <tcp_receive+0x476>
 801325c:	4b13      	ldr	r3, [pc, #76]	; (80132ac <tcp_receive+0x4b8>)
 801325e:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8013262:	4916      	ldr	r1, [pc, #88]	; (80132bc <tcp_receive+0x4c8>)
 8013264:	4813      	ldr	r0, [pc, #76]	; (80132b4 <tcp_receive+0x4c0>)
 8013266:	f004 fd4d 	bl	8017d04 <iprintf>
    while (pcb->unsent != NULL &&
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801326e:	2b00      	cmp	r3, #0
 8013270:	d036      	beq.n	80132e0 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8013272:	4b13      	ldr	r3, [pc, #76]	; (80132c0 <tcp_receive+0x4cc>)
 8013274:	681c      	ldr	r4, [r3, #0]
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801327a:	68db      	ldr	r3, [r3, #12]
 801327c:	685b      	ldr	r3, [r3, #4]
 801327e:	4618      	mov	r0, r3
 8013280:	f7fb fcea 	bl	800ec58 <lwip_htonl>
 8013284:	4605      	mov	r5, r0
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801328a:	891b      	ldrh	r3, [r3, #8]
 801328c:	461e      	mov	r6, r3
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013292:	68db      	ldr	r3, [r3, #12]
 8013294:	899b      	ldrh	r3, [r3, #12]
 8013296:	b29b      	uxth	r3, r3
 8013298:	4618      	mov	r0, r3
 801329a:	f7fb fccf 	bl	800ec3c <lwip_htons>
 801329e:	4603      	mov	r3, r0
 80132a0:	f003 0303 	and.w	r3, r3, #3
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d00d      	beq.n	80132c4 <tcp_receive+0x4d0>
 80132a8:	2301      	movs	r3, #1
 80132aa:	e00c      	b.n	80132c6 <tcp_receive+0x4d2>
 80132ac:	08019c70 	.word	0x08019c70
 80132b0:	08019eb0 	.word	0x08019eb0
 80132b4:	08019cb4 	.word	0x08019cb4
 80132b8:	24021828 	.word	0x24021828
 80132bc:	08019ed8 	.word	0x08019ed8
 80132c0:	24021824 	.word	0x24021824
 80132c4:	2300      	movs	r3, #0
 80132c6:	4433      	add	r3, r6
 80132c8:	442b      	add	r3, r5
 80132ca:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	db07      	blt.n	80132e0 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80132d0:	4b8d      	ldr	r3, [pc, #564]	; (8013508 <tcp_receive+0x714>)
 80132d2:	681a      	ldr	r2, [r3, #0]
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80132d8:	1ad3      	subs	r3, r2, r3
 80132da:	2b00      	cmp	r3, #0
 80132dc:	f77f af75 	ble.w	80131ca <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80132e6:	4b89      	ldr	r3, [pc, #548]	; (801350c <tcp_receive+0x718>)
 80132e8:	881b      	ldrh	r3, [r3, #0]
 80132ea:	4413      	add	r3, r2
 80132ec:	b29a      	uxth	r2, r3
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d052      	beq.n	80133a2 <tcp_receive+0x5ae>
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013300:	4b81      	ldr	r3, [pc, #516]	; (8013508 <tcp_receive+0x714>)
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	1ad3      	subs	r3, r2, r3
 8013306:	2b00      	cmp	r3, #0
 8013308:	da4b      	bge.n	80133a2 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801330a:	4b81      	ldr	r3, [pc, #516]	; (8013510 <tcp_receive+0x71c>)
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	b29a      	uxth	r2, r3
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013314:	b29b      	uxth	r3, r3
 8013316:	1ad3      	subs	r3, r2, r3
 8013318:	b29b      	uxth	r3, r3
 801331a:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 801331c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013324:	10db      	asrs	r3, r3, #3
 8013326:	b21b      	sxth	r3, r3
 8013328:	b29b      	uxth	r3, r3
 801332a:	1ad3      	subs	r3, r2, r3
 801332c:	b29b      	uxth	r3, r3
 801332e:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013336:	b29a      	uxth	r2, r3
 8013338:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801333a:	4413      	add	r3, r2
 801333c:	b29b      	uxth	r3, r3
 801333e:	b21a      	sxth	r2, r3
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8013344:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013348:	2b00      	cmp	r3, #0
 801334a:	da03      	bge.n	8013354 <tcp_receive+0x560>
        m = -m;
 801334c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801334e:	425b      	negs	r3, r3
 8013350:	b29b      	uxth	r3, r3
 8013352:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8013354:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801335c:	109b      	asrs	r3, r3, #2
 801335e:	b21b      	sxth	r3, r3
 8013360:	b29b      	uxth	r3, r3
 8013362:	1ad3      	subs	r3, r2, r3
 8013364:	b29b      	uxth	r3, r3
 8013366:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801336e:	b29a      	uxth	r2, r3
 8013370:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013372:	4413      	add	r3, r2
 8013374:	b29b      	uxth	r3, r3
 8013376:	b21a      	sxth	r2, r3
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013382:	10db      	asrs	r3, r3, #3
 8013384:	b21b      	sxth	r3, r3
 8013386:	b29a      	uxth	r2, r3
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801338e:	b29b      	uxth	r3, r3
 8013390:	4413      	add	r3, r2
 8013392:	b29b      	uxth	r3, r3
 8013394:	b21a      	sxth	r2, r3
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	2200      	movs	r2, #0
 80133a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80133a2:	4b5c      	ldr	r3, [pc, #368]	; (8013514 <tcp_receive+0x720>)
 80133a4:	881b      	ldrh	r3, [r3, #0]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	f000 84f1 	beq.w	8013d8e <tcp_receive+0xf9a>
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	7d1b      	ldrb	r3, [r3, #20]
 80133b0:	2b06      	cmp	r3, #6
 80133b2:	f200 84ec 	bhi.w	8013d8e <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80133ba:	4b57      	ldr	r3, [pc, #348]	; (8013518 <tcp_receive+0x724>)
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	1ad3      	subs	r3, r2, r3
 80133c0:	3b01      	subs	r3, #1
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	f2c0 80b8 	blt.w	8013538 <tcp_receive+0x744>
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80133cc:	4b51      	ldr	r3, [pc, #324]	; (8013514 <tcp_receive+0x720>)
 80133ce:	881b      	ldrh	r3, [r3, #0]
 80133d0:	4619      	mov	r1, r3
 80133d2:	4b51      	ldr	r3, [pc, #324]	; (8013518 <tcp_receive+0x724>)
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	440b      	add	r3, r1
 80133d8:	1ad3      	subs	r3, r2, r3
 80133da:	3301      	adds	r3, #1
 80133dc:	2b00      	cmp	r3, #0
 80133de:	f300 80ab 	bgt.w	8013538 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80133e2:	4b4e      	ldr	r3, [pc, #312]	; (801351c <tcp_receive+0x728>)
 80133e4:	685b      	ldr	r3, [r3, #4]
 80133e6:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80133ec:	4b4a      	ldr	r3, [pc, #296]	; (8013518 <tcp_receive+0x724>)
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	1ad3      	subs	r3, r2, r3
 80133f2:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80133f4:	4b49      	ldr	r3, [pc, #292]	; (801351c <tcp_receive+0x728>)
 80133f6:	685b      	ldr	r3, [r3, #4]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d106      	bne.n	801340a <tcp_receive+0x616>
 80133fc:	4b48      	ldr	r3, [pc, #288]	; (8013520 <tcp_receive+0x72c>)
 80133fe:	f240 523c 	movw	r2, #1340	; 0x53c
 8013402:	4948      	ldr	r1, [pc, #288]	; (8013524 <tcp_receive+0x730>)
 8013404:	4848      	ldr	r0, [pc, #288]	; (8013528 <tcp_receive+0x734>)
 8013406:	f004 fc7d 	bl	8017d04 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 801340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801340c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8013410:	4293      	cmp	r3, r2
 8013412:	dd06      	ble.n	8013422 <tcp_receive+0x62e>
 8013414:	4b42      	ldr	r3, [pc, #264]	; (8013520 <tcp_receive+0x72c>)
 8013416:	f240 523d 	movw	r2, #1341	; 0x53d
 801341a:	4944      	ldr	r1, [pc, #272]	; (801352c <tcp_receive+0x738>)
 801341c:	4842      	ldr	r0, [pc, #264]	; (8013528 <tcp_receive+0x734>)
 801341e:	f004 fc71 	bl	8017d04 <iprintf>
      if (inseg.p->len < off) {
 8013422:	4b3e      	ldr	r3, [pc, #248]	; (801351c <tcp_receive+0x728>)
 8013424:	685b      	ldr	r3, [r3, #4]
 8013426:	895b      	ldrh	r3, [r3, #10]
 8013428:	461a      	mov	r2, r3
 801342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801342c:	4293      	cmp	r3, r2
 801342e:	dd3e      	ble.n	80134ae <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013430:	4b3a      	ldr	r3, [pc, #232]	; (801351c <tcp_receive+0x728>)
 8013432:	685b      	ldr	r3, [r3, #4]
 8013434:	891b      	ldrh	r3, [r3, #8]
 8013436:	461a      	mov	r2, r3
 8013438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801343a:	4293      	cmp	r3, r2
 801343c:	dd06      	ble.n	801344c <tcp_receive+0x658>
 801343e:	4b38      	ldr	r3, [pc, #224]	; (8013520 <tcp_receive+0x72c>)
 8013440:	f240 523f 	movw	r2, #1343	; 0x53f
 8013444:	493a      	ldr	r1, [pc, #232]	; (8013530 <tcp_receive+0x73c>)
 8013446:	4838      	ldr	r0, [pc, #224]	; (8013528 <tcp_receive+0x734>)
 8013448:	f004 fc5c 	bl	8017d04 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801344c:	4b33      	ldr	r3, [pc, #204]	; (801351c <tcp_receive+0x728>)
 801344e:	685b      	ldr	r3, [r3, #4]
 8013450:	891a      	ldrh	r2, [r3, #8]
 8013452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013454:	b29b      	uxth	r3, r3
 8013456:	1ad3      	subs	r3, r2, r3
 8013458:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 801345a:	e00e      	b.n	801347a <tcp_receive+0x686>
          off -= p->len;
 801345c:	69bb      	ldr	r3, [r7, #24]
 801345e:	895b      	ldrh	r3, [r3, #10]
 8013460:	461a      	mov	r2, r3
 8013462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013464:	1a9b      	subs	r3, r3, r2
 8013466:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8013468:	69bb      	ldr	r3, [r7, #24]
 801346a:	8a3a      	ldrh	r2, [r7, #16]
 801346c:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 801346e:	69bb      	ldr	r3, [r7, #24]
 8013470:	2200      	movs	r2, #0
 8013472:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8013474:	69bb      	ldr	r3, [r7, #24]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 801347a:	69bb      	ldr	r3, [r7, #24]
 801347c:	895b      	ldrh	r3, [r3, #10]
 801347e:	461a      	mov	r2, r3
 8013480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013482:	4293      	cmp	r3, r2
 8013484:	dcea      	bgt.n	801345c <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8013486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013488:	b29b      	uxth	r3, r3
 801348a:	425b      	negs	r3, r3
 801348c:	b29b      	uxth	r3, r3
 801348e:	b21b      	sxth	r3, r3
 8013490:	4619      	mov	r1, r3
 8013492:	69b8      	ldr	r0, [r7, #24]
 8013494:	f7fc fec6 	bl	8010224 <pbuf_header>
 8013498:	4603      	mov	r3, r0
 801349a:	2b00      	cmp	r3, #0
 801349c:	d01c      	beq.n	80134d8 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 801349e:	4b20      	ldr	r3, [pc, #128]	; (8013520 <tcp_receive+0x72c>)
 80134a0:	f240 524c 	movw	r2, #1356	; 0x54c
 80134a4:	4923      	ldr	r1, [pc, #140]	; (8013534 <tcp_receive+0x740>)
 80134a6:	4820      	ldr	r0, [pc, #128]	; (8013528 <tcp_receive+0x734>)
 80134a8:	f004 fc2c 	bl	8017d04 <iprintf>
 80134ac:	e014      	b.n	80134d8 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80134ae:	4b1b      	ldr	r3, [pc, #108]	; (801351c <tcp_receive+0x728>)
 80134b0:	685b      	ldr	r3, [r3, #4]
 80134b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134b4:	b292      	uxth	r2, r2
 80134b6:	4252      	negs	r2, r2
 80134b8:	b292      	uxth	r2, r2
 80134ba:	b212      	sxth	r2, r2
 80134bc:	4611      	mov	r1, r2
 80134be:	4618      	mov	r0, r3
 80134c0:	f7fc feb0 	bl	8010224 <pbuf_header>
 80134c4:	4603      	mov	r3, r0
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d006      	beq.n	80134d8 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80134ca:	4b15      	ldr	r3, [pc, #84]	; (8013520 <tcp_receive+0x72c>)
 80134cc:	f240 5251 	movw	r2, #1361	; 0x551
 80134d0:	4918      	ldr	r1, [pc, #96]	; (8013534 <tcp_receive+0x740>)
 80134d2:	4815      	ldr	r0, [pc, #84]	; (8013528 <tcp_receive+0x734>)
 80134d4:	f004 fc16 	bl	8017d04 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80134d8:	4b10      	ldr	r3, [pc, #64]	; (801351c <tcp_receive+0x728>)
 80134da:	891a      	ldrh	r2, [r3, #8]
 80134dc:	4b0e      	ldr	r3, [pc, #56]	; (8013518 <tcp_receive+0x724>)
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	b299      	uxth	r1, r3
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134e6:	b29b      	uxth	r3, r3
 80134e8:	1acb      	subs	r3, r1, r3
 80134ea:	b29b      	uxth	r3, r3
 80134ec:	4413      	add	r3, r2
 80134ee:	b29a      	uxth	r2, r3
 80134f0:	4b0a      	ldr	r3, [pc, #40]	; (801351c <tcp_receive+0x728>)
 80134f2:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134f8:	4a07      	ldr	r2, [pc, #28]	; (8013518 <tcp_receive+0x724>)
 80134fa:	6013      	str	r3, [r2, #0]
 80134fc:	4b07      	ldr	r3, [pc, #28]	; (801351c <tcp_receive+0x728>)
 80134fe:	68db      	ldr	r3, [r3, #12]
 8013500:	4a05      	ldr	r2, [pc, #20]	; (8013518 <tcp_receive+0x724>)
 8013502:	6812      	ldr	r2, [r2, #0]
 8013504:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013506:	e025      	b.n	8013554 <tcp_receive+0x760>
 8013508:	24021824 	.word	0x24021824
 801350c:	24021828 	.word	0x24021828
 8013510:	24024e50 	.word	0x24024e50
 8013514:	2402182a 	.word	0x2402182a
 8013518:	24021820 	.word	0x24021820
 801351c:	24021800 	.word	0x24021800
 8013520:	08019c70 	.word	0x08019c70
 8013524:	08019ef8 	.word	0x08019ef8
 8013528:	08019cb4 	.word	0x08019cb4
 801352c:	08019f08 	.word	0x08019f08
 8013530:	08019f18 	.word	0x08019f18
 8013534:	08019f28 	.word	0x08019f28
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013538:	4b87      	ldr	r3, [pc, #540]	; (8013758 <tcp_receive+0x964>)
 801353a:	681a      	ldr	r2, [r3, #0]
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013540:	1ad3      	subs	r3, r2, r3
 8013542:	2b00      	cmp	r3, #0
 8013544:	da06      	bge.n	8013554 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	7e9b      	ldrb	r3, [r3, #26]
 801354a:	f043 0302 	orr.w	r3, r3, #2
 801354e:	b2da      	uxtb	r2, r3
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013554:	4b80      	ldr	r3, [pc, #512]	; (8013758 <tcp_receive+0x964>)
 8013556:	681a      	ldr	r2, [r3, #0]
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801355c:	1ad3      	subs	r3, r2, r3
 801355e:	2b00      	cmp	r3, #0
 8013560:	f2c0 8410 	blt.w	8013d84 <tcp_receive+0xf90>
 8013564:	4b7c      	ldr	r3, [pc, #496]	; (8013758 <tcp_receive+0x964>)
 8013566:	681a      	ldr	r2, [r3, #0]
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801356c:	6879      	ldr	r1, [r7, #4]
 801356e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013570:	440b      	add	r3, r1
 8013572:	1ad3      	subs	r3, r2, r3
 8013574:	3301      	adds	r3, #1
 8013576:	2b00      	cmp	r3, #0
 8013578:	f300 8404 	bgt.w	8013d84 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013580:	4b75      	ldr	r3, [pc, #468]	; (8013758 <tcp_receive+0x964>)
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	429a      	cmp	r2, r3
 8013586:	f040 8287 	bne.w	8013a98 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801358a:	4b74      	ldr	r3, [pc, #464]	; (801375c <tcp_receive+0x968>)
 801358c:	891c      	ldrh	r4, [r3, #8]
 801358e:	4b73      	ldr	r3, [pc, #460]	; (801375c <tcp_receive+0x968>)
 8013590:	68db      	ldr	r3, [r3, #12]
 8013592:	899b      	ldrh	r3, [r3, #12]
 8013594:	b29b      	uxth	r3, r3
 8013596:	4618      	mov	r0, r3
 8013598:	f7fb fb50 	bl	800ec3c <lwip_htons>
 801359c:	4603      	mov	r3, r0
 801359e:	f003 0303 	and.w	r3, r3, #3
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d001      	beq.n	80135aa <tcp_receive+0x7b6>
 80135a6:	2301      	movs	r3, #1
 80135a8:	e000      	b.n	80135ac <tcp_receive+0x7b8>
 80135aa:	2300      	movs	r3, #0
 80135ac:	4423      	add	r3, r4
 80135ae:	b29a      	uxth	r2, r3
 80135b0:	4b6b      	ldr	r3, [pc, #428]	; (8013760 <tcp_receive+0x96c>)
 80135b2:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80135b8:	4b69      	ldr	r3, [pc, #420]	; (8013760 <tcp_receive+0x96c>)
 80135ba:	881b      	ldrh	r3, [r3, #0]
 80135bc:	429a      	cmp	r2, r3
 80135be:	d26e      	bcs.n	801369e <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80135c0:	4b66      	ldr	r3, [pc, #408]	; (801375c <tcp_receive+0x968>)
 80135c2:	68db      	ldr	r3, [r3, #12]
 80135c4:	899b      	ldrh	r3, [r3, #12]
 80135c6:	b29b      	uxth	r3, r3
 80135c8:	4618      	mov	r0, r3
 80135ca:	f7fb fb37 	bl	800ec3c <lwip_htons>
 80135ce:	4603      	mov	r3, r0
 80135d0:	f003 0301 	and.w	r3, r3, #1
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d01b      	beq.n	8013610 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80135d8:	4b60      	ldr	r3, [pc, #384]	; (801375c <tcp_receive+0x968>)
 80135da:	68db      	ldr	r3, [r3, #12]
 80135dc:	899b      	ldrh	r3, [r3, #12]
 80135de:	b29b      	uxth	r3, r3
 80135e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80135e4:	b29c      	uxth	r4, r3
 80135e6:	4b5d      	ldr	r3, [pc, #372]	; (801375c <tcp_receive+0x968>)
 80135e8:	68db      	ldr	r3, [r3, #12]
 80135ea:	899b      	ldrh	r3, [r3, #12]
 80135ec:	b29b      	uxth	r3, r3
 80135ee:	4618      	mov	r0, r3
 80135f0:	f7fb fb24 	bl	800ec3c <lwip_htons>
 80135f4:	4603      	mov	r3, r0
 80135f6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80135fa:	b29b      	uxth	r3, r3
 80135fc:	4618      	mov	r0, r3
 80135fe:	f7fb fb1d 	bl	800ec3c <lwip_htons>
 8013602:	4603      	mov	r3, r0
 8013604:	461a      	mov	r2, r3
 8013606:	4b55      	ldr	r3, [pc, #340]	; (801375c <tcp_receive+0x968>)
 8013608:	68db      	ldr	r3, [r3, #12]
 801360a:	4322      	orrs	r2, r4
 801360c:	b292      	uxth	r2, r2
 801360e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013614:	4b51      	ldr	r3, [pc, #324]	; (801375c <tcp_receive+0x968>)
 8013616:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013618:	4b50      	ldr	r3, [pc, #320]	; (801375c <tcp_receive+0x968>)
 801361a:	68db      	ldr	r3, [r3, #12]
 801361c:	899b      	ldrh	r3, [r3, #12]
 801361e:	b29b      	uxth	r3, r3
 8013620:	4618      	mov	r0, r3
 8013622:	f7fb fb0b 	bl	800ec3c <lwip_htons>
 8013626:	4603      	mov	r3, r0
 8013628:	f003 0302 	and.w	r3, r3, #2
 801362c:	2b00      	cmp	r3, #0
 801362e:	d005      	beq.n	801363c <tcp_receive+0x848>
            inseg.len -= 1;
 8013630:	4b4a      	ldr	r3, [pc, #296]	; (801375c <tcp_receive+0x968>)
 8013632:	891b      	ldrh	r3, [r3, #8]
 8013634:	3b01      	subs	r3, #1
 8013636:	b29a      	uxth	r2, r3
 8013638:	4b48      	ldr	r3, [pc, #288]	; (801375c <tcp_receive+0x968>)
 801363a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801363c:	4b47      	ldr	r3, [pc, #284]	; (801375c <tcp_receive+0x968>)
 801363e:	685a      	ldr	r2, [r3, #4]
 8013640:	4b46      	ldr	r3, [pc, #280]	; (801375c <tcp_receive+0x968>)
 8013642:	891b      	ldrh	r3, [r3, #8]
 8013644:	4619      	mov	r1, r3
 8013646:	4610      	mov	r0, r2
 8013648:	f7fc fc9c 	bl	800ff84 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801364c:	4b43      	ldr	r3, [pc, #268]	; (801375c <tcp_receive+0x968>)
 801364e:	891c      	ldrh	r4, [r3, #8]
 8013650:	4b42      	ldr	r3, [pc, #264]	; (801375c <tcp_receive+0x968>)
 8013652:	68db      	ldr	r3, [r3, #12]
 8013654:	899b      	ldrh	r3, [r3, #12]
 8013656:	b29b      	uxth	r3, r3
 8013658:	4618      	mov	r0, r3
 801365a:	f7fb faef 	bl	800ec3c <lwip_htons>
 801365e:	4603      	mov	r3, r0
 8013660:	f003 0303 	and.w	r3, r3, #3
 8013664:	2b00      	cmp	r3, #0
 8013666:	d001      	beq.n	801366c <tcp_receive+0x878>
 8013668:	2301      	movs	r3, #1
 801366a:	e000      	b.n	801366e <tcp_receive+0x87a>
 801366c:	2300      	movs	r3, #0
 801366e:	4423      	add	r3, r4
 8013670:	b29a      	uxth	r2, r3
 8013672:	4b3b      	ldr	r3, [pc, #236]	; (8013760 <tcp_receive+0x96c>)
 8013674:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013676:	4b3a      	ldr	r3, [pc, #232]	; (8013760 <tcp_receive+0x96c>)
 8013678:	881b      	ldrh	r3, [r3, #0]
 801367a:	461a      	mov	r2, r3
 801367c:	4b36      	ldr	r3, [pc, #216]	; (8013758 <tcp_receive+0x964>)
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	441a      	add	r2, r3
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013686:	6879      	ldr	r1, [r7, #4]
 8013688:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801368a:	440b      	add	r3, r1
 801368c:	429a      	cmp	r2, r3
 801368e:	d006      	beq.n	801369e <tcp_receive+0x8aa>
 8013690:	4b34      	ldr	r3, [pc, #208]	; (8013764 <tcp_receive+0x970>)
 8013692:	f240 527f 	movw	r2, #1407	; 0x57f
 8013696:	4934      	ldr	r1, [pc, #208]	; (8013768 <tcp_receive+0x974>)
 8013698:	4834      	ldr	r0, [pc, #208]	; (801376c <tcp_receive+0x978>)
 801369a:	f004 fb33 	bl	8017d04 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	f000 80e1 	beq.w	801386a <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80136a8:	4b2c      	ldr	r3, [pc, #176]	; (801375c <tcp_receive+0x968>)
 80136aa:	68db      	ldr	r3, [r3, #12]
 80136ac:	899b      	ldrh	r3, [r3, #12]
 80136ae:	b29b      	uxth	r3, r3
 80136b0:	4618      	mov	r0, r3
 80136b2:	f7fb fac3 	bl	800ec3c <lwip_htons>
 80136b6:	4603      	mov	r3, r0
 80136b8:	f003 0301 	and.w	r3, r3, #1
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d010      	beq.n	80136e2 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80136c0:	e00a      	b.n	80136d8 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136c6:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136cc:	681a      	ldr	r2, [r3, #0]
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 80136d2:	68b8      	ldr	r0, [r7, #8]
 80136d4:	f7fd ff23 	bl	801151e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d1f0      	bne.n	80136c2 <tcp_receive+0x8ce>
 80136e0:	e0c3      	b.n	801386a <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136e6:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80136e8:	e04f      	b.n	801378a <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80136ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ec:	68db      	ldr	r3, [r3, #12]
 80136ee:	899b      	ldrh	r3, [r3, #12]
 80136f0:	b29b      	uxth	r3, r3
 80136f2:	4618      	mov	r0, r3
 80136f4:	f7fb faa2 	bl	800ec3c <lwip_htons>
 80136f8:	4603      	mov	r3, r0
 80136fa:	f003 0301 	and.w	r3, r3, #1
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d03b      	beq.n	801377a <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013702:	4b16      	ldr	r3, [pc, #88]	; (801375c <tcp_receive+0x968>)
 8013704:	68db      	ldr	r3, [r3, #12]
 8013706:	899b      	ldrh	r3, [r3, #12]
 8013708:	b29b      	uxth	r3, r3
 801370a:	4618      	mov	r0, r3
 801370c:	f7fb fa96 	bl	800ec3c <lwip_htons>
 8013710:	4603      	mov	r3, r0
 8013712:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013716:	2b00      	cmp	r3, #0
 8013718:	d12f      	bne.n	801377a <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801371a:	4b10      	ldr	r3, [pc, #64]	; (801375c <tcp_receive+0x968>)
 801371c:	68db      	ldr	r3, [r3, #12]
 801371e:	899b      	ldrh	r3, [r3, #12]
 8013720:	b29c      	uxth	r4, r3
 8013722:	2001      	movs	r0, #1
 8013724:	f7fb fa8a 	bl	800ec3c <lwip_htons>
 8013728:	4603      	mov	r3, r0
 801372a:	461a      	mov	r2, r3
 801372c:	4b0b      	ldr	r3, [pc, #44]	; (801375c <tcp_receive+0x968>)
 801372e:	68db      	ldr	r3, [r3, #12]
 8013730:	4322      	orrs	r2, r4
 8013732:	b292      	uxth	r2, r2
 8013734:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013736:	4b09      	ldr	r3, [pc, #36]	; (801375c <tcp_receive+0x968>)
 8013738:	891c      	ldrh	r4, [r3, #8]
 801373a:	4b08      	ldr	r3, [pc, #32]	; (801375c <tcp_receive+0x968>)
 801373c:	68db      	ldr	r3, [r3, #12]
 801373e:	899b      	ldrh	r3, [r3, #12]
 8013740:	b29b      	uxth	r3, r3
 8013742:	4618      	mov	r0, r3
 8013744:	f7fb fa7a 	bl	800ec3c <lwip_htons>
 8013748:	4603      	mov	r3, r0
 801374a:	f003 0303 	and.w	r3, r3, #3
 801374e:	2b00      	cmp	r3, #0
 8013750:	d00e      	beq.n	8013770 <tcp_receive+0x97c>
 8013752:	2301      	movs	r3, #1
 8013754:	e00d      	b.n	8013772 <tcp_receive+0x97e>
 8013756:	bf00      	nop
 8013758:	24021820 	.word	0x24021820
 801375c:	24021800 	.word	0x24021800
 8013760:	2402182a 	.word	0x2402182a
 8013764:	08019c70 	.word	0x08019c70
 8013768:	08019f3c 	.word	0x08019f3c
 801376c:	08019cb4 	.word	0x08019cb4
 8013770:	2300      	movs	r3, #0
 8013772:	4423      	add	r3, r4
 8013774:	b29a      	uxth	r2, r3
 8013776:	4b95      	ldr	r3, [pc, #596]	; (80139cc <tcp_receive+0xbd8>)
 8013778:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 801377a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801377c:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 801377e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8013784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013786:	f7fd feca 	bl	801151e <tcp_seg_free>
            while (next &&
 801378a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801378c:	2b00      	cmp	r3, #0
 801378e:	d00e      	beq.n	80137ae <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013790:	4b8e      	ldr	r3, [pc, #568]	; (80139cc <tcp_receive+0xbd8>)
 8013792:	881b      	ldrh	r3, [r3, #0]
 8013794:	461a      	mov	r2, r3
 8013796:	4b8e      	ldr	r3, [pc, #568]	; (80139d0 <tcp_receive+0xbdc>)
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	441a      	add	r2, r3
 801379c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801379e:	68db      	ldr	r3, [r3, #12]
 80137a0:	685b      	ldr	r3, [r3, #4]
 80137a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80137a4:	8909      	ldrh	r1, [r1, #8]
 80137a6:	440b      	add	r3, r1
 80137a8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	da9d      	bge.n	80136ea <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80137ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d057      	beq.n	8013864 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 80137b4:	4b85      	ldr	r3, [pc, #532]	; (80139cc <tcp_receive+0xbd8>)
 80137b6:	881b      	ldrh	r3, [r3, #0]
 80137b8:	461a      	mov	r2, r3
 80137ba:	4b85      	ldr	r3, [pc, #532]	; (80139d0 <tcp_receive+0xbdc>)
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	441a      	add	r2, r3
 80137c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137c2:	68db      	ldr	r3, [r3, #12]
 80137c4:	685b      	ldr	r3, [r3, #4]
 80137c6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	dd4b      	ble.n	8013864 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80137cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ce:	68db      	ldr	r3, [r3, #12]
 80137d0:	685b      	ldr	r3, [r3, #4]
 80137d2:	b29a      	uxth	r2, r3
 80137d4:	4b7e      	ldr	r3, [pc, #504]	; (80139d0 <tcp_receive+0xbdc>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	b29b      	uxth	r3, r3
 80137da:	1ad3      	subs	r3, r2, r3
 80137dc:	b29a      	uxth	r2, r3
 80137de:	4b7d      	ldr	r3, [pc, #500]	; (80139d4 <tcp_receive+0xbe0>)
 80137e0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80137e2:	4b7c      	ldr	r3, [pc, #496]	; (80139d4 <tcp_receive+0xbe0>)
 80137e4:	68db      	ldr	r3, [r3, #12]
 80137e6:	899b      	ldrh	r3, [r3, #12]
 80137e8:	b29b      	uxth	r3, r3
 80137ea:	4618      	mov	r0, r3
 80137ec:	f7fb fa26 	bl	800ec3c <lwip_htons>
 80137f0:	4603      	mov	r3, r0
 80137f2:	f003 0302 	and.w	r3, r3, #2
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d005      	beq.n	8013806 <tcp_receive+0xa12>
                inseg.len -= 1;
 80137fa:	4b76      	ldr	r3, [pc, #472]	; (80139d4 <tcp_receive+0xbe0>)
 80137fc:	891b      	ldrh	r3, [r3, #8]
 80137fe:	3b01      	subs	r3, #1
 8013800:	b29a      	uxth	r2, r3
 8013802:	4b74      	ldr	r3, [pc, #464]	; (80139d4 <tcp_receive+0xbe0>)
 8013804:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013806:	4b73      	ldr	r3, [pc, #460]	; (80139d4 <tcp_receive+0xbe0>)
 8013808:	685a      	ldr	r2, [r3, #4]
 801380a:	4b72      	ldr	r3, [pc, #456]	; (80139d4 <tcp_receive+0xbe0>)
 801380c:	891b      	ldrh	r3, [r3, #8]
 801380e:	4619      	mov	r1, r3
 8013810:	4610      	mov	r0, r2
 8013812:	f7fc fbb7 	bl	800ff84 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013816:	4b6f      	ldr	r3, [pc, #444]	; (80139d4 <tcp_receive+0xbe0>)
 8013818:	891c      	ldrh	r4, [r3, #8]
 801381a:	4b6e      	ldr	r3, [pc, #440]	; (80139d4 <tcp_receive+0xbe0>)
 801381c:	68db      	ldr	r3, [r3, #12]
 801381e:	899b      	ldrh	r3, [r3, #12]
 8013820:	b29b      	uxth	r3, r3
 8013822:	4618      	mov	r0, r3
 8013824:	f7fb fa0a 	bl	800ec3c <lwip_htons>
 8013828:	4603      	mov	r3, r0
 801382a:	f003 0303 	and.w	r3, r3, #3
 801382e:	2b00      	cmp	r3, #0
 8013830:	d001      	beq.n	8013836 <tcp_receive+0xa42>
 8013832:	2301      	movs	r3, #1
 8013834:	e000      	b.n	8013838 <tcp_receive+0xa44>
 8013836:	2300      	movs	r3, #0
 8013838:	4423      	add	r3, r4
 801383a:	b29a      	uxth	r2, r3
 801383c:	4b63      	ldr	r3, [pc, #396]	; (80139cc <tcp_receive+0xbd8>)
 801383e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013840:	4b62      	ldr	r3, [pc, #392]	; (80139cc <tcp_receive+0xbd8>)
 8013842:	881b      	ldrh	r3, [r3, #0]
 8013844:	461a      	mov	r2, r3
 8013846:	4b62      	ldr	r3, [pc, #392]	; (80139d0 <tcp_receive+0xbdc>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	441a      	add	r2, r3
 801384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801384e:	68db      	ldr	r3, [r3, #12]
 8013850:	685b      	ldr	r3, [r3, #4]
 8013852:	429a      	cmp	r2, r3
 8013854:	d006      	beq.n	8013864 <tcp_receive+0xa70>
 8013856:	4b60      	ldr	r3, [pc, #384]	; (80139d8 <tcp_receive+0xbe4>)
 8013858:	f240 52af 	movw	r2, #1455	; 0x5af
 801385c:	495f      	ldr	r1, [pc, #380]	; (80139dc <tcp_receive+0xbe8>)
 801385e:	4860      	ldr	r0, [pc, #384]	; (80139e0 <tcp_receive+0xbec>)
 8013860:	f004 fa50 	bl	8017d04 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013868:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801386a:	4b58      	ldr	r3, [pc, #352]	; (80139cc <tcp_receive+0xbd8>)
 801386c:	881b      	ldrh	r3, [r3, #0]
 801386e:	461a      	mov	r2, r3
 8013870:	4b57      	ldr	r3, [pc, #348]	; (80139d0 <tcp_receive+0xbdc>)
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	441a      	add	r2, r3
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801387e:	4b53      	ldr	r3, [pc, #332]	; (80139cc <tcp_receive+0xbd8>)
 8013880:	881b      	ldrh	r3, [r3, #0]
 8013882:	429a      	cmp	r2, r3
 8013884:	d206      	bcs.n	8013894 <tcp_receive+0xaa0>
 8013886:	4b54      	ldr	r3, [pc, #336]	; (80139d8 <tcp_receive+0xbe4>)
 8013888:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801388c:	4955      	ldr	r1, [pc, #340]	; (80139e4 <tcp_receive+0xbf0>)
 801388e:	4854      	ldr	r0, [pc, #336]	; (80139e0 <tcp_receive+0xbec>)
 8013890:	f004 fa38 	bl	8017d04 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013898:	4b4c      	ldr	r3, [pc, #304]	; (80139cc <tcp_receive+0xbd8>)
 801389a:	881b      	ldrh	r3, [r3, #0]
 801389c:	1ad3      	subs	r3, r2, r3
 801389e:	b29a      	uxth	r2, r3
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80138a4:	6878      	ldr	r0, [r7, #4]
 80138a6:	f7fd f9eb 	bl	8010c80 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80138aa:	4b4a      	ldr	r3, [pc, #296]	; (80139d4 <tcp_receive+0xbe0>)
 80138ac:	685b      	ldr	r3, [r3, #4]
 80138ae:	891b      	ldrh	r3, [r3, #8]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d006      	beq.n	80138c2 <tcp_receive+0xace>
          recv_data = inseg.p;
 80138b4:	4b47      	ldr	r3, [pc, #284]	; (80139d4 <tcp_receive+0xbe0>)
 80138b6:	685b      	ldr	r3, [r3, #4]
 80138b8:	4a4b      	ldr	r2, [pc, #300]	; (80139e8 <tcp_receive+0xbf4>)
 80138ba:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80138bc:	4b45      	ldr	r3, [pc, #276]	; (80139d4 <tcp_receive+0xbe0>)
 80138be:	2200      	movs	r2, #0
 80138c0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80138c2:	4b44      	ldr	r3, [pc, #272]	; (80139d4 <tcp_receive+0xbe0>)
 80138c4:	68db      	ldr	r3, [r3, #12]
 80138c6:	899b      	ldrh	r3, [r3, #12]
 80138c8:	b29b      	uxth	r3, r3
 80138ca:	4618      	mov	r0, r3
 80138cc:	f7fb f9b6 	bl	800ec3c <lwip_htons>
 80138d0:	4603      	mov	r3, r0
 80138d2:	f003 0301 	and.w	r3, r3, #1
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	f000 80b4 	beq.w	8013a44 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80138dc:	4b43      	ldr	r3, [pc, #268]	; (80139ec <tcp_receive+0xbf8>)
 80138de:	781b      	ldrb	r3, [r3, #0]
 80138e0:	f043 0320 	orr.w	r3, r3, #32
 80138e4:	b2da      	uxtb	r2, r3
 80138e6:	4b41      	ldr	r3, [pc, #260]	; (80139ec <tcp_receive+0xbf8>)
 80138e8:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80138ea:	e0ab      	b.n	8013a44 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138f0:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138f6:	68db      	ldr	r3, [r3, #12]
 80138f8:	685b      	ldr	r3, [r3, #4]
 80138fa:	4a35      	ldr	r2, [pc, #212]	; (80139d0 <tcp_receive+0xbdc>)
 80138fc:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	891b      	ldrh	r3, [r3, #8]
 8013902:	461c      	mov	r4, r3
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	68db      	ldr	r3, [r3, #12]
 8013908:	899b      	ldrh	r3, [r3, #12]
 801390a:	b29b      	uxth	r3, r3
 801390c:	4618      	mov	r0, r3
 801390e:	f7fb f995 	bl	800ec3c <lwip_htons>
 8013912:	4603      	mov	r3, r0
 8013914:	f003 0303 	and.w	r3, r3, #3
 8013918:	2b00      	cmp	r3, #0
 801391a:	d001      	beq.n	8013920 <tcp_receive+0xb2c>
 801391c:	2301      	movs	r3, #1
 801391e:	e000      	b.n	8013922 <tcp_receive+0xb2e>
 8013920:	2300      	movs	r3, #0
 8013922:	191a      	adds	r2, r3, r4
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013928:	441a      	add	r2, r3
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013932:	461c      	mov	r4, r3
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	891b      	ldrh	r3, [r3, #8]
 8013938:	461d      	mov	r5, r3
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	68db      	ldr	r3, [r3, #12]
 801393e:	899b      	ldrh	r3, [r3, #12]
 8013940:	b29b      	uxth	r3, r3
 8013942:	4618      	mov	r0, r3
 8013944:	f7fb f97a 	bl	800ec3c <lwip_htons>
 8013948:	4603      	mov	r3, r0
 801394a:	f003 0303 	and.w	r3, r3, #3
 801394e:	2b00      	cmp	r3, #0
 8013950:	d001      	beq.n	8013956 <tcp_receive+0xb62>
 8013952:	2301      	movs	r3, #1
 8013954:	e000      	b.n	8013958 <tcp_receive+0xb64>
 8013956:	2300      	movs	r3, #0
 8013958:	442b      	add	r3, r5
 801395a:	429c      	cmp	r4, r3
 801395c:	d206      	bcs.n	801396c <tcp_receive+0xb78>
 801395e:	4b1e      	ldr	r3, [pc, #120]	; (80139d8 <tcp_receive+0xbe4>)
 8013960:	f240 52de 	movw	r2, #1502	; 0x5de
 8013964:	4922      	ldr	r1, [pc, #136]	; (80139f0 <tcp_receive+0xbfc>)
 8013966:	481e      	ldr	r0, [pc, #120]	; (80139e0 <tcp_receive+0xbec>)
 8013968:	f004 f9cc 	bl	8017d04 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	891b      	ldrh	r3, [r3, #8]
 8013970:	461c      	mov	r4, r3
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	68db      	ldr	r3, [r3, #12]
 8013976:	899b      	ldrh	r3, [r3, #12]
 8013978:	b29b      	uxth	r3, r3
 801397a:	4618      	mov	r0, r3
 801397c:	f7fb f95e 	bl	800ec3c <lwip_htons>
 8013980:	4603      	mov	r3, r0
 8013982:	f003 0303 	and.w	r3, r3, #3
 8013986:	2b00      	cmp	r3, #0
 8013988:	d001      	beq.n	801398e <tcp_receive+0xb9a>
 801398a:	2301      	movs	r3, #1
 801398c:	e000      	b.n	8013990 <tcp_receive+0xb9c>
 801398e:	2300      	movs	r3, #0
 8013990:	1919      	adds	r1, r3, r4
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013996:	b28b      	uxth	r3, r1
 8013998:	1ad3      	subs	r3, r2, r3
 801399a:	b29a      	uxth	r2, r3
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80139a0:	6878      	ldr	r0, [r7, #4]
 80139a2:	f7fd f96d 	bl	8010c80 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	685b      	ldr	r3, [r3, #4]
 80139aa:	891b      	ldrh	r3, [r3, #8]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d028      	beq.n	8013a02 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80139b0:	4b0d      	ldr	r3, [pc, #52]	; (80139e8 <tcp_receive+0xbf4>)
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d01d      	beq.n	80139f4 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 80139b8:	4b0b      	ldr	r3, [pc, #44]	; (80139e8 <tcp_receive+0xbf4>)
 80139ba:	681a      	ldr	r2, [r3, #0]
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	685b      	ldr	r3, [r3, #4]
 80139c0:	4619      	mov	r1, r3
 80139c2:	4610      	mov	r0, r2
 80139c4:	f7fc fd2c 	bl	8010420 <pbuf_cat>
 80139c8:	e018      	b.n	80139fc <tcp_receive+0xc08>
 80139ca:	bf00      	nop
 80139cc:	2402182a 	.word	0x2402182a
 80139d0:	24021820 	.word	0x24021820
 80139d4:	24021800 	.word	0x24021800
 80139d8:	08019c70 	.word	0x08019c70
 80139dc:	08019f74 	.word	0x08019f74
 80139e0:	08019cb4 	.word	0x08019cb4
 80139e4:	08019fb0 	.word	0x08019fb0
 80139e8:	24021830 	.word	0x24021830
 80139ec:	2402182d 	.word	0x2402182d
 80139f0:	08019fd0 	.word	0x08019fd0
            } else {
              recv_data = cseg->p;
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	685b      	ldr	r3, [r3, #4]
 80139f8:	4a71      	ldr	r2, [pc, #452]	; (8013bc0 <tcp_receive+0xdcc>)
 80139fa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	2200      	movs	r2, #0
 8013a00:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	68db      	ldr	r3, [r3, #12]
 8013a06:	899b      	ldrh	r3, [r3, #12]
 8013a08:	b29b      	uxth	r3, r3
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f7fb f916 	bl	800ec3c <lwip_htons>
 8013a10:	4603      	mov	r3, r0
 8013a12:	f003 0301 	and.w	r3, r3, #1
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d00d      	beq.n	8013a36 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013a1a:	4b6a      	ldr	r3, [pc, #424]	; (8013bc4 <tcp_receive+0xdd0>)
 8013a1c:	781b      	ldrb	r3, [r3, #0]
 8013a1e:	f043 0320 	orr.w	r3, r3, #32
 8013a22:	b2da      	uxtb	r2, r3
 8013a24:	4b67      	ldr	r3, [pc, #412]	; (8013bc4 <tcp_receive+0xdd0>)
 8013a26:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	7d1b      	ldrb	r3, [r3, #20]
 8013a2c:	2b04      	cmp	r3, #4
 8013a2e:	d102      	bne.n	8013a36 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	2207      	movs	r2, #7
 8013a34:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	681a      	ldr	r2, [r3, #0]
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8013a3e:	68f8      	ldr	r0, [r7, #12]
 8013a40:	f7fd fd6d 	bl	801151e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d008      	beq.n	8013a5e <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a50:	68db      	ldr	r3, [r3, #12]
 8013a52:	685a      	ldr	r2, [r3, #4]
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8013a58:	429a      	cmp	r2, r3
 8013a5a:	f43f af47 	beq.w	80138ec <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	7e9b      	ldrb	r3, [r3, #26]
 8013a62:	f003 0301 	and.w	r3, r3, #1
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d00e      	beq.n	8013a88 <tcp_receive+0xc94>
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	7e9b      	ldrb	r3, [r3, #26]
 8013a6e:	f023 0301 	bic.w	r3, r3, #1
 8013a72:	b2da      	uxtb	r2, r3
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	769a      	strb	r2, [r3, #26]
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	7e9b      	ldrb	r3, [r3, #26]
 8013a7c:	f043 0302 	orr.w	r3, r3, #2
 8013a80:	b2da      	uxtb	r2, r3
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013a86:	e181      	b.n	8013d8c <tcp_receive+0xf98>
        tcp_ack(pcb);
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	7e9b      	ldrb	r3, [r3, #26]
 8013a8c:	f043 0301 	orr.w	r3, r3, #1
 8013a90:	b2da      	uxtb	r2, r3
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013a96:	e179      	b.n	8013d8c <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	f000 fc93 	bl	80143c4 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d106      	bne.n	8013ab4 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013aa6:	4848      	ldr	r0, [pc, #288]	; (8013bc8 <tcp_receive+0xdd4>)
 8013aa8:	f7fd fd51 	bl	801154e <tcp_seg_copy>
 8013aac:	4602      	mov	r2, r0
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8013ab2:	e16b      	b.n	8013d8c <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013abc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013abe:	e150      	b.n	8013d62 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8013ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ac2:	68db      	ldr	r3, [r3, #12]
 8013ac4:	685a      	ldr	r2, [r3, #4]
 8013ac6:	4b41      	ldr	r3, [pc, #260]	; (8013bcc <tcp_receive+0xdd8>)
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	429a      	cmp	r2, r3
 8013acc:	d11d      	bne.n	8013b0a <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013ace:	4b3e      	ldr	r3, [pc, #248]	; (8013bc8 <tcp_receive+0xdd4>)
 8013ad0:	891a      	ldrh	r2, [r3, #8]
 8013ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ad4:	891b      	ldrh	r3, [r3, #8]
 8013ad6:	429a      	cmp	r2, r3
 8013ad8:	f240 8148 	bls.w	8013d6c <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8013adc:	483a      	ldr	r0, [pc, #232]	; (8013bc8 <tcp_receive+0xdd4>)
 8013ade:	f7fd fd36 	bl	801154e <tcp_seg_copy>
 8013ae2:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	f000 8142 	beq.w	8013d70 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8013aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d003      	beq.n	8013afa <tcp_receive+0xd06>
                    prev->next = cseg;
 8013af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af4:	68fa      	ldr	r2, [r7, #12]
 8013af6:	601a      	str	r2, [r3, #0]
 8013af8:	e002      	b.n	8013b00 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	68fa      	ldr	r2, [r7, #12]
 8013afe:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013b00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013b02:	68f8      	ldr	r0, [r7, #12]
 8013b04:	f7ff f900 	bl	8012d08 <tcp_oos_insert_segment>
                }
                break;
 8013b08:	e132      	b.n	8013d70 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8013b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d117      	bne.n	8013b40 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013b10:	4b2e      	ldr	r3, [pc, #184]	; (8013bcc <tcp_receive+0xdd8>)
 8013b12:	681a      	ldr	r2, [r3, #0]
 8013b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b16:	68db      	ldr	r3, [r3, #12]
 8013b18:	685b      	ldr	r3, [r3, #4]
 8013b1a:	1ad3      	subs	r3, r2, r3
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	da57      	bge.n	8013bd0 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8013b20:	4829      	ldr	r0, [pc, #164]	; (8013bc8 <tcp_receive+0xdd4>)
 8013b22:	f7fd fd14 	bl	801154e <tcp_seg_copy>
 8013b26:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	f000 8122 	beq.w	8013d74 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	68fa      	ldr	r2, [r7, #12]
 8013b34:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8013b36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013b38:	68f8      	ldr	r0, [r7, #12]
 8013b3a:	f7ff f8e5 	bl	8012d08 <tcp_oos_insert_segment>
                  }
                  break;
 8013b3e:	e119      	b.n	8013d74 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8013b40:	4b22      	ldr	r3, [pc, #136]	; (8013bcc <tcp_receive+0xdd8>)
 8013b42:	681a      	ldr	r2, [r3, #0]
 8013b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b46:	68db      	ldr	r3, [r3, #12]
 8013b48:	685b      	ldr	r3, [r3, #4]
 8013b4a:	1ad3      	subs	r3, r2, r3
 8013b4c:	3b01      	subs	r3, #1
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	db3e      	blt.n	8013bd0 <tcp_receive+0xddc>
 8013b52:	4b1e      	ldr	r3, [pc, #120]	; (8013bcc <tcp_receive+0xdd8>)
 8013b54:	681a      	ldr	r2, [r3, #0]
 8013b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b58:	68db      	ldr	r3, [r3, #12]
 8013b5a:	685b      	ldr	r3, [r3, #4]
 8013b5c:	1ad3      	subs	r3, r2, r3
 8013b5e:	3301      	adds	r3, #1
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	dc35      	bgt.n	8013bd0 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8013b64:	4818      	ldr	r0, [pc, #96]	; (8013bc8 <tcp_receive+0xdd4>)
 8013b66:	f7fd fcf2 	bl	801154e <tcp_seg_copy>
 8013b6a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	f000 8102 	beq.w	8013d78 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b76:	68db      	ldr	r3, [r3, #12]
 8013b78:	685b      	ldr	r3, [r3, #4]
 8013b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b7c:	8912      	ldrh	r2, [r2, #8]
 8013b7e:	441a      	add	r2, r3
 8013b80:	4b12      	ldr	r3, [pc, #72]	; (8013bcc <tcp_receive+0xdd8>)
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	1ad3      	subs	r3, r2, r3
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	dd12      	ble.n	8013bb0 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013b8a:	4b10      	ldr	r3, [pc, #64]	; (8013bcc <tcp_receive+0xdd8>)
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	b29a      	uxth	r2, r3
 8013b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b92:	68db      	ldr	r3, [r3, #12]
 8013b94:	685b      	ldr	r3, [r3, #4]
 8013b96:	b29b      	uxth	r3, r3
 8013b98:	1ad3      	subs	r3, r2, r3
 8013b9a:	b29a      	uxth	r2, r3
 8013b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b9e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ba2:	685a      	ldr	r2, [r3, #4]
 8013ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ba6:	891b      	ldrh	r3, [r3, #8]
 8013ba8:	4619      	mov	r1, r3
 8013baa:	4610      	mov	r0, r2
 8013bac:	f7fc f9ea 	bl	800ff84 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb2:	68fa      	ldr	r2, [r7, #12]
 8013bb4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013bb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013bb8:	68f8      	ldr	r0, [r7, #12]
 8013bba:	f7ff f8a5 	bl	8012d08 <tcp_oos_insert_segment>
                  }
                  break;
 8013bbe:	e0db      	b.n	8013d78 <tcp_receive+0xf84>
 8013bc0:	24021830 	.word	0x24021830
 8013bc4:	2402182d 	.word	0x2402182d
 8013bc8:	24021800 	.word	0x24021800
 8013bcc:	24021820 	.word	0x24021820
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	f040 80bf 	bne.w	8013d58 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8013bda:	4b7c      	ldr	r3, [pc, #496]	; (8013dcc <tcp_receive+0xfd8>)
 8013bdc:	681a      	ldr	r2, [r3, #0]
 8013bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013be0:	68db      	ldr	r3, [r3, #12]
 8013be2:	685b      	ldr	r3, [r3, #4]
 8013be4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	f340 80b6 	ble.w	8013d58 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bee:	68db      	ldr	r3, [r3, #12]
 8013bf0:	899b      	ldrh	r3, [r3, #12]
 8013bf2:	b29b      	uxth	r3, r3
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	f7fb f821 	bl	800ec3c <lwip_htons>
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	f003 0301 	and.w	r3, r3, #1
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	f040 80bb 	bne.w	8013d7c <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013c06:	4872      	ldr	r0, [pc, #456]	; (8013dd0 <tcp_receive+0xfdc>)
 8013c08:	f7fd fca1 	bl	801154e <tcp_seg_copy>
 8013c0c:	4602      	mov	r2, r0
 8013c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c10:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8013c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	f000 80b2 	beq.w	8013d80 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c1e:	68db      	ldr	r3, [r3, #12]
 8013c20:	685b      	ldr	r3, [r3, #4]
 8013c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c24:	8912      	ldrh	r2, [r2, #8]
 8013c26:	441a      	add	r2, r3
 8013c28:	4b68      	ldr	r3, [pc, #416]	; (8013dcc <tcp_receive+0xfd8>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	1ad3      	subs	r3, r2, r3
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	dd12      	ble.n	8013c58 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013c32:	4b66      	ldr	r3, [pc, #408]	; (8013dcc <tcp_receive+0xfd8>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	b29a      	uxth	r2, r3
 8013c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c3a:	68db      	ldr	r3, [r3, #12]
 8013c3c:	685b      	ldr	r3, [r3, #4]
 8013c3e:	b29b      	uxth	r3, r3
 8013c40:	1ad3      	subs	r3, r2, r3
 8013c42:	b29a      	uxth	r2, r3
 8013c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c46:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c4a:	685a      	ldr	r2, [r3, #4]
 8013c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c4e:	891b      	ldrh	r3, [r3, #8]
 8013c50:	4619      	mov	r1, r3
 8013c52:	4610      	mov	r0, r2
 8013c54:	f7fc f996 	bl	800ff84 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013c58:	4b5e      	ldr	r3, [pc, #376]	; (8013dd4 <tcp_receive+0xfe0>)
 8013c5a:	881b      	ldrh	r3, [r3, #0]
 8013c5c:	461a      	mov	r2, r3
 8013c5e:	4b5b      	ldr	r3, [pc, #364]	; (8013dcc <tcp_receive+0xfd8>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	441a      	add	r2, r3
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c68:	6879      	ldr	r1, [r7, #4]
 8013c6a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013c6c:	440b      	add	r3, r1
 8013c6e:	1ad3      	subs	r3, r2, r3
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	f340 8085 	ble.w	8013d80 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	68db      	ldr	r3, [r3, #12]
 8013c7c:	899b      	ldrh	r3, [r3, #12]
 8013c7e:	b29b      	uxth	r3, r3
 8013c80:	4618      	mov	r0, r3
 8013c82:	f7fa ffdb 	bl	800ec3c <lwip_htons>
 8013c86:	4603      	mov	r3, r0
 8013c88:	f003 0301 	and.w	r3, r3, #1
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d01e      	beq.n	8013cce <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	68db      	ldr	r3, [r3, #12]
 8013c96:	899b      	ldrh	r3, [r3, #12]
 8013c98:	b29b      	uxth	r3, r3
 8013c9a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013c9e:	b29c      	uxth	r4, r3
 8013ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	68db      	ldr	r3, [r3, #12]
 8013ca6:	899b      	ldrh	r3, [r3, #12]
 8013ca8:	b29b      	uxth	r3, r3
 8013caa:	4618      	mov	r0, r3
 8013cac:	f7fa ffc6 	bl	800ec3c <lwip_htons>
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013cb6:	b29b      	uxth	r3, r3
 8013cb8:	4618      	mov	r0, r3
 8013cba:	f7fa ffbf 	bl	800ec3c <lwip_htons>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	461a      	mov	r2, r3
 8013cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	68db      	ldr	r3, [r3, #12]
 8013cc8:	4322      	orrs	r2, r4
 8013cca:	b292      	uxth	r2, r2
 8013ccc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cd2:	b29a      	uxth	r2, r3
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013cd8:	4413      	add	r3, r2
 8013cda:	b299      	uxth	r1, r3
 8013cdc:	4b3b      	ldr	r3, [pc, #236]	; (8013dcc <tcp_receive+0xfd8>)
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	b29a      	uxth	r2, r3
 8013ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	1a8a      	subs	r2, r1, r2
 8013ce8:	b292      	uxth	r2, r2
 8013cea:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	685a      	ldr	r2, [r3, #4]
 8013cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	891b      	ldrh	r3, [r3, #8]
 8013cf8:	4619      	mov	r1, r3
 8013cfa:	4610      	mov	r0, r2
 8013cfc:	f7fc f942 	bl	800ff84 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	891c      	ldrh	r4, [r3, #8]
 8013d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	68db      	ldr	r3, [r3, #12]
 8013d0c:	899b      	ldrh	r3, [r3, #12]
 8013d0e:	b29b      	uxth	r3, r3
 8013d10:	4618      	mov	r0, r3
 8013d12:	f7fa ff93 	bl	800ec3c <lwip_htons>
 8013d16:	4603      	mov	r3, r0
 8013d18:	f003 0303 	and.w	r3, r3, #3
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d001      	beq.n	8013d24 <tcp_receive+0xf30>
 8013d20:	2301      	movs	r3, #1
 8013d22:	e000      	b.n	8013d26 <tcp_receive+0xf32>
 8013d24:	2300      	movs	r3, #0
 8013d26:	4423      	add	r3, r4
 8013d28:	b29a      	uxth	r2, r3
 8013d2a:	4b2a      	ldr	r3, [pc, #168]	; (8013dd4 <tcp_receive+0xfe0>)
 8013d2c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013d2e:	4b29      	ldr	r3, [pc, #164]	; (8013dd4 <tcp_receive+0xfe0>)
 8013d30:	881b      	ldrh	r3, [r3, #0]
 8013d32:	461a      	mov	r2, r3
 8013d34:	4b25      	ldr	r3, [pc, #148]	; (8013dcc <tcp_receive+0xfd8>)
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	441a      	add	r2, r3
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d3e:	6879      	ldr	r1, [r7, #4]
 8013d40:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013d42:	440b      	add	r3, r1
 8013d44:	429a      	cmp	r2, r3
 8013d46:	d01b      	beq.n	8013d80 <tcp_receive+0xf8c>
 8013d48:	4b23      	ldr	r3, [pc, #140]	; (8013dd8 <tcp_receive+0xfe4>)
 8013d4a:	f240 627b 	movw	r2, #1659	; 0x67b
 8013d4e:	4923      	ldr	r1, [pc, #140]	; (8013ddc <tcp_receive+0xfe8>)
 8013d50:	4823      	ldr	r0, [pc, #140]	; (8013de0 <tcp_receive+0xfec>)
 8013d52:	f003 ffd7 	bl	8017d04 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013d56:	e013      	b.n	8013d80 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 8013d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d5a:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	f47f aeab 	bne.w	8013ac0 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 8013d6a:	e00f      	b.n	8013d8c <tcp_receive+0xf98>
                break;
 8013d6c:	bf00      	nop
 8013d6e:	e00d      	b.n	8013d8c <tcp_receive+0xf98>
                break;
 8013d70:	bf00      	nop
 8013d72:	e00b      	b.n	8013d8c <tcp_receive+0xf98>
                  break;
 8013d74:	bf00      	nop
 8013d76:	e009      	b.n	8013d8c <tcp_receive+0xf98>
                  break;
 8013d78:	bf00      	nop
 8013d7a:	e007      	b.n	8013d8c <tcp_receive+0xf98>
                  break;
 8013d7c:	bf00      	nop
 8013d7e:	e005      	b.n	8013d8c <tcp_receive+0xf98>
                break;
 8013d80:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8013d82:	e003      	b.n	8013d8c <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013d84:	6878      	ldr	r0, [r7, #4]
 8013d86:	f000 fb1d 	bl	80143c4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013d8a:	e01a      	b.n	8013dc2 <tcp_receive+0xfce>
 8013d8c:	e019      	b.n	8013dc2 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013d8e:	4b0f      	ldr	r3, [pc, #60]	; (8013dcc <tcp_receive+0xfd8>)
 8013d90:	681a      	ldr	r2, [r3, #0]
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d96:	1ad3      	subs	r3, r2, r3
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	db0a      	blt.n	8013db2 <tcp_receive+0xfbe>
 8013d9c:	4b0b      	ldr	r3, [pc, #44]	; (8013dcc <tcp_receive+0xfd8>)
 8013d9e:	681a      	ldr	r2, [r3, #0]
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013da4:	6879      	ldr	r1, [r7, #4]
 8013da6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013da8:	440b      	add	r3, r1
 8013daa:	1ad3      	subs	r3, r2, r3
 8013dac:	3301      	adds	r3, #1
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	dd07      	ble.n	8013dc2 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	7e9b      	ldrb	r3, [r3, #26]
 8013db6:	f043 0302 	orr.w	r3, r3, #2
 8013dba:	b2da      	uxtb	r2, r3
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8013dc0:	e7ff      	b.n	8013dc2 <tcp_receive+0xfce>
 8013dc2:	bf00      	nop
 8013dc4:	3734      	adds	r7, #52	; 0x34
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013dca:	bf00      	nop
 8013dcc:	24021820 	.word	0x24021820
 8013dd0:	24021800 	.word	0x24021800
 8013dd4:	2402182a 	.word	0x2402182a
 8013dd8:	08019c70 	.word	0x08019c70
 8013ddc:	08019f3c 	.word	0x08019f3c
 8013de0:	08019cb4 	.word	0x08019cb4

08013de4 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8013de4:	b480      	push	{r7}
 8013de6:	b083      	sub	sp, #12
 8013de8:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8013dea:	4b18      	ldr	r3, [pc, #96]	; (8013e4c <tcp_getoptbyte+0x68>)
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d005      	beq.n	8013dfe <tcp_getoptbyte+0x1a>
 8013df2:	4b17      	ldr	r3, [pc, #92]	; (8013e50 <tcp_getoptbyte+0x6c>)
 8013df4:	881a      	ldrh	r2, [r3, #0]
 8013df6:	4b17      	ldr	r3, [pc, #92]	; (8013e54 <tcp_getoptbyte+0x70>)
 8013df8:	881b      	ldrh	r3, [r3, #0]
 8013dfa:	429a      	cmp	r2, r3
 8013dfc:	d20e      	bcs.n	8013e1c <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8013dfe:	4b16      	ldr	r3, [pc, #88]	; (8013e58 <tcp_getoptbyte+0x74>)
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	3314      	adds	r3, #20
 8013e04:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8013e06:	4b12      	ldr	r3, [pc, #72]	; (8013e50 <tcp_getoptbyte+0x6c>)
 8013e08:	881b      	ldrh	r3, [r3, #0]
 8013e0a:	1c5a      	adds	r2, r3, #1
 8013e0c:	b291      	uxth	r1, r2
 8013e0e:	4a10      	ldr	r2, [pc, #64]	; (8013e50 <tcp_getoptbyte+0x6c>)
 8013e10:	8011      	strh	r1, [r2, #0]
 8013e12:	461a      	mov	r2, r3
 8013e14:	683b      	ldr	r3, [r7, #0]
 8013e16:	4413      	add	r3, r2
 8013e18:	781b      	ldrb	r3, [r3, #0]
 8013e1a:	e010      	b.n	8013e3e <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8013e1c:	4b0c      	ldr	r3, [pc, #48]	; (8013e50 <tcp_getoptbyte+0x6c>)
 8013e1e:	881b      	ldrh	r3, [r3, #0]
 8013e20:	1c5a      	adds	r2, r3, #1
 8013e22:	b291      	uxth	r1, r2
 8013e24:	4a0a      	ldr	r2, [pc, #40]	; (8013e50 <tcp_getoptbyte+0x6c>)
 8013e26:	8011      	strh	r1, [r2, #0]
 8013e28:	b2da      	uxtb	r2, r3
 8013e2a:	4b0a      	ldr	r3, [pc, #40]	; (8013e54 <tcp_getoptbyte+0x70>)
 8013e2c:	881b      	ldrh	r3, [r3, #0]
 8013e2e:	b2db      	uxtb	r3, r3
 8013e30:	1ad3      	subs	r3, r2, r3
 8013e32:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8013e34:	4b05      	ldr	r3, [pc, #20]	; (8013e4c <tcp_getoptbyte+0x68>)
 8013e36:	681a      	ldr	r2, [r3, #0]
 8013e38:	79fb      	ldrb	r3, [r7, #7]
 8013e3a:	4413      	add	r3, r2
 8013e3c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013e3e:	4618      	mov	r0, r3
 8013e40:	370c      	adds	r7, #12
 8013e42:	46bd      	mov	sp, r7
 8013e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e48:	4770      	bx	lr
 8013e4a:	bf00      	nop
 8013e4c:	24021818 	.word	0x24021818
 8013e50:	2402181c 	.word	0x2402181c
 8013e54:	24021816 	.word	0x24021816
 8013e58:	24021810 	.word	0x24021810

08013e5c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b084      	sub	sp, #16
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013e64:	4b2d      	ldr	r3, [pc, #180]	; (8013f1c <tcp_parseopt+0xc0>)
 8013e66:	881b      	ldrh	r3, [r3, #0]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d053      	beq.n	8013f14 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013e6c:	4b2c      	ldr	r3, [pc, #176]	; (8013f20 <tcp_parseopt+0xc4>)
 8013e6e:	2200      	movs	r2, #0
 8013e70:	801a      	strh	r2, [r3, #0]
 8013e72:	e043      	b.n	8013efc <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8013e74:	f7ff ffb6 	bl	8013de4 <tcp_getoptbyte>
 8013e78:	4603      	mov	r3, r0
 8013e7a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013e7c:	7bfb      	ldrb	r3, [r7, #15]
 8013e7e:	2b01      	cmp	r3, #1
 8013e80:	d03c      	beq.n	8013efc <tcp_parseopt+0xa0>
 8013e82:	2b02      	cmp	r3, #2
 8013e84:	d002      	beq.n	8013e8c <tcp_parseopt+0x30>
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d03f      	beq.n	8013f0a <tcp_parseopt+0xae>
 8013e8a:	e026      	b.n	8013eda <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013e8c:	f7ff ffaa 	bl	8013de4 <tcp_getoptbyte>
 8013e90:	4603      	mov	r3, r0
 8013e92:	2b04      	cmp	r3, #4
 8013e94:	d13b      	bne.n	8013f0e <tcp_parseopt+0xb2>
 8013e96:	4b22      	ldr	r3, [pc, #136]	; (8013f20 <tcp_parseopt+0xc4>)
 8013e98:	881b      	ldrh	r3, [r3, #0]
 8013e9a:	3302      	adds	r3, #2
 8013e9c:	4a1f      	ldr	r2, [pc, #124]	; (8013f1c <tcp_parseopt+0xc0>)
 8013e9e:	8812      	ldrh	r2, [r2, #0]
 8013ea0:	4293      	cmp	r3, r2
 8013ea2:	dc34      	bgt.n	8013f0e <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8013ea4:	f7ff ff9e 	bl	8013de4 <tcp_getoptbyte>
 8013ea8:	4603      	mov	r3, r0
 8013eaa:	b29b      	uxth	r3, r3
 8013eac:	021b      	lsls	r3, r3, #8
 8013eae:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8013eb0:	f7ff ff98 	bl	8013de4 <tcp_getoptbyte>
 8013eb4:	4603      	mov	r3, r0
 8013eb6:	b29a      	uxth	r2, r3
 8013eb8:	89bb      	ldrh	r3, [r7, #12]
 8013eba:	4313      	orrs	r3, r2
 8013ebc:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013ebe:	89bb      	ldrh	r3, [r7, #12]
 8013ec0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013ec4:	d804      	bhi.n	8013ed0 <tcp_parseopt+0x74>
 8013ec6:	89bb      	ldrh	r3, [r7, #12]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d001      	beq.n	8013ed0 <tcp_parseopt+0x74>
 8013ecc:	89ba      	ldrh	r2, [r7, #12]
 8013ece:	e001      	b.n	8013ed4 <tcp_parseopt+0x78>
 8013ed0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8013ed8:	e010      	b.n	8013efc <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8013eda:	f7ff ff83 	bl	8013de4 <tcp_getoptbyte>
 8013ede:	4603      	mov	r3, r0
 8013ee0:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8013ee2:	7afb      	ldrb	r3, [r7, #11]
 8013ee4:	2b01      	cmp	r3, #1
 8013ee6:	d914      	bls.n	8013f12 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8013ee8:	7afb      	ldrb	r3, [r7, #11]
 8013eea:	b29a      	uxth	r2, r3
 8013eec:	4b0c      	ldr	r3, [pc, #48]	; (8013f20 <tcp_parseopt+0xc4>)
 8013eee:	881b      	ldrh	r3, [r3, #0]
 8013ef0:	4413      	add	r3, r2
 8013ef2:	b29b      	uxth	r3, r3
 8013ef4:	3b02      	subs	r3, #2
 8013ef6:	b29a      	uxth	r2, r3
 8013ef8:	4b09      	ldr	r3, [pc, #36]	; (8013f20 <tcp_parseopt+0xc4>)
 8013efa:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013efc:	4b08      	ldr	r3, [pc, #32]	; (8013f20 <tcp_parseopt+0xc4>)
 8013efe:	881a      	ldrh	r2, [r3, #0]
 8013f00:	4b06      	ldr	r3, [pc, #24]	; (8013f1c <tcp_parseopt+0xc0>)
 8013f02:	881b      	ldrh	r3, [r3, #0]
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d3b5      	bcc.n	8013e74 <tcp_parseopt+0x18>
 8013f08:	e004      	b.n	8013f14 <tcp_parseopt+0xb8>
        return;
 8013f0a:	bf00      	nop
 8013f0c:	e002      	b.n	8013f14 <tcp_parseopt+0xb8>
          return;
 8013f0e:	bf00      	nop
 8013f10:	e000      	b.n	8013f14 <tcp_parseopt+0xb8>
          return;
 8013f12:	bf00      	nop
      }
    }
  }
}
 8013f14:	3710      	adds	r7, #16
 8013f16:	46bd      	mov	sp, r7
 8013f18:	bd80      	pop	{r7, pc}
 8013f1a:	bf00      	nop
 8013f1c:	24021814 	.word	0x24021814
 8013f20:	2402181c 	.word	0x2402181c

08013f24 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013f24:	b480      	push	{r7}
 8013f26:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013f28:	4b05      	ldr	r3, [pc, #20]	; (8013f40 <tcp_trigger_input_pcb_close+0x1c>)
 8013f2a:	781b      	ldrb	r3, [r3, #0]
 8013f2c:	f043 0310 	orr.w	r3, r3, #16
 8013f30:	b2da      	uxtb	r2, r3
 8013f32:	4b03      	ldr	r3, [pc, #12]	; (8013f40 <tcp_trigger_input_pcb_close+0x1c>)
 8013f34:	701a      	strb	r2, [r3, #0]
}
 8013f36:	bf00      	nop
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3e:	4770      	bx	lr
 8013f40:	2402182d 	.word	0x2402182d

08013f44 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b086      	sub	sp, #24
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	60f8      	str	r0, [r7, #12]
 8013f4c:	607b      	str	r3, [r7, #4]
 8013f4e:	460b      	mov	r3, r1
 8013f50:	817b      	strh	r3, [r7, #10]
 8013f52:	4613      	mov	r3, r2
 8013f54:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013f56:	897a      	ldrh	r2, [r7, #10]
 8013f58:	893b      	ldrh	r3, [r7, #8]
 8013f5a:	4413      	add	r3, r2
 8013f5c:	b29b      	uxth	r3, r3
 8013f5e:	3314      	adds	r3, #20
 8013f60:	b29b      	uxth	r3, r3
 8013f62:	2200      	movs	r2, #0
 8013f64:	4619      	mov	r1, r3
 8013f66:	2001      	movs	r0, #1
 8013f68:	f7fb fe0e 	bl	800fb88 <pbuf_alloc>
 8013f6c:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013f6e:	697b      	ldr	r3, [r7, #20]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d057      	beq.n	8014024 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013f74:	697b      	ldr	r3, [r7, #20]
 8013f76:	895b      	ldrh	r3, [r3, #10]
 8013f78:	461a      	mov	r2, r3
 8013f7a:	897b      	ldrh	r3, [r7, #10]
 8013f7c:	3314      	adds	r3, #20
 8013f7e:	429a      	cmp	r2, r3
 8013f80:	da05      	bge.n	8013f8e <tcp_output_alloc_header+0x4a>
 8013f82:	4b2b      	ldr	r3, [pc, #172]	; (8014030 <tcp_output_alloc_header+0xec>)
 8013f84:	2273      	movs	r2, #115	; 0x73
 8013f86:	492b      	ldr	r1, [pc, #172]	; (8014034 <tcp_output_alloc_header+0xf0>)
 8013f88:	482b      	ldr	r0, [pc, #172]	; (8014038 <tcp_output_alloc_header+0xf4>)
 8013f8a:	f003 febb 	bl	8017d04 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013f8e:	697b      	ldr	r3, [r7, #20]
 8013f90:	685b      	ldr	r3, [r3, #4]
 8013f92:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	8adb      	ldrh	r3, [r3, #22]
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f7fa fe4f 	bl	800ec3c <lwip_htons>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	461a      	mov	r2, r3
 8013fa2:	693b      	ldr	r3, [r7, #16]
 8013fa4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	8b1b      	ldrh	r3, [r3, #24]
 8013faa:	4618      	mov	r0, r3
 8013fac:	f7fa fe46 	bl	800ec3c <lwip_htons>
 8013fb0:	4603      	mov	r3, r0
 8013fb2:	461a      	mov	r2, r3
 8013fb4:	693b      	ldr	r3, [r7, #16]
 8013fb6:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013fb8:	693b      	ldr	r3, [r7, #16]
 8013fba:	687a      	ldr	r2, [r7, #4]
 8013fbc:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	f7fa fe48 	bl	800ec58 <lwip_htonl>
 8013fc8:	4602      	mov	r2, r0
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8013fce:	897b      	ldrh	r3, [r7, #10]
 8013fd0:	089b      	lsrs	r3, r3, #2
 8013fd2:	b29b      	uxth	r3, r3
 8013fd4:	3305      	adds	r3, #5
 8013fd6:	b29b      	uxth	r3, r3
 8013fd8:	031b      	lsls	r3, r3, #12
 8013fda:	b29b      	uxth	r3, r3
 8013fdc:	f043 0310 	orr.w	r3, r3, #16
 8013fe0:	b29b      	uxth	r3, r3
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	f7fa fe2a 	bl	800ec3c <lwip_htons>
 8013fe8:	4603      	mov	r3, r0
 8013fea:	461a      	mov	r2, r3
 8013fec:	693b      	ldr	r3, [r7, #16]
 8013fee:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	f7fa fe21 	bl	800ec3c <lwip_htons>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	461a      	mov	r2, r3
 8013ffe:	693b      	ldr	r3, [r7, #16]
 8014000:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014002:	693b      	ldr	r3, [r7, #16]
 8014004:	2200      	movs	r2, #0
 8014006:	741a      	strb	r2, [r3, #16]
 8014008:	2200      	movs	r2, #0
 801400a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801400c:	693b      	ldr	r3, [r7, #16]
 801400e:	2200      	movs	r2, #0
 8014010:	749a      	strb	r2, [r3, #18]
 8014012:	2200      	movs	r2, #0
 8014014:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801401a:	68fa      	ldr	r2, [r7, #12]
 801401c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801401e:	441a      	add	r2, r3
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014024:	697b      	ldr	r3, [r7, #20]
}
 8014026:	4618      	mov	r0, r3
 8014028:	3718      	adds	r7, #24
 801402a:	46bd      	mov	sp, r7
 801402c:	bd80      	pop	{r7, pc}
 801402e:	bf00      	nop
 8014030:	08019ff8 	.word	0x08019ff8
 8014034:	0801a02c 	.word	0x0801a02c
 8014038:	0801a05c 	.word	0x0801a05c

0801403c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801403c:	b590      	push	{r4, r7, lr}
 801403e:	b085      	sub	sp, #20
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014048:	2b00      	cmp	r3, #0
 801404a:	d02d      	beq.n	80140a8 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014050:	60fb      	str	r3, [r7, #12]
 8014052:	e002      	b.n	801405a <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d1f8      	bne.n	8014054 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	68db      	ldr	r3, [r3, #12]
 8014066:	899b      	ldrh	r3, [r3, #12]
 8014068:	b29b      	uxth	r3, r3
 801406a:	4618      	mov	r0, r3
 801406c:	f7fa fde6 	bl	800ec3c <lwip_htons>
 8014070:	4603      	mov	r3, r0
 8014072:	f003 0307 	and.w	r3, r3, #7
 8014076:	2b00      	cmp	r3, #0
 8014078:	d116      	bne.n	80140a8 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	68db      	ldr	r3, [r3, #12]
 801407e:	899b      	ldrh	r3, [r3, #12]
 8014080:	b29c      	uxth	r4, r3
 8014082:	2001      	movs	r0, #1
 8014084:	f7fa fdda 	bl	800ec3c <lwip_htons>
 8014088:	4603      	mov	r3, r0
 801408a:	461a      	mov	r2, r3
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	68db      	ldr	r3, [r3, #12]
 8014090:	4322      	orrs	r2, r4
 8014092:	b292      	uxth	r2, r2
 8014094:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	7e9b      	ldrb	r3, [r3, #26]
 801409a:	f043 0320 	orr.w	r3, r3, #32
 801409e:	b2da      	uxtb	r2, r3
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 80140a4:	2300      	movs	r3, #0
 80140a6:	e004      	b.n	80140b2 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80140a8:	2101      	movs	r1, #1
 80140aa:	6878      	ldr	r0, [r7, #4]
 80140ac:	f000 f88e 	bl	80141cc <tcp_enqueue_flags>
 80140b0:	4603      	mov	r3, r0
}
 80140b2:	4618      	mov	r0, r3
 80140b4:	3714      	adds	r7, #20
 80140b6:	46bd      	mov	sp, r7
 80140b8:	bd90      	pop	{r4, r7, pc}
	...

080140bc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 80140bc:	b590      	push	{r4, r7, lr}
 80140be:	b087      	sub	sp, #28
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	60f8      	str	r0, [r7, #12]
 80140c4:	60b9      	str	r1, [r7, #8]
 80140c6:	603b      	str	r3, [r7, #0]
 80140c8:	4613      	mov	r3, r2
 80140ca:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80140cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80140d0:	009b      	lsls	r3, r3, #2
 80140d2:	b2db      	uxtb	r3, r3
 80140d4:	f003 0304 	and.w	r3, r3, #4
 80140d8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80140da:	2003      	movs	r0, #3
 80140dc:	f7fb fa74 	bl	800f5c8 <memp_malloc>
 80140e0:	6138      	str	r0, [r7, #16]
 80140e2:	693b      	ldr	r3, [r7, #16]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d104      	bne.n	80140f2 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80140e8:	68b8      	ldr	r0, [r7, #8]
 80140ea:	f7fc f8bf 	bl	801026c <pbuf_free>
    return NULL;
 80140ee:	2300      	movs	r3, #0
 80140f0:	e061      	b.n	80141b6 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 80140f2:	693b      	ldr	r3, [r7, #16]
 80140f4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80140f8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80140fa:	693b      	ldr	r3, [r7, #16]
 80140fc:	2200      	movs	r2, #0
 80140fe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014100:	693b      	ldr	r3, [r7, #16]
 8014102:	68ba      	ldr	r2, [r7, #8]
 8014104:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014106:	68bb      	ldr	r3, [r7, #8]
 8014108:	891a      	ldrh	r2, [r3, #8]
 801410a:	7dfb      	ldrb	r3, [r7, #23]
 801410c:	b29b      	uxth	r3, r3
 801410e:	429a      	cmp	r2, r3
 8014110:	d205      	bcs.n	801411e <tcp_create_segment+0x62>
 8014112:	4b2b      	ldr	r3, [pc, #172]	; (80141c0 <tcp_create_segment+0x104>)
 8014114:	22ba      	movs	r2, #186	; 0xba
 8014116:	492b      	ldr	r1, [pc, #172]	; (80141c4 <tcp_create_segment+0x108>)
 8014118:	482b      	ldr	r0, [pc, #172]	; (80141c8 <tcp_create_segment+0x10c>)
 801411a:	f003 fdf3 	bl	8017d04 <iprintf>
  seg->len = p->tot_len - optlen;
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	891a      	ldrh	r2, [r3, #8]
 8014122:	7dfb      	ldrb	r3, [r7, #23]
 8014124:	b29b      	uxth	r3, r3
 8014126:	1ad3      	subs	r3, r2, r3
 8014128:	b29a      	uxth	r2, r3
 801412a:	693b      	ldr	r3, [r7, #16]
 801412c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 801412e:	2114      	movs	r1, #20
 8014130:	68b8      	ldr	r0, [r7, #8]
 8014132:	f7fc f877 	bl	8010224 <pbuf_header>
 8014136:	4603      	mov	r3, r0
 8014138:	2b00      	cmp	r3, #0
 801413a:	d004      	beq.n	8014146 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801413c:	6938      	ldr	r0, [r7, #16]
 801413e:	f7fd f9ee 	bl	801151e <tcp_seg_free>
    return NULL;
 8014142:	2300      	movs	r3, #0
 8014144:	e037      	b.n	80141b6 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014146:	693b      	ldr	r3, [r7, #16]
 8014148:	685b      	ldr	r3, [r3, #4]
 801414a:	685a      	ldr	r2, [r3, #4]
 801414c:	693b      	ldr	r3, [r7, #16]
 801414e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	8ada      	ldrh	r2, [r3, #22]
 8014154:	693b      	ldr	r3, [r7, #16]
 8014156:	68dc      	ldr	r4, [r3, #12]
 8014158:	4610      	mov	r0, r2
 801415a:	f7fa fd6f 	bl	800ec3c <lwip_htons>
 801415e:	4603      	mov	r3, r0
 8014160:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	8b1a      	ldrh	r2, [r3, #24]
 8014166:	693b      	ldr	r3, [r7, #16]
 8014168:	68dc      	ldr	r4, [r3, #12]
 801416a:	4610      	mov	r0, r2
 801416c:	f7fa fd66 	bl	800ec3c <lwip_htons>
 8014170:	4603      	mov	r3, r0
 8014172:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014174:	693b      	ldr	r3, [r7, #16]
 8014176:	68dc      	ldr	r4, [r3, #12]
 8014178:	6838      	ldr	r0, [r7, #0]
 801417a:	f7fa fd6d 	bl	800ec58 <lwip_htonl>
 801417e:	4603      	mov	r3, r0
 8014180:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8014182:	7dfb      	ldrb	r3, [r7, #23]
 8014184:	089b      	lsrs	r3, r3, #2
 8014186:	b2db      	uxtb	r3, r3
 8014188:	b29b      	uxth	r3, r3
 801418a:	3305      	adds	r3, #5
 801418c:	b29b      	uxth	r3, r3
 801418e:	031b      	lsls	r3, r3, #12
 8014190:	b29a      	uxth	r2, r3
 8014192:	79fb      	ldrb	r3, [r7, #7]
 8014194:	b29b      	uxth	r3, r3
 8014196:	4313      	orrs	r3, r2
 8014198:	b29a      	uxth	r2, r3
 801419a:	693b      	ldr	r3, [r7, #16]
 801419c:	68dc      	ldr	r4, [r3, #12]
 801419e:	4610      	mov	r0, r2
 80141a0:	f7fa fd4c 	bl	800ec3c <lwip_htons>
 80141a4:	4603      	mov	r3, r0
 80141a6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80141a8:	693b      	ldr	r3, [r7, #16]
 80141aa:	68db      	ldr	r3, [r3, #12]
 80141ac:	2200      	movs	r2, #0
 80141ae:	749a      	strb	r2, [r3, #18]
 80141b0:	2200      	movs	r2, #0
 80141b2:	74da      	strb	r2, [r3, #19]
  return seg;
 80141b4:	693b      	ldr	r3, [r7, #16]
}
 80141b6:	4618      	mov	r0, r3
 80141b8:	371c      	adds	r7, #28
 80141ba:	46bd      	mov	sp, r7
 80141bc:	bd90      	pop	{r4, r7, pc}
 80141be:	bf00      	nop
 80141c0:	08019ff8 	.word	0x08019ff8
 80141c4:	0801a084 	.word	0x0801a084
 80141c8:	0801a05c 	.word	0x0801a05c

080141cc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b08a      	sub	sp, #40	; 0x28
 80141d0:	af02      	add	r7, sp, #8
 80141d2:	6078      	str	r0, [r7, #4]
 80141d4:	460b      	mov	r3, r1
 80141d6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80141d8:	2300      	movs	r3, #0
 80141da:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80141dc:	2300      	movs	r3, #0
 80141de:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80141e0:	78fb      	ldrb	r3, [r7, #3]
 80141e2:	f003 0303 	and.w	r3, r3, #3
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d106      	bne.n	80141f8 <tcp_enqueue_flags+0x2c>
 80141ea:	4b6f      	ldr	r3, [pc, #444]	; (80143a8 <tcp_enqueue_flags+0x1dc>)
 80141ec:	f240 321b 	movw	r2, #795	; 0x31b
 80141f0:	496e      	ldr	r1, [pc, #440]	; (80143ac <tcp_enqueue_flags+0x1e0>)
 80141f2:	486f      	ldr	r0, [pc, #444]	; (80143b0 <tcp_enqueue_flags+0x1e4>)
 80141f4:	f003 fd86 	bl	8017d04 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80141fe:	2b08      	cmp	r3, #8
 8014200:	d806      	bhi.n	8014210 <tcp_enqueue_flags+0x44>
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014208:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801420c:	4293      	cmp	r3, r2
 801420e:	d90e      	bls.n	801422e <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8014210:	78fb      	ldrb	r3, [r7, #3]
 8014212:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8014216:	2b00      	cmp	r3, #0
 8014218:	d109      	bne.n	801422e <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	7e9b      	ldrb	r3, [r3, #26]
 801421e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014222:	b2da      	uxtb	r2, r3
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8014228:	f04f 33ff 	mov.w	r3, #4294967295
 801422c:	e0b7      	b.n	801439e <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 801422e:	78fb      	ldrb	r3, [r7, #3]
 8014230:	f003 0302 	and.w	r3, r3, #2
 8014234:	2b00      	cmp	r3, #0
 8014236:	d001      	beq.n	801423c <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8014238:	2301      	movs	r3, #1
 801423a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801423c:	7ffb      	ldrb	r3, [r7, #31]
 801423e:	009b      	lsls	r3, r3, #2
 8014240:	b2db      	uxtb	r3, r3
 8014242:	f003 0304 	and.w	r3, r3, #4
 8014246:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014248:	7dfb      	ldrb	r3, [r7, #23]
 801424a:	b29b      	uxth	r3, r3
 801424c:	2200      	movs	r2, #0
 801424e:	4619      	mov	r1, r3
 8014250:	2000      	movs	r0, #0
 8014252:	f7fb fc99 	bl	800fb88 <pbuf_alloc>
 8014256:	6138      	str	r0, [r7, #16]
 8014258:	693b      	ldr	r3, [r7, #16]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d109      	bne.n	8014272 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	7e9b      	ldrb	r3, [r3, #26]
 8014262:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014266:	b2da      	uxtb	r2, r3
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801426c:	f04f 33ff 	mov.w	r3, #4294967295
 8014270:	e095      	b.n	801439e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014272:	693b      	ldr	r3, [r7, #16]
 8014274:	895a      	ldrh	r2, [r3, #10]
 8014276:	7dfb      	ldrb	r3, [r7, #23]
 8014278:	b29b      	uxth	r3, r3
 801427a:	429a      	cmp	r2, r3
 801427c:	d206      	bcs.n	801428c <tcp_enqueue_flags+0xc0>
 801427e:	4b4a      	ldr	r3, [pc, #296]	; (80143a8 <tcp_enqueue_flags+0x1dc>)
 8014280:	f240 3241 	movw	r2, #833	; 0x341
 8014284:	494b      	ldr	r1, [pc, #300]	; (80143b4 <tcp_enqueue_flags+0x1e8>)
 8014286:	484a      	ldr	r0, [pc, #296]	; (80143b0 <tcp_enqueue_flags+0x1e4>)
 8014288:	f003 fd3c 	bl	8017d04 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8014290:	78fa      	ldrb	r2, [r7, #3]
 8014292:	7ffb      	ldrb	r3, [r7, #31]
 8014294:	9300      	str	r3, [sp, #0]
 8014296:	460b      	mov	r3, r1
 8014298:	6939      	ldr	r1, [r7, #16]
 801429a:	6878      	ldr	r0, [r7, #4]
 801429c:	f7ff ff0e 	bl	80140bc <tcp_create_segment>
 80142a0:	60f8      	str	r0, [r7, #12]
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d109      	bne.n	80142bc <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	7e9b      	ldrb	r3, [r3, #26]
 80142ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80142b0:	b2da      	uxtb	r2, r3
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80142b6:	f04f 33ff 	mov.w	r3, #4294967295
 80142ba:	e070      	b.n	801439e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	68db      	ldr	r3, [r3, #12]
 80142c0:	f003 0303 	and.w	r3, r3, #3
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d006      	beq.n	80142d6 <tcp_enqueue_flags+0x10a>
 80142c8:	4b37      	ldr	r3, [pc, #220]	; (80143a8 <tcp_enqueue_flags+0x1dc>)
 80142ca:	f240 3249 	movw	r2, #841	; 0x349
 80142ce:	493a      	ldr	r1, [pc, #232]	; (80143b8 <tcp_enqueue_flags+0x1ec>)
 80142d0:	4837      	ldr	r0, [pc, #220]	; (80143b0 <tcp_enqueue_flags+0x1e4>)
 80142d2:	f003 fd17 	bl	8017d04 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	891b      	ldrh	r3, [r3, #8]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d006      	beq.n	80142ec <tcp_enqueue_flags+0x120>
 80142de:	4b32      	ldr	r3, [pc, #200]	; (80143a8 <tcp_enqueue_flags+0x1dc>)
 80142e0:	f240 324a 	movw	r2, #842	; 0x34a
 80142e4:	4935      	ldr	r1, [pc, #212]	; (80143bc <tcp_enqueue_flags+0x1f0>)
 80142e6:	4832      	ldr	r0, [pc, #200]	; (80143b0 <tcp_enqueue_flags+0x1e4>)
 80142e8:	f003 fd0c 	bl	8017d04 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d103      	bne.n	80142fc <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	68fa      	ldr	r2, [r7, #12]
 80142f8:	669a      	str	r2, [r3, #104]	; 0x68
 80142fa:	e00d      	b.n	8014318 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014300:	61bb      	str	r3, [r7, #24]
 8014302:	e002      	b.n	801430a <tcp_enqueue_flags+0x13e>
 8014304:	69bb      	ldr	r3, [r7, #24]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	61bb      	str	r3, [r7, #24]
 801430a:	69bb      	ldr	r3, [r7, #24]
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d1f8      	bne.n	8014304 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8014312:	69bb      	ldr	r3, [r7, #24]
 8014314:	68fa      	ldr	r2, [r7, #12]
 8014316:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	2200      	movs	r2, #0
 801431c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014320:	78fb      	ldrb	r3, [r7, #3]
 8014322:	f003 0302 	and.w	r3, r3, #2
 8014326:	2b00      	cmp	r3, #0
 8014328:	d104      	bne.n	8014334 <tcp_enqueue_flags+0x168>
 801432a:	78fb      	ldrb	r3, [r7, #3]
 801432c:	f003 0301 	and.w	r3, r3, #1
 8014330:	2b00      	cmp	r3, #0
 8014332:	d004      	beq.n	801433e <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014338:	1c5a      	adds	r2, r3, #1
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801433e:	78fb      	ldrb	r3, [r7, #3]
 8014340:	f003 0301 	and.w	r3, r3, #1
 8014344:	2b00      	cmp	r3, #0
 8014346:	d006      	beq.n	8014356 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	7e9b      	ldrb	r3, [r3, #26]
 801434c:	f043 0320 	orr.w	r3, r3, #32
 8014350:	b2da      	uxtb	r2, r3
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	685b      	ldr	r3, [r3, #4]
 801435a:	4618      	mov	r0, r3
 801435c:	f7fc f820 	bl	80103a0 <pbuf_clen>
 8014360:	4603      	mov	r3, r0
 8014362:	461a      	mov	r2, r3
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801436a:	4413      	add	r3, r2
 801436c:	b29a      	uxth	r2, r3
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801437a:	2b00      	cmp	r3, #0
 801437c:	d00e      	beq.n	801439c <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014382:	2b00      	cmp	r3, #0
 8014384:	d10a      	bne.n	801439c <tcp_enqueue_flags+0x1d0>
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801438a:	2b00      	cmp	r3, #0
 801438c:	d106      	bne.n	801439c <tcp_enqueue_flags+0x1d0>
 801438e:	4b06      	ldr	r3, [pc, #24]	; (80143a8 <tcp_enqueue_flags+0x1dc>)
 8014390:	f240 326d 	movw	r2, #877	; 0x36d
 8014394:	490a      	ldr	r1, [pc, #40]	; (80143c0 <tcp_enqueue_flags+0x1f4>)
 8014396:	4806      	ldr	r0, [pc, #24]	; (80143b0 <tcp_enqueue_flags+0x1e4>)
 8014398:	f003 fcb4 	bl	8017d04 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801439c:	2300      	movs	r3, #0
}
 801439e:	4618      	mov	r0, r3
 80143a0:	3720      	adds	r7, #32
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd80      	pop	{r7, pc}
 80143a6:	bf00      	nop
 80143a8:	08019ff8 	.word	0x08019ff8
 80143ac:	0801a2fc 	.word	0x0801a2fc
 80143b0:	0801a05c 	.word	0x0801a05c
 80143b4:	0801a354 	.word	0x0801a354
 80143b8:	0801a390 	.word	0x0801a390
 80143bc:	0801a3a8 	.word	0x0801a3a8
 80143c0:	0801a3d4 	.word	0x0801a3d4

080143c4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80143c4:	b590      	push	{r4, r7, lr}
 80143c6:	b08b      	sub	sp, #44	; 0x2c
 80143c8:	af04      	add	r7, sp, #16
 80143ca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 80143cc:	2300      	movs	r3, #0
 80143ce:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80143d0:	7dbb      	ldrb	r3, [r7, #22]
 80143d2:	b29c      	uxth	r4, r3
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80143d8:	4618      	mov	r0, r3
 80143da:	f7fa fc3d 	bl	800ec58 <lwip_htonl>
 80143de:	4603      	mov	r3, r0
 80143e0:	2200      	movs	r2, #0
 80143e2:	4621      	mov	r1, r4
 80143e4:	6878      	ldr	r0, [r7, #4]
 80143e6:	f7ff fdad 	bl	8013f44 <tcp_output_alloc_header>
 80143ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80143ec:	693b      	ldr	r3, [r7, #16]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d109      	bne.n	8014406 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	7e9b      	ldrb	r3, [r3, #26]
 80143f6:	f043 0303 	orr.w	r3, r3, #3
 80143fa:	b2da      	uxtb	r2, r3
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014400:	f06f 0301 	mvn.w	r3, #1
 8014404:	e036      	b.n	8014474 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	3304      	adds	r3, #4
 801440a:	4618      	mov	r0, r3
 801440c:	f002 f994 	bl	8016738 <ip4_route>
 8014410:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d102      	bne.n	801441e <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8014418:	23fc      	movs	r3, #252	; 0xfc
 801441a:	75fb      	strb	r3, [r7, #23]
 801441c:	e012      	b.n	8014444 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 801441e:	6879      	ldr	r1, [r7, #4]
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	1d18      	adds	r0, r3, #4
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	7a9c      	ldrb	r4, [r3, #10]
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	7a5b      	ldrb	r3, [r3, #9]
 801442c:	68fa      	ldr	r2, [r7, #12]
 801442e:	9202      	str	r2, [sp, #8]
 8014430:	2206      	movs	r2, #6
 8014432:	9201      	str	r2, [sp, #4]
 8014434:	9300      	str	r3, [sp, #0]
 8014436:	4623      	mov	r3, r4
 8014438:	4602      	mov	r2, r0
 801443a:	6938      	ldr	r0, [r7, #16]
 801443c:	f002 fb34 	bl	8016aa8 <ip4_output_if>
 8014440:	4603      	mov	r3, r0
 8014442:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8014444:	6938      	ldr	r0, [r7, #16]
 8014446:	f7fb ff11 	bl	801026c <pbuf_free>

  if (err != ERR_OK) {
 801444a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d007      	beq.n	8014462 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	7e9b      	ldrb	r3, [r3, #26]
 8014456:	f043 0303 	orr.w	r3, r3, #3
 801445a:	b2da      	uxtb	r2, r3
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	769a      	strb	r2, [r3, #26]
 8014460:	e006      	b.n	8014470 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	7e9b      	ldrb	r3, [r3, #26]
 8014466:	f023 0303 	bic.w	r3, r3, #3
 801446a:	b2da      	uxtb	r2, r3
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8014470:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014474:	4618      	mov	r0, r3
 8014476:	371c      	adds	r7, #28
 8014478:	46bd      	mov	sp, r7
 801447a:	bd90      	pop	{r4, r7, pc}

0801447c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801447c:	b5b0      	push	{r4, r5, r7, lr}
 801447e:	b08a      	sub	sp, #40	; 0x28
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	7d1b      	ldrb	r3, [r3, #20]
 8014488:	2b01      	cmp	r3, #1
 801448a:	d106      	bne.n	801449a <tcp_output+0x1e>
 801448c:	4b9b      	ldr	r3, [pc, #620]	; (80146fc <tcp_output+0x280>)
 801448e:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8014492:	499b      	ldr	r1, [pc, #620]	; (8014700 <tcp_output+0x284>)
 8014494:	489b      	ldr	r0, [pc, #620]	; (8014704 <tcp_output+0x288>)
 8014496:	f003 fc35 	bl	8017d04 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801449a:	4b9b      	ldr	r3, [pc, #620]	; (8014708 <tcp_output+0x28c>)
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	687a      	ldr	r2, [r7, #4]
 80144a0:	429a      	cmp	r2, r3
 80144a2:	d101      	bne.n	80144a8 <tcp_output+0x2c>
    return ERR_OK;
 80144a4:	2300      	movs	r3, #0
 80144a6:	e1cf      	b.n	8014848 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80144b4:	429a      	cmp	r2, r3
 80144b6:	d203      	bcs.n	80144c0 <tcp_output+0x44>
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80144be:	e002      	b.n	80144c6 <tcp_output+0x4a>
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80144c6:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80144cc:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	7e9b      	ldrb	r3, [r3, #26]
 80144d2:	f003 0302 	and.w	r3, r3, #2
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d017      	beq.n	801450a <tcp_output+0x8e>
 80144da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d00f      	beq.n	8014500 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 80144e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144e2:	68db      	ldr	r3, [r3, #12]
 80144e4:	685b      	ldr	r3, [r3, #4]
 80144e6:	4618      	mov	r0, r3
 80144e8:	f7fa fbb6 	bl	800ec58 <lwip_htonl>
 80144ec:	4602      	mov	r2, r0
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80144f2:	1ad3      	subs	r3, r2, r3
 80144f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144f6:	8912      	ldrh	r2, [r2, #8]
 80144f8:	4413      	add	r3, r2
     (seg == NULL ||
 80144fa:	69ba      	ldr	r2, [r7, #24]
 80144fc:	429a      	cmp	r2, r3
 80144fe:	d204      	bcs.n	801450a <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8014500:	6878      	ldr	r0, [r7, #4]
 8014502:	f7ff ff5f 	bl	80143c4 <tcp_send_empty_ack>
 8014506:	4603      	mov	r3, r0
 8014508:	e19e      	b.n	8014848 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801450e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014510:	6a3b      	ldr	r3, [r7, #32]
 8014512:	2b00      	cmp	r3, #0
 8014514:	d007      	beq.n	8014526 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8014516:	e002      	b.n	801451e <tcp_output+0xa2>
 8014518:	6a3b      	ldr	r3, [r7, #32]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	623b      	str	r3, [r7, #32]
 801451e:	6a3b      	ldr	r3, [r7, #32]
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d1f8      	bne.n	8014518 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	3304      	adds	r3, #4
 801452a:	4618      	mov	r0, r3
 801452c:	f002 f904 	bl	8016738 <ip4_route>
 8014530:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014532:	697b      	ldr	r3, [r7, #20]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d102      	bne.n	801453e <tcp_output+0xc2>
    return ERR_RTE;
 8014538:	f06f 0303 	mvn.w	r3, #3
 801453c:	e184      	b.n	8014848 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d003      	beq.n	801454c <tcp_output+0xd0>
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d111      	bne.n	8014570 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801454c:	697b      	ldr	r3, [r7, #20]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d002      	beq.n	8014558 <tcp_output+0xdc>
 8014552:	697b      	ldr	r3, [r7, #20]
 8014554:	3304      	adds	r3, #4
 8014556:	e000      	b.n	801455a <tcp_output+0xde>
 8014558:	2300      	movs	r3, #0
 801455a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801455c:	693b      	ldr	r3, [r7, #16]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d102      	bne.n	8014568 <tcp_output+0xec>
      return ERR_RTE;
 8014562:	f06f 0303 	mvn.w	r3, #3
 8014566:	e16f      	b.n	8014848 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014568:	693b      	ldr	r3, [r7, #16]
 801456a:	681a      	ldr	r2, [r3, #0]
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8014570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014572:	2b00      	cmp	r3, #0
 8014574:	f000 813e 	beq.w	80147f4 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8014578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801457a:	68db      	ldr	r3, [r3, #12]
 801457c:	685b      	ldr	r3, [r3, #4]
 801457e:	4618      	mov	r0, r3
 8014580:	f7fa fb6a 	bl	800ec58 <lwip_htonl>
 8014584:	4602      	mov	r2, r0
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801458a:	1ad3      	subs	r3, r2, r3
 801458c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801458e:	8912      	ldrh	r2, [r2, #8]
 8014590:	4413      	add	r3, r2
  if (seg != NULL &&
 8014592:	69ba      	ldr	r2, [r7, #24]
 8014594:	429a      	cmp	r2, r3
 8014596:	f080 812d 	bcs.w	80147f4 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801459a:	69bb      	ldr	r3, [r7, #24]
 801459c:	2b00      	cmp	r3, #0
 801459e:	f000 8129 	beq.w	80147f4 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80145a8:	461a      	mov	r2, r3
 80145aa:	69bb      	ldr	r3, [r7, #24]
 80145ac:	4293      	cmp	r3, r2
 80145ae:	f040 8121 	bne.w	80147f4 <tcp_output+0x378>
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	f040 811c 	bne.w	80147f4 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	f040 812b 	bne.w	801481e <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	2200      	movs	r2, #0
 80145cc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
      pcb->persist_backoff = 1;
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	2201      	movs	r2, #1
 80145d4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    }
    goto output_done;
 80145d8:	e121      	b.n	801481e <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80145da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145dc:	68db      	ldr	r3, [r3, #12]
 80145de:	899b      	ldrh	r3, [r3, #12]
 80145e0:	b29b      	uxth	r3, r3
 80145e2:	4618      	mov	r0, r3
 80145e4:	f7fa fb2a 	bl	800ec3c <lwip_htons>
 80145e8:	4603      	mov	r3, r0
 80145ea:	f003 0304 	and.w	r3, r3, #4
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d006      	beq.n	8014600 <tcp_output+0x184>
 80145f2:	4b42      	ldr	r3, [pc, #264]	; (80146fc <tcp_output+0x280>)
 80145f4:	f240 4246 	movw	r2, #1094	; 0x446
 80145f8:	4944      	ldr	r1, [pc, #272]	; (801470c <tcp_output+0x290>)
 80145fa:	4842      	ldr	r0, [pc, #264]	; (8014704 <tcp_output+0x288>)
 80145fc:	f003 fb82 	bl	8017d04 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014604:	2b00      	cmp	r3, #0
 8014606:	d01f      	beq.n	8014648 <tcp_output+0x1cc>
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	7e9b      	ldrb	r3, [r3, #26]
 801460c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014610:	2b00      	cmp	r3, #0
 8014612:	d119      	bne.n	8014648 <tcp_output+0x1cc>
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014618:	2b00      	cmp	r3, #0
 801461a:	d00b      	beq.n	8014634 <tcp_output+0x1b8>
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d110      	bne.n	8014648 <tcp_output+0x1cc>
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801462a:	891a      	ldrh	r2, [r3, #8]
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014630:	429a      	cmp	r2, r3
 8014632:	d209      	bcs.n	8014648 <tcp_output+0x1cc>
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801463a:	2b00      	cmp	r3, #0
 801463c:	d004      	beq.n	8014648 <tcp_output+0x1cc>
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014644:	2b08      	cmp	r3, #8
 8014646:	d901      	bls.n	801464c <tcp_output+0x1d0>
 8014648:	2301      	movs	r3, #1
 801464a:	e000      	b.n	801464e <tcp_output+0x1d2>
 801464c:	2300      	movs	r3, #0
 801464e:	2b00      	cmp	r3, #0
 8014650:	d106      	bne.n	8014660 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	7e9b      	ldrb	r3, [r3, #26]
 8014656:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801465a:	2b00      	cmp	r3, #0
 801465c:	f000 80e1 	beq.w	8014822 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	7d1b      	ldrb	r3, [r3, #20]
 8014664:	2b02      	cmp	r3, #2
 8014666:	d00d      	beq.n	8014684 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801466a:	68db      	ldr	r3, [r3, #12]
 801466c:	899b      	ldrh	r3, [r3, #12]
 801466e:	b29c      	uxth	r4, r3
 8014670:	2010      	movs	r0, #16
 8014672:	f7fa fae3 	bl	800ec3c <lwip_htons>
 8014676:	4603      	mov	r3, r0
 8014678:	461a      	mov	r2, r3
 801467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801467c:	68db      	ldr	r3, [r3, #12]
 801467e:	4322      	orrs	r2, r4
 8014680:	b292      	uxth	r2, r2
 8014682:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8014684:	697a      	ldr	r2, [r7, #20]
 8014686:	6879      	ldr	r1, [r7, #4]
 8014688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801468a:	f000 f8e1 	bl	8014850 <tcp_output_segment>
 801468e:	4603      	mov	r3, r0
 8014690:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d009      	beq.n	80146ae <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	7e9b      	ldrb	r3, [r3, #26]
 801469e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80146a2:	b2da      	uxtb	r2, r3
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	769a      	strb	r2, [r3, #26]
      return err;
 80146a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80146ac:	e0cc      	b.n	8014848 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 80146ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b0:	681a      	ldr	r2, [r3, #0]
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	7d1b      	ldrb	r3, [r3, #20]
 80146ba:	2b02      	cmp	r3, #2
 80146bc:	d006      	beq.n	80146cc <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	7e9b      	ldrb	r3, [r3, #26]
 80146c2:	f023 0303 	bic.w	r3, r3, #3
 80146c6:	b2da      	uxtb	r2, r3
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80146cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ce:	68db      	ldr	r3, [r3, #12]
 80146d0:	685b      	ldr	r3, [r3, #4]
 80146d2:	4618      	mov	r0, r3
 80146d4:	f7fa fac0 	bl	800ec58 <lwip_htonl>
 80146d8:	4604      	mov	r4, r0
 80146da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146dc:	891b      	ldrh	r3, [r3, #8]
 80146de:	461d      	mov	r5, r3
 80146e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e2:	68db      	ldr	r3, [r3, #12]
 80146e4:	899b      	ldrh	r3, [r3, #12]
 80146e6:	b29b      	uxth	r3, r3
 80146e8:	4618      	mov	r0, r3
 80146ea:	f7fa faa7 	bl	800ec3c <lwip_htons>
 80146ee:	4603      	mov	r3, r0
 80146f0:	f003 0303 	and.w	r3, r3, #3
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d00b      	beq.n	8014710 <tcp_output+0x294>
 80146f8:	2301      	movs	r3, #1
 80146fa:	e00a      	b.n	8014712 <tcp_output+0x296>
 80146fc:	08019ff8 	.word	0x08019ff8
 8014700:	0801a3fc 	.word	0x0801a3fc
 8014704:	0801a05c 	.word	0x0801a05c
 8014708:	24024e60 	.word	0x24024e60
 801470c:	0801a424 	.word	0x0801a424
 8014710:	2300      	movs	r3, #0
 8014712:	442b      	add	r3, r5
 8014714:	4423      	add	r3, r4
 8014716:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801471c:	68bb      	ldr	r3, [r7, #8]
 801471e:	1ad3      	subs	r3, r2, r3
 8014720:	2b00      	cmp	r3, #0
 8014722:	da02      	bge.n	801472a <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	68ba      	ldr	r2, [r7, #8]
 8014728:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801472c:	891b      	ldrh	r3, [r3, #8]
 801472e:	461c      	mov	r4, r3
 8014730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014732:	68db      	ldr	r3, [r3, #12]
 8014734:	899b      	ldrh	r3, [r3, #12]
 8014736:	b29b      	uxth	r3, r3
 8014738:	4618      	mov	r0, r3
 801473a:	f7fa fa7f 	bl	800ec3c <lwip_htons>
 801473e:	4603      	mov	r3, r0
 8014740:	f003 0303 	and.w	r3, r3, #3
 8014744:	2b00      	cmp	r3, #0
 8014746:	d001      	beq.n	801474c <tcp_output+0x2d0>
 8014748:	2301      	movs	r3, #1
 801474a:	e000      	b.n	801474e <tcp_output+0x2d2>
 801474c:	2300      	movs	r3, #0
 801474e:	4423      	add	r3, r4
 8014750:	2b00      	cmp	r3, #0
 8014752:	d049      	beq.n	80147e8 <tcp_output+0x36c>
      seg->next = NULL;
 8014754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014756:	2200      	movs	r2, #0
 8014758:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801475e:	2b00      	cmp	r3, #0
 8014760:	d105      	bne.n	801476e <tcp_output+0x2f2>
        pcb->unacked = seg;
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014766:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8014768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801476a:	623b      	str	r3, [r7, #32]
 801476c:	e03f      	b.n	80147ee <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014770:	68db      	ldr	r3, [r3, #12]
 8014772:	685b      	ldr	r3, [r3, #4]
 8014774:	4618      	mov	r0, r3
 8014776:	f7fa fa6f 	bl	800ec58 <lwip_htonl>
 801477a:	4604      	mov	r4, r0
 801477c:	6a3b      	ldr	r3, [r7, #32]
 801477e:	68db      	ldr	r3, [r3, #12]
 8014780:	685b      	ldr	r3, [r3, #4]
 8014782:	4618      	mov	r0, r3
 8014784:	f7fa fa68 	bl	800ec58 <lwip_htonl>
 8014788:	4603      	mov	r3, r0
 801478a:	1ae3      	subs	r3, r4, r3
 801478c:	2b00      	cmp	r3, #0
 801478e:	da24      	bge.n	80147da <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	336c      	adds	r3, #108	; 0x6c
 8014794:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014796:	e002      	b.n	801479e <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8014798:	69fb      	ldr	r3, [r7, #28]
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801479e:	69fb      	ldr	r3, [r7, #28]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d011      	beq.n	80147ca <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80147a6:	69fb      	ldr	r3, [r7, #28]
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	68db      	ldr	r3, [r3, #12]
 80147ac:	685b      	ldr	r3, [r3, #4]
 80147ae:	4618      	mov	r0, r3
 80147b0:	f7fa fa52 	bl	800ec58 <lwip_htonl>
 80147b4:	4604      	mov	r4, r0
 80147b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147b8:	68db      	ldr	r3, [r3, #12]
 80147ba:	685b      	ldr	r3, [r3, #4]
 80147bc:	4618      	mov	r0, r3
 80147be:	f7fa fa4b 	bl	800ec58 <lwip_htonl>
 80147c2:	4603      	mov	r3, r0
 80147c4:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	dbe6      	blt.n	8014798 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 80147ca:	69fb      	ldr	r3, [r7, #28]
 80147cc:	681a      	ldr	r2, [r3, #0]
 80147ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147d0:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80147d2:	69fb      	ldr	r3, [r7, #28]
 80147d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147d6:	601a      	str	r2, [r3, #0]
 80147d8:	e009      	b.n	80147ee <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80147da:	6a3b      	ldr	r3, [r7, #32]
 80147dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147de:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80147e0:	6a3b      	ldr	r3, [r7, #32]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	623b      	str	r3, [r7, #32]
 80147e6:	e002      	b.n	80147ee <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80147e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147ea:	f7fc fe98 	bl	801151e <tcp_seg_free>
    }
    seg = pcb->unsent;
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80147f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80147f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d015      	beq.n	8014826 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80147fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147fc:	68db      	ldr	r3, [r3, #12]
 80147fe:	685b      	ldr	r3, [r3, #4]
 8014800:	4618      	mov	r0, r3
 8014802:	f7fa fa29 	bl	800ec58 <lwip_htonl>
 8014806:	4602      	mov	r2, r0
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801480c:	1ad3      	subs	r3, r2, r3
 801480e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014810:	8912      	ldrh	r2, [r2, #8]
 8014812:	4413      	add	r3, r2
  while (seg != NULL &&
 8014814:	69ba      	ldr	r2, [r7, #24]
 8014816:	429a      	cmp	r2, r3
 8014818:	f4bf aedf 	bcs.w	80145da <tcp_output+0x15e>
  }
output_done:
 801481c:	e003      	b.n	8014826 <tcp_output+0x3aa>
    goto output_done;
 801481e:	bf00      	nop
 8014820:	e002      	b.n	8014828 <tcp_output+0x3ac>
      break;
 8014822:	bf00      	nop
 8014824:	e000      	b.n	8014828 <tcp_output+0x3ac>
output_done:
 8014826:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801482c:	2b00      	cmp	r3, #0
 801482e:	d103      	bne.n	8014838 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	2200      	movs	r2, #0
 8014834:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	7e9b      	ldrb	r3, [r3, #26]
 801483c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014840:	b2da      	uxtb	r2, r3
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8014846:	2300      	movs	r3, #0
}
 8014848:	4618      	mov	r0, r3
 801484a:	3728      	adds	r7, #40	; 0x28
 801484c:	46bd      	mov	sp, r7
 801484e:	bdb0      	pop	{r4, r5, r7, pc}

08014850 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014850:	b5b0      	push	{r4, r5, r7, lr}
 8014852:	b08c      	sub	sp, #48	; 0x30
 8014854:	af04      	add	r7, sp, #16
 8014856:	60f8      	str	r0, [r7, #12]
 8014858:	60b9      	str	r1, [r7, #8]
 801485a:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	685b      	ldr	r3, [r3, #4]
 8014860:	89db      	ldrh	r3, [r3, #14]
 8014862:	2b01      	cmp	r3, #1
 8014864:	d001      	beq.n	801486a <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8014866:	2300      	movs	r3, #0
 8014868:	e08b      	b.n	8014982 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801486a:	68bb      	ldr	r3, [r7, #8]
 801486c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	68dc      	ldr	r4, [r3, #12]
 8014872:	4610      	mov	r0, r2
 8014874:	f7fa f9f0 	bl	800ec58 <lwip_htonl>
 8014878:	4603      	mov	r3, r0
 801487a:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801487c:	68bb      	ldr	r3, [r7, #8]
 801487e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	68dc      	ldr	r4, [r3, #12]
 8014884:	4610      	mov	r0, r2
 8014886:	f7fa f9d9 	bl	800ec3c <lwip_htons>
 801488a:	4603      	mov	r3, r0
 801488c:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801488e:	68bb      	ldr	r3, [r7, #8]
 8014890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014892:	68ba      	ldr	r2, [r7, #8]
 8014894:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014896:	441a      	add	r2, r3
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	68db      	ldr	r3, [r3, #12]
 80148a0:	3314      	adds	r3, #20
 80148a2:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	7a9b      	ldrb	r3, [r3, #10]
 80148a8:	f003 0301 	and.w	r3, r3, #1
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d014      	beq.n	80148da <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80148b0:	68bb      	ldr	r3, [r7, #8]
 80148b2:	3304      	adds	r3, #4
 80148b4:	4619      	mov	r1, r3
 80148b6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80148ba:	f7fd f8a5 	bl	8011a08 <tcp_eff_send_mss_impl>
 80148be:	4603      	mov	r3, r0
 80148c0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80148c2:	8b7b      	ldrh	r3, [r7, #26]
 80148c4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80148c8:	4618      	mov	r0, r3
 80148ca:	f7fa f9c5 	bl	800ec58 <lwip_htonl>
 80148ce:	4602      	mov	r2, r0
 80148d0:	69fb      	ldr	r3, [r7, #28]
 80148d2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80148d4:	69fb      	ldr	r3, [r7, #28]
 80148d6:	3304      	adds	r3, #4
 80148d8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80148da:	68bb      	ldr	r3, [r7, #8]
 80148dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	da02      	bge.n	80148ea <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 80148e4:	68bb      	ldr	r3, [r7, #8]
 80148e6:	2200      	movs	r2, #0
 80148e8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80148ea:	68bb      	ldr	r3, [r7, #8]
 80148ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d10c      	bne.n	801490c <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 80148f2:	4b26      	ldr	r3, [pc, #152]	; (801498c <tcp_output_segment+0x13c>)
 80148f4:	681a      	ldr	r2, [r3, #0]
 80148f6:	68bb      	ldr	r3, [r7, #8]
 80148f8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	68db      	ldr	r3, [r3, #12]
 80148fe:	685b      	ldr	r3, [r3, #4]
 8014900:	4618      	mov	r0, r3
 8014902:	f7fa f9a9 	bl	800ec58 <lwip_htonl>
 8014906:	4602      	mov	r2, r0
 8014908:	68bb      	ldr	r3, [r7, #8]
 801490a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	68db      	ldr	r3, [r3, #12]
 8014910:	461a      	mov	r2, r3
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	685b      	ldr	r3, [r3, #4]
 8014916:	685b      	ldr	r3, [r3, #4]
 8014918:	1ad3      	subs	r3, r2, r3
 801491a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	685b      	ldr	r3, [r3, #4]
 8014920:	8959      	ldrh	r1, [r3, #10]
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	685b      	ldr	r3, [r3, #4]
 8014926:	8b3a      	ldrh	r2, [r7, #24]
 8014928:	1a8a      	subs	r2, r1, r2
 801492a:	b292      	uxth	r2, r2
 801492c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	685b      	ldr	r3, [r3, #4]
 8014932:	8919      	ldrh	r1, [r3, #8]
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	685b      	ldr	r3, [r3, #4]
 8014938:	8b3a      	ldrh	r2, [r7, #24]
 801493a:	1a8a      	subs	r2, r1, r2
 801493c:	b292      	uxth	r2, r2
 801493e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	685b      	ldr	r3, [r3, #4]
 8014944:	68fa      	ldr	r2, [r7, #12]
 8014946:	68d2      	ldr	r2, [r2, #12]
 8014948:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	68db      	ldr	r3, [r3, #12]
 801494e:	2200      	movs	r2, #0
 8014950:	741a      	strb	r2, [r3, #16]
 8014952:	2200      	movs	r2, #0
 8014954:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	6858      	ldr	r0, [r3, #4]
 801495a:	68b9      	ldr	r1, [r7, #8]
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	1d1c      	adds	r4, r3, #4
 8014960:	68bb      	ldr	r3, [r7, #8]
 8014962:	7a9d      	ldrb	r5, [r3, #10]
 8014964:	68bb      	ldr	r3, [r7, #8]
 8014966:	7a5b      	ldrb	r3, [r3, #9]
 8014968:	687a      	ldr	r2, [r7, #4]
 801496a:	9202      	str	r2, [sp, #8]
 801496c:	2206      	movs	r2, #6
 801496e:	9201      	str	r2, [sp, #4]
 8014970:	9300      	str	r3, [sp, #0]
 8014972:	462b      	mov	r3, r5
 8014974:	4622      	mov	r2, r4
 8014976:	f002 f897 	bl	8016aa8 <ip4_output_if>
 801497a:	4603      	mov	r3, r0
 801497c:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 801497e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014982:	4618      	mov	r0, r3
 8014984:	3720      	adds	r7, #32
 8014986:	46bd      	mov	sp, r7
 8014988:	bdb0      	pop	{r4, r5, r7, pc}
 801498a:	bf00      	nop
 801498c:	24024e50 	.word	0x24024e50

08014990 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8014990:	b580      	push	{r7, lr}
 8014992:	b08c      	sub	sp, #48	; 0x30
 8014994:	af04      	add	r7, sp, #16
 8014996:	60f8      	str	r0, [r7, #12]
 8014998:	60b9      	str	r1, [r7, #8]
 801499a:	607a      	str	r2, [r7, #4]
 801499c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 801499e:	2200      	movs	r2, #0
 80149a0:	2114      	movs	r1, #20
 80149a2:	2001      	movs	r0, #1
 80149a4:	f7fb f8f0 	bl	800fb88 <pbuf_alloc>
 80149a8:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 80149aa:	69fb      	ldr	r3, [r7, #28]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d05b      	beq.n	8014a68 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80149b0:	69fb      	ldr	r3, [r7, #28]
 80149b2:	895b      	ldrh	r3, [r3, #10]
 80149b4:	2b13      	cmp	r3, #19
 80149b6:	d806      	bhi.n	80149c6 <tcp_rst+0x36>
 80149b8:	4b2d      	ldr	r3, [pc, #180]	; (8014a70 <tcp_rst+0xe0>)
 80149ba:	f240 524d 	movw	r2, #1357	; 0x54d
 80149be:	492d      	ldr	r1, [pc, #180]	; (8014a74 <tcp_rst+0xe4>)
 80149c0:	482d      	ldr	r0, [pc, #180]	; (8014a78 <tcp_rst+0xe8>)
 80149c2:	f003 f99f 	bl	8017d04 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 80149c6:	69fb      	ldr	r3, [r7, #28]
 80149c8:	685b      	ldr	r3, [r3, #4]
 80149ca:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 80149cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80149ce:	4618      	mov	r0, r3
 80149d0:	f7fa f934 	bl	800ec3c <lwip_htons>
 80149d4:	4603      	mov	r3, r0
 80149d6:	461a      	mov	r2, r3
 80149d8:	69bb      	ldr	r3, [r7, #24]
 80149da:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 80149dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80149de:	4618      	mov	r0, r3
 80149e0:	f7fa f92c 	bl	800ec3c <lwip_htons>
 80149e4:	4603      	mov	r3, r0
 80149e6:	461a      	mov	r2, r3
 80149e8:	69bb      	ldr	r3, [r7, #24]
 80149ea:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 80149ec:	68f8      	ldr	r0, [r7, #12]
 80149ee:	f7fa f933 	bl	800ec58 <lwip_htonl>
 80149f2:	4602      	mov	r2, r0
 80149f4:	69bb      	ldr	r3, [r7, #24]
 80149f6:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 80149f8:	68b8      	ldr	r0, [r7, #8]
 80149fa:	f7fa f92d 	bl	800ec58 <lwip_htonl>
 80149fe:	4602      	mov	r2, r0
 8014a00:	69bb      	ldr	r3, [r7, #24]
 8014a02:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8014a04:	f245 0014 	movw	r0, #20500	; 0x5014
 8014a08:	f7fa f918 	bl	800ec3c <lwip_htons>
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	461a      	mov	r2, r3
 8014a10:	69bb      	ldr	r3, [r7, #24]
 8014a12:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8014a14:	69bb      	ldr	r3, [r7, #24]
 8014a16:	2200      	movs	r2, #0
 8014a18:	f042 0208 	orr.w	r2, r2, #8
 8014a1c:	739a      	strb	r2, [r3, #14]
 8014a1e:	2200      	movs	r2, #0
 8014a20:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8014a24:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8014a26:	69bb      	ldr	r3, [r7, #24]
 8014a28:	2200      	movs	r2, #0
 8014a2a:	741a      	strb	r2, [r3, #16]
 8014a2c:	2200      	movs	r2, #0
 8014a2e:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8014a30:	69bb      	ldr	r3, [r7, #24]
 8014a32:	2200      	movs	r2, #0
 8014a34:	749a      	strb	r2, [r3, #18]
 8014a36:	2200      	movs	r2, #0
 8014a38:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8014a3a:	6838      	ldr	r0, [r7, #0]
 8014a3c:	f001 fe7c 	bl	8016738 <ip4_route>
 8014a40:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8014a42:	697b      	ldr	r3, [r7, #20]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d00b      	beq.n	8014a60 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8014a48:	697b      	ldr	r3, [r7, #20]
 8014a4a:	9302      	str	r3, [sp, #8]
 8014a4c:	2306      	movs	r3, #6
 8014a4e:	9301      	str	r3, [sp, #4]
 8014a50:	2300      	movs	r3, #0
 8014a52:	9300      	str	r3, [sp, #0]
 8014a54:	23ff      	movs	r3, #255	; 0xff
 8014a56:	683a      	ldr	r2, [r7, #0]
 8014a58:	6879      	ldr	r1, [r7, #4]
 8014a5a:	69f8      	ldr	r0, [r7, #28]
 8014a5c:	f002 f824 	bl	8016aa8 <ip4_output_if>
  }
  pbuf_free(p);
 8014a60:	69f8      	ldr	r0, [r7, #28]
 8014a62:	f7fb fc03 	bl	801026c <pbuf_free>
 8014a66:	e000      	b.n	8014a6a <tcp_rst+0xda>
    return;
 8014a68:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014a6a:	3720      	adds	r7, #32
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	bd80      	pop	{r7, pc}
 8014a70:	08019ff8 	.word	0x08019ff8
 8014a74:	0801a02c 	.word	0x0801a02c
 8014a78:	0801a05c 	.word	0x0801a05c

08014a7c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b084      	sub	sp, #16
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d029      	beq.n	8014ae0 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a90:	60fb      	str	r3, [r7, #12]
 8014a92:	e002      	b.n	8014a9a <tcp_rexmit_rto+0x1e>
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	60fb      	str	r3, [r7, #12]
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d1f8      	bne.n	8014a94 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014abe:	2bff      	cmp	r3, #255	; 0xff
 8014ac0:	d007      	beq.n	8014ad2 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014ac8:	3301      	adds	r3, #1
 8014aca:	b2da      	uxtb	r2, r3
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	2200      	movs	r2, #0
 8014ad6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8014ad8:	6878      	ldr	r0, [r7, #4]
 8014ada:	f7ff fccf 	bl	801447c <tcp_output>
 8014ade:	e000      	b.n	8014ae2 <tcp_rexmit_rto+0x66>
    return;
 8014ae0:	bf00      	nop
}
 8014ae2:	3710      	adds	r7, #16
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	bd80      	pop	{r7, pc}

08014ae8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014ae8:	b590      	push	{r4, r7, lr}
 8014aea:	b085      	sub	sp, #20
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d043      	beq.n	8014b80 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014afc:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8014afe:	68bb      	ldr	r3, [r7, #8]
 8014b00:	681a      	ldr	r2, [r3, #0]
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	3368      	adds	r3, #104	; 0x68
 8014b0a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014b0c:	e002      	b.n	8014b14 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d011      	beq.n	8014b40 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	68db      	ldr	r3, [r3, #12]
 8014b22:	685b      	ldr	r3, [r3, #4]
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7fa f897 	bl	800ec58 <lwip_htonl>
 8014b2a:	4604      	mov	r4, r0
 8014b2c:	68bb      	ldr	r3, [r7, #8]
 8014b2e:	68db      	ldr	r3, [r3, #12]
 8014b30:	685b      	ldr	r3, [r3, #4]
 8014b32:	4618      	mov	r0, r3
 8014b34:	f7fa f890 	bl	800ec58 <lwip_htonl>
 8014b38:	4603      	mov	r3, r0
 8014b3a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	dbe6      	blt.n	8014b0e <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	681a      	ldr	r2, [r3, #0]
 8014b44:	68bb      	ldr	r3, [r7, #8]
 8014b46:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	68ba      	ldr	r2, [r7, #8]
 8014b4c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014b4e:	68bb      	ldr	r3, [r7, #8]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d103      	bne.n	8014b5e <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	2200      	movs	r2, #0
 8014b5a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014b64:	2bff      	cmp	r3, #255	; 0xff
 8014b66:	d007      	beq.n	8014b78 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014b6e:	3301      	adds	r3, #1
 8014b70:	b2da      	uxtb	r2, r3
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	2200      	movs	r2, #0
 8014b7c:	635a      	str	r2, [r3, #52]	; 0x34
 8014b7e:	e000      	b.n	8014b82 <tcp_rexmit+0x9a>
    return;
 8014b80:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8014b82:	3714      	adds	r7, #20
 8014b84:	46bd      	mov	sp, r7
 8014b86:	bd90      	pop	{r4, r7, pc}

08014b88 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b082      	sub	sp, #8
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d04c      	beq.n	8014c32 <tcp_rexmit_fast+0xaa>
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	7e9b      	ldrb	r3, [r3, #26]
 8014b9c:	f003 0304 	and.w	r3, r3, #4
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d146      	bne.n	8014c32 <tcp_rexmit_fast+0xaa>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8014ba4:	6878      	ldr	r0, [r7, #4]
 8014ba6:	f7ff ff9f 	bl	8014ae8 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014bb6:	429a      	cmp	r2, r3
 8014bb8:	d208      	bcs.n	8014bcc <tcp_rexmit_fast+0x44>
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	da00      	bge.n	8014bc6 <tcp_rexmit_fast+0x3e>
 8014bc4:	3301      	adds	r3, #1
 8014bc6:	105b      	asrs	r3, r3, #1
 8014bc8:	b29b      	uxth	r3, r3
 8014bca:	e007      	b.n	8014bdc <tcp_rexmit_fast+0x54>
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	da00      	bge.n	8014bd8 <tcp_rexmit_fast+0x50>
 8014bd6:	3301      	adds	r3, #1
 8014bd8:	105b      	asrs	r3, r3, #1
 8014bda:	b29b      	uxth	r3, r3
 8014bdc:	687a      	ldr	r2, [r7, #4]
 8014bde:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014be8:	461a      	mov	r2, r3
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014bee:	005b      	lsls	r3, r3, #1
 8014bf0:	429a      	cmp	r2, r3
 8014bf2:	d206      	bcs.n	8014c02 <tcp_rexmit_fast+0x7a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014bf8:	005b      	lsls	r3, r3, #1
 8014bfa:	b29a      	uxth	r2, r3
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014c0c:	4619      	mov	r1, r3
 8014c0e:	0049      	lsls	r1, r1, #1
 8014c10:	440b      	add	r3, r1
 8014c12:	b29b      	uxth	r3, r3
 8014c14:	4413      	add	r3, r2
 8014c16:	b29a      	uxth	r2, r3
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	7e9b      	ldrb	r3, [r3, #26]
 8014c22:	f043 0304 	orr.w	r3, r3, #4
 8014c26:	b2da      	uxtb	r2, r3
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	2200      	movs	r2, #0
 8014c30:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8014c32:	bf00      	nop
 8014c34:	3708      	adds	r7, #8
 8014c36:	46bd      	mov	sp, r7
 8014c38:	bd80      	pop	{r7, pc}

08014c3a <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014c3a:	b580      	push	{r7, lr}
 8014c3c:	b08a      	sub	sp, #40	; 0x28
 8014c3e:	af04      	add	r7, sp, #16
 8014c40:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014c46:	3b01      	subs	r3, #1
 8014c48:	4618      	mov	r0, r3
 8014c4a:	f7fa f805 	bl	800ec58 <lwip_htonl>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	2200      	movs	r2, #0
 8014c52:	2100      	movs	r1, #0
 8014c54:	6878      	ldr	r0, [r7, #4]
 8014c56:	f7ff f975 	bl	8013f44 <tcp_output_alloc_header>
 8014c5a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014c5c:	693b      	ldr	r3, [r7, #16]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d102      	bne.n	8014c68 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014c62:	f04f 33ff 	mov.w	r3, #4294967295
 8014c66:	e021      	b.n	8014cac <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	3304      	adds	r3, #4
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	f001 fd63 	bl	8016738 <ip4_route>
 8014c72:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d102      	bne.n	8014c80 <tcp_keepalive+0x46>
    err = ERR_RTE;
 8014c7a:	23fc      	movs	r3, #252	; 0xfc
 8014c7c:	75fb      	strb	r3, [r7, #23]
 8014c7e:	e010      	b.n	8014ca2 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8014c80:	6879      	ldr	r1, [r7, #4]
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	1d1a      	adds	r2, r3, #4
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	7a98      	ldrb	r0, [r3, #10]
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	9302      	str	r3, [sp, #8]
 8014c8e:	2306      	movs	r3, #6
 8014c90:	9301      	str	r3, [sp, #4]
 8014c92:	2300      	movs	r3, #0
 8014c94:	9300      	str	r3, [sp, #0]
 8014c96:	4603      	mov	r3, r0
 8014c98:	6938      	ldr	r0, [r7, #16]
 8014c9a:	f001 ff05 	bl	8016aa8 <ip4_output_if>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8014ca2:	6938      	ldr	r0, [r7, #16]
 8014ca4:	f7fb fae2 	bl	801026c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014ca8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014cac:	4618      	mov	r0, r3
 8014cae:	3718      	adds	r7, #24
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	bd80      	pop	{r7, pc}

08014cb4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014cb4:	b590      	push	{r4, r7, lr}
 8014cb6:	b08f      	sub	sp, #60	; 0x3c
 8014cb8:	af04      	add	r7, sp, #16
 8014cba:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cc0:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8014cc2:	6a3b      	ldr	r3, [r7, #32]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d102      	bne.n	8014cce <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014ccc:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8014cce:	6a3b      	ldr	r3, [r7, #32]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d101      	bne.n	8014cd8 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	e085      	b.n	8014de4 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014cd8:	6a3b      	ldr	r3, [r7, #32]
 8014cda:	68db      	ldr	r3, [r3, #12]
 8014cdc:	899b      	ldrh	r3, [r3, #12]
 8014cde:	b29b      	uxth	r3, r3
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	f7f9 ffab 	bl	800ec3c <lwip_htons>
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	f003 0301 	and.w	r3, r3, #1
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d005      	beq.n	8014cfc <tcp_zero_window_probe+0x48>
 8014cf0:	6a3b      	ldr	r3, [r7, #32]
 8014cf2:	891b      	ldrh	r3, [r3, #8]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d101      	bne.n	8014cfc <tcp_zero_window_probe+0x48>
 8014cf8:	2301      	movs	r3, #1
 8014cfa:	e000      	b.n	8014cfe <tcp_zero_window_probe+0x4a>
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014d00:	7ffb      	ldrb	r3, [r7, #31]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	bf0c      	ite	eq
 8014d06:	2301      	moveq	r3, #1
 8014d08:	2300      	movne	r3, #0
 8014d0a:	b2db      	uxtb	r3, r3
 8014d0c:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8014d0e:	6a3b      	ldr	r3, [r7, #32]
 8014d10:	68db      	ldr	r3, [r3, #12]
 8014d12:	685b      	ldr	r3, [r3, #4]
 8014d14:	8bba      	ldrh	r2, [r7, #28]
 8014d16:	2100      	movs	r1, #0
 8014d18:	6878      	ldr	r0, [r7, #4]
 8014d1a:	f7ff f913 	bl	8013f44 <tcp_output_alloc_header>
 8014d1e:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014d20:	69bb      	ldr	r3, [r7, #24]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d102      	bne.n	8014d2c <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014d26:	f04f 33ff 	mov.w	r3, #4294967295
 8014d2a:	e05b      	b.n	8014de4 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014d2c:	69bb      	ldr	r3, [r7, #24]
 8014d2e:	685b      	ldr	r3, [r3, #4]
 8014d30:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014d32:	7ffb      	ldrb	r3, [r7, #31]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d00e      	beq.n	8014d56 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014d38:	697b      	ldr	r3, [r7, #20]
 8014d3a:	899b      	ldrh	r3, [r3, #12]
 8014d3c:	b29b      	uxth	r3, r3
 8014d3e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014d42:	b29c      	uxth	r4, r3
 8014d44:	2011      	movs	r0, #17
 8014d46:	f7f9 ff79 	bl	800ec3c <lwip_htons>
 8014d4a:	4603      	mov	r3, r0
 8014d4c:	4323      	orrs	r3, r4
 8014d4e:	b29a      	uxth	r2, r3
 8014d50:	697b      	ldr	r3, [r7, #20]
 8014d52:	819a      	strh	r2, [r3, #12]
 8014d54:	e010      	b.n	8014d78 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014d56:	69bb      	ldr	r3, [r7, #24]
 8014d58:	685b      	ldr	r3, [r3, #4]
 8014d5a:	3314      	adds	r3, #20
 8014d5c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014d5e:	6a3b      	ldr	r3, [r7, #32]
 8014d60:	6858      	ldr	r0, [r3, #4]
 8014d62:	6a3b      	ldr	r3, [r7, #32]
 8014d64:	685b      	ldr	r3, [r3, #4]
 8014d66:	891a      	ldrh	r2, [r3, #8]
 8014d68:	6a3b      	ldr	r3, [r7, #32]
 8014d6a:	891b      	ldrh	r3, [r3, #8]
 8014d6c:	1ad3      	subs	r3, r2, r3
 8014d6e:	b29b      	uxth	r3, r3
 8014d70:	2201      	movs	r2, #1
 8014d72:	6939      	ldr	r1, [r7, #16]
 8014d74:	f7fb fc76 	bl	8010664 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014d78:	6a3b      	ldr	r3, [r7, #32]
 8014d7a:	68db      	ldr	r3, [r3, #12]
 8014d7c:	685b      	ldr	r3, [r3, #4]
 8014d7e:	4618      	mov	r0, r3
 8014d80:	f7f9 ff6a 	bl	800ec58 <lwip_htonl>
 8014d84:	4603      	mov	r3, r0
 8014d86:	3301      	adds	r3, #1
 8014d88:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	1ad3      	subs	r3, r2, r3
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	da02      	bge.n	8014d9c <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	68fa      	ldr	r2, [r7, #12]
 8014d9a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	3304      	adds	r3, #4
 8014da0:	4618      	mov	r0, r3
 8014da2:	f001 fcc9 	bl	8016738 <ip4_route>
 8014da6:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8014da8:	68bb      	ldr	r3, [r7, #8]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d103      	bne.n	8014db6 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8014dae:	23fc      	movs	r3, #252	; 0xfc
 8014db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014db4:	e011      	b.n	8014dda <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014db6:	6879      	ldr	r1, [r7, #4]
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	1d1a      	adds	r2, r3, #4
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	7a98      	ldrb	r0, [r3, #10]
 8014dc0:	68bb      	ldr	r3, [r7, #8]
 8014dc2:	9302      	str	r3, [sp, #8]
 8014dc4:	2306      	movs	r3, #6
 8014dc6:	9301      	str	r3, [sp, #4]
 8014dc8:	2300      	movs	r3, #0
 8014dca:	9300      	str	r3, [sp, #0]
 8014dcc:	4603      	mov	r3, r0
 8014dce:	69b8      	ldr	r0, [r7, #24]
 8014dd0:	f001 fe6a 	bl	8016aa8 <ip4_output_if>
 8014dd4:	4603      	mov	r3, r0
 8014dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8014dda:	69b8      	ldr	r0, [r7, #24]
 8014ddc:	f7fb fa46 	bl	801026c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014de0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014de4:	4618      	mov	r0, r3
 8014de6:	372c      	adds	r7, #44	; 0x2c
 8014de8:	46bd      	mov	sp, r7
 8014dea:	bd90      	pop	{r4, r7, pc}

08014dec <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b082      	sub	sp, #8
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014df4:	f7fb fcb8 	bl	8010768 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014df8:	4b0a      	ldr	r3, [pc, #40]	; (8014e24 <tcpip_tcp_timer+0x38>)
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d103      	bne.n	8014e08 <tcpip_tcp_timer+0x1c>
 8014e00:	4b09      	ldr	r3, [pc, #36]	; (8014e28 <tcpip_tcp_timer+0x3c>)
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d005      	beq.n	8014e14 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014e08:	2200      	movs	r2, #0
 8014e0a:	4908      	ldr	r1, [pc, #32]	; (8014e2c <tcpip_tcp_timer+0x40>)
 8014e0c:	20fa      	movs	r0, #250	; 0xfa
 8014e0e:	f000 f86f 	bl	8014ef0 <sys_timeout>
 8014e12:	e002      	b.n	8014e1a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014e14:	4b06      	ldr	r3, [pc, #24]	; (8014e30 <tcpip_tcp_timer+0x44>)
 8014e16:	2200      	movs	r2, #0
 8014e18:	601a      	str	r2, [r3, #0]
  }
}
 8014e1a:	bf00      	nop
 8014e1c:	3708      	adds	r7, #8
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	bd80      	pop	{r7, pc}
 8014e22:	bf00      	nop
 8014e24:	24024e4c 	.word	0x24024e4c
 8014e28:	24024e5c 	.word	0x24024e5c
 8014e2c:	08014ded 	.word	0x08014ded
 8014e30:	2402183c 	.word	0x2402183c

08014e34 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014e34:	b580      	push	{r7, lr}
 8014e36:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014e38:	4b0a      	ldr	r3, [pc, #40]	; (8014e64 <tcp_timer_needed+0x30>)
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d10f      	bne.n	8014e60 <tcp_timer_needed+0x2c>
 8014e40:	4b09      	ldr	r3, [pc, #36]	; (8014e68 <tcp_timer_needed+0x34>)
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d103      	bne.n	8014e50 <tcp_timer_needed+0x1c>
 8014e48:	4b08      	ldr	r3, [pc, #32]	; (8014e6c <tcp_timer_needed+0x38>)
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d007      	beq.n	8014e60 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014e50:	4b04      	ldr	r3, [pc, #16]	; (8014e64 <tcp_timer_needed+0x30>)
 8014e52:	2201      	movs	r2, #1
 8014e54:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014e56:	2200      	movs	r2, #0
 8014e58:	4905      	ldr	r1, [pc, #20]	; (8014e70 <tcp_timer_needed+0x3c>)
 8014e5a:	20fa      	movs	r0, #250	; 0xfa
 8014e5c:	f000 f848 	bl	8014ef0 <sys_timeout>
  }
}
 8014e60:	bf00      	nop
 8014e62:	bd80      	pop	{r7, pc}
 8014e64:	2402183c 	.word	0x2402183c
 8014e68:	24024e4c 	.word	0x24024e4c
 8014e6c:	24024e5c 	.word	0x24024e5c
 8014e70:	08014ded 	.word	0x08014ded

08014e74 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b084      	sub	sp, #16
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	685b      	ldr	r3, [r3, #4]
 8014e84:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	687a      	ldr	r2, [r7, #4]
 8014e8c:	4903      	ldr	r1, [pc, #12]	; (8014e9c <cyclic_timer+0x28>)
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f000 f82e 	bl	8014ef0 <sys_timeout>
}
 8014e94:	bf00      	nop
 8014e96:	3710      	adds	r7, #16
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	bd80      	pop	{r7, pc}
 8014e9c:	08014e75 	.word	0x08014e75

08014ea0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b082      	sub	sp, #8
 8014ea4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014ea6:	2301      	movs	r3, #1
 8014ea8:	607b      	str	r3, [r7, #4]
 8014eaa:	e00e      	b.n	8014eca <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8014eac:	4a0d      	ldr	r2, [pc, #52]	; (8014ee4 <sys_timeouts_init+0x44>)
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	00db      	lsls	r3, r3, #3
 8014eb8:	4a0a      	ldr	r2, [pc, #40]	; (8014ee4 <sys_timeouts_init+0x44>)
 8014eba:	4413      	add	r3, r2
 8014ebc:	461a      	mov	r2, r3
 8014ebe:	490a      	ldr	r1, [pc, #40]	; (8014ee8 <sys_timeouts_init+0x48>)
 8014ec0:	f000 f816 	bl	8014ef0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	3301      	adds	r3, #1
 8014ec8:	607b      	str	r3, [r7, #4]
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	2b02      	cmp	r3, #2
 8014ece:	d9ed      	bls.n	8014eac <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8014ed0:	f7f6 f8dc 	bl	800b08c <sys_now>
 8014ed4:	4602      	mov	r2, r0
 8014ed6:	4b05      	ldr	r3, [pc, #20]	; (8014eec <sys_timeouts_init+0x4c>)
 8014ed8:	601a      	str	r2, [r3, #0]
}
 8014eda:	bf00      	nop
 8014edc:	3708      	adds	r7, #8
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
 8014ee2:	bf00      	nop
 8014ee4:	0801ad34 	.word	0x0801ad34
 8014ee8:	08014e75 	.word	0x08014e75
 8014eec:	24021838 	.word	0x24021838

08014ef0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b088      	sub	sp, #32
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	60f8      	str	r0, [r7, #12]
 8014ef8:	60b9      	str	r1, [r7, #8]
 8014efa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014efc:	200b      	movs	r0, #11
 8014efe:	f7fa fb63 	bl	800f5c8 <memp_malloc>
 8014f02:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8014f04:	697b      	ldr	r3, [r7, #20]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d10a      	bne.n	8014f20 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014f0a:	697b      	ldr	r3, [r7, #20]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	f040 8084 	bne.w	801501a <sys_timeout+0x12a>
 8014f12:	4b44      	ldr	r3, [pc, #272]	; (8015024 <sys_timeout+0x134>)
 8014f14:	22d4      	movs	r2, #212	; 0xd4
 8014f16:	4944      	ldr	r1, [pc, #272]	; (8015028 <sys_timeout+0x138>)
 8014f18:	4844      	ldr	r0, [pc, #272]	; (801502c <sys_timeout+0x13c>)
 8014f1a:	f002 fef3 	bl	8017d04 <iprintf>
    return;
 8014f1e:	e07c      	b.n	801501a <sys_timeout+0x12a>
  }

  now = sys_now();
 8014f20:	f7f6 f8b4 	bl	800b08c <sys_now>
 8014f24:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8014f26:	4b42      	ldr	r3, [pc, #264]	; (8015030 <sys_timeout+0x140>)
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d105      	bne.n	8014f3a <sys_timeout+0x4a>
    diff = 0;
 8014f2e:	2300      	movs	r3, #0
 8014f30:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8014f32:	4a40      	ldr	r2, [pc, #256]	; (8015034 <sys_timeout+0x144>)
 8014f34:	693b      	ldr	r3, [r7, #16]
 8014f36:	6013      	str	r3, [r2, #0]
 8014f38:	e004      	b.n	8014f44 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8014f3a:	4b3e      	ldr	r3, [pc, #248]	; (8015034 <sys_timeout+0x144>)
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	693a      	ldr	r2, [r7, #16]
 8014f40:	1ad3      	subs	r3, r2, r3
 8014f42:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8014f44:	697b      	ldr	r3, [r7, #20]
 8014f46:	2200      	movs	r2, #0
 8014f48:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014f4a:	697b      	ldr	r3, [r7, #20]
 8014f4c:	68ba      	ldr	r2, [r7, #8]
 8014f4e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014f50:	697b      	ldr	r3, [r7, #20]
 8014f52:	687a      	ldr	r2, [r7, #4]
 8014f54:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8014f56:	68fa      	ldr	r2, [r7, #12]
 8014f58:	69bb      	ldr	r3, [r7, #24]
 8014f5a:	441a      	add	r2, r3
 8014f5c:	697b      	ldr	r3, [r7, #20]
 8014f5e:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014f60:	4b33      	ldr	r3, [pc, #204]	; (8015030 <sys_timeout+0x140>)
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d103      	bne.n	8014f70 <sys_timeout+0x80>
    next_timeout = timeout;
 8014f68:	4a31      	ldr	r2, [pc, #196]	; (8015030 <sys_timeout+0x140>)
 8014f6a:	697b      	ldr	r3, [r7, #20]
 8014f6c:	6013      	str	r3, [r2, #0]
    return;
 8014f6e:	e055      	b.n	801501c <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8014f70:	4b2f      	ldr	r3, [pc, #188]	; (8015030 <sys_timeout+0x140>)
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	685b      	ldr	r3, [r3, #4]
 8014f76:	68fa      	ldr	r2, [r7, #12]
 8014f78:	429a      	cmp	r2, r3
 8014f7a:	d20f      	bcs.n	8014f9c <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8014f7c:	4b2c      	ldr	r3, [pc, #176]	; (8015030 <sys_timeout+0x140>)
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	6859      	ldr	r1, [r3, #4]
 8014f82:	4b2b      	ldr	r3, [pc, #172]	; (8015030 <sys_timeout+0x140>)
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	68fa      	ldr	r2, [r7, #12]
 8014f88:	1a8a      	subs	r2, r1, r2
 8014f8a:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8014f8c:	4b28      	ldr	r3, [pc, #160]	; (8015030 <sys_timeout+0x140>)
 8014f8e:	681a      	ldr	r2, [r3, #0]
 8014f90:	697b      	ldr	r3, [r7, #20]
 8014f92:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014f94:	4a26      	ldr	r2, [pc, #152]	; (8015030 <sys_timeout+0x140>)
 8014f96:	697b      	ldr	r3, [r7, #20]
 8014f98:	6013      	str	r3, [r2, #0]
 8014f9a:	e03f      	b.n	801501c <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014f9c:	4b24      	ldr	r3, [pc, #144]	; (8015030 <sys_timeout+0x140>)
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	61fb      	str	r3, [r7, #28]
 8014fa2:	e036      	b.n	8015012 <sys_timeout+0x122>
      timeout->time -= t->time;
 8014fa4:	697b      	ldr	r3, [r7, #20]
 8014fa6:	685a      	ldr	r2, [r3, #4]
 8014fa8:	69fb      	ldr	r3, [r7, #28]
 8014faa:	685b      	ldr	r3, [r3, #4]
 8014fac:	1ad2      	subs	r2, r2, r3
 8014fae:	697b      	ldr	r3, [r7, #20]
 8014fb0:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8014fb2:	69fb      	ldr	r3, [r7, #28]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d006      	beq.n	8014fc8 <sys_timeout+0xd8>
 8014fba:	69fb      	ldr	r3, [r7, #28]
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	685a      	ldr	r2, [r3, #4]
 8014fc0:	697b      	ldr	r3, [r7, #20]
 8014fc2:	685b      	ldr	r3, [r3, #4]
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	d921      	bls.n	801500c <sys_timeout+0x11c>
        if (t->next != NULL) {
 8014fc8:	69fb      	ldr	r3, [r7, #28]
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d009      	beq.n	8014fe4 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8014fd0:	69fb      	ldr	r3, [r7, #28]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	6859      	ldr	r1, [r3, #4]
 8014fd6:	697b      	ldr	r3, [r7, #20]
 8014fd8:	685a      	ldr	r2, [r3, #4]
 8014fda:	69fb      	ldr	r3, [r7, #28]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	1a8a      	subs	r2, r1, r2
 8014fe0:	605a      	str	r2, [r3, #4]
 8014fe2:	e00b      	b.n	8014ffc <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8014fe4:	697b      	ldr	r3, [r7, #20]
 8014fe6:	685b      	ldr	r3, [r3, #4]
 8014fe8:	68fa      	ldr	r2, [r7, #12]
 8014fea:	429a      	cmp	r2, r3
 8014fec:	d206      	bcs.n	8014ffc <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8014fee:	4b10      	ldr	r3, [pc, #64]	; (8015030 <sys_timeout+0x140>)
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	685a      	ldr	r2, [r3, #4]
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	441a      	add	r2, r3
 8014ff8:	697b      	ldr	r3, [r7, #20]
 8014ffa:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8014ffc:	69fb      	ldr	r3, [r7, #28]
 8014ffe:	681a      	ldr	r2, [r3, #0]
 8015000:	697b      	ldr	r3, [r7, #20]
 8015002:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015004:	69fb      	ldr	r3, [r7, #28]
 8015006:	697a      	ldr	r2, [r7, #20]
 8015008:	601a      	str	r2, [r3, #0]
        break;
 801500a:	e007      	b.n	801501c <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 801500c:	69fb      	ldr	r3, [r7, #28]
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	61fb      	str	r3, [r7, #28]
 8015012:	69fb      	ldr	r3, [r7, #28]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d1c5      	bne.n	8014fa4 <sys_timeout+0xb4>
 8015018:	e000      	b.n	801501c <sys_timeout+0x12c>
    return;
 801501a:	bf00      	nop
      }
    }
  }
}
 801501c:	3720      	adds	r7, #32
 801501e:	46bd      	mov	sp, r7
 8015020:	bd80      	pop	{r7, pc}
 8015022:	bf00      	nop
 8015024:	0801a43c 	.word	0x0801a43c
 8015028:	0801a470 	.word	0x0801a470
 801502c:	0801a4b0 	.word	0x0801a4b0
 8015030:	24021834 	.word	0x24021834
 8015034:	24021838 	.word	0x24021838

08015038 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8015038:	b580      	push	{r7, lr}
 801503a:	b086      	sub	sp, #24
 801503c:	af00      	add	r7, sp, #0
  if (next_timeout) {
 801503e:	4b24      	ldr	r3, [pc, #144]	; (80150d0 <sys_check_timeouts+0x98>)
 8015040:	681b      	ldr	r3, [r3, #0]
 8015042:	2b00      	cmp	r3, #0
 8015044:	d03f      	beq.n	80150c6 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8015046:	f7f6 f821 	bl	800b08c <sys_now>
 801504a:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 801504c:	4b21      	ldr	r3, [pc, #132]	; (80150d4 <sys_check_timeouts+0x9c>)
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	68fa      	ldr	r2, [r7, #12]
 8015052:	1ad3      	subs	r3, r2, r3
 8015054:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8015056:	2300      	movs	r3, #0
 8015058:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 801505a:	4b1d      	ldr	r3, [pc, #116]	; (80150d0 <sys_check_timeouts+0x98>)
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8015060:	68bb      	ldr	r3, [r7, #8]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d02c      	beq.n	80150c0 <sys_check_timeouts+0x88>
 8015066:	68bb      	ldr	r3, [r7, #8]
 8015068:	685b      	ldr	r3, [r3, #4]
 801506a:	697a      	ldr	r2, [r7, #20]
 801506c:	429a      	cmp	r2, r3
 801506e:	d327      	bcc.n	80150c0 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8015070:	2301      	movs	r3, #1
 8015072:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8015074:	68bb      	ldr	r3, [r7, #8]
 8015076:	685a      	ldr	r2, [r3, #4]
 8015078:	4b16      	ldr	r3, [pc, #88]	; (80150d4 <sys_check_timeouts+0x9c>)
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	4413      	add	r3, r2
 801507e:	4a15      	ldr	r2, [pc, #84]	; (80150d4 <sys_check_timeouts+0x9c>)
 8015080:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8015082:	68bb      	ldr	r3, [r7, #8]
 8015084:	685b      	ldr	r3, [r3, #4]
 8015086:	697a      	ldr	r2, [r7, #20]
 8015088:	1ad3      	subs	r3, r2, r3
 801508a:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 801508c:	68bb      	ldr	r3, [r7, #8]
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	4a0f      	ldr	r2, [pc, #60]	; (80150d0 <sys_check_timeouts+0x98>)
 8015092:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8015094:	68bb      	ldr	r3, [r7, #8]
 8015096:	689b      	ldr	r3, [r3, #8]
 8015098:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 801509a:	68bb      	ldr	r3, [r7, #8]
 801509c:	68db      	ldr	r3, [r3, #12]
 801509e:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80150a0:	68b9      	ldr	r1, [r7, #8]
 80150a2:	200b      	movs	r0, #11
 80150a4:	f7fa fb06 	bl	800f6b4 <memp_free>
        if (handler != NULL) {
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d008      	beq.n	80150c0 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 80150ae:	480a      	ldr	r0, [pc, #40]	; (80150d8 <sys_check_timeouts+0xa0>)
 80150b0:	f002 fd82 	bl	8017bb8 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	6838      	ldr	r0, [r7, #0]
 80150b8:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 80150ba:	4807      	ldr	r0, [pc, #28]	; (80150d8 <sys_check_timeouts+0xa0>)
 80150bc:	f002 fd8b 	bl	8017bd6 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 80150c0:	7cfb      	ldrb	r3, [r7, #19]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d1c7      	bne.n	8015056 <sys_check_timeouts+0x1e>
  }
}
 80150c6:	bf00      	nop
 80150c8:	3718      	adds	r7, #24
 80150ca:	46bd      	mov	sp, r7
 80150cc:	bd80      	pop	{r7, pc}
 80150ce:	bf00      	nop
 80150d0:	24021834 	.word	0x24021834
 80150d4:	24021838 	.word	0x24021838
 80150d8:	24021c50 	.word	0x24021c50

080150dc <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b082      	sub	sp, #8
 80150e0:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 80150e2:	4b0f      	ldr	r3, [pc, #60]	; (8015120 <sys_timeouts_sleeptime+0x44>)
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d102      	bne.n	80150f0 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 80150ea:	f04f 33ff 	mov.w	r3, #4294967295
 80150ee:	e013      	b.n	8015118 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 80150f0:	f7f5 ffcc 	bl	800b08c <sys_now>
 80150f4:	4602      	mov	r2, r0
 80150f6:	4b0b      	ldr	r3, [pc, #44]	; (8015124 <sys_timeouts_sleeptime+0x48>)
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	1ad3      	subs	r3, r2, r3
 80150fc:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 80150fe:	4b08      	ldr	r3, [pc, #32]	; (8015120 <sys_timeouts_sleeptime+0x44>)
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	685b      	ldr	r3, [r3, #4]
 8015104:	687a      	ldr	r2, [r7, #4]
 8015106:	429a      	cmp	r2, r3
 8015108:	d901      	bls.n	801510e <sys_timeouts_sleeptime+0x32>
    return 0;
 801510a:	2300      	movs	r3, #0
 801510c:	e004      	b.n	8015118 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 801510e:	4b04      	ldr	r3, [pc, #16]	; (8015120 <sys_timeouts_sleeptime+0x44>)
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	685a      	ldr	r2, [r3, #4]
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	1ad3      	subs	r3, r2, r3
  }
}
 8015118:	4618      	mov	r0, r3
 801511a:	3708      	adds	r7, #8
 801511c:	46bd      	mov	sp, r7
 801511e:	bd80      	pop	{r7, pc}
 8015120:	24021834 	.word	0x24021834
 8015124:	24021838 	.word	0x24021838

08015128 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b084      	sub	sp, #16
 801512c:	af00      	add	r7, sp, #0
 801512e:	6078      	str	r0, [r7, #4]
 8015130:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8015132:	4b0f      	ldr	r3, [pc, #60]	; (8015170 <sys_timeouts_mbox_fetch+0x48>)
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d105      	bne.n	8015146 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801513a:	2200      	movs	r2, #0
 801513c:	6839      	ldr	r1, [r7, #0]
 801513e:	6878      	ldr	r0, [r7, #4]
 8015140:	f002 fcbf 	bl	8017ac2 <sys_arch_mbox_fetch>
    return;
 8015144:	e011      	b.n	801516a <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8015146:	f7ff ffc9 	bl	80150dc <sys_timeouts_sleeptime>
 801514a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d008      	beq.n	8015164 <sys_timeouts_mbox_fetch+0x3c>
 8015152:	68fa      	ldr	r2, [r7, #12]
 8015154:	6839      	ldr	r1, [r7, #0]
 8015156:	6878      	ldr	r0, [r7, #4]
 8015158:	f002 fcb3 	bl	8017ac2 <sys_arch_mbox_fetch>
 801515c:	4603      	mov	r3, r0
 801515e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015162:	d102      	bne.n	801516a <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8015164:	f7ff ff68 	bl	8015038 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8015168:	e7e3      	b.n	8015132 <sys_timeouts_mbox_fetch+0xa>
  }
}
 801516a:	3710      	adds	r7, #16
 801516c:	46bd      	mov	sp, r7
 801516e:	bd80      	pop	{r7, pc}
 8015170:	24021834 	.word	0x24021834

08015174 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015174:	b480      	push	{r7}
 8015176:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8015178:	bf00      	nop
 801517a:	46bd      	mov	sp, r7
 801517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015180:	4770      	bx	lr
	...

08015184 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015184:	b480      	push	{r7}
 8015186:	b085      	sub	sp, #20
 8015188:	af00      	add	r7, sp, #0
 801518a:	60f8      	str	r0, [r7, #12]
 801518c:	60b9      	str	r1, [r7, #8]
 801518e:	4613      	mov	r3, r2
 8015190:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015192:	79fb      	ldrb	r3, [r7, #7]
 8015194:	2b00      	cmp	r3, #0
 8015196:	d018      	beq.n	80151ca <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d013      	beq.n	80151c6 <udp_input_local_match+0x42>
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d00f      	beq.n	80151c6 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80151a6:	4b14      	ldr	r3, [pc, #80]	; (80151f8 <udp_input_local_match+0x74>)
 80151a8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80151aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151ae:	d00a      	beq.n	80151c6 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	681a      	ldr	r2, [r3, #0]
 80151b4:	4b10      	ldr	r3, [pc, #64]	; (80151f8 <udp_input_local_match+0x74>)
 80151b6:	695b      	ldr	r3, [r3, #20]
 80151b8:	405a      	eors	r2, r3
 80151ba:	68bb      	ldr	r3, [r7, #8]
 80151bc:	3308      	adds	r3, #8
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d110      	bne.n	80151e8 <udp_input_local_match+0x64>
          return 1;
 80151c6:	2301      	movs	r3, #1
 80151c8:	e00f      	b.n	80151ea <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d009      	beq.n	80151e4 <udp_input_local_match+0x60>
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d005      	beq.n	80151e4 <udp_input_local_match+0x60>
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	681a      	ldr	r2, [r3, #0]
 80151dc:	4b06      	ldr	r3, [pc, #24]	; (80151f8 <udp_input_local_match+0x74>)
 80151de:	695b      	ldr	r3, [r3, #20]
 80151e0:	429a      	cmp	r2, r3
 80151e2:	d101      	bne.n	80151e8 <udp_input_local_match+0x64>
      return 1;
 80151e4:	2301      	movs	r3, #1
 80151e6:	e000      	b.n	80151ea <udp_input_local_match+0x66>
    }
  }

  return 0;
 80151e8:	2300      	movs	r3, #0
}
 80151ea:	4618      	mov	r0, r3
 80151ec:	3714      	adds	r7, #20
 80151ee:	46bd      	mov	sp, r7
 80151f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f4:	4770      	bx	lr
 80151f6:	bf00      	nop
 80151f8:	24021c54 	.word	0x24021c54

080151fc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80151fc:	b590      	push	{r4, r7, lr}
 80151fe:	b08d      	sub	sp, #52	; 0x34
 8015200:	af02      	add	r7, sp, #8
 8015202:	6078      	str	r0, [r7, #4]
 8015204:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015206:	2300      	movs	r3, #0
 8015208:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	895b      	ldrh	r3, [r3, #10]
 801520e:	2b07      	cmp	r3, #7
 8015210:	d803      	bhi.n	801521a <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015212:	6878      	ldr	r0, [r7, #4]
 8015214:	f7fb f82a 	bl	801026c <pbuf_free>
    goto end;
 8015218:	e0c6      	b.n	80153a8 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	685b      	ldr	r3, [r3, #4]
 801521e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015220:	4b63      	ldr	r3, [pc, #396]	; (80153b0 <udp_input+0x1b4>)
 8015222:	695a      	ldr	r2, [r3, #20]
 8015224:	4b62      	ldr	r3, [pc, #392]	; (80153b0 <udp_input+0x1b4>)
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	4619      	mov	r1, r3
 801522a:	4610      	mov	r0, r2
 801522c:	f001 fd0e 	bl	8016c4c <ip4_addr_isbroadcast_u32>
 8015230:	4603      	mov	r3, r0
 8015232:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015234:	697b      	ldr	r3, [r7, #20]
 8015236:	881b      	ldrh	r3, [r3, #0]
 8015238:	b29b      	uxth	r3, r3
 801523a:	4618      	mov	r0, r3
 801523c:	f7f9 fcfe 	bl	800ec3c <lwip_htons>
 8015240:	4603      	mov	r3, r0
 8015242:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015244:	697b      	ldr	r3, [r7, #20]
 8015246:	885b      	ldrh	r3, [r3, #2]
 8015248:	b29b      	uxth	r3, r3
 801524a:	4618      	mov	r0, r3
 801524c:	f7f9 fcf6 	bl	800ec3c <lwip_htons>
 8015250:	4603      	mov	r3, r0
 8015252:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015254:	2300      	movs	r3, #0
 8015256:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015258:	2300      	movs	r3, #0
 801525a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801525c:	2300      	movs	r3, #0
 801525e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015260:	4b54      	ldr	r3, [pc, #336]	; (80153b4 <udp_input+0x1b8>)
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	627b      	str	r3, [r7, #36]	; 0x24
 8015266:	e03b      	b.n	80152e0 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801526a:	8a5b      	ldrh	r3, [r3, #18]
 801526c:	89fa      	ldrh	r2, [r7, #14]
 801526e:	429a      	cmp	r2, r3
 8015270:	d131      	bne.n	80152d6 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015272:	7cfb      	ldrb	r3, [r7, #19]
 8015274:	461a      	mov	r2, r3
 8015276:	6839      	ldr	r1, [r7, #0]
 8015278:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801527a:	f7ff ff83 	bl	8015184 <udp_input_local_match>
 801527e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015280:	2b00      	cmp	r3, #0
 8015282:	d028      	beq.n	80152d6 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8015284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015286:	7c1b      	ldrb	r3, [r3, #16]
 8015288:	f003 0304 	and.w	r3, r3, #4
 801528c:	2b00      	cmp	r3, #0
 801528e:	d104      	bne.n	801529a <udp_input+0x9e>
 8015290:	69fb      	ldr	r3, [r7, #28]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d101      	bne.n	801529a <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8015296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015298:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801529c:	8a9b      	ldrh	r3, [r3, #20]
 801529e:	8a3a      	ldrh	r2, [r7, #16]
 80152a0:	429a      	cmp	r2, r3
 80152a2:	d118      	bne.n	80152d6 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80152a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152a6:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d005      	beq.n	80152b8 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80152ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152ae:	685a      	ldr	r2, [r3, #4]
 80152b0:	4b3f      	ldr	r3, [pc, #252]	; (80153b0 <udp_input+0x1b4>)
 80152b2:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80152b4:	429a      	cmp	r2, r3
 80152b6:	d10e      	bne.n	80152d6 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80152b8:	6a3b      	ldr	r3, [r7, #32]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d014      	beq.n	80152e8 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80152be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152c0:	68da      	ldr	r2, [r3, #12]
 80152c2:	6a3b      	ldr	r3, [r7, #32]
 80152c4:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80152c6:	4b3b      	ldr	r3, [pc, #236]	; (80153b4 <udp_input+0x1b8>)
 80152c8:	681a      	ldr	r2, [r3, #0]
 80152ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152cc:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80152ce:	4a39      	ldr	r2, [pc, #228]	; (80153b4 <udp_input+0x1b8>)
 80152d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152d2:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80152d4:	e008      	b.n	80152e8 <udp_input+0xec>
      }
    }

    prev = pcb;
 80152d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152d8:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80152da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152dc:	68db      	ldr	r3, [r3, #12]
 80152de:	627b      	str	r3, [r7, #36]	; 0x24
 80152e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d1c0      	bne.n	8015268 <udp_input+0x6c>
 80152e6:	e000      	b.n	80152ea <udp_input+0xee>
        break;
 80152e8:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80152ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d101      	bne.n	80152f4 <udp_input+0xf8>
    pcb = uncon_pcb;
 80152f0:	69fb      	ldr	r3, [r7, #28]
 80152f2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80152f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d002      	beq.n	8015300 <udp_input+0x104>
    for_us = 1;
 80152fa:	2301      	movs	r3, #1
 80152fc:	76fb      	strb	r3, [r7, #27]
 80152fe:	e00a      	b.n	8015316 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015300:	683b      	ldr	r3, [r7, #0]
 8015302:	3304      	adds	r3, #4
 8015304:	681a      	ldr	r2, [r3, #0]
 8015306:	4b2a      	ldr	r3, [pc, #168]	; (80153b0 <udp_input+0x1b4>)
 8015308:	695b      	ldr	r3, [r3, #20]
 801530a:	429a      	cmp	r2, r3
 801530c:	bf0c      	ite	eq
 801530e:	2301      	moveq	r3, #1
 8015310:	2300      	movne	r3, #0
 8015312:	b2db      	uxtb	r3, r3
 8015314:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015316:	7efb      	ldrb	r3, [r7, #27]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d042      	beq.n	80153a2 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 801531c:	f06f 0107 	mvn.w	r1, #7
 8015320:	6878      	ldr	r0, [r7, #4]
 8015322:	f7fa ff7f 	bl	8010224 <pbuf_header>
 8015326:	4603      	mov	r3, r0
 8015328:	2b00      	cmp	r3, #0
 801532a:	d00a      	beq.n	8015342 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 801532c:	4b22      	ldr	r3, [pc, #136]	; (80153b8 <udp_input+0x1bc>)
 801532e:	f240 1255 	movw	r2, #341	; 0x155
 8015332:	4922      	ldr	r1, [pc, #136]	; (80153bc <udp_input+0x1c0>)
 8015334:	4822      	ldr	r0, [pc, #136]	; (80153c0 <udp_input+0x1c4>)
 8015336:	f002 fce5 	bl	8017d04 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801533a:	6878      	ldr	r0, [r7, #4]
 801533c:	f7fa ff96 	bl	801026c <pbuf_free>
      goto end;
 8015340:	e032      	b.n	80153a8 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 8015342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015344:	2b00      	cmp	r3, #0
 8015346:	d012      	beq.n	801536e <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801534a:	6a1b      	ldr	r3, [r3, #32]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d00a      	beq.n	8015366 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015352:	6a1c      	ldr	r4, [r3, #32]
 8015354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015356:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015358:	8a3b      	ldrh	r3, [r7, #16]
 801535a:	9300      	str	r3, [sp, #0]
 801535c:	4b19      	ldr	r3, [pc, #100]	; (80153c4 <udp_input+0x1c8>)
 801535e:	687a      	ldr	r2, [r7, #4]
 8015360:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015362:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015364:	e021      	b.n	80153aa <udp_input+0x1ae>
        pbuf_free(p);
 8015366:	6878      	ldr	r0, [r7, #4]
 8015368:	f7fa ff80 	bl	801026c <pbuf_free>
        goto end;
 801536c:	e01c      	b.n	80153a8 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801536e:	7cfb      	ldrb	r3, [r7, #19]
 8015370:	2b00      	cmp	r3, #0
 8015372:	d112      	bne.n	801539a <udp_input+0x19e>
 8015374:	4b0e      	ldr	r3, [pc, #56]	; (80153b0 <udp_input+0x1b4>)
 8015376:	695b      	ldr	r3, [r3, #20]
 8015378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801537c:	2be0      	cmp	r3, #224	; 0xe0
 801537e:	d00c      	beq.n	801539a <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015380:	4b0b      	ldr	r3, [pc, #44]	; (80153b0 <udp_input+0x1b4>)
 8015382:	899b      	ldrh	r3, [r3, #12]
 8015384:	3308      	adds	r3, #8
 8015386:	b29b      	uxth	r3, r3
 8015388:	b21b      	sxth	r3, r3
 801538a:	4619      	mov	r1, r3
 801538c:	6878      	ldr	r0, [r7, #4]
 801538e:	f7fa ff5b 	bl	8010248 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015392:	2103      	movs	r1, #3
 8015394:	6878      	ldr	r0, [r7, #4]
 8015396:	f001 f93d 	bl	8016614 <icmp_dest_unreach>
      pbuf_free(p);
 801539a:	6878      	ldr	r0, [r7, #4]
 801539c:	f7fa ff66 	bl	801026c <pbuf_free>
  return;
 80153a0:	e003      	b.n	80153aa <udp_input+0x1ae>
    pbuf_free(p);
 80153a2:	6878      	ldr	r0, [r7, #4]
 80153a4:	f7fa ff62 	bl	801026c <pbuf_free>
  return;
 80153a8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80153aa:	372c      	adds	r7, #44	; 0x2c
 80153ac:	46bd      	mov	sp, r7
 80153ae:	bd90      	pop	{r4, r7, pc}
 80153b0:	24021c54 	.word	0x24021c54
 80153b4:	24024e64 	.word	0x24024e64
 80153b8:	0801a4d8 	.word	0x0801a4d8
 80153bc:	0801a508 	.word	0x0801a508
 80153c0:	0801a51c 	.word	0x0801a51c
 80153c4:	24021c64 	.word	0x24021c64

080153c8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80153c8:	b480      	push	{r7}
 80153ca:	b085      	sub	sp, #20
 80153cc:	af00      	add	r7, sp, #0
 80153ce:	6078      	str	r0, [r7, #4]
 80153d0:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d01e      	beq.n	8015416 <udp_netif_ip_addr_changed+0x4e>
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d01a      	beq.n	8015416 <udp_netif_ip_addr_changed+0x4e>
 80153e0:	683b      	ldr	r3, [r7, #0]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d017      	beq.n	8015416 <udp_netif_ip_addr_changed+0x4e>
 80153e6:	683b      	ldr	r3, [r7, #0]
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d013      	beq.n	8015416 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80153ee:	4b0d      	ldr	r3, [pc, #52]	; (8015424 <udp_netif_ip_addr_changed+0x5c>)
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	60fb      	str	r3, [r7, #12]
 80153f4:	e00c      	b.n	8015410 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	681a      	ldr	r2, [r3, #0]
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	429a      	cmp	r2, r3
 8015400:	d103      	bne.n	801540a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015402:	683b      	ldr	r3, [r7, #0]
 8015404:	681a      	ldr	r2, [r3, #0]
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	68db      	ldr	r3, [r3, #12]
 801540e:	60fb      	str	r3, [r7, #12]
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d1ef      	bne.n	80153f6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015416:	bf00      	nop
 8015418:	3714      	adds	r7, #20
 801541a:	46bd      	mov	sp, r7
 801541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015420:	4770      	bx	lr
 8015422:	bf00      	nop
 8015424:	24024e64 	.word	0x24024e64

08015428 <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
 8015428:	b580      	push	{r7, lr}
 801542a:	b084      	sub	sp, #16
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d105      	bne.n	8015442 <free_etharp_q+0x1a>
 8015436:	4b18      	ldr	r3, [pc, #96]	; (8015498 <free_etharp_q+0x70>)
 8015438:	2297      	movs	r2, #151	; 0x97
 801543a:	4918      	ldr	r1, [pc, #96]	; (801549c <free_etharp_q+0x74>)
 801543c:	4818      	ldr	r0, [pc, #96]	; (80154a0 <free_etharp_q+0x78>)
 801543e:	f002 fc61 	bl	8017d04 <iprintf>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	685b      	ldr	r3, [r3, #4]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d11e      	bne.n	8015488 <free_etharp_q+0x60>
 801544a:	4b13      	ldr	r3, [pc, #76]	; (8015498 <free_etharp_q+0x70>)
 801544c:	2298      	movs	r2, #152	; 0x98
 801544e:	4915      	ldr	r1, [pc, #84]	; (80154a4 <free_etharp_q+0x7c>)
 8015450:	4813      	ldr	r0, [pc, #76]	; (80154a0 <free_etharp_q+0x78>)
 8015452:	f002 fc57 	bl	8017d04 <iprintf>
  while (q) {
 8015456:	e017      	b.n	8015488 <free_etharp_q+0x60>
    r = q;
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	60fb      	str	r3, [r7, #12]
    q = q->next;
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	607b      	str	r3, [r7, #4]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	685b      	ldr	r3, [r3, #4]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d105      	bne.n	8015476 <free_etharp_q+0x4e>
 801546a:	4b0b      	ldr	r3, [pc, #44]	; (8015498 <free_etharp_q+0x70>)
 801546c:	229c      	movs	r2, #156	; 0x9c
 801546e:	490e      	ldr	r1, [pc, #56]	; (80154a8 <free_etharp_q+0x80>)
 8015470:	480b      	ldr	r0, [pc, #44]	; (80154a0 <free_etharp_q+0x78>)
 8015472:	f002 fc47 	bl	8017d04 <iprintf>
    pbuf_free(r->p);
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	685b      	ldr	r3, [r3, #4]
 801547a:	4618      	mov	r0, r3
 801547c:	f7fa fef6 	bl	801026c <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8015480:	68f9      	ldr	r1, [r7, #12]
 8015482:	200a      	movs	r0, #10
 8015484:	f7fa f916 	bl	800f6b4 <memp_free>
  while (q) {
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d1e4      	bne.n	8015458 <free_etharp_q+0x30>
  }
}
 801548e:	bf00      	nop
 8015490:	3710      	adds	r7, #16
 8015492:	46bd      	mov	sp, r7
 8015494:	bd80      	pop	{r7, pc}
 8015496:	bf00      	nop
 8015498:	0801a574 	.word	0x0801a574
 801549c:	0801a5ac 	.word	0x0801a5ac
 80154a0:	0801a5b8 	.word	0x0801a5b8
 80154a4:	0801a5e0 	.word	0x0801a5e0
 80154a8:	0801a5f0 	.word	0x0801a5f0

080154ac <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b082      	sub	sp, #8
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80154b4:	4915      	ldr	r1, [pc, #84]	; (801550c <etharp_free_entry+0x60>)
 80154b6:	687a      	ldr	r2, [r7, #4]
 80154b8:	4613      	mov	r3, r2
 80154ba:	005b      	lsls	r3, r3, #1
 80154bc:	4413      	add	r3, r2
 80154be:	00db      	lsls	r3, r3, #3
 80154c0:	440b      	add	r3, r1
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d013      	beq.n	80154f0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80154c8:	4910      	ldr	r1, [pc, #64]	; (801550c <etharp_free_entry+0x60>)
 80154ca:	687a      	ldr	r2, [r7, #4]
 80154cc:	4613      	mov	r3, r2
 80154ce:	005b      	lsls	r3, r3, #1
 80154d0:	4413      	add	r3, r2
 80154d2:	00db      	lsls	r3, r3, #3
 80154d4:	440b      	add	r3, r1
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	4618      	mov	r0, r3
 80154da:	f7ff ffa5 	bl	8015428 <free_etharp_q>
    arp_table[i].q = NULL;
 80154de:	490b      	ldr	r1, [pc, #44]	; (801550c <etharp_free_entry+0x60>)
 80154e0:	687a      	ldr	r2, [r7, #4]
 80154e2:	4613      	mov	r3, r2
 80154e4:	005b      	lsls	r3, r3, #1
 80154e6:	4413      	add	r3, r2
 80154e8:	00db      	lsls	r3, r3, #3
 80154ea:	440b      	add	r3, r1
 80154ec:	2200      	movs	r2, #0
 80154ee:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80154f0:	4906      	ldr	r1, [pc, #24]	; (801550c <etharp_free_entry+0x60>)
 80154f2:	687a      	ldr	r2, [r7, #4]
 80154f4:	4613      	mov	r3, r2
 80154f6:	005b      	lsls	r3, r3, #1
 80154f8:	4413      	add	r3, r2
 80154fa:	00db      	lsls	r3, r3, #3
 80154fc:	440b      	add	r3, r1
 80154fe:	3314      	adds	r3, #20
 8015500:	2200      	movs	r2, #0
 8015502:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015504:	bf00      	nop
 8015506:	3708      	adds	r7, #8
 8015508:	46bd      	mov	sp, r7
 801550a:	bd80      	pop	{r7, pc}
 801550c:	24021840 	.word	0x24021840

08015510 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b082      	sub	sp, #8
 8015514:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015516:	2300      	movs	r3, #0
 8015518:	71fb      	strb	r3, [r7, #7]
 801551a:	e09a      	b.n	8015652 <etharp_tmr+0x142>
    u8_t state = arp_table[i].state;
 801551c:	79fa      	ldrb	r2, [r7, #7]
 801551e:	4951      	ldr	r1, [pc, #324]	; (8015664 <etharp_tmr+0x154>)
 8015520:	4613      	mov	r3, r2
 8015522:	005b      	lsls	r3, r3, #1
 8015524:	4413      	add	r3, r2
 8015526:	00db      	lsls	r3, r3, #3
 8015528:	440b      	add	r3, r1
 801552a:	3314      	adds	r3, #20
 801552c:	781b      	ldrb	r3, [r3, #0]
 801552e:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8015530:	79bb      	ldrb	r3, [r7, #6]
 8015532:	2b00      	cmp	r3, #0
 8015534:	f000 808a 	beq.w	801564c <etharp_tmr+0x13c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
 8015538:	79bb      	ldrb	r3, [r7, #6]
 801553a:	2b05      	cmp	r3, #5
 801553c:	f000 8086 	beq.w	801564c <etharp_tmr+0x13c>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8015540:	79fa      	ldrb	r2, [r7, #7]
 8015542:	4948      	ldr	r1, [pc, #288]	; (8015664 <etharp_tmr+0x154>)
 8015544:	4613      	mov	r3, r2
 8015546:	005b      	lsls	r3, r3, #1
 8015548:	4413      	add	r3, r2
 801554a:	00db      	lsls	r3, r3, #3
 801554c:	440b      	add	r3, r1
 801554e:	3312      	adds	r3, #18
 8015550:	881b      	ldrh	r3, [r3, #0]
 8015552:	3301      	adds	r3, #1
 8015554:	b298      	uxth	r0, r3
 8015556:	4943      	ldr	r1, [pc, #268]	; (8015664 <etharp_tmr+0x154>)
 8015558:	4613      	mov	r3, r2
 801555a:	005b      	lsls	r3, r3, #1
 801555c:	4413      	add	r3, r2
 801555e:	00db      	lsls	r3, r3, #3
 8015560:	440b      	add	r3, r1
 8015562:	3312      	adds	r3, #18
 8015564:	4602      	mov	r2, r0
 8015566:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015568:	79fa      	ldrb	r2, [r7, #7]
 801556a:	493e      	ldr	r1, [pc, #248]	; (8015664 <etharp_tmr+0x154>)
 801556c:	4613      	mov	r3, r2
 801556e:	005b      	lsls	r3, r3, #1
 8015570:	4413      	add	r3, r2
 8015572:	00db      	lsls	r3, r3, #3
 8015574:	440b      	add	r3, r1
 8015576:	3312      	adds	r3, #18
 8015578:	881b      	ldrh	r3, [r3, #0]
 801557a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801557e:	d215      	bcs.n	80155ac <etharp_tmr+0x9c>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015580:	79fa      	ldrb	r2, [r7, #7]
 8015582:	4938      	ldr	r1, [pc, #224]	; (8015664 <etharp_tmr+0x154>)
 8015584:	4613      	mov	r3, r2
 8015586:	005b      	lsls	r3, r3, #1
 8015588:	4413      	add	r3, r2
 801558a:	00db      	lsls	r3, r3, #3
 801558c:	440b      	add	r3, r1
 801558e:	3314      	adds	r3, #20
 8015590:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015592:	2b01      	cmp	r3, #1
 8015594:	d10f      	bne.n	80155b6 <etharp_tmr+0xa6>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015596:	79fa      	ldrb	r2, [r7, #7]
 8015598:	4932      	ldr	r1, [pc, #200]	; (8015664 <etharp_tmr+0x154>)
 801559a:	4613      	mov	r3, r2
 801559c:	005b      	lsls	r3, r3, #1
 801559e:	4413      	add	r3, r2
 80155a0:	00db      	lsls	r3, r3, #3
 80155a2:	440b      	add	r3, r1
 80155a4:	3312      	adds	r3, #18
 80155a6:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80155a8:	2b04      	cmp	r3, #4
 80155aa:	d904      	bls.n	80155b6 <etharp_tmr+0xa6>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80155ac:	79fb      	ldrb	r3, [r7, #7]
 80155ae:	4618      	mov	r0, r3
 80155b0:	f7ff ff7c 	bl	80154ac <etharp_free_entry>
 80155b4:	e04a      	b.n	801564c <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80155b6:	79fa      	ldrb	r2, [r7, #7]
 80155b8:	492a      	ldr	r1, [pc, #168]	; (8015664 <etharp_tmr+0x154>)
 80155ba:	4613      	mov	r3, r2
 80155bc:	005b      	lsls	r3, r3, #1
 80155be:	4413      	add	r3, r2
 80155c0:	00db      	lsls	r3, r3, #3
 80155c2:	440b      	add	r3, r1
 80155c4:	3314      	adds	r3, #20
 80155c6:	781b      	ldrb	r3, [r3, #0]
 80155c8:	2b03      	cmp	r3, #3
 80155ca:	d10a      	bne.n	80155e2 <etharp_tmr+0xd2>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80155cc:	79fa      	ldrb	r2, [r7, #7]
 80155ce:	4925      	ldr	r1, [pc, #148]	; (8015664 <etharp_tmr+0x154>)
 80155d0:	4613      	mov	r3, r2
 80155d2:	005b      	lsls	r3, r3, #1
 80155d4:	4413      	add	r3, r2
 80155d6:	00db      	lsls	r3, r3, #3
 80155d8:	440b      	add	r3, r1
 80155da:	3314      	adds	r3, #20
 80155dc:	2204      	movs	r2, #4
 80155de:	701a      	strb	r2, [r3, #0]
 80155e0:	e034      	b.n	801564c <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80155e2:	79fa      	ldrb	r2, [r7, #7]
 80155e4:	491f      	ldr	r1, [pc, #124]	; (8015664 <etharp_tmr+0x154>)
 80155e6:	4613      	mov	r3, r2
 80155e8:	005b      	lsls	r3, r3, #1
 80155ea:	4413      	add	r3, r2
 80155ec:	00db      	lsls	r3, r3, #3
 80155ee:	440b      	add	r3, r1
 80155f0:	3314      	adds	r3, #20
 80155f2:	781b      	ldrb	r3, [r3, #0]
 80155f4:	2b04      	cmp	r3, #4
 80155f6:	d10a      	bne.n	801560e <etharp_tmr+0xfe>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80155f8:	79fa      	ldrb	r2, [r7, #7]
 80155fa:	491a      	ldr	r1, [pc, #104]	; (8015664 <etharp_tmr+0x154>)
 80155fc:	4613      	mov	r3, r2
 80155fe:	005b      	lsls	r3, r3, #1
 8015600:	4413      	add	r3, r2
 8015602:	00db      	lsls	r3, r3, #3
 8015604:	440b      	add	r3, r1
 8015606:	3314      	adds	r3, #20
 8015608:	2202      	movs	r2, #2
 801560a:	701a      	strb	r2, [r3, #0]
 801560c:	e01e      	b.n	801564c <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801560e:	79fa      	ldrb	r2, [r7, #7]
 8015610:	4914      	ldr	r1, [pc, #80]	; (8015664 <etharp_tmr+0x154>)
 8015612:	4613      	mov	r3, r2
 8015614:	005b      	lsls	r3, r3, #1
 8015616:	4413      	add	r3, r2
 8015618:	00db      	lsls	r3, r3, #3
 801561a:	440b      	add	r3, r1
 801561c:	3314      	adds	r3, #20
 801561e:	781b      	ldrb	r3, [r3, #0]
 8015620:	2b01      	cmp	r3, #1
 8015622:	d113      	bne.n	801564c <etharp_tmr+0x13c>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015624:	79fa      	ldrb	r2, [r7, #7]
 8015626:	490f      	ldr	r1, [pc, #60]	; (8015664 <etharp_tmr+0x154>)
 8015628:	4613      	mov	r3, r2
 801562a:	005b      	lsls	r3, r3, #1
 801562c:	4413      	add	r3, r2
 801562e:	00db      	lsls	r3, r3, #3
 8015630:	440b      	add	r3, r1
 8015632:	3308      	adds	r3, #8
 8015634:	6818      	ldr	r0, [r3, #0]
 8015636:	79fa      	ldrb	r2, [r7, #7]
 8015638:	4613      	mov	r3, r2
 801563a:	005b      	lsls	r3, r3, #1
 801563c:	4413      	add	r3, r2
 801563e:	00db      	lsls	r3, r3, #3
 8015640:	4a08      	ldr	r2, [pc, #32]	; (8015664 <etharp_tmr+0x154>)
 8015642:	4413      	add	r3, r2
 8015644:	3304      	adds	r3, #4
 8015646:	4619      	mov	r1, r3
 8015648:	f000 feb2 	bl	80163b0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801564c:	79fb      	ldrb	r3, [r7, #7]
 801564e:	3301      	adds	r3, #1
 8015650:	71fb      	strb	r3, [r7, #7]
 8015652:	79fb      	ldrb	r3, [r7, #7]
 8015654:	2b09      	cmp	r3, #9
 8015656:	f67f af61 	bls.w	801551c <etharp_tmr+0xc>
      }
    }
  }
}
 801565a:	bf00      	nop
 801565c:	3708      	adds	r7, #8
 801565e:	46bd      	mov	sp, r7
 8015660:	bd80      	pop	{r7, pc}
 8015662:	bf00      	nop
 8015664:	24021840 	.word	0x24021840

08015668 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b088      	sub	sp, #32
 801566c:	af00      	add	r7, sp, #0
 801566e:	60f8      	str	r0, [r7, #12]
 8015670:	460b      	mov	r3, r1
 8015672:	607a      	str	r2, [r7, #4]
 8015674:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015676:	230a      	movs	r3, #10
 8015678:	77fb      	strb	r3, [r7, #31]
 801567a:	230a      	movs	r3, #10
 801567c:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 801567e:	230a      	movs	r3, #10
 8015680:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8015682:	2300      	movs	r3, #0
 8015684:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8015686:	230a      	movs	r3, #10
 8015688:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801568a:	2300      	movs	r3, #0
 801568c:	833b      	strh	r3, [r7, #24]
 801568e:	2300      	movs	r3, #0
 8015690:	82fb      	strh	r3, [r7, #22]
 8015692:	2300      	movs	r3, #0
 8015694:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015696:	2300      	movs	r3, #0
 8015698:	773b      	strb	r3, [r7, #28]
 801569a:	e096      	b.n	80157ca <etharp_find_entry+0x162>
    u8_t state = arp_table[i].state;
 801569c:	7f3a      	ldrb	r2, [r7, #28]
 801569e:	4991      	ldr	r1, [pc, #580]	; (80158e4 <etharp_find_entry+0x27c>)
 80156a0:	4613      	mov	r3, r2
 80156a2:	005b      	lsls	r3, r3, #1
 80156a4:	4413      	add	r3, r2
 80156a6:	00db      	lsls	r3, r3, #3
 80156a8:	440b      	add	r3, r1
 80156aa:	3314      	adds	r3, #20
 80156ac:	781b      	ldrb	r3, [r3, #0]
 80156ae:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80156b0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80156b4:	2b0a      	cmp	r3, #10
 80156b6:	d105      	bne.n	80156c4 <etharp_find_entry+0x5c>
 80156b8:	7cfb      	ldrb	r3, [r7, #19]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d102      	bne.n	80156c4 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 80156be:	7f3b      	ldrb	r3, [r7, #28]
 80156c0:	777b      	strb	r3, [r7, #29]
 80156c2:	e07f      	b.n	80157c4 <etharp_find_entry+0x15c>
    } else if (state != ETHARP_STATE_EMPTY) {
 80156c4:	7cfb      	ldrb	r3, [r7, #19]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d07c      	beq.n	80157c4 <etharp_find_entry+0x15c>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80156ca:	7cfb      	ldrb	r3, [r7, #19]
 80156cc:	2b01      	cmp	r3, #1
 80156ce:	d009      	beq.n	80156e4 <etharp_find_entry+0x7c>
 80156d0:	7cfb      	ldrb	r3, [r7, #19]
 80156d2:	2b01      	cmp	r3, #1
 80156d4:	d806      	bhi.n	80156e4 <etharp_find_entry+0x7c>
 80156d6:	4b84      	ldr	r3, [pc, #528]	; (80158e8 <etharp_find_entry+0x280>)
 80156d8:	f44f 7293 	mov.w	r2, #294	; 0x126
 80156dc:	4983      	ldr	r1, [pc, #524]	; (80158ec <etharp_find_entry+0x284>)
 80156de:	4884      	ldr	r0, [pc, #528]	; (80158f0 <etharp_find_entry+0x288>)
 80156e0:	f002 fb10 	bl	8017d04 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d00f      	beq.n	801570a <etharp_find_entry+0xa2>
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	6819      	ldr	r1, [r3, #0]
 80156ee:	7f3a      	ldrb	r2, [r7, #28]
 80156f0:	487c      	ldr	r0, [pc, #496]	; (80158e4 <etharp_find_entry+0x27c>)
 80156f2:	4613      	mov	r3, r2
 80156f4:	005b      	lsls	r3, r3, #1
 80156f6:	4413      	add	r3, r2
 80156f8:	00db      	lsls	r3, r3, #3
 80156fa:	4403      	add	r3, r0
 80156fc:	3304      	adds	r3, #4
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	4299      	cmp	r1, r3
 8015702:	d102      	bne.n	801570a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015704:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8015708:	e0e8      	b.n	80158dc <etharp_find_entry+0x274>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801570a:	7cfb      	ldrb	r3, [r7, #19]
 801570c:	2b01      	cmp	r3, #1
 801570e:	d13b      	bne.n	8015788 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015710:	7f3a      	ldrb	r2, [r7, #28]
 8015712:	4974      	ldr	r1, [pc, #464]	; (80158e4 <etharp_find_entry+0x27c>)
 8015714:	4613      	mov	r3, r2
 8015716:	005b      	lsls	r3, r3, #1
 8015718:	4413      	add	r3, r2
 801571a:	00db      	lsls	r3, r3, #3
 801571c:	440b      	add	r3, r1
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d018      	beq.n	8015756 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8015724:	7f3a      	ldrb	r2, [r7, #28]
 8015726:	496f      	ldr	r1, [pc, #444]	; (80158e4 <etharp_find_entry+0x27c>)
 8015728:	4613      	mov	r3, r2
 801572a:	005b      	lsls	r3, r3, #1
 801572c:	4413      	add	r3, r2
 801572e:	00db      	lsls	r3, r3, #3
 8015730:	440b      	add	r3, r1
 8015732:	3312      	adds	r3, #18
 8015734:	881b      	ldrh	r3, [r3, #0]
 8015736:	8b3a      	ldrh	r2, [r7, #24]
 8015738:	429a      	cmp	r2, r3
 801573a:	d843      	bhi.n	80157c4 <etharp_find_entry+0x15c>
            old_queue = i;
 801573c:	7f3b      	ldrb	r3, [r7, #28]
 801573e:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8015740:	7f3a      	ldrb	r2, [r7, #28]
 8015742:	4968      	ldr	r1, [pc, #416]	; (80158e4 <etharp_find_entry+0x27c>)
 8015744:	4613      	mov	r3, r2
 8015746:	005b      	lsls	r3, r3, #1
 8015748:	4413      	add	r3, r2
 801574a:	00db      	lsls	r3, r3, #3
 801574c:	440b      	add	r3, r1
 801574e:	3312      	adds	r3, #18
 8015750:	881b      	ldrh	r3, [r3, #0]
 8015752:	833b      	strh	r3, [r7, #24]
 8015754:	e036      	b.n	80157c4 <etharp_find_entry+0x15c>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015756:	7f3a      	ldrb	r2, [r7, #28]
 8015758:	4962      	ldr	r1, [pc, #392]	; (80158e4 <etharp_find_entry+0x27c>)
 801575a:	4613      	mov	r3, r2
 801575c:	005b      	lsls	r3, r3, #1
 801575e:	4413      	add	r3, r2
 8015760:	00db      	lsls	r3, r3, #3
 8015762:	440b      	add	r3, r1
 8015764:	3312      	adds	r3, #18
 8015766:	881b      	ldrh	r3, [r3, #0]
 8015768:	8afa      	ldrh	r2, [r7, #22]
 801576a:	429a      	cmp	r2, r3
 801576c:	d82a      	bhi.n	80157c4 <etharp_find_entry+0x15c>
            old_pending = i;
 801576e:	7f3b      	ldrb	r3, [r7, #28]
 8015770:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8015772:	7f3a      	ldrb	r2, [r7, #28]
 8015774:	495b      	ldr	r1, [pc, #364]	; (80158e4 <etharp_find_entry+0x27c>)
 8015776:	4613      	mov	r3, r2
 8015778:	005b      	lsls	r3, r3, #1
 801577a:	4413      	add	r3, r2
 801577c:	00db      	lsls	r3, r3, #3
 801577e:	440b      	add	r3, r1
 8015780:	3312      	adds	r3, #18
 8015782:	881b      	ldrh	r3, [r3, #0]
 8015784:	82fb      	strh	r3, [r7, #22]
 8015786:	e01d      	b.n	80157c4 <etharp_find_entry+0x15c>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015788:	7cfb      	ldrb	r3, [r7, #19]
 801578a:	2b01      	cmp	r3, #1
 801578c:	d91a      	bls.n	80157c4 <etharp_find_entry+0x15c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 801578e:	7cfb      	ldrb	r3, [r7, #19]
 8015790:	2b04      	cmp	r3, #4
 8015792:	d817      	bhi.n	80157c4 <etharp_find_entry+0x15c>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015794:	7f3a      	ldrb	r2, [r7, #28]
 8015796:	4953      	ldr	r1, [pc, #332]	; (80158e4 <etharp_find_entry+0x27c>)
 8015798:	4613      	mov	r3, r2
 801579a:	005b      	lsls	r3, r3, #1
 801579c:	4413      	add	r3, r2
 801579e:	00db      	lsls	r3, r3, #3
 80157a0:	440b      	add	r3, r1
 80157a2:	3312      	adds	r3, #18
 80157a4:	881b      	ldrh	r3, [r3, #0]
 80157a6:	8aba      	ldrh	r2, [r7, #20]
 80157a8:	429a      	cmp	r2, r3
 80157aa:	d80b      	bhi.n	80157c4 <etharp_find_entry+0x15c>
            old_stable = i;
 80157ac:	7f3b      	ldrb	r3, [r7, #28]
 80157ae:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 80157b0:	7f3a      	ldrb	r2, [r7, #28]
 80157b2:	494c      	ldr	r1, [pc, #304]	; (80158e4 <etharp_find_entry+0x27c>)
 80157b4:	4613      	mov	r3, r2
 80157b6:	005b      	lsls	r3, r3, #1
 80157b8:	4413      	add	r3, r2
 80157ba:	00db      	lsls	r3, r3, #3
 80157bc:	440b      	add	r3, r1
 80157be:	3312      	adds	r3, #18
 80157c0:	881b      	ldrh	r3, [r3, #0]
 80157c2:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80157c4:	7f3b      	ldrb	r3, [r7, #28]
 80157c6:	3301      	adds	r3, #1
 80157c8:	773b      	strb	r3, [r7, #28]
 80157ca:	7f3b      	ldrb	r3, [r7, #28]
 80157cc:	2b09      	cmp	r3, #9
 80157ce:	f67f af65 	bls.w	801569c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80157d2:	7afb      	ldrb	r3, [r7, #11]
 80157d4:	f003 0302 	and.w	r3, r3, #2
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d108      	bne.n	80157ee <etharp_find_entry+0x186>
 80157dc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80157e0:	2b0a      	cmp	r3, #10
 80157e2:	d107      	bne.n	80157f4 <etharp_find_entry+0x18c>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80157e4:	7afb      	ldrb	r3, [r7, #11]
 80157e6:	f003 0301 	and.w	r3, r3, #1
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d102      	bne.n	80157f4 <etharp_find_entry+0x18c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 80157ee:	f04f 33ff 	mov.w	r3, #4294967295
 80157f2:	e073      	b.n	80158dc <etharp_find_entry+0x274>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80157f4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80157f8:	2b09      	cmp	r3, #9
 80157fa:	dc02      	bgt.n	8015802 <etharp_find_entry+0x19a>
    i = empty;
 80157fc:	7f7b      	ldrb	r3, [r7, #29]
 80157fe:	773b      	strb	r3, [r7, #28]
 8015800:	e036      	b.n	8015870 <etharp_find_entry+0x208>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015802:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015806:	2b09      	cmp	r3, #9
 8015808:	dc13      	bgt.n	8015832 <etharp_find_entry+0x1ca>
      /* recycle oldest stable*/
      i = old_stable;
 801580a:	7fbb      	ldrb	r3, [r7, #30]
 801580c:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801580e:	7f3a      	ldrb	r2, [r7, #28]
 8015810:	4934      	ldr	r1, [pc, #208]	; (80158e4 <etharp_find_entry+0x27c>)
 8015812:	4613      	mov	r3, r2
 8015814:	005b      	lsls	r3, r3, #1
 8015816:	4413      	add	r3, r2
 8015818:	00db      	lsls	r3, r3, #3
 801581a:	440b      	add	r3, r1
 801581c:	681b      	ldr	r3, [r3, #0]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d018      	beq.n	8015854 <etharp_find_entry+0x1ec>
 8015822:	4b31      	ldr	r3, [pc, #196]	; (80158e8 <etharp_find_entry+0x280>)
 8015824:	f240 126f 	movw	r2, #367	; 0x16f
 8015828:	4932      	ldr	r1, [pc, #200]	; (80158f4 <etharp_find_entry+0x28c>)
 801582a:	4831      	ldr	r0, [pc, #196]	; (80158f0 <etharp_find_entry+0x288>)
 801582c:	f002 fa6a 	bl	8017d04 <iprintf>
 8015830:	e010      	b.n	8015854 <etharp_find_entry+0x1ec>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015832:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015836:	2b09      	cmp	r3, #9
 8015838:	dc02      	bgt.n	8015840 <etharp_find_entry+0x1d8>
      /* recycle oldest pending */
      i = old_pending;
 801583a:	7ffb      	ldrb	r3, [r7, #31]
 801583c:	773b      	strb	r3, [r7, #28]
 801583e:	e009      	b.n	8015854 <etharp_find_entry+0x1ec>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015840:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015844:	2b09      	cmp	r3, #9
 8015846:	dc02      	bgt.n	801584e <etharp_find_entry+0x1e6>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015848:	7efb      	ldrb	r3, [r7, #27]
 801584a:	773b      	strb	r3, [r7, #28]
 801584c:	e002      	b.n	8015854 <etharp_find_entry+0x1ec>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 801584e:	f04f 33ff 	mov.w	r3, #4294967295
 8015852:	e043      	b.n	80158dc <etharp_find_entry+0x274>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015854:	7f3b      	ldrb	r3, [r7, #28]
 8015856:	2b09      	cmp	r3, #9
 8015858:	d906      	bls.n	8015868 <etharp_find_entry+0x200>
 801585a:	4b23      	ldr	r3, [pc, #140]	; (80158e8 <etharp_find_entry+0x280>)
 801585c:	f240 1281 	movw	r2, #385	; 0x181
 8015860:	4925      	ldr	r1, [pc, #148]	; (80158f8 <etharp_find_entry+0x290>)
 8015862:	4823      	ldr	r0, [pc, #140]	; (80158f0 <etharp_find_entry+0x288>)
 8015864:	f002 fa4e 	bl	8017d04 <iprintf>
    etharp_free_entry(i);
 8015868:	7f3b      	ldrb	r3, [r7, #28]
 801586a:	4618      	mov	r0, r3
 801586c:	f7ff fe1e 	bl	80154ac <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015870:	7f3b      	ldrb	r3, [r7, #28]
 8015872:	2b09      	cmp	r3, #9
 8015874:	d906      	bls.n	8015884 <etharp_find_entry+0x21c>
 8015876:	4b1c      	ldr	r3, [pc, #112]	; (80158e8 <etharp_find_entry+0x280>)
 8015878:	f240 1285 	movw	r2, #389	; 0x185
 801587c:	491e      	ldr	r1, [pc, #120]	; (80158f8 <etharp_find_entry+0x290>)
 801587e:	481c      	ldr	r0, [pc, #112]	; (80158f0 <etharp_find_entry+0x288>)
 8015880:	f002 fa40 	bl	8017d04 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015884:	7f3a      	ldrb	r2, [r7, #28]
 8015886:	4917      	ldr	r1, [pc, #92]	; (80158e4 <etharp_find_entry+0x27c>)
 8015888:	4613      	mov	r3, r2
 801588a:	005b      	lsls	r3, r3, #1
 801588c:	4413      	add	r3, r2
 801588e:	00db      	lsls	r3, r3, #3
 8015890:	440b      	add	r3, r1
 8015892:	3314      	adds	r3, #20
 8015894:	781b      	ldrb	r3, [r3, #0]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d006      	beq.n	80158a8 <etharp_find_entry+0x240>
 801589a:	4b13      	ldr	r3, [pc, #76]	; (80158e8 <etharp_find_entry+0x280>)
 801589c:	f240 1287 	movw	r2, #391	; 0x187
 80158a0:	4916      	ldr	r1, [pc, #88]	; (80158fc <etharp_find_entry+0x294>)
 80158a2:	4813      	ldr	r0, [pc, #76]	; (80158f0 <etharp_find_entry+0x288>)
 80158a4:	f002 fa2e 	bl	8017d04 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d00a      	beq.n	80158c4 <etharp_find_entry+0x25c>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80158ae:	7f3a      	ldrb	r2, [r7, #28]
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	6819      	ldr	r1, [r3, #0]
 80158b4:	480b      	ldr	r0, [pc, #44]	; (80158e4 <etharp_find_entry+0x27c>)
 80158b6:	4613      	mov	r3, r2
 80158b8:	005b      	lsls	r3, r3, #1
 80158ba:	4413      	add	r3, r2
 80158bc:	00db      	lsls	r3, r3, #3
 80158be:	4403      	add	r3, r0
 80158c0:	3304      	adds	r3, #4
 80158c2:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80158c4:	7f3a      	ldrb	r2, [r7, #28]
 80158c6:	4907      	ldr	r1, [pc, #28]	; (80158e4 <etharp_find_entry+0x27c>)
 80158c8:	4613      	mov	r3, r2
 80158ca:	005b      	lsls	r3, r3, #1
 80158cc:	4413      	add	r3, r2
 80158ce:	00db      	lsls	r3, r3, #3
 80158d0:	440b      	add	r3, r1
 80158d2:	3312      	adds	r3, #18
 80158d4:	2200      	movs	r2, #0
 80158d6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 80158d8:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 80158dc:	4618      	mov	r0, r3
 80158de:	3720      	adds	r7, #32
 80158e0:	46bd      	mov	sp, r7
 80158e2:	bd80      	pop	{r7, pc}
 80158e4:	24021840 	.word	0x24021840
 80158e8:	0801a574 	.word	0x0801a574
 80158ec:	0801a600 	.word	0x0801a600
 80158f0:	0801a5b8 	.word	0x0801a5b8
 80158f4:	0801a640 	.word	0x0801a640
 80158f8:	0801a658 	.word	0x0801a658
 80158fc:	0801a66c 	.word	0x0801a66c

08015900 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b08a      	sub	sp, #40	; 0x28
 8015904:	af02      	add	r7, sp, #8
 8015906:	60f8      	str	r0, [r7, #12]
 8015908:	60b9      	str	r1, [r7, #8]
 801590a:	607a      	str	r2, [r7, #4]
 801590c:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015914:	2b06      	cmp	r3, #6
 8015916:	d006      	beq.n	8015926 <etharp_update_arp_entry+0x26>
 8015918:	4b5c      	ldr	r3, [pc, #368]	; (8015a8c <etharp_update_arp_entry+0x18c>)
 801591a:	f240 12ab 	movw	r2, #427	; 0x1ab
 801591e:	495c      	ldr	r1, [pc, #368]	; (8015a90 <etharp_update_arp_entry+0x190>)
 8015920:	485c      	ldr	r0, [pc, #368]	; (8015a94 <etharp_update_arp_entry+0x194>)
 8015922:	f002 f9ef 	bl	8017d04 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015926:	68bb      	ldr	r3, [r7, #8]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d012      	beq.n	8015952 <etharp_update_arp_entry+0x52>
 801592c:	68bb      	ldr	r3, [r7, #8]
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	2b00      	cmp	r3, #0
 8015932:	d00e      	beq.n	8015952 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015934:	68bb      	ldr	r3, [r7, #8]
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	68f9      	ldr	r1, [r7, #12]
 801593a:	4618      	mov	r0, r3
 801593c:	f001 f986 	bl	8016c4c <ip4_addr_isbroadcast_u32>
 8015940:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015942:	2b00      	cmp	r3, #0
 8015944:	d105      	bne.n	8015952 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015946:	68bb      	ldr	r3, [r7, #8]
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801594e:	2be0      	cmp	r3, #224	; 0xe0
 8015950:	d102      	bne.n	8015958 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015952:	f06f 030f 	mvn.w	r3, #15
 8015956:	e095      	b.n	8015a84 <etharp_update_arp_entry+0x184>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015958:	78fb      	ldrb	r3, [r7, #3]
 801595a:	68fa      	ldr	r2, [r7, #12]
 801595c:	4619      	mov	r1, r3
 801595e:	68b8      	ldr	r0, [r7, #8]
 8015960:	f7ff fe82 	bl	8015668 <etharp_find_entry>
 8015964:	4603      	mov	r3, r0
 8015966:	77fb      	strb	r3, [r7, #31]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015968:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801596c:	2b00      	cmp	r3, #0
 801596e:	da02      	bge.n	8015976 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015970:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015974:	e086      	b.n	8015a84 <etharp_update_arp_entry+0x184>
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 8015976:	78fb      	ldrb	r3, [r7, #3]
 8015978:	f003 0304 	and.w	r3, r3, #4
 801597c:	2b00      	cmp	r3, #0
 801597e:	d00b      	beq.n	8015998 <etharp_update_arp_entry+0x98>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 8015980:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8015984:	4944      	ldr	r1, [pc, #272]	; (8015a98 <etharp_update_arp_entry+0x198>)
 8015986:	4613      	mov	r3, r2
 8015988:	005b      	lsls	r3, r3, #1
 801598a:	4413      	add	r3, r2
 801598c:	00db      	lsls	r3, r3, #3
 801598e:	440b      	add	r3, r1
 8015990:	3314      	adds	r3, #20
 8015992:	2205      	movs	r2, #5
 8015994:	701a      	strb	r2, [r3, #0]
 8015996:	e019      	b.n	80159cc <etharp_update_arp_entry+0xcc>
  } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
 8015998:	f997 201f 	ldrsb.w	r2, [r7, #31]
 801599c:	493e      	ldr	r1, [pc, #248]	; (8015a98 <etharp_update_arp_entry+0x198>)
 801599e:	4613      	mov	r3, r2
 80159a0:	005b      	lsls	r3, r3, #1
 80159a2:	4413      	add	r3, r2
 80159a4:	00db      	lsls	r3, r3, #3
 80159a6:	440b      	add	r3, r1
 80159a8:	3314      	adds	r3, #20
 80159aa:	781b      	ldrb	r3, [r3, #0]
 80159ac:	2b05      	cmp	r3, #5
 80159ae:	d102      	bne.n	80159b6 <etharp_update_arp_entry+0xb6>
    /* found entry is a static type, don't overwrite it */
    return ERR_VAL;
 80159b0:	f06f 0305 	mvn.w	r3, #5
 80159b4:	e066      	b.n	8015a84 <etharp_update_arp_entry+0x184>
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80159b6:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80159ba:	4937      	ldr	r1, [pc, #220]	; (8015a98 <etharp_update_arp_entry+0x198>)
 80159bc:	4613      	mov	r3, r2
 80159be:	005b      	lsls	r3, r3, #1
 80159c0:	4413      	add	r3, r2
 80159c2:	00db      	lsls	r3, r3, #3
 80159c4:	440b      	add	r3, r1
 80159c6:	3314      	adds	r3, #20
 80159c8:	2202      	movs	r2, #2
 80159ca:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80159cc:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80159d0:	4931      	ldr	r1, [pc, #196]	; (8015a98 <etharp_update_arp_entry+0x198>)
 80159d2:	4613      	mov	r3, r2
 80159d4:	005b      	lsls	r3, r3, #1
 80159d6:	4413      	add	r3, r2
 80159d8:	00db      	lsls	r3, r3, #3
 80159da:	440b      	add	r3, r1
 80159dc:	3308      	adds	r3, #8
 80159de:	68fa      	ldr	r2, [r7, #12]
 80159e0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80159e2:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80159e6:	4613      	mov	r3, r2
 80159e8:	005b      	lsls	r3, r3, #1
 80159ea:	4413      	add	r3, r2
 80159ec:	00db      	lsls	r3, r3, #3
 80159ee:	3308      	adds	r3, #8
 80159f0:	4a29      	ldr	r2, [pc, #164]	; (8015a98 <etharp_update_arp_entry+0x198>)
 80159f2:	4413      	add	r3, r2
 80159f4:	3304      	adds	r3, #4
 80159f6:	2206      	movs	r2, #6
 80159f8:	6879      	ldr	r1, [r7, #4]
 80159fa:	4618      	mov	r0, r3
 80159fc:	f002 f96f 	bl	8017cde <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015a00:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8015a04:	4924      	ldr	r1, [pc, #144]	; (8015a98 <etharp_update_arp_entry+0x198>)
 8015a06:	4613      	mov	r3, r2
 8015a08:	005b      	lsls	r3, r3, #1
 8015a0a:	4413      	add	r3, r2
 8015a0c:	00db      	lsls	r3, r3, #3
 8015a0e:	440b      	add	r3, r1
 8015a10:	3312      	adds	r3, #18
 8015a12:	2200      	movs	r2, #0
 8015a14:	801a      	strh	r2, [r3, #0]
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
 8015a16:	e029      	b.n	8015a6c <etharp_update_arp_entry+0x16c>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
 8015a18:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8015a1c:	491e      	ldr	r1, [pc, #120]	; (8015a98 <etharp_update_arp_entry+0x198>)
 8015a1e:	4613      	mov	r3, r2
 8015a20:	005b      	lsls	r3, r3, #1
 8015a22:	4413      	add	r3, r2
 8015a24:	00db      	lsls	r3, r3, #3
 8015a26:	440b      	add	r3, r1
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	61bb      	str	r3, [r7, #24]
    /* pop first item off the queue */
    arp_table[i].q = q->next;
 8015a2c:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8015a30:	69bb      	ldr	r3, [r7, #24]
 8015a32:	6819      	ldr	r1, [r3, #0]
 8015a34:	4818      	ldr	r0, [pc, #96]	; (8015a98 <etharp_update_arp_entry+0x198>)
 8015a36:	4613      	mov	r3, r2
 8015a38:	005b      	lsls	r3, r3, #1
 8015a3a:	4413      	add	r3, r2
 8015a3c:	00db      	lsls	r3, r3, #3
 8015a3e:	4403      	add	r3, r0
 8015a40:	6019      	str	r1, [r3, #0]
    /* get the packet pointer */
    p = q->p;
 8015a42:	69bb      	ldr	r3, [r7, #24]
 8015a44:	685b      	ldr	r3, [r3, #4]
 8015a46:	617b      	str	r3, [r7, #20]
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
 8015a48:	69b9      	ldr	r1, [r7, #24]
 8015a4a:	200a      	movs	r0, #10
 8015a4c:	f7f9 fe32 	bl	800f6b4 <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	f103 0231 	add.w	r2, r3, #49	; 0x31
 8015a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015a5a:	9300      	str	r3, [sp, #0]
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	6979      	ldr	r1, [r7, #20]
 8015a60:	68f8      	ldr	r0, [r7, #12]
 8015a62:	f001 ff95 	bl	8017990 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015a66:	6978      	ldr	r0, [r7, #20]
 8015a68:	f7fa fc00 	bl	801026c <pbuf_free>
  while (arp_table[i].q != NULL) {
 8015a6c:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8015a70:	4909      	ldr	r1, [pc, #36]	; (8015a98 <etharp_update_arp_entry+0x198>)
 8015a72:	4613      	mov	r3, r2
 8015a74:	005b      	lsls	r3, r3, #1
 8015a76:	4413      	add	r3, r2
 8015a78:	00db      	lsls	r3, r3, #3
 8015a7a:	440b      	add	r3, r1
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d1ca      	bne.n	8015a18 <etharp_update_arp_entry+0x118>
  }
  return ERR_OK;
 8015a82:	2300      	movs	r3, #0
}
 8015a84:	4618      	mov	r0, r3
 8015a86:	3720      	adds	r7, #32
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}
 8015a8c:	0801a574 	.word	0x0801a574
 8015a90:	0801a698 	.word	0x0801a698
 8015a94:	0801a5b8 	.word	0x0801a5b8
 8015a98:	24021840 	.word	0x24021840

08015a9c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b084      	sub	sp, #16
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	73fb      	strb	r3, [r7, #15]
 8015aa8:	e01f      	b.n	8015aea <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8015aaa:	7bfa      	ldrb	r2, [r7, #15]
 8015aac:	4912      	ldr	r1, [pc, #72]	; (8015af8 <etharp_cleanup_netif+0x5c>)
 8015aae:	4613      	mov	r3, r2
 8015ab0:	005b      	lsls	r3, r3, #1
 8015ab2:	4413      	add	r3, r2
 8015ab4:	00db      	lsls	r3, r3, #3
 8015ab6:	440b      	add	r3, r1
 8015ab8:	3314      	adds	r3, #20
 8015aba:	781b      	ldrb	r3, [r3, #0]
 8015abc:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015abe:	7bbb      	ldrb	r3, [r7, #14]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d00f      	beq.n	8015ae4 <etharp_cleanup_netif+0x48>
 8015ac4:	7bfa      	ldrb	r2, [r7, #15]
 8015ac6:	490c      	ldr	r1, [pc, #48]	; (8015af8 <etharp_cleanup_netif+0x5c>)
 8015ac8:	4613      	mov	r3, r2
 8015aca:	005b      	lsls	r3, r3, #1
 8015acc:	4413      	add	r3, r2
 8015ace:	00db      	lsls	r3, r3, #3
 8015ad0:	440b      	add	r3, r1
 8015ad2:	3308      	adds	r3, #8
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	687a      	ldr	r2, [r7, #4]
 8015ad8:	429a      	cmp	r2, r3
 8015ada:	d103      	bne.n	8015ae4 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8015adc:	7bfb      	ldrb	r3, [r7, #15]
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f7ff fce4 	bl	80154ac <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015ae4:	7bfb      	ldrb	r3, [r7, #15]
 8015ae6:	3301      	adds	r3, #1
 8015ae8:	73fb      	strb	r3, [r7, #15]
 8015aea:	7bfb      	ldrb	r3, [r7, #15]
 8015aec:	2b09      	cmp	r3, #9
 8015aee:	d9dc      	bls.n	8015aaa <etharp_cleanup_netif+0xe>
    }
  }
}
 8015af0:	bf00      	nop
 8015af2:	3710      	adds	r7, #16
 8015af4:	46bd      	mov	sp, r7
 8015af6:	bd80      	pop	{r7, pc}
 8015af8:	24021840 	.word	0x24021840

08015afc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015afc:	b5b0      	push	{r4, r5, r7, lr}
 8015afe:	b08a      	sub	sp, #40	; 0x28
 8015b00:	af04      	add	r7, sp, #16
 8015b02:	6078      	str	r0, [r7, #4]
 8015b04:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015b06:	683b      	ldr	r3, [r7, #0]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d107      	bne.n	8015b1c <etharp_input+0x20>
 8015b0c:	4b3d      	ldr	r3, [pc, #244]	; (8015c04 <etharp_input+0x108>)
 8015b0e:	f44f 7222 	mov.w	r2, #648	; 0x288
 8015b12:	493d      	ldr	r1, [pc, #244]	; (8015c08 <etharp_input+0x10c>)
 8015b14:	483d      	ldr	r0, [pc, #244]	; (8015c0c <etharp_input+0x110>)
 8015b16:	f002 f8f5 	bl	8017d04 <iprintf>
 8015b1a:	e06f      	b.n	8015bfc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	685b      	ldr	r3, [r3, #4]
 8015b20:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8015b22:	693b      	ldr	r3, [r7, #16]
 8015b24:	881b      	ldrh	r3, [r3, #0]
 8015b26:	b29b      	uxth	r3, r3
 8015b28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015b2c:	d10c      	bne.n	8015b48 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015b2e:	693b      	ldr	r3, [r7, #16]
 8015b30:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8015b32:	2b06      	cmp	r3, #6
 8015b34:	d108      	bne.n	8015b48 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015b36:	693b      	ldr	r3, [r7, #16]
 8015b38:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015b3a:	2b04      	cmp	r3, #4
 8015b3c:	d104      	bne.n	8015b48 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015b3e:	693b      	ldr	r3, [r7, #16]
 8015b40:	885b      	ldrh	r3, [r3, #2]
 8015b42:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015b44:	2b08      	cmp	r3, #8
 8015b46:	d003      	beq.n	8015b50 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015b48:	6878      	ldr	r0, [r7, #4]
 8015b4a:	f7fa fb8f 	bl	801026c <pbuf_free>
    return;
 8015b4e:	e055      	b.n	8015bfc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8015b50:	693b      	ldr	r3, [r7, #16]
 8015b52:	330e      	adds	r3, #14
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8015b58:	693b      	ldr	r3, [r7, #16]
 8015b5a:	3318      	adds	r3, #24
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015b60:	683b      	ldr	r3, [r7, #0]
 8015b62:	3304      	adds	r3, #4
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d102      	bne.n	8015b70 <etharp_input+0x74>
    for_us = 0;
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	75fb      	strb	r3, [r7, #23]
 8015b6e:	e009      	b.n	8015b84 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015b70:	68ba      	ldr	r2, [r7, #8]
 8015b72:	683b      	ldr	r3, [r7, #0]
 8015b74:	3304      	adds	r3, #4
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	429a      	cmp	r2, r3
 8015b7a:	bf0c      	ite	eq
 8015b7c:	2301      	moveq	r3, #1
 8015b7e:	2300      	movne	r3, #0
 8015b80:	b2db      	uxtb	r3, r3
 8015b82:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015b84:	693b      	ldr	r3, [r7, #16]
 8015b86:	f103 0208 	add.w	r2, r3, #8
 8015b8a:	7dfb      	ldrb	r3, [r7, #23]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d001      	beq.n	8015b94 <etharp_input+0x98>
 8015b90:	2301      	movs	r3, #1
 8015b92:	e000      	b.n	8015b96 <etharp_input+0x9a>
 8015b94:	2302      	movs	r3, #2
 8015b96:	f107 010c 	add.w	r1, r7, #12
 8015b9a:	6838      	ldr	r0, [r7, #0]
 8015b9c:	f7ff feb0 	bl	8015900 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015ba0:	693b      	ldr	r3, [r7, #16]
 8015ba2:	88db      	ldrh	r3, [r3, #6]
 8015ba4:	b29b      	uxth	r3, r3
 8015ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015baa:	d003      	beq.n	8015bb4 <etharp_input+0xb8>
 8015bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015bb0:	d01e      	beq.n	8015bf0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8015bb2:	e020      	b.n	8015bf6 <etharp_input+0xfa>
    if (for_us) {
 8015bb4:	7dfb      	ldrb	r3, [r7, #23]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d01c      	beq.n	8015bf4 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015bba:	683b      	ldr	r3, [r7, #0]
 8015bbc:	f103 0031 	add.w	r0, r3, #49	; 0x31
 8015bc0:	693b      	ldr	r3, [r7, #16]
 8015bc2:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015bc6:	683b      	ldr	r3, [r7, #0]
 8015bc8:	f103 0531 	add.w	r5, r3, #49	; 0x31
 8015bcc:	683b      	ldr	r3, [r7, #0]
 8015bce:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8015bd0:	693a      	ldr	r2, [r7, #16]
 8015bd2:	3208      	adds	r2, #8
      etharp_raw(netif,
 8015bd4:	2102      	movs	r1, #2
 8015bd6:	9103      	str	r1, [sp, #12]
 8015bd8:	f107 010c 	add.w	r1, r7, #12
 8015bdc:	9102      	str	r1, [sp, #8]
 8015bde:	9201      	str	r2, [sp, #4]
 8015be0:	9300      	str	r3, [sp, #0]
 8015be2:	462b      	mov	r3, r5
 8015be4:	4622      	mov	r2, r4
 8015be6:	4601      	mov	r1, r0
 8015be8:	6838      	ldr	r0, [r7, #0]
 8015bea:	f000 fb33 	bl	8016254 <etharp_raw>
    break;
 8015bee:	e001      	b.n	8015bf4 <etharp_input+0xf8>
    break;
 8015bf0:	bf00      	nop
 8015bf2:	e000      	b.n	8015bf6 <etharp_input+0xfa>
    break;
 8015bf4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015bf6:	6878      	ldr	r0, [r7, #4]
 8015bf8:	f7fa fb38 	bl	801026c <pbuf_free>
}
 8015bfc:	3718      	adds	r7, #24
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	bdb0      	pop	{r4, r5, r7, pc}
 8015c02:	bf00      	nop
 8015c04:	0801a574 	.word	0x0801a574
 8015c08:	0801a6f0 	.word	0x0801a6f0
 8015c0c:	0801a5b8 	.word	0x0801a5b8

08015c10 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b086      	sub	sp, #24
 8015c14:	af02      	add	r7, sp, #8
 8015c16:	60f8      	str	r0, [r7, #12]
 8015c18:	60b9      	str	r1, [r7, #8]
 8015c1a:	4613      	mov	r3, r2
 8015c1c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015c1e:	79fa      	ldrb	r2, [r7, #7]
 8015c20:	4944      	ldr	r1, [pc, #272]	; (8015d34 <etharp_output_to_arp_index+0x124>)
 8015c22:	4613      	mov	r3, r2
 8015c24:	005b      	lsls	r3, r3, #1
 8015c26:	4413      	add	r3, r2
 8015c28:	00db      	lsls	r3, r3, #3
 8015c2a:	440b      	add	r3, r1
 8015c2c:	3314      	adds	r3, #20
 8015c2e:	781b      	ldrb	r3, [r3, #0]
 8015c30:	2b01      	cmp	r3, #1
 8015c32:	d806      	bhi.n	8015c42 <etharp_output_to_arp_index+0x32>
 8015c34:	4b40      	ldr	r3, [pc, #256]	; (8015d38 <etharp_output_to_arp_index+0x128>)
 8015c36:	f240 22ed 	movw	r2, #749	; 0x2ed
 8015c3a:	4940      	ldr	r1, [pc, #256]	; (8015d3c <etharp_output_to_arp_index+0x12c>)
 8015c3c:	4840      	ldr	r0, [pc, #256]	; (8015d40 <etharp_output_to_arp_index+0x130>)
 8015c3e:	f002 f861 	bl	8017d04 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015c42:	79fa      	ldrb	r2, [r7, #7]
 8015c44:	493b      	ldr	r1, [pc, #236]	; (8015d34 <etharp_output_to_arp_index+0x124>)
 8015c46:	4613      	mov	r3, r2
 8015c48:	005b      	lsls	r3, r3, #1
 8015c4a:	4413      	add	r3, r2
 8015c4c:	00db      	lsls	r3, r3, #3
 8015c4e:	440b      	add	r3, r1
 8015c50:	3314      	adds	r3, #20
 8015c52:	781b      	ldrb	r3, [r3, #0]
 8015c54:	2b02      	cmp	r3, #2
 8015c56:	d153      	bne.n	8015d00 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015c58:	79fa      	ldrb	r2, [r7, #7]
 8015c5a:	4936      	ldr	r1, [pc, #216]	; (8015d34 <etharp_output_to_arp_index+0x124>)
 8015c5c:	4613      	mov	r3, r2
 8015c5e:	005b      	lsls	r3, r3, #1
 8015c60:	4413      	add	r3, r2
 8015c62:	00db      	lsls	r3, r3, #3
 8015c64:	440b      	add	r3, r1
 8015c66:	3312      	adds	r3, #18
 8015c68:	881b      	ldrh	r3, [r3, #0]
 8015c6a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015c6e:	d919      	bls.n	8015ca4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015c70:	79fa      	ldrb	r2, [r7, #7]
 8015c72:	4613      	mov	r3, r2
 8015c74:	005b      	lsls	r3, r3, #1
 8015c76:	4413      	add	r3, r2
 8015c78:	00db      	lsls	r3, r3, #3
 8015c7a:	4a2e      	ldr	r2, [pc, #184]	; (8015d34 <etharp_output_to_arp_index+0x124>)
 8015c7c:	4413      	add	r3, r2
 8015c7e:	3304      	adds	r3, #4
 8015c80:	4619      	mov	r1, r3
 8015c82:	68f8      	ldr	r0, [r7, #12]
 8015c84:	f000 fb94 	bl	80163b0 <etharp_request>
 8015c88:	4603      	mov	r3, r0
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d138      	bne.n	8015d00 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015c8e:	79fa      	ldrb	r2, [r7, #7]
 8015c90:	4928      	ldr	r1, [pc, #160]	; (8015d34 <etharp_output_to_arp_index+0x124>)
 8015c92:	4613      	mov	r3, r2
 8015c94:	005b      	lsls	r3, r3, #1
 8015c96:	4413      	add	r3, r2
 8015c98:	00db      	lsls	r3, r3, #3
 8015c9a:	440b      	add	r3, r1
 8015c9c:	3314      	adds	r3, #20
 8015c9e:	2203      	movs	r2, #3
 8015ca0:	701a      	strb	r2, [r3, #0]
 8015ca2:	e02d      	b.n	8015d00 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015ca4:	79fa      	ldrb	r2, [r7, #7]
 8015ca6:	4923      	ldr	r1, [pc, #140]	; (8015d34 <etharp_output_to_arp_index+0x124>)
 8015ca8:	4613      	mov	r3, r2
 8015caa:	005b      	lsls	r3, r3, #1
 8015cac:	4413      	add	r3, r2
 8015cae:	00db      	lsls	r3, r3, #3
 8015cb0:	440b      	add	r3, r1
 8015cb2:	3312      	adds	r3, #18
 8015cb4:	881b      	ldrh	r3, [r3, #0]
 8015cb6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015cba:	d321      	bcc.n	8015d00 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015cbc:	79fa      	ldrb	r2, [r7, #7]
 8015cbe:	4613      	mov	r3, r2
 8015cc0:	005b      	lsls	r3, r3, #1
 8015cc2:	4413      	add	r3, r2
 8015cc4:	00db      	lsls	r3, r3, #3
 8015cc6:	4a1b      	ldr	r2, [pc, #108]	; (8015d34 <etharp_output_to_arp_index+0x124>)
 8015cc8:	4413      	add	r3, r2
 8015cca:	1d19      	adds	r1, r3, #4
 8015ccc:	79fa      	ldrb	r2, [r7, #7]
 8015cce:	4613      	mov	r3, r2
 8015cd0:	005b      	lsls	r3, r3, #1
 8015cd2:	4413      	add	r3, r2
 8015cd4:	00db      	lsls	r3, r3, #3
 8015cd6:	3308      	adds	r3, #8
 8015cd8:	4a16      	ldr	r2, [pc, #88]	; (8015d34 <etharp_output_to_arp_index+0x124>)
 8015cda:	4413      	add	r3, r2
 8015cdc:	3304      	adds	r3, #4
 8015cde:	461a      	mov	r2, r3
 8015ce0:	68f8      	ldr	r0, [r7, #12]
 8015ce2:	f000 fb43 	bl	801636c <etharp_request_dst>
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d109      	bne.n	8015d00 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015cec:	79fa      	ldrb	r2, [r7, #7]
 8015cee:	4911      	ldr	r1, [pc, #68]	; (8015d34 <etharp_output_to_arp_index+0x124>)
 8015cf0:	4613      	mov	r3, r2
 8015cf2:	005b      	lsls	r3, r3, #1
 8015cf4:	4413      	add	r3, r2
 8015cf6:	00db      	lsls	r3, r3, #3
 8015cf8:	440b      	add	r3, r1
 8015cfa:	3314      	adds	r3, #20
 8015cfc:	2203      	movs	r2, #3
 8015cfe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	f103 0131 	add.w	r1, r3, #49	; 0x31
 8015d06:	79fa      	ldrb	r2, [r7, #7]
 8015d08:	4613      	mov	r3, r2
 8015d0a:	005b      	lsls	r3, r3, #1
 8015d0c:	4413      	add	r3, r2
 8015d0e:	00db      	lsls	r3, r3, #3
 8015d10:	3308      	adds	r3, #8
 8015d12:	4a08      	ldr	r2, [pc, #32]	; (8015d34 <etharp_output_to_arp_index+0x124>)
 8015d14:	4413      	add	r3, r2
 8015d16:	1d1a      	adds	r2, r3, #4
 8015d18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015d1c:	9300      	str	r3, [sp, #0]
 8015d1e:	4613      	mov	r3, r2
 8015d20:	460a      	mov	r2, r1
 8015d22:	68b9      	ldr	r1, [r7, #8]
 8015d24:	68f8      	ldr	r0, [r7, #12]
 8015d26:	f001 fe33 	bl	8017990 <ethernet_output>
 8015d2a:	4603      	mov	r3, r0
}
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	3710      	adds	r7, #16
 8015d30:	46bd      	mov	sp, r7
 8015d32:	bd80      	pop	{r7, pc}
 8015d34:	24021840 	.word	0x24021840
 8015d38:	0801a574 	.word	0x0801a574
 8015d3c:	0801a710 	.word	0x0801a710
 8015d40:	0801a5b8 	.word	0x0801a5b8

08015d44 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b08a      	sub	sp, #40	; 0x28
 8015d48:	af02      	add	r7, sp, #8
 8015d4a:	60f8      	str	r0, [r7, #12]
 8015d4c:	60b9      	str	r1, [r7, #8]
 8015d4e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d106      	bne.n	8015d68 <etharp_output+0x24>
 8015d5a:	4b69      	ldr	r3, [pc, #420]	; (8015f00 <etharp_output+0x1bc>)
 8015d5c:	f240 321b 	movw	r2, #795	; 0x31b
 8015d60:	4968      	ldr	r1, [pc, #416]	; (8015f04 <etharp_output+0x1c0>)
 8015d62:	4869      	ldr	r0, [pc, #420]	; (8015f08 <etharp_output+0x1c4>)
 8015d64:	f001 ffce 	bl	8017d04 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015d68:	68bb      	ldr	r3, [r7, #8]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d106      	bne.n	8015d7c <etharp_output+0x38>
 8015d6e:	4b64      	ldr	r3, [pc, #400]	; (8015f00 <etharp_output+0x1bc>)
 8015d70:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015d74:	4965      	ldr	r1, [pc, #404]	; (8015f0c <etharp_output+0x1c8>)
 8015d76:	4864      	ldr	r0, [pc, #400]	; (8015f08 <etharp_output+0x1c4>)
 8015d78:	f001 ffc4 	bl	8017d04 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d106      	bne.n	8015d90 <etharp_output+0x4c>
 8015d82:	4b5f      	ldr	r3, [pc, #380]	; (8015f00 <etharp_output+0x1bc>)
 8015d84:	f240 321d 	movw	r2, #797	; 0x31d
 8015d88:	4961      	ldr	r1, [pc, #388]	; (8015f10 <etharp_output+0x1cc>)
 8015d8a:	485f      	ldr	r0, [pc, #380]	; (8015f08 <etharp_output+0x1c4>)
 8015d8c:	f001 ffba 	bl	8017d04 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	68f9      	ldr	r1, [r7, #12]
 8015d96:	4618      	mov	r0, r3
 8015d98:	f000 ff58 	bl	8016c4c <ip4_addr_isbroadcast_u32>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d002      	beq.n	8015da8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015da2:	4b5c      	ldr	r3, [pc, #368]	; (8015f14 <etharp_output+0x1d0>)
 8015da4:	61fb      	str	r3, [r7, #28]
 8015da6:	e09b      	b.n	8015ee0 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015db0:	2be0      	cmp	r3, #224	; 0xe0
 8015db2:	d118      	bne.n	8015de6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015db4:	2301      	movs	r3, #1
 8015db6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015db8:	2300      	movs	r3, #0
 8015dba:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015dbc:	235e      	movs	r3, #94	; 0x5e
 8015dbe:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	3301      	adds	r3, #1
 8015dc4:	781b      	ldrb	r3, [r3, #0]
 8015dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015dca:	b2db      	uxtb	r3, r3
 8015dcc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	3302      	adds	r3, #2
 8015dd2:	781b      	ldrb	r3, [r3, #0]
 8015dd4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	3303      	adds	r3, #3
 8015dda:	781b      	ldrb	r3, [r3, #0]
 8015ddc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015dde:	f107 0310 	add.w	r3, r7, #16
 8015de2:	61fb      	str	r3, [r7, #28]
 8015de4:	e07c      	b.n	8015ee0 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	681a      	ldr	r2, [r3, #0]
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	3304      	adds	r3, #4
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	405a      	eors	r2, r3
 8015df2:	68fb      	ldr	r3, [r7, #12]
 8015df4:	3308      	adds	r3, #8
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	4013      	ands	r3, r2
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d012      	beq.n	8015e24 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015e04:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015e08:	4293      	cmp	r3, r2
 8015e0a:	d00b      	beq.n	8015e24 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	330c      	adds	r3, #12
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d003      	beq.n	8015e1e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	330c      	adds	r3, #12
 8015e1a:	61bb      	str	r3, [r7, #24]
 8015e1c:	e002      	b.n	8015e24 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015e1e:	f06f 0303 	mvn.w	r3, #3
 8015e22:	e069      	b.n	8015ef8 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015e24:	4b3c      	ldr	r3, [pc, #240]	; (8015f18 <etharp_output+0x1d4>)
 8015e26:	781b      	ldrb	r3, [r3, #0]
 8015e28:	4619      	mov	r1, r3
 8015e2a:	4a3c      	ldr	r2, [pc, #240]	; (8015f1c <etharp_output+0x1d8>)
 8015e2c:	460b      	mov	r3, r1
 8015e2e:	005b      	lsls	r3, r3, #1
 8015e30:	440b      	add	r3, r1
 8015e32:	00db      	lsls	r3, r3, #3
 8015e34:	4413      	add	r3, r2
 8015e36:	3314      	adds	r3, #20
 8015e38:	781b      	ldrb	r3, [r3, #0]
 8015e3a:	2b01      	cmp	r3, #1
 8015e3c:	d917      	bls.n	8015e6e <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015e3e:	69bb      	ldr	r3, [r7, #24]
 8015e40:	681a      	ldr	r2, [r3, #0]
 8015e42:	4b35      	ldr	r3, [pc, #212]	; (8015f18 <etharp_output+0x1d4>)
 8015e44:	781b      	ldrb	r3, [r3, #0]
 8015e46:	4618      	mov	r0, r3
 8015e48:	4934      	ldr	r1, [pc, #208]	; (8015f1c <etharp_output+0x1d8>)
 8015e4a:	4603      	mov	r3, r0
 8015e4c:	005b      	lsls	r3, r3, #1
 8015e4e:	4403      	add	r3, r0
 8015e50:	00db      	lsls	r3, r3, #3
 8015e52:	440b      	add	r3, r1
 8015e54:	3304      	adds	r3, #4
 8015e56:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015e58:	429a      	cmp	r2, r3
 8015e5a:	d108      	bne.n	8015e6e <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015e5c:	4b2e      	ldr	r3, [pc, #184]	; (8015f18 <etharp_output+0x1d4>)
 8015e5e:	781b      	ldrb	r3, [r3, #0]
 8015e60:	461a      	mov	r2, r3
 8015e62:	68b9      	ldr	r1, [r7, #8]
 8015e64:	68f8      	ldr	r0, [r7, #12]
 8015e66:	f7ff fed3 	bl	8015c10 <etharp_output_to_arp_index>
 8015e6a:	4603      	mov	r3, r0
 8015e6c:	e044      	b.n	8015ef8 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015e6e:	2300      	movs	r3, #0
 8015e70:	75fb      	strb	r3, [r7, #23]
 8015e72:	e02a      	b.n	8015eca <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015e74:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015e78:	4928      	ldr	r1, [pc, #160]	; (8015f1c <etharp_output+0x1d8>)
 8015e7a:	4613      	mov	r3, r2
 8015e7c:	005b      	lsls	r3, r3, #1
 8015e7e:	4413      	add	r3, r2
 8015e80:	00db      	lsls	r3, r3, #3
 8015e82:	440b      	add	r3, r1
 8015e84:	3314      	adds	r3, #20
 8015e86:	781b      	ldrb	r3, [r3, #0]
 8015e88:	2b01      	cmp	r3, #1
 8015e8a:	d918      	bls.n	8015ebe <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015e8c:	69bb      	ldr	r3, [r7, #24]
 8015e8e:	6819      	ldr	r1, [r3, #0]
 8015e90:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015e94:	4821      	ldr	r0, [pc, #132]	; (8015f1c <etharp_output+0x1d8>)
 8015e96:	4613      	mov	r3, r2
 8015e98:	005b      	lsls	r3, r3, #1
 8015e9a:	4413      	add	r3, r2
 8015e9c:	00db      	lsls	r3, r3, #3
 8015e9e:	4403      	add	r3, r0
 8015ea0:	3304      	adds	r3, #4
 8015ea2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015ea4:	4299      	cmp	r1, r3
 8015ea6:	d10a      	bne.n	8015ebe <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8015ea8:	7dfa      	ldrb	r2, [r7, #23]
 8015eaa:	4b1b      	ldr	r3, [pc, #108]	; (8015f18 <etharp_output+0x1d4>)
 8015eac:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015eae:	7dfb      	ldrb	r3, [r7, #23]
 8015eb0:	461a      	mov	r2, r3
 8015eb2:	68b9      	ldr	r1, [r7, #8]
 8015eb4:	68f8      	ldr	r0, [r7, #12]
 8015eb6:	f7ff feab 	bl	8015c10 <etharp_output_to_arp_index>
 8015eba:	4603      	mov	r3, r0
 8015ebc:	e01c      	b.n	8015ef8 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015ebe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015ec2:	b2db      	uxtb	r3, r3
 8015ec4:	3301      	adds	r3, #1
 8015ec6:	b2db      	uxtb	r3, r3
 8015ec8:	75fb      	strb	r3, [r7, #23]
 8015eca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015ece:	2b09      	cmp	r3, #9
 8015ed0:	ddd0      	ble.n	8015e74 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015ed2:	68ba      	ldr	r2, [r7, #8]
 8015ed4:	69b9      	ldr	r1, [r7, #24]
 8015ed6:	68f8      	ldr	r0, [r7, #12]
 8015ed8:	f000 f822 	bl	8015f20 <etharp_query>
 8015edc:	4603      	mov	r3, r0
 8015ede:	e00b      	b.n	8015ef8 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	f103 0231 	add.w	r2, r3, #49	; 0x31
 8015ee6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015eea:	9300      	str	r3, [sp, #0]
 8015eec:	69fb      	ldr	r3, [r7, #28]
 8015eee:	68b9      	ldr	r1, [r7, #8]
 8015ef0:	68f8      	ldr	r0, [r7, #12]
 8015ef2:	f001 fd4d 	bl	8017990 <ethernet_output>
 8015ef6:	4603      	mov	r3, r0
}
 8015ef8:	4618      	mov	r0, r3
 8015efa:	3720      	adds	r7, #32
 8015efc:	46bd      	mov	sp, r7
 8015efe:	bd80      	pop	{r7, pc}
 8015f00:	0801a574 	.word	0x0801a574
 8015f04:	0801a6f0 	.word	0x0801a6f0
 8015f08:	0801a5b8 	.word	0x0801a5b8
 8015f0c:	0801a5ac 	.word	0x0801a5ac
 8015f10:	0801a6e0 	.word	0x0801a6e0
 8015f14:	0801ad50 	.word	0x0801ad50
 8015f18:	24021930 	.word	0x24021930
 8015f1c:	24021840 	.word	0x24021840

08015f20 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b090      	sub	sp, #64	; 0x40
 8015f24:	af02      	add	r7, sp, #8
 8015f26:	60f8      	str	r0, [r7, #12]
 8015f28:	60b9      	str	r1, [r7, #8]
 8015f2a:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	3331      	adds	r3, #49	; 0x31
 8015f30:	61fb      	str	r3, [r7, #28]
  err_t result = ERR_MEM;
 8015f32:	23ff      	movs	r3, #255	; 0xff
 8015f34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  int is_new_entry = 0;
 8015f38:	2300      	movs	r3, #0
 8015f3a:	633b      	str	r3, [r7, #48]	; 0x30
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015f3c:	68bb      	ldr	r3, [r7, #8]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	68f9      	ldr	r1, [r7, #12]
 8015f42:	4618      	mov	r0, r3
 8015f44:	f000 fe82 	bl	8016c4c <ip4_addr_isbroadcast_u32>
 8015f48:	4603      	mov	r3, r0
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d10c      	bne.n	8015f68 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015f4e:	68bb      	ldr	r3, [r7, #8]
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015f56:	2be0      	cmp	r3, #224	; 0xe0
 8015f58:	d006      	beq.n	8015f68 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015f5a:	68bb      	ldr	r3, [r7, #8]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d003      	beq.n	8015f68 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015f60:	68bb      	ldr	r3, [r7, #8]
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d102      	bne.n	8015f6e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015f68:	f06f 030f 	mvn.w	r3, #15
 8015f6c:	e15f      	b.n	801622e <etharp_query+0x30e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015f6e:	68fa      	ldr	r2, [r7, #12]
 8015f70:	2101      	movs	r1, #1
 8015f72:	68b8      	ldr	r0, [r7, #8]
 8015f74:	f7ff fb78 	bl	8015668 <etharp_find_entry>
 8015f78:	4603      	mov	r3, r0
 8015f7a:	76fb      	strb	r3, [r7, #27]

  /* could not find or create entry? */
  if (i < 0) {
 8015f7c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	da02      	bge.n	8015f8a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8015f84:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015f88:	e151      	b.n	801622e <etharp_query+0x30e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015f8a:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015f8e:	49aa      	ldr	r1, [pc, #680]	; (8016238 <etharp_query+0x318>)
 8015f90:	4613      	mov	r3, r2
 8015f92:	005b      	lsls	r3, r3, #1
 8015f94:	4413      	add	r3, r2
 8015f96:	00db      	lsls	r3, r3, #3
 8015f98:	440b      	add	r3, r1
 8015f9a:	3314      	adds	r3, #20
 8015f9c:	781b      	ldrb	r3, [r3, #0]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d117      	bne.n	8015fd2 <etharp_query+0xb2>
    is_new_entry = 1;
 8015fa2:	2301      	movs	r3, #1
 8015fa4:	633b      	str	r3, [r7, #48]	; 0x30
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015fa6:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015faa:	49a3      	ldr	r1, [pc, #652]	; (8016238 <etharp_query+0x318>)
 8015fac:	4613      	mov	r3, r2
 8015fae:	005b      	lsls	r3, r3, #1
 8015fb0:	4413      	add	r3, r2
 8015fb2:	00db      	lsls	r3, r3, #3
 8015fb4:	440b      	add	r3, r1
 8015fb6:	3314      	adds	r3, #20
 8015fb8:	2201      	movs	r2, #1
 8015fba:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015fbc:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015fc0:	499d      	ldr	r1, [pc, #628]	; (8016238 <etharp_query+0x318>)
 8015fc2:	4613      	mov	r3, r2
 8015fc4:	005b      	lsls	r3, r3, #1
 8015fc6:	4413      	add	r3, r2
 8015fc8:	00db      	lsls	r3, r3, #3
 8015fca:	440b      	add	r3, r1
 8015fcc:	3308      	adds	r3, #8
 8015fce:	68fa      	ldr	r2, [r7, #12]
 8015fd0:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015fd2:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015fd6:	4998      	ldr	r1, [pc, #608]	; (8016238 <etharp_query+0x318>)
 8015fd8:	4613      	mov	r3, r2
 8015fda:	005b      	lsls	r3, r3, #1
 8015fdc:	4413      	add	r3, r2
 8015fde:	00db      	lsls	r3, r3, #3
 8015fe0:	440b      	add	r3, r1
 8015fe2:	3314      	adds	r3, #20
 8015fe4:	781b      	ldrb	r3, [r3, #0]
 8015fe6:	2b01      	cmp	r3, #1
 8015fe8:	d012      	beq.n	8016010 <etharp_query+0xf0>
 8015fea:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8015fee:	4992      	ldr	r1, [pc, #584]	; (8016238 <etharp_query+0x318>)
 8015ff0:	4613      	mov	r3, r2
 8015ff2:	005b      	lsls	r3, r3, #1
 8015ff4:	4413      	add	r3, r2
 8015ff6:	00db      	lsls	r3, r3, #3
 8015ff8:	440b      	add	r3, r1
 8015ffa:	3314      	adds	r3, #20
 8015ffc:	781b      	ldrb	r3, [r3, #0]
 8015ffe:	2b01      	cmp	r3, #1
 8016000:	d806      	bhi.n	8016010 <etharp_query+0xf0>
 8016002:	4b8e      	ldr	r3, [pc, #568]	; (801623c <etharp_query+0x31c>)
 8016004:	f240 32c9 	movw	r2, #969	; 0x3c9
 8016008:	498d      	ldr	r1, [pc, #564]	; (8016240 <etharp_query+0x320>)
 801600a:	488e      	ldr	r0, [pc, #568]	; (8016244 <etharp_query+0x324>)
 801600c:	f001 fe7a 	bl	8017d04 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016012:	2b00      	cmp	r3, #0
 8016014:	d102      	bne.n	801601c <etharp_query+0xfc>
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d10c      	bne.n	8016036 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801601c:	68b9      	ldr	r1, [r7, #8]
 801601e:	68f8      	ldr	r0, [r7, #12]
 8016020:	f000 f9c6 	bl	80163b0 <etharp_request>
 8016024:	4603      	mov	r3, r0
 8016026:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	2b00      	cmp	r3, #0
 801602e:	d102      	bne.n	8016036 <etharp_query+0x116>
      return result;
 8016030:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8016034:	e0fb      	b.n	801622e <etharp_query+0x30e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d106      	bne.n	801604a <etharp_query+0x12a>
 801603c:	4b7f      	ldr	r3, [pc, #508]	; (801623c <etharp_query+0x31c>)
 801603e:	f240 32db 	movw	r2, #987	; 0x3db
 8016042:	4981      	ldr	r1, [pc, #516]	; (8016248 <etharp_query+0x328>)
 8016044:	487f      	ldr	r0, [pc, #508]	; (8016244 <etharp_query+0x324>)
 8016046:	f001 fe5d 	bl	8017d04 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801604a:	f997 201b 	ldrsb.w	r2, [r7, #27]
 801604e:	497a      	ldr	r1, [pc, #488]	; (8016238 <etharp_query+0x318>)
 8016050:	4613      	mov	r3, r2
 8016052:	005b      	lsls	r3, r3, #1
 8016054:	4413      	add	r3, r2
 8016056:	00db      	lsls	r3, r3, #3
 8016058:	440b      	add	r3, r1
 801605a:	3314      	adds	r3, #20
 801605c:	781b      	ldrb	r3, [r3, #0]
 801605e:	2b01      	cmp	r3, #1
 8016060:	d919      	bls.n	8016096 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8016062:	7efa      	ldrb	r2, [r7, #27]
 8016064:	4b79      	ldr	r3, [pc, #484]	; (801624c <etharp_query+0x32c>)
 8016066:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016068:	f997 201b 	ldrsb.w	r2, [r7, #27]
 801606c:	4613      	mov	r3, r2
 801606e:	005b      	lsls	r3, r3, #1
 8016070:	4413      	add	r3, r2
 8016072:	00db      	lsls	r3, r3, #3
 8016074:	3308      	adds	r3, #8
 8016076:	4a70      	ldr	r2, [pc, #448]	; (8016238 <etharp_query+0x318>)
 8016078:	4413      	add	r3, r2
 801607a:	1d1a      	adds	r2, r3, #4
 801607c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016080:	9300      	str	r3, [sp, #0]
 8016082:	4613      	mov	r3, r2
 8016084:	69fa      	ldr	r2, [r7, #28]
 8016086:	6879      	ldr	r1, [r7, #4]
 8016088:	68f8      	ldr	r0, [r7, #12]
 801608a:	f001 fc81 	bl	8017990 <ethernet_output>
 801608e:	4603      	mov	r3, r0
 8016090:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8016094:	e0c9      	b.n	801622a <etharp_query+0x30a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016096:	f997 201b 	ldrsb.w	r2, [r7, #27]
 801609a:	4967      	ldr	r1, [pc, #412]	; (8016238 <etharp_query+0x318>)
 801609c:	4613      	mov	r3, r2
 801609e:	005b      	lsls	r3, r3, #1
 80160a0:	4413      	add	r3, r2
 80160a2:	00db      	lsls	r3, r3, #3
 80160a4:	440b      	add	r3, r1
 80160a6:	3314      	adds	r3, #20
 80160a8:	781b      	ldrb	r3, [r3, #0]
 80160aa:	2b01      	cmp	r3, #1
 80160ac:	f040 80bd 	bne.w	801622a <etharp_query+0x30a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80160b0:	2300      	movs	r3, #0
 80160b2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (p) {
 80160b8:	e01a      	b.n	80160f0 <etharp_query+0x1d0>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80160ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160bc:	895a      	ldrh	r2, [r3, #10]
 80160be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160c0:	891b      	ldrh	r3, [r3, #8]
 80160c2:	429a      	cmp	r2, r3
 80160c4:	d10a      	bne.n	80160dc <etharp_query+0x1bc>
 80160c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d006      	beq.n	80160dc <etharp_query+0x1bc>
 80160ce:	4b5b      	ldr	r3, [pc, #364]	; (801623c <etharp_query+0x31c>)
 80160d0:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80160d4:	495e      	ldr	r1, [pc, #376]	; (8016250 <etharp_query+0x330>)
 80160d6:	485b      	ldr	r0, [pc, #364]	; (8016244 <etharp_query+0x324>)
 80160d8:	f001 fe14 	bl	8017d04 <iprintf>
      if (p->type != PBUF_ROM) {
 80160dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160de:	7b1b      	ldrb	r3, [r3, #12]
 80160e0:	2b01      	cmp	r3, #1
 80160e2:	d002      	beq.n	80160ea <etharp_query+0x1ca>
        copy_needed = 1;
 80160e4:	2301      	movs	r3, #1
 80160e6:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 80160e8:	e005      	b.n	80160f6 <etharp_query+0x1d6>
      }
      p = p->next;
 80160ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (p) {
 80160f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d1e1      	bne.n	80160ba <etharp_query+0x19a>
    }
    if (copy_needed) {
 80160f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d017      	beq.n	801612c <etharp_query+0x20c>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80160fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160fe:	891b      	ldrh	r3, [r3, #8]
 8016100:	2200      	movs	r2, #0
 8016102:	4619      	mov	r1, r3
 8016104:	2002      	movs	r0, #2
 8016106:	f7f9 fd3f 	bl	800fb88 <pbuf_alloc>
 801610a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if (p != NULL) {
 801610c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801610e:	2b00      	cmp	r3, #0
 8016110:	d011      	beq.n	8016136 <etharp_query+0x216>
        if (pbuf_copy(p, q) != ERR_OK) {
 8016112:	6879      	ldr	r1, [r7, #4]
 8016114:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016116:	f7fa f9d9 	bl	80104cc <pbuf_copy>
 801611a:	4603      	mov	r3, r0
 801611c:	2b00      	cmp	r3, #0
 801611e:	d00a      	beq.n	8016136 <etharp_query+0x216>
          pbuf_free(p);
 8016120:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016122:	f7fa f8a3 	bl	801026c <pbuf_free>
          p = NULL;
 8016126:	2300      	movs	r3, #0
 8016128:	62fb      	str	r3, [r7, #44]	; 0x2c
 801612a:	e004      	b.n	8016136 <etharp_query+0x216>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pbuf_ref(p);
 8016130:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016132:	f7fa f94d 	bl	80103d0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016138:	2b00      	cmp	r3, #0
 801613a:	d073      	beq.n	8016224 <etharp_query+0x304>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 801613c:	200a      	movs	r0, #10
 801613e:	f7f9 fa43 	bl	800f5c8 <memp_malloc>
 8016142:	6178      	str	r0, [r7, #20]
      if (new_entry != NULL) {
 8016144:	697b      	ldr	r3, [r7, #20]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d065      	beq.n	8016216 <etharp_query+0x2f6>
        unsigned int qlen = 0;
 801614a:	2300      	movs	r3, #0
 801614c:	627b      	str	r3, [r7, #36]	; 0x24
        new_entry->next = 0;
 801614e:	697b      	ldr	r3, [r7, #20]
 8016150:	2200      	movs	r2, #0
 8016152:	601a      	str	r2, [r3, #0]
        new_entry->p = p;
 8016154:	697b      	ldr	r3, [r7, #20]
 8016156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016158:	605a      	str	r2, [r3, #4]
        if (arp_table[i].q != NULL) {
 801615a:	f997 201b 	ldrsb.w	r2, [r7, #27]
 801615e:	4936      	ldr	r1, [pc, #216]	; (8016238 <etharp_query+0x318>)
 8016160:	4613      	mov	r3, r2
 8016162:	005b      	lsls	r3, r3, #1
 8016164:	4413      	add	r3, r2
 8016166:	00db      	lsls	r3, r3, #3
 8016168:	440b      	add	r3, r1
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d01b      	beq.n	80161a8 <etharp_query+0x288>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
 8016170:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8016174:	4930      	ldr	r1, [pc, #192]	; (8016238 <etharp_query+0x318>)
 8016176:	4613      	mov	r3, r2
 8016178:	005b      	lsls	r3, r3, #1
 801617a:	4413      	add	r3, r2
 801617c:	00db      	lsls	r3, r3, #3
 801617e:	440b      	add	r3, r1
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	623b      	str	r3, [r7, #32]
          qlen++;
 8016184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016186:	3301      	adds	r3, #1
 8016188:	627b      	str	r3, [r7, #36]	; 0x24
          while (r->next != NULL) {
 801618a:	e005      	b.n	8016198 <etharp_query+0x278>
            r = r->next;
 801618c:	6a3b      	ldr	r3, [r7, #32]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	623b      	str	r3, [r7, #32]
            qlen++;
 8016192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016194:	3301      	adds	r3, #1
 8016196:	627b      	str	r3, [r7, #36]	; 0x24
          while (r->next != NULL) {
 8016198:	6a3b      	ldr	r3, [r7, #32]
 801619a:	681b      	ldr	r3, [r3, #0]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d1f5      	bne.n	801618c <etharp_query+0x26c>
          }
          r->next = new_entry;
 80161a0:	6a3b      	ldr	r3, [r7, #32]
 80161a2:	697a      	ldr	r2, [r7, #20]
 80161a4:	601a      	str	r2, [r3, #0]
 80161a6:	e009      	b.n	80161bc <etharp_query+0x29c>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
 80161a8:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80161ac:	4922      	ldr	r1, [pc, #136]	; (8016238 <etharp_query+0x318>)
 80161ae:	4613      	mov	r3, r2
 80161b0:	005b      	lsls	r3, r3, #1
 80161b2:	4413      	add	r3, r2
 80161b4:	00db      	lsls	r3, r3, #3
 80161b6:	440b      	add	r3, r1
 80161b8:	697a      	ldr	r2, [r7, #20]
 80161ba:	601a      	str	r2, [r3, #0]
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
 80161bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161be:	2b02      	cmp	r3, #2
 80161c0:	d925      	bls.n	801620e <etharp_query+0x2ee>
          struct etharp_q_entry *old;
          old = arp_table[i].q;
 80161c2:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80161c6:	491c      	ldr	r1, [pc, #112]	; (8016238 <etharp_query+0x318>)
 80161c8:	4613      	mov	r3, r2
 80161ca:	005b      	lsls	r3, r3, #1
 80161cc:	4413      	add	r3, r2
 80161ce:	00db      	lsls	r3, r3, #3
 80161d0:	440b      	add	r3, r1
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	613b      	str	r3, [r7, #16]
          arp_table[i].q = arp_table[i].q->next;
 80161d6:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80161da:	4917      	ldr	r1, [pc, #92]	; (8016238 <etharp_query+0x318>)
 80161dc:	4613      	mov	r3, r2
 80161de:	005b      	lsls	r3, r3, #1
 80161e0:	4413      	add	r3, r2
 80161e2:	00db      	lsls	r3, r3, #3
 80161e4:	440b      	add	r3, r1
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	f997 201b 	ldrsb.w	r2, [r7, #27]
 80161ec:	6819      	ldr	r1, [r3, #0]
 80161ee:	4812      	ldr	r0, [pc, #72]	; (8016238 <etharp_query+0x318>)
 80161f0:	4613      	mov	r3, r2
 80161f2:	005b      	lsls	r3, r3, #1
 80161f4:	4413      	add	r3, r2
 80161f6:	00db      	lsls	r3, r3, #3
 80161f8:	4403      	add	r3, r0
 80161fa:	6019      	str	r1, [r3, #0]
          pbuf_free(old->p);
 80161fc:	693b      	ldr	r3, [r7, #16]
 80161fe:	685b      	ldr	r3, [r3, #4]
 8016200:	4618      	mov	r0, r3
 8016202:	f7fa f833 	bl	801026c <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 8016206:	6939      	ldr	r1, [r7, #16]
 8016208:	200a      	movs	r0, #10
 801620a:	f7f9 fa53 	bl	800f6b4 <memp_free>
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        result = ERR_OK;
 801620e:	2300      	movs	r3, #0
 8016210:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8016214:	e009      	b.n	801622a <etharp_query+0x30a>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
 8016216:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016218:	f7fa f828 	bl	801026c <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
 801621c:	23ff      	movs	r3, #255	; 0xff
 801621e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8016222:	e002      	b.n	801622a <etharp_query+0x30a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016224:	23ff      	movs	r3, #255	; 0xff
 8016226:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }
  }
  return result;
 801622a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 801622e:	4618      	mov	r0, r3
 8016230:	3738      	adds	r7, #56	; 0x38
 8016232:	46bd      	mov	sp, r7
 8016234:	bd80      	pop	{r7, pc}
 8016236:	bf00      	nop
 8016238:	24021840 	.word	0x24021840
 801623c:	0801a574 	.word	0x0801a574
 8016240:	0801a740 	.word	0x0801a740
 8016244:	0801a5b8 	.word	0x0801a5b8
 8016248:	0801a5ac 	.word	0x0801a5ac
 801624c:	24021930 	.word	0x24021930
 8016250:	0801a768 	.word	0x0801a768

08016254 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016254:	b580      	push	{r7, lr}
 8016256:	b08a      	sub	sp, #40	; 0x28
 8016258:	af02      	add	r7, sp, #8
 801625a:	60f8      	str	r0, [r7, #12]
 801625c:	60b9      	str	r1, [r7, #8]
 801625e:	607a      	str	r2, [r7, #4]
 8016260:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016262:	2300      	movs	r3, #0
 8016264:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d106      	bne.n	801627a <etharp_raw+0x26>
 801626c:	4b3a      	ldr	r3, [pc, #232]	; (8016358 <etharp_raw+0x104>)
 801626e:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8016272:	493a      	ldr	r1, [pc, #232]	; (801635c <etharp_raw+0x108>)
 8016274:	483a      	ldr	r0, [pc, #232]	; (8016360 <etharp_raw+0x10c>)
 8016276:	f001 fd45 	bl	8017d04 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801627a:	2200      	movs	r2, #0
 801627c:	211c      	movs	r1, #28
 801627e:	2002      	movs	r0, #2
 8016280:	f7f9 fc82 	bl	800fb88 <pbuf_alloc>
 8016284:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016286:	69bb      	ldr	r3, [r7, #24]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d102      	bne.n	8016292 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801628c:	f04f 33ff 	mov.w	r3, #4294967295
 8016290:	e05d      	b.n	801634e <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016292:	69bb      	ldr	r3, [r7, #24]
 8016294:	895b      	ldrh	r3, [r3, #10]
 8016296:	2b1b      	cmp	r3, #27
 8016298:	d806      	bhi.n	80162a8 <etharp_raw+0x54>
 801629a:	4b2f      	ldr	r3, [pc, #188]	; (8016358 <etharp_raw+0x104>)
 801629c:	f240 4264 	movw	r2, #1124	; 0x464
 80162a0:	4930      	ldr	r1, [pc, #192]	; (8016364 <etharp_raw+0x110>)
 80162a2:	482f      	ldr	r0, [pc, #188]	; (8016360 <etharp_raw+0x10c>)
 80162a4:	f001 fd2e 	bl	8017d04 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80162a8:	69bb      	ldr	r3, [r7, #24]
 80162aa:	685b      	ldr	r3, [r3, #4]
 80162ac:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80162ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80162b0:	4618      	mov	r0, r3
 80162b2:	f7f8 fcc3 	bl	800ec3c <lwip_htons>
 80162b6:	4603      	mov	r3, r0
 80162b8:	461a      	mov	r2, r3
 80162ba:	697b      	ldr	r3, [r7, #20]
 80162bc:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80162c4:	2b06      	cmp	r3, #6
 80162c6:	d006      	beq.n	80162d6 <etharp_raw+0x82>
 80162c8:	4b23      	ldr	r3, [pc, #140]	; (8016358 <etharp_raw+0x104>)
 80162ca:	f240 426b 	movw	r2, #1131	; 0x46b
 80162ce:	4926      	ldr	r1, [pc, #152]	; (8016368 <etharp_raw+0x114>)
 80162d0:	4823      	ldr	r0, [pc, #140]	; (8016360 <etharp_raw+0x10c>)
 80162d2:	f001 fd17 	bl	8017d04 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80162d6:	697b      	ldr	r3, [r7, #20]
 80162d8:	3308      	adds	r3, #8
 80162da:	2206      	movs	r2, #6
 80162dc:	6839      	ldr	r1, [r7, #0]
 80162de:	4618      	mov	r0, r3
 80162e0:	f001 fcfd 	bl	8017cde <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80162e4:	697b      	ldr	r3, [r7, #20]
 80162e6:	3312      	adds	r3, #18
 80162e8:	2206      	movs	r2, #6
 80162ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80162ec:	4618      	mov	r0, r3
 80162ee:	f001 fcf6 	bl	8017cde <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80162f2:	697b      	ldr	r3, [r7, #20]
 80162f4:	330e      	adds	r3, #14
 80162f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80162f8:	6812      	ldr	r2, [r2, #0]
 80162fa:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80162fc:	697b      	ldr	r3, [r7, #20]
 80162fe:	3318      	adds	r3, #24
 8016300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016302:	6812      	ldr	r2, [r2, #0]
 8016304:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8016306:	697b      	ldr	r3, [r7, #20]
 8016308:	2200      	movs	r2, #0
 801630a:	701a      	strb	r2, [r3, #0]
 801630c:	2200      	movs	r2, #0
 801630e:	f042 0201 	orr.w	r2, r2, #1
 8016312:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016314:	697b      	ldr	r3, [r7, #20]
 8016316:	2200      	movs	r2, #0
 8016318:	f042 0208 	orr.w	r2, r2, #8
 801631c:	709a      	strb	r2, [r3, #2]
 801631e:	2200      	movs	r2, #0
 8016320:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016322:	697b      	ldr	r3, [r7, #20]
 8016324:	2206      	movs	r2, #6
 8016326:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016328:	697b      	ldr	r3, [r7, #20]
 801632a:	2204      	movs	r2, #4
 801632c:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801632e:	f640 0306 	movw	r3, #2054	; 0x806
 8016332:	9300      	str	r3, [sp, #0]
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	68ba      	ldr	r2, [r7, #8]
 8016338:	69b9      	ldr	r1, [r7, #24]
 801633a:	68f8      	ldr	r0, [r7, #12]
 801633c:	f001 fb28 	bl	8017990 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016340:	69b8      	ldr	r0, [r7, #24]
 8016342:	f7f9 ff93 	bl	801026c <pbuf_free>
  p = NULL;
 8016346:	2300      	movs	r3, #0
 8016348:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801634a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801634e:	4618      	mov	r0, r3
 8016350:	3720      	adds	r7, #32
 8016352:	46bd      	mov	sp, r7
 8016354:	bd80      	pop	{r7, pc}
 8016356:	bf00      	nop
 8016358:	0801a574 	.word	0x0801a574
 801635c:	0801a6f0 	.word	0x0801a6f0
 8016360:	0801a5b8 	.word	0x0801a5b8
 8016364:	0801a784 	.word	0x0801a784
 8016368:	0801a7b8 	.word	0x0801a7b8

0801636c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 801636c:	b580      	push	{r7, lr}
 801636e:	b088      	sub	sp, #32
 8016370:	af04      	add	r7, sp, #16
 8016372:	60f8      	str	r0, [r7, #12]
 8016374:	60b9      	str	r1, [r7, #8]
 8016376:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	f103 0131 	add.w	r1, r3, #49	; 0x31
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801637e:	68fb      	ldr	r3, [r7, #12]
 8016380:	f103 0031 	add.w	r0, r3, #49	; 0x31
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016388:	2201      	movs	r2, #1
 801638a:	9203      	str	r2, [sp, #12]
 801638c:	68ba      	ldr	r2, [r7, #8]
 801638e:	9202      	str	r2, [sp, #8]
 8016390:	4a06      	ldr	r2, [pc, #24]	; (80163ac <etharp_request_dst+0x40>)
 8016392:	9201      	str	r2, [sp, #4]
 8016394:	9300      	str	r3, [sp, #0]
 8016396:	4603      	mov	r3, r0
 8016398:	687a      	ldr	r2, [r7, #4]
 801639a:	68f8      	ldr	r0, [r7, #12]
 801639c:	f7ff ff5a 	bl	8016254 <etharp_raw>
 80163a0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80163a2:	4618      	mov	r0, r3
 80163a4:	3710      	adds	r7, #16
 80163a6:	46bd      	mov	sp, r7
 80163a8:	bd80      	pop	{r7, pc}
 80163aa:	bf00      	nop
 80163ac:	0801ad58 	.word	0x0801ad58

080163b0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b082      	sub	sp, #8
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	6078      	str	r0, [r7, #4]
 80163b8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80163ba:	4a05      	ldr	r2, [pc, #20]	; (80163d0 <etharp_request+0x20>)
 80163bc:	6839      	ldr	r1, [r7, #0]
 80163be:	6878      	ldr	r0, [r7, #4]
 80163c0:	f7ff ffd4 	bl	801636c <etharp_request_dst>
 80163c4:	4603      	mov	r3, r0
}
 80163c6:	4618      	mov	r0, r3
 80163c8:	3708      	adds	r7, #8
 80163ca:	46bd      	mov	sp, r7
 80163cc:	bd80      	pop	{r7, pc}
 80163ce:	bf00      	nop
 80163d0:	0801ad50 	.word	0x0801ad50

080163d4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80163d4:	b580      	push	{r7, lr}
 80163d6:	b08e      	sub	sp, #56	; 0x38
 80163d8:	af04      	add	r7, sp, #16
 80163da:	6078      	str	r0, [r7, #4]
 80163dc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80163de:	4b87      	ldr	r3, [pc, #540]	; (80165fc <icmp_input+0x228>)
 80163e0:	689b      	ldr	r3, [r3, #8]
 80163e2:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL(iphdr_in) * 4;
 80163e4:	6a3b      	ldr	r3, [r7, #32]
 80163e6:	781b      	ldrb	r3, [r3, #0]
 80163e8:	b29b      	uxth	r3, r3
 80163ea:	f003 030f 	and.w	r3, r3, #15
 80163ee:	b29b      	uxth	r3, r3
 80163f0:	009b      	lsls	r3, r3, #2
 80163f2:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 80163f4:	8bfb      	ldrh	r3, [r7, #30]
 80163f6:	2b13      	cmp	r3, #19
 80163f8:	f240 80ee 	bls.w	80165d8 <icmp_input+0x204>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	895b      	ldrh	r3, [r3, #10]
 8016400:	2b03      	cmp	r3, #3
 8016402:	f240 80eb 	bls.w	80165dc <icmp_input+0x208>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	685b      	ldr	r3, [r3, #4]
 801640a:	781b      	ldrb	r3, [r3, #0]
 801640c:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 801640e:	7f7b      	ldrb	r3, [r7, #29]
 8016410:	2b00      	cmp	r3, #0
 8016412:	f000 80da 	beq.w	80165ca <icmp_input+0x1f6>
 8016416:	2b08      	cmp	r3, #8
 8016418:	f040 80da 	bne.w	80165d0 <icmp_input+0x1fc>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 801641c:	4b78      	ldr	r3, [pc, #480]	; (8016600 <icmp_input+0x22c>)
 801641e:	627b      	str	r3, [r7, #36]	; 0x24
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016420:	4b76      	ldr	r3, [pc, #472]	; (80165fc <icmp_input+0x228>)
 8016422:	695b      	ldr	r3, [r3, #20]
 8016424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016428:	2be0      	cmp	r3, #224	; 0xe0
 801642a:	d102      	bne.n	8016432 <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
      /* For multicast, use address of receiving interface as source address */
      src = netif_ip4_addr(inp);
 801642c:	683b      	ldr	r3, [r7, #0]
 801642e:	3304      	adds	r3, #4
 8016430:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016432:	4b72      	ldr	r3, [pc, #456]	; (80165fc <icmp_input+0x228>)
 8016434:	695a      	ldr	r2, [r3, #20]
 8016436:	4b71      	ldr	r3, [pc, #452]	; (80165fc <icmp_input+0x228>)
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	4619      	mov	r1, r3
 801643c:	4610      	mov	r0, r2
 801643e:	f000 fc05 	bl	8016c4c <ip4_addr_isbroadcast_u32>
 8016442:	4603      	mov	r3, r0
 8016444:	2b00      	cmp	r3, #0
 8016446:	d002      	beq.n	801644e <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
      /* For broadcast, use address of receiving interface as source address */
      src = netif_ip4_addr(inp);
 8016448:	683b      	ldr	r3, [r7, #0]
 801644a:	3304      	adds	r3, #4
 801644c:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	891b      	ldrh	r3, [r3, #8]
 8016452:	2b07      	cmp	r3, #7
 8016454:	f240 80c4 	bls.w	80165e0 <icmp_input+0x20c>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
#if CHECKSUM_CHECK_ICMP
    IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
      if (inet_chksum_pbuf(p) != 0) {
 8016458:	6878      	ldr	r0, [r7, #4]
 801645a:	f7f8 fc85 	bl	800ed68 <inet_chksum_pbuf>
 801645e:	4603      	mov	r3, r0
 8016460:	2b00      	cmp	r3, #0
 8016462:	d003      	beq.n	801646c <icmp_input+0x98>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
        pbuf_free(p);
 8016464:	6878      	ldr	r0, [r7, #4]
 8016466:	f7f9 ff01 	bl	801026c <pbuf_free>
        ICMP_STATS_INC(icmp.chkerr);
        MIB2_STATS_INC(mib2.icmpinerrors);
        return;
 801646a:	e0c3      	b.n	80165f4 <icmp_input+0x220>
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 801646c:	8bfb      	ldrh	r3, [r7, #30]
 801646e:	330e      	adds	r3, #14
 8016470:	b29b      	uxth	r3, r3
 8016472:	b21b      	sxth	r3, r3
 8016474:	4619      	mov	r1, r3
 8016476:	6878      	ldr	r0, [r7, #4]
 8016478:	f7f9 fed4 	bl	8010224 <pbuf_header>
 801647c:	4603      	mov	r3, r0
 801647e:	2b00      	cmp	r3, #0
 8016480:	d046      	beq.n	8016510 <icmp_input+0x13c>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	891a      	ldrh	r2, [r3, #8]
 8016486:	8bfb      	ldrh	r3, [r7, #30]
 8016488:	4413      	add	r3, r2
 801648a:	b29b      	uxth	r3, r3
 801648c:	2200      	movs	r2, #0
 801648e:	4619      	mov	r1, r3
 8016490:	2002      	movs	r0, #2
 8016492:	f7f9 fb79 	bl	800fb88 <pbuf_alloc>
 8016496:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8016498:	69bb      	ldr	r3, [r7, #24]
 801649a:	2b00      	cmp	r3, #0
 801649c:	f000 80a5 	beq.w	80165ea <icmp_input+0x216>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80164a0:	69bb      	ldr	r3, [r7, #24]
 80164a2:	895b      	ldrh	r3, [r3, #10]
 80164a4:	461a      	mov	r2, r3
 80164a6:	8bfb      	ldrh	r3, [r7, #30]
 80164a8:	3308      	adds	r3, #8
 80164aa:	429a      	cmp	r2, r3
 80164ac:	d203      	bcs.n	80164b6 <icmp_input+0xe2>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 80164ae:	69b8      	ldr	r0, [r7, #24]
 80164b0:	f7f9 fedc 	bl	801026c <pbuf_free>
        goto icmperr;
 80164b4:	e09a      	b.n	80165ec <icmp_input+0x218>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 80164b6:	69bb      	ldr	r3, [r7, #24]
 80164b8:	685b      	ldr	r3, [r3, #4]
 80164ba:	8bfa      	ldrh	r2, [r7, #30]
 80164bc:	6a39      	ldr	r1, [r7, #32]
 80164be:	4618      	mov	r0, r3
 80164c0:	f001 fc0d 	bl	8017cde <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 80164c4:	8bfb      	ldrh	r3, [r7, #30]
 80164c6:	425b      	negs	r3, r3
 80164c8:	b29b      	uxth	r3, r3
 80164ca:	b21b      	sxth	r3, r3
 80164cc:	4619      	mov	r1, r3
 80164ce:	69b8      	ldr	r0, [r7, #24]
 80164d0:	f7f9 fea8 	bl	8010224 <pbuf_header>
 80164d4:	4603      	mov	r3, r0
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d009      	beq.n	80164ee <icmp_input+0x11a>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80164da:	4b4a      	ldr	r3, [pc, #296]	; (8016604 <icmp_input+0x230>)
 80164dc:	22af      	movs	r2, #175	; 0xaf
 80164de:	494a      	ldr	r1, [pc, #296]	; (8016608 <icmp_input+0x234>)
 80164e0:	484a      	ldr	r0, [pc, #296]	; (801660c <icmp_input+0x238>)
 80164e2:	f001 fc0f 	bl	8017d04 <iprintf>
        pbuf_free(r);
 80164e6:	69b8      	ldr	r0, [r7, #24]
 80164e8:	f7f9 fec0 	bl	801026c <pbuf_free>
        goto icmperr;
 80164ec:	e07e      	b.n	80165ec <icmp_input+0x218>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 80164ee:	6879      	ldr	r1, [r7, #4]
 80164f0:	69b8      	ldr	r0, [r7, #24]
 80164f2:	f7f9 ffeb 	bl	80104cc <pbuf_copy>
 80164f6:	4603      	mov	r3, r0
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d003      	beq.n	8016504 <icmp_input+0x130>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 80164fc:	69b8      	ldr	r0, [r7, #24]
 80164fe:	f7f9 feb5 	bl	801026c <pbuf_free>
        goto icmperr;
 8016502:	e073      	b.n	80165ec <icmp_input+0x218>
      }
      /* free the original p */
      pbuf_free(p);
 8016504:	6878      	ldr	r0, [r7, #4]
 8016506:	f7f9 feb1 	bl	801026c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801650a:	69bb      	ldr	r3, [r7, #24]
 801650c:	607b      	str	r3, [r7, #4]
 801650e:	e015      	b.n	801653c <icmp_input+0x168>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8016510:	8bfb      	ldrh	r3, [r7, #30]
 8016512:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8016516:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801651a:	33f2      	adds	r3, #242	; 0xf2
 801651c:	b29b      	uxth	r3, r3
 801651e:	b21b      	sxth	r3, r3
 8016520:	4619      	mov	r1, r3
 8016522:	6878      	ldr	r0, [r7, #4]
 8016524:	f7f9 fe7e 	bl	8010224 <pbuf_header>
 8016528:	4603      	mov	r3, r0
 801652a:	2b00      	cmp	r3, #0
 801652c:	d006      	beq.n	801653c <icmp_input+0x168>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801652e:	4b35      	ldr	r3, [pc, #212]	; (8016604 <icmp_input+0x230>)
 8016530:	22c0      	movs	r2, #192	; 0xc0
 8016532:	4937      	ldr	r1, [pc, #220]	; (8016610 <icmp_input+0x23c>)
 8016534:	4835      	ldr	r0, [pc, #212]	; (801660c <icmp_input+0x238>)
 8016536:	f001 fbe5 	bl	8017d04 <iprintf>
        goto icmperr;
 801653a:	e057      	b.n	80165ec <icmp_input+0x218>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	685b      	ldr	r3, [r3, #4]
 8016540:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8016542:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016546:	4619      	mov	r1, r3
 8016548:	6878      	ldr	r0, [r7, #4]
 801654a:	f7f9 fe6b 	bl	8010224 <pbuf_header>
 801654e:	4603      	mov	r3, r0
 8016550:	2b00      	cmp	r3, #0
 8016552:	d13c      	bne.n	80165ce <icmp_input+0x1fa>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	685b      	ldr	r3, [r3, #4]
 8016558:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801655c:	681a      	ldr	r2, [r3, #0]
 801655e:	693b      	ldr	r3, [r7, #16]
 8016560:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016562:	4b26      	ldr	r3, [pc, #152]	; (80165fc <icmp_input+0x228>)
 8016564:	691a      	ldr	r2, [r3, #16]
 8016566:	693b      	ldr	r3, [r7, #16]
 8016568:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801656a:	697b      	ldr	r3, [r7, #20]
 801656c:	2200      	movs	r2, #0
 801656e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
        /* adjust the checksum */
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8016570:	697b      	ldr	r3, [r7, #20]
 8016572:	885b      	ldrh	r3, [r3, #2]
 8016574:	b29b      	uxth	r3, r3
 8016576:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801657a:	4293      	cmp	r3, r2
 801657c:	d907      	bls.n	801658e <icmp_input+0x1ba>
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
 801657e:	697b      	ldr	r3, [r7, #20]
 8016580:	885b      	ldrh	r3, [r3, #2]
 8016582:	b29b      	uxth	r3, r3
 8016584:	3309      	adds	r3, #9
 8016586:	b29a      	uxth	r2, r3
 8016588:	697b      	ldr	r3, [r7, #20]
 801658a:	805a      	strh	r2, [r3, #2]
 801658c:	e006      	b.n	801659c <icmp_input+0x1c8>
        } else {
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
 801658e:	697b      	ldr	r3, [r7, #20]
 8016590:	885b      	ldrh	r3, [r3, #2]
 8016592:	b29b      	uxth	r3, r3
 8016594:	3308      	adds	r3, #8
 8016596:	b29a      	uxth	r2, r3
 8016598:	697b      	ldr	r3, [r7, #20]
 801659a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801659c:	693b      	ldr	r3, [r7, #16]
 801659e:	22ff      	movs	r2, #255	; 0xff
 80165a0:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80165a2:	693b      	ldr	r3, [r7, #16]
 80165a4:	2200      	movs	r2, #0
 80165a6:	729a      	strb	r2, [r3, #10]
 80165a8:	2200      	movs	r2, #0
 80165aa:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80165ac:	683b      	ldr	r3, [r7, #0]
 80165ae:	9302      	str	r3, [sp, #8]
 80165b0:	2301      	movs	r3, #1
 80165b2:	9301      	str	r3, [sp, #4]
 80165b4:	2300      	movs	r3, #0
 80165b6:	9300      	str	r3, [sp, #0]
 80165b8:	23ff      	movs	r3, #255	; 0xff
 80165ba:	2200      	movs	r2, #0
 80165bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80165be:	6878      	ldr	r0, [r7, #4]
 80165c0:	f000 fa72 	bl	8016aa8 <ip4_output_if>
 80165c4:	4603      	mov	r3, r0
 80165c6:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 80165c8:	e001      	b.n	80165ce <icmp_input+0x1fa>
    break;
 80165ca:	bf00      	nop
 80165cc:	e000      	b.n	80165d0 <icmp_input+0x1fc>
    break;
 80165ce:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80165d0:	6878      	ldr	r0, [r7, #4]
 80165d2:	f7f9 fe4b 	bl	801026c <pbuf_free>
  return;
 80165d6:	e00d      	b.n	80165f4 <icmp_input+0x220>
    goto lenerr;
 80165d8:	bf00      	nop
 80165da:	e002      	b.n	80165e2 <icmp_input+0x20e>
    goto lenerr;
 80165dc:	bf00      	nop
 80165de:	e000      	b.n	80165e2 <icmp_input+0x20e>
      goto lenerr;
 80165e0:	bf00      	nop
lenerr:
  pbuf_free(p);
 80165e2:	6878      	ldr	r0, [r7, #4]
 80165e4:	f7f9 fe42 	bl	801026c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80165e8:	e004      	b.n	80165f4 <icmp_input+0x220>
        goto icmperr;
 80165ea:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80165ec:	6878      	ldr	r0, [r7, #4]
 80165ee:	f7f9 fe3d 	bl	801026c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80165f2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80165f4:	3728      	adds	r7, #40	; 0x28
 80165f6:	46bd      	mov	sp, r7
 80165f8:	bd80      	pop	{r7, pc}
 80165fa:	bf00      	nop
 80165fc:	24021c54 	.word	0x24021c54
 8016600:	24021c68 	.word	0x24021c68
 8016604:	0801a7fc 	.word	0x0801a7fc
 8016608:	0801a834 	.word	0x0801a834
 801660c:	0801a86c 	.word	0x0801a86c
 8016610:	0801a894 	.word	0x0801a894

08016614 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016614:	b580      	push	{r7, lr}
 8016616:	b082      	sub	sp, #8
 8016618:	af00      	add	r7, sp, #0
 801661a:	6078      	str	r0, [r7, #4]
 801661c:	460b      	mov	r3, r1
 801661e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016620:	78fb      	ldrb	r3, [r7, #3]
 8016622:	461a      	mov	r2, r3
 8016624:	2103      	movs	r1, #3
 8016626:	6878      	ldr	r0, [r7, #4]
 8016628:	f000 f814 	bl	8016654 <icmp_send_response>
}
 801662c:	bf00      	nop
 801662e:	3708      	adds	r7, #8
 8016630:	46bd      	mov	sp, r7
 8016632:	bd80      	pop	{r7, pc}

08016634 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016634:	b580      	push	{r7, lr}
 8016636:	b082      	sub	sp, #8
 8016638:	af00      	add	r7, sp, #0
 801663a:	6078      	str	r0, [r7, #4]
 801663c:	460b      	mov	r3, r1
 801663e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016640:	78fb      	ldrb	r3, [r7, #3]
 8016642:	461a      	mov	r2, r3
 8016644:	210b      	movs	r1, #11
 8016646:	6878      	ldr	r0, [r7, #4]
 8016648:	f000 f804 	bl	8016654 <icmp_send_response>
}
 801664c:	bf00      	nop
 801664e:	3708      	adds	r7, #8
 8016650:	46bd      	mov	sp, r7
 8016652:	bd80      	pop	{r7, pc}

08016654 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016654:	b580      	push	{r7, lr}
 8016656:	b08c      	sub	sp, #48	; 0x30
 8016658:	af04      	add	r7, sp, #16
 801665a:	6078      	str	r0, [r7, #4]
 801665c:	460b      	mov	r3, r1
 801665e:	70fb      	strb	r3, [r7, #3]
 8016660:	4613      	mov	r3, r2
 8016662:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016664:	2200      	movs	r2, #0
 8016666:	2124      	movs	r1, #36	; 0x24
 8016668:	2001      	movs	r0, #1
 801666a:	f7f9 fa8d 	bl	800fb88 <pbuf_alloc>
 801666e:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016670:	69fb      	ldr	r3, [r7, #28]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d056      	beq.n	8016724 <icmp_send_response+0xd0>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016676:	69fb      	ldr	r3, [r7, #28]
 8016678:	895b      	ldrh	r3, [r3, #10]
 801667a:	2b23      	cmp	r3, #35	; 0x23
 801667c:	d806      	bhi.n	801668c <icmp_send_response+0x38>
 801667e:	4b2b      	ldr	r3, [pc, #172]	; (801672c <icmp_send_response+0xd8>)
 8016680:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8016684:	492a      	ldr	r1, [pc, #168]	; (8016730 <icmp_send_response+0xdc>)
 8016686:	482b      	ldr	r0, [pc, #172]	; (8016734 <icmp_send_response+0xe0>)
 8016688:	f001 fb3c 	bl	8017d04 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	685b      	ldr	r3, [r3, #4]
 8016690:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016692:	69fb      	ldr	r3, [r7, #28]
 8016694:	685b      	ldr	r3, [r3, #4]
 8016696:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016698:	697b      	ldr	r3, [r7, #20]
 801669a:	78fa      	ldrb	r2, [r7, #3]
 801669c:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801669e:	697b      	ldr	r3, [r7, #20]
 80166a0:	78ba      	ldrb	r2, [r7, #2]
 80166a2:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80166a4:	697b      	ldr	r3, [r7, #20]
 80166a6:	2200      	movs	r2, #0
 80166a8:	711a      	strb	r2, [r3, #4]
 80166aa:	2200      	movs	r2, #0
 80166ac:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80166ae:	697b      	ldr	r3, [r7, #20]
 80166b0:	2200      	movs	r2, #0
 80166b2:	719a      	strb	r2, [r3, #6]
 80166b4:	2200      	movs	r2, #0
 80166b6:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80166b8:	69fb      	ldr	r3, [r7, #28]
 80166ba:	685b      	ldr	r3, [r3, #4]
 80166bc:	f103 0008 	add.w	r0, r3, #8
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	685b      	ldr	r3, [r3, #4]
 80166c4:	221c      	movs	r2, #28
 80166c6:	4619      	mov	r1, r3
 80166c8:	f001 fb09 	bl	8017cde <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80166cc:	69bb      	ldr	r3, [r7, #24]
 80166ce:	68db      	ldr	r3, [r3, #12]
 80166d0:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 80166d2:	f107 030c 	add.w	r3, r7, #12
 80166d6:	4618      	mov	r0, r3
 80166d8:	f000 f82e 	bl	8016738 <ip4_route>
 80166dc:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80166de:	693b      	ldr	r3, [r7, #16]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d01b      	beq.n	801671c <icmp_send_response+0xc8>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80166e4:	697b      	ldr	r3, [r7, #20]
 80166e6:	2200      	movs	r2, #0
 80166e8:	709a      	strb	r2, [r3, #2]
 80166ea:	2200      	movs	r2, #0
 80166ec:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80166ee:	69fb      	ldr	r3, [r7, #28]
 80166f0:	895b      	ldrh	r3, [r3, #10]
 80166f2:	4619      	mov	r1, r3
 80166f4:	6978      	ldr	r0, [r7, #20]
 80166f6:	f7f8 fb25 	bl	800ed44 <inet_chksum>
 80166fa:	4603      	mov	r3, r0
 80166fc:	461a      	mov	r2, r3
 80166fe:	697b      	ldr	r3, [r7, #20]
 8016700:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016702:	f107 020c 	add.w	r2, r7, #12
 8016706:	693b      	ldr	r3, [r7, #16]
 8016708:	9302      	str	r3, [sp, #8]
 801670a:	2301      	movs	r3, #1
 801670c:	9301      	str	r3, [sp, #4]
 801670e:	2300      	movs	r3, #0
 8016710:	9300      	str	r3, [sp, #0]
 8016712:	23ff      	movs	r3, #255	; 0xff
 8016714:	2100      	movs	r1, #0
 8016716:	69f8      	ldr	r0, [r7, #28]
 8016718:	f000 f9c6 	bl	8016aa8 <ip4_output_if>
  }
  pbuf_free(q);
 801671c:	69f8      	ldr	r0, [r7, #28]
 801671e:	f7f9 fda5 	bl	801026c <pbuf_free>
 8016722:	e000      	b.n	8016726 <icmp_send_response+0xd2>
    return;
 8016724:	bf00      	nop
}
 8016726:	3720      	adds	r7, #32
 8016728:	46bd      	mov	sp, r7
 801672a:	bd80      	pop	{r7, pc}
 801672c:	0801a7fc 	.word	0x0801a7fc
 8016730:	0801a8c8 	.word	0x0801a8c8
 8016734:	0801a86c 	.word	0x0801a86c

08016738 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016738:	b480      	push	{r7}
 801673a:	b085      	sub	sp, #20
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
  struct netif *netif;

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016748:	2be0      	cmp	r3, #224	; 0xe0
 801674a:	d106      	bne.n	801675a <ip4_route+0x22>
 801674c:	4b34      	ldr	r3, [pc, #208]	; (8016820 <ip4_route+0xe8>)
 801674e:	681b      	ldr	r3, [r3, #0]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d002      	beq.n	801675a <ip4_route+0x22>
    return ip4_default_multicast_netif;
 8016754:	4b32      	ldr	r3, [pc, #200]	; (8016820 <ip4_route+0xe8>)
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	e05b      	b.n	8016812 <ip4_route+0xda>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801675a:	4b32      	ldr	r3, [pc, #200]	; (8016824 <ip4_route+0xec>)
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	60fb      	str	r3, [r7, #12]
 8016760:	e036      	b.n	80167d0 <ip4_route+0x98>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8016768:	f003 0301 	and.w	r3, r3, #1
 801676c:	b2db      	uxtb	r3, r3
 801676e:	2b00      	cmp	r3, #0
 8016770:	d02b      	beq.n	80167ca <ip4_route+0x92>
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8016778:	089b      	lsrs	r3, r3, #2
 801677a:	f003 0301 	and.w	r3, r3, #1
 801677e:	b2db      	uxtb	r3, r3
 8016780:	2b00      	cmp	r3, #0
 8016782:	d022      	beq.n	80167ca <ip4_route+0x92>
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	3304      	adds	r3, #4
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	2b00      	cmp	r3, #0
 801678c:	d01d      	beq.n	80167ca <ip4_route+0x92>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	681a      	ldr	r2, [r3, #0]
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	3304      	adds	r3, #4
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	405a      	eors	r2, r3
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	3308      	adds	r3, #8
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	4013      	ands	r3, r2
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d101      	bne.n	80167aa <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	e033      	b.n	8016812 <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80167b0:	f003 0302 	and.w	r3, r3, #2
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d108      	bne.n	80167ca <ip4_route+0x92>
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	681a      	ldr	r2, [r3, #0]
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	330c      	adds	r3, #12
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	429a      	cmp	r2, r3
 80167c4:	d101      	bne.n	80167ca <ip4_route+0x92>
        /* return netif on which to forward IP packet */
        return netif;
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	e023      	b.n	8016812 <ip4_route+0xda>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	60fb      	str	r3, [r7, #12]
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d1c5      	bne.n	8016762 <ip4_route+0x2a>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80167d6:	4b14      	ldr	r3, [pc, #80]	; (8016828 <ip4_route+0xf0>)
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d015      	beq.n	801680a <ip4_route+0xd2>
 80167de:	4b12      	ldr	r3, [pc, #72]	; (8016828 <ip4_route+0xf0>)
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80167e6:	f003 0301 	and.w	r3, r3, #1
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d00d      	beq.n	801680a <ip4_route+0xd2>
 80167ee:	4b0e      	ldr	r3, [pc, #56]	; (8016828 <ip4_route+0xf0>)
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80167f6:	f003 0304 	and.w	r3, r3, #4
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d005      	beq.n	801680a <ip4_route+0xd2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 80167fe:	4b0a      	ldr	r3, [pc, #40]	; (8016828 <ip4_route+0xf0>)
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	3304      	adds	r3, #4
 8016804:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016806:	2b00      	cmp	r3, #0
 8016808:	d101      	bne.n	801680e <ip4_route+0xd6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801680a:	2300      	movs	r3, #0
 801680c:	e001      	b.n	8016812 <ip4_route+0xda>
  }

  return netif_default;
 801680e:	4b06      	ldr	r3, [pc, #24]	; (8016828 <ip4_route+0xf0>)
 8016810:	681b      	ldr	r3, [r3, #0]
}
 8016812:	4618      	mov	r0, r3
 8016814:	3714      	adds	r7, #20
 8016816:	46bd      	mov	sp, r7
 8016818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681c:	4770      	bx	lr
 801681e:	bf00      	nop
 8016820:	24021934 	.word	0x24021934
 8016824:	24024e3c 	.word	0x24024e3c
 8016828:	24024e40 	.word	0x24024e40

0801682c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b086      	sub	sp, #24
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]
 8016834:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	685b      	ldr	r3, [r3, #4]
 801683a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801683c:	697b      	ldr	r3, [r7, #20]
 801683e:	781b      	ldrb	r3, [r3, #0]
 8016840:	091b      	lsrs	r3, r3, #4
 8016842:	b2db      	uxtb	r3, r3
 8016844:	2b04      	cmp	r3, #4
 8016846:	d004      	beq.n	8016852 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016848:	6878      	ldr	r0, [r7, #4]
 801684a:	f7f9 fd0f 	bl	801026c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801684e:	2300      	movs	r3, #0
 8016850:	e122      	b.n	8016a98 <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8016852:	697b      	ldr	r3, [r7, #20]
 8016854:	781b      	ldrb	r3, [r3, #0]
 8016856:	b29b      	uxth	r3, r3
 8016858:	f003 030f 	and.w	r3, r3, #15
 801685c:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 801685e:	897b      	ldrh	r3, [r7, #10]
 8016860:	009b      	lsls	r3, r3, #2
 8016862:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016864:	697b      	ldr	r3, [r7, #20]
 8016866:	885b      	ldrh	r3, [r3, #2]
 8016868:	b29b      	uxth	r3, r3
 801686a:	4618      	mov	r0, r3
 801686c:	f7f8 f9e6 	bl	800ec3c <lwip_htons>
 8016870:	4603      	mov	r3, r0
 8016872:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	891b      	ldrh	r3, [r3, #8]
 8016878:	893a      	ldrh	r2, [r7, #8]
 801687a:	429a      	cmp	r2, r3
 801687c:	d204      	bcs.n	8016888 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 801687e:	893b      	ldrh	r3, [r7, #8]
 8016880:	4619      	mov	r1, r3
 8016882:	6878      	ldr	r0, [r7, #4]
 8016884:	f7f9 fb7e 	bl	800ff84 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	895b      	ldrh	r3, [r3, #10]
 801688c:	897a      	ldrh	r2, [r7, #10]
 801688e:	429a      	cmp	r2, r3
 8016890:	d807      	bhi.n	80168a2 <ip4_input+0x76>
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	891b      	ldrh	r3, [r3, #8]
 8016896:	893a      	ldrh	r2, [r7, #8]
 8016898:	429a      	cmp	r2, r3
 801689a:	d802      	bhi.n	80168a2 <ip4_input+0x76>
 801689c:	897b      	ldrh	r3, [r7, #10]
 801689e:	2b13      	cmp	r3, #19
 80168a0:	d804      	bhi.n	80168ac <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80168a2:	6878      	ldr	r0, [r7, #4]
 80168a4:	f7f9 fce2 	bl	801026c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80168a8:	2300      	movs	r3, #0
 80168aa:	e0f5      	b.n	8016a98 <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80168ac:	697b      	ldr	r3, [r7, #20]
 80168ae:	691b      	ldr	r3, [r3, #16]
 80168b0:	4a7b      	ldr	r2, [pc, #492]	; (8016aa0 <ip4_input+0x274>)
 80168b2:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80168b4:	697b      	ldr	r3, [r7, #20]
 80168b6:	68db      	ldr	r3, [r3, #12]
 80168b8:	4a79      	ldr	r2, [pc, #484]	; (8016aa0 <ip4_input+0x274>)
 80168ba:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80168bc:	4b78      	ldr	r3, [pc, #480]	; (8016aa0 <ip4_input+0x274>)
 80168be:	695b      	ldr	r3, [r3, #20]
 80168c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80168c4:	2be0      	cmp	r3, #224	; 0xe0
 80168c6:	d112      	bne.n	80168ee <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80168c8:	683b      	ldr	r3, [r7, #0]
 80168ca:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80168ce:	f003 0301 	and.w	r3, r3, #1
 80168d2:	b2db      	uxtb	r3, r3
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d007      	beq.n	80168e8 <ip4_input+0xbc>
 80168d8:	683b      	ldr	r3, [r7, #0]
 80168da:	3304      	adds	r3, #4
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d002      	beq.n	80168e8 <ip4_input+0xbc>
      netif = inp;
 80168e2:	683b      	ldr	r3, [r7, #0]
 80168e4:	613b      	str	r3, [r7, #16]
 80168e6:	e041      	b.n	801696c <ip4_input+0x140>
    } else {
      netif = NULL;
 80168e8:	2300      	movs	r3, #0
 80168ea:	613b      	str	r3, [r7, #16]
 80168ec:	e03e      	b.n	801696c <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 80168ee:	2301      	movs	r3, #1
 80168f0:	60fb      	str	r3, [r7, #12]
    netif = inp;
 80168f2:	683b      	ldr	r3, [r7, #0]
 80168f4:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80168f6:	693b      	ldr	r3, [r7, #16]
 80168f8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80168fc:	f003 0301 	and.w	r3, r3, #1
 8016900:	b2db      	uxtb	r3, r3
 8016902:	2b00      	cmp	r3, #0
 8016904:	d014      	beq.n	8016930 <ip4_input+0x104>
 8016906:	693b      	ldr	r3, [r7, #16]
 8016908:	3304      	adds	r3, #4
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	2b00      	cmp	r3, #0
 801690e:	d00f      	beq.n	8016930 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016910:	4b63      	ldr	r3, [pc, #396]	; (8016aa0 <ip4_input+0x274>)
 8016912:	695a      	ldr	r2, [r3, #20]
 8016914:	693b      	ldr	r3, [r7, #16]
 8016916:	3304      	adds	r3, #4
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	429a      	cmp	r2, r3
 801691c:	d026      	beq.n	801696c <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801691e:	4b60      	ldr	r3, [pc, #384]	; (8016aa0 <ip4_input+0x274>)
 8016920:	695b      	ldr	r3, [r3, #20]
 8016922:	6939      	ldr	r1, [r7, #16]
 8016924:	4618      	mov	r0, r3
 8016926:	f000 f991 	bl	8016c4c <ip4_addr_isbroadcast_u32>
 801692a:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801692c:	2b00      	cmp	r3, #0
 801692e:	d11d      	bne.n	801696c <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d00d      	beq.n	8016952 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8016936:	4b5a      	ldr	r3, [pc, #360]	; (8016aa0 <ip4_input+0x274>)
 8016938:	695b      	ldr	r3, [r3, #20]
 801693a:	b2db      	uxtb	r3, r3
 801693c:	2b7f      	cmp	r3, #127	; 0x7f
 801693e:	d102      	bne.n	8016946 <ip4_input+0x11a>
          netif = NULL;
 8016940:	2300      	movs	r3, #0
 8016942:	613b      	str	r3, [r7, #16]
          break;
 8016944:	e012      	b.n	801696c <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8016946:	2300      	movs	r3, #0
 8016948:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 801694a:	4b56      	ldr	r3, [pc, #344]	; (8016aa4 <ip4_input+0x278>)
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	613b      	str	r3, [r7, #16]
 8016950:	e002      	b.n	8016958 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 8016952:	693b      	ldr	r3, [r7, #16]
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8016958:	693a      	ldr	r2, [r7, #16]
 801695a:	683b      	ldr	r3, [r7, #0]
 801695c:	429a      	cmp	r2, r3
 801695e:	d102      	bne.n	8016966 <ip4_input+0x13a>
        netif = netif->next;
 8016960:	693b      	ldr	r3, [r7, #16]
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8016966:	693b      	ldr	r3, [r7, #16]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d1c4      	bne.n	80168f6 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801696c:	4b4c      	ldr	r3, [pc, #304]	; (8016aa0 <ip4_input+0x274>)
 801696e:	691b      	ldr	r3, [r3, #16]
 8016970:	6839      	ldr	r1, [r7, #0]
 8016972:	4618      	mov	r0, r3
 8016974:	f000 f96a 	bl	8016c4c <ip4_addr_isbroadcast_u32>
 8016978:	4603      	mov	r3, r0
 801697a:	2b00      	cmp	r3, #0
 801697c:	d105      	bne.n	801698a <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801697e:	4b48      	ldr	r3, [pc, #288]	; (8016aa0 <ip4_input+0x274>)
 8016980:	691b      	ldr	r3, [r3, #16]
 8016982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016986:	2be0      	cmp	r3, #224	; 0xe0
 8016988:	d104      	bne.n	8016994 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801698a:	6878      	ldr	r0, [r7, #4]
 801698c:	f7f9 fc6e 	bl	801026c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016990:	2300      	movs	r3, #0
 8016992:	e081      	b.n	8016a98 <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016994:	693b      	ldr	r3, [r7, #16]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d104      	bne.n	80169a4 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801699a:	6878      	ldr	r0, [r7, #4]
 801699c:	f7f9 fc66 	bl	801026c <pbuf_free>
    return ERR_OK;
 80169a0:	2300      	movs	r3, #0
 80169a2:	e079      	b.n	8016a98 <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80169a4:	697b      	ldr	r3, [r7, #20]
 80169a6:	88db      	ldrh	r3, [r3, #6]
 80169a8:	b29b      	uxth	r3, r3
 80169aa:	461a      	mov	r2, r3
 80169ac:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80169b0:	4013      	ands	r3, r2
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d00b      	beq.n	80169ce <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80169b6:	6878      	ldr	r0, [r7, #4]
 80169b8:	f000 fc8e 	bl	80172d8 <ip4_reass>
 80169bc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d101      	bne.n	80169c8 <ip4_input+0x19c>
      return ERR_OK;
 80169c4:	2300      	movs	r3, #0
 80169c6:	e067      	b.n	8016a98 <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	685b      	ldr	r3, [r3, #4]
 80169cc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80169ce:	4a34      	ldr	r2, [pc, #208]	; (8016aa0 <ip4_input+0x274>)
 80169d0:	693b      	ldr	r3, [r7, #16]
 80169d2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80169d4:	4a32      	ldr	r2, [pc, #200]	; (8016aa0 <ip4_input+0x274>)
 80169d6:	683b      	ldr	r3, [r7, #0]
 80169d8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80169da:	4a31      	ldr	r2, [pc, #196]	; (8016aa0 <ip4_input+0x274>)
 80169dc:	697b      	ldr	r3, [r7, #20]
 80169de:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 80169e0:	697b      	ldr	r3, [r7, #20]
 80169e2:	781b      	ldrb	r3, [r3, #0]
 80169e4:	b29b      	uxth	r3, r3
 80169e6:	f003 030f 	and.w	r3, r3, #15
 80169ea:	b29b      	uxth	r3, r3
 80169ec:	009b      	lsls	r3, r3, #2
 80169ee:	b29a      	uxth	r2, r3
 80169f0:	4b2b      	ldr	r3, [pc, #172]	; (8016aa0 <ip4_input+0x274>)
 80169f2:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 80169f4:	897b      	ldrh	r3, [r7, #10]
 80169f6:	425b      	negs	r3, r3
 80169f8:	b29b      	uxth	r3, r3
 80169fa:	b21b      	sxth	r3, r3
 80169fc:	4619      	mov	r1, r3
 80169fe:	6878      	ldr	r0, [r7, #4]
 8016a00:	f7f9 fc10 	bl	8010224 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8016a04:	697b      	ldr	r3, [r7, #20]
 8016a06:	7a5b      	ldrb	r3, [r3, #9]
 8016a08:	2b06      	cmp	r3, #6
 8016a0a:	d009      	beq.n	8016a20 <ip4_input+0x1f4>
 8016a0c:	2b11      	cmp	r3, #17
 8016a0e:	d002      	beq.n	8016a16 <ip4_input+0x1ea>
 8016a10:	2b01      	cmp	r3, #1
 8016a12:	d00a      	beq.n	8016a2a <ip4_input+0x1fe>
 8016a14:	e00e      	b.n	8016a34 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8016a16:	6839      	ldr	r1, [r7, #0]
 8016a18:	6878      	ldr	r0, [r7, #4]
 8016a1a:	f7fe fbef 	bl	80151fc <udp_input>
      break;
 8016a1e:	e028      	b.n	8016a72 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8016a20:	6839      	ldr	r1, [r7, #0]
 8016a22:	6878      	ldr	r0, [r7, #4]
 8016a24:	f7fb f876 	bl	8011b14 <tcp_input>
      break;
 8016a28:	e023      	b.n	8016a72 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8016a2a:	6839      	ldr	r1, [r7, #0]
 8016a2c:	6878      	ldr	r0, [r7, #4]
 8016a2e:	f7ff fcd1 	bl	80163d4 <icmp_input>
      break;
 8016a32:	e01e      	b.n	8016a72 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016a34:	4b1a      	ldr	r3, [pc, #104]	; (8016aa0 <ip4_input+0x274>)
 8016a36:	695b      	ldr	r3, [r3, #20]
 8016a38:	6939      	ldr	r1, [r7, #16]
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	f000 f906 	bl	8016c4c <ip4_addr_isbroadcast_u32>
 8016a40:	4603      	mov	r3, r0
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d112      	bne.n	8016a6c <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016a46:	4b16      	ldr	r3, [pc, #88]	; (8016aa0 <ip4_input+0x274>)
 8016a48:	695b      	ldr	r3, [r3, #20]
 8016a4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016a4e:	2be0      	cmp	r3, #224	; 0xe0
 8016a50:	d00c      	beq.n	8016a6c <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8016a52:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016a56:	4619      	mov	r1, r3
 8016a58:	6878      	ldr	r0, [r7, #4]
 8016a5a:	f7f9 fbf5 	bl	8010248 <pbuf_header_force>
        p->payload = iphdr;
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	697a      	ldr	r2, [r7, #20]
 8016a62:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016a64:	2102      	movs	r1, #2
 8016a66:	6878      	ldr	r0, [r7, #4]
 8016a68:	f7ff fdd4 	bl	8016614 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8016a6c:	6878      	ldr	r0, [r7, #4]
 8016a6e:	f7f9 fbfd 	bl	801026c <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016a72:	4b0b      	ldr	r3, [pc, #44]	; (8016aa0 <ip4_input+0x274>)
 8016a74:	2200      	movs	r2, #0
 8016a76:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016a78:	4b09      	ldr	r3, [pc, #36]	; (8016aa0 <ip4_input+0x274>)
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016a7e:	4b08      	ldr	r3, [pc, #32]	; (8016aa0 <ip4_input+0x274>)
 8016a80:	2200      	movs	r2, #0
 8016a82:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016a84:	4b06      	ldr	r3, [pc, #24]	; (8016aa0 <ip4_input+0x274>)
 8016a86:	2200      	movs	r2, #0
 8016a88:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016a8a:	4b05      	ldr	r3, [pc, #20]	; (8016aa0 <ip4_input+0x274>)
 8016a8c:	2200      	movs	r2, #0
 8016a8e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016a90:	4b03      	ldr	r3, [pc, #12]	; (8016aa0 <ip4_input+0x274>)
 8016a92:	2200      	movs	r2, #0
 8016a94:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016a96:	2300      	movs	r3, #0
}
 8016a98:	4618      	mov	r0, r3
 8016a9a:	3718      	adds	r7, #24
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	bd80      	pop	{r7, pc}
 8016aa0:	24021c54 	.word	0x24021c54
 8016aa4:	24024e3c 	.word	0x24024e3c

08016aa8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8016aa8:	b580      	push	{r7, lr}
 8016aaa:	b08a      	sub	sp, #40	; 0x28
 8016aac:	af04      	add	r7, sp, #16
 8016aae:	60f8      	str	r0, [r7, #12]
 8016ab0:	60b9      	str	r1, [r7, #8]
 8016ab2:	607a      	str	r2, [r7, #4]
 8016ab4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016ab6:	68bb      	ldr	r3, [r7, #8]
 8016ab8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d009      	beq.n	8016ad4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016ac0:	68bb      	ldr	r3, [r7, #8]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d003      	beq.n	8016ace <ip4_output_if+0x26>
 8016ac6:	68bb      	ldr	r3, [r7, #8]
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d102      	bne.n	8016ad4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ad0:	3304      	adds	r3, #4
 8016ad2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016ad4:	78fa      	ldrb	r2, [r7, #3]
 8016ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ad8:	9302      	str	r3, [sp, #8]
 8016ada:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016ade:	9301      	str	r3, [sp, #4]
 8016ae0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016ae4:	9300      	str	r3, [sp, #0]
 8016ae6:	4613      	mov	r3, r2
 8016ae8:	687a      	ldr	r2, [r7, #4]
 8016aea:	6979      	ldr	r1, [r7, #20]
 8016aec:	68f8      	ldr	r0, [r7, #12]
 8016aee:	f000 f805 	bl	8016afc <ip4_output_if_src>
 8016af2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016af4:	4618      	mov	r0, r3
 8016af6:	3718      	adds	r7, #24
 8016af8:	46bd      	mov	sp, r7
 8016afa:	bd80      	pop	{r7, pc}

08016afc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8016afc:	b580      	push	{r7, lr}
 8016afe:	b088      	sub	sp, #32
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	60f8      	str	r0, [r7, #12]
 8016b04:	60b9      	str	r1, [r7, #8]
 8016b06:	607a      	str	r2, [r7, #4]
 8016b08:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	89db      	ldrh	r3, [r3, #14]
 8016b0e:	2b01      	cmp	r3, #1
 8016b10:	d006      	beq.n	8016b20 <ip4_output_if_src+0x24>
 8016b12:	4b48      	ldr	r3, [pc, #288]	; (8016c34 <ip4_output_if_src+0x138>)
 8016b14:	f240 3233 	movw	r2, #819	; 0x333
 8016b18:	4947      	ldr	r1, [pc, #284]	; (8016c38 <ip4_output_if_src+0x13c>)
 8016b1a:	4848      	ldr	r0, [pc, #288]	; (8016c3c <ip4_output_if_src+0x140>)
 8016b1c:	f001 f8f2 	bl	8017d04 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d060      	beq.n	8016be8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016b26:	2314      	movs	r3, #20
 8016b28:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8016b2a:	2114      	movs	r1, #20
 8016b2c:	68f8      	ldr	r0, [r7, #12]
 8016b2e:	f7f9 fb79 	bl	8010224 <pbuf_header>
 8016b32:	4603      	mov	r3, r0
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d002      	beq.n	8016b3e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016b38:	f06f 0301 	mvn.w	r3, #1
 8016b3c:	e075      	b.n	8016c2a <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	685b      	ldr	r3, [r3, #4]
 8016b42:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	895b      	ldrh	r3, [r3, #10]
 8016b48:	2b13      	cmp	r3, #19
 8016b4a:	d806      	bhi.n	8016b5a <ip4_output_if_src+0x5e>
 8016b4c:	4b39      	ldr	r3, [pc, #228]	; (8016c34 <ip4_output_if_src+0x138>)
 8016b4e:	f240 3261 	movw	r2, #865	; 0x361
 8016b52:	493b      	ldr	r1, [pc, #236]	; (8016c40 <ip4_output_if_src+0x144>)
 8016b54:	4839      	ldr	r0, [pc, #228]	; (8016c3c <ip4_output_if_src+0x140>)
 8016b56:	f001 f8d5 	bl	8017d04 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016b5a:	69fb      	ldr	r3, [r7, #28]
 8016b5c:	78fa      	ldrb	r2, [r7, #3]
 8016b5e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016b60:	69fb      	ldr	r3, [r7, #28]
 8016b62:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016b66:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	681a      	ldr	r2, [r3, #0]
 8016b6c:	69fb      	ldr	r3, [r7, #28]
 8016b6e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016b70:	8b7b      	ldrh	r3, [r7, #26]
 8016b72:	089b      	lsrs	r3, r3, #2
 8016b74:	b29b      	uxth	r3, r3
 8016b76:	b2db      	uxtb	r3, r3
 8016b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b7c:	b2da      	uxtb	r2, r3
 8016b7e:	69fb      	ldr	r3, [r7, #28]
 8016b80:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016b82:	69fb      	ldr	r3, [r7, #28]
 8016b84:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016b88:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	891b      	ldrh	r3, [r3, #8]
 8016b8e:	4618      	mov	r0, r3
 8016b90:	f7f8 f854 	bl	800ec3c <lwip_htons>
 8016b94:	4603      	mov	r3, r0
 8016b96:	461a      	mov	r2, r3
 8016b98:	69fb      	ldr	r3, [r7, #28]
 8016b9a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016b9c:	69fb      	ldr	r3, [r7, #28]
 8016b9e:	2200      	movs	r2, #0
 8016ba0:	719a      	strb	r2, [r3, #6]
 8016ba2:	2200      	movs	r2, #0
 8016ba4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016ba6:	4b27      	ldr	r3, [pc, #156]	; (8016c44 <ip4_output_if_src+0x148>)
 8016ba8:	881b      	ldrh	r3, [r3, #0]
 8016baa:	4618      	mov	r0, r3
 8016bac:	f7f8 f846 	bl	800ec3c <lwip_htons>
 8016bb0:	4603      	mov	r3, r0
 8016bb2:	461a      	mov	r2, r3
 8016bb4:	69fb      	ldr	r3, [r7, #28]
 8016bb6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016bb8:	4b22      	ldr	r3, [pc, #136]	; (8016c44 <ip4_output_if_src+0x148>)
 8016bba:	881b      	ldrh	r3, [r3, #0]
 8016bbc:	3301      	adds	r3, #1
 8016bbe:	b29a      	uxth	r2, r3
 8016bc0:	4b20      	ldr	r3, [pc, #128]	; (8016c44 <ip4_output_if_src+0x148>)
 8016bc2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016bc4:	68bb      	ldr	r3, [r7, #8]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d104      	bne.n	8016bd4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016bca:	4b1f      	ldr	r3, [pc, #124]	; (8016c48 <ip4_output_if_src+0x14c>)
 8016bcc:	681a      	ldr	r2, [r3, #0]
 8016bce:	69fb      	ldr	r3, [r7, #28]
 8016bd0:	60da      	str	r2, [r3, #12]
 8016bd2:	e003      	b.n	8016bdc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016bd4:	68bb      	ldr	r3, [r7, #8]
 8016bd6:	681a      	ldr	r2, [r3, #0]
 8016bd8:	69fb      	ldr	r3, [r7, #28]
 8016bda:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016bdc:	69fb      	ldr	r3, [r7, #28]
 8016bde:	2200      	movs	r2, #0
 8016be0:	729a      	strb	r2, [r3, #10]
 8016be2:	2200      	movs	r2, #0
 8016be4:	72da      	strb	r2, [r3, #11]
 8016be6:	e008      	b.n	8016bfa <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	685b      	ldr	r3, [r3, #4]
 8016bec:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016bee:	69fb      	ldr	r3, [r7, #28]
 8016bf0:	691b      	ldr	r3, [r3, #16]
 8016bf2:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016bf4:	f107 0314 	add.w	r3, r7, #20
 8016bf8:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d00c      	beq.n	8016c1c <ip4_output_if_src+0x120>
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	891a      	ldrh	r2, [r3, #8]
 8016c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016c0a:	429a      	cmp	r2, r3
 8016c0c:	d906      	bls.n	8016c1c <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8016c0e:	687a      	ldr	r2, [r7, #4]
 8016c10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016c12:	68f8      	ldr	r0, [r7, #12]
 8016c14:	f000 fd0a 	bl	801762c <ip4_frag>
 8016c18:	4603      	mov	r3, r0
 8016c1a:	e006      	b.n	8016c2a <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c1e:	695b      	ldr	r3, [r3, #20]
 8016c20:	687a      	ldr	r2, [r7, #4]
 8016c22:	68f9      	ldr	r1, [r7, #12]
 8016c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016c26:	4798      	blx	r3
 8016c28:	4603      	mov	r3, r0
}
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	3720      	adds	r7, #32
 8016c2e:	46bd      	mov	sp, r7
 8016c30:	bd80      	pop	{r7, pc}
 8016c32:	bf00      	nop
 8016c34:	0801a8f4 	.word	0x0801a8f4
 8016c38:	0801a928 	.word	0x0801a928
 8016c3c:	0801a934 	.word	0x0801a934
 8016c40:	0801a95c 	.word	0x0801a95c
 8016c44:	24021932 	.word	0x24021932
 8016c48:	0801ad4c 	.word	0x0801ad4c

08016c4c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016c4c:	b480      	push	{r7}
 8016c4e:	b085      	sub	sp, #20
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	6078      	str	r0, [r7, #4]
 8016c54:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c60:	d002      	beq.n	8016c68 <ip4_addr_isbroadcast_u32+0x1c>
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d101      	bne.n	8016c6c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016c68:	2301      	movs	r3, #1
 8016c6a:	e02a      	b.n	8016cc2 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016c6c:	683b      	ldr	r3, [r7, #0]
 8016c6e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8016c72:	f003 0302 	and.w	r3, r3, #2
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d101      	bne.n	8016c7e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	e021      	b.n	8016cc2 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016c7e:	683b      	ldr	r3, [r7, #0]
 8016c80:	3304      	adds	r3, #4
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	687a      	ldr	r2, [r7, #4]
 8016c86:	429a      	cmp	r2, r3
 8016c88:	d101      	bne.n	8016c8e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016c8a:	2300      	movs	r3, #0
 8016c8c:	e019      	b.n	8016cc2 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016c8e:	68fa      	ldr	r2, [r7, #12]
 8016c90:	683b      	ldr	r3, [r7, #0]
 8016c92:	3304      	adds	r3, #4
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	405a      	eors	r2, r3
 8016c98:	683b      	ldr	r3, [r7, #0]
 8016c9a:	3308      	adds	r3, #8
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	4013      	ands	r3, r2
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d10d      	bne.n	8016cc0 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016ca4:	683b      	ldr	r3, [r7, #0]
 8016ca6:	3308      	adds	r3, #8
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	43da      	mvns	r2, r3
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016cb0:	683b      	ldr	r3, [r7, #0]
 8016cb2:	3308      	adds	r3, #8
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016cb8:	429a      	cmp	r2, r3
 8016cba:	d101      	bne.n	8016cc0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016cbc:	2301      	movs	r3, #1
 8016cbe:	e000      	b.n	8016cc2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016cc0:	2300      	movs	r3, #0
  }
}
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	3714      	adds	r7, #20
 8016cc6:	46bd      	mov	sp, r7
 8016cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ccc:	4770      	bx	lr
	...

08016cd0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b084      	sub	sp, #16
 8016cd4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016cda:	4b12      	ldr	r3, [pc, #72]	; (8016d24 <ip_reass_tmr+0x54>)
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016ce0:	e018      	b.n	8016d14 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	7fdb      	ldrb	r3, [r3, #31]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d00b      	beq.n	8016d02 <ip_reass_tmr+0x32>
      r->timer--;
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	7fdb      	ldrb	r3, [r3, #31]
 8016cee:	3b01      	subs	r3, #1
 8016cf0:	b2da      	uxtb	r2, r3
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	60fb      	str	r3, [r7, #12]
 8016d00:	e008      	b.n	8016d14 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016d0c:	68b9      	ldr	r1, [r7, #8]
 8016d0e:	6878      	ldr	r0, [r7, #4]
 8016d10:	f000 f80a 	bl	8016d28 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d1e3      	bne.n	8016ce2 <ip_reass_tmr+0x12>
     }
   }
}
 8016d1a:	bf00      	nop
 8016d1c:	3710      	adds	r7, #16
 8016d1e:	46bd      	mov	sp, r7
 8016d20:	bd80      	pop	{r7, pc}
 8016d22:	bf00      	nop
 8016d24:	24021938 	.word	0x24021938

08016d28 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016d28:	b580      	push	{r7, lr}
 8016d2a:	b088      	sub	sp, #32
 8016d2c:	af00      	add	r7, sp, #0
 8016d2e:	6078      	str	r0, [r7, #4]
 8016d30:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016d32:	2300      	movs	r3, #0
 8016d34:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016d36:	683a      	ldr	r2, [r7, #0]
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	429a      	cmp	r2, r3
 8016d3c:	d105      	bne.n	8016d4a <ip_reass_free_complete_datagram+0x22>
 8016d3e:	4b45      	ldr	r3, [pc, #276]	; (8016e54 <ip_reass_free_complete_datagram+0x12c>)
 8016d40:	22ab      	movs	r2, #171	; 0xab
 8016d42:	4945      	ldr	r1, [pc, #276]	; (8016e58 <ip_reass_free_complete_datagram+0x130>)
 8016d44:	4845      	ldr	r0, [pc, #276]	; (8016e5c <ip_reass_free_complete_datagram+0x134>)
 8016d46:	f000 ffdd 	bl	8017d04 <iprintf>
  if (prev != NULL) {
 8016d4a:	683b      	ldr	r3, [r7, #0]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d00a      	beq.n	8016d66 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016d50:	683b      	ldr	r3, [r7, #0]
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	687a      	ldr	r2, [r7, #4]
 8016d56:	429a      	cmp	r2, r3
 8016d58:	d005      	beq.n	8016d66 <ip_reass_free_complete_datagram+0x3e>
 8016d5a:	4b3e      	ldr	r3, [pc, #248]	; (8016e54 <ip_reass_free_complete_datagram+0x12c>)
 8016d5c:	22ad      	movs	r2, #173	; 0xad
 8016d5e:	4940      	ldr	r1, [pc, #256]	; (8016e60 <ip_reass_free_complete_datagram+0x138>)
 8016d60:	483e      	ldr	r0, [pc, #248]	; (8016e5c <ip_reass_free_complete_datagram+0x134>)
 8016d62:	f000 ffcf 	bl	8017d04 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	685b      	ldr	r3, [r3, #4]
 8016d6a:	685b      	ldr	r3, [r3, #4]
 8016d6c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016d6e:	697b      	ldr	r3, [r7, #20]
 8016d70:	889b      	ldrh	r3, [r3, #4]
 8016d72:	b29b      	uxth	r3, r3
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d12a      	bne.n	8016dce <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	685b      	ldr	r3, [r3, #4]
 8016d7c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016d7e:	697b      	ldr	r3, [r7, #20]
 8016d80:	681a      	ldr	r2, [r3, #0]
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016d86:	69bb      	ldr	r3, [r7, #24]
 8016d88:	6858      	ldr	r0, [r3, #4]
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	3308      	adds	r3, #8
 8016d8e:	2214      	movs	r2, #20
 8016d90:	4619      	mov	r1, r3
 8016d92:	f000 ffa4 	bl	8017cde <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016d96:	2101      	movs	r1, #1
 8016d98:	69b8      	ldr	r0, [r7, #24]
 8016d9a:	f7ff fc4b 	bl	8016634 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016d9e:	69b8      	ldr	r0, [r7, #24]
 8016da0:	f7f9 fafe 	bl	80103a0 <pbuf_clen>
 8016da4:	4603      	mov	r3, r0
 8016da6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016da8:	8bfa      	ldrh	r2, [r7, #30]
 8016daa:	8a7b      	ldrh	r3, [r7, #18]
 8016dac:	4413      	add	r3, r2
 8016dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016db2:	db05      	blt.n	8016dc0 <ip_reass_free_complete_datagram+0x98>
 8016db4:	4b27      	ldr	r3, [pc, #156]	; (8016e54 <ip_reass_free_complete_datagram+0x12c>)
 8016db6:	22bc      	movs	r2, #188	; 0xbc
 8016db8:	492a      	ldr	r1, [pc, #168]	; (8016e64 <ip_reass_free_complete_datagram+0x13c>)
 8016dba:	4828      	ldr	r0, [pc, #160]	; (8016e5c <ip_reass_free_complete_datagram+0x134>)
 8016dbc:	f000 ffa2 	bl	8017d04 <iprintf>
    pbufs_freed += clen;
 8016dc0:	8bfa      	ldrh	r2, [r7, #30]
 8016dc2:	8a7b      	ldrh	r3, [r7, #18]
 8016dc4:	4413      	add	r3, r2
 8016dc6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016dc8:	69b8      	ldr	r0, [r7, #24]
 8016dca:	f7f9 fa4f 	bl	801026c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	685b      	ldr	r3, [r3, #4]
 8016dd2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016dd4:	e01f      	b.n	8016e16 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016dd6:	69bb      	ldr	r3, [r7, #24]
 8016dd8:	685b      	ldr	r3, [r3, #4]
 8016dda:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016ddc:	69bb      	ldr	r3, [r7, #24]
 8016dde:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016de0:	697b      	ldr	r3, [r7, #20]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016de6:	68f8      	ldr	r0, [r7, #12]
 8016de8:	f7f9 fada 	bl	80103a0 <pbuf_clen>
 8016dec:	4603      	mov	r3, r0
 8016dee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016df0:	8bfa      	ldrh	r2, [r7, #30]
 8016df2:	8a7b      	ldrh	r3, [r7, #18]
 8016df4:	4413      	add	r3, r2
 8016df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016dfa:	db05      	blt.n	8016e08 <ip_reass_free_complete_datagram+0xe0>
 8016dfc:	4b15      	ldr	r3, [pc, #84]	; (8016e54 <ip_reass_free_complete_datagram+0x12c>)
 8016dfe:	22cc      	movs	r2, #204	; 0xcc
 8016e00:	4918      	ldr	r1, [pc, #96]	; (8016e64 <ip_reass_free_complete_datagram+0x13c>)
 8016e02:	4816      	ldr	r0, [pc, #88]	; (8016e5c <ip_reass_free_complete_datagram+0x134>)
 8016e04:	f000 ff7e 	bl	8017d04 <iprintf>
    pbufs_freed += clen;
 8016e08:	8bfa      	ldrh	r2, [r7, #30]
 8016e0a:	8a7b      	ldrh	r3, [r7, #18]
 8016e0c:	4413      	add	r3, r2
 8016e0e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016e10:	68f8      	ldr	r0, [r7, #12]
 8016e12:	f7f9 fa2b 	bl	801026c <pbuf_free>
  while (p != NULL) {
 8016e16:	69bb      	ldr	r3, [r7, #24]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d1dc      	bne.n	8016dd6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016e1c:	6839      	ldr	r1, [r7, #0]
 8016e1e:	6878      	ldr	r0, [r7, #4]
 8016e20:	f000 f8c2 	bl	8016fa8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8016e24:	4b10      	ldr	r3, [pc, #64]	; (8016e68 <ip_reass_free_complete_datagram+0x140>)
 8016e26:	881b      	ldrh	r3, [r3, #0]
 8016e28:	8bfa      	ldrh	r2, [r7, #30]
 8016e2a:	429a      	cmp	r2, r3
 8016e2c:	d905      	bls.n	8016e3a <ip_reass_free_complete_datagram+0x112>
 8016e2e:	4b09      	ldr	r3, [pc, #36]	; (8016e54 <ip_reass_free_complete_datagram+0x12c>)
 8016e30:	22d2      	movs	r2, #210	; 0xd2
 8016e32:	490e      	ldr	r1, [pc, #56]	; (8016e6c <ip_reass_free_complete_datagram+0x144>)
 8016e34:	4809      	ldr	r0, [pc, #36]	; (8016e5c <ip_reass_free_complete_datagram+0x134>)
 8016e36:	f000 ff65 	bl	8017d04 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8016e3a:	4b0b      	ldr	r3, [pc, #44]	; (8016e68 <ip_reass_free_complete_datagram+0x140>)
 8016e3c:	881a      	ldrh	r2, [r3, #0]
 8016e3e:	8bfb      	ldrh	r3, [r7, #30]
 8016e40:	1ad3      	subs	r3, r2, r3
 8016e42:	b29a      	uxth	r2, r3
 8016e44:	4b08      	ldr	r3, [pc, #32]	; (8016e68 <ip_reass_free_complete_datagram+0x140>)
 8016e46:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016e48:	8bfb      	ldrh	r3, [r7, #30]
}
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	3720      	adds	r7, #32
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	bd80      	pop	{r7, pc}
 8016e52:	bf00      	nop
 8016e54:	0801a98c 	.word	0x0801a98c
 8016e58:	0801a9c8 	.word	0x0801a9c8
 8016e5c:	0801a9d4 	.word	0x0801a9d4
 8016e60:	0801a9fc 	.word	0x0801a9fc
 8016e64:	0801aa10 	.word	0x0801aa10
 8016e68:	2402193c 	.word	0x2402193c
 8016e6c:	0801aa30 	.word	0x0801aa30

08016e70 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016e70:	b580      	push	{r7, lr}
 8016e72:	b08a      	sub	sp, #40	; 0x28
 8016e74:	af00      	add	r7, sp, #0
 8016e76:	6078      	str	r0, [r7, #4]
 8016e78:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016e7e:	2300      	movs	r3, #0
 8016e80:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016e82:	2300      	movs	r3, #0
 8016e84:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016e86:	2300      	movs	r3, #0
 8016e88:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016e8e:	4b28      	ldr	r3, [pc, #160]	; (8016f30 <ip_reass_remove_oldest_datagram+0xc0>)
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016e94:	e030      	b.n	8016ef8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e98:	695a      	ldr	r2, [r3, #20]
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	68db      	ldr	r3, [r3, #12]
 8016e9e:	429a      	cmp	r2, r3
 8016ea0:	d10c      	bne.n	8016ebc <ip_reass_remove_oldest_datagram+0x4c>
 8016ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ea4:	699a      	ldr	r2, [r3, #24]
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	691b      	ldr	r3, [r3, #16]
 8016eaa:	429a      	cmp	r2, r3
 8016eac:	d106      	bne.n	8016ebc <ip_reass_remove_oldest_datagram+0x4c>
 8016eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eb0:	899a      	ldrh	r2, [r3, #12]
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	889b      	ldrh	r3, [r3, #4]
 8016eb6:	b29b      	uxth	r3, r3
 8016eb8:	429a      	cmp	r2, r3
 8016eba:	d014      	beq.n	8016ee6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016ebc:	693b      	ldr	r3, [r7, #16]
 8016ebe:	3301      	adds	r3, #1
 8016ec0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016ec2:	6a3b      	ldr	r3, [r7, #32]
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d104      	bne.n	8016ed2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eca:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016ecc:	69fb      	ldr	r3, [r7, #28]
 8016ece:	61bb      	str	r3, [r7, #24]
 8016ed0:	e009      	b.n	8016ee6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ed4:	7fda      	ldrb	r2, [r3, #31]
 8016ed6:	6a3b      	ldr	r3, [r7, #32]
 8016ed8:	7fdb      	ldrb	r3, [r3, #31]
 8016eda:	429a      	cmp	r2, r3
 8016edc:	d803      	bhi.n	8016ee6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ee0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016ee2:	69fb      	ldr	r3, [r7, #28]
 8016ee4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d001      	beq.n	8016ef2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ef0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d1cb      	bne.n	8016e96 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016efe:	6a3b      	ldr	r3, [r7, #32]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d008      	beq.n	8016f16 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016f04:	69b9      	ldr	r1, [r7, #24]
 8016f06:	6a38      	ldr	r0, [r7, #32]
 8016f08:	f7ff ff0e 	bl	8016d28 <ip_reass_free_complete_datagram>
 8016f0c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016f0e:	697a      	ldr	r2, [r7, #20]
 8016f10:	68fb      	ldr	r3, [r7, #12]
 8016f12:	4413      	add	r3, r2
 8016f14:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016f16:	697a      	ldr	r2, [r7, #20]
 8016f18:	683b      	ldr	r3, [r7, #0]
 8016f1a:	429a      	cmp	r2, r3
 8016f1c:	da02      	bge.n	8016f24 <ip_reass_remove_oldest_datagram+0xb4>
 8016f1e:	693b      	ldr	r3, [r7, #16]
 8016f20:	2b01      	cmp	r3, #1
 8016f22:	dcac      	bgt.n	8016e7e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016f24:	697b      	ldr	r3, [r7, #20]
}
 8016f26:	4618      	mov	r0, r3
 8016f28:	3728      	adds	r7, #40	; 0x28
 8016f2a:	46bd      	mov	sp, r7
 8016f2c:	bd80      	pop	{r7, pc}
 8016f2e:	bf00      	nop
 8016f30:	24021938 	.word	0x24021938

08016f34 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016f34:	b580      	push	{r7, lr}
 8016f36:	b084      	sub	sp, #16
 8016f38:	af00      	add	r7, sp, #0
 8016f3a:	6078      	str	r0, [r7, #4]
 8016f3c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016f3e:	2004      	movs	r0, #4
 8016f40:	f7f8 fb42 	bl	800f5c8 <memp_malloc>
 8016f44:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d110      	bne.n	8016f6e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016f4c:	6839      	ldr	r1, [r7, #0]
 8016f4e:	6878      	ldr	r0, [r7, #4]
 8016f50:	f7ff ff8e 	bl	8016e70 <ip_reass_remove_oldest_datagram>
 8016f54:	4602      	mov	r2, r0
 8016f56:	683b      	ldr	r3, [r7, #0]
 8016f58:	4293      	cmp	r3, r2
 8016f5a:	dc03      	bgt.n	8016f64 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016f5c:	2004      	movs	r0, #4
 8016f5e:	f7f8 fb33 	bl	800f5c8 <memp_malloc>
 8016f62:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d101      	bne.n	8016f6e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	e016      	b.n	8016f9c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016f6e:	2220      	movs	r2, #32
 8016f70:	2100      	movs	r1, #0
 8016f72:	68f8      	ldr	r0, [r7, #12]
 8016f74:	f000 febe 	bl	8017cf4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	2203      	movs	r2, #3
 8016f7c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016f7e:	4b09      	ldr	r3, [pc, #36]	; (8016fa4 <ip_reass_enqueue_new_datagram+0x70>)
 8016f80:	681a      	ldr	r2, [r3, #0]
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016f86:	4a07      	ldr	r2, [pc, #28]	; (8016fa4 <ip_reass_enqueue_new_datagram+0x70>)
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016f8c:	68fb      	ldr	r3, [r7, #12]
 8016f8e:	3308      	adds	r3, #8
 8016f90:	2214      	movs	r2, #20
 8016f92:	6879      	ldr	r1, [r7, #4]
 8016f94:	4618      	mov	r0, r3
 8016f96:	f000 fea2 	bl	8017cde <memcpy>
  return ipr;
 8016f9a:	68fb      	ldr	r3, [r7, #12]
}
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	3710      	adds	r7, #16
 8016fa0:	46bd      	mov	sp, r7
 8016fa2:	bd80      	pop	{r7, pc}
 8016fa4:	24021938 	.word	0x24021938

08016fa8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b082      	sub	sp, #8
 8016fac:	af00      	add	r7, sp, #0
 8016fae:	6078      	str	r0, [r7, #4]
 8016fb0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016fb2:	4b10      	ldr	r3, [pc, #64]	; (8016ff4 <ip_reass_dequeue_datagram+0x4c>)
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	687a      	ldr	r2, [r7, #4]
 8016fb8:	429a      	cmp	r2, r3
 8016fba:	d104      	bne.n	8016fc6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	4a0c      	ldr	r2, [pc, #48]	; (8016ff4 <ip_reass_dequeue_datagram+0x4c>)
 8016fc2:	6013      	str	r3, [r2, #0]
 8016fc4:	e00d      	b.n	8016fe2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016fc6:	683b      	ldr	r3, [r7, #0]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d106      	bne.n	8016fda <ip_reass_dequeue_datagram+0x32>
 8016fcc:	4b0a      	ldr	r3, [pc, #40]	; (8016ff8 <ip_reass_dequeue_datagram+0x50>)
 8016fce:	f240 1245 	movw	r2, #325	; 0x145
 8016fd2:	490a      	ldr	r1, [pc, #40]	; (8016ffc <ip_reass_dequeue_datagram+0x54>)
 8016fd4:	480a      	ldr	r0, [pc, #40]	; (8017000 <ip_reass_dequeue_datagram+0x58>)
 8016fd6:	f000 fe95 	bl	8017d04 <iprintf>
    prev->next = ipr->next;
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	681a      	ldr	r2, [r3, #0]
 8016fde:	683b      	ldr	r3, [r7, #0]
 8016fe0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016fe2:	6879      	ldr	r1, [r7, #4]
 8016fe4:	2004      	movs	r0, #4
 8016fe6:	f7f8 fb65 	bl	800f6b4 <memp_free>
}
 8016fea:	bf00      	nop
 8016fec:	3708      	adds	r7, #8
 8016fee:	46bd      	mov	sp, r7
 8016ff0:	bd80      	pop	{r7, pc}
 8016ff2:	bf00      	nop
 8016ff4:	24021938 	.word	0x24021938
 8016ff8:	0801a98c 	.word	0x0801a98c
 8016ffc:	0801aa4c 	.word	0x0801aa4c
 8017000:	0801a9d4 	.word	0x0801a9d4

08017004 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017004:	b580      	push	{r7, lr}
 8017006:	b08c      	sub	sp, #48	; 0x30
 8017008:	af00      	add	r7, sp, #0
 801700a:	60f8      	str	r0, [r7, #12]
 801700c:	60b9      	str	r1, [r7, #8]
 801700e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8017010:	2300      	movs	r3, #0
 8017012:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017014:	2301      	movs	r3, #1
 8017016:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8017018:	68bb      	ldr	r3, [r7, #8]
 801701a:	685b      	ldr	r3, [r3, #4]
 801701c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801701e:	69fb      	ldr	r3, [r7, #28]
 8017020:	885b      	ldrh	r3, [r3, #2]
 8017022:	b29b      	uxth	r3, r3
 8017024:	4618      	mov	r0, r3
 8017026:	f7f7 fe09 	bl	800ec3c <lwip_htons>
 801702a:	4603      	mov	r3, r0
 801702c:	461a      	mov	r2, r3
 801702e:	69fb      	ldr	r3, [r7, #28]
 8017030:	781b      	ldrb	r3, [r3, #0]
 8017032:	b29b      	uxth	r3, r3
 8017034:	f003 030f 	and.w	r3, r3, #15
 8017038:	b29b      	uxth	r3, r3
 801703a:	009b      	lsls	r3, r3, #2
 801703c:	b29b      	uxth	r3, r3
 801703e:	1ad3      	subs	r3, r2, r3
 8017040:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8017042:	69fb      	ldr	r3, [r7, #28]
 8017044:	88db      	ldrh	r3, [r3, #6]
 8017046:	b29b      	uxth	r3, r3
 8017048:	4618      	mov	r0, r3
 801704a:	f7f7 fdf7 	bl	800ec3c <lwip_htons>
 801704e:	4603      	mov	r3, r0
 8017050:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017054:	b29b      	uxth	r3, r3
 8017056:	00db      	lsls	r3, r3, #3
 8017058:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 801705a:	68bb      	ldr	r3, [r7, #8]
 801705c:	685b      	ldr	r3, [r3, #4]
 801705e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017062:	2200      	movs	r2, #0
 8017064:	701a      	strb	r2, [r3, #0]
 8017066:	2200      	movs	r2, #0
 8017068:	705a      	strb	r2, [r3, #1]
 801706a:	2200      	movs	r2, #0
 801706c:	709a      	strb	r2, [r3, #2]
 801706e:	2200      	movs	r2, #0
 8017070:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017074:	8b3a      	ldrh	r2, [r7, #24]
 8017076:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8017078:	8b3a      	ldrh	r2, [r7, #24]
 801707a:	8b7b      	ldrh	r3, [r7, #26]
 801707c:	4413      	add	r3, r2
 801707e:	b29a      	uxth	r2, r3
 8017080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017082:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	685b      	ldr	r3, [r3, #4]
 8017088:	627b      	str	r3, [r7, #36]	; 0x24
 801708a:	e061      	b.n	8017150 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 801708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801708e:	685b      	ldr	r3, [r3, #4]
 8017090:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8017092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017094:	889b      	ldrh	r3, [r3, #4]
 8017096:	b29a      	uxth	r2, r3
 8017098:	697b      	ldr	r3, [r7, #20]
 801709a:	889b      	ldrh	r3, [r3, #4]
 801709c:	b29b      	uxth	r3, r3
 801709e:	429a      	cmp	r2, r3
 80170a0:	d232      	bcs.n	8017108 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80170a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80170a6:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80170a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d01f      	beq.n	80170ee <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80170ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170b0:	889b      	ldrh	r3, [r3, #4]
 80170b2:	b29a      	uxth	r2, r3
 80170b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170b6:	88db      	ldrh	r3, [r3, #6]
 80170b8:	b29b      	uxth	r3, r3
 80170ba:	429a      	cmp	r2, r3
 80170bc:	f0c0 80e3 	bcc.w	8017286 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 80170c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170c2:	88db      	ldrh	r3, [r3, #6]
 80170c4:	b29a      	uxth	r2, r3
 80170c6:	697b      	ldr	r3, [r7, #20]
 80170c8:	889b      	ldrh	r3, [r3, #4]
 80170ca:	b29b      	uxth	r3, r3
 80170cc:	429a      	cmp	r2, r3
 80170ce:	f200 80da 	bhi.w	8017286 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80170d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170d4:	68ba      	ldr	r2, [r7, #8]
 80170d6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80170d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170da:	88db      	ldrh	r3, [r3, #6]
 80170dc:	b29a      	uxth	r2, r3
 80170de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170e0:	889b      	ldrh	r3, [r3, #4]
 80170e2:	b29b      	uxth	r3, r3
 80170e4:	429a      	cmp	r2, r3
 80170e6:	d037      	beq.n	8017158 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80170e8:	2300      	movs	r3, #0
 80170ea:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80170ec:	e034      	b.n	8017158 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 80170ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170f0:	88db      	ldrh	r3, [r3, #6]
 80170f2:	b29a      	uxth	r2, r3
 80170f4:	697b      	ldr	r3, [r7, #20]
 80170f6:	889b      	ldrh	r3, [r3, #4]
 80170f8:	b29b      	uxth	r3, r3
 80170fa:	429a      	cmp	r2, r3
 80170fc:	f200 80c5 	bhi.w	801728a <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	68ba      	ldr	r2, [r7, #8]
 8017104:	605a      	str	r2, [r3, #4]
      break;
 8017106:	e027      	b.n	8017158 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8017108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801710a:	889b      	ldrh	r3, [r3, #4]
 801710c:	b29a      	uxth	r2, r3
 801710e:	697b      	ldr	r3, [r7, #20]
 8017110:	889b      	ldrh	r3, [r3, #4]
 8017112:	b29b      	uxth	r3, r3
 8017114:	429a      	cmp	r2, r3
 8017116:	f000 80ba 	beq.w	801728e <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801711a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801711c:	889b      	ldrh	r3, [r3, #4]
 801711e:	b29a      	uxth	r2, r3
 8017120:	697b      	ldr	r3, [r7, #20]
 8017122:	88db      	ldrh	r3, [r3, #6]
 8017124:	b29b      	uxth	r3, r3
 8017126:	429a      	cmp	r2, r3
 8017128:	f0c0 80b3 	bcc.w	8017292 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801712c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801712e:	2b00      	cmp	r3, #0
 8017130:	d009      	beq.n	8017146 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8017132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017134:	88db      	ldrh	r3, [r3, #6]
 8017136:	b29a      	uxth	r2, r3
 8017138:	697b      	ldr	r3, [r7, #20]
 801713a:	889b      	ldrh	r3, [r3, #4]
 801713c:	b29b      	uxth	r3, r3
 801713e:	429a      	cmp	r2, r3
 8017140:	d001      	beq.n	8017146 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017142:	2300      	movs	r3, #0
 8017144:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017146:	697b      	ldr	r3, [r7, #20]
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801714c:	697b      	ldr	r3, [r7, #20]
 801714e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017152:	2b00      	cmp	r3, #0
 8017154:	d19a      	bne.n	801708c <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8017156:	e000      	b.n	801715a <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8017158:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801715c:	2b00      	cmp	r3, #0
 801715e:	d12d      	bne.n	80171bc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8017160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017162:	2b00      	cmp	r3, #0
 8017164:	d01c      	beq.n	80171a0 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017168:	88db      	ldrh	r3, [r3, #6]
 801716a:	b29a      	uxth	r2, r3
 801716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801716e:	889b      	ldrh	r3, [r3, #4]
 8017170:	b29b      	uxth	r3, r3
 8017172:	429a      	cmp	r2, r3
 8017174:	d906      	bls.n	8017184 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8017176:	4b51      	ldr	r3, [pc, #324]	; (80172bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8017178:	f240 12ab 	movw	r2, #427	; 0x1ab
 801717c:	4950      	ldr	r1, [pc, #320]	; (80172c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801717e:	4851      	ldr	r0, [pc, #324]	; (80172c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017180:	f000 fdc0 	bl	8017d04 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017186:	68ba      	ldr	r2, [r7, #8]
 8017188:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801718a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801718c:	88db      	ldrh	r3, [r3, #6]
 801718e:	b29a      	uxth	r2, r3
 8017190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017192:	889b      	ldrh	r3, [r3, #4]
 8017194:	b29b      	uxth	r3, r3
 8017196:	429a      	cmp	r2, r3
 8017198:	d010      	beq.n	80171bc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 801719a:	2300      	movs	r3, #0
 801719c:	623b      	str	r3, [r7, #32]
 801719e:	e00d      	b.n	80171bc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	685b      	ldr	r3, [r3, #4]
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d006      	beq.n	80171b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 80171a8:	4b44      	ldr	r3, [pc, #272]	; (80172bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80171aa:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80171ae:	4946      	ldr	r1, [pc, #280]	; (80172c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80171b0:	4844      	ldr	r0, [pc, #272]	; (80172c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80171b2:	f000 fda7 	bl	8017d04 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	68ba      	ldr	r2, [r7, #8]
 80171ba:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d105      	bne.n	80171ce <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	7f9b      	ldrb	r3, [r3, #30]
 80171c6:	f003 0301 	and.w	r3, r3, #1
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d059      	beq.n	8017282 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 80171ce:	6a3b      	ldr	r3, [r7, #32]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d04f      	beq.n	8017274 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	685b      	ldr	r3, [r3, #4]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d006      	beq.n	80171ea <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	685b      	ldr	r3, [r3, #4]
 80171e0:	685b      	ldr	r3, [r3, #4]
 80171e2:	889b      	ldrh	r3, [r3, #4]
 80171e4:	b29b      	uxth	r3, r3
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d002      	beq.n	80171f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80171ea:	2300      	movs	r3, #0
 80171ec:	623b      	str	r3, [r7, #32]
 80171ee:	e041      	b.n	8017274 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80171f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171f2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80171f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80171fa:	e012      	b.n	8017222 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 80171fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171fe:	685b      	ldr	r3, [r3, #4]
 8017200:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017204:	88db      	ldrh	r3, [r3, #6]
 8017206:	b29a      	uxth	r2, r3
 8017208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801720a:	889b      	ldrh	r3, [r3, #4]
 801720c:	b29b      	uxth	r3, r3
 801720e:	429a      	cmp	r2, r3
 8017210:	d002      	beq.n	8017218 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8017212:	2300      	movs	r3, #0
 8017214:	623b      	str	r3, [r7, #32]
            break;
 8017216:	e007      	b.n	8017228 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8017218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801721a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801721c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017224:	2b00      	cmp	r3, #0
 8017226:	d1e9      	bne.n	80171fc <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017228:	6a3b      	ldr	r3, [r7, #32]
 801722a:	2b00      	cmp	r3, #0
 801722c:	d022      	beq.n	8017274 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	685b      	ldr	r3, [r3, #4]
 8017232:	2b00      	cmp	r3, #0
 8017234:	d106      	bne.n	8017244 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8017236:	4b21      	ldr	r3, [pc, #132]	; (80172bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8017238:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 801723c:	4923      	ldr	r1, [pc, #140]	; (80172cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801723e:	4821      	ldr	r0, [pc, #132]	; (80172c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017240:	f000 fd60 	bl	8017d04 <iprintf>
          LWIP_ASSERT("sanity check",
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	685b      	ldr	r3, [r3, #4]
 8017248:	685b      	ldr	r3, [r3, #4]
 801724a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801724c:	429a      	cmp	r2, r3
 801724e:	d106      	bne.n	801725e <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8017250:	4b1a      	ldr	r3, [pc, #104]	; (80172bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8017252:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8017256:	491d      	ldr	r1, [pc, #116]	; (80172cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017258:	481a      	ldr	r0, [pc, #104]	; (80172c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801725a:	f000 fd53 	bl	8017d04 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801725e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	2b00      	cmp	r3, #0
 8017264:	d006      	beq.n	8017274 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8017266:	4b15      	ldr	r3, [pc, #84]	; (80172bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8017268:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 801726c:	4918      	ldr	r1, [pc, #96]	; (80172d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801726e:	4815      	ldr	r0, [pc, #84]	; (80172c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017270:	f000 fd48 	bl	8017d04 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017274:	6a3b      	ldr	r3, [r7, #32]
 8017276:	2b00      	cmp	r3, #0
 8017278:	bf14      	ite	ne
 801727a:	2301      	movne	r3, #1
 801727c:	2300      	moveq	r3, #0
 801727e:	b2db      	uxtb	r3, r3
 8017280:	e018      	b.n	80172b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017282:	2300      	movs	r3, #0
 8017284:	e016      	b.n	80172b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 8017286:	bf00      	nop
 8017288:	e004      	b.n	8017294 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 801728a:	bf00      	nop
 801728c:	e002      	b.n	8017294 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 801728e:	bf00      	nop
 8017290:	e000      	b.n	8017294 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8017292:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8017294:	68b8      	ldr	r0, [r7, #8]
 8017296:	f7f9 f883 	bl	80103a0 <pbuf_clen>
 801729a:	4603      	mov	r3, r0
 801729c:	461a      	mov	r2, r3
 801729e:	4b0d      	ldr	r3, [pc, #52]	; (80172d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80172a0:	881b      	ldrh	r3, [r3, #0]
 80172a2:	1a9b      	subs	r3, r3, r2
 80172a4:	b29a      	uxth	r2, r3
 80172a6:	4b0b      	ldr	r3, [pc, #44]	; (80172d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80172a8:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 80172aa:	68b8      	ldr	r0, [r7, #8]
 80172ac:	f7f8 ffde 	bl	801026c <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80172b0:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 80172b4:	4618      	mov	r0, r3
 80172b6:	3730      	adds	r7, #48	; 0x30
 80172b8:	46bd      	mov	sp, r7
 80172ba:	bd80      	pop	{r7, pc}
 80172bc:	0801a98c 	.word	0x0801a98c
 80172c0:	0801aa68 	.word	0x0801aa68
 80172c4:	0801a9d4 	.word	0x0801a9d4
 80172c8:	0801aa88 	.word	0x0801aa88
 80172cc:	0801aac0 	.word	0x0801aac0
 80172d0:	0801aad0 	.word	0x0801aad0
 80172d4:	2402193c 	.word	0x2402193c

080172d8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80172d8:	b580      	push	{r7, lr}
 80172da:	b08e      	sub	sp, #56	; 0x38
 80172dc:	af00      	add	r7, sp, #0
 80172de:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	685b      	ldr	r3, [r3, #4]
 80172e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80172e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172e8:	781b      	ldrb	r3, [r3, #0]
 80172ea:	f003 030f 	and.w	r3, r3, #15
 80172ee:	009b      	lsls	r3, r3, #2
 80172f0:	2b14      	cmp	r3, #20
 80172f2:	f040 8131 	bne.w	8017558 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80172f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172f8:	88db      	ldrh	r3, [r3, #6]
 80172fa:	b29b      	uxth	r3, r3
 80172fc:	4618      	mov	r0, r3
 80172fe:	f7f7 fc9d 	bl	800ec3c <lwip_htons>
 8017302:	4603      	mov	r3, r0
 8017304:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017308:	b29b      	uxth	r3, r3
 801730a:	00db      	lsls	r3, r3, #3
 801730c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017310:	885b      	ldrh	r3, [r3, #2]
 8017312:	b29b      	uxth	r3, r3
 8017314:	4618      	mov	r0, r3
 8017316:	f7f7 fc91 	bl	800ec3c <lwip_htons>
 801731a:	4603      	mov	r3, r0
 801731c:	461a      	mov	r2, r3
 801731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017320:	781b      	ldrb	r3, [r3, #0]
 8017322:	b29b      	uxth	r3, r3
 8017324:	f003 030f 	and.w	r3, r3, #15
 8017328:	b29b      	uxth	r3, r3
 801732a:	009b      	lsls	r3, r3, #2
 801732c:	b29b      	uxth	r3, r3
 801732e:	1ad3      	subs	r3, r2, r3
 8017330:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017332:	6878      	ldr	r0, [r7, #4]
 8017334:	f7f9 f834 	bl	80103a0 <pbuf_clen>
 8017338:	4603      	mov	r3, r0
 801733a:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801733c:	4b8d      	ldr	r3, [pc, #564]	; (8017574 <ip4_reass+0x29c>)
 801733e:	881b      	ldrh	r3, [r3, #0]
 8017340:	461a      	mov	r2, r3
 8017342:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017344:	4413      	add	r3, r2
 8017346:	2b0a      	cmp	r3, #10
 8017348:	dd10      	ble.n	801736c <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801734a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801734c:	4619      	mov	r1, r3
 801734e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017350:	f7ff fd8e 	bl	8016e70 <ip_reass_remove_oldest_datagram>
 8017354:	4603      	mov	r3, r0
 8017356:	2b00      	cmp	r3, #0
 8017358:	f000 8100 	beq.w	801755c <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801735c:	4b85      	ldr	r3, [pc, #532]	; (8017574 <ip4_reass+0x29c>)
 801735e:	881b      	ldrh	r3, [r3, #0]
 8017360:	461a      	mov	r2, r3
 8017362:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017364:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017366:	2b0a      	cmp	r3, #10
 8017368:	f300 80f8 	bgt.w	801755c <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801736c:	4b82      	ldr	r3, [pc, #520]	; (8017578 <ip4_reass+0x2a0>)
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	633b      	str	r3, [r7, #48]	; 0x30
 8017372:	e015      	b.n	80173a0 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017376:	695a      	ldr	r2, [r3, #20]
 8017378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801737a:	68db      	ldr	r3, [r3, #12]
 801737c:	429a      	cmp	r2, r3
 801737e:	d10c      	bne.n	801739a <ip4_reass+0xc2>
 8017380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017382:	699a      	ldr	r2, [r3, #24]
 8017384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017386:	691b      	ldr	r3, [r3, #16]
 8017388:	429a      	cmp	r2, r3
 801738a:	d106      	bne.n	801739a <ip4_reass+0xc2>
 801738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801738e:	899a      	ldrh	r2, [r3, #12]
 8017390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017392:	889b      	ldrh	r3, [r3, #4]
 8017394:	b29b      	uxth	r3, r3
 8017396:	429a      	cmp	r2, r3
 8017398:	d006      	beq.n	80173a8 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	633b      	str	r3, [r7, #48]	; 0x30
 80173a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d1e6      	bne.n	8017374 <ip4_reass+0x9c>
 80173a6:	e000      	b.n	80173aa <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80173a8:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80173aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d109      	bne.n	80173c4 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80173b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80173b2:	4619      	mov	r1, r3
 80173b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80173b6:	f7ff fdbd 	bl	8016f34 <ip_reass_enqueue_new_datagram>
 80173ba:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80173bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d11c      	bne.n	80173fc <ip4_reass+0x124>
      goto nullreturn;
 80173c2:	e0ce      	b.n	8017562 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80173c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173c6:	88db      	ldrh	r3, [r3, #6]
 80173c8:	b29b      	uxth	r3, r3
 80173ca:	4618      	mov	r0, r3
 80173cc:	f7f7 fc36 	bl	800ec3c <lwip_htons>
 80173d0:	4603      	mov	r3, r0
 80173d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d110      	bne.n	80173fc <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80173da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173dc:	89db      	ldrh	r3, [r3, #14]
 80173de:	4618      	mov	r0, r3
 80173e0:	f7f7 fc2c 	bl	800ec3c <lwip_htons>
 80173e4:	4603      	mov	r3, r0
 80173e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d006      	beq.n	80173fc <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80173ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173f0:	3308      	adds	r3, #8
 80173f2:	2214      	movs	r2, #20
 80173f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80173f6:	4618      	mov	r0, r3
 80173f8:	f000 fc71 	bl	8017cde <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80173fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173fe:	88db      	ldrh	r3, [r3, #6]
 8017400:	b29b      	uxth	r3, r3
 8017402:	f003 0320 	and.w	r3, r3, #32
 8017406:	2b00      	cmp	r3, #0
 8017408:	bf0c      	ite	eq
 801740a:	2301      	moveq	r3, #1
 801740c:	2300      	movne	r3, #0
 801740e:	b2db      	uxtb	r3, r3
 8017410:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017412:	69fb      	ldr	r3, [r7, #28]
 8017414:	2b00      	cmp	r3, #0
 8017416:	d00e      	beq.n	8017436 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8017418:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801741a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801741c:	4413      	add	r3, r2
 801741e:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017420:	8b7a      	ldrh	r2, [r7, #26]
 8017422:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017424:	429a      	cmp	r2, r3
 8017426:	f0c0 8099 	bcc.w	801755c <ip4_reass+0x284>
 801742a:	8b7b      	ldrh	r3, [r7, #26]
 801742c:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017430:	4293      	cmp	r3, r2
 8017432:	f200 8093 	bhi.w	801755c <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017436:	69fa      	ldr	r2, [r7, #28]
 8017438:	6879      	ldr	r1, [r7, #4]
 801743a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801743c:	f7ff fde2 	bl	8017004 <ip_reass_chain_frag_into_datagram_and_validate>
 8017440:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017442:	697b      	ldr	r3, [r7, #20]
 8017444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017448:	f000 808a 	beq.w	8017560 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801744c:	4b49      	ldr	r3, [pc, #292]	; (8017574 <ip4_reass+0x29c>)
 801744e:	881a      	ldrh	r2, [r3, #0]
 8017450:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017452:	4413      	add	r3, r2
 8017454:	b29a      	uxth	r2, r3
 8017456:	4b47      	ldr	r3, [pc, #284]	; (8017574 <ip4_reass+0x29c>)
 8017458:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801745a:	69fb      	ldr	r3, [r7, #28]
 801745c:	2b00      	cmp	r3, #0
 801745e:	d00d      	beq.n	801747c <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8017460:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017462:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017464:	4413      	add	r3, r2
 8017466:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801746a:	8a7a      	ldrh	r2, [r7, #18]
 801746c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017470:	7f9b      	ldrb	r3, [r3, #30]
 8017472:	f043 0301 	orr.w	r3, r3, #1
 8017476:	b2da      	uxtb	r2, r3
 8017478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801747a:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801747c:	697b      	ldr	r3, [r7, #20]
 801747e:	2b01      	cmp	r3, #1
 8017480:	d168      	bne.n	8017554 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8017482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017484:	8b9b      	ldrh	r3, [r3, #28]
 8017486:	3314      	adds	r3, #20
 8017488:	b29a      	uxth	r2, r3
 801748a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801748c:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 801748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017490:	685b      	ldr	r3, [r3, #4]
 8017492:	685b      	ldr	r3, [r3, #4]
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8017498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801749a:	685b      	ldr	r3, [r3, #4]
 801749c:	685b      	ldr	r3, [r3, #4]
 801749e:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80174a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174a2:	3308      	adds	r3, #8
 80174a4:	2214      	movs	r2, #20
 80174a6:	4619      	mov	r1, r3
 80174a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80174aa:	f000 fc18 	bl	8017cde <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80174ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174b0:	8b9b      	ldrh	r3, [r3, #28]
 80174b2:	4618      	mov	r0, r3
 80174b4:	f7f7 fbc2 	bl	800ec3c <lwip_htons>
 80174b8:	4603      	mov	r3, r0
 80174ba:	461a      	mov	r2, r3
 80174bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174be:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80174c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174c2:	2200      	movs	r2, #0
 80174c4:	719a      	strb	r2, [r3, #6]
 80174c6:	2200      	movs	r2, #0
 80174c8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80174ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174cc:	2200      	movs	r2, #0
 80174ce:	729a      	strb	r2, [r3, #10]
 80174d0:	2200      	movs	r2, #0
 80174d2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80174d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174d6:	685b      	ldr	r3, [r3, #4]
 80174d8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80174da:	e00e      	b.n	80174fa <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 80174dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174de:	685b      	ldr	r3, [r3, #4]
 80174e0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 80174e2:	f06f 0113 	mvn.w	r1, #19
 80174e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80174e8:	f7f8 fe9c 	bl	8010224 <pbuf_header>
      pbuf_cat(p, r);
 80174ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80174ee:	6878      	ldr	r0, [r7, #4]
 80174f0:	f7f8 ff96 	bl	8010420 <pbuf_cat>
      r = iprh->next_pbuf;
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80174fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d1ed      	bne.n	80174dc <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017500:	4b1d      	ldr	r3, [pc, #116]	; (8017578 <ip4_reass+0x2a0>)
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017506:	429a      	cmp	r2, r3
 8017508:	d102      	bne.n	8017510 <ip4_reass+0x238>
      ipr_prev = NULL;
 801750a:	2300      	movs	r3, #0
 801750c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801750e:	e010      	b.n	8017532 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017510:	4b19      	ldr	r3, [pc, #100]	; (8017578 <ip4_reass+0x2a0>)
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017516:	e007      	b.n	8017528 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8017518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801751e:	429a      	cmp	r2, r3
 8017520:	d006      	beq.n	8017530 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801752a:	2b00      	cmp	r3, #0
 801752c:	d1f4      	bne.n	8017518 <ip4_reass+0x240>
 801752e:	e000      	b.n	8017532 <ip4_reass+0x25a>
          break;
 8017530:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017536:	f7ff fd37 	bl	8016fa8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801753a:	6878      	ldr	r0, [r7, #4]
 801753c:	f7f8 ff30 	bl	80103a0 <pbuf_clen>
 8017540:	4603      	mov	r3, r0
 8017542:	461a      	mov	r2, r3
 8017544:	4b0b      	ldr	r3, [pc, #44]	; (8017574 <ip4_reass+0x29c>)
 8017546:	881b      	ldrh	r3, [r3, #0]
 8017548:	1a9b      	subs	r3, r3, r2
 801754a:	b29a      	uxth	r2, r3
 801754c:	4b09      	ldr	r3, [pc, #36]	; (8017574 <ip4_reass+0x29c>)
 801754e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	e00a      	b.n	801756a <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017554:	2300      	movs	r3, #0
 8017556:	e008      	b.n	801756a <ip4_reass+0x292>
    goto nullreturn;
 8017558:	bf00      	nop
 801755a:	e002      	b.n	8017562 <ip4_reass+0x28a>

nullreturn:
 801755c:	bf00      	nop
 801755e:	e000      	b.n	8017562 <ip4_reass+0x28a>
    goto nullreturn;
 8017560:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017562:	6878      	ldr	r0, [r7, #4]
 8017564:	f7f8 fe82 	bl	801026c <pbuf_free>
  return NULL;
 8017568:	2300      	movs	r3, #0
}
 801756a:	4618      	mov	r0, r3
 801756c:	3738      	adds	r7, #56	; 0x38
 801756e:	46bd      	mov	sp, r7
 8017570:	bd80      	pop	{r7, pc}
 8017572:	bf00      	nop
 8017574:	2402193c 	.word	0x2402193c
 8017578:	24021938 	.word	0x24021938

0801757c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 801757c:	b580      	push	{r7, lr}
 801757e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8017580:	2005      	movs	r0, #5
 8017582:	f7f8 f821 	bl	800f5c8 <memp_malloc>
 8017586:	4603      	mov	r3, r0
}
 8017588:	4618      	mov	r0, r3
 801758a:	bd80      	pop	{r7, pc}

0801758c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 801758c:	b580      	push	{r7, lr}
 801758e:	b082      	sub	sp, #8
 8017590:	af00      	add	r7, sp, #0
 8017592:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	2b00      	cmp	r3, #0
 8017598:	d106      	bne.n	80175a8 <ip_frag_free_pbuf_custom_ref+0x1c>
 801759a:	4b07      	ldr	r3, [pc, #28]	; (80175b8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801759c:	f240 22ae 	movw	r2, #686	; 0x2ae
 80175a0:	4906      	ldr	r1, [pc, #24]	; (80175bc <ip_frag_free_pbuf_custom_ref+0x30>)
 80175a2:	4807      	ldr	r0, [pc, #28]	; (80175c0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80175a4:	f000 fbae 	bl	8017d04 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80175a8:	6879      	ldr	r1, [r7, #4]
 80175aa:	2005      	movs	r0, #5
 80175ac:	f7f8 f882 	bl	800f6b4 <memp_free>
}
 80175b0:	bf00      	nop
 80175b2:	3708      	adds	r7, #8
 80175b4:	46bd      	mov	sp, r7
 80175b6:	bd80      	pop	{r7, pc}
 80175b8:	0801a98c 	.word	0x0801a98c
 80175bc:	0801aaf4 	.word	0x0801aaf4
 80175c0:	0801a9d4 	.word	0x0801a9d4

080175c4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80175c4:	b580      	push	{r7, lr}
 80175c6:	b084      	sub	sp, #16
 80175c8:	af00      	add	r7, sp, #0
 80175ca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d106      	bne.n	80175e4 <ipfrag_free_pbuf_custom+0x20>
 80175d6:	4b11      	ldr	r3, [pc, #68]	; (801761c <ipfrag_free_pbuf_custom+0x58>)
 80175d8:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80175dc:	4910      	ldr	r1, [pc, #64]	; (8017620 <ipfrag_free_pbuf_custom+0x5c>)
 80175de:	4811      	ldr	r0, [pc, #68]	; (8017624 <ipfrag_free_pbuf_custom+0x60>)
 80175e0:	f000 fb90 	bl	8017d04 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 80175e4:	68fa      	ldr	r2, [r7, #12]
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	429a      	cmp	r2, r3
 80175ea:	d006      	beq.n	80175fa <ipfrag_free_pbuf_custom+0x36>
 80175ec:	4b0b      	ldr	r3, [pc, #44]	; (801761c <ipfrag_free_pbuf_custom+0x58>)
 80175ee:	f240 22b9 	movw	r2, #697	; 0x2b9
 80175f2:	490d      	ldr	r1, [pc, #52]	; (8017628 <ipfrag_free_pbuf_custom+0x64>)
 80175f4:	480b      	ldr	r0, [pc, #44]	; (8017624 <ipfrag_free_pbuf_custom+0x60>)
 80175f6:	f000 fb85 	bl	8017d04 <iprintf>
  if (pcr->original != NULL) {
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	695b      	ldr	r3, [r3, #20]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d004      	beq.n	801760c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	695b      	ldr	r3, [r3, #20]
 8017606:	4618      	mov	r0, r3
 8017608:	f7f8 fe30 	bl	801026c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801760c:	68f8      	ldr	r0, [r7, #12]
 801760e:	f7ff ffbd 	bl	801758c <ip_frag_free_pbuf_custom_ref>
}
 8017612:	bf00      	nop
 8017614:	3710      	adds	r7, #16
 8017616:	46bd      	mov	sp, r7
 8017618:	bd80      	pop	{r7, pc}
 801761a:	bf00      	nop
 801761c:	0801a98c 	.word	0x0801a98c
 8017620:	0801ab00 	.word	0x0801ab00
 8017624:	0801a9d4 	.word	0x0801a9d4
 8017628:	0801ab0c 	.word	0x0801ab0c

0801762c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801762c:	b580      	push	{r7, lr}
 801762e:	b092      	sub	sp, #72	; 0x48
 8017630:	af02      	add	r7, sp, #8
 8017632:	60f8      	str	r0, [r7, #12]
 8017634:	60b9      	str	r1, [r7, #8]
 8017636:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017638:	2300      	movs	r3, #0
 801763a:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801763c:	68bb      	ldr	r3, [r7, #8]
 801763e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017640:	3b14      	subs	r3, #20
 8017642:	2b00      	cmp	r3, #0
 8017644:	da00      	bge.n	8017648 <ip4_frag+0x1c>
 8017646:	3307      	adds	r3, #7
 8017648:	10db      	asrs	r3, r3, #3
 801764a:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801764c:	2314      	movs	r3, #20
 801764e:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	685b      	ldr	r3, [r3, #4]
 8017654:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8017656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017658:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801765a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801765c:	781b      	ldrb	r3, [r3, #0]
 801765e:	f003 030f 	and.w	r3, r3, #15
 8017662:	009b      	lsls	r3, r3, #2
 8017664:	2b14      	cmp	r3, #20
 8017666:	d009      	beq.n	801767c <ip4_frag+0x50>
 8017668:	4b79      	ldr	r3, [pc, #484]	; (8017850 <ip4_frag+0x224>)
 801766a:	f240 22e1 	movw	r2, #737	; 0x2e1
 801766e:	4979      	ldr	r1, [pc, #484]	; (8017854 <ip4_frag+0x228>)
 8017670:	4879      	ldr	r0, [pc, #484]	; (8017858 <ip4_frag+0x22c>)
 8017672:	f000 fb47 	bl	8017d04 <iprintf>
 8017676:	f06f 0305 	mvn.w	r3, #5
 801767a:	e0e5      	b.n	8017848 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801767e:	88db      	ldrh	r3, [r3, #6]
 8017680:	b29b      	uxth	r3, r3
 8017682:	4618      	mov	r0, r3
 8017684:	f7f7 fada 	bl	800ec3c <lwip_htons>
 8017688:	4603      	mov	r3, r0
 801768a:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 801768c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801768e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017692:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8017694:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801769a:	2b00      	cmp	r3, #0
 801769c:	d009      	beq.n	80176b2 <ip4_frag+0x86>
 801769e:	4b6c      	ldr	r3, [pc, #432]	; (8017850 <ip4_frag+0x224>)
 80176a0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80176a4:	496d      	ldr	r1, [pc, #436]	; (801785c <ip4_frag+0x230>)
 80176a6:	486c      	ldr	r0, [pc, #432]	; (8017858 <ip4_frag+0x22c>)
 80176a8:	f000 fb2c 	bl	8017d04 <iprintf>
 80176ac:	f06f 0305 	mvn.w	r3, #5
 80176b0:	e0ca      	b.n	8017848 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	891b      	ldrh	r3, [r3, #8]
 80176b6:	3b14      	subs	r3, #20
 80176b8:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 80176ba:	e0bc      	b.n	8017836 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 80176bc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80176be:	00da      	lsls	r2, r3, #3
 80176c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80176c2:	4293      	cmp	r3, r2
 80176c4:	bfa8      	it	ge
 80176c6:	4613      	movge	r3, r2
 80176c8:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80176ca:	2200      	movs	r2, #0
 80176cc:	2114      	movs	r1, #20
 80176ce:	2002      	movs	r0, #2
 80176d0:	f7f8 fa5a 	bl	800fb88 <pbuf_alloc>
 80176d4:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 80176d6:	6a3b      	ldr	r3, [r7, #32]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	f000 80b2 	beq.w	8017842 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	895b      	ldrh	r3, [r3, #10]
 80176e2:	2b13      	cmp	r3, #19
 80176e4:	d806      	bhi.n	80176f4 <ip4_frag+0xc8>
 80176e6:	4b5a      	ldr	r3, [pc, #360]	; (8017850 <ip4_frag+0x224>)
 80176e8:	f240 3209 	movw	r2, #777	; 0x309
 80176ec:	495c      	ldr	r1, [pc, #368]	; (8017860 <ip4_frag+0x234>)
 80176ee:	485a      	ldr	r0, [pc, #360]	; (8017858 <ip4_frag+0x22c>)
 80176f0:	f000 fb08 	bl	8017d04 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80176f4:	6a3b      	ldr	r3, [r7, #32]
 80176f6:	685b      	ldr	r3, [r3, #4]
 80176f8:	2214      	movs	r2, #20
 80176fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80176fc:	4618      	mov	r0, r3
 80176fe:	f000 faee 	bl	8017cde <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017702:	6a3b      	ldr	r3, [r7, #32]
 8017704:	685b      	ldr	r3, [r3, #4]
 8017706:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8017708:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801770a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 801770c:	e04f      	b.n	80177ae <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	895a      	ldrh	r2, [r3, #10]
 8017712:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017714:	1ad3      	subs	r3, r2, r3
 8017716:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017718:	8b7a      	ldrh	r2, [r7, #26]
 801771a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801771c:	4293      	cmp	r3, r2
 801771e:	bf28      	it	cs
 8017720:	4613      	movcs	r3, r2
 8017722:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017724:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017726:	2b00      	cmp	r3, #0
 8017728:	d105      	bne.n	8017736 <ip4_frag+0x10a>
        poff = 0;
 801772a:	2300      	movs	r3, #0
 801772c:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	60fb      	str	r3, [r7, #12]
        continue;
 8017734:	e03b      	b.n	80177ae <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017736:	f7ff ff21 	bl	801757c <ip_frag_alloc_pbuf_custom_ref>
 801773a:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 801773c:	697b      	ldr	r3, [r7, #20]
 801773e:	2b00      	cmp	r3, #0
 8017740:	d103      	bne.n	801774a <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8017742:	6a38      	ldr	r0, [r7, #32]
 8017744:	f7f8 fd92 	bl	801026c <pbuf_free>
        goto memerr;
 8017748:	e07c      	b.n	8017844 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801774a:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017750:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017752:	4413      	add	r3, r2
 8017754:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8017756:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017758:	9201      	str	r2, [sp, #4]
 801775a:	9300      	str	r3, [sp, #0]
 801775c:	4603      	mov	r3, r0
 801775e:	2202      	movs	r2, #2
 8017760:	2004      	movs	r0, #4
 8017762:	f7f8 fba5 	bl	800feb0 <pbuf_alloced_custom>
 8017766:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8017768:	693b      	ldr	r3, [r7, #16]
 801776a:	2b00      	cmp	r3, #0
 801776c:	d106      	bne.n	801777c <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 801776e:	6978      	ldr	r0, [r7, #20]
 8017770:	f7ff ff0c 	bl	801758c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017774:	6a38      	ldr	r0, [r7, #32]
 8017776:	f7f8 fd79 	bl	801026c <pbuf_free>
        goto memerr;
 801777a:	e063      	b.n	8017844 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 801777c:	68f8      	ldr	r0, [r7, #12]
 801777e:	f7f8 fe27 	bl	80103d0 <pbuf_ref>
      pcr->original = p;
 8017782:	697b      	ldr	r3, [r7, #20]
 8017784:	68fa      	ldr	r2, [r7, #12]
 8017786:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017788:	697b      	ldr	r3, [r7, #20]
 801778a:	4a36      	ldr	r2, [pc, #216]	; (8017864 <ip4_frag+0x238>)
 801778c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801778e:	6939      	ldr	r1, [r7, #16]
 8017790:	6a38      	ldr	r0, [r7, #32]
 8017792:	f7f8 fe45 	bl	8010420 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8017796:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8017798:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801779a:	1ad3      	subs	r3, r2, r3
 801779c:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 801779e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d004      	beq.n	80177ae <ip4_frag+0x182>
        poff = 0;
 80177a4:	2300      	movs	r3, #0
 80177a6:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80177a8:	68fb      	ldr	r3, [r7, #12]
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80177ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d1ac      	bne.n	801770e <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 80177b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80177b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80177b8:	4413      	add	r3, r2
 80177ba:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80177bc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80177be:	68bb      	ldr	r3, [r7, #8]
 80177c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80177c2:	3b14      	subs	r3, #20
 80177c4:	429a      	cmp	r2, r3
 80177c6:	bfd4      	ite	le
 80177c8:	2301      	movle	r3, #1
 80177ca:	2300      	movgt	r3, #0
 80177cc:	b2db      	uxtb	r3, r3
 80177ce:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80177d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80177d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80177d6:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 80177d8:	69fb      	ldr	r3, [r7, #28]
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d103      	bne.n	80177e6 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 80177de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80177e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80177e4:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80177e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80177e8:	4618      	mov	r0, r3
 80177ea:	f7f7 fa27 	bl	800ec3c <lwip_htons>
 80177ee:	4603      	mov	r3, r0
 80177f0:	461a      	mov	r2, r3
 80177f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177f4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80177f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80177f8:	3314      	adds	r3, #20
 80177fa:	b29b      	uxth	r3, r3
 80177fc:	4618      	mov	r0, r3
 80177fe:	f7f7 fa1d 	bl	800ec3c <lwip_htons>
 8017802:	4603      	mov	r3, r0
 8017804:	461a      	mov	r2, r3
 8017806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017808:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801780c:	2200      	movs	r2, #0
 801780e:	729a      	strb	r2, [r3, #10]
 8017810:	2200      	movs	r2, #0
 8017812:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017814:	68bb      	ldr	r3, [r7, #8]
 8017816:	695b      	ldr	r3, [r3, #20]
 8017818:	687a      	ldr	r2, [r7, #4]
 801781a:	6a39      	ldr	r1, [r7, #32]
 801781c:	68b8      	ldr	r0, [r7, #8]
 801781e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017820:	6a38      	ldr	r0, [r7, #32]
 8017822:	f7f8 fd23 	bl	801026c <pbuf_free>
    left -= fragsize;
 8017826:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017828:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801782a:	1ad3      	subs	r3, r2, r3
 801782c:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 801782e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8017830:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8017832:	4413      	add	r3, r2
 8017834:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8017836:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017838:	2b00      	cmp	r3, #0
 801783a:	f47f af3f 	bne.w	80176bc <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801783e:	2300      	movs	r3, #0
 8017840:	e002      	b.n	8017848 <ip4_frag+0x21c>
      goto memerr;
 8017842:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017844:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017848:	4618      	mov	r0, r3
 801784a:	3740      	adds	r7, #64	; 0x40
 801784c:	46bd      	mov	sp, r7
 801784e:	bd80      	pop	{r7, pc}
 8017850:	0801a98c 	.word	0x0801a98c
 8017854:	0801ab18 	.word	0x0801ab18
 8017858:	0801a9d4 	.word	0x0801a9d4
 801785c:	0801ab40 	.word	0x0801ab40
 8017860:	0801ab5c 	.word	0x0801ab5c
 8017864:	080175c5 	.word	0x080175c5

08017868 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017868:	b580      	push	{r7, lr}
 801786a:	b086      	sub	sp, #24
 801786c:	af00      	add	r7, sp, #0
 801786e:	6078      	str	r0, [r7, #4]
 8017870:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8017872:	230e      	movs	r3, #14
 8017874:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	895b      	ldrh	r3, [r3, #10]
 801787a:	2b0e      	cmp	r3, #14
 801787c:	d977      	bls.n	801796e <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	685b      	ldr	r3, [r3, #4]
 8017882:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017884:	693b      	ldr	r3, [r7, #16]
 8017886:	7b1a      	ldrb	r2, [r3, #12]
 8017888:	7b5b      	ldrb	r3, [r3, #13]
 801788a:	021b      	lsls	r3, r3, #8
 801788c:	4313      	orrs	r3, r2
 801788e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017890:	693b      	ldr	r3, [r7, #16]
 8017892:	781b      	ldrb	r3, [r3, #0]
 8017894:	f003 0301 	and.w	r3, r3, #1
 8017898:	2b00      	cmp	r3, #0
 801789a:	d023      	beq.n	80178e4 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801789c:	693b      	ldr	r3, [r7, #16]
 801789e:	781b      	ldrb	r3, [r3, #0]
 80178a0:	2b01      	cmp	r3, #1
 80178a2:	d10f      	bne.n	80178c4 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80178a4:	693b      	ldr	r3, [r7, #16]
 80178a6:	785b      	ldrb	r3, [r3, #1]
 80178a8:	2b00      	cmp	r3, #0
 80178aa:	d11b      	bne.n	80178e4 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80178ac:	693b      	ldr	r3, [r7, #16]
 80178ae:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80178b0:	2b5e      	cmp	r3, #94	; 0x5e
 80178b2:	d117      	bne.n	80178e4 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	7b5b      	ldrb	r3, [r3, #13]
 80178b8:	f043 0310 	orr.w	r3, r3, #16
 80178bc:	b2da      	uxtb	r2, r3
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	735a      	strb	r2, [r3, #13]
 80178c2:	e00f      	b.n	80178e4 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80178c4:	693b      	ldr	r3, [r7, #16]
 80178c6:	2206      	movs	r2, #6
 80178c8:	4930      	ldr	r1, [pc, #192]	; (801798c <ethernet_input+0x124>)
 80178ca:	4618      	mov	r0, r3
 80178cc:	f000 f9f8 	bl	8017cc0 <memcmp>
 80178d0:	4603      	mov	r3, r0
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d106      	bne.n	80178e4 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	7b5b      	ldrb	r3, [r3, #13]
 80178da:	f043 0308 	orr.w	r3, r3, #8
 80178de:	b2da      	uxtb	r2, r3
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80178e4:	89fb      	ldrh	r3, [r7, #14]
 80178e6:	2b08      	cmp	r3, #8
 80178e8:	d003      	beq.n	80178f2 <ethernet_input+0x8a>
 80178ea:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80178ee:	d01e      	beq.n	801792e <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80178f0:	e044      	b.n	801797c <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80178f2:	683b      	ldr	r3, [r7, #0]
 80178f4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80178f8:	f003 0308 	and.w	r3, r3, #8
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d038      	beq.n	8017972 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	895b      	ldrh	r3, [r3, #10]
 8017904:	461a      	mov	r2, r3
 8017906:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801790a:	429a      	cmp	r2, r3
 801790c:	db33      	blt.n	8017976 <ethernet_input+0x10e>
 801790e:	8afb      	ldrh	r3, [r7, #22]
 8017910:	425b      	negs	r3, r3
 8017912:	b29b      	uxth	r3, r3
 8017914:	b21b      	sxth	r3, r3
 8017916:	4619      	mov	r1, r3
 8017918:	6878      	ldr	r0, [r7, #4]
 801791a:	f7f8 fc83 	bl	8010224 <pbuf_header>
 801791e:	4603      	mov	r3, r0
 8017920:	2b00      	cmp	r3, #0
 8017922:	d128      	bne.n	8017976 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8017924:	6839      	ldr	r1, [r7, #0]
 8017926:	6878      	ldr	r0, [r7, #4]
 8017928:	f7fe ff80 	bl	801682c <ip4_input>
      break;
 801792c:	e01d      	b.n	801796a <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801792e:	683b      	ldr	r3, [r7, #0]
 8017930:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8017934:	f003 0308 	and.w	r3, r3, #8
 8017938:	2b00      	cmp	r3, #0
 801793a:	d01e      	beq.n	801797a <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	895b      	ldrh	r3, [r3, #10]
 8017940:	461a      	mov	r2, r3
 8017942:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017946:	429a      	cmp	r2, r3
 8017948:	db15      	blt.n	8017976 <ethernet_input+0x10e>
 801794a:	8afb      	ldrh	r3, [r7, #22]
 801794c:	425b      	negs	r3, r3
 801794e:	b29b      	uxth	r3, r3
 8017950:	b21b      	sxth	r3, r3
 8017952:	4619      	mov	r1, r3
 8017954:	6878      	ldr	r0, [r7, #4]
 8017956:	f7f8 fc65 	bl	8010224 <pbuf_header>
 801795a:	4603      	mov	r3, r0
 801795c:	2b00      	cmp	r3, #0
 801795e:	d10a      	bne.n	8017976 <ethernet_input+0x10e>
        etharp_input(p, netif);
 8017960:	6839      	ldr	r1, [r7, #0]
 8017962:	6878      	ldr	r0, [r7, #4]
 8017964:	f7fe f8ca 	bl	8015afc <etharp_input>
      break;
 8017968:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801796a:	2300      	movs	r3, #0
 801796c:	e00a      	b.n	8017984 <ethernet_input+0x11c>
    goto free_and_return;
 801796e:	bf00      	nop
 8017970:	e004      	b.n	801797c <ethernet_input+0x114>
        goto free_and_return;
 8017972:	bf00      	nop
 8017974:	e002      	b.n	801797c <ethernet_input+0x114>

free_and_return:
 8017976:	bf00      	nop
 8017978:	e000      	b.n	801797c <ethernet_input+0x114>
        goto free_and_return;
 801797a:	bf00      	nop
  pbuf_free(p);
 801797c:	6878      	ldr	r0, [r7, #4]
 801797e:	f7f8 fc75 	bl	801026c <pbuf_free>
  return ERR_OK;
 8017982:	2300      	movs	r3, #0
}
 8017984:	4618      	mov	r0, r3
 8017986:	3718      	adds	r7, #24
 8017988:	46bd      	mov	sp, r7
 801798a:	bd80      	pop	{r7, pc}
 801798c:	0801ad50 	.word	0x0801ad50

08017990 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8017990:	b580      	push	{r7, lr}
 8017992:	b086      	sub	sp, #24
 8017994:	af00      	add	r7, sp, #0
 8017996:	60f8      	str	r0, [r7, #12]
 8017998:	60b9      	str	r1, [r7, #8]
 801799a:	607a      	str	r2, [r7, #4]
 801799c:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801799e:	8c3b      	ldrh	r3, [r7, #32]
 80179a0:	4618      	mov	r0, r3
 80179a2:	f7f7 f94b 	bl	800ec3c <lwip_htons>
 80179a6:	4603      	mov	r3, r0
 80179a8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80179aa:	210e      	movs	r1, #14
 80179ac:	68b8      	ldr	r0, [r7, #8]
 80179ae:	f7f8 fc39 	bl	8010224 <pbuf_header>
 80179b2:	4603      	mov	r3, r0
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d125      	bne.n	8017a04 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 80179b8:	68bb      	ldr	r3, [r7, #8]
 80179ba:	685b      	ldr	r3, [r3, #4]
 80179bc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80179be:	693b      	ldr	r3, [r7, #16]
 80179c0:	8afa      	ldrh	r2, [r7, #22]
 80179c2:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 80179c4:	693b      	ldr	r3, [r7, #16]
 80179c6:	2206      	movs	r2, #6
 80179c8:	6839      	ldr	r1, [r7, #0]
 80179ca:	4618      	mov	r0, r3
 80179cc:	f000 f987 	bl	8017cde <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 80179d0:	693b      	ldr	r3, [r7, #16]
 80179d2:	3306      	adds	r3, #6
 80179d4:	2206      	movs	r2, #6
 80179d6:	6879      	ldr	r1, [r7, #4]
 80179d8:	4618      	mov	r0, r3
 80179da:	f000 f980 	bl	8017cde <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80179e4:	2b06      	cmp	r3, #6
 80179e6:	d006      	beq.n	80179f6 <ethernet_output+0x66>
 80179e8:	4b0a      	ldr	r3, [pc, #40]	; (8017a14 <ethernet_output+0x84>)
 80179ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80179ee:	490a      	ldr	r1, [pc, #40]	; (8017a18 <ethernet_output+0x88>)
 80179f0:	480a      	ldr	r0, [pc, #40]	; (8017a1c <ethernet_output+0x8c>)
 80179f2:	f000 f987 	bl	8017d04 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80179f6:	68fb      	ldr	r3, [r7, #12]
 80179f8:	699b      	ldr	r3, [r3, #24]
 80179fa:	68b9      	ldr	r1, [r7, #8]
 80179fc:	68f8      	ldr	r0, [r7, #12]
 80179fe:	4798      	blx	r3
 8017a00:	4603      	mov	r3, r0
 8017a02:	e002      	b.n	8017a0a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017a04:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017a06:	f06f 0301 	mvn.w	r3, #1
}
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	3718      	adds	r7, #24
 8017a0e:	46bd      	mov	sp, r7
 8017a10:	bd80      	pop	{r7, pc}
 8017a12:	bf00      	nop
 8017a14:	0801ab7c 	.word	0x0801ab7c
 8017a18:	0801abb4 	.word	0x0801abb4
 8017a1c:	0801abe8 	.word	0x0801abe8

08017a20 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017a20:	b580      	push	{r7, lr}
 8017a22:	b086      	sub	sp, #24
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	6078      	str	r0, [r7, #4]
 8017a28:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017a2a:	683b      	ldr	r3, [r7, #0]
 8017a2c:	60bb      	str	r3, [r7, #8]
 8017a2e:	2304      	movs	r3, #4
 8017a30:	60fb      	str	r3, [r7, #12]
 8017a32:	2300      	movs	r3, #0
 8017a34:	613b      	str	r3, [r7, #16]
 8017a36:	2300      	movs	r3, #0
 8017a38:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017a3a:	f107 0308 	add.w	r3, r7, #8
 8017a3e:	2100      	movs	r1, #0
 8017a40:	4618      	mov	r0, r3
 8017a42:	f7f3 fe0d 	bl	800b660 <osMessageCreate>
 8017a46:	4602      	mov	r2, r0
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	681b      	ldr	r3, [r3, #0]
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d102      	bne.n	8017a5a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017a54:	f04f 33ff 	mov.w	r3, #4294967295
 8017a58:	e000      	b.n	8017a5c <sys_mbox_new+0x3c>

  return ERR_OK;
 8017a5a:	2300      	movs	r3, #0
}
 8017a5c:	4618      	mov	r0, r3
 8017a5e:	3718      	adds	r7, #24
 8017a60:	46bd      	mov	sp, r7
 8017a62:	bd80      	pop	{r7, pc}

08017a64 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8017a64:	b580      	push	{r7, lr}
 8017a66:	b082      	sub	sp, #8
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	6078      	str	r0, [r7, #4]
 8017a6c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8017a6e:	bf00      	nop
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	6839      	ldr	r1, [r7, #0]
 8017a76:	f04f 32ff 	mov.w	r2, #4294967295
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	f7f3 fe1a 	bl	800b6b4 <osMessagePut>
 8017a80:	4603      	mov	r3, r0
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d1f4      	bne.n	8017a70 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 8017a86:	bf00      	nop
 8017a88:	3708      	adds	r7, #8
 8017a8a:	46bd      	mov	sp, r7
 8017a8c:	bd80      	pop	{r7, pc}

08017a8e <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017a8e:	b580      	push	{r7, lr}
 8017a90:	b084      	sub	sp, #16
 8017a92:	af00      	add	r7, sp, #0
 8017a94:	6078      	str	r0, [r7, #4]
 8017a96:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	6839      	ldr	r1, [r7, #0]
 8017a9e:	2200      	movs	r2, #0
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	f7f3 fe07 	bl	800b6b4 <osMessagePut>
 8017aa6:	4603      	mov	r3, r0
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d102      	bne.n	8017ab2 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017aac:	2300      	movs	r3, #0
 8017aae:	73fb      	strb	r3, [r7, #15]
 8017ab0:	e001      	b.n	8017ab6 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017ab2:	23ff      	movs	r3, #255	; 0xff
 8017ab4:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017aba:	4618      	mov	r0, r3
 8017abc:	3710      	adds	r7, #16
 8017abe:	46bd      	mov	sp, r7
 8017ac0:	bd80      	pop	{r7, pc}

08017ac2 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017ac2:	b580      	push	{r7, lr}
 8017ac4:	b08c      	sub	sp, #48	; 0x30
 8017ac6:	af00      	add	r7, sp, #0
 8017ac8:	61f8      	str	r0, [r7, #28]
 8017aca:	61b9      	str	r1, [r7, #24]
 8017acc:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017ace:	f7f3 fbea 	bl	800b2a6 <osKernelSysTick>
 8017ad2:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017ad4:	697b      	ldr	r3, [r7, #20]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d017      	beq.n	8017b0a <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017ada:	69fb      	ldr	r3, [r7, #28]
 8017adc:	6819      	ldr	r1, [r3, #0]
 8017ade:	f107 0320 	add.w	r3, r7, #32
 8017ae2:	697a      	ldr	r2, [r7, #20]
 8017ae4:	4618      	mov	r0, r3
 8017ae6:	f7f3 fe25 	bl	800b734 <osMessageGet>

    if(event.status == osEventMessage)
 8017aea:	6a3b      	ldr	r3, [r7, #32]
 8017aec:	2b10      	cmp	r3, #16
 8017aee:	d109      	bne.n	8017b04 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017af2:	461a      	mov	r2, r3
 8017af4:	69bb      	ldr	r3, [r7, #24]
 8017af6:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017af8:	f7f3 fbd5 	bl	800b2a6 <osKernelSysTick>
 8017afc:	4602      	mov	r2, r0
 8017afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b00:	1ad3      	subs	r3, r2, r3
 8017b02:	e019      	b.n	8017b38 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017b04:	f04f 33ff 	mov.w	r3, #4294967295
 8017b08:	e016      	b.n	8017b38 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8017b0a:	69fb      	ldr	r3, [r7, #28]
 8017b0c:	6819      	ldr	r1, [r3, #0]
 8017b0e:	463b      	mov	r3, r7
 8017b10:	f04f 32ff 	mov.w	r2, #4294967295
 8017b14:	4618      	mov	r0, r3
 8017b16:	f7f3 fe0d 	bl	800b734 <osMessageGet>
 8017b1a:	f107 0320 	add.w	r3, r7, #32
 8017b1e:	463a      	mov	r2, r7
 8017b20:	ca07      	ldmia	r2, {r0, r1, r2}
 8017b22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b28:	461a      	mov	r2, r3
 8017b2a:	69bb      	ldr	r3, [r7, #24]
 8017b2c:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017b2e:	f7f3 fbba 	bl	800b2a6 <osKernelSysTick>
 8017b32:	4602      	mov	r2, r0
 8017b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b36:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017b38:	4618      	mov	r0, r3
 8017b3a:	3730      	adds	r7, #48	; 0x30
 8017b3c:	46bd      	mov	sp, r7
 8017b3e:	bd80      	pop	{r7, pc}

08017b40 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017b40:	b480      	push	{r7}
 8017b42:	b083      	sub	sp, #12
 8017b44:	af00      	add	r7, sp, #0
 8017b46:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d101      	bne.n	8017b54 <sys_mbox_valid+0x14>
    return 0;
 8017b50:	2300      	movs	r3, #0
 8017b52:	e000      	b.n	8017b56 <sys_mbox_valid+0x16>
  else
    return 1;
 8017b54:	2301      	movs	r3, #1
}
 8017b56:	4618      	mov	r0, r3
 8017b58:	370c      	adds	r7, #12
 8017b5a:	46bd      	mov	sp, r7
 8017b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b60:	4770      	bx	lr
	...

08017b64 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017b64:	b580      	push	{r7, lr}
 8017b66:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017b68:	4803      	ldr	r0, [pc, #12]	; (8017b78 <sys_init+0x14>)
 8017b6a:	f7f3 fc18 	bl	800b39e <osMutexCreate>
 8017b6e:	4602      	mov	r2, r0
 8017b70:	4b02      	ldr	r3, [pc, #8]	; (8017b7c <sys_init+0x18>)
 8017b72:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017b74:	bf00      	nop
 8017b76:	bd80      	pop	{r7, pc}
 8017b78:	0801ad60 	.word	0x0801ad60
 8017b7c:	24024e6c 	.word	0x24024e6c

08017b80 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b084      	sub	sp, #16
 8017b84:	af00      	add	r7, sp, #0
 8017b86:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8017b88:	2300      	movs	r3, #0
 8017b8a:	60bb      	str	r3, [r7, #8]
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017b90:	f107 0308 	add.w	r3, r7, #8
 8017b94:	4618      	mov	r0, r3
 8017b96:	f7f3 fc02 	bl	800b39e <osMutexCreate>
 8017b9a:	4602      	mov	r2, r0
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d102      	bne.n	8017bae <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8017bac:	e000      	b.n	8017bb0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017bae:	2300      	movs	r3, #0
}
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	3710      	adds	r7, #16
 8017bb4:	46bd      	mov	sp, r7
 8017bb6:	bd80      	pop	{r7, pc}

08017bb8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b082      	sub	sp, #8
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	681b      	ldr	r3, [r3, #0]
 8017bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8017bc8:	4618      	mov	r0, r3
 8017bca:	f7f3 fc01 	bl	800b3d0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8017bce:	bf00      	nop
 8017bd0:	3708      	adds	r7, #8
 8017bd2:	46bd      	mov	sp, r7
 8017bd4:	bd80      	pop	{r7, pc}

08017bd6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017bd6:	b580      	push	{r7, lr}
 8017bd8:	b082      	sub	sp, #8
 8017bda:	af00      	add	r7, sp, #0
 8017bdc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	4618      	mov	r0, r3
 8017be4:	f7f3 fc42 	bl	800b46c <osMutexRelease>
}
 8017be8:	bf00      	nop
 8017bea:	3708      	adds	r7, #8
 8017bec:	46bd      	mov	sp, r7
 8017bee:	bd80      	pop	{r7, pc}

08017bf0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017bf0:	b580      	push	{r7, lr}
 8017bf2:	b08c      	sub	sp, #48	; 0x30
 8017bf4:	af00      	add	r7, sp, #0
 8017bf6:	60f8      	str	r0, [r7, #12]
 8017bf8:	60b9      	str	r1, [r7, #8]
 8017bfa:	607a      	str	r2, [r7, #4]
 8017bfc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8017bfe:	f107 0314 	add.w	r3, r7, #20
 8017c02:	2200      	movs	r2, #0
 8017c04:	601a      	str	r2, [r3, #0]
 8017c06:	605a      	str	r2, [r3, #4]
 8017c08:	609a      	str	r2, [r3, #8]
 8017c0a:	60da      	str	r2, [r3, #12]
 8017c0c:	611a      	str	r2, [r3, #16]
 8017c0e:	615a      	str	r2, [r3, #20]
 8017c10:	619a      	str	r2, [r3, #24]
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	617b      	str	r3, [r7, #20]
 8017c16:	68bb      	ldr	r3, [r7, #8]
 8017c18:	61bb      	str	r3, [r7, #24]
 8017c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c1c:	b21b      	sxth	r3, r3
 8017c1e:	83bb      	strh	r3, [r7, #28]
 8017c20:	683b      	ldr	r3, [r7, #0]
 8017c22:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017c24:	f107 0314 	add.w	r3, r7, #20
 8017c28:	6879      	ldr	r1, [r7, #4]
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	f7f3 fb4b 	bl	800b2c6 <osThreadCreate>
 8017c30:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8017c32:	4618      	mov	r0, r3
 8017c34:	3730      	adds	r7, #48	; 0x30
 8017c36:	46bd      	mov	sp, r7
 8017c38:	bd80      	pop	{r7, pc}
	...

08017c3c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017c3c:	b580      	push	{r7, lr}
 8017c3e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8017c40:	4b04      	ldr	r3, [pc, #16]	; (8017c54 <sys_arch_protect+0x18>)
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	f04f 31ff 	mov.w	r1, #4294967295
 8017c48:	4618      	mov	r0, r3
 8017c4a:	f7f3 fbc1 	bl	800b3d0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8017c4e:	2301      	movs	r3, #1
}
 8017c50:	4618      	mov	r0, r3
 8017c52:	bd80      	pop	{r7, pc}
 8017c54:	24024e6c 	.word	0x24024e6c

08017c58 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b082      	sub	sp, #8
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017c60:	4b04      	ldr	r3, [pc, #16]	; (8017c74 <sys_arch_unprotect+0x1c>)
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	4618      	mov	r0, r3
 8017c66:	f7f3 fc01 	bl	800b46c <osMutexRelease>
}
 8017c6a:	bf00      	nop
 8017c6c:	3708      	adds	r7, #8
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	bd80      	pop	{r7, pc}
 8017c72:	bf00      	nop
 8017c74:	24024e6c 	.word	0x24024e6c

08017c78 <__libc_init_array>:
 8017c78:	b570      	push	{r4, r5, r6, lr}
 8017c7a:	4e0d      	ldr	r6, [pc, #52]	; (8017cb0 <__libc_init_array+0x38>)
 8017c7c:	4c0d      	ldr	r4, [pc, #52]	; (8017cb4 <__libc_init_array+0x3c>)
 8017c7e:	1ba4      	subs	r4, r4, r6
 8017c80:	10a4      	asrs	r4, r4, #2
 8017c82:	2500      	movs	r5, #0
 8017c84:	42a5      	cmp	r5, r4
 8017c86:	d109      	bne.n	8017c9c <__libc_init_array+0x24>
 8017c88:	4e0b      	ldr	r6, [pc, #44]	; (8017cb8 <__libc_init_array+0x40>)
 8017c8a:	4c0c      	ldr	r4, [pc, #48]	; (8017cbc <__libc_init_array+0x44>)
 8017c8c:	f000 ff1e 	bl	8018acc <_init>
 8017c90:	1ba4      	subs	r4, r4, r6
 8017c92:	10a4      	asrs	r4, r4, #2
 8017c94:	2500      	movs	r5, #0
 8017c96:	42a5      	cmp	r5, r4
 8017c98:	d105      	bne.n	8017ca6 <__libc_init_array+0x2e>
 8017c9a:	bd70      	pop	{r4, r5, r6, pc}
 8017c9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017ca0:	4798      	blx	r3
 8017ca2:	3501      	adds	r5, #1
 8017ca4:	e7ee      	b.n	8017c84 <__libc_init_array+0xc>
 8017ca6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017caa:	4798      	blx	r3
 8017cac:	3501      	adds	r5, #1
 8017cae:	e7f2      	b.n	8017c96 <__libc_init_array+0x1e>
 8017cb0:	0801ae08 	.word	0x0801ae08
 8017cb4:	0801ae08 	.word	0x0801ae08
 8017cb8:	0801ae08 	.word	0x0801ae08
 8017cbc:	0801ae0c 	.word	0x0801ae0c

08017cc0 <memcmp>:
 8017cc0:	b530      	push	{r4, r5, lr}
 8017cc2:	2400      	movs	r4, #0
 8017cc4:	42a2      	cmp	r2, r4
 8017cc6:	d101      	bne.n	8017ccc <memcmp+0xc>
 8017cc8:	2000      	movs	r0, #0
 8017cca:	e007      	b.n	8017cdc <memcmp+0x1c>
 8017ccc:	5d03      	ldrb	r3, [r0, r4]
 8017cce:	3401      	adds	r4, #1
 8017cd0:	190d      	adds	r5, r1, r4
 8017cd2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8017cd6:	42ab      	cmp	r3, r5
 8017cd8:	d0f4      	beq.n	8017cc4 <memcmp+0x4>
 8017cda:	1b58      	subs	r0, r3, r5
 8017cdc:	bd30      	pop	{r4, r5, pc}

08017cde <memcpy>:
 8017cde:	b510      	push	{r4, lr}
 8017ce0:	1e43      	subs	r3, r0, #1
 8017ce2:	440a      	add	r2, r1
 8017ce4:	4291      	cmp	r1, r2
 8017ce6:	d100      	bne.n	8017cea <memcpy+0xc>
 8017ce8:	bd10      	pop	{r4, pc}
 8017cea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017cee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017cf2:	e7f7      	b.n	8017ce4 <memcpy+0x6>

08017cf4 <memset>:
 8017cf4:	4402      	add	r2, r0
 8017cf6:	4603      	mov	r3, r0
 8017cf8:	4293      	cmp	r3, r2
 8017cfa:	d100      	bne.n	8017cfe <memset+0xa>
 8017cfc:	4770      	bx	lr
 8017cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8017d02:	e7f9      	b.n	8017cf8 <memset+0x4>

08017d04 <iprintf>:
 8017d04:	b40f      	push	{r0, r1, r2, r3}
 8017d06:	4b0a      	ldr	r3, [pc, #40]	; (8017d30 <iprintf+0x2c>)
 8017d08:	b513      	push	{r0, r1, r4, lr}
 8017d0a:	681c      	ldr	r4, [r3, #0]
 8017d0c:	b124      	cbz	r4, 8017d18 <iprintf+0x14>
 8017d0e:	69a3      	ldr	r3, [r4, #24]
 8017d10:	b913      	cbnz	r3, 8017d18 <iprintf+0x14>
 8017d12:	4620      	mov	r0, r4
 8017d14:	f000 f84e 	bl	8017db4 <__sinit>
 8017d18:	ab05      	add	r3, sp, #20
 8017d1a:	9a04      	ldr	r2, [sp, #16]
 8017d1c:	68a1      	ldr	r1, [r4, #8]
 8017d1e:	9301      	str	r3, [sp, #4]
 8017d20:	4620      	mov	r0, r4
 8017d22:	f000 f955 	bl	8017fd0 <_vfiprintf_r>
 8017d26:	b002      	add	sp, #8
 8017d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d2c:	b004      	add	sp, #16
 8017d2e:	4770      	bx	lr
 8017d30:	2400002c 	.word	0x2400002c

08017d34 <std>:
 8017d34:	2300      	movs	r3, #0
 8017d36:	b510      	push	{r4, lr}
 8017d38:	4604      	mov	r4, r0
 8017d3a:	e9c0 3300 	strd	r3, r3, [r0]
 8017d3e:	6083      	str	r3, [r0, #8]
 8017d40:	8181      	strh	r1, [r0, #12]
 8017d42:	6643      	str	r3, [r0, #100]	; 0x64
 8017d44:	81c2      	strh	r2, [r0, #14]
 8017d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017d4a:	6183      	str	r3, [r0, #24]
 8017d4c:	4619      	mov	r1, r3
 8017d4e:	2208      	movs	r2, #8
 8017d50:	305c      	adds	r0, #92	; 0x5c
 8017d52:	f7ff ffcf 	bl	8017cf4 <memset>
 8017d56:	4b05      	ldr	r3, [pc, #20]	; (8017d6c <std+0x38>)
 8017d58:	6263      	str	r3, [r4, #36]	; 0x24
 8017d5a:	4b05      	ldr	r3, [pc, #20]	; (8017d70 <std+0x3c>)
 8017d5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8017d5e:	4b05      	ldr	r3, [pc, #20]	; (8017d74 <std+0x40>)
 8017d60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017d62:	4b05      	ldr	r3, [pc, #20]	; (8017d78 <std+0x44>)
 8017d64:	6224      	str	r4, [r4, #32]
 8017d66:	6323      	str	r3, [r4, #48]	; 0x30
 8017d68:	bd10      	pop	{r4, pc}
 8017d6a:	bf00      	nop
 8017d6c:	0801852d 	.word	0x0801852d
 8017d70:	0801854f 	.word	0x0801854f
 8017d74:	08018587 	.word	0x08018587
 8017d78:	080185ab 	.word	0x080185ab

08017d7c <_cleanup_r>:
 8017d7c:	4901      	ldr	r1, [pc, #4]	; (8017d84 <_cleanup_r+0x8>)
 8017d7e:	f000 b885 	b.w	8017e8c <_fwalk_reent>
 8017d82:	bf00      	nop
 8017d84:	08018885 	.word	0x08018885

08017d88 <__sfmoreglue>:
 8017d88:	b570      	push	{r4, r5, r6, lr}
 8017d8a:	1e4a      	subs	r2, r1, #1
 8017d8c:	2568      	movs	r5, #104	; 0x68
 8017d8e:	4355      	muls	r5, r2
 8017d90:	460e      	mov	r6, r1
 8017d92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017d96:	f000 f897 	bl	8017ec8 <_malloc_r>
 8017d9a:	4604      	mov	r4, r0
 8017d9c:	b140      	cbz	r0, 8017db0 <__sfmoreglue+0x28>
 8017d9e:	2100      	movs	r1, #0
 8017da0:	e9c0 1600 	strd	r1, r6, [r0]
 8017da4:	300c      	adds	r0, #12
 8017da6:	60a0      	str	r0, [r4, #8]
 8017da8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017dac:	f7ff ffa2 	bl	8017cf4 <memset>
 8017db0:	4620      	mov	r0, r4
 8017db2:	bd70      	pop	{r4, r5, r6, pc}

08017db4 <__sinit>:
 8017db4:	6983      	ldr	r3, [r0, #24]
 8017db6:	b510      	push	{r4, lr}
 8017db8:	4604      	mov	r4, r0
 8017dba:	bb33      	cbnz	r3, 8017e0a <__sinit+0x56>
 8017dbc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017dc0:	6503      	str	r3, [r0, #80]	; 0x50
 8017dc2:	4b12      	ldr	r3, [pc, #72]	; (8017e0c <__sinit+0x58>)
 8017dc4:	4a12      	ldr	r2, [pc, #72]	; (8017e10 <__sinit+0x5c>)
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	6282      	str	r2, [r0, #40]	; 0x28
 8017dca:	4298      	cmp	r0, r3
 8017dcc:	bf04      	itt	eq
 8017dce:	2301      	moveq	r3, #1
 8017dd0:	6183      	streq	r3, [r0, #24]
 8017dd2:	f000 f81f 	bl	8017e14 <__sfp>
 8017dd6:	6060      	str	r0, [r4, #4]
 8017dd8:	4620      	mov	r0, r4
 8017dda:	f000 f81b 	bl	8017e14 <__sfp>
 8017dde:	60a0      	str	r0, [r4, #8]
 8017de0:	4620      	mov	r0, r4
 8017de2:	f000 f817 	bl	8017e14 <__sfp>
 8017de6:	2200      	movs	r2, #0
 8017de8:	60e0      	str	r0, [r4, #12]
 8017dea:	2104      	movs	r1, #4
 8017dec:	6860      	ldr	r0, [r4, #4]
 8017dee:	f7ff ffa1 	bl	8017d34 <std>
 8017df2:	2201      	movs	r2, #1
 8017df4:	2109      	movs	r1, #9
 8017df6:	68a0      	ldr	r0, [r4, #8]
 8017df8:	f7ff ff9c 	bl	8017d34 <std>
 8017dfc:	2202      	movs	r2, #2
 8017dfe:	2112      	movs	r1, #18
 8017e00:	68e0      	ldr	r0, [r4, #12]
 8017e02:	f7ff ff97 	bl	8017d34 <std>
 8017e06:	2301      	movs	r3, #1
 8017e08:	61a3      	str	r3, [r4, #24]
 8017e0a:	bd10      	pop	{r4, pc}
 8017e0c:	0801ad68 	.word	0x0801ad68
 8017e10:	08017d7d 	.word	0x08017d7d

08017e14 <__sfp>:
 8017e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e16:	4b1b      	ldr	r3, [pc, #108]	; (8017e84 <__sfp+0x70>)
 8017e18:	681e      	ldr	r6, [r3, #0]
 8017e1a:	69b3      	ldr	r3, [r6, #24]
 8017e1c:	4607      	mov	r7, r0
 8017e1e:	b913      	cbnz	r3, 8017e26 <__sfp+0x12>
 8017e20:	4630      	mov	r0, r6
 8017e22:	f7ff ffc7 	bl	8017db4 <__sinit>
 8017e26:	3648      	adds	r6, #72	; 0x48
 8017e28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017e2c:	3b01      	subs	r3, #1
 8017e2e:	d503      	bpl.n	8017e38 <__sfp+0x24>
 8017e30:	6833      	ldr	r3, [r6, #0]
 8017e32:	b133      	cbz	r3, 8017e42 <__sfp+0x2e>
 8017e34:	6836      	ldr	r6, [r6, #0]
 8017e36:	e7f7      	b.n	8017e28 <__sfp+0x14>
 8017e38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017e3c:	b16d      	cbz	r5, 8017e5a <__sfp+0x46>
 8017e3e:	3468      	adds	r4, #104	; 0x68
 8017e40:	e7f4      	b.n	8017e2c <__sfp+0x18>
 8017e42:	2104      	movs	r1, #4
 8017e44:	4638      	mov	r0, r7
 8017e46:	f7ff ff9f 	bl	8017d88 <__sfmoreglue>
 8017e4a:	6030      	str	r0, [r6, #0]
 8017e4c:	2800      	cmp	r0, #0
 8017e4e:	d1f1      	bne.n	8017e34 <__sfp+0x20>
 8017e50:	230c      	movs	r3, #12
 8017e52:	603b      	str	r3, [r7, #0]
 8017e54:	4604      	mov	r4, r0
 8017e56:	4620      	mov	r0, r4
 8017e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e5a:	4b0b      	ldr	r3, [pc, #44]	; (8017e88 <__sfp+0x74>)
 8017e5c:	6665      	str	r5, [r4, #100]	; 0x64
 8017e5e:	e9c4 5500 	strd	r5, r5, [r4]
 8017e62:	60a5      	str	r5, [r4, #8]
 8017e64:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017e68:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017e6c:	2208      	movs	r2, #8
 8017e6e:	4629      	mov	r1, r5
 8017e70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017e74:	f7ff ff3e 	bl	8017cf4 <memset>
 8017e78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017e7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017e80:	e7e9      	b.n	8017e56 <__sfp+0x42>
 8017e82:	bf00      	nop
 8017e84:	0801ad68 	.word	0x0801ad68
 8017e88:	ffff0001 	.word	0xffff0001

08017e8c <_fwalk_reent>:
 8017e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e90:	4680      	mov	r8, r0
 8017e92:	4689      	mov	r9, r1
 8017e94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017e98:	2600      	movs	r6, #0
 8017e9a:	b914      	cbnz	r4, 8017ea2 <_fwalk_reent+0x16>
 8017e9c:	4630      	mov	r0, r6
 8017e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017ea2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8017ea6:	3f01      	subs	r7, #1
 8017ea8:	d501      	bpl.n	8017eae <_fwalk_reent+0x22>
 8017eaa:	6824      	ldr	r4, [r4, #0]
 8017eac:	e7f5      	b.n	8017e9a <_fwalk_reent+0xe>
 8017eae:	89ab      	ldrh	r3, [r5, #12]
 8017eb0:	2b01      	cmp	r3, #1
 8017eb2:	d907      	bls.n	8017ec4 <_fwalk_reent+0x38>
 8017eb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017eb8:	3301      	adds	r3, #1
 8017eba:	d003      	beq.n	8017ec4 <_fwalk_reent+0x38>
 8017ebc:	4629      	mov	r1, r5
 8017ebe:	4640      	mov	r0, r8
 8017ec0:	47c8      	blx	r9
 8017ec2:	4306      	orrs	r6, r0
 8017ec4:	3568      	adds	r5, #104	; 0x68
 8017ec6:	e7ee      	b.n	8017ea6 <_fwalk_reent+0x1a>

08017ec8 <_malloc_r>:
 8017ec8:	b570      	push	{r4, r5, r6, lr}
 8017eca:	1ccd      	adds	r5, r1, #3
 8017ecc:	f025 0503 	bic.w	r5, r5, #3
 8017ed0:	3508      	adds	r5, #8
 8017ed2:	2d0c      	cmp	r5, #12
 8017ed4:	bf38      	it	cc
 8017ed6:	250c      	movcc	r5, #12
 8017ed8:	2d00      	cmp	r5, #0
 8017eda:	4606      	mov	r6, r0
 8017edc:	db01      	blt.n	8017ee2 <_malloc_r+0x1a>
 8017ede:	42a9      	cmp	r1, r5
 8017ee0:	d903      	bls.n	8017eea <_malloc_r+0x22>
 8017ee2:	230c      	movs	r3, #12
 8017ee4:	6033      	str	r3, [r6, #0]
 8017ee6:	2000      	movs	r0, #0
 8017ee8:	bd70      	pop	{r4, r5, r6, pc}
 8017eea:	f000 fd6b 	bl	80189c4 <__malloc_lock>
 8017eee:	4a21      	ldr	r2, [pc, #132]	; (8017f74 <_malloc_r+0xac>)
 8017ef0:	6814      	ldr	r4, [r2, #0]
 8017ef2:	4621      	mov	r1, r4
 8017ef4:	b991      	cbnz	r1, 8017f1c <_malloc_r+0x54>
 8017ef6:	4c20      	ldr	r4, [pc, #128]	; (8017f78 <_malloc_r+0xb0>)
 8017ef8:	6823      	ldr	r3, [r4, #0]
 8017efa:	b91b      	cbnz	r3, 8017f04 <_malloc_r+0x3c>
 8017efc:	4630      	mov	r0, r6
 8017efe:	f000 fb05 	bl	801850c <_sbrk_r>
 8017f02:	6020      	str	r0, [r4, #0]
 8017f04:	4629      	mov	r1, r5
 8017f06:	4630      	mov	r0, r6
 8017f08:	f000 fb00 	bl	801850c <_sbrk_r>
 8017f0c:	1c43      	adds	r3, r0, #1
 8017f0e:	d124      	bne.n	8017f5a <_malloc_r+0x92>
 8017f10:	230c      	movs	r3, #12
 8017f12:	6033      	str	r3, [r6, #0]
 8017f14:	4630      	mov	r0, r6
 8017f16:	f000 fd56 	bl	80189c6 <__malloc_unlock>
 8017f1a:	e7e4      	b.n	8017ee6 <_malloc_r+0x1e>
 8017f1c:	680b      	ldr	r3, [r1, #0]
 8017f1e:	1b5b      	subs	r3, r3, r5
 8017f20:	d418      	bmi.n	8017f54 <_malloc_r+0x8c>
 8017f22:	2b0b      	cmp	r3, #11
 8017f24:	d90f      	bls.n	8017f46 <_malloc_r+0x7e>
 8017f26:	600b      	str	r3, [r1, #0]
 8017f28:	50cd      	str	r5, [r1, r3]
 8017f2a:	18cc      	adds	r4, r1, r3
 8017f2c:	4630      	mov	r0, r6
 8017f2e:	f000 fd4a 	bl	80189c6 <__malloc_unlock>
 8017f32:	f104 000b 	add.w	r0, r4, #11
 8017f36:	1d23      	adds	r3, r4, #4
 8017f38:	f020 0007 	bic.w	r0, r0, #7
 8017f3c:	1ac3      	subs	r3, r0, r3
 8017f3e:	d0d3      	beq.n	8017ee8 <_malloc_r+0x20>
 8017f40:	425a      	negs	r2, r3
 8017f42:	50e2      	str	r2, [r4, r3]
 8017f44:	e7d0      	b.n	8017ee8 <_malloc_r+0x20>
 8017f46:	428c      	cmp	r4, r1
 8017f48:	684b      	ldr	r3, [r1, #4]
 8017f4a:	bf16      	itet	ne
 8017f4c:	6063      	strne	r3, [r4, #4]
 8017f4e:	6013      	streq	r3, [r2, #0]
 8017f50:	460c      	movne	r4, r1
 8017f52:	e7eb      	b.n	8017f2c <_malloc_r+0x64>
 8017f54:	460c      	mov	r4, r1
 8017f56:	6849      	ldr	r1, [r1, #4]
 8017f58:	e7cc      	b.n	8017ef4 <_malloc_r+0x2c>
 8017f5a:	1cc4      	adds	r4, r0, #3
 8017f5c:	f024 0403 	bic.w	r4, r4, #3
 8017f60:	42a0      	cmp	r0, r4
 8017f62:	d005      	beq.n	8017f70 <_malloc_r+0xa8>
 8017f64:	1a21      	subs	r1, r4, r0
 8017f66:	4630      	mov	r0, r6
 8017f68:	f000 fad0 	bl	801850c <_sbrk_r>
 8017f6c:	3001      	adds	r0, #1
 8017f6e:	d0cf      	beq.n	8017f10 <_malloc_r+0x48>
 8017f70:	6025      	str	r5, [r4, #0]
 8017f72:	e7db      	b.n	8017f2c <_malloc_r+0x64>
 8017f74:	24021940 	.word	0x24021940
 8017f78:	24021944 	.word	0x24021944

08017f7c <__sfputc_r>:
 8017f7c:	6893      	ldr	r3, [r2, #8]
 8017f7e:	3b01      	subs	r3, #1
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	b410      	push	{r4}
 8017f84:	6093      	str	r3, [r2, #8]
 8017f86:	da08      	bge.n	8017f9a <__sfputc_r+0x1e>
 8017f88:	6994      	ldr	r4, [r2, #24]
 8017f8a:	42a3      	cmp	r3, r4
 8017f8c:	db01      	blt.n	8017f92 <__sfputc_r+0x16>
 8017f8e:	290a      	cmp	r1, #10
 8017f90:	d103      	bne.n	8017f9a <__sfputc_r+0x1e>
 8017f92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f96:	f000 bb0d 	b.w	80185b4 <__swbuf_r>
 8017f9a:	6813      	ldr	r3, [r2, #0]
 8017f9c:	1c58      	adds	r0, r3, #1
 8017f9e:	6010      	str	r0, [r2, #0]
 8017fa0:	7019      	strb	r1, [r3, #0]
 8017fa2:	4608      	mov	r0, r1
 8017fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017fa8:	4770      	bx	lr

08017faa <__sfputs_r>:
 8017faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fac:	4606      	mov	r6, r0
 8017fae:	460f      	mov	r7, r1
 8017fb0:	4614      	mov	r4, r2
 8017fb2:	18d5      	adds	r5, r2, r3
 8017fb4:	42ac      	cmp	r4, r5
 8017fb6:	d101      	bne.n	8017fbc <__sfputs_r+0x12>
 8017fb8:	2000      	movs	r0, #0
 8017fba:	e007      	b.n	8017fcc <__sfputs_r+0x22>
 8017fbc:	463a      	mov	r2, r7
 8017fbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fc2:	4630      	mov	r0, r6
 8017fc4:	f7ff ffda 	bl	8017f7c <__sfputc_r>
 8017fc8:	1c43      	adds	r3, r0, #1
 8017fca:	d1f3      	bne.n	8017fb4 <__sfputs_r+0xa>
 8017fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017fd0 <_vfiprintf_r>:
 8017fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fd4:	460c      	mov	r4, r1
 8017fd6:	b09d      	sub	sp, #116	; 0x74
 8017fd8:	4617      	mov	r7, r2
 8017fda:	461d      	mov	r5, r3
 8017fdc:	4606      	mov	r6, r0
 8017fde:	b118      	cbz	r0, 8017fe8 <_vfiprintf_r+0x18>
 8017fe0:	6983      	ldr	r3, [r0, #24]
 8017fe2:	b90b      	cbnz	r3, 8017fe8 <_vfiprintf_r+0x18>
 8017fe4:	f7ff fee6 	bl	8017db4 <__sinit>
 8017fe8:	4b7c      	ldr	r3, [pc, #496]	; (80181dc <_vfiprintf_r+0x20c>)
 8017fea:	429c      	cmp	r4, r3
 8017fec:	d158      	bne.n	80180a0 <_vfiprintf_r+0xd0>
 8017fee:	6874      	ldr	r4, [r6, #4]
 8017ff0:	89a3      	ldrh	r3, [r4, #12]
 8017ff2:	0718      	lsls	r0, r3, #28
 8017ff4:	d55e      	bpl.n	80180b4 <_vfiprintf_r+0xe4>
 8017ff6:	6923      	ldr	r3, [r4, #16]
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d05b      	beq.n	80180b4 <_vfiprintf_r+0xe4>
 8017ffc:	2300      	movs	r3, #0
 8017ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8018000:	2320      	movs	r3, #32
 8018002:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018006:	2330      	movs	r3, #48	; 0x30
 8018008:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801800c:	9503      	str	r5, [sp, #12]
 801800e:	f04f 0b01 	mov.w	fp, #1
 8018012:	46b8      	mov	r8, r7
 8018014:	4645      	mov	r5, r8
 8018016:	f815 3b01 	ldrb.w	r3, [r5], #1
 801801a:	b10b      	cbz	r3, 8018020 <_vfiprintf_r+0x50>
 801801c:	2b25      	cmp	r3, #37	; 0x25
 801801e:	d154      	bne.n	80180ca <_vfiprintf_r+0xfa>
 8018020:	ebb8 0a07 	subs.w	sl, r8, r7
 8018024:	d00b      	beq.n	801803e <_vfiprintf_r+0x6e>
 8018026:	4653      	mov	r3, sl
 8018028:	463a      	mov	r2, r7
 801802a:	4621      	mov	r1, r4
 801802c:	4630      	mov	r0, r6
 801802e:	f7ff ffbc 	bl	8017faa <__sfputs_r>
 8018032:	3001      	adds	r0, #1
 8018034:	f000 80c2 	beq.w	80181bc <_vfiprintf_r+0x1ec>
 8018038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801803a:	4453      	add	r3, sl
 801803c:	9309      	str	r3, [sp, #36]	; 0x24
 801803e:	f898 3000 	ldrb.w	r3, [r8]
 8018042:	2b00      	cmp	r3, #0
 8018044:	f000 80ba 	beq.w	80181bc <_vfiprintf_r+0x1ec>
 8018048:	2300      	movs	r3, #0
 801804a:	f04f 32ff 	mov.w	r2, #4294967295
 801804e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018052:	9304      	str	r3, [sp, #16]
 8018054:	9307      	str	r3, [sp, #28]
 8018056:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801805a:	931a      	str	r3, [sp, #104]	; 0x68
 801805c:	46a8      	mov	r8, r5
 801805e:	2205      	movs	r2, #5
 8018060:	f818 1b01 	ldrb.w	r1, [r8], #1
 8018064:	485e      	ldr	r0, [pc, #376]	; (80181e0 <_vfiprintf_r+0x210>)
 8018066:	f7e8 f93b 	bl	80002e0 <memchr>
 801806a:	9b04      	ldr	r3, [sp, #16]
 801806c:	bb78      	cbnz	r0, 80180ce <_vfiprintf_r+0xfe>
 801806e:	06d9      	lsls	r1, r3, #27
 8018070:	bf44      	itt	mi
 8018072:	2220      	movmi	r2, #32
 8018074:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018078:	071a      	lsls	r2, r3, #28
 801807a:	bf44      	itt	mi
 801807c:	222b      	movmi	r2, #43	; 0x2b
 801807e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018082:	782a      	ldrb	r2, [r5, #0]
 8018084:	2a2a      	cmp	r2, #42	; 0x2a
 8018086:	d02a      	beq.n	80180de <_vfiprintf_r+0x10e>
 8018088:	9a07      	ldr	r2, [sp, #28]
 801808a:	46a8      	mov	r8, r5
 801808c:	2000      	movs	r0, #0
 801808e:	250a      	movs	r5, #10
 8018090:	4641      	mov	r1, r8
 8018092:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018096:	3b30      	subs	r3, #48	; 0x30
 8018098:	2b09      	cmp	r3, #9
 801809a:	d969      	bls.n	8018170 <_vfiprintf_r+0x1a0>
 801809c:	b360      	cbz	r0, 80180f8 <_vfiprintf_r+0x128>
 801809e:	e024      	b.n	80180ea <_vfiprintf_r+0x11a>
 80180a0:	4b50      	ldr	r3, [pc, #320]	; (80181e4 <_vfiprintf_r+0x214>)
 80180a2:	429c      	cmp	r4, r3
 80180a4:	d101      	bne.n	80180aa <_vfiprintf_r+0xda>
 80180a6:	68b4      	ldr	r4, [r6, #8]
 80180a8:	e7a2      	b.n	8017ff0 <_vfiprintf_r+0x20>
 80180aa:	4b4f      	ldr	r3, [pc, #316]	; (80181e8 <_vfiprintf_r+0x218>)
 80180ac:	429c      	cmp	r4, r3
 80180ae:	bf08      	it	eq
 80180b0:	68f4      	ldreq	r4, [r6, #12]
 80180b2:	e79d      	b.n	8017ff0 <_vfiprintf_r+0x20>
 80180b4:	4621      	mov	r1, r4
 80180b6:	4630      	mov	r0, r6
 80180b8:	f000 fae0 	bl	801867c <__swsetup_r>
 80180bc:	2800      	cmp	r0, #0
 80180be:	d09d      	beq.n	8017ffc <_vfiprintf_r+0x2c>
 80180c0:	f04f 30ff 	mov.w	r0, #4294967295
 80180c4:	b01d      	add	sp, #116	; 0x74
 80180c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180ca:	46a8      	mov	r8, r5
 80180cc:	e7a2      	b.n	8018014 <_vfiprintf_r+0x44>
 80180ce:	4a44      	ldr	r2, [pc, #272]	; (80181e0 <_vfiprintf_r+0x210>)
 80180d0:	1a80      	subs	r0, r0, r2
 80180d2:	fa0b f000 	lsl.w	r0, fp, r0
 80180d6:	4318      	orrs	r0, r3
 80180d8:	9004      	str	r0, [sp, #16]
 80180da:	4645      	mov	r5, r8
 80180dc:	e7be      	b.n	801805c <_vfiprintf_r+0x8c>
 80180de:	9a03      	ldr	r2, [sp, #12]
 80180e0:	1d11      	adds	r1, r2, #4
 80180e2:	6812      	ldr	r2, [r2, #0]
 80180e4:	9103      	str	r1, [sp, #12]
 80180e6:	2a00      	cmp	r2, #0
 80180e8:	db01      	blt.n	80180ee <_vfiprintf_r+0x11e>
 80180ea:	9207      	str	r2, [sp, #28]
 80180ec:	e004      	b.n	80180f8 <_vfiprintf_r+0x128>
 80180ee:	4252      	negs	r2, r2
 80180f0:	f043 0302 	orr.w	r3, r3, #2
 80180f4:	9207      	str	r2, [sp, #28]
 80180f6:	9304      	str	r3, [sp, #16]
 80180f8:	f898 3000 	ldrb.w	r3, [r8]
 80180fc:	2b2e      	cmp	r3, #46	; 0x2e
 80180fe:	d10e      	bne.n	801811e <_vfiprintf_r+0x14e>
 8018100:	f898 3001 	ldrb.w	r3, [r8, #1]
 8018104:	2b2a      	cmp	r3, #42	; 0x2a
 8018106:	d138      	bne.n	801817a <_vfiprintf_r+0x1aa>
 8018108:	9b03      	ldr	r3, [sp, #12]
 801810a:	1d1a      	adds	r2, r3, #4
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	9203      	str	r2, [sp, #12]
 8018110:	2b00      	cmp	r3, #0
 8018112:	bfb8      	it	lt
 8018114:	f04f 33ff 	movlt.w	r3, #4294967295
 8018118:	f108 0802 	add.w	r8, r8, #2
 801811c:	9305      	str	r3, [sp, #20]
 801811e:	4d33      	ldr	r5, [pc, #204]	; (80181ec <_vfiprintf_r+0x21c>)
 8018120:	f898 1000 	ldrb.w	r1, [r8]
 8018124:	2203      	movs	r2, #3
 8018126:	4628      	mov	r0, r5
 8018128:	f7e8 f8da 	bl	80002e0 <memchr>
 801812c:	b140      	cbz	r0, 8018140 <_vfiprintf_r+0x170>
 801812e:	2340      	movs	r3, #64	; 0x40
 8018130:	1b40      	subs	r0, r0, r5
 8018132:	fa03 f000 	lsl.w	r0, r3, r0
 8018136:	9b04      	ldr	r3, [sp, #16]
 8018138:	4303      	orrs	r3, r0
 801813a:	f108 0801 	add.w	r8, r8, #1
 801813e:	9304      	str	r3, [sp, #16]
 8018140:	f898 1000 	ldrb.w	r1, [r8]
 8018144:	482a      	ldr	r0, [pc, #168]	; (80181f0 <_vfiprintf_r+0x220>)
 8018146:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801814a:	2206      	movs	r2, #6
 801814c:	f108 0701 	add.w	r7, r8, #1
 8018150:	f7e8 f8c6 	bl	80002e0 <memchr>
 8018154:	2800      	cmp	r0, #0
 8018156:	d037      	beq.n	80181c8 <_vfiprintf_r+0x1f8>
 8018158:	4b26      	ldr	r3, [pc, #152]	; (80181f4 <_vfiprintf_r+0x224>)
 801815a:	bb1b      	cbnz	r3, 80181a4 <_vfiprintf_r+0x1d4>
 801815c:	9b03      	ldr	r3, [sp, #12]
 801815e:	3307      	adds	r3, #7
 8018160:	f023 0307 	bic.w	r3, r3, #7
 8018164:	3308      	adds	r3, #8
 8018166:	9303      	str	r3, [sp, #12]
 8018168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801816a:	444b      	add	r3, r9
 801816c:	9309      	str	r3, [sp, #36]	; 0x24
 801816e:	e750      	b.n	8018012 <_vfiprintf_r+0x42>
 8018170:	fb05 3202 	mla	r2, r5, r2, r3
 8018174:	2001      	movs	r0, #1
 8018176:	4688      	mov	r8, r1
 8018178:	e78a      	b.n	8018090 <_vfiprintf_r+0xc0>
 801817a:	2300      	movs	r3, #0
 801817c:	f108 0801 	add.w	r8, r8, #1
 8018180:	9305      	str	r3, [sp, #20]
 8018182:	4619      	mov	r1, r3
 8018184:	250a      	movs	r5, #10
 8018186:	4640      	mov	r0, r8
 8018188:	f810 2b01 	ldrb.w	r2, [r0], #1
 801818c:	3a30      	subs	r2, #48	; 0x30
 801818e:	2a09      	cmp	r2, #9
 8018190:	d903      	bls.n	801819a <_vfiprintf_r+0x1ca>
 8018192:	2b00      	cmp	r3, #0
 8018194:	d0c3      	beq.n	801811e <_vfiprintf_r+0x14e>
 8018196:	9105      	str	r1, [sp, #20]
 8018198:	e7c1      	b.n	801811e <_vfiprintf_r+0x14e>
 801819a:	fb05 2101 	mla	r1, r5, r1, r2
 801819e:	2301      	movs	r3, #1
 80181a0:	4680      	mov	r8, r0
 80181a2:	e7f0      	b.n	8018186 <_vfiprintf_r+0x1b6>
 80181a4:	ab03      	add	r3, sp, #12
 80181a6:	9300      	str	r3, [sp, #0]
 80181a8:	4622      	mov	r2, r4
 80181aa:	4b13      	ldr	r3, [pc, #76]	; (80181f8 <_vfiprintf_r+0x228>)
 80181ac:	a904      	add	r1, sp, #16
 80181ae:	4630      	mov	r0, r6
 80181b0:	f3af 8000 	nop.w
 80181b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80181b8:	4681      	mov	r9, r0
 80181ba:	d1d5      	bne.n	8018168 <_vfiprintf_r+0x198>
 80181bc:	89a3      	ldrh	r3, [r4, #12]
 80181be:	065b      	lsls	r3, r3, #25
 80181c0:	f53f af7e 	bmi.w	80180c0 <_vfiprintf_r+0xf0>
 80181c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80181c6:	e77d      	b.n	80180c4 <_vfiprintf_r+0xf4>
 80181c8:	ab03      	add	r3, sp, #12
 80181ca:	9300      	str	r3, [sp, #0]
 80181cc:	4622      	mov	r2, r4
 80181ce:	4b0a      	ldr	r3, [pc, #40]	; (80181f8 <_vfiprintf_r+0x228>)
 80181d0:	a904      	add	r1, sp, #16
 80181d2:	4630      	mov	r0, r6
 80181d4:	f000 f888 	bl	80182e8 <_printf_i>
 80181d8:	e7ec      	b.n	80181b4 <_vfiprintf_r+0x1e4>
 80181da:	bf00      	nop
 80181dc:	0801ad8c 	.word	0x0801ad8c
 80181e0:	0801adcc 	.word	0x0801adcc
 80181e4:	0801adac 	.word	0x0801adac
 80181e8:	0801ad6c 	.word	0x0801ad6c
 80181ec:	0801add2 	.word	0x0801add2
 80181f0:	0801add6 	.word	0x0801add6
 80181f4:	00000000 	.word	0x00000000
 80181f8:	08017fab 	.word	0x08017fab

080181fc <_printf_common>:
 80181fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018200:	4691      	mov	r9, r2
 8018202:	461f      	mov	r7, r3
 8018204:	688a      	ldr	r2, [r1, #8]
 8018206:	690b      	ldr	r3, [r1, #16]
 8018208:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801820c:	4293      	cmp	r3, r2
 801820e:	bfb8      	it	lt
 8018210:	4613      	movlt	r3, r2
 8018212:	f8c9 3000 	str.w	r3, [r9]
 8018216:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801821a:	4606      	mov	r6, r0
 801821c:	460c      	mov	r4, r1
 801821e:	b112      	cbz	r2, 8018226 <_printf_common+0x2a>
 8018220:	3301      	adds	r3, #1
 8018222:	f8c9 3000 	str.w	r3, [r9]
 8018226:	6823      	ldr	r3, [r4, #0]
 8018228:	0699      	lsls	r1, r3, #26
 801822a:	bf42      	ittt	mi
 801822c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8018230:	3302      	addmi	r3, #2
 8018232:	f8c9 3000 	strmi.w	r3, [r9]
 8018236:	6825      	ldr	r5, [r4, #0]
 8018238:	f015 0506 	ands.w	r5, r5, #6
 801823c:	d107      	bne.n	801824e <_printf_common+0x52>
 801823e:	f104 0a19 	add.w	sl, r4, #25
 8018242:	68e3      	ldr	r3, [r4, #12]
 8018244:	f8d9 2000 	ldr.w	r2, [r9]
 8018248:	1a9b      	subs	r3, r3, r2
 801824a:	42ab      	cmp	r3, r5
 801824c:	dc28      	bgt.n	80182a0 <_printf_common+0xa4>
 801824e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8018252:	6822      	ldr	r2, [r4, #0]
 8018254:	3300      	adds	r3, #0
 8018256:	bf18      	it	ne
 8018258:	2301      	movne	r3, #1
 801825a:	0692      	lsls	r2, r2, #26
 801825c:	d42d      	bmi.n	80182ba <_printf_common+0xbe>
 801825e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018262:	4639      	mov	r1, r7
 8018264:	4630      	mov	r0, r6
 8018266:	47c0      	blx	r8
 8018268:	3001      	adds	r0, #1
 801826a:	d020      	beq.n	80182ae <_printf_common+0xb2>
 801826c:	6823      	ldr	r3, [r4, #0]
 801826e:	68e5      	ldr	r5, [r4, #12]
 8018270:	f8d9 2000 	ldr.w	r2, [r9]
 8018274:	f003 0306 	and.w	r3, r3, #6
 8018278:	2b04      	cmp	r3, #4
 801827a:	bf08      	it	eq
 801827c:	1aad      	subeq	r5, r5, r2
 801827e:	68a3      	ldr	r3, [r4, #8]
 8018280:	6922      	ldr	r2, [r4, #16]
 8018282:	bf0c      	ite	eq
 8018284:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018288:	2500      	movne	r5, #0
 801828a:	4293      	cmp	r3, r2
 801828c:	bfc4      	itt	gt
 801828e:	1a9b      	subgt	r3, r3, r2
 8018290:	18ed      	addgt	r5, r5, r3
 8018292:	f04f 0900 	mov.w	r9, #0
 8018296:	341a      	adds	r4, #26
 8018298:	454d      	cmp	r5, r9
 801829a:	d11a      	bne.n	80182d2 <_printf_common+0xd6>
 801829c:	2000      	movs	r0, #0
 801829e:	e008      	b.n	80182b2 <_printf_common+0xb6>
 80182a0:	2301      	movs	r3, #1
 80182a2:	4652      	mov	r2, sl
 80182a4:	4639      	mov	r1, r7
 80182a6:	4630      	mov	r0, r6
 80182a8:	47c0      	blx	r8
 80182aa:	3001      	adds	r0, #1
 80182ac:	d103      	bne.n	80182b6 <_printf_common+0xba>
 80182ae:	f04f 30ff 	mov.w	r0, #4294967295
 80182b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182b6:	3501      	adds	r5, #1
 80182b8:	e7c3      	b.n	8018242 <_printf_common+0x46>
 80182ba:	18e1      	adds	r1, r4, r3
 80182bc:	1c5a      	adds	r2, r3, #1
 80182be:	2030      	movs	r0, #48	; 0x30
 80182c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80182c4:	4422      	add	r2, r4
 80182c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80182ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80182ce:	3302      	adds	r3, #2
 80182d0:	e7c5      	b.n	801825e <_printf_common+0x62>
 80182d2:	2301      	movs	r3, #1
 80182d4:	4622      	mov	r2, r4
 80182d6:	4639      	mov	r1, r7
 80182d8:	4630      	mov	r0, r6
 80182da:	47c0      	blx	r8
 80182dc:	3001      	adds	r0, #1
 80182de:	d0e6      	beq.n	80182ae <_printf_common+0xb2>
 80182e0:	f109 0901 	add.w	r9, r9, #1
 80182e4:	e7d8      	b.n	8018298 <_printf_common+0x9c>
	...

080182e8 <_printf_i>:
 80182e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80182ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80182f0:	460c      	mov	r4, r1
 80182f2:	7e09      	ldrb	r1, [r1, #24]
 80182f4:	b085      	sub	sp, #20
 80182f6:	296e      	cmp	r1, #110	; 0x6e
 80182f8:	4617      	mov	r7, r2
 80182fa:	4606      	mov	r6, r0
 80182fc:	4698      	mov	r8, r3
 80182fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018300:	f000 80b3 	beq.w	801846a <_printf_i+0x182>
 8018304:	d822      	bhi.n	801834c <_printf_i+0x64>
 8018306:	2963      	cmp	r1, #99	; 0x63
 8018308:	d036      	beq.n	8018378 <_printf_i+0x90>
 801830a:	d80a      	bhi.n	8018322 <_printf_i+0x3a>
 801830c:	2900      	cmp	r1, #0
 801830e:	f000 80b9 	beq.w	8018484 <_printf_i+0x19c>
 8018312:	2958      	cmp	r1, #88	; 0x58
 8018314:	f000 8083 	beq.w	801841e <_printf_i+0x136>
 8018318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801831c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8018320:	e032      	b.n	8018388 <_printf_i+0xa0>
 8018322:	2964      	cmp	r1, #100	; 0x64
 8018324:	d001      	beq.n	801832a <_printf_i+0x42>
 8018326:	2969      	cmp	r1, #105	; 0x69
 8018328:	d1f6      	bne.n	8018318 <_printf_i+0x30>
 801832a:	6820      	ldr	r0, [r4, #0]
 801832c:	6813      	ldr	r3, [r2, #0]
 801832e:	0605      	lsls	r5, r0, #24
 8018330:	f103 0104 	add.w	r1, r3, #4
 8018334:	d52a      	bpl.n	801838c <_printf_i+0xa4>
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	6011      	str	r1, [r2, #0]
 801833a:	2b00      	cmp	r3, #0
 801833c:	da03      	bge.n	8018346 <_printf_i+0x5e>
 801833e:	222d      	movs	r2, #45	; 0x2d
 8018340:	425b      	negs	r3, r3
 8018342:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8018346:	486f      	ldr	r0, [pc, #444]	; (8018504 <_printf_i+0x21c>)
 8018348:	220a      	movs	r2, #10
 801834a:	e039      	b.n	80183c0 <_printf_i+0xd8>
 801834c:	2973      	cmp	r1, #115	; 0x73
 801834e:	f000 809d 	beq.w	801848c <_printf_i+0x1a4>
 8018352:	d808      	bhi.n	8018366 <_printf_i+0x7e>
 8018354:	296f      	cmp	r1, #111	; 0x6f
 8018356:	d020      	beq.n	801839a <_printf_i+0xb2>
 8018358:	2970      	cmp	r1, #112	; 0x70
 801835a:	d1dd      	bne.n	8018318 <_printf_i+0x30>
 801835c:	6823      	ldr	r3, [r4, #0]
 801835e:	f043 0320 	orr.w	r3, r3, #32
 8018362:	6023      	str	r3, [r4, #0]
 8018364:	e003      	b.n	801836e <_printf_i+0x86>
 8018366:	2975      	cmp	r1, #117	; 0x75
 8018368:	d017      	beq.n	801839a <_printf_i+0xb2>
 801836a:	2978      	cmp	r1, #120	; 0x78
 801836c:	d1d4      	bne.n	8018318 <_printf_i+0x30>
 801836e:	2378      	movs	r3, #120	; 0x78
 8018370:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018374:	4864      	ldr	r0, [pc, #400]	; (8018508 <_printf_i+0x220>)
 8018376:	e055      	b.n	8018424 <_printf_i+0x13c>
 8018378:	6813      	ldr	r3, [r2, #0]
 801837a:	1d19      	adds	r1, r3, #4
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	6011      	str	r1, [r2, #0]
 8018380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018384:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018388:	2301      	movs	r3, #1
 801838a:	e08c      	b.n	80184a6 <_printf_i+0x1be>
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	6011      	str	r1, [r2, #0]
 8018390:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018394:	bf18      	it	ne
 8018396:	b21b      	sxthne	r3, r3
 8018398:	e7cf      	b.n	801833a <_printf_i+0x52>
 801839a:	6813      	ldr	r3, [r2, #0]
 801839c:	6825      	ldr	r5, [r4, #0]
 801839e:	1d18      	adds	r0, r3, #4
 80183a0:	6010      	str	r0, [r2, #0]
 80183a2:	0628      	lsls	r0, r5, #24
 80183a4:	d501      	bpl.n	80183aa <_printf_i+0xc2>
 80183a6:	681b      	ldr	r3, [r3, #0]
 80183a8:	e002      	b.n	80183b0 <_printf_i+0xc8>
 80183aa:	0668      	lsls	r0, r5, #25
 80183ac:	d5fb      	bpl.n	80183a6 <_printf_i+0xbe>
 80183ae:	881b      	ldrh	r3, [r3, #0]
 80183b0:	4854      	ldr	r0, [pc, #336]	; (8018504 <_printf_i+0x21c>)
 80183b2:	296f      	cmp	r1, #111	; 0x6f
 80183b4:	bf14      	ite	ne
 80183b6:	220a      	movne	r2, #10
 80183b8:	2208      	moveq	r2, #8
 80183ba:	2100      	movs	r1, #0
 80183bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80183c0:	6865      	ldr	r5, [r4, #4]
 80183c2:	60a5      	str	r5, [r4, #8]
 80183c4:	2d00      	cmp	r5, #0
 80183c6:	f2c0 8095 	blt.w	80184f4 <_printf_i+0x20c>
 80183ca:	6821      	ldr	r1, [r4, #0]
 80183cc:	f021 0104 	bic.w	r1, r1, #4
 80183d0:	6021      	str	r1, [r4, #0]
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d13d      	bne.n	8018452 <_printf_i+0x16a>
 80183d6:	2d00      	cmp	r5, #0
 80183d8:	f040 808e 	bne.w	80184f8 <_printf_i+0x210>
 80183dc:	4665      	mov	r5, ip
 80183de:	2a08      	cmp	r2, #8
 80183e0:	d10b      	bne.n	80183fa <_printf_i+0x112>
 80183e2:	6823      	ldr	r3, [r4, #0]
 80183e4:	07db      	lsls	r3, r3, #31
 80183e6:	d508      	bpl.n	80183fa <_printf_i+0x112>
 80183e8:	6923      	ldr	r3, [r4, #16]
 80183ea:	6862      	ldr	r2, [r4, #4]
 80183ec:	429a      	cmp	r2, r3
 80183ee:	bfde      	ittt	le
 80183f0:	2330      	movle	r3, #48	; 0x30
 80183f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80183f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80183fa:	ebac 0305 	sub.w	r3, ip, r5
 80183fe:	6123      	str	r3, [r4, #16]
 8018400:	f8cd 8000 	str.w	r8, [sp]
 8018404:	463b      	mov	r3, r7
 8018406:	aa03      	add	r2, sp, #12
 8018408:	4621      	mov	r1, r4
 801840a:	4630      	mov	r0, r6
 801840c:	f7ff fef6 	bl	80181fc <_printf_common>
 8018410:	3001      	adds	r0, #1
 8018412:	d14d      	bne.n	80184b0 <_printf_i+0x1c8>
 8018414:	f04f 30ff 	mov.w	r0, #4294967295
 8018418:	b005      	add	sp, #20
 801841a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801841e:	4839      	ldr	r0, [pc, #228]	; (8018504 <_printf_i+0x21c>)
 8018420:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8018424:	6813      	ldr	r3, [r2, #0]
 8018426:	6821      	ldr	r1, [r4, #0]
 8018428:	1d1d      	adds	r5, r3, #4
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	6015      	str	r5, [r2, #0]
 801842e:	060a      	lsls	r2, r1, #24
 8018430:	d50b      	bpl.n	801844a <_printf_i+0x162>
 8018432:	07ca      	lsls	r2, r1, #31
 8018434:	bf44      	itt	mi
 8018436:	f041 0120 	orrmi.w	r1, r1, #32
 801843a:	6021      	strmi	r1, [r4, #0]
 801843c:	b91b      	cbnz	r3, 8018446 <_printf_i+0x15e>
 801843e:	6822      	ldr	r2, [r4, #0]
 8018440:	f022 0220 	bic.w	r2, r2, #32
 8018444:	6022      	str	r2, [r4, #0]
 8018446:	2210      	movs	r2, #16
 8018448:	e7b7      	b.n	80183ba <_printf_i+0xd2>
 801844a:	064d      	lsls	r5, r1, #25
 801844c:	bf48      	it	mi
 801844e:	b29b      	uxthmi	r3, r3
 8018450:	e7ef      	b.n	8018432 <_printf_i+0x14a>
 8018452:	4665      	mov	r5, ip
 8018454:	fbb3 f1f2 	udiv	r1, r3, r2
 8018458:	fb02 3311 	mls	r3, r2, r1, r3
 801845c:	5cc3      	ldrb	r3, [r0, r3]
 801845e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8018462:	460b      	mov	r3, r1
 8018464:	2900      	cmp	r1, #0
 8018466:	d1f5      	bne.n	8018454 <_printf_i+0x16c>
 8018468:	e7b9      	b.n	80183de <_printf_i+0xf6>
 801846a:	6813      	ldr	r3, [r2, #0]
 801846c:	6825      	ldr	r5, [r4, #0]
 801846e:	6961      	ldr	r1, [r4, #20]
 8018470:	1d18      	adds	r0, r3, #4
 8018472:	6010      	str	r0, [r2, #0]
 8018474:	0628      	lsls	r0, r5, #24
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	d501      	bpl.n	801847e <_printf_i+0x196>
 801847a:	6019      	str	r1, [r3, #0]
 801847c:	e002      	b.n	8018484 <_printf_i+0x19c>
 801847e:	066a      	lsls	r2, r5, #25
 8018480:	d5fb      	bpl.n	801847a <_printf_i+0x192>
 8018482:	8019      	strh	r1, [r3, #0]
 8018484:	2300      	movs	r3, #0
 8018486:	6123      	str	r3, [r4, #16]
 8018488:	4665      	mov	r5, ip
 801848a:	e7b9      	b.n	8018400 <_printf_i+0x118>
 801848c:	6813      	ldr	r3, [r2, #0]
 801848e:	1d19      	adds	r1, r3, #4
 8018490:	6011      	str	r1, [r2, #0]
 8018492:	681d      	ldr	r5, [r3, #0]
 8018494:	6862      	ldr	r2, [r4, #4]
 8018496:	2100      	movs	r1, #0
 8018498:	4628      	mov	r0, r5
 801849a:	f7e7 ff21 	bl	80002e0 <memchr>
 801849e:	b108      	cbz	r0, 80184a4 <_printf_i+0x1bc>
 80184a0:	1b40      	subs	r0, r0, r5
 80184a2:	6060      	str	r0, [r4, #4]
 80184a4:	6863      	ldr	r3, [r4, #4]
 80184a6:	6123      	str	r3, [r4, #16]
 80184a8:	2300      	movs	r3, #0
 80184aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80184ae:	e7a7      	b.n	8018400 <_printf_i+0x118>
 80184b0:	6923      	ldr	r3, [r4, #16]
 80184b2:	462a      	mov	r2, r5
 80184b4:	4639      	mov	r1, r7
 80184b6:	4630      	mov	r0, r6
 80184b8:	47c0      	blx	r8
 80184ba:	3001      	adds	r0, #1
 80184bc:	d0aa      	beq.n	8018414 <_printf_i+0x12c>
 80184be:	6823      	ldr	r3, [r4, #0]
 80184c0:	079b      	lsls	r3, r3, #30
 80184c2:	d413      	bmi.n	80184ec <_printf_i+0x204>
 80184c4:	68e0      	ldr	r0, [r4, #12]
 80184c6:	9b03      	ldr	r3, [sp, #12]
 80184c8:	4298      	cmp	r0, r3
 80184ca:	bfb8      	it	lt
 80184cc:	4618      	movlt	r0, r3
 80184ce:	e7a3      	b.n	8018418 <_printf_i+0x130>
 80184d0:	2301      	movs	r3, #1
 80184d2:	464a      	mov	r2, r9
 80184d4:	4639      	mov	r1, r7
 80184d6:	4630      	mov	r0, r6
 80184d8:	47c0      	blx	r8
 80184da:	3001      	adds	r0, #1
 80184dc:	d09a      	beq.n	8018414 <_printf_i+0x12c>
 80184de:	3501      	adds	r5, #1
 80184e0:	68e3      	ldr	r3, [r4, #12]
 80184e2:	9a03      	ldr	r2, [sp, #12]
 80184e4:	1a9b      	subs	r3, r3, r2
 80184e6:	42ab      	cmp	r3, r5
 80184e8:	dcf2      	bgt.n	80184d0 <_printf_i+0x1e8>
 80184ea:	e7eb      	b.n	80184c4 <_printf_i+0x1dc>
 80184ec:	2500      	movs	r5, #0
 80184ee:	f104 0919 	add.w	r9, r4, #25
 80184f2:	e7f5      	b.n	80184e0 <_printf_i+0x1f8>
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d1ac      	bne.n	8018452 <_printf_i+0x16a>
 80184f8:	7803      	ldrb	r3, [r0, #0]
 80184fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80184fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018502:	e76c      	b.n	80183de <_printf_i+0xf6>
 8018504:	0801addd 	.word	0x0801addd
 8018508:	0801adee 	.word	0x0801adee

0801850c <_sbrk_r>:
 801850c:	b538      	push	{r3, r4, r5, lr}
 801850e:	4c06      	ldr	r4, [pc, #24]	; (8018528 <_sbrk_r+0x1c>)
 8018510:	2300      	movs	r3, #0
 8018512:	4605      	mov	r5, r0
 8018514:	4608      	mov	r0, r1
 8018516:	6023      	str	r3, [r4, #0]
 8018518:	f7e8 fd06 	bl	8000f28 <_sbrk>
 801851c:	1c43      	adds	r3, r0, #1
 801851e:	d102      	bne.n	8018526 <_sbrk_r+0x1a>
 8018520:	6823      	ldr	r3, [r4, #0]
 8018522:	b103      	cbz	r3, 8018526 <_sbrk_r+0x1a>
 8018524:	602b      	str	r3, [r5, #0]
 8018526:	bd38      	pop	{r3, r4, r5, pc}
 8018528:	24024e68 	.word	0x24024e68

0801852c <__sread>:
 801852c:	b510      	push	{r4, lr}
 801852e:	460c      	mov	r4, r1
 8018530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018534:	f000 fa96 	bl	8018a64 <_read_r>
 8018538:	2800      	cmp	r0, #0
 801853a:	bfab      	itete	ge
 801853c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801853e:	89a3      	ldrhlt	r3, [r4, #12]
 8018540:	181b      	addge	r3, r3, r0
 8018542:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018546:	bfac      	ite	ge
 8018548:	6563      	strge	r3, [r4, #84]	; 0x54
 801854a:	81a3      	strhlt	r3, [r4, #12]
 801854c:	bd10      	pop	{r4, pc}

0801854e <__swrite>:
 801854e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018552:	461f      	mov	r7, r3
 8018554:	898b      	ldrh	r3, [r1, #12]
 8018556:	05db      	lsls	r3, r3, #23
 8018558:	4605      	mov	r5, r0
 801855a:	460c      	mov	r4, r1
 801855c:	4616      	mov	r6, r2
 801855e:	d505      	bpl.n	801856c <__swrite+0x1e>
 8018560:	2302      	movs	r3, #2
 8018562:	2200      	movs	r2, #0
 8018564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018568:	f000 f9b6 	bl	80188d8 <_lseek_r>
 801856c:	89a3      	ldrh	r3, [r4, #12]
 801856e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018572:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018576:	81a3      	strh	r3, [r4, #12]
 8018578:	4632      	mov	r2, r6
 801857a:	463b      	mov	r3, r7
 801857c:	4628      	mov	r0, r5
 801857e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018582:	f000 b869 	b.w	8018658 <_write_r>

08018586 <__sseek>:
 8018586:	b510      	push	{r4, lr}
 8018588:	460c      	mov	r4, r1
 801858a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801858e:	f000 f9a3 	bl	80188d8 <_lseek_r>
 8018592:	1c43      	adds	r3, r0, #1
 8018594:	89a3      	ldrh	r3, [r4, #12]
 8018596:	bf15      	itete	ne
 8018598:	6560      	strne	r0, [r4, #84]	; 0x54
 801859a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801859e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80185a2:	81a3      	strheq	r3, [r4, #12]
 80185a4:	bf18      	it	ne
 80185a6:	81a3      	strhne	r3, [r4, #12]
 80185a8:	bd10      	pop	{r4, pc}

080185aa <__sclose>:
 80185aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80185ae:	f000 b8d3 	b.w	8018758 <_close_r>
	...

080185b4 <__swbuf_r>:
 80185b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185b6:	460e      	mov	r6, r1
 80185b8:	4614      	mov	r4, r2
 80185ba:	4605      	mov	r5, r0
 80185bc:	b118      	cbz	r0, 80185c6 <__swbuf_r+0x12>
 80185be:	6983      	ldr	r3, [r0, #24]
 80185c0:	b90b      	cbnz	r3, 80185c6 <__swbuf_r+0x12>
 80185c2:	f7ff fbf7 	bl	8017db4 <__sinit>
 80185c6:	4b21      	ldr	r3, [pc, #132]	; (801864c <__swbuf_r+0x98>)
 80185c8:	429c      	cmp	r4, r3
 80185ca:	d12a      	bne.n	8018622 <__swbuf_r+0x6e>
 80185cc:	686c      	ldr	r4, [r5, #4]
 80185ce:	69a3      	ldr	r3, [r4, #24]
 80185d0:	60a3      	str	r3, [r4, #8]
 80185d2:	89a3      	ldrh	r3, [r4, #12]
 80185d4:	071a      	lsls	r2, r3, #28
 80185d6:	d52e      	bpl.n	8018636 <__swbuf_r+0x82>
 80185d8:	6923      	ldr	r3, [r4, #16]
 80185da:	b363      	cbz	r3, 8018636 <__swbuf_r+0x82>
 80185dc:	6923      	ldr	r3, [r4, #16]
 80185de:	6820      	ldr	r0, [r4, #0]
 80185e0:	1ac0      	subs	r0, r0, r3
 80185e2:	6963      	ldr	r3, [r4, #20]
 80185e4:	b2f6      	uxtb	r6, r6
 80185e6:	4283      	cmp	r3, r0
 80185e8:	4637      	mov	r7, r6
 80185ea:	dc04      	bgt.n	80185f6 <__swbuf_r+0x42>
 80185ec:	4621      	mov	r1, r4
 80185ee:	4628      	mov	r0, r5
 80185f0:	f000 f948 	bl	8018884 <_fflush_r>
 80185f4:	bb28      	cbnz	r0, 8018642 <__swbuf_r+0x8e>
 80185f6:	68a3      	ldr	r3, [r4, #8]
 80185f8:	3b01      	subs	r3, #1
 80185fa:	60a3      	str	r3, [r4, #8]
 80185fc:	6823      	ldr	r3, [r4, #0]
 80185fe:	1c5a      	adds	r2, r3, #1
 8018600:	6022      	str	r2, [r4, #0]
 8018602:	701e      	strb	r6, [r3, #0]
 8018604:	6963      	ldr	r3, [r4, #20]
 8018606:	3001      	adds	r0, #1
 8018608:	4283      	cmp	r3, r0
 801860a:	d004      	beq.n	8018616 <__swbuf_r+0x62>
 801860c:	89a3      	ldrh	r3, [r4, #12]
 801860e:	07db      	lsls	r3, r3, #31
 8018610:	d519      	bpl.n	8018646 <__swbuf_r+0x92>
 8018612:	2e0a      	cmp	r6, #10
 8018614:	d117      	bne.n	8018646 <__swbuf_r+0x92>
 8018616:	4621      	mov	r1, r4
 8018618:	4628      	mov	r0, r5
 801861a:	f000 f933 	bl	8018884 <_fflush_r>
 801861e:	b190      	cbz	r0, 8018646 <__swbuf_r+0x92>
 8018620:	e00f      	b.n	8018642 <__swbuf_r+0x8e>
 8018622:	4b0b      	ldr	r3, [pc, #44]	; (8018650 <__swbuf_r+0x9c>)
 8018624:	429c      	cmp	r4, r3
 8018626:	d101      	bne.n	801862c <__swbuf_r+0x78>
 8018628:	68ac      	ldr	r4, [r5, #8]
 801862a:	e7d0      	b.n	80185ce <__swbuf_r+0x1a>
 801862c:	4b09      	ldr	r3, [pc, #36]	; (8018654 <__swbuf_r+0xa0>)
 801862e:	429c      	cmp	r4, r3
 8018630:	bf08      	it	eq
 8018632:	68ec      	ldreq	r4, [r5, #12]
 8018634:	e7cb      	b.n	80185ce <__swbuf_r+0x1a>
 8018636:	4621      	mov	r1, r4
 8018638:	4628      	mov	r0, r5
 801863a:	f000 f81f 	bl	801867c <__swsetup_r>
 801863e:	2800      	cmp	r0, #0
 8018640:	d0cc      	beq.n	80185dc <__swbuf_r+0x28>
 8018642:	f04f 37ff 	mov.w	r7, #4294967295
 8018646:	4638      	mov	r0, r7
 8018648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801864a:	bf00      	nop
 801864c:	0801ad8c 	.word	0x0801ad8c
 8018650:	0801adac 	.word	0x0801adac
 8018654:	0801ad6c 	.word	0x0801ad6c

08018658 <_write_r>:
 8018658:	b538      	push	{r3, r4, r5, lr}
 801865a:	4c07      	ldr	r4, [pc, #28]	; (8018678 <_write_r+0x20>)
 801865c:	4605      	mov	r5, r0
 801865e:	4608      	mov	r0, r1
 8018660:	4611      	mov	r1, r2
 8018662:	2200      	movs	r2, #0
 8018664:	6022      	str	r2, [r4, #0]
 8018666:	461a      	mov	r2, r3
 8018668:	f7e8 fc0d 	bl	8000e86 <_write>
 801866c:	1c43      	adds	r3, r0, #1
 801866e:	d102      	bne.n	8018676 <_write_r+0x1e>
 8018670:	6823      	ldr	r3, [r4, #0]
 8018672:	b103      	cbz	r3, 8018676 <_write_r+0x1e>
 8018674:	602b      	str	r3, [r5, #0]
 8018676:	bd38      	pop	{r3, r4, r5, pc}
 8018678:	24024e68 	.word	0x24024e68

0801867c <__swsetup_r>:
 801867c:	4b32      	ldr	r3, [pc, #200]	; (8018748 <__swsetup_r+0xcc>)
 801867e:	b570      	push	{r4, r5, r6, lr}
 8018680:	681d      	ldr	r5, [r3, #0]
 8018682:	4606      	mov	r6, r0
 8018684:	460c      	mov	r4, r1
 8018686:	b125      	cbz	r5, 8018692 <__swsetup_r+0x16>
 8018688:	69ab      	ldr	r3, [r5, #24]
 801868a:	b913      	cbnz	r3, 8018692 <__swsetup_r+0x16>
 801868c:	4628      	mov	r0, r5
 801868e:	f7ff fb91 	bl	8017db4 <__sinit>
 8018692:	4b2e      	ldr	r3, [pc, #184]	; (801874c <__swsetup_r+0xd0>)
 8018694:	429c      	cmp	r4, r3
 8018696:	d10f      	bne.n	80186b8 <__swsetup_r+0x3c>
 8018698:	686c      	ldr	r4, [r5, #4]
 801869a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801869e:	b29a      	uxth	r2, r3
 80186a0:	0715      	lsls	r5, r2, #28
 80186a2:	d42c      	bmi.n	80186fe <__swsetup_r+0x82>
 80186a4:	06d0      	lsls	r0, r2, #27
 80186a6:	d411      	bmi.n	80186cc <__swsetup_r+0x50>
 80186a8:	2209      	movs	r2, #9
 80186aa:	6032      	str	r2, [r6, #0]
 80186ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80186b0:	81a3      	strh	r3, [r4, #12]
 80186b2:	f04f 30ff 	mov.w	r0, #4294967295
 80186b6:	e03e      	b.n	8018736 <__swsetup_r+0xba>
 80186b8:	4b25      	ldr	r3, [pc, #148]	; (8018750 <__swsetup_r+0xd4>)
 80186ba:	429c      	cmp	r4, r3
 80186bc:	d101      	bne.n	80186c2 <__swsetup_r+0x46>
 80186be:	68ac      	ldr	r4, [r5, #8]
 80186c0:	e7eb      	b.n	801869a <__swsetup_r+0x1e>
 80186c2:	4b24      	ldr	r3, [pc, #144]	; (8018754 <__swsetup_r+0xd8>)
 80186c4:	429c      	cmp	r4, r3
 80186c6:	bf08      	it	eq
 80186c8:	68ec      	ldreq	r4, [r5, #12]
 80186ca:	e7e6      	b.n	801869a <__swsetup_r+0x1e>
 80186cc:	0751      	lsls	r1, r2, #29
 80186ce:	d512      	bpl.n	80186f6 <__swsetup_r+0x7a>
 80186d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80186d2:	b141      	cbz	r1, 80186e6 <__swsetup_r+0x6a>
 80186d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80186d8:	4299      	cmp	r1, r3
 80186da:	d002      	beq.n	80186e2 <__swsetup_r+0x66>
 80186dc:	4630      	mov	r0, r6
 80186de:	f000 f973 	bl	80189c8 <_free_r>
 80186e2:	2300      	movs	r3, #0
 80186e4:	6363      	str	r3, [r4, #52]	; 0x34
 80186e6:	89a3      	ldrh	r3, [r4, #12]
 80186e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80186ec:	81a3      	strh	r3, [r4, #12]
 80186ee:	2300      	movs	r3, #0
 80186f0:	6063      	str	r3, [r4, #4]
 80186f2:	6923      	ldr	r3, [r4, #16]
 80186f4:	6023      	str	r3, [r4, #0]
 80186f6:	89a3      	ldrh	r3, [r4, #12]
 80186f8:	f043 0308 	orr.w	r3, r3, #8
 80186fc:	81a3      	strh	r3, [r4, #12]
 80186fe:	6923      	ldr	r3, [r4, #16]
 8018700:	b94b      	cbnz	r3, 8018716 <__swsetup_r+0x9a>
 8018702:	89a3      	ldrh	r3, [r4, #12]
 8018704:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801870c:	d003      	beq.n	8018716 <__swsetup_r+0x9a>
 801870e:	4621      	mov	r1, r4
 8018710:	4630      	mov	r0, r6
 8018712:	f000 f917 	bl	8018944 <__smakebuf_r>
 8018716:	89a2      	ldrh	r2, [r4, #12]
 8018718:	f012 0301 	ands.w	r3, r2, #1
 801871c:	d00c      	beq.n	8018738 <__swsetup_r+0xbc>
 801871e:	2300      	movs	r3, #0
 8018720:	60a3      	str	r3, [r4, #8]
 8018722:	6963      	ldr	r3, [r4, #20]
 8018724:	425b      	negs	r3, r3
 8018726:	61a3      	str	r3, [r4, #24]
 8018728:	6923      	ldr	r3, [r4, #16]
 801872a:	b953      	cbnz	r3, 8018742 <__swsetup_r+0xc6>
 801872c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018730:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8018734:	d1ba      	bne.n	80186ac <__swsetup_r+0x30>
 8018736:	bd70      	pop	{r4, r5, r6, pc}
 8018738:	0792      	lsls	r2, r2, #30
 801873a:	bf58      	it	pl
 801873c:	6963      	ldrpl	r3, [r4, #20]
 801873e:	60a3      	str	r3, [r4, #8]
 8018740:	e7f2      	b.n	8018728 <__swsetup_r+0xac>
 8018742:	2000      	movs	r0, #0
 8018744:	e7f7      	b.n	8018736 <__swsetup_r+0xba>
 8018746:	bf00      	nop
 8018748:	2400002c 	.word	0x2400002c
 801874c:	0801ad8c 	.word	0x0801ad8c
 8018750:	0801adac 	.word	0x0801adac
 8018754:	0801ad6c 	.word	0x0801ad6c

08018758 <_close_r>:
 8018758:	b538      	push	{r3, r4, r5, lr}
 801875a:	4c06      	ldr	r4, [pc, #24]	; (8018774 <_close_r+0x1c>)
 801875c:	2300      	movs	r3, #0
 801875e:	4605      	mov	r5, r0
 8018760:	4608      	mov	r0, r1
 8018762:	6023      	str	r3, [r4, #0]
 8018764:	f7e8 fbab 	bl	8000ebe <_close>
 8018768:	1c43      	adds	r3, r0, #1
 801876a:	d102      	bne.n	8018772 <_close_r+0x1a>
 801876c:	6823      	ldr	r3, [r4, #0]
 801876e:	b103      	cbz	r3, 8018772 <_close_r+0x1a>
 8018770:	602b      	str	r3, [r5, #0]
 8018772:	bd38      	pop	{r3, r4, r5, pc}
 8018774:	24024e68 	.word	0x24024e68

08018778 <__sflush_r>:
 8018778:	898a      	ldrh	r2, [r1, #12]
 801877a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801877e:	4605      	mov	r5, r0
 8018780:	0710      	lsls	r0, r2, #28
 8018782:	460c      	mov	r4, r1
 8018784:	d458      	bmi.n	8018838 <__sflush_r+0xc0>
 8018786:	684b      	ldr	r3, [r1, #4]
 8018788:	2b00      	cmp	r3, #0
 801878a:	dc05      	bgt.n	8018798 <__sflush_r+0x20>
 801878c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801878e:	2b00      	cmp	r3, #0
 8018790:	dc02      	bgt.n	8018798 <__sflush_r+0x20>
 8018792:	2000      	movs	r0, #0
 8018794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801879a:	2e00      	cmp	r6, #0
 801879c:	d0f9      	beq.n	8018792 <__sflush_r+0x1a>
 801879e:	2300      	movs	r3, #0
 80187a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80187a4:	682f      	ldr	r7, [r5, #0]
 80187a6:	6a21      	ldr	r1, [r4, #32]
 80187a8:	602b      	str	r3, [r5, #0]
 80187aa:	d032      	beq.n	8018812 <__sflush_r+0x9a>
 80187ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80187ae:	89a3      	ldrh	r3, [r4, #12]
 80187b0:	075a      	lsls	r2, r3, #29
 80187b2:	d505      	bpl.n	80187c0 <__sflush_r+0x48>
 80187b4:	6863      	ldr	r3, [r4, #4]
 80187b6:	1ac0      	subs	r0, r0, r3
 80187b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80187ba:	b10b      	cbz	r3, 80187c0 <__sflush_r+0x48>
 80187bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80187be:	1ac0      	subs	r0, r0, r3
 80187c0:	2300      	movs	r3, #0
 80187c2:	4602      	mov	r2, r0
 80187c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80187c6:	6a21      	ldr	r1, [r4, #32]
 80187c8:	4628      	mov	r0, r5
 80187ca:	47b0      	blx	r6
 80187cc:	1c43      	adds	r3, r0, #1
 80187ce:	89a3      	ldrh	r3, [r4, #12]
 80187d0:	d106      	bne.n	80187e0 <__sflush_r+0x68>
 80187d2:	6829      	ldr	r1, [r5, #0]
 80187d4:	291d      	cmp	r1, #29
 80187d6:	d848      	bhi.n	801886a <__sflush_r+0xf2>
 80187d8:	4a29      	ldr	r2, [pc, #164]	; (8018880 <__sflush_r+0x108>)
 80187da:	40ca      	lsrs	r2, r1
 80187dc:	07d6      	lsls	r6, r2, #31
 80187de:	d544      	bpl.n	801886a <__sflush_r+0xf2>
 80187e0:	2200      	movs	r2, #0
 80187e2:	6062      	str	r2, [r4, #4]
 80187e4:	04d9      	lsls	r1, r3, #19
 80187e6:	6922      	ldr	r2, [r4, #16]
 80187e8:	6022      	str	r2, [r4, #0]
 80187ea:	d504      	bpl.n	80187f6 <__sflush_r+0x7e>
 80187ec:	1c42      	adds	r2, r0, #1
 80187ee:	d101      	bne.n	80187f4 <__sflush_r+0x7c>
 80187f0:	682b      	ldr	r3, [r5, #0]
 80187f2:	b903      	cbnz	r3, 80187f6 <__sflush_r+0x7e>
 80187f4:	6560      	str	r0, [r4, #84]	; 0x54
 80187f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80187f8:	602f      	str	r7, [r5, #0]
 80187fa:	2900      	cmp	r1, #0
 80187fc:	d0c9      	beq.n	8018792 <__sflush_r+0x1a>
 80187fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018802:	4299      	cmp	r1, r3
 8018804:	d002      	beq.n	801880c <__sflush_r+0x94>
 8018806:	4628      	mov	r0, r5
 8018808:	f000 f8de 	bl	80189c8 <_free_r>
 801880c:	2000      	movs	r0, #0
 801880e:	6360      	str	r0, [r4, #52]	; 0x34
 8018810:	e7c0      	b.n	8018794 <__sflush_r+0x1c>
 8018812:	2301      	movs	r3, #1
 8018814:	4628      	mov	r0, r5
 8018816:	47b0      	blx	r6
 8018818:	1c41      	adds	r1, r0, #1
 801881a:	d1c8      	bne.n	80187ae <__sflush_r+0x36>
 801881c:	682b      	ldr	r3, [r5, #0]
 801881e:	2b00      	cmp	r3, #0
 8018820:	d0c5      	beq.n	80187ae <__sflush_r+0x36>
 8018822:	2b1d      	cmp	r3, #29
 8018824:	d001      	beq.n	801882a <__sflush_r+0xb2>
 8018826:	2b16      	cmp	r3, #22
 8018828:	d101      	bne.n	801882e <__sflush_r+0xb6>
 801882a:	602f      	str	r7, [r5, #0]
 801882c:	e7b1      	b.n	8018792 <__sflush_r+0x1a>
 801882e:	89a3      	ldrh	r3, [r4, #12]
 8018830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018834:	81a3      	strh	r3, [r4, #12]
 8018836:	e7ad      	b.n	8018794 <__sflush_r+0x1c>
 8018838:	690f      	ldr	r7, [r1, #16]
 801883a:	2f00      	cmp	r7, #0
 801883c:	d0a9      	beq.n	8018792 <__sflush_r+0x1a>
 801883e:	0793      	lsls	r3, r2, #30
 8018840:	680e      	ldr	r6, [r1, #0]
 8018842:	bf08      	it	eq
 8018844:	694b      	ldreq	r3, [r1, #20]
 8018846:	600f      	str	r7, [r1, #0]
 8018848:	bf18      	it	ne
 801884a:	2300      	movne	r3, #0
 801884c:	eba6 0807 	sub.w	r8, r6, r7
 8018850:	608b      	str	r3, [r1, #8]
 8018852:	f1b8 0f00 	cmp.w	r8, #0
 8018856:	dd9c      	ble.n	8018792 <__sflush_r+0x1a>
 8018858:	4643      	mov	r3, r8
 801885a:	463a      	mov	r2, r7
 801885c:	6a21      	ldr	r1, [r4, #32]
 801885e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018860:	4628      	mov	r0, r5
 8018862:	47b0      	blx	r6
 8018864:	2800      	cmp	r0, #0
 8018866:	dc06      	bgt.n	8018876 <__sflush_r+0xfe>
 8018868:	89a3      	ldrh	r3, [r4, #12]
 801886a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801886e:	81a3      	strh	r3, [r4, #12]
 8018870:	f04f 30ff 	mov.w	r0, #4294967295
 8018874:	e78e      	b.n	8018794 <__sflush_r+0x1c>
 8018876:	4407      	add	r7, r0
 8018878:	eba8 0800 	sub.w	r8, r8, r0
 801887c:	e7e9      	b.n	8018852 <__sflush_r+0xda>
 801887e:	bf00      	nop
 8018880:	20400001 	.word	0x20400001

08018884 <_fflush_r>:
 8018884:	b538      	push	{r3, r4, r5, lr}
 8018886:	690b      	ldr	r3, [r1, #16]
 8018888:	4605      	mov	r5, r0
 801888a:	460c      	mov	r4, r1
 801888c:	b1db      	cbz	r3, 80188c6 <_fflush_r+0x42>
 801888e:	b118      	cbz	r0, 8018898 <_fflush_r+0x14>
 8018890:	6983      	ldr	r3, [r0, #24]
 8018892:	b90b      	cbnz	r3, 8018898 <_fflush_r+0x14>
 8018894:	f7ff fa8e 	bl	8017db4 <__sinit>
 8018898:	4b0c      	ldr	r3, [pc, #48]	; (80188cc <_fflush_r+0x48>)
 801889a:	429c      	cmp	r4, r3
 801889c:	d109      	bne.n	80188b2 <_fflush_r+0x2e>
 801889e:	686c      	ldr	r4, [r5, #4]
 80188a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188a4:	b17b      	cbz	r3, 80188c6 <_fflush_r+0x42>
 80188a6:	4621      	mov	r1, r4
 80188a8:	4628      	mov	r0, r5
 80188aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80188ae:	f7ff bf63 	b.w	8018778 <__sflush_r>
 80188b2:	4b07      	ldr	r3, [pc, #28]	; (80188d0 <_fflush_r+0x4c>)
 80188b4:	429c      	cmp	r4, r3
 80188b6:	d101      	bne.n	80188bc <_fflush_r+0x38>
 80188b8:	68ac      	ldr	r4, [r5, #8]
 80188ba:	e7f1      	b.n	80188a0 <_fflush_r+0x1c>
 80188bc:	4b05      	ldr	r3, [pc, #20]	; (80188d4 <_fflush_r+0x50>)
 80188be:	429c      	cmp	r4, r3
 80188c0:	bf08      	it	eq
 80188c2:	68ec      	ldreq	r4, [r5, #12]
 80188c4:	e7ec      	b.n	80188a0 <_fflush_r+0x1c>
 80188c6:	2000      	movs	r0, #0
 80188c8:	bd38      	pop	{r3, r4, r5, pc}
 80188ca:	bf00      	nop
 80188cc:	0801ad8c 	.word	0x0801ad8c
 80188d0:	0801adac 	.word	0x0801adac
 80188d4:	0801ad6c 	.word	0x0801ad6c

080188d8 <_lseek_r>:
 80188d8:	b538      	push	{r3, r4, r5, lr}
 80188da:	4c07      	ldr	r4, [pc, #28]	; (80188f8 <_lseek_r+0x20>)
 80188dc:	4605      	mov	r5, r0
 80188de:	4608      	mov	r0, r1
 80188e0:	4611      	mov	r1, r2
 80188e2:	2200      	movs	r2, #0
 80188e4:	6022      	str	r2, [r4, #0]
 80188e6:	461a      	mov	r2, r3
 80188e8:	f7e8 fb10 	bl	8000f0c <_lseek>
 80188ec:	1c43      	adds	r3, r0, #1
 80188ee:	d102      	bne.n	80188f6 <_lseek_r+0x1e>
 80188f0:	6823      	ldr	r3, [r4, #0]
 80188f2:	b103      	cbz	r3, 80188f6 <_lseek_r+0x1e>
 80188f4:	602b      	str	r3, [r5, #0]
 80188f6:	bd38      	pop	{r3, r4, r5, pc}
 80188f8:	24024e68 	.word	0x24024e68

080188fc <__swhatbuf_r>:
 80188fc:	b570      	push	{r4, r5, r6, lr}
 80188fe:	460e      	mov	r6, r1
 8018900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018904:	2900      	cmp	r1, #0
 8018906:	b096      	sub	sp, #88	; 0x58
 8018908:	4614      	mov	r4, r2
 801890a:	461d      	mov	r5, r3
 801890c:	da07      	bge.n	801891e <__swhatbuf_r+0x22>
 801890e:	2300      	movs	r3, #0
 8018910:	602b      	str	r3, [r5, #0]
 8018912:	89b3      	ldrh	r3, [r6, #12]
 8018914:	061a      	lsls	r2, r3, #24
 8018916:	d410      	bmi.n	801893a <__swhatbuf_r+0x3e>
 8018918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801891c:	e00e      	b.n	801893c <__swhatbuf_r+0x40>
 801891e:	466a      	mov	r2, sp
 8018920:	f000 f8b2 	bl	8018a88 <_fstat_r>
 8018924:	2800      	cmp	r0, #0
 8018926:	dbf2      	blt.n	801890e <__swhatbuf_r+0x12>
 8018928:	9a01      	ldr	r2, [sp, #4]
 801892a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801892e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018932:	425a      	negs	r2, r3
 8018934:	415a      	adcs	r2, r3
 8018936:	602a      	str	r2, [r5, #0]
 8018938:	e7ee      	b.n	8018918 <__swhatbuf_r+0x1c>
 801893a:	2340      	movs	r3, #64	; 0x40
 801893c:	2000      	movs	r0, #0
 801893e:	6023      	str	r3, [r4, #0]
 8018940:	b016      	add	sp, #88	; 0x58
 8018942:	bd70      	pop	{r4, r5, r6, pc}

08018944 <__smakebuf_r>:
 8018944:	898b      	ldrh	r3, [r1, #12]
 8018946:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018948:	079d      	lsls	r5, r3, #30
 801894a:	4606      	mov	r6, r0
 801894c:	460c      	mov	r4, r1
 801894e:	d507      	bpl.n	8018960 <__smakebuf_r+0x1c>
 8018950:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018954:	6023      	str	r3, [r4, #0]
 8018956:	6123      	str	r3, [r4, #16]
 8018958:	2301      	movs	r3, #1
 801895a:	6163      	str	r3, [r4, #20]
 801895c:	b002      	add	sp, #8
 801895e:	bd70      	pop	{r4, r5, r6, pc}
 8018960:	ab01      	add	r3, sp, #4
 8018962:	466a      	mov	r2, sp
 8018964:	f7ff ffca 	bl	80188fc <__swhatbuf_r>
 8018968:	9900      	ldr	r1, [sp, #0]
 801896a:	4605      	mov	r5, r0
 801896c:	4630      	mov	r0, r6
 801896e:	f7ff faab 	bl	8017ec8 <_malloc_r>
 8018972:	b948      	cbnz	r0, 8018988 <__smakebuf_r+0x44>
 8018974:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018978:	059a      	lsls	r2, r3, #22
 801897a:	d4ef      	bmi.n	801895c <__smakebuf_r+0x18>
 801897c:	f023 0303 	bic.w	r3, r3, #3
 8018980:	f043 0302 	orr.w	r3, r3, #2
 8018984:	81a3      	strh	r3, [r4, #12]
 8018986:	e7e3      	b.n	8018950 <__smakebuf_r+0xc>
 8018988:	4b0d      	ldr	r3, [pc, #52]	; (80189c0 <__smakebuf_r+0x7c>)
 801898a:	62b3      	str	r3, [r6, #40]	; 0x28
 801898c:	89a3      	ldrh	r3, [r4, #12]
 801898e:	6020      	str	r0, [r4, #0]
 8018990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018994:	81a3      	strh	r3, [r4, #12]
 8018996:	9b00      	ldr	r3, [sp, #0]
 8018998:	6163      	str	r3, [r4, #20]
 801899a:	9b01      	ldr	r3, [sp, #4]
 801899c:	6120      	str	r0, [r4, #16]
 801899e:	b15b      	cbz	r3, 80189b8 <__smakebuf_r+0x74>
 80189a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80189a4:	4630      	mov	r0, r6
 80189a6:	f000 f881 	bl	8018aac <_isatty_r>
 80189aa:	b128      	cbz	r0, 80189b8 <__smakebuf_r+0x74>
 80189ac:	89a3      	ldrh	r3, [r4, #12]
 80189ae:	f023 0303 	bic.w	r3, r3, #3
 80189b2:	f043 0301 	orr.w	r3, r3, #1
 80189b6:	81a3      	strh	r3, [r4, #12]
 80189b8:	89a3      	ldrh	r3, [r4, #12]
 80189ba:	431d      	orrs	r5, r3
 80189bc:	81a5      	strh	r5, [r4, #12]
 80189be:	e7cd      	b.n	801895c <__smakebuf_r+0x18>
 80189c0:	08017d7d 	.word	0x08017d7d

080189c4 <__malloc_lock>:
 80189c4:	4770      	bx	lr

080189c6 <__malloc_unlock>:
 80189c6:	4770      	bx	lr

080189c8 <_free_r>:
 80189c8:	b538      	push	{r3, r4, r5, lr}
 80189ca:	4605      	mov	r5, r0
 80189cc:	2900      	cmp	r1, #0
 80189ce:	d045      	beq.n	8018a5c <_free_r+0x94>
 80189d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80189d4:	1f0c      	subs	r4, r1, #4
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	bfb8      	it	lt
 80189da:	18e4      	addlt	r4, r4, r3
 80189dc:	f7ff fff2 	bl	80189c4 <__malloc_lock>
 80189e0:	4a1f      	ldr	r2, [pc, #124]	; (8018a60 <_free_r+0x98>)
 80189e2:	6813      	ldr	r3, [r2, #0]
 80189e4:	4610      	mov	r0, r2
 80189e6:	b933      	cbnz	r3, 80189f6 <_free_r+0x2e>
 80189e8:	6063      	str	r3, [r4, #4]
 80189ea:	6014      	str	r4, [r2, #0]
 80189ec:	4628      	mov	r0, r5
 80189ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80189f2:	f7ff bfe8 	b.w	80189c6 <__malloc_unlock>
 80189f6:	42a3      	cmp	r3, r4
 80189f8:	d90c      	bls.n	8018a14 <_free_r+0x4c>
 80189fa:	6821      	ldr	r1, [r4, #0]
 80189fc:	1862      	adds	r2, r4, r1
 80189fe:	4293      	cmp	r3, r2
 8018a00:	bf04      	itt	eq
 8018a02:	681a      	ldreq	r2, [r3, #0]
 8018a04:	685b      	ldreq	r3, [r3, #4]
 8018a06:	6063      	str	r3, [r4, #4]
 8018a08:	bf04      	itt	eq
 8018a0a:	1852      	addeq	r2, r2, r1
 8018a0c:	6022      	streq	r2, [r4, #0]
 8018a0e:	6004      	str	r4, [r0, #0]
 8018a10:	e7ec      	b.n	80189ec <_free_r+0x24>
 8018a12:	4613      	mov	r3, r2
 8018a14:	685a      	ldr	r2, [r3, #4]
 8018a16:	b10a      	cbz	r2, 8018a1c <_free_r+0x54>
 8018a18:	42a2      	cmp	r2, r4
 8018a1a:	d9fa      	bls.n	8018a12 <_free_r+0x4a>
 8018a1c:	6819      	ldr	r1, [r3, #0]
 8018a1e:	1858      	adds	r0, r3, r1
 8018a20:	42a0      	cmp	r0, r4
 8018a22:	d10b      	bne.n	8018a3c <_free_r+0x74>
 8018a24:	6820      	ldr	r0, [r4, #0]
 8018a26:	4401      	add	r1, r0
 8018a28:	1858      	adds	r0, r3, r1
 8018a2a:	4282      	cmp	r2, r0
 8018a2c:	6019      	str	r1, [r3, #0]
 8018a2e:	d1dd      	bne.n	80189ec <_free_r+0x24>
 8018a30:	6810      	ldr	r0, [r2, #0]
 8018a32:	6852      	ldr	r2, [r2, #4]
 8018a34:	605a      	str	r2, [r3, #4]
 8018a36:	4401      	add	r1, r0
 8018a38:	6019      	str	r1, [r3, #0]
 8018a3a:	e7d7      	b.n	80189ec <_free_r+0x24>
 8018a3c:	d902      	bls.n	8018a44 <_free_r+0x7c>
 8018a3e:	230c      	movs	r3, #12
 8018a40:	602b      	str	r3, [r5, #0]
 8018a42:	e7d3      	b.n	80189ec <_free_r+0x24>
 8018a44:	6820      	ldr	r0, [r4, #0]
 8018a46:	1821      	adds	r1, r4, r0
 8018a48:	428a      	cmp	r2, r1
 8018a4a:	bf04      	itt	eq
 8018a4c:	6811      	ldreq	r1, [r2, #0]
 8018a4e:	6852      	ldreq	r2, [r2, #4]
 8018a50:	6062      	str	r2, [r4, #4]
 8018a52:	bf04      	itt	eq
 8018a54:	1809      	addeq	r1, r1, r0
 8018a56:	6021      	streq	r1, [r4, #0]
 8018a58:	605c      	str	r4, [r3, #4]
 8018a5a:	e7c7      	b.n	80189ec <_free_r+0x24>
 8018a5c:	bd38      	pop	{r3, r4, r5, pc}
 8018a5e:	bf00      	nop
 8018a60:	24021940 	.word	0x24021940

08018a64 <_read_r>:
 8018a64:	b538      	push	{r3, r4, r5, lr}
 8018a66:	4c07      	ldr	r4, [pc, #28]	; (8018a84 <_read_r+0x20>)
 8018a68:	4605      	mov	r5, r0
 8018a6a:	4608      	mov	r0, r1
 8018a6c:	4611      	mov	r1, r2
 8018a6e:	2200      	movs	r2, #0
 8018a70:	6022      	str	r2, [r4, #0]
 8018a72:	461a      	mov	r2, r3
 8018a74:	f7e8 f9ea 	bl	8000e4c <_read>
 8018a78:	1c43      	adds	r3, r0, #1
 8018a7a:	d102      	bne.n	8018a82 <_read_r+0x1e>
 8018a7c:	6823      	ldr	r3, [r4, #0]
 8018a7e:	b103      	cbz	r3, 8018a82 <_read_r+0x1e>
 8018a80:	602b      	str	r3, [r5, #0]
 8018a82:	bd38      	pop	{r3, r4, r5, pc}
 8018a84:	24024e68 	.word	0x24024e68

08018a88 <_fstat_r>:
 8018a88:	b538      	push	{r3, r4, r5, lr}
 8018a8a:	4c07      	ldr	r4, [pc, #28]	; (8018aa8 <_fstat_r+0x20>)
 8018a8c:	2300      	movs	r3, #0
 8018a8e:	4605      	mov	r5, r0
 8018a90:	4608      	mov	r0, r1
 8018a92:	4611      	mov	r1, r2
 8018a94:	6023      	str	r3, [r4, #0]
 8018a96:	f7e8 fa1e 	bl	8000ed6 <_fstat>
 8018a9a:	1c43      	adds	r3, r0, #1
 8018a9c:	d102      	bne.n	8018aa4 <_fstat_r+0x1c>
 8018a9e:	6823      	ldr	r3, [r4, #0]
 8018aa0:	b103      	cbz	r3, 8018aa4 <_fstat_r+0x1c>
 8018aa2:	602b      	str	r3, [r5, #0]
 8018aa4:	bd38      	pop	{r3, r4, r5, pc}
 8018aa6:	bf00      	nop
 8018aa8:	24024e68 	.word	0x24024e68

08018aac <_isatty_r>:
 8018aac:	b538      	push	{r3, r4, r5, lr}
 8018aae:	4c06      	ldr	r4, [pc, #24]	; (8018ac8 <_isatty_r+0x1c>)
 8018ab0:	2300      	movs	r3, #0
 8018ab2:	4605      	mov	r5, r0
 8018ab4:	4608      	mov	r0, r1
 8018ab6:	6023      	str	r3, [r4, #0]
 8018ab8:	f7e8 fa1d 	bl	8000ef6 <_isatty>
 8018abc:	1c43      	adds	r3, r0, #1
 8018abe:	d102      	bne.n	8018ac6 <_isatty_r+0x1a>
 8018ac0:	6823      	ldr	r3, [r4, #0]
 8018ac2:	b103      	cbz	r3, 8018ac6 <_isatty_r+0x1a>
 8018ac4:	602b      	str	r3, [r5, #0]
 8018ac6:	bd38      	pop	{r3, r4, r5, pc}
 8018ac8:	24024e68 	.word	0x24024e68

08018acc <_init>:
 8018acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ace:	bf00      	nop
 8018ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ad2:	bc08      	pop	{r3}
 8018ad4:	469e      	mov	lr, r3
 8018ad6:	4770      	bx	lr

08018ad8 <_fini>:
 8018ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ada:	bf00      	nop
 8018adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ade:	bc08      	pop	{r3}
 8018ae0:	469e      	mov	lr, r3
 8018ae2:	4770      	bx	lr
